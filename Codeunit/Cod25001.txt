OBJECT Codeunit 25001 Kit Sales Line-Reserve
{
  OBJECT-PROPERTIES
  {
    Date=13/02/07;
    Time=12:00:00;
    Version List=KITNA5.00;
  }
  PROPERTIES
  {
    Permissions=TableData 337=rimd,
                TableData 99000850=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Reserved quantity cannot be greater than %1;FRA=La quantit‚ r‚serv‚e ne peut pas ˆtre sup‚rieure … %1.';
      Text002@1001 : TextConst 'ENU=must be filled in when a quantity is reserved;FRA=doit ˆtre renseign‚(e) quand une quantit‚ est r‚serv‚e';
      Text004@1003 : TextConst 'ENU=must not be changed when a quantity is reserved;FRA=ne doit pas ˆtre modifi‚(e) quand une quantit‚ est r‚serv‚e';
      Text005@1004 : TextConst 'ENU=Codeunit is not initialized correctly.;FRA=Le codeunit n''a pas ‚t‚ initialis‚ correctement.';
      Location@1017 : Record 14;
      CreateReservEntry@1005 : Codeunit 99000830;
      ReservEngineMgt@1006 : Codeunit 99000831;
      ReservMgt@1007 : Codeunit 99000845;
      CreatePick@1024 : Codeunit 7312;
      SetFromType@1009 : ' ,Sales,Requisition Line,Purchase,Item Journal,BOM Journal,Item Ledger Entry';
      SetFromSubtype@1010 : Integer;
      SetFromID@1011 : Code[20];
      SetFromBatchName@1012 : Code[10];
      SetFromProdOrderLine@1013 : Integer;
      SetFromRefNo@1014 : Integer;
      SetFromVariantCode@1015 : Code[10];
      SetFromLocationCode@1016 : Code[10];
      SetFromSerialNo@1018 : Code[20];
      SetFromLotNo@1019 : Code[20];
      SetFromQtyPerUOM@1020 : Decimal;
      DeleteItemTracking@1026 : Boolean;

    PROCEDURE CreateReservation@1(VAR KitSalesLine@1000 : Record 25000;Description@1001 : Text[50];ExpectedReceiptDate@1002 : Date;Quantity@1003 : Decimal;ForSerialNo@1005 : Code[20];ForLotNo@1004 : Code[20]);
    VAR
      ShipmentDate@1007 : Date;
      OutBoundQty@1009 : Decimal;
    BEGIN
      IF SetFromType = 0 THEN
        ERROR(Text005);

      KitSalesLine.TESTFIELD(Type,KitSalesLine.Type::Item);
      KitSalesLine.TESTFIELD("No.");
      KitSalesLine.TESTFIELD("Shipment Date");
      KitSalesLine.CALCFIELDS("Reserved Qty. (Base)");
      IF ABS(KitSalesLine."Outstanding Qty. (Base)") < ABS(KitSalesLine."Reserved Qty. (Base)") + Quantity THEN
        ERROR(
          Text000,
          ABS(KitSalesLine."Outstanding Qty. (Base)") - ABS(KitSalesLine."Reserved Qty. (Base)"));

      KitSalesLine.TESTFIELD("Variant Code",SetFromVariantCode);
      KitSalesLine.TESTFIELD("Location Code",SetFromLocationCode);

      ShipmentDate := KitSalesLine."Shipment Date";

      CreateReservEntry.CreateReservEntryFor(
        DATABASE::"Kit Sales Line",KitSalesLine."Document Type",
        KitSalesLine."Document No.",'',KitSalesLine."Document Line No.",
        KitSalesLine."Line No.",KitSalesLine."Qty. per Unit of Measure",
        Quantity,ForSerialNo,ForLotNo);
      CreateReservEntry.CreateReservEntryFrom(
        SetFromType,SetFromSubtype,SetFromID,SetFromBatchName,SetFromProdOrderLine,SetFromRefNo,
        SetFromQtyPerUOM,SetFromSerialNo,SetFromLotNo);
      CreateReservEntry.CreateReservEntry(
        KitSalesLine."No.",KitSalesLine."Variant Code",KitSalesLine."Location Code",
        Description,ExpectedReceiptDate,ShipmentDate,0);

      IF Location.GET(KitSalesLine."Location Code") AND
         (Location."Bin Mandatory" OR Location."Require Pick")
      THEN BEGIN
        OutBoundQty :=
          CreatePick.CheckOutBound(
            DATABASE::"Kit Sales Line",KitSalesLine."Document Type",
            KitSalesLine."Document No.",KitSalesLine."Document Line No.",KitSalesLine."Line No.");
        IF OutBoundQty <> 0 THEN
          CreatePick.AdjustReservation(
            OutBoundQty,DATABASE::"Kit Sales Line",KitSalesLine."Document Type",
            KitSalesLine."Document No.",KitSalesLine."Document Line No.",KitSalesLine."Line No.",0);
      END;

      SetFromType := 0;
    END;

    PROCEDURE CreateReservationSetFrom@7(FromType@1000 : ' ,Sales,Requisition Line,Purchase,Item Journal,BOM Journal,Item Ledger Entry';FromSubtype@1001 : Integer;FromID@1002 : Code[20];FromBatchName@1003 : Code[10];FromProdOrderLine@1004 : Integer;FromRefNo@1005 : Integer;FromVariantCode@1006 : Code[10];FromLocationCode@1007 : Code[10];FromSerialNo@1009 : Code[20];FromLotNo@1010 : Code[20];FromQtyPerUOM@1011 : Decimal);
    BEGIN
      SetFromType := FromType;
      SetFromSubtype := FromSubtype;
      SetFromID := FromID;
      SetFromBatchName := FromBatchName;
      SetFromProdOrderLine := FromProdOrderLine;
      SetFromRefNo := FromRefNo;
      SetFromVariantCode := FromVariantCode;
      SetFromLocationCode := FromLocationCode;
      SetFromSerialNo := FromSerialNo;
      SetFromLotNo := FromLotNo;
      SetFromQtyPerUOM := FromQtyPerUOM;
    END;

    PROCEDURE SetBinding@8(Binding@1000 : ' ,Order-to-Order');
    BEGIN
      CreateReservEntry.SetBinding(Binding);
    END;

    PROCEDURE FilterReservFor@12(VAR FilterReservEntry@1000 : Record 337;KitSalesLine@1001 : Record 25000);
    BEGIN
      FilterReservEntry.SETRANGE("Source Type",DATABASE::"Kit Sales Line");
      FilterReservEntry.SETRANGE("Source Subtype",KitSalesLine."Document Type");
      FilterReservEntry.SETRANGE("Source ID",KitSalesLine."Document No.");
      FilterReservEntry.SETRANGE("Source Batch Name",'');
      FilterReservEntry.SETRANGE("Source Prod. Order Line",KitSalesLine."Document Line No.");
      FilterReservEntry.SETRANGE("Source Ref. No.",KitSalesLine."Line No.");
    END;

    PROCEDURE ReservQuantity@21(KitSalesLine@1001 : Record 25000) QtyToReserve@1000 : Decimal;
    BEGIN
      CASE KitSalesLine."Document Type" OF
        KitSalesLine."Document Type"::Quote,
        KitSalesLine."Document Type"::Order,
        KitSalesLine."Document Type"::Invoice,
        KitSalesLine."Document Type"::"Blanket Order":
          QtyToReserve := KitSalesLine."Outstanding Qty. (Base)";
      END;
    END;

    PROCEDURE Caption@30(KitSalesLine@1001 : Record 25000) CaptionText@1000 : Text[80];
    BEGIN
      CaptionText :=
        STRSUBSTNO('%1 %2 %3 %4',
          KitSalesLine."Document Type",KitSalesLine."Document No.",KitSalesLine."Document Line No.",KitSalesLine."No.");
    END;

    PROCEDURE FindReservEntry@4(KitSalesLine@1000 : Record 25000;VAR ReservEntry@1001 : Record 337) : Boolean;
    BEGIN
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,FALSE);
      FilterReservFor(ReservEntry,KitSalesLine);
      EXIT(ReservEntry.FINDLAST);
    END;

    PROCEDURE ReservEntryExist@17(KitSalesLine@1000 : Record 25000) : Boolean;
    VAR
      ReservEntry@1001 : Record 337;
    BEGIN
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,FALSE);
      FilterReservFor(ReservEntry,KitSalesLine);
      EXIT(NOT ReservEntry.ISEMPTY);
    END;

    PROCEDURE VerifyChange@59(VAR NewKitSalesLine@1000 : Record 25000;VAR OldKitSalesLine@1001 : Record 25000);
    VAR
      KitSalesLine@1005 : Record 25000;
      TempReservEntry@1002 : Record 337;
      ShowError@1003 : Boolean;
      HasError@1004 : Boolean;
    BEGIN
      IF (NewKitSalesLine.Type <> NewKitSalesLine.Type::Item) AND (OldKitSalesLine.Type <> OldKitSalesLine.Type::Item) THEN
        EXIT;
      IF NewKitSalesLine."Line No." = 0 THEN
        IF NOT KitSalesLine.GET(
                 NewKitSalesLine."Document Type",NewKitSalesLine."Document No.",
                 NewKitSalesLine."Document Line No.",NewKitSalesLine."Line No.")
        THEN
          EXIT;

      NewKitSalesLine.CALCFIELDS("Reserved Qty. (Base)");
      ShowError := NewKitSalesLine."Reserved Qty. (Base)" <> 0;

      IF (NewKitSalesLine."Shipment Date" = 0D) AND (OldKitSalesLine."Shipment Date" <> 0D) THEN
        IF ShowError THEN
          NewKitSalesLine.FIELDERROR("Shipment Date",Text002)
        ELSE
          HasError := TRUE;

      IF NewKitSalesLine."No." <> OldKitSalesLine."No." THEN
        IF ShowError THEN
          NewKitSalesLine.FIELDERROR("No.",Text004)
        ELSE
          HasError := TRUE;

      IF NewKitSalesLine."Variant Code" <> OldKitSalesLine."Variant Code" THEN
        IF ShowError THEN
          NewKitSalesLine.FIELDERROR("Variant Code",Text004)
        ELSE
          HasError := TRUE;

      IF NewKitSalesLine."Location Code" <> OldKitSalesLine."Location Code" THEN
        IF ShowError THEN
          NewKitSalesLine.FIELDERROR("Location Code",Text004)
        ELSE
          HasError := TRUE;

      IF NewKitSalesLine."Bin Code" <> OldKitSalesLine."Bin Code" THEN
        IF ShowError THEN
          NewKitSalesLine.FIELDERROR("Bin Code",Text004)
        ELSE
          HasError := TRUE;

      IF NewKitSalesLine."Line No." <> OldKitSalesLine."Line No." THEN
        HasError := TRUE;

      IF HasError THEN
        IF (NewKitSalesLine."No." <> OldKitSalesLine."No.") OR
            FindReservEntry(NewKitSalesLine,TempReservEntry)
        THEN BEGIN
          IF NewKitSalesLine."No." <> OldKitSalesLine."No." THEN BEGIN
            ReservMgt.SetKitSalesLine(OldKitSalesLine);
            ReservMgt.DeleteReservEntries(TRUE,0);
            ReservMgt.SetKitSalesLine(NewKitSalesLine);
          END ELSE BEGIN
            ReservMgt.SetKitSalesLine(NewKitSalesLine);
            ReservMgt.DeleteReservEntries(TRUE,0);
          END;
          ReservMgt.AutoTrack(NewKitSalesLine."Outstanding Qty. (Base)");
        END;
    END;

    PROCEDURE VerifyQuantity@2(VAR NewKitSalesLine@1000 : Record 25000;VAR OldKitSalesLine@1001 : Record 25000);
    VAR
      KitSalesLine@1002 : Record 25000;
      SalesLine@1480000 : Record 37;
    BEGIN
      WITH NewKitSalesLine DO BEGIN
        IF NOT ("Document Type" IN
                ["Document Type"::Quote,"Document Type"::Order])
        THEN BEGIN
          SalesLine.GET("Document Type","Document No.","Document Line No.");
          IF SalesLine."Shipment No." = '' THEN
            EXIT;
        END;
        IF Type <> Type::Item THEN
          EXIT;
        IF "Line No." = OldKitSalesLine."Line No." THEN
          IF "Extended Quantity (Base)" = OldKitSalesLine."Extended Quantity (Base)" THEN
            EXIT;
        IF "Line No." = 0 THEN
          IF NOT KitSalesLine.GET("Document Type","Document No.","Document Line No.","Line No.") THEN
            EXIT;
        ReservMgt.SetKitSalesLine(NewKitSalesLine);
        IF "Qty. per Unit of Measure" <> OldKitSalesLine."Qty. per Unit of Measure" THEN
          ReservMgt.ModifyUnitOfMeasure;
        IF "Outstanding Qty. (Base)" * OldKitSalesLine."Outstanding Qty. (Base)" < 0 THEN
          ReservMgt.DeleteReservEntries(TRUE,0)
        ELSE
          ReservMgt.DeleteReservEntries(FALSE,"Outstanding Qty. (Base)");
        ReservMgt.ClearSurplus;
        ReservMgt.AutoTrack("Outstanding Qty. (Base)");
      END;
    END;

    PROCEDURE TransfKitSalLineToKitSalesLine@31(VAR OldKitSalesLine@1000 : Record 25000;VAR NewKitSalesLine@1001 : Record 25000;TransferQty@1002 : Decimal);
    VAR
      OldReservEntry@1003 : Record 337;
      Status@1004 : 'Reservation,Tracking,Surplus,Prospect';
    BEGIN
      // Used for sales quote and blanket order when transferred to order
      IF NOT FindReservEntry(OldKitSalesLine,OldReservEntry) THEN
        EXIT;

      OldReservEntry.Lock;

      NewKitSalesLine.TESTFIELD("No.",OldKitSalesLine."No.");
      NewKitSalesLine.TESTFIELD("Variant Code",OldKitSalesLine."Variant Code");
      NewKitSalesLine.TESTFIELD("Location Code",OldKitSalesLine."Location Code");

      FOR Status := Status::Reservation TO Status::Prospect DO BEGIN
        IF TransferQty = 0 THEN
          EXIT;
        OldReservEntry.SETRANGE("Reservation Status",Status);
        IF OldReservEntry.FINDSET THEN
          REPEAT
            OldReservEntry.TESTFIELD("Item No.",OldKitSalesLine."No.");
            OldReservEntry.TESTFIELD("Variant Code",OldKitSalesLine."Variant Code");
            OldReservEntry.TESTFIELD("Location Code",OldKitSalesLine."Location Code");

            TransferQty := CreateReservEntry.TransferReservEntry(DATABASE::"Kit Sales Line",
              NewKitSalesLine."Document Type",NewKitSalesLine."Document No.",'',NewKitSalesLine."Document Line No.",
              NewKitSalesLine."Line No.",NewKitSalesLine."Qty. per Unit of Measure",OldReservEntry,TransferQty);

          UNTIL (OldReservEntry.NEXT = 0) OR (TransferQty = 0);
      END; // DO
    END;

    PROCEDURE TransfKitSaLineToKitBOMJnlLine@1480000(VAR KitSalesLine@1000 : Record 25000;VAR KitBOMJnlLine@1001 : Record 25001;TransferQty@1002 : Decimal) : Decimal;
    VAR
      OldReservEntry@1003 : Record 337;
    BEGIN
      IF NOT FindReservEntry(KitSalesLine,OldReservEntry) THEN
        EXIT(TransferQty);

      OldReservEntry.Lock;

      CLEAR(CreateReservEntry);
      KitBOMJnlLine.TESTFIELD("No.",KitSalesLine."No.");
      KitBOMJnlLine.TESTFIELD("Variant Code",KitSalesLine."Variant Code");
      KitBOMJnlLine.TESTFIELD("Location Code",KitSalesLine."Location Code");

      IF TransferQty = 0 THEN
        EXIT;

      IF ReservEngineMgt.InitRecordSet(OldReservEntry) THEN BEGIN
        REPEAT
          OldReservEntry.TESTFIELD("Item No.",KitSalesLine."No.");
          OldReservEntry.TESTFIELD("Variant Code",KitSalesLine."Variant Code");
          OldReservEntry.TESTFIELD("Location Code",KitSalesLine."Location Code");

          TransferQty := CreateReservEntry.TransferReservEntry(DATABASE::"Kit BOM Journal Line",
            0,KitBOMJnlLine."Journal Template Name",
            KitBOMJnlLine."Journal Batch Name",KitBOMJnlLine."Journal Line No.",KitBOMJnlLine."Line No.",
            KitBOMJnlLine."Qty. per Unit of Measure",OldReservEntry,TransferQty);

        UNTIL (ReservEngineMgt.NEXTRecord(OldReservEntry) = 0) OR (TransferQty = 0);
      END;
      EXIT(TransferQty);
    END;

    PROCEDURE DeleteLineConfirm@20(VAR KitSalesLine@1000 : Record 25000) : Boolean;
    BEGIN
      WITH KitSalesLine DO BEGIN
        IF NOT ReservEntryExist(KitSalesLine) THEN
          EXIT(TRUE);

        ReservMgt.SetKitSalesLine(KitSalesLine);
        IF ReservMgt.DeleteItemTrackingConfirm THEN
          DeleteItemTracking := TRUE;
      END;

      EXIT(DeleteItemTracking);
    END;

    PROCEDURE DeleteLine@3(VAR KitSalesLine@1000 : Record 25000);
    BEGIN
      IF NOT ReservEntryExist(KitSalesLine) THEN
        EXIT;

      WITH KitSalesLine DO BEGIN
        ReservMgt.SetKitSalesLine(KitSalesLine);
        ReservMgt.SetItemTrackingHandling(1); // Allow Deletion
        ReservMgt.DeleteReservEntries(TRUE,0);
        CALCFIELDS("Reserved Qty. (Base)");
      END;
    END;

    PROCEDURE CallItemTracking@6(VAR KitSalesLine@1000 : Record 25000);
    VAR
      TrackingSpecification@1001 : Record 336;
      ItemTrackingForm@1002 : Form 6510;
    BEGIN
      InitTrackingSpecification(KitSalesLine,TrackingSpecification);
      ItemTrackingForm.SetSource(TrackingSpecification,KitSalesLine."Shipment Date");
      ItemTrackingForm.SetInbound(
        (KitSalesLine."Document Type" IN
         [KitSalesLine."Document Type"::Order,KitSalesLine."Document Type"::Invoice]) AND
        (KitSalesLine."Extended Quantity (Base)" < 0));

      ItemTrackingForm.RUNMODAL;
    END;

    PROCEDURE InitTrackingSpecification@10(VAR KitSalesLine@1000 : Record 25000;VAR TrackingSpecification@1003 : Record 336);
    VAR
      SalesLine@1480000 : Record 37;
    BEGIN
      TrackingSpecification.INIT;
      TrackingSpecification."Source Type" := DATABASE::"Kit Sales Line";
      WITH KitSalesLine DO BEGIN
        TrackingSpecification."Item No." := "No.";
        TrackingSpecification."Location Code" := "Location Code";
        TrackingSpecification.Description := Description;
        TrackingSpecification."Variant Code" := "Variant Code";
        TrackingSpecification."Source Subtype" := "Document Type";
        TrackingSpecification."Source ID" := "Document No.";
        TrackingSpecification."Source Batch Name" := '';
        TrackingSpecification."Source Prod. Order Line" := "Document Line No.";
        TrackingSpecification."Source Ref. No." := "Line No.";
        TrackingSpecification."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
        TrackingSpecification."Bin Code" := "Bin Code";

        TrackingSpecification."Quantity (Base)" := "Extended Quantity (Base)";
        SalesLine.GET("Document Type","Document No.","Document Line No.");
        TrackingSpecification."Qty. to Invoice (Base)" := SalesLine."Qty. to Invoice (Base)" * "Quantity per (Base)";
        TrackingSpecification."Qty. to Invoice" := SalesLine."Qty. to Invoice (Base)" * "Quantity per" ;
        TrackingSpecification."Quantity Invoiced (Base)" := SalesLine."Qty. Invoiced (Base)" * "Quantity per (Base)";
        TrackingSpecification."Qty. to Handle (Base)" := SalesLine."Qty. to Ship (Base)" * "Quantity per (Base)";;
        TrackingSpecification."Qty. to Handle" := SalesLine."Qty. to Ship (Base)" * "Quantity per";;
        TrackingSpecification."Quantity Handled (Base)" := SalesLine."Qty. Shipped (Base)" * "Quantity per (Base)";;
      END;
    END;

    BEGIN
    END.
  }
}