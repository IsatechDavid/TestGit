OBJECT Codeunit 32 BOM Jnl.-Post Line
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01,KITNA6.00.01;
  }
  PROPERTIES
  {
    TableNo=89;
    Permissions=TableData 27=imd,
                TableData 32=imd,
                TableData 238=imd,
                TableData 239=imd,
                TableData 339=imd,
                TableData 5406=id,
                TableData 5802=imd;
    OnRun=VAR
            TempJnlLineDim2@1000 : TEMPORARY Record 356;
            TempKitBOMJnlLine2@1462000 : TEMPORARY Record 25001;
          BEGIN
            GetGLSetup;
            TempJnlLineDim2.RESET;
            TempJnlLineDim2.DELETEALL;
            IF "Shortcut Dimension 1 Code" <> '' THEN BEGIN
              TempJnlLineDim2."Table ID" := DATABASE::"BOM Journal Line";
              TempJnlLineDim2."Journal Template Name" := "Journal Template Name";
              TempJnlLineDim2."Journal Batch Name" := "Journal Batch Name";
              TempJnlLineDim2."Journal Line No." := "Line No.";
              TempJnlLineDim2."Dimension Code" := GLSetup."Global Dimension 1 Code";
              TempJnlLineDim2."Dimension Value Code" := "Shortcut Dimension 1 Code";
              TempJnlLineDim2.INSERT;
            END;
            IF "Shortcut Dimension 2 Code" <> '' THEN BEGIN
              TempJnlLineDim2."Table ID" := DATABASE::"BOM Journal Line";
              TempJnlLineDim2."Journal Template Name" := "Journal Template Name";
              TempJnlLineDim2."Journal Batch Name" := "Journal Batch Name";
              TempJnlLineDim2."Journal Line No." := "Line No.";
              TempJnlLineDim2."Dimension Code" := GLSetup."Global Dimension 2 Code";
              TempJnlLineDim2."Dimension Value Code" := "Shortcut Dimension 2 Code";
              TempJnlLineDim2.INSERT;
            END;
            KitManagement.GetKitBOM(Rec,TempKitBOMJnlLine2);

            RunWithCheck(Rec,TempJnlLineDim2,TempKitBOMJnlLine2);
          END;

  }
  CODE
  {
    VAR
      Item@1003 : Record 27;
      BOMReg@1002 : Record 239;
      BOMLedgEntry@1007 : Record 238;
      BOMJnlLine@1011 : Record 89;
      GLSetup@1012 : Record 98;
      TempJnlLineDim@1015 : TEMPORARY Record 356;
      TempItemJnlLine@1027 : TEMPORARY Record 83;
      TempResJnlLine@1026 : TEMPORARY Record 207;
      TempGenJnlLine@1462000 : TEMPORARY Record 81;
      Location@1004 : Record 14;
      ProdOrderLine@1462001 : Record 5406;
      ProdOrder@1462002 : Record 5405;
      TempHandlingSpecification@1462003 : TEMPORARY Record 336;
      TempKitBOMJnlLine@1462004 : TEMPORARY Record 25001;
      TempSplitItemJnlLine@1020001 : TEMPORARY Record 83;
      BOMJnlCheckLine@1016 : Codeunit 31;
      ItemJnlPostLine@1017 : Codeunit 22;
      ResJnlPostLine@1018 : Codeunit 212;
      DimMgt@1019 : Codeunit 408;
      ReserveBOMJnlLine@1025 : Codeunit 99000843;
      WhseJnlPostLine@1005 : Codeunit 7301;
      WMSMgmt@1006 : Codeunit 7302;
      HasGLSetup@1000 : Boolean;
      KitManagement@1462007 : Codeunit 25000;
      ReserveKitBOMJnlLine@1462008 : Codeunit 25002;
      OriginalQuantity@1462009 : Decimal;
      OriginalQuantityBase@1462010 : Decimal;
      OutputItemLedgEntryNo@1462011 : Integer;
      ShipmentNo@1462012 : Code[20];
      ShipmentLineNo@1462013 : Integer;
      Text25000@1462014 : TextConst 'ENU=Disassembly of %1;FRA=D‚montage de %1';
      Text1480014@1462015 : TextConst 'ENU=Kit Assembly;FRA=Assemblage kit';

    PROCEDURE RunWithCheck@13(VAR BOMJnlLine2@1000 : Record 89;VAR TempJnlLineDim2@1001 : Record 356;VAR TempKitBOMJnlLine2@1462000 : Record 25001);
    BEGIN
      BOMJnlLine.COPY(BOMJnlLine2);
      TempKitBOMJnlLine.RESET;
      TempKitBOMJnlLine.DELETEALL;
      KitManagement.CopyKitBOM(TempKitBOMJnlLine2,TempKitBOMJnlLine);
      TempJnlLineDim.RESET;
      TempJnlLineDim.DELETEALL;
      DimMgt.CopyJnlLineDimToJnlLineDim(TempJnlLineDim2,TempJnlLineDim);
      Code;
      BOMJnlLine2 := BOMJnlLine;
    END;

    LOCAL PROCEDURE Code@1();
    VAR
      ItemJnlLine@1009 : Record 83;
      TempJnlLineDim2@1000 : TEMPORARY Record 356;
      FirstBOMLedgEntryNo@1008 : Integer;
      TrackingSpecificationExists@1005 : Boolean;
    BEGIN
      WITH BOMJnlLine DO BEGIN
        IF EmptyLine THEN
          EXIT;

        BOMJnlCheckLine.RunCheck(BOMJnlLine,TempJnlLineDim);
        CheckWMSBin("Location Code");

        Item.GET("Item No.");
        IF "Entry Type" = "Entry Type"::Assembly THEN BEGIN
          TESTFIELD("Source Code");
          ProdOrderLine.LOCKTABLE;
          ProdOrderLine.SETRANGE(Status,ProdOrderLine.Status::Finished);
          ProdOrderLine.SETRANGE("Prod. Order No.","Source Code");
          IF ProdOrderLine.FINDLAST THEN
            ProdOrderLine."Line No." := ProdOrderLine."Line No." + 1
          ELSE
            ProdOrderLine."Line No." := 1;
          ProdOrderLine.INIT;
          ProdOrderLine.Status := ProdOrderLine.Status::Released;
          ProdOrderLine."Prod. Order No." := "Source Code";
          ProdOrderLine."Item No." := "Item No.";
          ProdOrderLine."Variant Code" := "Variant Code";
          ProdOrderLine.Description := Description;
          ProdOrderLine."Location Code" := "Location Code";
          ProdOrderLine.Quantity := Quantity;
          ProdOrderLine."Quantity (Base)" := "Quantity (Base)";
          ProdOrderLine."Finished Quantity" := Quantity;
          ProdOrderLine."Finished Qty. (Base)" := "Quantity (Base)";
          ProdOrderLine."Unit Cost" := "Unit Cost";
          ProdOrderLine."Cost Amount" := "Total Cost";
          ProdOrderLine."Unit of Measure Code" := "Unit of Measure Code";
          ProdOrderLine."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
          ProdOrderLine."Inventory Posting Group" := "Inventory Posting Group";
          ProdOrderLine."Bin Code" := "Bin Code";
          ProdOrderLine."Production BOM No." := Item."Kit BOM No.";
          ProdOrderLine."Indirect Cost %" := Item."Indirect Cost %";
          ProdOrderLine."Overhead Rate" := Item."Overhead Rate";
          ProdOrderLine.Kitting := TRUE;
          ProdOrderLine."Allow Online Adjustment" := TRUE;
          ProdOrderLine.INSERT;
          ProdOrder.SETRANGE(Status, ProdOrder.Status::Finished);
          ProdOrder.SETRANGE("No.",ProdOrderLine."Prod. Order No.");
          IF NOT ProdOrder.FIND('-') THEN BEGIN
            ProdOrder.INIT;
            ProdOrder."No." := ProdOrderLine."Prod. Order No.";
            ProdOrder.Status := ProdOrder.Status::Finished;
            ProdOrder.Description := Text1480014;
            ProdOrder."Finished Date" := "Posting Date";
            ProdOrder.INSERT;
          END;
        END;

        ItemJnlLine.INIT;
        ItemJnlLine.VALIDATE("Posting Date","Posting Date");
        ItemJnlLine."Document Date" := "Document Date";
        ItemJnlLine."Document No." := "Document No.";
        ItemJnlLine."External Document No." := "External Document No.";
        IF "Entry Type" = "Entry Type"::Assembly THEN
          ItemJnlLine."Entry Type" := ItemJnlLine."Entry Type"::Output
        ELSE
          ItemJnlLine."Entry Type" := ItemJnlLine."Entry Type"::"Negative Adjmt.";
        ItemJnlLine.VALIDATE("Item No.","Item No.");
        ItemJnlLine.Description := Description;
        ItemJnlLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
        ItemJnlLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
        ItemJnlLine."Location Code" := "Location Code";
        ItemJnlLine."Source Code" := "Source Code";
        ItemJnlLine."Journal Batch Name" := "Journal Batch Name";
        ItemJnlLine."Reason Code" := "Reason Code";
        ItemJnlLine."Source Type" := ItemJnlLine."Source Type"::Item;
        IF "Entry Type" = "Entry Type"::Assembly THEN
          ItemJnlLine.VALIDATE("Output Quantity",Quantity)
        ELSE
          ItemJnlLine.VALIDATE(Quantity,Quantity);
        ItemJnlLine.VALIDATE("Unit of Measure Code","Unit of Measure Code");
        ItemJnlLine."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
        ItemJnlLine."Posting No. Series" := "Posting No. Series";
        ItemJnlLine."Variant Code" := "Variant Code";
        ItemJnlLine."Bin Code" := "Bin Code";
        ItemJnlLine."Prod. Order No." := ProdOrderLine."Prod. Order No.";
        ItemJnlLine."Prod. Order Line No." := ProdOrderLine."Line No.";
        ItemJnlLine."Source No." := "Item No.";
        ItemJnlLine.Kitting := TRUE;
        OriginalQuantity := Quantity;
        OriginalQuantityBase := "Quantity (Base)";

        ExplodeBOMToTempJnlLines(BOMJnlLine);

        IF "Entry Type" = "Entry Type"::Assembly THEN
          ItemJnlLine.VALIDATE(Amount,"Total Cost")
        ELSE
          BuildTotalDisassemblyCost(BOMJnlLine,ItemJnlLine.Amount - "Total Cost");

        TransferDimToItemJnlLine(ItemJnlLine,TempJnlLineDim2,FALSE);

        ReserveBOMJnlLine.TransferBOMJnlToItemJnlLine(BOMJnlLine,ItemJnlLine,"Quantity (Base)");

        ItemJnlPostLine.RunWithCheck(ItemJnlLine,TempJnlLineDim2);

        IF "Entry Type" = "Entry Type"::Assembly THEN BEGIN
          ProdOrderLine.DELETE;
          ProdOrderLine.Status := ProdOrderLine.Status::Finished;
          ProdOrderLine.INSERT;
        END;

        IF FirstBOMLedgEntryNo = 0 THEN BEGIN
          BOMLedgEntry.LOCKTABLE;
          IF BOMLedgEntry.FIND('+') THEN
            FirstBOMLedgEntryNo := BOMLedgEntry."Entry No.";
          FirstBOMLedgEntryNo += 1;
        END;

        BOMLedgEntry."Entry Type" := BOMLedgEntry."Entry Type"::BOM;
        BOMLedgEntry."Reference Type" := BOMLedgEntry."Reference Type"::Item;
        BOMLedgEntry."Posting Date" := "Posting Date";
        BOMLedgEntry."Document Date" := "Document Date";

        OutputItemLedgEntryNo := 0;
        TrackingSpecificationExists := ItemJnlPostLine.CollectTrackingSpecification(TempHandlingSpecification);

        IF TempHandlingSpecification.FIND('-') THEN
          REPEAT
            BOMLedgEntry."Entry No." += 1;
            BOMLedgEntry."Reference Entry No." := TempHandlingSpecification."Appl.-to Item Entry";
            BOMLedgEntry.INSERT;
            TempHandlingSpecification."Source Type" := DATABASE::"BOM Journal Line";
            TempHandlingSpecification."Source ID" := "Journal Template Name";
            TempHandlingSpecification."Source Ref. No." := "Line No.";
            TempHandlingSpecification.MODIFY;
          UNTIL TempHandlingSpecification.NEXT = 0
        ELSE BEGIN
          BOMLedgEntry."Entry No." += 1;
          BOMLedgEntry."Reference Entry No." := ItemJnlLine."Item Shpt. Entry No.";
          BOMLedgEntry.INSERT;
          OutputItemLedgEntryNo := ItemJnlLine."Item Shpt. Entry No.";
        END;

        PostWhseJnlLine(ItemJnlLine,TempHandlingSpecification,OriginalQuantity,OriginalQuantityBase);
        PostTempJnlLines;

        IF BOMReg."No." = 0 THEN BEGIN
          BOMReg.LOCKTABLE;
          IF BOMReg.FIND('+') THEN
            BOMReg."No." := BOMReg."No." + 1
          ELSE
            BOMReg."No." := 1;
          BOMReg.INIT;
          BOMReg."From Entry No." := FirstBOMLedgEntryNo;
          BOMReg."To Entry No." := BOMLedgEntry."Entry No.";
          BOMReg."Creation Date" := TODAY;
          BOMReg."Source Code" := "Source Code";
          BOMReg."Journal Batch Name" := "Journal Batch Name";
          BOMReg."User ID" := USERID;
          BOMReg.INSERT;
        END ELSE BEGIN
          BOMReg."To Entry No." := BOMLedgEntry."Entry No.";
          BOMReg.MODIFY;
        END;
      END;

      IF TempHandlingSpecification.FINDFIRST THEN
        BOMJnlLine."External Document No." := '' // cu80 will find and update these records accordingly
      ELSE
        BOMJnlLine."External Document No." := FORMAT(OutputItemLedgEntryNo); // used in cu80 to apply output entry to sales entry.
    END;

    LOCAL PROCEDURE ExplodeBOMToTempJnlLines@4(VAR BOMJnlLine2@1001 : Record 89);
    VAR
      GLSetup@1462000 : Record 98;
      Res@1462001 : Record 156;
      GenPostingSetup@1462002 : Record 252;
      CompQty@1000 : Decimal;
    BEGIN
      WITH BOMJnlLine2 DO BEGIN
        "Total Cost" := 0;
        TempKitBOMJnlLine.SETFILTER(Type,'<>%1',TempKitBOMJnlLine.Type::" ");
        TempKitBOMJnlLine.SETFILTER("Quantity per",'>0');
        IF TempKitBOMJnlLine.FINDSET THEN
          REPEAT
            CompQty := ROUND("Quantity (Base)" * TempKitBOMJnlLine."Quantity per",0.00001);
            CASE TempKitBOMJnlLine.Type OF
              TempKitBOMJnlLine.Type::Item:
                BEGIN
                  TempItemJnlLine."Journal Batch Name" := '';
                  TempItemJnlLine."Line No." := 0;
                  TempItemJnlLine.INIT;
                  TempItemJnlLine.VALIDATE("Posting Date","Posting Date");
                  TempItemJnlLine."Document Date" := "Document Date";
                  TempItemJnlLine."Document No." := "Document No.";
                  TempItemJnlLine."External Document No." := "External Document No.";
                  IF "Entry Type" = "Entry Type"::Assembly THEN
                    TempItemJnlLine."Entry Type" := TempItemJnlLine."Entry Type"::Consumption
                  ELSE
                    TempItemJnlLine."Entry Type" := TempItemJnlLine."Entry Type"::"Positive Adjmt.";
                  TempItemJnlLine.VALIDATE("Item No.",TempKitBOMJnlLine."No.");
                  TempItemJnlLine.VALIDATE("Variant Code",TempKitBOMJnlLine."Variant Code");
                  TempItemJnlLine.Description := TempKitBOMJnlLine.Description;
                  TempItemJnlLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
                  TempItemJnlLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
                  TempItemJnlLine.VALIDATE("Location Code","Location Code");
                  TempItemJnlLine."Source Code" := "Source Code";
                  TempItemJnlLine."Journal Batch Name" := "Journal Batch Name";
                  TempItemJnlLine."Reason Code" := "Reason Code";
                  TempItemJnlLine."Source Type" := TempItemJnlLine."Source Type"::Item;
                  TempItemJnlLine."Source No." := "Item No.";
                  TempItemJnlLine."Source Posting Group" := "Inventory Posting Group";
                  TempItemJnlLine.VALIDATE("Unit of Measure Code",TempKitBOMJnlLine."Unit of Measure Code");
                  TempItemJnlLine.VALIDATE(Quantity,CompQty);
                  IF "Entry Type" = "Entry Type"::Disassembly THEN
                    TempItemJnlLine.VALIDATE("Unit Cost",TempKitBOMJnlLine."Unit Cost");
                  TempItemJnlLine."Posting No. Series" := "Posting No. Series";
                  TempItemJnlLine."Line No." := TempKitBOMJnlLine."Line No.";
                  TempItemJnlLine."Prod. Order No." := ProdOrderLine."Prod. Order No.";
                  TempItemJnlLine."Prod. Order Line No." := ProdOrderLine."Line No.";
                  TempItemJnlLine."Bin Code" := TempKitBOMJnlLine."Bin Code";
                  IF "Entry Type" = "Entry Type"::Assembly THEN
                    TempItemJnlLine."Applies-to Entry" := TempKitBOMJnlLine."Applies-to Entry";
                  TempItemJnlLine.Kitting := TRUE;
                  IF ShipmentNo <> '' THEN BEGIN
                    TempItemJnlLine."Document Type" := TempItemJnlLine."Document Type"::"Sales Shipment";
                    TempItemJnlLine."Document No." := ShipmentNo;
                    TempItemJnlLine."Document Line No." := ShipmentLineNo;
                  END;
                  TempItemJnlLine.INSERT;

                  BOMJnlLine."Total Cost" += TempItemJnlLine."Unit Cost" * TempItemJnlLine.Quantity;
                  ReserveKitBOMJnlLine.TransferKitBOMLineToItemJnlLin(
                    TempKitBOMJnlLine,TempItemJnlLine,TempItemJnlLine."Quantity (Base)");
                END;
              TempKitBOMJnlLine.Type::Resource,TempKitBOMJnlLine.Type::"Setup Resource":
                BEGIN
                  TempResJnlLine."Journal Batch Name" := '';
                  TempResJnlLine.INIT;
                  TempResJnlLine.VALIDATE("Posting Date","Posting Date");
                  TempResJnlLine."Document Date" := "Document Date";
                  TempResJnlLine."Document No." := "Document No.";
                  TempResJnlLine."External Document No." := "External Document No.";
                  TempResJnlLine."Entry Type" := TempResJnlLine."Entry Type"::Usage;
                  TempResJnlLine.VALIDATE("Resource No.",TempKitBOMJnlLine."No.");
                  TempResJnlLine.Description := TempKitBOMJnlLine.Description;
                  TempResJnlLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
                  TempResJnlLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
                  TempResJnlLine."Source Code" := "Source Code";
                  TempResJnlLine."Journal Batch Name" := "Journal Batch Name";
                  TempResJnlLine."Reason Code" := "Reason Code";
                  TempResJnlLine.VALIDATE("Unit of Measure Code",TempKitBOMJnlLine."Unit of Measure Code");
                  IF TempKitBOMJnlLine.Type = TempKitBOMJnlLine.Type::Resource THEN
                    TempResJnlLine.VALIDATE(Quantity,CompQty)
                  ELSE
                    TempResJnlLine.VALIDATE(Quantity,TempKitBOMJnlLine."Quantity per");
                  TempResJnlLine."Posting No. Series" := "Posting No. Series";
                  TempResJnlLine."Line No." := TempKitBOMJnlLine."Line No.";
                  TempResJnlLine."Source No." := "Item No.";
                  TempResJnlLine.INSERT;

                  IF "Entry Type" = "Entry Type"::Assembly THEN
                    BOMJnlLine."Total Cost" += TempResJnlLine."Total Cost"
                  ELSE BEGIN
                    TempGenJnlLine."Journal Batch Name" := '';
                    TempGenJnlLine.INIT;
                    TempGenJnlLine.VALIDATE("Posting Date","Posting Date");
                    TempGenJnlLine."Document Date" := "Document Date";
                    TempGenJnlLine."Document No." := "Document No.";
                    TempGenJnlLine."External Document No." := "External Document No.";

                    Res.GET(TempKitBOMJnlLine."No.");
                    GenPostingSetup.GET('',Item."Gen. Prod. Posting Group");
                    GenPostingSetup.TESTFIELD("Cost of Disassembly Account");
                    TempGenJnlLine."Account Type" := TempGenJnlLine."Account Type"::"G/L Account";
                    TempGenJnlLine.VALIDATE("Account No.",GenPostingSetup."Cost of Disassembly Account");
                    GenPostingSetup.GET('',Res."Gen. Prod. Posting Group");
                    GenPostingSetup.TESTFIELD("Direct Cost Applied Account");
                    TempGenJnlLine."Bal. Account Type" := TempGenJnlLine."Bal. Account Type"::"G/L Account";
                    TempGenJnlLine.VALIDATE("Bal. Account No.",GenPostingSetup."Direct Cost Applied Account");

                    GLSetup.GET;
                    IF TempKitBOMJnlLine.Type = TempKitBOMJnlLine.Type::Resource THEN
                      TempGenJnlLine.VALIDATE(Amount,
                        ROUND(CompQty * Res."Unit Cost",GLSetup."Unit-Amount Rounding Precision"))
                    ELSE
                      TempGenJnlLine.VALIDATE(Amount,
                        ROUND(TempKitBOMJnlLine."Quantity per" * Res."Unit Cost",GLSetup."Unit-Amount Rounding Precision"));

                    TempGenJnlLine.Description := TempKitBOMJnlLine.Description;
                    TempGenJnlLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
                    TempGenJnlLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
                    TempGenJnlLine."Source Code" := "Source Code";
                    TempGenJnlLine."Journal Batch Name" := "Journal Batch Name";
                    TempGenJnlLine."Reason Code" := "Reason Code";
                    TempGenJnlLine."Posting No. Series" := "Posting No. Series";
                    TempGenJnlLine."Line No." := TempKitBOMJnlLine."Line No.";
                    TempGenJnlLine."Source No." := "Item No.";
                    TempGenJnlLine."System-Created Entry" := TRUE;
                    TempGenJnlLine.INSERT;
                  END;
                END;
            END;
          UNTIL TempKitBOMJnlLine.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE PostTempJnlLines@5();
    VAR
      TempJnlLineDim2@1000 : TEMPORARY Record 356;
      ResReg@1001 : Record 240;
      GLReg@1462000 : Record 45;
      TempHandlingSpecification@1002 : Record 336;
      TempItemJnlLine2@1003 : Record 83;
      Resource@1462003 : Record 156;
      GenPostingSetup@1462004 : Record 252;
      GenJnlLine@1462005 : Record 81;
      InvPostingSetup@1462006 : Record 5813;
      Amount@1462007 : Decimal;
      InventorySetup@1462008 : Record 313;
    BEGIN
      GetGLSetup;
      IF TempItemJnlLine.FIND('-') THEN
        REPEAT
          TempItemJnlLine2 := TempItemJnlLine;
          TransferDimToItemJnlLine(TempItemJnlLine,TempJnlLineDim2,TRUE);
          ItemJnlPostLine.RunWithCheck(TempItemJnlLine,TempJnlLineDim2);
          WITH TempItemJnlLine DO BEGIN
            Quantity := TempItemJnlLine2.Quantity;
            "Invoiced Quantity" := TempItemJnlLine2."Invoiced Quantity";
            "Output Quantity" := TempItemJnlLine2."Output Quantity";
            "Scrap Quantity" := TempItemJnlLine2."Scrap Quantity";
            "Setup Time" := TempItemJnlLine2."Setup Time";
            "Run Time" := TempItemJnlLine2."Run Time";
            "Stop Time" := TempItemJnlLine2."Stop Time";
          END;
          TempSplitItemJnlLine.DELETEALL;
          ItemJnlPostLine.GetSplitItemJnlLine(TempSplitItemJnlLine);
          IF TempSplitItemJnlLine.FINDSET THEN
            REPEAT
              PostWhseJnlLine(TempSplitItemJnlLine,TempHandlingSpecification,
                TempSplitItemJnlLine.Quantity,TempSplitItemJnlLine."Quantity (Base)");
            UNTIL TempSplitItemJnlLine.NEXT = 0;
          BOMLedgEntry."Entry No." += 1;
          BOMLedgEntry."Entry Type" := BOMLedgEntry."Entry Type"::Component;
          BOMLedgEntry."Reference Type" := BOMLedgEntry."Reference Type"::Item;
          BOMLedgEntry."Reference Entry No." := TempItemJnlLine."Item Shpt. Entry No.";
          BOMLedgEntry."Posting Date" := TempItemJnlLine."Posting Date";
          BOMLedgEntry."Document Date" := TempItemJnlLine."Document Date";
          BOMLedgEntry."Kit Item No." := BOMJnlLine."Item No.";
          BOMLedgEntry.INSERT;
          TempItemJnlLine.DELETE;
        UNTIL TempItemJnlLine.NEXT = 0;

      IF TempResJnlLine.FIND('-') THEN
        REPEAT
          TransferDimToResJnlLine(TempResJnlLine,TempJnlLineDim2);
          ResJnlPostLine.RunWithCheck(TempResJnlLine,TempJnlLineDim2);
          ResJnlPostLine.GetResReg(ResReg);
          IF BOMJnlLine."Entry Type" = BOMJnlLine."Entry Type"::Assembly THEN
            PostResourceCost(TempResJnlLine,TempItemJnlLine);
          BOMLedgEntry."Entry No." += 1;
          BOMLedgEntry."Entry Type" := BOMLedgEntry."Entry Type"::Component;
          BOMLedgEntry."Reference Type" := BOMLedgEntry."Reference Type"::Resource;
          BOMLedgEntry."Reference Entry No." := ResReg."To Entry No.";
          BOMLedgEntry."Posting Date" := TempResJnlLine."Posting Date";
          BOMLedgEntry."Document Date" := TempResJnlLine."Document Date";
          BOMLedgEntry."Kit Item No." := BOMJnlLine."Item No.";
          BOMLedgEntry.INSERT;
        UNTIL TempResJnlLine.NEXT = 0;

      WITH TempResJnlLine DO BEGIN
        RESET;
        IF FINDSET THEN BEGIN
          REPEAT
            GenJnlLine.INIT;
            GenJnlLine."Document No." := "Document No.";
            GenJnlLine."External Document No." := "External Document No.";
            GenJnlLine.Description := Description;
            GenJnlLine."Source Code" := "Source Code";
            GenJnlLine."System-Created Entry" := TRUE;
            GenJnlLine.VALIDATE("Posting Date", "Posting Date");
            GenJnlLine."Allow Application" := TRUE;
            GenJnlLine."Account Type" := GenJnlLine."Account Type"::"G/L Account";
            GenJnlLine."Source Code" := "Source Code";

            InvPostingSetup.RESET;
            InvPostingSetup.GET(BOMJnlLine."Location Code",BOMJnlLine."Inventory Posting Group");
            InvPostingSetup.TESTFIELD(InvPostingSetup."WIP Account");
            GenJnlLine."Account No." := InvPostingSetup."WIP Account";
            Amount := ROUND("Total Cost");
            GenJnlLine.Amount := Amount;
            Resource.RESET;
            Resource.GET(TempResJnlLine."Resource No.");
            GenPostingSetup.RESET;
            GenPostingSetup.GET(BOMJnlLine."Gen. Bus. Posting Group", Resource."Gen. Prod. Posting Group");
            GenPostingSetup.TESTFIELD(GenPostingSetup."Direct Cost Applied Account");
            GenJnlLine."Bal. Account Type" := GenJnlLine."Account Type"::"G/L Account";
            GenJnlLine."Bal. Account No." := GenPostingSetup."Direct Cost Applied Account";
            ItemJnlPostLine.KitGenJnlPostPassThrough(GenJnlLine,TempJnlLineDim,GLReg);
            TempResJnlLine.DELETE;
          UNTIL NEXT = 0;
        END;
      END;

      IF TempGenJnlLine.FINDSET THEN
        REPEAT
          TransferDimToGenJnlLine(TempGenJnlLine,TempJnlLineDim2);
          ItemJnlPostLine.KitGenJnlPostPassThrough(TempGenJnlLine,TempJnlLineDim2,GLReg);
          BOMLedgEntry."Entry No." += 1;
          BOMLedgEntry."Entry Type" := BOMLedgEntry."Entry Type"::Expense;
          BOMLedgEntry."Reference Type" := BOMLedgEntry."Reference Type"::"G/L Account";
          BOMLedgEntry."Reference Entry No." := GLReg."To Entry No.";
          BOMLedgEntry."Posting Date" := TempGenJnlLine."Posting Date";
          BOMLedgEntry."Document Date" := TempGenJnlLine."Document Date";
          BOMLedgEntry."Kit Item No." := BOMJnlLine."Item No.";
          BOMLedgEntry.INSERT;
          TempGenJnlLine.DELETE;
        UNTIL TempGenJnlLine.NEXT = 0;
    END;

    LOCAL PROCEDURE TransferDimToItemJnlLine@7(VAR ItemJnlLine2@1000 : Record 83;VAR TempJnlLineDim2@1002 : TEMPORARY Record 356;Consumption@1003 : Boolean);
    VAR
      DefDim@1001 : Record 352;
    BEGIN
      IF TempJnlLineDim.FIND('-') THEN BEGIN
        TempJnlLineDim2.DELETEALL;
        REPEAT
          TempJnlLineDim2.INIT;
          TempJnlLineDim2."Table ID" := DATABASE::"Item Journal Line";
          TempJnlLineDim2."Journal Template Name" := ItemJnlLine2."Journal Template Name";
          TempJnlLineDim2."Journal Batch Name" := ItemJnlLine2."Journal Batch Name";
          TempJnlLineDim2."Journal Line No." := ItemJnlLine2."Line No.";
          TempJnlLineDim2."Allocation Line No." := 0;
          TempJnlLineDim2."Dimension Code" := TempJnlLineDim."Dimension Code";
          IF Consumption THEN
            IF DefDim.GET(DATABASE::Item,ItemJnlLine2."Item No.",TempJnlLineDim."Dimension Code") THEN BEGIN
              TempJnlLineDim2."Dimension Value Code" := DefDim."Dimension Value Code";
              CASE DefDim."Dimension Code" OF
                GLSetup."Global Dimension 1 Code":
                  ItemJnlLine2."Shortcut Dimension 1 Code" := DefDim."Dimension Value Code";
                GLSetup."Global Dimension 2 Code":
                  ItemJnlLine2."Shortcut Dimension 2 Code" := DefDim."Dimension Value Code";
              END;
            END ELSE
              TempJnlLineDim2."Dimension Value Code" := TempJnlLineDim."Dimension Value Code"
          ELSE
            TempJnlLineDim2."Dimension Value Code" := TempJnlLineDim."Dimension Value Code";
          TempJnlLineDim2.INSERT;
        UNTIL TempJnlLineDim.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE TransferDimToResJnlLine@8(VAR ResJnlLine@1000 : Record 207;VAR TempJnlLineDim2@1001 : TEMPORARY Record 356);
    BEGIN
      IF TempJnlLineDim.FIND('-') THEN BEGIN
        TempJnlLineDim2.DELETEALL;
        REPEAT
          TempJnlLineDim2.INIT;
          TempJnlLineDim2."Table ID" := DATABASE::"Res. Journal Line";
          TempJnlLineDim2."Journal Template Name" := ResJnlLine."Journal Template Name";
          TempJnlLineDim2."Journal Batch Name" := ResJnlLine."Journal Batch Name";
          TempJnlLineDim2."Journal Line No." := ResJnlLine."Line No.";
          TempJnlLineDim2."Allocation Line No." := 0;
          TempJnlLineDim2."Dimension Code" := TempJnlLineDim."Dimension Code";
          TempJnlLineDim2."Dimension Value Code" := TempJnlLineDim."Dimension Value Code";
          TempJnlLineDim2.INSERT;
        UNTIL TempJnlLineDim.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE TransferDimToGenJnlLine@1462000(VAR GenJnlLine@1462000 : Record 81;VAR TempJnlLineDim2@1462001 : TEMPORARY Record 356);
    BEGIN
      IF TempJnlLineDim.FIND('-') THEN BEGIN
        TempJnlLineDim2.DELETEALL;
        REPEAT
          TempJnlLineDim2.INIT;
          TempJnlLineDim2."Table ID" := DATABASE::"Gen. Journal Line";
          TempJnlLineDim2."Journal Template Name" := GenJnlLine."Journal Template Name";
          TempJnlLineDim2."Journal Batch Name" := GenJnlLine."Journal Batch Name";
          TempJnlLineDim2."Journal Line No." := GenJnlLine."Line No.";
          TempJnlLineDim2."Allocation Line No." := 0;
          TempJnlLineDim2."Dimension Code" := TempJnlLineDim."Dimension Code";
          TempJnlLineDim2."Dimension Value Code" := TempJnlLineDim."Dimension Value Code";
          TempJnlLineDim2.INSERT;
        UNTIL TempJnlLineDim.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE PostWhseJnlLine@7302(ItemJnlLine@1000 : Record 83;VAR TempHandlingSpecification@1003 : TEMPORARY Record 336;OriginalQuantity@1006 : Decimal;OriginalQuantityBase@1001 : Decimal);
    VAR
      WhseJnlLine@1002 : Record 7311;
      TempWhseJnlLine2@1005 : TEMPORARY Record 7311;
      ItemTrackingMgt@1004 : Codeunit 6500;
    BEGIN
      IF BOMJnlLine."Entry Type" = BOMJnlLine."Entry Type"::Assembly THEN
        EXIT;

      WITH ItemJnlLine DO BEGIN
        Quantity := OriginalQuantity;
        "Quantity (Base)" := OriginalQuantityBase;
        GetLocation("Location Code");
        IF Location."Bin Mandatory" THEN
          IF WMSMgmt.CreateWhseJnlLine(ItemJnlLine,0,WhseJnlLine,FALSE,TRUE) THEN BEGIN
            WMSMgmt.SetBOMLine(ItemJnlLine,WhseJnlLine);
            WMSMgmt.CheckWhseJnlLine(WhseJnlLine,1,0,FALSE);
            ItemTrackingMgt.SplitWhseJnlLine(WhseJnlLine,TempWhseJnlLine2,TempHandlingSpecification,FALSE);
            IF TempWhseJnlLine2.FIND('-') THEN
              REPEAT
                WhseJnlPostLine.RUN(TempWhseJnlLine2);
              UNTIL TempWhseJnlLine2.NEXT = 0;
          END;
      END;
    END;

    PROCEDURE CheckWMSBin@2(LocationCode@1000 : Code[10]);
    BEGIN
      GetLocation(LocationCode);
      IF Location."Directed Put-away and Pick" THEN
        WMSMgmt.CheckBOMBin(Location);
    END;

    LOCAL PROCEDURE GetLocation@7301(LocationCode@1000 : Code[10]);
    BEGIN
      IF LocationCode = '' THEN
        CLEAR(Location)
      ELSE
        IF Location.Code <> LocationCode THEN
          Location.GET(LocationCode);
    END;

    LOCAL PROCEDURE GetGLSetup@3();
    BEGIN
      IF NOT HasGLSetup THEN BEGIN
        HasGLSetup := TRUE;
        GLSetup.GET;
      END;
    END;

    PROCEDURE PostResourceCost@1462001(ResJnlLine@1462000 : Record 207;VAR ItemJnlLine@1462001 : Record 83);
    VAR
      TempJnlLineDim2@1462002 : TEMPORARY Record 356;
      ACYMgt@1462003 : Codeunit 5837;
      TotalCost@1462004 : Decimal;
      UnitCost@1462005 : Decimal;
    BEGIN
      WITH ResJnlLine DO BEGIN
        ItemJnlLine."Journal Template Name" := BOMJnlLine."Journal Template Name";
        ItemJnlLine."Journal Batch Name" := BOMJnlLine."Journal Batch Name";
        ItemJnlLine."Serial No." := '';
        ItemJnlLine."Lot No." := '';
        ItemJnlLine."Value Entry Type" := ItemJnlLine."Value Entry Type"::"Direct Cost";
        ItemJnlLine.Description := Description;
        ItemJnlLine."Source Posting Group" := BOMJnlLine."Inventory Posting Group";
        ItemJnlLine."Source Type" := "Source Type";
        ItemJnlLine."Source No." := "Source No.";
        ItemJnlLine."Reason Code" := "Reason Code";
        ItemJnlLine."Document Date" := "Document Date";
        ItemJnlLine."External Document No." := "External Document No.";
        ItemJnlLine.Adjustment := TRUE;
        ItemJnlLine."Item No." := BOMJnlLine."Item No.";
        ItemJnlLine."Location Code" := BOMJnlLine."Location Code";
        ItemJnlLine."Variant Code" := BOMJnlLine."Variant Code";
        ItemJnlLine."Posting Date" := "Posting Date";
        ItemJnlLine."Entry Type" := ItemJnlLine."Entry Type"::Output;
        ItemJnlLine."Document No." := "Document No.";
        ItemJnlLine."Source Currency Code" := GLSetup."Additional Reporting Currency";
        ItemJnlLine."Source Code" := BOMJnlLine."Source Code";
        ItemJnlLine."Inventory Posting Group" := BOMJnlLine."Inventory Posting Group";
        ItemJnlLine."Prod. Order No." := ProdOrderLine."Prod. Order No.";
        ItemJnlLine."Prod. Order Line No." := ProdOrderLine."Line No.";
        ItemJnlLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
        ItemJnlLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
        ItemJnlLine."Gen. Prod. Posting Group" :="Gen. Prod. Posting Group";
        ItemJnlLine.Kitting := TRUE;
        TotalCost := "Total Cost";
        UnitCost := "Unit Cost";
        TransferDimToItemJnlLine(ItemJnlLine,TempJnlLineDim2,TRUE);

        IF OutputItemLedgEntryNo <> 0 THEN BEGIN
          ItemJnlLine."Item Shpt. Entry No." := OutputItemLedgEntryNo;
          ItemJnlLine.Amount := "Total Cost";
          ItemJnlLine."Amount (ACY)" := ACYMgt.CalcACYAmt(ItemJnlLine.Amount,"Posting Date",FALSE);
          ItemJnlLine."Unit Cost" := UnitCost;
          ItemJnlLine."Unit Cost (ACY)" := ACYMgt.CalcACYAmt(ItemJnlLine."Unit Cost","Posting Date",TRUE);
          ItemJnlLine."Quantity (Base)" := BOMJnlLine."Quantity (Base)";
          ItemJnlLine."Invoiced Qty. (Base)" := BOMJnlLine."Quantity (Base)";
          ItemJnlPostLine.RunWithCheck(ItemJnlLine,TempJnlLineDim);
        END ELSE BEGIN
          TempHandlingSpecification.FINDSET;
          REPEAT
            ItemJnlLine."Item Shpt. Entry No." := TempHandlingSpecification."Appl.-to Item Entry";
            ItemJnlLine.Amount := ROUND(
              TotalCost *
                (TempHandlingSpecification."Quantity (Base)" / OriginalQuantityBase),GLSetup."Amount Rounding Precision");
            ItemJnlLine."Amount (ACY)" := ACYMgt.CalcACYAmt(ItemJnlLine.Amount,"Posting Date",FALSE);
            ItemJnlLine."Unit Cost" :=
              UnitCost *
              (TempHandlingSpecification."Quantity (Base)" / OriginalQuantityBase);
            ItemJnlLine."Unit Cost (ACY)" := ACYMgt.CalcACYAmt(ItemJnlLine."Unit Cost","Posting Date",TRUE);
            ItemJnlLine."Quantity (Base)" := TempHandlingSpecification."Quantity (Base)";
            ItemJnlLine."Invoiced Qty. (Base)" := TempHandlingSpecification."Quantity (Base)";
            ItemJnlPostLine.RunWithCheck(ItemJnlLine,TempJnlLineDim);
          UNTIL TempHandlingSpecification.NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE BuildTotalDisassemblyCost@1462002(BOMJnlLine2@1462000 : Record 89;DisassemblyCost@1462001 : Decimal);
    VAR
      GLSetup@1462002 : Record 98;
      GenPostingSetup@1462003 : Record 252;
    BEGIN
      IF DisassemblyCost = 0 THEN
        EXIT;

      WITH BOMJnlLine2 DO BEGIN
        TempGenJnlLine."Journal Batch Name" := '';
        TempGenJnlLine.INIT;
        TempGenJnlLine.VALIDATE("Posting Date","Posting Date");
        TempGenJnlLine."Document Date" := "Document Date";
        TempGenJnlLine."Document No." := "Document No.";
        TempGenJnlLine."External Document No." := "External Document No.";

        GenPostingSetup.GET('',Item."Gen. Prod. Posting Group");
        GenPostingSetup.TESTFIELD("Cost of Disassembly Account");
        GenPostingSetup.TESTFIELD("Inventory Adjmt. Account");
        TempGenJnlLine."Account Type" := TempGenJnlLine."Account Type"::"G/L Account";
        TempGenJnlLine.VALIDATE("Account No.",GenPostingSetup."Cost of Disassembly Account");
        TempGenJnlLine."Bal. Account Type" := TempGenJnlLine."Bal. Account Type"::"G/L Account";
        TempGenJnlLine.VALIDATE("Bal. Account No.",GenPostingSetup."Inventory Adjmt. Account");

        GLSetup.GET;
        TempGenJnlLine.VALIDATE(Amount,
          ROUND(DisassemblyCost,GLSetup."Unit-Amount Rounding Precision"));
        TempGenJnlLine.Description := STRSUBSTNO(Text25000,"Item No.");
        TempGenJnlLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
        TempGenJnlLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
        TempGenJnlLine."Source Code" := "Source Code";
        TempGenJnlLine."Journal Batch Name" := "Journal Batch Name";
        TempGenJnlLine."Reason Code" := "Reason Code";
        TempGenJnlLine."Posting No. Series" := "Posting No. Series";
        TempGenJnlLine."Line No." := 0;
        TempGenJnlLine."Source No." := "Item No.";
        TempGenJnlLine."System-Created Entry" := TRUE;
        TempGenJnlLine.INSERT;
      END;
    END;

    PROCEDURE GetItemTracking@1462003(VAR HandlingSpecification@1462000 : TEMPORARY Record 336);
    BEGIN
      HandlingSpecification.DELETEALL;
      IF TempHandlingSpecification.FINDSET THEN
        REPEAT
          HandlingSpecification := TempHandlingSpecification;
          HandlingSpecification.INSERT;
        UNTIL TempHandlingSpecification.NEXT = 0;
    END;

    PROCEDURE SetShipmentID@1462004(NewShipmentNo@1462000 : Code[20];NewShipmentLineNo@1462001 : Integer);
    BEGIN
      ShipmentNo := NewShipmentNo;
      ShipmentLineNo := NewShipmentLineNo;
    END;

    BEGIN
    END.
  }
}