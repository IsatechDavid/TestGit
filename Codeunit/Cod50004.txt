OBJECT Codeunit 50004 Folder Management
{
  OBJECT-PROPERTIES
  {
    Date=09/09/12;
    Time=09:40:00;
    Modified=Yes;
    Version List=IMH6.01,GED;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            IF CreateFileSystem() THEN;
          END;

  }
  CODE
  {
    VAR
      Text001@1100481000 : TextConst 'ENU=The path is not valide.;FRA=Le chemin %1 n''est pas valide.';
      FileSystem@1100481001 : Automation "{F935DC20-1CF0-11D0-ADB9-00C04FD58A0B} 1.0:{0D43FE01-F093-11CF-8940-00A0C9054228}:'Windows Script Host Object Model'.FileSystemObject";
      Text002@1100481002 : TextConst 'ENU=You need to have Microsoft Word 2000 or later installed on your system to run this feature.;FRA=Vous devez disposer de la version Microsoft Word 2000 ou sup‚rieure pour pouvoir utiliser cette fonction.';
      Text003@1100481003 : TextConst 'ENU=Import attachment;FRA=Importer doc. joint';
      LocalFileSystem@1100281000 : Automation "{F935DC20-1CF0-11D0-ADB9-00C04FD58A0B} 1.0:{0D43FE01-F093-11CF-8940-00A0C9054228}:'Windows Script Host Object Model'.FileSystemObject";

    PROCEDURE GetFileName@1100481000(pFolderOnly@1000000001 : Boolean;pFolderName@1100481000 : Text[500];pFileName@1100281000 : Text[250]) rValue : Text[500];
    VAR
      lCommonDialogMgt@1000000000 : Codeunit 412;
      lText001@1000000005 : TextConst 'ENU=Please, select a file.;FRA=Veuillez s‚lectionner un fichier.';
      lText002@1000000004 : TextConst 'ENU=All Files (*.*)|*.*;FRA=Tous les fichiers (*.*)|*.*';
      lFake@1000000002 : Text[500];
      lText003@1000000003 : TextConst 'ENU=Fake.fake;FRA=Fake.fake';
      i@1000000006 : Integer;
    BEGIN
      // Permet de s‚lectionner un fichier dans un ‚ventuel r‚pertoire par d‚faut

      rValue := '';

      lFake := '';
      IF pFileName = '' THEN
        pFileName := lText003;
      IF STRLEN(pFolderName) <> 0 THEN BEGIN
        IF COPYSTR(pFolderName,STRLEN(pFolderName)) <> '\' THEN BEGIN
          lFake := pFolderName + '\' + pFileName;
        END ELSE BEGIN
          lFake := pFolderName + pFileName;
        END;
      END ELSE BEGIN
        lFake := pFileName;
      END;

      CLEAR(lCommonDialogMgt);
      IF pFolderOnly THEN BEGIN
        rValue := lCommonDialogMgt.OpenFile(lText001,lFake,4,lText002,0);
        FOR i := STRLEN(rValue) DOWNTO 1 DO BEGIN
          IF COPYSTR(rValue,i,1) = '\' THEN BEGIN
            EXIT;
          END;
          rValue := COPYSTR(rValue,1,STRLEN(rValue) - 1)
        END;
      END ELSE BEGIN
        rValue := lCommonDialogMgt.OpenFile(lText001,lFake,4,lText002,0);
      END;

      IF rValue = lFake THEN BEGIN
        rValue := '';
      END;
    END;

    PROCEDURE CreateFolder@1100481001(pFolderName@1100481001 : Text[500]);
    BEGIN
      CreateFolder2(pFolderName);
    END;

    LOCAL PROCEDURE CreateFolder2@1100281008(pFolderName@1100481001 : Text[500]);
    BEGIN
      IF NOT CreateFileSystem THEN BEGIN
        EXIT;
      END;

      FileSystem.CreateFolder(pFolderName);
    END;

    PROCEDURE GetPathForFile@1100481006(pCompleteFileName@1100481000 : Text[500]) : Text[500];
    BEGIN
      IF NOT CreateFileSystem THEN BEGIN
        EXIT;
      END;

      EXIT(FileSystem.GetParentFolderName(pCompleteFileName) + '\');
    END;

    PROCEDURE GetCurrentFileName@1100281009(pCompleteFileName@1100481000 : Text[500]) : Text[500];
    BEGIN
      IF NOT CreateFileSystem THEN BEGIN
        EXIT;
      END;

      EXIT(FileSystem.GetFileName(pCompleteFileName));
    END;

    PROCEDURE CreateCompletePath@1100481004(pPath@1100481000 : Text[500];pWithCheck@1100481001 : Boolean);
    BEGIN
      IF NOT CreateFileSystem THEN BEGIN
        EXIT;
      END;

      IF FileSystem.FolderExists(pPath) THEN BEGIN
        EXIT;
      END;

      IF pPath = '' THEN BEGIN
        EXIT;
      END;

      IF pWithCheck THEN BEGIN
        CheckPath(pPath);
      END;

      IF NOT FileSystem.FolderExists(FORMAT(FileSystem.GetParentFolderName(pPath))) THEN BEGIN
        CreateCompletePath(FORMAT(FileSystem.GetParentFolderName(pPath)),FALSE);
      END;

      FileSystem.CreateFolder(pPath);
    END;

    PROCEDURE CreateCompletePathLocal@1000000000(pPath@1100481000 : Text[500];pWithCheck@1100481001 : Boolean);
    BEGIN
      IF NOT CreateLocalFileSystem THEN BEGIN
        EXIT;
      END;

      IF LocalFileSystem.FolderExists(pPath) THEN BEGIN
        EXIT;
      END;

      IF pPath = '' THEN BEGIN
        EXIT;
      END;

      IF pWithCheck THEN BEGIN
        CheckPath(pPath);
      END;

      IF NOT LocalFileSystem.FolderExists(FORMAT(LocalFileSystem.GetParentFolderName(pPath))) THEN BEGIN
        CreateCompletePath(FORMAT(LocalFileSystem.GetParentFolderName(pPath)),FALSE);
      END;

      LocalFileSystem.CreateFolder(pPath);
    END;

    PROCEDURE CheckPath@1100481007(pPath@1100481000 : Text[500]);
    BEGIN
      IF pPath = '' THEN BEGIN
        ERROR(Text001,pPath);
      END;

      IF NOT CreateFileSystem THEN BEGIN
        EXIT;
      END;

      IF NOT FileSystem.DriveExists(FileSystem.GetDriveName(pPath)) THEN BEGIN
        ERROR(Text001,pPath);
      END;
    END;

    PROCEDURE DeleteFile@10(pFileName@1001 : Text[500]) : Boolean;
    VAR
      i@1002 : Integer;
    BEGIN
      IF pFileName = '' THEN BEGIN
        EXIT(FALSE);
      END;

      IF NOT EXISTS(pFileName) THEN BEGIN
        EXIT(TRUE);
      END;

      REPEAT
        SLEEP(250);
        i += 1;
      UNTIL ERASE(pFileName) OR (i = 25);

      EXIT(NOT EXISTS(pFileName));
    END;

    PROCEDURE GetFileExtension@1100481005(pFileName@1100481000 : Text[500]) : Text[100];
    BEGIN
      IF pFileName = '' THEN BEGIN
        EXIT('');
      END;

      IF NOT CreateFileSystem THEN BEGIN
        EXIT;
      END;

      EXIT(FileSystem.GetExtensionName(pFileName));
    END;

    PROCEDURE GetBaseName@1100481008(pFileName@1100481000 : Text[500]) : Text[500];
    BEGIN
      IF pFileName = '' THEN BEGIN
        EXIT('');
      END;

      IF NOT CreateFileSystem THEN BEGIN
        EXIT;
      END;

      EXIT(FileSystem.GetBaseName(pFileName));
    END;

    PROCEDURE GetCompletFileName@1100281000(pFileName@1100281000 : Text[500]) : Text[500];
    BEGIN
      EXIT(GetBaseName(pFileName) + '.' + GetFileExtension(pFileName));
    END;

    LOCAL PROCEDURE CreateFileSystem@1100481009() rValue : Boolean;
    BEGIN
      // Cr‚ation de l'instance FileSystem

      IF NOT ISCLEAR(FileSystem) THEN BEGIN
        EXIT(TRUE);
      END;

      IF NOT CREATE(FileSystem) THEN BEGIN
        EXIT(FALSE);
      END ELSE BEGIN
        EXIT(TRUE);
      END;
    END;

    PROCEDURE CreateLocalFileSystem@1100281029() rValue : Boolean;
    BEGIN
      // Cr‚ation de l'instance FileSystem

      IF NOT ISCLEAR(LocalFileSystem) THEN BEGIN
        EXIT(TRUE);
      END;

      IF NOT CREATE(LocalFileSystem, FALSE, TRUE) THEN BEGIN
        EXIT(FALSE);
      END ELSE BEGIN
        EXIT(TRUE);
      END;
    END;

    PROCEDURE DownloadStreamToClentFile@1100281001(VAR pInstream@1100281000 : InStream;pClientFileName@1100281001 : Text[1024]) : Boolean;
    VAR
      lOutStream@1100281003 : OutStream;
      lBlobRef@1100281004 : TEMPORARY Record 99008535;
    BEGIN
      //IMH02 isat.zw
      lBlobRef.Blob.CREATEOUTSTREAM(lOutStream);
      COPYSTREAM(lOutStream, pInstream);
      EXIT(DownloadBlobToClentFile(lBlobRef, pClientFileName));
    END;

    PROCEDURE CopyFile@1100281019(pServerFile@1100281000 : Text[1024];pClientFileName@1100281001 : Text[1024]) : Boolean;
    VAR
      lBlobRef@1100281002 : TEMPORARY Record 99008535;
    BEGIN
      //IMH02 isat.zw
      IF NOT ISSERVICETIER THEN
        EXIT(COPY(pServerFile, pClientFileName));

      lBlobRef.Blob.IMPORT(pServerFile);
      EXIT(DownloadBlobToClentFile(lBlobRef, pClientFileName));
    END;

    PROCEDURE CopyFile2@1100281007(pFileFrom@1100281000 : Text[1024];pFileTo@1100281001 : Text[1024]) : Boolean;
    VAR
      lBlobRef@1100281002 : TEMPORARY Record 99008535;
    BEGIN
      //IMH02 isat.zw
      IF NOT CreateLocalFileSystem THEN BEGIN
        EXIT;
      END;
      IF LocalFileSystem.FileExists(pFileFrom) THEN
        LocalFileSystem.CopyFile(pFileFrom, pFileTo);
    END;

    PROCEDURE DownloadBlobToClentFile@1100281002(VAR pBlobRef@1100281000 : Record 99008535;pClientFileName@1100281001 : Text[1024]) : Boolean;
    VAR
      lRBAutoMgt@1100281003 : Codeunit 419;
      lFileName@1100281004 : Text[1024];
    BEGIN
      //IMH02 isat.zw
      IF NOT pBlobRef.Blob.HASVALUE THEN
        EXIT;
      lFileName := pClientFileName;
      lFileName := lRBAutoMgt.BLOBExport(pBlobRef, lFileName, FALSE);

      IF ISSERVICETIER THEN BEGIN
        IF NOT CreateLocalFileSystem THEN BEGIN
          EXIT;
        END;

        LocalFileSystem.CopyFile(lFileName, pClientFileName);
        LocalFileSystem.DeleteFile(lFileName);
      END;
      CLEAR(LocalFileSystem);
      EXIT(TRUE);
    END;

    PROCEDURE CopyLocalFileToCompanyTempDir@1100281003(pLocalFileName@1100281001 : Text[1024]) rTempFileName : Text[1024];
    VAR
      lCompanyInfo@1100281003 : Record 79;
      lTempPath@1100281000 : Text[1024];
    BEGIN
      //Permet de copier un fichier local dans le repertoire temporaire partag‚ de la soci‚t‚,
      //qui peut etre acced‚ par le client et le serveur

      lCompanyInfo.GET;
      lCompanyInfo.TESTFIELD("Global Temp Root Path");
      lTempPath := lCompanyInfo."Global Temp Root Path";
      IF NOT (lTempPath[STRLEN(lTempPath)] IN ['/', '\']) THEN
        lTempPath := lTempPath + '\';
      lTempPath := lTempPath + USERID + '\';
      CreateCompletePath(lTempPath, TRUE);

      IF ISSERVICETIER THEN BEGIN
        IF NOT CreateLocalFileSystem THEN BEGIN
          EXIT;
        END;

        rTempFileName := CreateTmpFileName(lTempPath, LocalFileSystem.GetExtensionName(pLocalFileName));
        LocalFileSystem.CopyFile(pLocalFileName, rTempFileName);

        CLEAR(LocalFileSystem);
      END ELSE BEGIN
        rTempFileName := CreateTmpFileName(lTempPath, GetFileExtension(pLocalFileName));
        FILE.COPY(pLocalFileName, rTempFileName);
      END;
    END;

    PROCEDURE CreateTmpFileName@1100281004(pPath@1100281000 : Text[1024];pExtension@1100281002 : Text[100]) : Text[1024];
    VAR
      i@1100281001 : Integer;
    BEGIN
      IF NOT CreateLocalFileSystem THEN BEGIN
        EXIT;
      END;

      i := RANDOM(10000);
      WHILE TRUE DO BEGIN
        IF NOT LocalFileSystem.FileExists(pPath + 'TMP' + FORMAT(i) + '.' + pExtension) THEN BEGIN
          CLEAR(LocalFileSystem);
          EXIT(pPath + 'TMP' + FORMAT(i) + '.' + pExtension);
        END ELSE
          i += 1;
      END;
    END;

    PROCEDURE CreateCompanyTmpFileName@1100281012(pFileExtension@1100281002 : Text[100]) rTempFileName : Text[1024];
    VAR
      lCompanyInfo@1100281001 : Record 79;
      lTempPath@1100281000 : Text[1024];
    BEGIN
      lCompanyInfo.GET;
      lCompanyInfo.TESTFIELD("Global Temp Root Path");
      lTempPath := lCompanyInfo."Global Temp Root Path";
      IF NOT (lTempPath[STRLEN(lTempPath)] IN ['/', '\']) THEN
        lTempPath := lTempPath + '\';
      lTempPath := lTempPath + USERID + '\';
      CreateCompletePath(lTempPath, TRUE);

      rTempFileName := CreateTmpFileName(lTempPath, pFileExtension);
    END;

    PROCEDURE EraseTempFile@1100281028(pTempFileName@1100281000 : Text[1024]);
    VAR
      lFileSystem@1100281001 : Automation "{F935DC20-1CF0-11D0-ADB9-00C04FD58A0B} 1.0:{0D43FE01-F093-11CF-8940-00A0C9054228}:'Windows Script Host Object Model'.FileSystemObject";
    BEGIN
      {
      IF ISSERVICETIER THEN BEGIN
        IF NOT CreateLocalFileSystem THEN BEGIN
          EXIT;
        END;
        IF LocalFileSystem.FileExists(pTempFileName) THEN
          LocalFileSystem.DeleteFile(pTempFileName);
        CLEAR(LocalFileSystem);
      END ELSE BEGIN
      }
        IF EXISTS(pTempFileName) THEN
          FILE.ERASE(pTempFileName);
      //END;
    END;

    PROCEDURE CopyLocalFolderToCompanyTmpDir@1100281043(pLocalFolder@1100281001 : Text[1024]) rTempFolderName : Text[1024];
    VAR
      lCompanyInfo@1100281003 : Record 79;
      lTempPath@1100281000 : Text[1024];
    BEGIN
      //Permet de copier un repertoire local dans le repertoire temporaire partag‚ de la soci‚t‚,
      //qui peut etre acced‚ par le client et le serveur

      lCompanyInfo.GET;
      lCompanyInfo.TESTFIELD("Global Temp Root Path");
      lTempPath := lCompanyInfo."Global Temp Root Path";
      IF NOT (lTempPath[STRLEN(lTempPath)] IN ['/', '\']) THEN
        lTempPath := lTempPath + '\';
      lTempPath := lTempPath + USERID + '\';
      CreateCompletePath(lTempPath, TRUE);

      rTempFolderName := CreateTmpFolderName(lTempPath);
      IF pLocalFolder[STRLEN(pLocalFolder)] IN ['/','\'] THEN
        pLocalFolder := COPYSTR(pLocalFolder, 1, STRLEN(pLocalFolder) - 1);
      IF rTempFolderName[STRLEN(rTempFolderName)] IN ['/','\'] THEN
        rTempFolderName := COPYSTR(rTempFolderName, 1, STRLEN(rTempFolderName) - 1);

      IF ISSERVICETIER THEN BEGIN
        IF NOT CreateLocalFileSystem THEN BEGIN
          EXIT;
        END;
        //CreateLocalCompletePath(rTempFolderName, TRUE);
        LocalFileSystem.CopyFolder(pLocalFolder, rTempFolderName, TRUE);
        CLEAR(LocalFileSystem);
      END ELSE BEGIN
        IF NOT CreateFileSystem THEN BEGIN
          EXIT;
        END;

        FileSystem.CopyFolder(pLocalFolder, rTempFolderName, TRUE);
        CLEAR(FileSystem);
      END;
    END;

    PROCEDURE CreateTmpFolderName@1100281045(pPath@1100281000 : Text[1024]) : Text[1024];
    VAR
      i@1100281001 : Integer;
    BEGIN
      IF NOT CreateLocalFileSystem THEN BEGIN
        EXIT;
      END;

      i := 1;

      WHILE TRUE DO BEGIN
        IF NOT LocalFileSystem.FolderExists(pPath + 'TMPFOLDER' + FORMAT(i) + '\') THEN BEGIN
          CLEAR(LocalFileSystem);
          EXIT(pPath + 'TMPFOLDER' + FORMAT(i));
        END ELSE
          i += 1;
      END;
    END;

    PROCEDURE EraseTempFolder@1100281044(pTempFolderName@1100281000 : Text[1024]);
    BEGIN
      IF ISSERVICETIER THEN BEGIN
        IF NOT CreateLocalFileSystem THEN BEGIN
          EXIT;
        END;
        LocalFileSystem.DeleteFolder(pTempFolderName);
        CLEAR(LocalFileSystem);
      END ELSE BEGIN
        IF NOT CreateFileSystem THEN BEGIN
          EXIT;
        END;
        FileSystem.DeleteFolder(pTempFolderName);
        CLEAR(FileSystem);
      END;
    END;

    PROCEDURE EraseTempFolderLocal@1000000001(pTempFolderName@1100281000 : Text[1024]);
    BEGIN
      //IMH04
      IF NOT CreateLocalFileSystem THEN BEGIN
        EXIT;
      END;
      LocalFileSystem.DeleteFolder(pTempFolderName);
      CLEAR(LocalFileSystem);
    END;

    PROCEDURE CreateCompanyTmpFolder@1100281014() rTempFolderName : Text[1024];
    VAR
      lCompanyInfo@1100281003 : Record 79;
      lTempPath@1100281000 : Text[1024];
    BEGIN
      //IMH04
      //Permet de copier un repertoire local dans le repertoire temporaire partag‚ de la soci‚t‚,
      //qui peut etre acced‚ par le client et le serveur

      lCompanyInfo.GET;
      lCompanyInfo.TESTFIELD("Global Temp Root Path");
      lTempPath := lCompanyInfo."Global Temp Root Path";
      IF NOT (lTempPath[STRLEN(lTempPath)] IN ['/', '\']) THEN
        lTempPath := lTempPath + '\';
      lTempPath := lTempPath + USERID + '\';
      CreateCompletePathLocal(lTempPath, TRUE);

      rTempFolderName := CreateTmpFolderName(lTempPath);
      CreateCompletePathLocal(rTempFolderName, TRUE);
      CLEAR(LocalFileSystem);
    END;

    PROCEDURE ConsCompanyTempFileName@1100281005(pExtension@1100281002 : Text[100]) rTempFileName : Text[1024];
    VAR
      lCompanyInfo@1100281001 : Record 79;
      lTempPath@1100281000 : Text[1024];
    BEGIN
      //Permet de construire un nom fichier temporaire dans le repertoire temporaire partag‚ de la soci‚t‚,
      //qui peut etre acced‚ par le client et le serveur

      lCompanyInfo.GET;
      lCompanyInfo.TESTFIELD("Global Temp Root Path");
      lTempPath := lCompanyInfo."Global Temp Root Path";
      IF NOT (lTempPath[STRLEN(lTempPath)] IN ['/', '\']) THEN
        lTempPath := lTempPath + '\';
      lTempPath := lTempPath + USERID + '\';
      CreateCompletePath(lTempPath, TRUE);

      rTempFileName := CreateTmpFileName(lTempPath, pExtension);
    END;

    PROCEDURE CreateLocalCompletePath@1100281017(pPath@1100481000 : Text[500];pWithCheck@1100481001 : Boolean);
    BEGIN
      IF NOT CreateLocalFileSystem THEN BEGIN
        EXIT;
      END;

      IF LocalFileSystem.FolderExists(pPath) THEN BEGIN
        EXIT;
      END;

      IF pWithCheck THEN BEGIN
        CheckLocalPath(pPath);
      END;

      IF NOT LocalFileSystem.FolderExists(FORMAT(LocalFileSystem.GetParentFolderName(pPath))) THEN BEGIN
        CreateCompletePath(FORMAT(LocalFileSystem.GetParentFolderName(pPath)),FALSE);
      END;

      LocalFileSystem.CreateFolder(pPath);
    END;

    PROCEDURE CheckLocalPath@1100281022(pPath@1100481000 : Text[500]);
    BEGIN
      IF pPath = '' THEN BEGIN
        ERROR(Text001,pPath);
      END;

      IF NOT CreateLocalFileSystem THEN BEGIN
        EXIT;
      END;

      IF NOT LocalFileSystem.DriveExists(LocalFileSystem.GetDriveName(pPath)) THEN BEGIN
        ERROR(Text001,pPath);
      END;
    END;

    PROCEDURE GetMIMEType@1100281006(pExtension@1100281000 : Text[30]) : Text[80];
    BEGIN
      CASE UPPERCASE(pExtension) OF
        //application/javascript : .JS JavaScript ; D‚fini dans la RFC 4329
        'JS' : EXIT('application/javascript');
        //application/ogg : Ogg, un flux de donn‚es multimedia, conteneur ; D‚fini dans la RFC 3534
        'OGG' : EXIT('application/ogg');
        //application/pdf: Portable Document Format, PDF utilis‚ pour les ‚changes de documents depuis 1993; D‚fini dans la RFC 3778
        'PDF' : EXIT('application/pdf');
        //application/xhtml+xml : XHTML ; D‚fini dans la RFC 3236
        'XHTML' : EXIT('application/xhtml+xml');
        //application/x-shockwave-flash : fichier Adobe Flash ; Document‚ par Adobe TechNote tn_4151 et Adobe TechNote tn_16509
        'FLA','FLV','SWF' : EXIT('');
        //application/json : JavaScript Object Notation ; D‚fini dans la RFC 4627
        'JSON' : EXIT('application/json');
        //application/xml : Extensible Markup Language  ; D‚fini dans la RFC 3023
        'XML' : EXIT('application/xml');
        //application/zip : fichier ZIP
        'ZIP' : EXIT('application/zip');
        //audio/mpeg : MP3 ou autres MPEG ; D‚fini dans la RFC 3003
        'MPEG' : EXIT('audio/mpeg');
        //audio/x-ms-wma : Windows Media Audio ; Document‚ par Microsoft KB 288102
        'WMA' : EXIT('audio/x-ms-wma');
        //audio/vnd.rn-realaudio : RealAudio ; Document‚ par RealPlayer Customer Support Answer 2559
        'RA','RAM','RM','RMVB' : EXIT('audio/vnd.rn-realaudio');
        //audio/x-wav : WAV
        'WAV' : EXIT('audio/x-wav');
        //image/gif : GIF ; D‚fini dans la RFC 2045 et la RFC 2046
        'GIF' : EXIT('image/gif');
        //image/jpeg : JPEG image JFIF ; D‚fini dans la RFC 2045 et la RFC 2046
        'JPEG' : EXIT('image/jpeg');
        //image/png : Portable Network Graphics ; Enregistr‚[5]
        'PNG' : EXIT('image/png');
        //image/tiff : Tagged Image File Format ; D‚fini dans la RFC 3302
        'TIFF' : EXIT('image/tiff');
        //image/vnd.microsoft.icon : ic“ne ICO ; Enregistr‚[6]
        'ICO' : EXIT('image/vnd.microsoft.icon');
        //image/svg+xml: SVG vector image; Defined in SVG Tiny 1.2 Specification Appendix M
        'SVG' : EXIT('image/svg+xml');
        //text/css : Feuilles de style en cascade ; D‚fini dans la RFC 2318
        'CSS' : EXIT('text/css');
        //text/csv : Comma-separated values ; D‚fini dans la RFC 4180
        'CSV' : EXIT('text/csv');
        //text/html : HTML ; D‚fini dans la RFC 2854
        'HTML' : EXIT('text/html');
        //text/xml : Extensible Markup Language ; D‚fini dans la RFC 3023
        'XML' : EXIT('text/xml');
        //video/mpeg : MPEG-1, vid‚o avec son multiplex‚ ; D‚fini dans la RFC 2045 et la RFC 2046
        'MPEG' : EXIT('video/mpeg');
        //video/mp4 : vid‚o MP4 ; D‚fini dans la RFC 4337
        'MP4' : EXIT('video/mp4');
        //video/quicktime : vid‚o QuickTime ; Enregistr‚[7]
        'MOV' : EXIT('video/quicktime');
        //video/x-ms-wmv : Windows Media Video ; Document‚ par Microsoft KB 288102
        'WMV' : EXIT('video/x-ms-wmv');
        //video/x-msvideo : vid‚o dans un conteneur AVI
        'AVI' : EXIT('video/x-msvideo');
        //video/x-flv : Flash Video (FLV) par Adobe Systems
        'FLV' : EXIT('video/x-flv');
        //application/vnd.oasis.opendocument.text : texte OpenDocument (enregistr‚ [8])
        'ODT' : EXIT('application/vnd.oasis.opendocument.text');
        //application/vnd.oasis.opendocument.spreadsheet : feuille de calcul OpenDocument (enregistr‚ [9])
        'ODS' : EXIT('application/vnd.oasis.opendocument.spreadsheet');
        //application/vnd.oasis.opendocument.presentation : pr‚sentation OpenDocument (enregistr‚ [10])'' : Exit('');
        'ODP' : EXIT('application/vnd.oasis.opendocument.presentation');
        //application/vnd.oasis.opendocument.graphics : graphique OpenDocument (enregistr‚ [11])
        'ODG' : EXIT('application/vnd.oasis.opendocument.graphics');
        //odc application/vnd.oasis.opendocument.chart
        'ODC' : EXIT('application/vnd.oasis.opendocument.chart');
        //Formule .odf application/vnd.oasis.opendocument.formula
        'ODF' : EXIT('');
        //Base de donn‚es .odb application/vnd.oasis.opendocument.database
        'ODB' : EXIT('application/vnd.oasis.opendocument.database');
        //Image .odi application/vnd.oasis.opendocument.image
        'ODI' : EXIT('application/vnd.oasis.opendocument.image');
        //Document principal .odm application/vnd.oasis.opendocument.text-master
        'ODM' : EXIT('application/vnd.oasis.opendocument.text-master');
        //application/vnd.ms-excel : fichiers Microsoft Excel
        'XLS' : EXIT('application/vnd.ms-excel');
        //application/vnd.openxmlformats-officedocument.spreadsheetml.sheet : fichiers Microsoft Excel 2007
        'XLSX' : EXIT('application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
        //application/vnd.ms-powerpoint : fichiers Microsoft Powerpoint
        'PPT' : EXIT('application/vnd.ms-powerpoint');
        //application/msword : fichiers Microsoft Word
        'DOC' : EXIT('application/msword');
        //application/vnd.openxmlformats-officedocument.wordprocessingml.document : fichiers Microsoft Word 2007
        'DOCX' : EXIT('application/vnd.openxmlformats-officedocument.wordprocessingml.document');
        //application/vnd.mozilla.xul+xml : fichiers Mozilla XUL
        'XUL' : EXIT('application/vnd.mozilla.xul+xml');
      END;
    END;

    PROCEDURE EraseFile@1100281011(pTempFileName@1100281000 : Text[1024]);
    VAR
      lFileSystem@1100281001 : Automation "{F935DC20-1CF0-11D0-ADB9-00C04FD58A0B} 1.0:{0D43FE01-F093-11CF-8940-00A0C9054228}:'Windows Script Host Object Model'.FileSystemObject";
    BEGIN

      IF ISSERVICETIER THEN BEGIN
        IF NOT CreateLocalFileSystem THEN BEGIN
          EXIT;
        END;
        IF LocalFileSystem.FileExists(pTempFileName) THEN
          LocalFileSystem.DeleteFile(pTempFileName);
        CLEAR(LocalFileSystem);
      END ELSE BEGIN
        IF EXISTS(pTempFileName) THEN
          FILE.ERASE(pTempFileName);
      END;
    END;

    PROCEDURE ClearFileSys@1100281010();
    BEGIN
      IF NOT ISCLEAR(LocalFileSystem) THEN BEGIN
        CLEAR(LocalFileSystem);
      END;
      IF NOT ISCLEAR(FileSystem) THEN BEGIN
        CLEAR(FileSystem);
      END;
    END;

    PROCEDURE FolderIsEmpty@1100281013(pPath@1100281000 : Text[1024]) : Boolean;
    VAR
      lFolder@1100281001 : Automation "{F935DC20-1CF0-11D0-ADB9-00C04FD58A0B} 1.0:{C7C3F5B3-88A3-11D0-ABCB-00A0C90FFFC0}:'Windows Script Host Object Model'.Folder";
      lFolders@1100281002 : Automation "{F935DC20-1CF0-11D0-ADB9-00C04FD58A0B} 1.0:{C7C3F5B4-88A3-11D0-ABCB-00A0C90FFFC0}:'Windows Script Host Object Model'.Folders";
      lFiles@1100281003 : Automation "{F935DC20-1CF0-11D0-ADB9-00C04FD58A0B} 1.0:{C7C3F5B6-88A3-11D0-ABCB-00A0C90FFFC0}:'Windows Script Host Object Model'.Files";
      lFileTable@1100281004 : Record 2000000022;
      lFile@1100281005 : Automation "{F935DC20-1CF0-11D0-ADB9-00C04FD58A0B} 1.0:{C7C3F5B5-88A3-11D0-ABCB-00A0C90FFFC0}:'Windows Script Host Object Model'.File";
      i@1100281006 : Integer;
    BEGIN
      IF ISSERVICETIER THEN BEGIN
        IF NOT CreateLocalFileSystem THEN BEGIN
          EXIT;
        END;
        lFolder := LocalFileSystem.GetFolder(pPath);
        IF NOT ISCLEAR(lFolder) THEN
          lFolders := lFolder.SubFolders;
        IF NOT ISCLEAR(lFolder) THEN
          lFiles := lFolder.Files;

        IF NOT ISCLEAR(lFiles) THEN BEGIN
          FOR i:=1 TO lFiles.Count DO BEGIN
            lFile := lFiles.Item(0);
            IF lFile.Name <> 'Thumbs.db' THEN
              EXIT(FALSE);
            i += 1;
            //message(lFile.Name);
          END;
        END;
        //error(format(lFiles.Count));



        IF NOT ISCLEAR(lFolders) THEN BEGIN
          IF lFolders.Count <> 0 THEN
            EXIT(FALSE);
        END;
        CLEAR(LocalFileSystem);
        EXIT(TRUE);
      END ELSE BEGIN
        lFileTable.SETRANGE(Path, pPath);
        lFileTable.SETFILTER(Name,'<>%1&<>%2&<>%3', '.','..','Thumbs.db');
        EXIT(lFileTable.COUNT = 0);
      END;
    END;

    PROCEDURE LocalFileExist@1000000002(pLocalFileName@1000000000 : Text[1024]) : Boolean;
    BEGIN
      //IMH05
      IF NOT CreateLocalFileSystem THEN BEGIN
        EXIT;
      END;

      EXIT(LocalFileSystem.FileExists(pLocalFileName));
    END;

    PROCEDURE DropEmptyDirectories@1000000003(pPath@1000000000 : Text[500]) : Boolean;
    VAR
      lFolder@1000000006 : Automation "{F935DC20-1CF0-11D0-ADB9-00C04FD58A0B} 1.0:{C7C3F5B3-88A3-11D0-ABCB-00A0C90FFFC0}:'Windows Script Host Object Model'.Folder";
      lFolders@1000000005 : Automation "{F935DC20-1CF0-11D0-ADB9-00C04FD58A0B} 1.0:{C7C3F5B4-88A3-11D0-ABCB-00A0C90FFFC0}:'Windows Script Host Object Model'.Folders";
      lscr@1000000002 : Automation "{0E59F1D2-1FBE-11D0-8FF2-00A0D10038BC} 1.0:{0E59F1D5-1FBE-11D0-8FF2-00A0D10038BC}:'Microsoft Script Control 1.0'.ScriptControl";
      lFolder2@1000000004 : Automation "{F935DC20-1CF0-11D0-ADB9-00C04FD58A0B} 1.0:{C7C3F5B3-88A3-11D0-ABCB-00A0C90FFFC0}:'Windows Script Host Object Model'.Folder";
      lFoldersCol@1000000003 : Automation "{420B2830-E718-11CF-893D-00A0C9054228} 1.0:{EE09B103-97E0-11CF-978F-00A02463E06F}:'Microsoft Scripting Runtime'.Dictionary";
      lindex@1000000001 : Integer;
      ltxtCode@1000000010 : Text[250];
      ltxtCR@1000000009 : Text[50];
    BEGIN
      //<<IMH07.PC
      { // Plante la compile du RTC
      // IMH06.RC
      lFolder := LocalFileSystem.GetFolder(pPath);
      IF NOT ISCLEAR(lFolder) THEN BEGIN
        lFolders := lFolder.SubFolders;
      END;

      IF lFolders.Count > 0 THEN BEGIN
        CREATE(lFoldersCol);
        CREATE(lscr);

        lscr.Language := 'VBScript';
        //variable lFolders is visible in script as FoldersByName
        lscr.AddObject('FoldersByName', lFolders);
        //variable lFoldersCol is visible in script as FoldersById
        lscr.AddObject('FoldersById', lFoldersCol);

        //copy objects using VBScript
        ltxtCR := ' ';
        ltxtCR[1] := 13;
        ltxtCode :=
          'dim f1' + ltxtCR +
          'For Each f1 in FoldersByName' + ltxtCR +
          ' FoldersById.Add (FoldersById.Count + 1), f1' + ltxtCR +
          'Next' + ltxtCR;
        lscr.ExecuteStatement(ltxtCode);
        CLEAR(lscr);

        //now we can use collection of folders in Navision
        FOR lindex := 1 TO lFoldersCol.Count DO BEGIN
          lFolder2 := lFoldersCol.Item(lindex);
          DropEmptyDirectories(lFolder2.Path);
        END;
        IF FolderIsEmpty(pPath) THEN BEGIN
           lFolder.Delete(TRUE);
        END;
      END ELSE BEGIN
        IF FolderIsEmpty(pPath) THEN BEGIN
          lFolder.Delete(TRUE);
        END;
      END;
      }
      //>>IMH07.PC
    END;

    BEGIN
    {
      /** @r IMH07 @d 09/09/12 @a ISAT.PC @v IMH6.01.P006 @s Interface GED @c la fonction DropEmptyDirectories plante la compil du RTC */
      /** @r IMH06 @d 19/07/12 @a ISAT.RC @v IMH6.01.P006 @s Interface GED @c ajout foncton DropEmptyDirectories */
      /** @r IMH05 @d 14/05/12 @a ISAT.ZW @v IMH6.01.003 @s Attach. Management  @h mantis 2137
          @c Ajout fonction LocalFileExist */
      /** @r IMH04 @d 11/05/12 @a ISAT.ZW @v IMH6.01.003 @s Attach. Management  @h mantis 3443
          @c Ajout CreateCompanyTmpFolder */
      /** @r IMH03 @d 17/03/11 @a ISAT.ZW @v IMH6.01.003 @s Attach. Management
          @c Ajout fonction CopyLocalFileToCompanyTempDir + CreateTmpFileName */
      /** @r IMH02 @d 02/03/11 @a ISAT.ZW @v IMH6.01.003 @s Attach. Management
          @c Ajout fonction DownloadStreamToClentFile + DownloadBlobToClentFile */
      /** @r IMH01 @d 23/09/10 @a ISAT.ZW @v IMH6.01.003 @s Attach. Management @c Creation */
    }
    END.
  }
}