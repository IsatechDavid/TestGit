OBJECT Codeunit 50011 Ability Geo. Mgt
{
  OBJECT-PROPERTIES
  {
    Date=07/05/14;
    Time=11:50:57;
    Modified=Yes;
    Version List=IMH6.01.08,IMH6.01.P011;
  }
  PROPERTIES
  {
    OnRun=VAR
            lX@1100281000 : Integer;
            lY@1100281001 : Integer;
            lX2@1100281002 : Integer;
            lY2@1100281003 : Integer;
            lTime@1100281004 : Decimal;
            lDistance@1100281005 : Decimal;
            lPSRB@1100281007 : TEMPORARY Record 51000;
            lAddress@1100281008 : Text[50];
            lAddress2@1100281009 : Text[50];
            lCity@1100281010 : Text[50];
            lPostCode@1100281011 : Record 225;
            ldX@1100281012 : Decimal;
            ldY@1100281013 : Decimal;
            "Post Code"@1100281014 : Code[10];
            lDialog@1100281015 : Dialog;
            lPostCode2@1100281016 : Record 225;
            lData@1100281017 : BigText;
            lPSB@1100281018 : Integer;
            lServiceHeaderBuffer@1100281019 : TEMPORARY Record 5900;
            lAbiCampGeoProvSetup@1100281020 : Record 50037;
          BEGIN
            GetRoute(602725,2425604,599266,2425096,lTime,lDistance);
            EXIT;
            lAbiCampGeoProvSetup.SETRANGE("Provider No.",'072029P');
            lAbiCampGeoProvSetup.SETRANGE("Campaign No.",'0000001');
            lAbiCampGeoProvSetup.FINDFIRST();
            GenerateCampAbilityGeoProvider(lAbiCampGeoProvSetup);
            EXIT;
            //
            //lAbiCampGeoSetup.FINDFIRST();
            //GenerateAbilityCampGeo(lAbiCampGeoSetup);
            EXIT;
            //  lContactAltAddr.RESET();
            lPostCode.GET('56000','VANNES');
            GetPostCode(lPostCode);
            EXIT;
            //  lContactAltAddr.SETRANGE("Geo. Reference Address",TRUE);
            //  lContactAltAddr.SETRANGE(lContactAltAddr."Contact No.",'358448T');
              //lContactAltAddr.SETRANGE("Contact No.",'072029P');
            //   MESSAGE('count %1',lContactAltAddr.COUNT);
            //EXIT;
            //IF lContactAltAddr.FINDFIRST() THEN
            //  GeoCodeContactAltAddr(lContactAltAddr);
            //  MESSAGE('%1 %2',lContactAltAddr.Latitude,lContactAltAddr.Longitude);
            EXIT;
            GetDARVA();
            EXIT;
          END;

  }
  CODE
  {
    VAR
      Text001@1100281000 : TextConst 'ENU=Are you sure to want to delete this line ?\This is permanent.;FRA=Etes-vous s–r de vouloir supprimer ces lignes ?\Suppression d‚finitive.';
      WDialog@1100281001 : Dialog;
      Text002@1100281002 : TextConst 'ENU=Processing...;FRA=Traitement en cours...';
      Text003@1100281003 : TextConst 'ENU=\Standard\@1@@@@@@@@@@@@@@@@@;FRA=\Standard\@1@@@@@@@@@@@@@@@@@';
      Text004@1100281004 : TextConst 'ENU=\Emergency\@1@@@@@@@@@@@@@@@@@;FRA=\Urgence\@2@@@@@@@@@@@@@@@@@';
      Text005@1100281005 : TextConst 'ENU=Any specialization on provider %1.;FRA=Aucune sp‚cialit‚ d‚finie sur le prestataire %1.';
      Text006@1100281006 : TextConst 'ENU=Search in progress ...;FRA=Recherche en cours ...';
      Text007@1100281007 : TextConst 'ENU=Ability Geo. provider exist.\Do you want to update ?;FRA=La comp‚tence existe d‚j….\Souhaitez-vous la mettre … jour ?';
      Text008@1100281008 : TextConst 'ENU=The address is not standardized;FRA=l''adresse n''est pas normalis‚e';
      ProviderSetup@1100281009 : Record 50011;
      MarketingSetup@1100281011 : Record 5079;
      IsGetProviderSetup@1100281010 : Boolean;
      IsGetMarketingSetup@1100281012 : Boolean;
      Text009@1100281013 : TextConst 'ENU=Provider must have Operational Address;FRA=Le prestataire doit avoir une adresse de op‚rationnelle';
      HideMessage@1100281014 : Boolean;
      Text010@1100281015 : TextConst 'ENU=Please fill %1 before generate geo ability.;FRA=Vous devez pr‚ciser %1 avant de g‚n‚rer la comp‚tence g‚ographique.';
      Text011@1100281016 : TextConst 'ENU=You don''t fill %1. Do you want to continue ?;FRA=Vous n''avez pas renseign‚ %1. Souhaitez-vous continuer ?';
      Text012@1100281017 : TextConst 'ENU=No generation to manual setup type.;FRA=Pas de g‚n‚ration pour le type manuel.';
      Text013@1100281018 : TextConst 'ENU=All ability geo. will be delete.\Do you want to continue ?;FRA=L''ensemble de la comp‚tence g‚o. va ˆtre supprim‚e.\Souhaitez-vous continuer ?';

    PROCEDURE LookupAbilityGeoProvider@1100281007(pAbilityGeoProviderSetup@1100281000 : Record 50033);
    VAR
      lAbilityGeoProvider@1100281001 : Record 50016;
    BEGIN
      // Permet d'accŠde … la comp‚tence g‚ographique

      lAbilityGeoProvider.SETRANGE("Provider No.",pAbilityGeoProviderSetup."Provider No.");
      IF pAbilityGeoProviderSetup."Setup Type" = pAbilityGeoProviderSetup."Setup Type"::Manual THEN
        lAbilityGeoProvider.SETRANGE("Setup Type",pAbilityGeoProviderSetup."Setup Type"::Manual )
      ELSE
        lAbilityGeoProvider.SETRANGE("Start Reference Code",pAbilityGeoProviderSetup."Start Reference Code");


      IF pAbilityGeoProviderSetup."Specialization Code" <> '' THEN BEGIN
        lAbilityGeoProvider.SETRANGE("Specialization Code",pAbilityGeoProviderSetup."Specialization Code");
      END;
      FORM.RUNMODAL(0,lAbilityGeoProvider);
    END;

    PROCEDURE LookupAbilityGeoProvider2@1100281000(pAbilityGeoProviderSetup@1100281000 : Record 50033;pSpecializationCodeFilter@1100281002 : Code[20]);
    VAR
      lAbilityGeoProvider@1100281001 : Record 50016;
    BEGIN
      // Permet d'accŠde … la comp‚tence g‚ographique

      lAbilityGeoProvider.SETRANGE("Provider No.",pAbilityGeoProviderSetup."Provider No.");
      IF pAbilityGeoProviderSetup."Setup Type" = pAbilityGeoProviderSetup."Setup Type"::Manual THEN
        lAbilityGeoProvider.SETRANGE("Setup Type",pAbilityGeoProviderSetup."Setup Type"::Manual )
      ELSE
        lAbilityGeoProvider.SETRANGE("Start Reference Code",pAbilityGeoProviderSetup."Start Reference Code");


      IF pAbilityGeoProviderSetup."Specialization Code" <> '' THEN BEGIN
        lAbilityGeoProvider.SETRANGE("Specialization Code",pAbilityGeoProviderSetup."Specialization Code");
      END ELSE BEGIN
        IF pSpecializationCodeFilter <> '' THEN BEGIN
          lAbilityGeoProvider.SETRANGE("Specialization Code",pSpecializationCodeFilter);
        END;
      END;

      FORM.RUNMODAL(0,lAbilityGeoProvider);
    END;

    PROCEDURE LookupAbiCampGeoProvider@1100281018(pAbiCampGeoProviderSetup@1100281000 : Record 50037);
    VAR
      lAbiCampGeoProvider@1100281001 : Record 50015;
    BEGIN
      // Permet d'accŠde … la comp‚tence g‚ographique

      lAbiCampGeoProvider.SETRANGE("Provider No.",pAbiCampGeoProviderSetup."Provider No.");
      IF pAbiCampGeoProviderSetup."Setup Type" <> pAbiCampGeoProviderSetup."Setup Type"::Manual THEN
        lAbiCampGeoProvider.SETRANGE("Start Ref. Geo. Code",pAbiCampGeoProviderSetup."Start Reference Code");
      lAbiCampGeoProvider.SETRANGE("Setup Type",pAbiCampGeoProviderSetup."Setup Type");
      FORM.RUNMODAL(0,lAbiCampGeoProvider);
    END;

    PROCEDURE LookupAbiCampGeo@1100281028(pAbiCampGeoSetup@1100281000 : Record 50082);
    VAR
      lAbiCampGeo@1100281001 : Record 50086;
    BEGIN
      // Permet d'accŠde … la comp‚tence g‚ographique
      lAbiCampGeo.SETRANGE("Campaign No.",pAbiCampGeoSetup."Campaign No.");
      IF pAbiCampGeoSetup."Setup Type" <> pAbiCampGeoSetup."Setup Type"::Manual THEN
        lAbiCampGeo.SETRANGE("Start Ref. Geo. Code",pAbiCampGeoSetup."Start Reference Code");
      lAbiCampGeo.SETRANGE("Setup Type",pAbiCampGeoSetup."Setup Type");

      FORM.RUNMODAL(0,lAbiCampGeo);
    END;

    PROCEDURE LookupAbiCampGeoProvSetup@1100281016(pAbiCampGeoProviderSetup@1100281000 : Record 50037);
    VAR
      lAbiCampGeoProvider@1100281001 : Record 50015;
    BEGIN
      // Permet d'accŠde … la comp‚tence g‚ographique

      //lAbiCampGeoProvider.SETRANGE("Campaign No.",pAbiCampGeoProviderSetup."Campaign No.");
      //lAbiCampGeoProvider.SETRANGE("Provider No.",pAbiCampGeoProviderSetup."Provider No.");
      //lAbiCampGeoProvider.SETRANGE("Start Ref. Geo. Code",pAbiCampGeoProviderSetup."Start Reference Code");
      //IF lAbiCampGeoProvider."Specialization Code" <> '' THEN BEGIN
      //  lAbiCampGeoProvider.SETRANGE("Specialization Code",pAbiCampGeoProviderSetup."Specialization Code");
      //END;
      FORM.RUNMODAL(0,pAbiCampGeoProviderSetup);
    END;

    PROCEDURE LookupAbiCampGeoSetup@1100281027(pAbiCampGeoSetup@1100281000 : Record 50082);
    VAR
      lAbiCampGeoProvider@1100281001 : Record 50015;
    BEGIN
      // Permet d'accŠde … la comp‚tence g‚ographique

      //lAbiCampGeoProvider.SETRANGE("Campaign No.",pAbiCampGeoProviderSetup."Campaign No.");
      //lAbiCampGeoProvider.SETRANGE("Provider No.",pAbiCampGeoProviderSetup."Provider No.");
      //lAbiCampGeoProvider.SETRANGE("Start Ref. Geo. Code",pAbiCampGeoProviderSetup."Start Reference Code");
      //IF lAbiCampGeoProvider."Specialization Code" <> '' THEN BEGIN
      //  lAbiCampGeoProvider.SETRANGE("Specialization Code",pAbiCampGeoProviderSetup."Specialization Code");
      //END;
      FORM.RUNMODAL(0,pAbiCampGeoSetup);
    END;

    PROCEDURE ExcludeAbilityGeoProvider@1100281001(VAR pAbilityGeoProvider@1100281000 : Record 50016;pExclude@1100281001 : Boolean;pEmergency@1100281002 : Boolean);
    BEGIN
      WITH pAbilityGeoProvider DO BEGIN
        IF FINDSET THEN BEGIN
          REPEAT
            IF pEmergency AND ("Emergency Exclusion" <> pExclude) THEN BEGIN
              "Emergency Exclusion" := pExclude;
              MODIFY(TRUE);
            END ELSE BEGIN
              IF NOT pEmergency AND ("Standard Exclusion" <> pExclude) THEN BEGIN
                "Standard Exclusion" := pExclude;
                MODIFY(TRUE);
              END;
            END;
          UNTIL NEXT = 0;
        END;
      END;
    END;

    PROCEDURE ExcludeAbiCampGeoProvider@1100281019(VAR pAbiCampGeoProvider@1100281000 : Record 50015;pExclude@1100281002 : Boolean);
    BEGIN
      WITH pAbiCampGeoProvider DO BEGIN
        IF FINDSET THEN BEGIN
          REPEAT
            IF NOT Exclusion THEN BEGIN
              Exclusion := pExclude;
              MODIFY(TRUE);
            END;
          UNTIL NEXT = 0;
        END;
      END;
    END;

    PROCEDURE DeleteAbilityGeoProvider@1100281005(VAR pAbilityGeoProvider@1100281000 : Record 50016);
    BEGIN
      IF GUIALLOWED AND NOT HideMessage THEN BEGIN
        IF NOT CONFIRM(Text001) THEN BEGIN
          EXIT;
        END;
      END;
      WITH pAbilityGeoProvider DO BEGIN
        IF FINDSET() THEN BEGIN
          REPEAT
            DELETE(TRUE);
          UNTIL NEXT() = 0;
        END;
      END;
    END;

    PROCEDURE DeleteAbiCampGeoProvider@1100281020(VAR pAbiCampGeoProvider@1100281000 : Record 50015);
    BEGIN
      IF GUIALLOWED AND NOT HideMessage THEN BEGIN
        IF NOT CONFIRM(Text001) THEN BEGIN
          EXIT;
        END;
      END;
      WITH pAbiCampGeoProvider DO BEGIN
        IF FINDSET() THEN BEGIN
          REPEAT
            DELETE(TRUE);
          UNTIL NEXT() = 0;
        END;
      END;
    END;

    PROCEDURE GenerateAbilityGeoProvider@1100281006(VAR pAbilityGeoProviderSetup@1100281001 : Record 50033);
    VAR
      lAbilityGeoSearchBuffer@1100281002 : TEMPORARY Record 51001;
      lProviderSpecialization@1100281000 : Record 50006;
      lProviderSearchMgt@1100281003 : Codeunit 50000;
      lAbilityGeoProvider@1100281004 : Record 50016;
    BEGIN
      // Ajoute … la table Ability Geo Provider les enregistrement en fonction d'un cercle … vol d'oiseau.
      IF NOT GUIALLOWED THEN
        HideMessage := TRUE;

      // Pas de g‚n‚ration si le type est manuel
      IF pAbilityGeoProviderSetup."Setup Type" = pAbilityGeoProviderSetup."Setup Type"::Manual THEN BEGIN
        IF NOT HideMessage THEN BEGIN
          MESSAGE(Text012);
        END;
        EXIT;
      END;

      // on v‚rifie qu'il existe des sp‚cialit‚s sur ce prestataire
      lProviderSpecialization.SETRANGE("Provider No.",pAbilityGeoProviderSetup."Provider No.");
      IF lProviderSpecialization.ISEMPTY THEN BEGIN
        ERROR(STRSUBSTNO(Text005,pAbilityGeoProviderSetup."Provider No."));
      END;
      //<<IMH08.ST
      IF pAbilityGeoProviderSetup."Start Reference Code" = '' THEN
        ERROR(STRSUBSTNO(Text010, pAbilityGeoProviderSetup.FIELDCAPTION("Start Reference Code")));
      //>>IMH08.ST
      pAbilityGeoProviderSetup.TESTFIELD("Start Reference Code");

      IF pAbilityGeoProviderSetup.IsGenerated THEN BEGIN
        IF NOT HideMessage THEN BEGIN
          IF NOT CONFIRM(Text007) THEN BEGIN
            EXIT;
          END;
        END;
      END;

      lAbilityGeoProvider.RESET;
      lAbilityGeoProvider.SETRANGE("Provider No.",pAbilityGeoProviderSetup."Provider No.");
      lAbilityGeoProvider.SETRANGE("Start Reference Code",pAbilityGeoProviderSetup."Start Reference Code");
      lAbilityGeoProvider.SETRANGE("Setup Type",pAbilityGeoProviderSetup."Setup Type");
      //IMH13 isat.nfo
      IF pAbilityGeoProviderSetup."Specialization Code" <> '' THEN
        lAbilityGeoProvider.SETRANGE("Specialization Code",pAbilityGeoProviderSetup."Specialization Code");
      lAbilityGeoProvider.DELETEALL;

      IF NOT HideMessage THEN BEGIN
      //  IF (pAbilityGeoProviderSetup."Setup Type" = pAbilityGeoProviderSetup."Setup Type"::"Ville (Distance)") THEN BEGIN
      //  IF pAbilityGeoProviderSetup.Standard AND (pAbilityGeoProviderSetup."Distance (km)"=0) THEN
      //    IF NOT CONFIRM(STRSUBSTNO(Text011,pAbilityGeoProviderSetup.FIELDCAPTION("Distance (km)"))) THEN
      //      ERROR('');
      //  IF pAbilityGeoProviderSetup.Emergency AND (pAbilityGeoProviderSetup."Emergency Distance (km)"=0) THEN
      //    IF NOT CONFIRM(STRSUBSTNO(Text011,pAbilityGeoProviderSetup.FIELDCAPTION("Emergency Distance (km)"))) THEN
      //      ERROR('');
      //  END;

        IF pAbilityGeoProviderSetup.Standard AND pAbilityGeoProviderSetup.Emergency THEN BEGIN
          WDialog.OPEN(Text002 + Text003 + Text004);
        END ELSE BEGIN
          IF pAbilityGeoProviderSetup.Standard THEN BEGIN
            WDialog.OPEN(Text002 + Text003);
          END;
          IF pAbilityGeoProviderSetup.Emergency THEN BEGIN
            WDialog.OPEN(Text002 + Text004);
          END;
        END
      END;

      //IF pAbilityGeoProviderSetup.Standard THEN BEGIN
        IF (pAbilityGeoProviderSetup."Distance (km)" >= pAbilityGeoProviderSetup."Emergency Distance (km)") THEN
          LoadGeoSearchBuffer(pAbilityGeoProviderSetup, lAbilityGeoSearchBuffer,
                              pAbilityGeoProviderSetup."Distance (km)")
        ELSE
          LoadGeoSearchBuffer(pAbilityGeoProviderSetup, lAbilityGeoSearchBuffer,
                              pAbilityGeoProviderSetup."Emergency Distance (km)");
        ManageAbilityGeoProvider(
          lAbilityGeoSearchBuffer,
          pAbilityGeoProviderSetup."Provider No.",
          pAbilityGeoProviderSetup."Specialization Code",
          pAbilityGeoProviderSetup."Start Reference Code",
          pAbilityGeoProviderSetup.Emergency,
          pAbilityGeoProviderSetup."Distance (km)",
          pAbilityGeoProviderSetup."Emergency Distance (km)",
          pAbilityGeoProviderSetup."Setup Type");
      //END;
      {
      IF pAbilityGeoProviderSetup.Emergency THEN BEGIN
        IF (NOT pAbilityGeoProviderSetup.Standard) OR
           (pAbilityGeoProviderSetup."Distance (km)" <> pAbilityGeoProviderSetup."Emergency Distance (km)") THEN BEGIN
          // Chargement de la zone
          LoadGeoSearchBuffer(pAbilityGeoProviderSetup, lAbilityGeoSearchBuffer,
                              pAbilityGeoProviderSetup."Emergency Distance (km)");
        END;
        ManageAbilityGeoProvider(
          lAbilityGeoSearchBuffer,
          pAbilityGeoProviderSetup."Provider No.",
          pAbilityGeoProviderSetup."Specialization Code",
          pAbilityGeoProviderSetup."Start Reference Code",
          TRUE,
          pAbilityGeoProviderSetup."Emergency Distance (km)",
          pAbilityGeoProviderSetup."Setup Type");
      END;
      }
      pAbilityGeoProviderSetup.Generated := pAbilityGeoProviderSetup.IsGenerated; //IMH06

      IF NOT HideMessage THEN BEGIN
        WDialog.CLOSE;
      END;
    END;

    PROCEDURE GenerateAbilityCampGeo@1100281043(VAR pAbiCampGeoSetup@1100281001 : Record 50082);
    VAR
      lAbilityGeoSearchBuffer@1100281002 : TEMPORARY Record 51001;
      lAbilityCampGeo@1100281004 : Record 50086;
    BEGIN
      // Ajoute … la table Ability Geo Camp les enregistrement en fonction d'un cercle … vol d'oiseau.
      IF NOT GUIALLOWED THEN
        HideMessage := TRUE;

      // Pas de g‚n‚ration si le type est manuel
      IF pAbiCampGeoSetup."Setup Type" = pAbiCampGeoSetup."Setup Type"::Manual THEN BEGIN
        IF NOT HideMessage THEN
          MESSAGE(Text012);
        EXIT;
      END;
      //<<IMH08.ST
      IF pAbiCampGeoSetup."Start Reference Code" = '' THEN
        ERROR(STRSUBSTNO(Text010, pAbiCampGeoSetup.FIELDCAPTION("Start Reference Code")));
      //>>IMH08.ST
      IF pAbiCampGeoSetup.IsGenerated THEN BEGIN
        IF NOT HideMessage THEN BEGIN
          IF NOT CONFIRM(Text007) THEN BEGIN
            EXIT;
          END;
        END;
      END;

      lAbilityCampGeo.RESET;
      lAbilityCampGeo.SETRANGE("Campaign No.",pAbiCampGeoSetup."Campaign No.");
      lAbilityCampGeo.SETRANGE("Start Ref. Geo. Code",pAbiCampGeoSetup."Start Reference Code");
      lAbilityCampGeo.SETRANGE("Setup Type",pAbiCampGeoSetup."Setup Type");
      //IMH13 isat.nfo
      lAbilityCampGeo.DELETEALL;

      IF NOT HideMessage THEN BEGIN
        WDialog.OPEN(Text002 + Text003);
      END;

        LoadGeoCampSearchBuffer(pAbiCampGeoSetup, lAbilityGeoSearchBuffer,
                              pAbiCampGeoSetup."Distance (km)");
        ManageAbilityCampGeo(
          lAbilityGeoSearchBuffer,
          pAbiCampGeoSetup."Campaign No.",
          pAbiCampGeoSetup."Start Reference Code",
          pAbiCampGeoSetup."Distance (km)",
          pAbiCampGeoSetup."Setup Type");

      pAbiCampGeoSetup.Generated := pAbiCampGeoSetup.IsGenerated; //IMH06

      IF NOT HideMessage THEN
        WDialog.CLOSE;
    END;

    PROCEDURE GenerateCampAbilityGeoProvider@1100281013(VAR pAbiCampGeoProviderSetup@1100281001 : Record 50037);
    VAR
      lAbilityGeoSearchBuffer@1100281002 : TEMPORARY Record 51001;
      lProviderSpecialization@1100281000 : Record 50006;
      lProviderSearchMgt@1100281003 : Codeunit 50000;
    BEGIN
      // Ajoute … la table Ability Geo Provider les enregistrement en fonction d'un cercle … vol d'oiseau.

      // on v‚rifie qu'il existe des sp‚cialit‚s sur ce prestataire
      WITH pAbiCampGeoProviderSetup DO BEGIN
        TESTFIELD("Start Reference Code");
        IF GUIALLOWED AND NOT HideMessage THEN BEGIN
          WDialog.OPEN(Text002 + Text003);
        END;

          lAbilityGeoSearchBuffer.RESET;
          lAbilityGeoSearchBuffer.DELETEALL;
          CASE "Setup Type" OF
            "Setup Type":: "City (Distance)" : BEGIN
              lProviderSearchMgt.GetInseeByDistanceKm(
                "Start Reference Code",
                "Distance (km)",
                lAbilityGeoSearchBuffer,
                FALSE);
            END;
            "Setup Type"::Area : BEGIN
              GetInseeByArea(lAbilityGeoSearchBuffer,"Start Reference Code");
            END;
            "Setup Type"::Territory : BEGIN
              GetInseeByTerritory(lAbilityGeoSearchBuffer,"Start Reference Code");
            END;
          END;
          ManageCampAbilityGeoProvider(
            lAbilityGeoSearchBuffer,
            pAbiCampGeoProviderSetup."Campaign No.",
            "Provider No.",
      //      GetGeoRefCode,
            "Start Reference Code",
            "Distance (km)",
            "Setup Type");
        pAbiCampGeoProviderSetup.Generated := pAbiCampGeoProviderSetup.IsGenerated; //IMH17

        IF GUIALLOWED AND NOT HideMessage THEN BEGIN
          WDialog.CLOSE;
        END;
      END;
    END;

    PROCEDURE "---- Manage"@1100281058();
    BEGIN
    END;

    PROCEDURE ManageAbilityGeoProvider@1100281002(VAR pAbilityGeoSearchBuffer@1100281001 : Record 51001;pProviderNo@1100281005 : Code[20];pSpecializationCode@1100281006 : Code[10];pStartRefGeoCode@1100281007 : Code[10];pEmergency@1100281008 : Boolean;pDistance@1100281004 : Integer;pDistanceEmergency@1100281013 : Integer;pSetupType@1100281011 : Option);
    VAR
      lAbilityGeoProvider@1100281003 : Record 50016;
      lProviderSpecialization@1100281002 : Record 50006;
      lCurrentCounter@1100281000 : Integer;
      lTotalCounter@1100281010 : Integer;
      lModuloCounter@1100281009 : Integer;
      lTempProvSpec@1100281012 : TEMPORARY Record 50006;
    BEGIN
      // Cr‚e ou modifie la comp‚tence g‚ographique
      IF NOT GUIALLOWED THEN
        HideMessage := TRUE;
      IF NOT HideMessage THEN BEGIN
        lCurrentCounter := 0;
        lTotalCounter := pAbilityGeoSearchBuffer.COUNT;
        lModuloCounter := ROUND(lTotalCounter * 5 / 100,1,'>');
      END;
      lAbilityGeoProvider.TestUserPerm(pProviderNo);
      // Buffer sp‚cialit‚
      lProviderSpecialization.SETRANGE("Provider No.",pProviderNo);
      IF pSpecializationCode <> '' THEN
        lProviderSpecialization.SETRANGE("Specialization Code",pSpecializationCode);
      IF lProviderSpecialization.FINDSET THEN BEGIN
        REPEAT
          lTempProvSpec := lProviderSpecialization;
          lTempProvSpec.INSERT;
        UNTIL lProviderSpecialization.NEXT=0;
      END;

      IF pAbilityGeoSearchBuffer.FINDSET THEN BEGIN
        REPEAT
          IF NOT HideMessage THEN BEGIN
            lCurrentCounter += 1;
            IF lCurrentCounter MOD lModuloCounter = 1 THEN BEGIN
              IF NOT pEmergency THEN BEGIN
                WDialog.UPDATE(1,ROUND(lCurrentCounter / lTotalCounter * 9999,1));
              END ELSE BEGIN
                WDialog.UPDATE(2,ROUND(lCurrentCounter / lTotalCounter * 9999,1));
              END;
            END;
          END;
          pAbilityGeoSearchBuffer.Distance := ROUND(pAbilityGeoSearchBuffer.Distance,1); // arrondi distance
          IF lTempProvSpec.FINDSET THEN BEGIN
            REPEAT
              IF lProviderSpecialization.GET(pProviderNo,lTempProvSpec."Specialization Code") THEN;
              // mise … jour ‚ventuelle des donn‚es existantes
              //<<IMH10 isat.nfo les donn‚es sont supprim‚es avant l'appel de cette fonction
              { //NFO
              lAbilityGeoProvider.SETRANGE("Provider No.",pProviderNo);
              lAbilityGeoProvider.SETRANGE("Start Reference Code",pStartRefGeoCode);
              lAbilityGeoProvider.SETRANGE("Specialization Code", lTempProvSpec."Specialization Code");
              lAbilityGeoProvider.SETFILTER("Distance (km)",'>%1',pDistance);
              lAbilityGeoProvider.SETRANGE("Setup Type",pSetupType);
              IF lAbilityGeoProvider.FINDSET THEN BEGIN
                REPEAT
                  lAbilityGeoProvider.SetSkipUserPerm(TRUE);
                  lAbilityGeoProvider.Standard := (lAbilityGeoProvider."Distance (km)" <= pDistance);
                  lAbilityGeoProvider.Emergency :=
                    (lAbilityGeoProvider."Distance (km)" <= pDistanceEmergency) AND
                    (pEmergency) and
                    (lProviderSpecialization.Emergency);
                  IF NOT lAbilityGeoProvider.Standard AND NOT lAbilityGeoProvider.Emergency THEN
                    lAbilityGeoProvider.DELETE(TRUE)
                  ELSE
                    lAbilityGeoProvider.MODIFY(TRUE);
                UNTIL lAbilityGeoProvider.NEXT = 0;
              END;

              // ouverture de nouvelles lignes si besoin
              IF NOT lAbilityGeoProvider.GET(
                pProviderNo,
                pStartRefGeoCode,
                pAbilityGeoSearchBuffer."Ref. Geo. Code",
                lTempProvSpec."Specialization Code")
              THEN BEGIN
              //NFO}
              //>>IMH10 isat.nfo
                lAbilityGeoProvider.INIT;
                lAbilityGeoProvider."Provider No." := pProviderNo;
                lAbilityGeoProvider."Setup Type" := pSetupType;
                lAbilityGeoProvider."Start Reference Code" := pStartRefGeoCode;
                lAbilityGeoProvider."End Ref. Geo. Code" := pAbilityGeoSearchBuffer."Ref. Geo. Code";
                lAbilityGeoProvider."Main Specialization" := lTempProvSpec."Main Specialization";
                lAbilityGeoProvider."Specialization Code" := lTempProvSpec."Specialization Code";
                lAbilityGeoProvider."Distance (km)" := pAbilityGeoSearchBuffer.Distance;
                lAbilityGeoProvider.Standard := (lAbilityGeoProvider."Distance (km)" <= pDistance);
                lAbilityGeoProvider.Emergency :=
                  (lAbilityGeoProvider."Distance (km)" <= pDistanceEmergency) AND
                  (pEmergency) AND
                  (lProviderSpecialization.Emergency);
                lAbilityGeoProvider.SetSkipUserPerm(TRUE);
                lAbilityGeoProvider.INSERT(TRUE);
              //<<IMH10 isat.nfo
              {NFO
              END ELSE BEGIN
                lAbilityGeoProvider.Standard := (lAbilityGeoProvider."Distance (km)" <= pDistance);
                lAbilityGeoProvider.Emergency :=
                  (lAbilityGeoProvider."Distance (km)" <= pDistanceEmergency) AND
                  (pEmergency) and
                  (lProviderSpecialization.Emergency);
                lAbilityGeoProvider.SetSkipUserPerm(TRUE);
                lAbilityGeoProvider.MODIFY(TRUE);
              END;
              NFO }
              //>>IMH10 isat.nfo
            UNTIL lTempProvSpec.NEXT = 0;
          END;
        UNTIL pAbilityGeoSearchBuffer.NEXT = 0;
      END ELSE BEGIN
        // Cas o— rien n'est trouv‚
        IF lTempProvSpec.FINDSET THEN BEGIN
          REPEAT
            IF lProviderSpecialization.GET(pProviderNo,lTempProvSpec."Specialization Code") THEN;
            // mise … jour ‚ventuelle des donn‚es existantes
            lAbilityGeoProvider.SETRANGE("Provider No.",pProviderNo);
            lAbilityGeoProvider.SETRANGE("Start Reference Code",pStartRefGeoCode);
            lAbilityGeoProvider.SETRANGE("Setup Type",pSetupType);
            lAbilityGeoProvider.SETRANGE("Specialization Code",lTempProvSpec."Specialization Code");
            IF lAbilityGeoProvider.FINDSET THEN BEGIN
              REPEAT
                lAbilityGeoProvider.SetSkipUserPerm(TRUE);
                lAbilityGeoProvider.Standard := (lAbilityGeoProvider."Distance (km)" <= pDistance);
                lAbilityGeoProvider.Emergency :=
                  (lAbilityGeoProvider."Distance (km)" <= pDistanceEmergency) AND
                  (pEmergency) AND
                  (lProviderSpecialization.Emergency);
                IF NOT lAbilityGeoProvider.Standard AND NOT lAbilityGeoProvider.Emergency THEN BEGIN
                  lAbilityGeoProvider.DELETE(TRUE);
                END ELSE BEGIN
                  lAbilityGeoProvider.MODIFY(TRUE);
                END;
              UNTIL lAbilityGeoProvider.NEXT = 0;
            END;
            // ouverture de nouvelles lignes si besoin
            IF NOT lAbilityGeoProvider.GET(
              pProviderNo,
              pStartRefGeoCode,
              pStartRefGeoCode,
              lTempProvSpec."Specialization Code")
            THEN BEGIN
              lAbilityGeoProvider.INIT;
              lAbilityGeoProvider."Provider No." := pProviderNo;
              lAbilityGeoProvider."Setup Type" := pSetupType;
              lAbilityGeoProvider."Start Reference Code" := pStartRefGeoCode;
              lAbilityGeoProvider."End Ref. Geo. Code" := pStartRefGeoCode;
              lAbilityGeoProvider."Main Specialization" := lTempProvSpec."Main Specialization";
              lAbilityGeoProvider."Specialization Code" := lTempProvSpec."Specialization Code";
              lAbilityGeoProvider."Distance (km)" := 0;
              lAbilityGeoProvider.Standard := TRUE;
              lAbilityGeoProvider.Emergency := (pEmergency) AND (lProviderSpecialization.Emergency);
              lAbilityGeoProvider.SetSkipUserPerm(TRUE);
              lAbilityGeoProvider.INSERT(TRUE);
            END;
          UNTIL lTempProvSpec.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE ManageAbilityCampGeo@1100281054(VAR pAbilityGeoSearchBuffer@1100281001 : Record 51001;pCampaignNo@1100281005 : Code[20];pStartRefGeoCode@1100281007 : Code[10];pDistance@1100281004 : Integer;pSetupType@1100281011 : Option);
    VAR
      lAbilityCampGeo@1100281003 : Record 50086;
      lCurrentCounter@1100281000 : Integer;
      lTotalCounter@1100281010 : Integer;
      lModuloCounter@1100281009 : Integer;
      lTempProvSpec@1100281012 : TEMPORARY Record 50006;
    BEGIN
      // Cr‚e ou modifie la comp‚tence g‚ographique
      IF NOT GUIALLOWED THEN
        HideMessage := TRUE;
      IF NOT HideMessage THEN BEGIN
        lCurrentCounter := 0;
        lTotalCounter := pAbilityGeoSearchBuffer.COUNT;
        lModuloCounter := ROUND(lTotalCounter * 5 / 100,1,'>');
      END;

      IF pAbilityGeoSearchBuffer.FINDSET THEN BEGIN
        REPEAT
          IF NOT HideMessage THEN BEGIN
            lCurrentCounter += 1;
            IF lCurrentCounter MOD lModuloCounter = 1 THEN BEGIN
              WDialog.UPDATE(1,ROUND(lCurrentCounter / lTotalCounter * 9999,1));
            END;
          END;
          //pAbilityGeoSearchBuffer.Distance := ROUND(pAbilityGeoSearchBuffer.Distance,1); // arrondi distance
          lAbilityCampGeo.INIT;
          lAbilityCampGeo."Campaign No." := pCampaignNo;
          lAbilityCampGeo."Setup Type" := pSetupType;
          lAbilityCampGeo."Start Ref. Geo. Code" := pStartRefGeoCode;//pAbilityGeoSearchBuffer."Ref. Geo. Code";//
          lAbilityCampGeo."End Ref. Geo. Code" := pAbilityGeoSearchBuffer."Ref. Geo. Code";
          lAbilityCampGeo."Distance (km)" := 0; //pAbilityGeoSearchBuffer.Distance;
          IF lAbilityCampGeo.INSERT(TRUE) THEN;
        UNTIL pAbilityGeoSearchBuffer.NEXT = 0;
      END;
    END;

    PROCEDURE ManageCampAbilityGeoProvider@1100281014(VAR pAbilityGeoSearchBuffer@1100281001 : Record 51001;pCampaignNo@1100281012 : Code[20];pProviderNo@1100281005 : Code[20];pStartRefGeoCode@1100281007 : Code[10];pDistance@1100281004 : Integer;pSetupType@1100281011 : Option);
    VAR
      lAbiGeoCampProvider@1100281003 : Record 50015;
      lProviderSpecialization@1100281002 : Record 50006;
      lCurrentCounter@1100281000 : Integer;
      lTotalCounter@1100281010 : Integer;
      lModuloCounter@1100281009 : Integer;
    BEGIN
      // Cr‚e ou modifie la comp‚tence g‚ographique

      IF GUIALLOWED THEN BEGIN
        lCurrentCounter := 0;
        lTotalCounter := pAbilityGeoSearchBuffer.COUNT;
        lModuloCounter := ROUND(lTotalCounter * 5 / 100,1,'>');
      END;
      IF pAbilityGeoSearchBuffer.FINDSET THEN BEGIN
        REPEAT
          IF GUIALLOWED AND NOT HideMessage THEN BEGIN
            lCurrentCounter += 1;
            IF lCurrentCounter MOD lModuloCounter = 1 THEN BEGIN
              WDialog.UPDATE(1,ROUND(lCurrentCounter / lTotalCounter * 9999,1));
            END;
          END;

              // mise … jour ‚ventuelle des donn‚es existantes
              lAbiGeoCampProvider.SETRANGE("Campaign No.",pCampaignNo);
              lAbiGeoCampProvider.SETRANGE("Provider No.",pProviderNo);
              lAbiGeoCampProvider.SETRANGE("Start Ref. Geo. Code",pStartRefGeoCode);

              lAbiGeoCampProvider.SETFILTER("Distance (km)",'>%1',pDistance);
              lAbiGeoCampProvider.SETRANGE("Setup Type",pSetupType);
              IF lAbiGeoCampProvider.FINDSET THEN BEGIN
                REPEAT
                  lAbiGeoCampProvider.DELETE(TRUE);
                UNTIL lAbiGeoCampProvider.NEXT = 0;
              END;
              // ouverture de nouvelles lignes si besoin
              IF NOT lAbiGeoCampProvider.GET(
                pCampaignNo,
                pProviderNo,
                pStartRefGeoCode,
                pAbilityGeoSearchBuffer."Ref. Geo. Code")
              THEN BEGIN
                lAbiGeoCampProvider.INIT;
                lAbiGeoCampProvider."Campaign No." := pCampaignNo;
                //lAbiGeoCampProvider.VALIDATE("Campaign No.",pCampaignNo);
                lAbiGeoCampProvider.VALIDATE("Provider No.",pProviderNo);
                lAbiGeoCampProvider.VALIDATE("Setup Type",pSetupType);
                lAbiGeoCampProvider.VALIDATE("Start Ref. Geo. Code",pStartRefGeoCode);
                lAbiGeoCampProvider.VALIDATE("End Ref. Geo. Code",pAbilityGeoSearchBuffer."Ref. Geo. Code");
                lAbiGeoCampProvider.VALIDATE("Distance (km)",ROUND(pAbilityGeoSearchBuffer.Distance,1));
                lAbiGeoCampProvider.INSERT(TRUE);
              END ELSE BEGIN
                lAbiGeoCampProvider.MODIFY(TRUE);
              END;

        UNTIL pAbilityGeoSearchBuffer.NEXT = 0;
      END ELSE BEGIN
        // Cas o— rien n'est trouv‚
        lProviderSpecialization.SETRANGE("Provider No.",pProviderNo);
          // mise … jour ‚ventuelle des donn‚es existantes
          lAbiGeoCampProvider.SETRANGE("Campaign No.",pCampaignNo);
          lAbiGeoCampProvider.SETRANGE("Provider No.",pProviderNo);
          lAbiGeoCampProvider.SETRANGE("Start Ref. Geo. Code",pStartRefGeoCode);
          lAbiGeoCampProvider.SETRANGE("Setup Type",pSetupType);
          IF lAbiGeoCampProvider.FINDSET THEN BEGIN
            REPEAT
              lAbiGeoCampProvider.DELETE(TRUE);
            UNTIL lAbiGeoCampProvider.NEXT = 0;
          END;
          // ouverture de nouvelles lignes si besoin
          IF NOT lAbiGeoCampProvider.GET(
            pCampaignNo,
            pProviderNo,
            pStartRefGeoCode,
            pStartRefGeoCode)
          THEN BEGIN
            lAbiGeoCampProvider.INIT;
            lAbiGeoCampProvider."Campaign No." := pCampaignNo;
            //lAbiGeoCampProvider.VALIDATE("Campaign No.",pCampaignNo);
            lAbiGeoCampProvider.VALIDATE("Provider No.",pProviderNo);
            lAbiGeoCampProvider.VALIDATE("Setup Type",pSetupType);
            lAbiGeoCampProvider.VALIDATE("Start Ref. Geo. Code",pStartRefGeoCode);
            lAbiGeoCampProvider.VALIDATE("End Ref. Geo. Code",pStartRefGeoCode);
            lAbiGeoCampProvider.VALIDATE("Distance (km)",0);
            lAbiGeoCampProvider.INSERT(TRUE);
          END;
      END;
    END;

    PROCEDURE "------"@1100281059();
    BEGIN
    END;

    PROCEDURE GetRoute@1100281003(pOrigX@1100281000 : Integer;pOrigY@1100281001 : Integer;pDestX@1100281008 : Integer;pDestY@1100281009 : Integer;VAR pTime@1100281010 : Decimal;VAR pDistance@1100281011 : Decimal);
    VAR
      lGeoCache@1100281017 : Record 51003;
      lwinHTTPService@1100281002 : Automation "{662901FC-6951-4854-9EB2-D9A2570F2B2E} 5.1:{2087C2F4-2CEF-4953-A8AB-66779B670495}:'Microsoft WinHTTP Services, version 5.1'.WinHttpRequest";
      lData@1100281003 : Text[1024];
      lFilename@1100281004 : Text[1024];
      lInstream@1100281005 : InStream;
      lOutstream@1100281006 : OutStream;
      lFile@1100281007 : File;
      lXmlDom@1100281015 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lXmlNode@1100281014 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lAttribute@1100281013 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF83-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNamedNodeMap";
      lXmlDomElement@1100281012 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
      lAttributeNode@1100281016 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
    BEGIN
      IF lGeoCache.GET(pOrigX,pOrigY,pDestX,pDestY) THEN BEGIN
        pTime := lGeoCache.Time;
        pDistance := lGeoCache.Distance;
        EXIT;
      END;
      IF ISCLEAR(lwinHTTPService) THEN CREATE(lwinHTTPService);
      //lwinHTTPService.Open('POST',GetWebServiceUrl() + 'geocodeService/',0);
      lwinHTTPService.Open('POST',GetWebServiceUrl() + 'routeService/',0);
      lwinHTTPService.SetRequestHeader('Content-type','text/xml; charset=UTF-8');
      lwinHTTPService.SetRequestHeader('SOAPAction','""');
      lData := '<?xml version="1.0" encoding="UTF-8"?>';
      lData += '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" ';
      lData += 'xmlns:sch="http://geoconcept.com/gc/schemas">';
      lData += '  <soapenv:Header/>';
      lData += '  <soapenv:Body>';
      lData += '    <sch:RouteRequest>';
      lData += '       <sch:Options>';
      lData += '         <sch:Method>TIME</sch:Method>';
      lData += '         <sch:Projection>MAP</sch:Projection>';
      lData += '       </sch:Options>';
      lData += '       <sch:Step>';
      lData += '         <sch:X>' + FORMAT(pOrigX) + '</sch:X>';
      lData += '         <sch:Y>' + FORMAT(pOrigY) + '</sch:Y>';
      lData += '       </sch:Step>';
      lData += '       <sch:Step>';
      lData += '         <sch:X>' + FORMAT(pDestX) + '</sch:X>';
      lData += '         <sch:Y>' + FORMAT(pDestY) + '</sch:Y>';
      lData += '       </sch:Step>';
      lData += '    </sch:RouteRequest>';
      lData += '  </soapenv:Body>';
      lData += '</soapenv:Envelope>';
      lwinHTTPService.Send(lData);
      IF NOT lwinHTTPService.WaitForResponse(60) THEN ERROR('Request timed out.');
      // an XMLDOM object
      CREATE(lXmlDom);
      CREATE(lXmlNode);
      lXmlDom.load(lwinHTTPService.ResponseStream);
      //lXmlDom.save('C:\Temp\Test.xml');
      lXmlDomElement := lXmlDom.selectSingleNode('//gc:SUBROUTE');
      IF ISCLEAR(lXmlDomElement) THEN BEGIN
        EXIT;
      END;
      lAttributeNode := lXmlDomElement.getAttributeNode('gc:DISTANCE');
      EVALUATE(pDistance,lAttributeNode.text);
      pDistance := pDistance / 1000;
      lAttributeNode := lXmlDomElement.getAttributeNode('gc:TIME');
      EVALUATE(pTime,lAttributeNode.text);
      pTime := pTime /60;
      CLEAR(lGeoCache);
      lGeoCache.X1 := pOrigX;
      lGeoCache.Y1 := pOrigY;
      lGeoCache.X2 := pDestX;
      lGeoCache.Y2 := pDestY;
      lGeoCache.Time := pTime;
      lGeoCache.Distance := pDistance;
      lGeoCache.INSERT();
    END;

    PROCEDURE SearchAround@1100281023(pOrigX@1100281000 : Integer;pOrigY@1100281001 : Integer;VAR pPSRB@1100281008 : Record 51000);
    VAR
      lGeoCache@1100281017 : Record 51003;
      lContactAltAddr@1100281009 : Record 5051;
      lGeoRef@1100281028 : Record 50013;
      lXMLHTTP@1100281032 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F16-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.XMLHTTP";
      lwinHTTPService@1100281002 : Automation "{662901FC-6951-4854-9EB2-D9A2570F2B2E} 5.1:{2087C2F4-2CEF-4953-A8AB-66779B670495}:'Microsoft WinHTTP Services, version 5.1'.WinHttpRequest";
      lData@1100281003 : Text[1024];
      lFilename@1100281004 : Text[1024];
      lInstream@1100281005 : InStream;
      lOutstream@1100281006 : OutStream;
      lFile@1100281007 : File;
      lXmlDom@1100281015 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lXmlNode@1100281014 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lXmlNodeList@1100281026 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNodeList";
      lAttribute@1100281013 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF83-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNamedNodeMap";
      lXmlDomElement@1100281012 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
      lAttributeNode@1100281016 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lDistance@1100281010 : Integer;
      lTime@1100281011 : Integer;
      i@1100281018 : Integer;
      lBigText@1100281019 : BigText;
      lXmlDoc@1100281020 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lXmlMgt@1100281021 : Codeunit 8016710;
      lXmlProcessingInst@1100281022 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF89-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMProcessingInstruction";
      lNewChild@1100281023 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lCurNode@1100281024 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lCurNode2@1100281025 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lCode@1100281027 : Code[20];
      lX@1100281029 : Integer;
      lY@1100281030 : Integer;
      XMLResponse@1100281033 : Variant;
    BEGIN
      // Demande auprŠs du web service Geoconcept le temps de trajet

      IF pPSRB.ISEMPTY THEN BEGIN
        EXIT;
      END;

      GetMarketingSetup();
      IF ISCLEAR(lwinHTTPService) THEN CREATE(lwinHTTPService);
      lwinHTTPService.Open('POST',GetWebServiceUrl() + 'SearchAroundService/',0);
      lwinHTTPService.SetRequestHeader('Content-type','text/xml; charset=UTF-8');
      lwinHTTPService.SetRequestHeader('SOAPAction','""');

      CREATE(lXmlDoc);
      lXmlMgt.SetNormalCase;
      lXmlProcessingInst := lXmlDoc.createProcessingInstruction('xml','version="1.0" encoding="UTF-8" standalone="yes"');
      lCurNode := lXmlDoc.appendChild(lXmlProcessingInst);
      lCurNode := lXmlDoc.createElement('soapenv:Envelope');
      lCurNode := lXmlDoc.appendChild(lCurNode);
      lXmlMgt.AddAttribute(lCurNode,'xmlns:soapenv','http://schemas.xmlsoap.org/soap/envelope/');
      lXmlMgt.AddAttribute(lCurNode,'xmlns:sch','http://geoconcept.com/gc/schemas');
      lXmlMgt.AddElement3(lCurNode,'soapenv:Header','','soapenv',lNewChild);
      lXmlMgt.AddElement3(lCurNode,'soapenv:Body','','soapenv',lNewChild);
      lCurNode := lNewChild;
      lXmlMgt.AddElement3(lCurNode,'sch:SearchAroundRequest','','sch',lNewChild);
      lCurNode := lNewChild;
      lXmlMgt.AddElement3(lCurNode,'sch:Options','','sch',lNewChild);
      lCurNode2 := lNewChild;
      lXmlMgt.AddElement3(lCurNode2,'sch:SearchMethod','TIME','sch',lNewChild);
      lXmlMgt.AddElement3(lCurNode2,'sch:Projection','MAP','sch',lNewChild);
      lXmlMgt.AddElement3(lCurNode,'sch:Target','','sch',lNewChild);
      lCurNode2 := lNewChild;
      lXmlMgt.AddElement3(lCurNode2,'sch:Id','0','sch',lNewChild);
      lXmlMgt.AddElement3(lCurNode2,'sch:X',FORMAT(pOrigX) ,'sch',lNewChild);
      lXmlMgt.AddElement3(lCurNode2,'sch:Y',FORMAT(pOrigY),'sch',lNewChild);
      lXmlMgt.AddElement3(lCurNode2,'sch:Priority1','0','sch',lNewChild);
      lXmlMgt.AddElement3(lCurNode2,'sch:Priority2','0','sch',lNewChild);
      IF pPSRB.FINDSET THEN BEGIN
        REPEAT
          IF lContactAltAddr.GET(pPSRB."Provider No.",MarketingSetup."Main Address Code") THEN BEGIN
            //<<IMH12 isat.nfo
            lX :=lContactAltAddr.Latitude;
            lY := lContactAltAddr.Longitude;
            IF lX = 0 THEN BEGIN
              IF lGeoRef.GET(lContactAltAddr."Geo. Reference Code") THEN BEGIN
                lX := lGeoRef."Latitude Lambert 2E";
                lY := lGeoRef."Longitude Lambert 2E";
              END;
              //GetGeoCodeContactAltAddr(lContactAltAddr,lContactAltAddr.Longitude,lContactAltAddr.Latitude);
            END;
            //>>IMH12 isat.nfo
            IF lX <> 0 THEN BEGIN
              lXmlMgt.AddElement3(lCurNode,'sch:Resource','','sch',lNewChild);
              lCurNode2 := lNewChild;
              lXmlMgt.AddElement3(lCurNode2,'sch:Id',pPSRB."Provider No." ,'sch',lNewChild);
              lXmlMgt.AddElement3(lCurNode2,'sch:X',FORMAT(lX) ,'sch',lNewChild);
              lXmlMgt.AddElement3(lCurNode2,'sch:Y',FORMAT(lY),'sch',lNewChild);
              lXmlMgt.AddElement3(lCurNode2,'sch:Priority1','0','sch',lNewChild);
              lXmlMgt.AddElement3(lCurNode2,'sch:Priority2','0','sch',lNewChild);
            END;
          END;
        UNTIL pPSRB.NEXT = 0;
      END;


      lwinHTTPService.Send(lXmlDoc);

      IF NOT lwinHTTPService.WaitForResponse(60) THEN BEGIN
        ERROR('Request timed out.');
      END;

      // XMLDOM object
      CREATE(lXmlDom);
      CREATE(lXmlNode);
      lXmlDom.load(lwinHTTPService.ResponseStream);
      lXmlNodeList := lXmlDom.getElementsByTagName('gc:SearchAroundResult');

      FOR i := 0 TO lXmlNodeList.length()-1 DO BEGIN
        lXmlDomElement := lXmlNodeList.item(i);
        // Nø prestataire
        lAttributeNode := lXmlDomElement.selectSingleNode('gc:Id');
        lCode := lAttributeNode.text;
        // DISTANCE
        lAttributeNode := lXmlDomElement.selectSingleNode('gc:Distance');
        EVALUATE(lDistance,lAttributeNode.text);
        lDistance := ROUND(lDistance / 1000,1,'=');
        // TEMPS
        lAttributeNode := lXmlDomElement.selectSingleNode('gc:Time');
        //<<IMH14.PC
        IF EVALUATE(lTime,lAttributeNode.text) THEN BEGIN
          //MESSAGE('%1 %2',i,lTime);
          lTime := ROUND(lTime / 60,1,'=');
        END ELSE BEGIN
          lTime := 0;
        END;
        IF lCode <> '' THEN BEGIN
        //>>IMH14.PC
          pPSRB.RESET;
          pPSRB.SETFILTER("Provider No.",lCode);
          pPSRB.MODIFYALL(Distance,lDistance);
          pPSRB.MODIFYALL("Travel Time (min)",lTime);
        END;
      END;
    END;

    PROCEDURE SearchAround2@1000000000(pOrigX@1100281000 : Integer;pOrigY@1100281001 : Integer;pDestX@1000000003 : Integer;pDestY@1000000002 : Integer;VAR pTime@1000000001 : Decimal;VAR pDistance@1000000000 : Decimal);
    VAR
      lGeoCache@1100281017 : Record 51003;
      lContactAltAddr@1100281009 : Record 5051;
      lGeoRef@1100281028 : Record 50013;
      lwinHTTPService@1100281002 : Automation "{662901FC-6951-4854-9EB2-D9A2570F2B2E} 5.1:{2087C2F4-2CEF-4953-A8AB-66779B670495}:'Microsoft WinHTTP Services, version 5.1'.WinHttpRequest";
      lData@1100281003 : Text[1024];
      lFilename@1100281004 : Text[1024];
      lInstream@1100281005 : InStream;
      lOutstream@1100281006 : OutStream;
      lFile@1100281007 : File;
      lXmlDom@1100281015 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lXmlNode@1100281014 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lXmlNodeList@1100281026 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNodeList";
      lAttribute@1100281013 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF83-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNamedNodeMap";
      lXmlDomElement@1100281012 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
      lAttributeNode@1100281016 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lDistance@1100281010 : Integer;
      lTime@1100281011 : Integer;
      i@1100281018 : Integer;
      lBigText@1100281019 : BigText;
      lXmlDoc@1100281020 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lXmlMgt@1100281021 : Codeunit 8016710;
      lXmlProcessingInst@1100281022 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF89-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMProcessingInstruction";
      lNewChild@1100281023 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lCurNode@1100281024 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lCurNode2@1100281025 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lCode@1100281027 : Code[20];
      lX@1100281029 : Integer;
      lY@1100281030 : Integer;
    BEGIN
      //IMH15
      // Demande auprŠs du web service Geoconcept le temps de trajet
      GetMarketingSetup();
      IF ISCLEAR(lwinHTTPService) THEN CREATE(lwinHTTPService);
      lwinHTTPService.Open('POST',GetWebServiceUrl() + 'SearchAroundService/',0);
      lwinHTTPService.SetRequestHeader('Content-type','text/xml; charset=UTF-8');
      lwinHTTPService.SetRequestHeader('SOAPAction','""');

      CREATE(lXmlDoc);
      lXmlMgt.SetNormalCase;
      lXmlProcessingInst := lXmlDoc.createProcessingInstruction('xml','version="1.0" encoding="UTF-8" standalone="yes"');
      lCurNode := lXmlDoc.appendChild(lXmlProcessingInst);
      lCurNode := lXmlDoc.createElement('soapenv:Envelope');
      lCurNode := lXmlDoc.appendChild(lCurNode);
      lXmlMgt.AddAttribute(lCurNode,'xmlns:soapenv','http://schemas.xmlsoap.org/soap/envelope/');
      lXmlMgt.AddAttribute(lCurNode,'xmlns:sch','http://geoconcept.com/gc/schemas');
      lXmlMgt.AddElement3(lCurNode,'soapenv:Header','','soapenv',lNewChild);
      lXmlMgt.AddElement3(lCurNode,'soapenv:Body','','soapenv',lNewChild);
      lCurNode := lNewChild;
      lXmlMgt.AddElement3(lCurNode,'sch:SearchAroundRequest','','sch',lNewChild);
      lCurNode := lNewChild;
      lXmlMgt.AddElement3(lCurNode,'sch:Options','','sch',lNewChild);
      lCurNode2 := lNewChild;
      lXmlMgt.AddElement3(lCurNode2,'sch:SearchMethod','TIME','sch',lNewChild);
      lXmlMgt.AddElement3(lCurNode2,'sch:Projection','MAP','sch',lNewChild);
      lXmlMgt.AddElement3(lCurNode,'sch:Target','','sch',lNewChild);
      lCurNode2 := lNewChild;
      lXmlMgt.AddElement3(lCurNode2,'sch:Id','0','sch',lNewChild);
      lXmlMgt.AddElement3(lCurNode2,'sch:X',FORMAT(pOrigX) ,'sch',lNewChild);
      lXmlMgt.AddElement3(lCurNode2,'sch:Y',FORMAT(pOrigY),'sch',lNewChild);
      lXmlMgt.AddElement3(lCurNode2,'sch:Priority1','0','sch',lNewChild);

      lXmlMgt.AddElement3(lCurNode2,'sch:Priority2','0','sch',lNewChild);
      lXmlMgt.AddElement3(lCurNode,'sch:Resource','','sch',lNewChild);
      lCurNode2 := lNewChild;

      lXmlMgt.AddElement3(lCurNode2,'sch:Id','1' ,'sch',lNewChild);
      lXmlMgt.AddElement3(lCurNode2,'sch:X',FORMAT(pDestX) ,'sch',lNewChild);
      lXmlMgt.AddElement3(lCurNode2,'sch:Y',FORMAT(pDestY),'sch',lNewChild);
      lXmlMgt.AddElement3(lCurNode2,'sch:Priority1','0','sch',lNewChild);
      lXmlMgt.AddElement3(lCurNode2,'sch:Priority2','0','sch',lNewChild);

      lwinHTTPService.Send(lXmlDoc);
      IF NOT lwinHTTPService.WaitForResponse(60) THEN BEGIN
        ERROR('Request timed out.');
      END;

      // XMLDOM object
      CREATE(lXmlDom);
      CREATE(lXmlNode);
      lXmlDom.load(lwinHTTPService.ResponseStream);
      //lXmlDom.save('C:\Temp\Test.xml');

      lXmlNodeList := lXmlDom.getElementsByTagName('gc:SearchAroundResult');

      FOR i := 0 TO lXmlNodeList.length()-1 DO BEGIN
        lXmlDomElement := lXmlNodeList.item(i);
        // Nø prestataire
        lAttributeNode := lXmlDomElement.selectSingleNode('gc:Id');
        lCode := lAttributeNode.text;
        // DISTANCE
        lAttributeNode := lXmlDomElement.selectSingleNode('gc:Distance');
        EVALUATE(lDistance,lAttributeNode.text);
        lDistance := ROUND(lDistance / 1000,1,'=');
        // TEMPS
        lAttributeNode := lXmlDomElement.selectSingleNode('gc:Time');
        //<<IMH14.PC
        IF EVALUATE(lTime,lAttributeNode.text) THEN BEGIN
          //MESSAGE('%1 %2',i,lTime);
          lTime := ROUND(lTime / 60,1,'=');
        END ELSE BEGIN
          lTime := 0;
        END;
        IF lCode <> '' THEN BEGIN
        //>>IMH14.PC
          pTime := lTime;
          pDistance := lDistance;
        END;
      END;
    END;

    PROCEDURE GetGeoCodeWGS84@1100281012(VAR pPostCode@1100281000 : Code[20];VAR pCity@1100281001 : Text[50];VAR pX@1100281002 : Decimal;VAR pY@1100281003 : Decimal);
    VAR
      lContactAltAddr@1100281010 : Record 5051;
      lPostCode@1100281015 : Record 225;
      lwinHTTPService@1100281009 : Automation "{662901FC-6951-4854-9EB2-D9A2570F2B2E} 5.1:{2087C2F4-2CEF-4953-A8AB-66779B670495}:'Microsoft WinHTTP Services, version 5.1'.WinHttpRequest";
      lData@1100281008 : Text[1024];
      lFilename@1100281007 : Text[1024];
      lInstream@1100281006 : InStream;
      lOutstream@1100281005 : OutStream;
      lFile@1100281004 : File;
      lXmlDom@1100281011 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lXmlNode@1100281013 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lAttribute@1100281012 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF83-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNamedNodeMap";
      lXmlDomElement@1100281014 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
      bUpdatePostCode@1100281016 : Boolean;
      lStr@1100281017 : Text[250];
    BEGIN
      // Geocodage d'un Contact
      IF ISCLEAR(lwinHTTPService) THEN CREATE(lwinHTTPService);
      lwinHTTPService.Open('POST',GetWebServiceUrl() + 'geocodeService/',0);
      lwinHTTPService.SetRequestHeader('Content-type','text/xml; charset=UTF-8');
      lwinHTTPService.SetRequestHeader('SOAPAction','""');

      lData := '<?xml version="1.0" encoding="UTF-8"?>';
      lData += '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" ';
      lData += 'xmlns:sch="http://geoconcept.com/gc/schemas">';
      lData += '  <soapenv:Header/>';
      lData += '  <soapenv:Body>';
      lData += '    <sch:GeocodeRequest>';
      lData += '      <sch:Address>';
      lData += '     <!--   <sch:CountryCode>fr</sch:CountryCode>-->';
      lData += '        <sch:City>'+ pCity +'</sch:City>';
      lData += '        <sch:PostalCode>'+ pPostCode +'</sch:PostalCode>';
      lData += '        <sch:AddressLine></sch:AddressLine>';
      lData += '        <!--Optional:-->';
      lData += '        <sch:Projection>WGS84</sch:Projection>';
      lData += '      </sch:Address>';
      lData += '    </sch:GeocodeRequest>';
      lData += '  </soapenv:Body>';
      lData += '</soapenv:Envelope>';
      lwinHTTPService.Send(lData);
      IF NOT lwinHTTPService.WaitForResponse(60) THEN ERROR('Request timed out.');
      // an XMLDOM object
      lData := lwinHTTPService.ResponseText;

      CREATE(lXmlDom);
      CREATE(lXmlNode);
      lXmlDom.load(lwinHTTPService.ResponseStream);
      lXmlDomElement := lXmlDom.selectSingleNode('//gc:GeocodedAddress/gc:X');
      IF NOT ISCLEAR(lXmlDomElement) THEN BEGIN
        lStr := lXmlDomElement.text();
        lStr := CONVERTSTR(lStr,'.' ,',');
        IF NOT EVALUATE(pX,lStr) THEN BEGIN
          lStr := CONVERTSTR(lStr,',', '.');
          EVALUATE(pX,lStr);
        END;
      END;
      CLEAR(lXmlDomElement);
      lXmlDomElement := lXmlDom.selectSingleNode('//gc:GeocodedAddress/gc:Y');
      IF NOT ISCLEAR(lXmlDomElement) THEN BEGIN
        lStr := lXmlDomElement.text();
        lStr := CONVERTSTR(lStr, '.' ,',');
        IF NOT EVALUATE(pY,lStr) THEN BEGIN
          lStr := CONVERTSTR(lStr, ',' ,'.');
          EVALUATE(pY,lStr);
        END;

      END;
      CLEAR(lXmlDomElement);
      lXmlDomElement := lXmlDom.selectSingleNode('//gc:GeocodedAddress/gc:PostalCode');
      IF NOT ISCLEAR(lXmlDomElement) THEN BEGIN
        pPostCode := lXmlDomElement.text();
      END;
      CLEAR(lXmlDomElement);
      lXmlDomElement := lXmlDom.selectSingleNode('//gc:GeocodedAddress/gc:City');
      IF NOT ISCLEAR(lXmlDomElement) THEN BEGIN
        pCity := lXmlDomElement.text();
      END;
      CLEAR(lXmlDom);
      CLEAR(lXmlNode);
    END;

    PROCEDURE GetDARVA@1100281042();
    VAR
      lContactAltAddr@1100281010 : Record 5051;
      lPostCode@1100281015 : Record 225;
      lwinHTTPService@1100281009 : Automation "{662901FC-6951-4854-9EB2-D9A2570F2B2E} 5.1:{2087C2F4-2CEF-4953-A8AB-66779B670495}:'Microsoft WinHTTP Services, version 5.1'.WinHttpRequest";
      lData@1100281008 : Text[1024];
      lFilename@1100281007 : Text[1024];
      lInstream@1100281006 : InStream;
      lOutstream@1100281005 : OutStream;
      lFile@1100281004 : File;
      lXmlDom@1100281011 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lXmlNode@1100281013 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lAttribute@1100281012 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF83-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNamedNodeMap";
      lXmlDomElement@1100281014 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
      bUpdatePostCode@1100281016 : Boolean;
      lStr@1100281017 : Text[250];
    BEGIN
      // Geocodage d'un Contact
      IF ISCLEAR(lwinHTTPService) THEN CREATE(lwinHTTPService);
      lwinHTTPService.Open('POST','https://services-vabf.darva.com/irdwssr/ws/',0);
      lwinHTTPService.SetRequestHeader('Content-type','text/xml; charset=UTF-8');
      lwinHTTPService.SetRequestHeader('SOAPAction','""');

      lData := '<?xml version="1.0" encoding="UTF-8"?>';
      lData += '<soap:Envelope xmlns:ns="http://www.darva.com/ws/datatype/2010/11" ';
      lData += 'xmlns:sch="http://www.darva.com/ws/ird/2010/11/schema" ';
      lData += 'xmlns:soap="http://www.w3.org/2003/05/soap-envelope">';
      lData += '<soapenv:Header>';
      lData += '<wsse:Security soap:mustUnderstand="true" ';
      lData += '"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"> ';
      lData += '<wsse:UsernameToken wsu:Id="UsernameToken-3" ';
      lData += ' xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">';
      //lData += ' >';
      lData += ' <wsse:Username>30197iws</wsse:Username>';
      lData += ' <wsse:Password ';
      lData += ' Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">';
      lData += ' 30197iws</wsse:Password>';
      lData += ' </wsse:UsernameToken></wsse:Security>';
      lData += '</soapenv:Header>';
      lData += '<soapenv:Body>';
      lData += '<sch:ListerDocumentsDemande>';
      lData += '<ns:contexteDemande ctxVersion="01.00">';
      lData += '<ns:environnement>VABF</ns:environnement>';
      lData += '<ns:base>TEST</ns:base>';
      lData += '<ns:modeTest>true</ns:modeTest>';
      lData += '<ns:norme>';
      lData += '<ns:nom>Ird2005</ns:nom>';
      lData += '</ns:norme>';
      lData += '</ns:contexteDemande>';
      lData += '<ns:filtreDossier/>';
      lData += '</sch:ListerDocumentsDemande>';
      lData += '</soapenv:Body>';
      lData += '</soapenv:Envelope>';

      lwinHTTPService.Send(lData);
      IF NOT lwinHTTPService.WaitForResponse(60) THEN ERROR('Request timed out.');
      // an XMLDOM object
      CREATE(lXmlDom);
      CREATE(lXmlNode);
      lXmlDom.load(lwinHTTPService.ResponseStream);
      lXmlDom.save('d:\xmlFile.xml');
      CLEAR(lXmlDomElement);
      CLEAR(lXmlDom);
      CLEAR(lXmlNode);
    END;

    PROCEDURE GetGeoCodeBingMaps@1100281032(pPostCode@1100281000 : Code[20];pCity@1100281001 : Text[50];VAR pX@1100281002 : Decimal;VAR pY@1100281003 : Decimal);
    VAR
      lContactAltAddr@1100281010 : Record 5051;
      lPostCode@1100281015 : Record 225;
      lwinHTTPService@1100281009 : Automation "{662901FC-6951-4854-9EB2-D9A2570F2B2E} 5.1:{2087C2F4-2CEF-4953-A8AB-66779B670495}:'Microsoft WinHTTP Services, version 5.1'.WinHttpRequest";
      lData@1100281008 : Text[1024];
      lFilename@1100281007 : Text[1024];
      lInstream@1100281006 : InStream;
      lOutstream@1100281005 : OutStream;
      lFile@1100281004 : File;
      lXmlDom@1100281011 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lXmlNode@1100281013 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lAttribute@1100281012 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF83-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNamedNodeMap";
      lXmlDomElement@1100281014 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
      bUpdatePostCode@1100281016 : Boolean;
      lStr@1100281017 : Text[250];
      lWebServiceUrl@1100281018 : Text[1024];
    BEGIN
      // Geocodage d'un Contact
      IF ISCLEAR(lwinHTTPService) THEN CREATE(lwinHTTPService);
      //lWebServiceUrl := 'http://webservices/v1/geocodeservice/GeocodeService.svc';
      lWebServiceUrl := 'http://dev.virtualearth.net/webservices/v1/geocodeservice/GeocodeService.svc';
      lwinHTTPService.Open('POST',lWebServiceUrl,0);
      lwinHTTPService.SetRequestHeader('Content-type','text/xml; charset=UTF-8');
      lwinHTTPService.SetRequestHeader('SOAPAction',
          '"http://dev.virtualearth.net/webservices/v1/geocode/contracts/IGeocodeService/Geocode"');
      //SOAPAction:  "http://dev.virtualearth.net/webservices/v1/geocode/contracts/IGeocodeService/Geocode"

      lData := '<?xml version="1.0" encoding="UTF-8"?>';
      lData += '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" ';
      lData += 'xmlns:con="http://dev.virtualearth.net/webservices/v1/geocode/contracts" ';
      lData += 'xmlns:com="http://dev.virtualearth.net/webservices/v1/common" ';
      lData += 'xmlns:geoc="http://dev.virtualearth.net/webservices/v1/geocode">';
      lData += ' <soapenv:Header/>';
      lData += ' <soapenv:Body>';
      lData += '   <con:Geocode>';
      lData += '     <con:request>';
      lData += '      <com:Credentials>';
      lData += '       <com:Token>AqJETZXUEO0BU_pAlMycXXhCjuIl_1rQWYv9rn35Bl3S2eq2JTrJVS5XVnMMAuVG</com:Token>';
      lData += '      </com:Credentials>';
      lData += '       <com:Culture>fr-FR</com:Culture>';
      lData += '     <geoc:Address>';
      lData += '      <com:AddressLine></com:AddressLine>';
      lData += '       <com:CountryRegion>FR</com:CountryRegion>';
      lData += '       <com:Locality>' + pCity + '</com:Locality>';
      lData += '       <com:PostalCode>' + pPostCode + '</com:PostalCode>';
      lData += '      </geoc:Address>';
      lData += '    </con:request>';
      lData += '  </con:Geocode>';
      lData += ' </soapenv:Body>';
      lData += '</soapenv:Envelope>';
      lwinHTTPService.Send(lData);
      IF NOT lwinHTTPService.WaitForResponse(60) THEN ERROR('Request timed out.');
      // an XMLDOM object
      CREATE(lXmlDom);
      CREATE(lXmlNode);
      lXmlDom.load(lwinHTTPService.ResponseStream);
      //lXmlDom.save('z:\xmlFile.xml');
      lXmlDomElement := lXmlDom.selectSingleNode('//b:Locations/b:GeocodeLocation/b:Latitude');
      IF NOT ISCLEAR(lXmlDomElement) THEN BEGIN
        lStr := lXmlDomElement.text();
        lStr := CONVERTSTR(lStr,'.' ,',');
        IF NOT EVALUATE(pX,lStr) THEN BEGIN
          lStr := CONVERTSTR(lStr,',' ,'.');
          EVALUATE(pX,lStr);
        END;
      END;
      CLEAR(lXmlDomElement);
      lXmlDomElement := lXmlDom.selectSingleNode('//b:Locations/b:GeocodeLocation/b:Longitude');;
      IF NOT ISCLEAR(lXmlDomElement) THEN BEGIN
        lStr := lXmlDomElement.text();
        lStr := CONVERTSTR(lStr, '.' ,',');
        IF NOT EVALUATE(pY,lStr) THEN BEGIN
          lStr := CONVERTSTR(lStr, ',' ,'.');
          EVALUATE(pY,lStr);
        END;
      END;
      CLEAR(lXmlDom);
      CLEAR(lXmlNode);
    END;

    PROCEDURE GetGeoCode@1100281031(pGeoRefCode@1100281000 : Code[20];VAR pX@1100281002 : Integer;VAR pY@1100281003 : Integer);
    VAR
      lContactAltAddr@1100281010 : Record 5051;
      lPostCode@1100281015 : Record 225;
      lwinHTTPService@1100281009 : Automation "{662901FC-6951-4854-9EB2-D9A2570F2B2E} 5.1:{2087C2F4-2CEF-4953-A8AB-66779B670495}:'Microsoft WinHTTP Services, version 5.1'.WinHttpRequest";
      lData@1100281008 : Text[1024];
      lFilename@1100281007 : Text[1024];
      lInstream@1100281006 : InStream;
      lOutstream@1100281005 : OutStream;
      lFile@1100281004 : File;
      lXmlDom@1100281011 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lXmlNode@1100281013 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lAttribute@1100281012 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF83-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNamedNodeMap";
      lXmlDomElement@1100281014 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
      bUpdatePostCode@1100281016 : Boolean;
    BEGIN
      // Geocodage d'un Contact
      bUpdatePostCode := FALSE;
      lPostCode.SETCURRENTKEY("Geo. Reference Code");
      lPostCode.SETRANGE("Geo. Reference Code",pGeoRefCode);
      IF lPostCode.FINDFIRST() THEN BEGIN
        IF lPostCode."Latitude Lambert 2E" <> 0 THEN BEGIN
          pX := lPostCode."Latitude Lambert 2E";
          pY := lPostCode."Longitude Lambert 2E";
          EXIT;
        END;
        bUpdatePostCode := TRUE;
      END;
      GetGeoCodeWS('',lPostCode.Code,lPostCode.City,pX,pY);
      lPostCode."Latitude Lambert 2E"   := pX;
      lPostCode."Longitude Lambert 2E" := pY ;
      lPostCode.MODIFY();
    END;

    PROCEDURE GetPostCode@1100281036(pPostCode@1100281000 : Record 225) : Code[10];
    VAR
      lContactAltAddr@1100281010 : Record 5051;
      lPostCode@1100281015 : Record 225;
      lwinHTTPService@1100281009 : Automation "{662901FC-6951-4854-9EB2-D9A2570F2B2E} 5.1:{2087C2F4-2CEF-4953-A8AB-66779B670495}:'Microsoft WinHTTP Services, version 5.1'.WinHttpRequest";
      lData@1100281008 : Text[1024];
      lFilename@1100281007 : Text[1024];
      lInstream@1100281006 : InStream;
      lOutstream@1100281005 : OutStream;
      lFile@1100281004 : File;
      lXmlDom@1100281011 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lXmlNode@1100281013 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lAttribute@1100281012 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF83-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNamedNodeMap";
      lXmlDomElement@1100281014 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
      bUpdatePostCode@1100281016 : Boolean;
      "Post Code"@1100281001 : Code[10];
    BEGIN
      // Geocodage d'un Contact

      IF ISCLEAR(lwinHTTPService) THEN CREATE(lwinHTTPService);
      lwinHTTPService.Open('POST',GetWebServiceUrl() + 'geocodeService/',0);
      lwinHTTPService.SetRequestHeader('Content-type','text/xml; charset=UTF-8');
      lwinHTTPService.SetRequestHeader('SOAPAction','""');

      lData := '<?xml version="1.0" encoding="UTF-8"?>';
      lData += '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" ';
      lData += 'xmlns:sch="http://geoconcept.com/gc/schemas">';
      lData += '  <soapenv:Header/>';
      lData += '  <soapenv:Body>';
      lData += '    <sch:GeocodeRequest>';
      lData += '      <sch:Address>';
      lData += '     <!--   <sch:CountryCode>fr</sch:CountryCode>-->';
      lData += '        <sch:City>'+ pPostCode.City +'</sch:City>';
      lData += '        <sch:PostalCode>'+ pPostCode.Code +'</sch:PostalCode>';
      lData += '        <sch:AddressLine></sch:AddressLine>';
      lData += '        <!--Optional:-->';
      lData += '        <sch:Projection>MAP</sch:Projection>';
      lData += '      </sch:Address>';
      lData += '    </sch:GeocodeRequest>';
      lData += '  </soapenv:Body>';
      lData += '</soapenv:Envelope>';
      lwinHTTPService.Send(lData);
      IF NOT lwinHTTPService.WaitForResponse(60) THEN ERROR('Request timed out.');
      // an XMLDOM object
      CREATE(lXmlDom);
      CREATE(lXmlNode);
      lXmlDom.load(lwinHTTPService.ResponseStream);
      lXmlDomElement := lXmlDom.selectSingleNode('//gc:GeocodedAddress/gc:City');
      IF NOT ISCLEAR(lXmlDomElement) THEN BEGIN
        IF pPostCode.City <> lXmlDomElement.text() THEN BEGIN
          CLEAR(lXmlDomElement);
          EXIT('');
        END;
      END;

      lXmlDomElement := lXmlDom.selectSingleNode('//gc:GeocodedAddress/gc:PostalCode');
      "Post Code" := '';
      IF NOT ISCLEAR(lXmlDomElement) THEN BEGIN
        "Post Code" := lXmlDomElement.text();
        CLEAR(lXmlDomElement);
      END;
      CLEAR(lXmlDom);
      CLEAR(lXmlNode);
      EXIT("Post Code");
    END;

    PROCEDURE GetGeoCodeContactAltAddr@1100281021(pContactAltAddr@1100281000 : Record 5051;VAR pX@1100281002 : Integer;VAR pY@1100281003 : Integer);
    BEGIN
      // Geocodage d'un Contact
      IF pContactAltAddr.Latitude <> 0 THEN BEGIN
        pX := pContactAltAddr.Latitude;
        pY := pContactAltAddr.Longitude;
        EXIT;
      END;
      GetGeoCodeWS(pContactAltAddr.Address,pContactAltAddr."Post Code",
        pContactAltAddr.City,pContactAltAddr.Latitude,
        pContactAltAddr.Longitude);
      pX := pContactAltAddr.Latitude;
      pY := pContactAltAddr.Longitude;
      pContactAltAddr.MODIFY();
    END;

    PROCEDURE GeoCodeContactAltAddr@1100281038(VAR pContactAltAddr@1100281000 : Record 5051);
    BEGIN
      // Geocodage d'un Contact
      GetGeoCodeWS(pContactAltAddr.Address,pContactAltAddr."Post Code",
        pContactAltAddr.City,pContactAltAddr.Latitude,
        pContactAltAddr.Longitude);
    END;

    PROCEDURE GetGeoCodeServiceHeader@1100281039(pServiceHeader@1100281000 : Record 5900;VAR pX@1100281002 : Integer;VAR pY@1100281003 : Integer);
    VAR
      lPostCode@1100281015 : Record 225;
      lGeoReference@1000000000 : Record 50013;
    BEGIN
      //<<IMH11 isat.nfo
      IF ProviderSetup."Geoconcept Activate Search" THEN BEGIN
        GetGeoCodeWS(pServiceHeader."Ship-to Address",pServiceHeader."Ship-to Post Code",pServiceHeader."Ship-to City",pX,pY);
      END ELSE BEGIN
        IF lPostCode.GET(pServiceHeader."Ship-to Post Code",pServiceHeader."Ship-to City") THEN BEGIN
          pX := lPostCode."Latitude Lambert 2E";
          pY := lPostCode."Longitude Lambert 2E";
        //<<IMH18.PC
        END ELSE BEGIN
          IF lGeoReference.GET(pServiceHeader."Ship-to Geo. Reference Code") THEN BEGIN
            pX := lGeoReference."Latitude Lambert 2E" + 10;
            pY := lGeoReference."Longitude Lambert 2E" + 10;
          END;
        //>>IMH18.PC
        END;
      END;
      //>>IMH11 isat.nfo
    END;

    PROCEDURE GetGeoCodeWS@1100281040(pAddress@1100281000 : Text[250];pPostCode@1100281015 : Code[10];pCity@1100281018 : Text[150];VAR pX@1100281002 : Integer;VAR pY@1100281003 : Integer);
    VAR
      lwinHTTPService@1100281009 : Automation "{662901FC-6951-4854-9EB2-D9A2570F2B2E} 5.1:{2087C2F4-2CEF-4953-A8AB-66779B670495}:'Microsoft WinHTTP Services, version 5.1'.WinHttpRequest";
      lData@1100281008 : Text[1024];
      lFilename@1100281007 : Text[1024];
      lInstream@1100281006 : InStream;
      lOutstream@1100281005 : OutStream;
      lFile@1100281004 : File;
      lXmlDom@1100281011 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lXmlNode@1100281013 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lAttribute@1100281012 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF83-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNamedNodeMap";
      lXmlDomElement@1100281014 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
      lXmlDomElement2@1100281017 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
      lXmlNodeList@1100281010 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNodeList";
      bUpdatePostCode@1100281016 : Boolean;
      lGeoCodeType@1100281001 : Integer;
    BEGIN
      // Geocodage d'un Contact
      IF ISCLEAR(lwinHTTPService) THEN CREATE(lwinHTTPService);
      lwinHTTPService.Open('POST',GetWebServiceUrl() + 'geocodeService/',0);
      lwinHTTPService.SetRequestHeader('Content-type','text/xml; charset=UTF-8');
      lwinHTTPService.SetRequestHeader('SOAPAction','""');

      lData := '<?xml version="1.0" encoding="UTF-8"?>';
      lData += '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" ';
      lData += 'xmlns:sch="http://geoconcept.com/gc/schemas">';
      lData += '  <soapenv:Header/>';
      lData += '  <soapenv:Body>';
      lData += '    <sch:GeocodeRequest>';
      lData += '      <sch:Address>';
      lData += '     <!--   <sch:CountryCode>fr</sch:CountryCode>-->';
      lData += '        <sch:City>'+ pCity +'</sch:City>';
      lData += '        <sch:PostalCode>'+ pPostCode +'</sch:PostalCode>';
      lData += '        <sch:AddressLine>'+ pAddress +'</sch:AddressLine>';
      lData += '        <!--Optional:-->';
      lData += '        <sch:Projection>MAP</sch:Projection>';
      lData += '      </sch:Address>';
      lData += '    </sch:GeocodeRequest>';
      lData += '  </soapenv:Body>';
      lData += '</soapenv:Envelope>';
      lwinHTTPService.Send(lData);
      IF NOT lwinHTTPService.WaitForResponse(60) THEN ERROR('Request timed out.');
      // an XMLDOM object

      CREATE(lXmlDom);
      CREATE(lXmlNode);
      lXmlDom.load(lwinHTTPService.ResponseStream);
      lXmlDomElement := lXmlDom.selectSingleNode('//gc:GeocodedAddress/gc:X');
      IF NOT ISCLEAR(lXmlDomElement) THEN BEGIN
        EVALUATE(pX,lXmlDomElement.text());
        CLEAR(lXmlDomElement);
      END;
      lXmlDomElement := lXmlDom.selectSingleNode('//gc:GeocodedAddress/gc:Y');
      IF NOT ISCLEAR(lXmlDomElement) THEN BEGIN
        EVALUATE(pY,lXmlDomElement.text());
        CLEAR(lXmlDomElement);
      END;
      CLEAR(lXmlDom);
      CLEAR(lXmlNode);
    END;

    PROCEDURE NormalizeContactAltAddr@1100281022(VAR pContactAltAddr@1100281000 : Record 5051) : Boolean;
    VAR
      lwinHTTPService@1100281009 : Automation "{662901FC-6951-4854-9EB2-D9A2570F2B2E} 5.1:{2087C2F4-2CEF-4953-A8AB-66779B670495}:'Microsoft WinHTTP Services, version 5.1'.WinHttpRequest";
      lData@1100281008 : Text[1024];
      lFilename@1100281007 : Text[1024];
      lInstream@1100281006 : InStream;
      lOutstream@1100281005 : OutStream;
      lFile@1100281004 : File;
      lXmlDom@1100281011 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lXmlNode@1100281013 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lAttribute@1100281012 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF83-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNamedNodeMap";
      lXmlDomElement@1100281014 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
      lXmlDomElement2@1100281017 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
      lXmlNodeList@1100281010 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNodeList";
      bUpdatePostCode@1100281016 : Boolean;
      lGeoCodeType@1100281001 : Integer;
      lGeoCodeScore@1100281002 : Decimal;
      i@1100281015 : Integer;
      lAddress@1100281018 : Text[250];
      lCity@1100281019 : Text[50];
      lPostCode@1100281020 : Text[30];
      lX@1100281021 : Integer;
      lY@1100281022 : Integer;
      lBuffContactAltAddr@1100281023 : TEMPORARY Record 5051;
      lString@1100281024 : Text[250];
      lRecRef@1100281025 : RecordRef;
      lNormContactAltAddrPage@1100281026 : Page 50019;
      lNormContactAltAddrForm@1100281027 : Form 50019;
      lOk@1100281003 : Boolean;
    BEGIN
      // Geocodage d'un Contact

      GetProviderSetup;
      //IF UPPERCASE(userid)='ADMINISATECH' THEN MESSAGE('OK');
      IF NOT ProviderSetup."Geoconcept Activate Address" THEN BEGIN
        EXIT;
      END;

      IF pContactAltAddr.Latitude <> 0 THEN BEGIN
      //  pX := pContactAltAddr.Latitude;
      //  pY := pContactAltAddr.Longitude;
        EXIT;
      END;
      GetContactAltAddr(pContactAltAddr,lBuffContactAltAddr);
      IF ISSERVICETIER THEN BEGIN
        CLEAR(lNormContactAltAddrPage);
        lNormContactAltAddrPage.LoadTable(pContactAltAddr,lBuffContactAltAddr);
        IF NOT lOk THEN
          IF lNormContactAltAddrPage.RUNMODAL() = ACTION::LookupOK THEN
            lOk := TRUE;

        IF lOk THEN BEGIN
          lNormContactAltAddrPage.GETRECORD(lBuffContactAltAddr);
          pContactAltAddr.Address := lBuffContactAltAddr.Address;
          pContactAltAddr."Address 2" := lBuffContactAltAddr."Address 2";
          pContactAltAddr."Post Code" := lBuffContactAltAddr."Post Code";
          pContactAltAddr.City := lBuffContactAltAddr.City;
          pContactAltAddr.Latitude := lX;
          pContactAltAddr.Longitude := lY;
          pContactAltAddr."Address Geocoded" := TRUE;
          lRecRef.GETTABLE(pContactAltAddr);
          IF NOT lRecRef.ISTEMPORARY THEN
            pContactAltAddr.MODIFY(TRUE)
        END;
      END ELSE BEGIN
        CLEAR(lNormContactAltAddrForm);
        lNormContactAltAddrForm.LoadTable(pContactAltAddr,lBuffContactAltAddr);
        IF NOT lOk THEN
          IF lNormContactAltAddrForm.RUNMODAL() = ACTION::LookupOK THEN
            lOk := TRUE;

        IF lOk THEN BEGIN
          lNormContactAltAddrForm.GETRECORD(lBuffContactAltAddr);
          pContactAltAddr.Address := lBuffContactAltAddr.Address;
          pContactAltAddr."Address 2" := lBuffContactAltAddr."Address 2";
          pContactAltAddr."Post Code" := lBuffContactAltAddr."Post Code";
          pContactAltAddr.City := lBuffContactAltAddr.City;
          pContactAltAddr.Latitude := lX;
          pContactAltAddr.Longitude := lY;
          pContactAltAddr."Address Geocoded" := TRUE;
          lRecRef.GETTABLE(pContactAltAddr);
          IF NOT lRecRef.ISTEMPORARY THEN
            pContactAltAddr.MODIFY(TRUE)
        END;
      END;
      EXIT(lOk);
    END;

    PROCEDURE GetContactAltAddr@1100281035(VAR pContactAltAddr@1100281000 : Record 5051;VAR pContactAltAddrBuff@1100281027 : TEMPORARY Record 5051) : Boolean;
    VAR
      lwinHTTPService@1100281009 : Automation "{662901FC-6951-4854-9EB2-D9A2570F2B2E} 5.1:{2087C2F4-2CEF-4953-A8AB-66779B670495}:'Microsoft WinHTTP Services, version 5.1'.WinHttpRequest";
      lData@1100281008 : Text[1024];
      lFilename@1100281007 : Text[1024];
      lInstream@1100281006 : InStream;
      lOutstream@1100281005 : OutStream;
      lFile@1100281004 : File;
      lXmlDom@1100281011 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lXmlNode@1100281013 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lAttribute@1100281012 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF83-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNamedNodeMap";
      lXmlDomElement@1100281014 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
      lXmlDomElement2@1100281017 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
      lXmlNodeList@1100281010 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNodeList";
      bUpdatePostCode@1100281016 : Boolean;
      lGeoCodeType@1100281001 : Integer;
      lGeoCodeScore@1100281002 : Decimal;
      i@1100281015 : Integer;
      lAddress@1100281018 : Text[250];
      lCity@1100281019 : Text[50];
      lPostCode@1100281020 : Text[30];
      lX@1100281021 : Integer;
      lY@1100281022 : Integer;
      lBuffContactAltAddr@1100281023 : TEMPORARY Record 5051;
      lString@1100281024 : Text[250];
      lRecRef@1100281025 : RecordRef;
      lNormContactAltAddr@1100281026 : Form 50019;
      lOk@1100281003 : Boolean;
    BEGIN
      // Geocodage d'un Contact

      GetProviderSetup;
      IF NOT ProviderSetup."Geoconcept Activate Address" THEN
        EXIT;
      IF ISCLEAR(lwinHTTPService) THEN CREATE(lwinHTTPService);
      lwinHTTPService.Open('POST',GetWebServiceUrl() + 'geocodeService/',0);
      lwinHTTPService.SetRequestHeader('Content-type','text/xml; charset=UTF-8');
      lwinHTTPService.SetRequestHeader('SOAPAction','""');
      //Le recherche ne fonctionne pas avec les arrondissements

      //IF STRPOS(pContacgtAltAddr.CITY,' ') > 0 THEN

      lData := '<?xml version="1.0" encoding="UTF-8"?>';
      lData += '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" ';
      lData += 'xmlns:sch="http://geoconcept.com/gc/schemas">';
      lData += '  <soapenv:Header/>';
      lData += '  <soapenv:Body>';
      lData += '    <sch:GeocodeRequest>';
      lData += '      <sch:Address>';
      //lData += '     <!--   <sch:CountryCode>fr</sch:CountryCode>-->';
      lData += '        <sch:City>'+ pContactAltAddr.City +'</sch:City>';
      lData += '        <sch:PostalCode>'+ pContactAltAddr."Post Code" +'</sch:PostalCode>';
      lData += '        <sch:AddressLine>'+ pContactAltAddr.Address + pContactAltAddr."Address 2" +'</sch:AddressLine>';
      //lData += '        <!--Optional:-->';
      lData += '        <sch:Projection>MAP</sch:Projection>';
      lData += '      </sch:Address>';
      lData += '    </sch:GeocodeRequest>';
      lData += '  </soapenv:Body>';
      lData += '</soapenv:Envelope>';

      lwinHTTPService.Send(lData);
      IF NOT lwinHTTPService.WaitForResponse(60) THEN ERROR('Request timed out.');

      // an XMLDOM object
      CREATE(lXmlDom);
      CREATE(lXmlNode);
      lXmlDom.load(lwinHTTPService.ResponseStream);
      lXmlNodeList := lXmlDom.getElementsByTagName('gc:GeocodedAddress');

      FOR i := 0 TO lXmlNodeList.length()-1 DO BEGIN
        lXmlDomElement2 := lXmlNodeList.item(i);
        lXmlDomElement := lXmlDomElement2.selectSingleNode('gc:City');
        EVALUATE(lCity,lXmlDomElement.text());
        lXmlDomElement := lXmlDomElement2.selectSingleNode('gc:PostalCode');
        EVALUATE(lPostCode,lXmlDomElement.text());
        lXmlDomElement := lXmlDomElement2.selectSingleNode('gc:AddressLine');
        EVALUATE(lAddress,lXmlDomElement.text());
        lXmlDomElement := lXmlDomElement2.selectSingleNode('gc:X');
        EVALUATE(lX,lXmlDomElement.text());
        lXmlDomElement := lXmlDomElement2.selectSingleNode('gc:Y');
        EVALUATE(lY,lXmlDomElement.text());
        lXmlDomElement := lXmlDomElement2.selectSingleNode('gc:GeocodeScore');
        EVALUATE(lString,lXmlDomElement.text());
        lString := CONVERTSTR(lString, '.', ',');
        IF NOT EVALUATE(lGeoCodeScore,lString) THEN BEGIN
          lString := CONVERTSTR(lString, ',', '.');
          EVALUATE(lGeoCodeScore,lString);
        END;
        lXmlDomElement := lXmlDomElement2.selectSingleNode('gc:GeocodeType');
        EVALUATE(lGeoCodeType,lXmlDomElement.text());
        pContactAltAddrBuff."Contact No." := STRSUBSTNO('%1',i);
        pContactAltAddrBuff.Code := STRSUBSTNO('%1',i+1);
        IF STRLEN(lAddress) > 50 THEN BEGIN
          pContactAltAddrBuff.Address := COPYSTR(lAddress,1,50);
          pContactAltAddrBuff."Address 2" := COPYSTR(lAddress,51,50);
        END ELSE BEGIN
          pContactAltAddrBuff.Address := lAddress;
          pContactAltAddrBuff."Address 2" := '';
        END;
        pContactAltAddrBuff.Address := COPYSTR(lAddress,1,50);
        pContactAltAddrBuff."Post Code" := lPostCode;
        pContactAltAddrBuff.City := lCity;
        pContactAltAddrBuff.Latitude := lX;
        pContactAltAddrBuff.Longitude := lY;
        pContactAltAddrBuff.INSERT();
        IF lGeoCodeScore = 20 THEN BEGIN
          i := lXmlNodeList.length()-1;
          lOk := TRUE;
        END;
      END;
      EXIT(lOk);
    END;

    PROCEDURE NormalizeAddress@1100281026(VAR pAddress@1100281000 : Text[50];VAR pAddress2@1100281025 : Text[50];VAR pPostCode@1100281026 : Code[6];VAR pCity@1100281027 : Text[30];VAR pLongitude@1100281030 : Integer;VAR pLatitude@1100281029 : Integer) rValue : Boolean;
    VAR
      lBuffContactAltAddr@1100281014 : TEMPORARY Record 5051;
      lNormContactAltAddr@1100281017 : Form 50019;
      lWinHTTPService@1100281009 : Automation "{662901FC-6951-4854-9EB2-D9A2570F2B2E} 5.1:{2087C2F4-2CEF-4953-A8AB-66779B670495}:'Microsoft WinHTTP Services, version 5.1'.WinHttpRequest";
      lXmlDom@1100281011 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lXmlNode@1100281003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lXmlNodeList@1100281010 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNodeList";
      lXmlDomElement@1100281005 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
      lXmlDomElement2@1100281004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
      i@1100281015 : Integer;
      lAddress@1100281020 : Text[1024];
      lTimeOutError@1100281028 : TextConst 'ENU=Request timed out.;FRA=Temps de d‚lai de la demande d‚pass‚e';
      lRequest@1100281001 : Text[1024];
    BEGIN
      // IMH02.isat.PC
      // Geocodage d'un Contact
      rValue := FALSE;
      lBuffContactAltAddr."Contact No." := '1';
      lBuffContactAltAddr.City  := pCity;
      lBuffContactAltAddr."Post Code" := pPostCode;
      lBuffContactAltAddr.Address := pAddress;
      lBuffContactAltAddr."Address 2" := pAddress2;
      lBuffContactAltAddr.INSERT();
      //<<IMH03
      //NormalizeContactAltAddr(lBuffContactAltAddr);
      IF NOT NormalizeContactAltAddr(lBuffContactAltAddr) THEN
        EXIT(FALSE);
      //>>IMH03
      pAddress := lBuffContactAltAddr.Address;
      pAddress2 := lBuffContactAltAddr."Address 2";
      pPostCode := lBuffContactAltAddr."Post Code";
      pCity := lBuffContactAltAddr.City;
      pLongitude := lBuffContactAltAddr.Longitude;
      pLatitude := lBuffContactAltAddr.Latitude;
      rValue :=
        (pAddress <> '') OR
        (pAddress2 <> '') OR
        (pPostCode <> '') OR
        (pCity <> '') OR
        (pLongitude <> 0) OR
        (pLatitude <> 0);
    END;

    PROCEDURE GetProviderGeoCode@1100281004(pProviderNo@1100281000 : Code[20];pAddressCode@1100281001 : Code[10];VAR pX@1100281002 : Integer;VAR pY@1100281003 : Integer);
    VAR
      lContactAltAddr@1100281010 : Record 5051;
      lPostCode@1100281015 : Record 225;
      lwinHTTPService@1100281009 : Automation "{662901FC-6951-4854-9EB2-D9A2570F2B2E} 5.1:{2087C2F4-2CEF-4953-A8AB-66779B670495}:'Microsoft WinHTTP Services, version 5.1'.WinHttpRequest";
      lData@1100281008 : Text[1024];
      lFilename@1100281007 : Text[1024];
      lInstream@1100281006 : InStream;
      lOutstream@1100281005 : OutStream;
      lFile@1100281004 : File;
      lXmlDom@1100281011 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lXmlNode@1100281013 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lAttribute@1100281012 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF83-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNamedNodeMap";
      lXmlDomElement@1100281014 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
      bUpdatePostCode@1100281016 : Boolean;
    BEGIN
      // Geocodage d'un Contact
      lContactAltAddr.RESET();
      IF NOT lContactAltAddr.GET(pProviderNo,pAddressCode) THEN EXIT;
      bUpdatePostCode := FALSE;
      IF lPostCode.GET(lContactAltAddr."Post Code",lContactAltAddr.City) THEN BEGIN
        IF lPostCode."Latitude Lambert 2E" <> 0 THEN BEGIN
          pX := lPostCode."Latitude Lambert 2E";
          pY := lPostCode."Longitude Lambert 2E";
          EXIT;
        END;
        bUpdatePostCode := TRUE;
      END ELSE BEGIN
        lPostCode.RESET();
        lPostCode.SETRANGE(Code,lContactAltAddr."Post Code");
        IF lPostCode.FINDFIRST() THEN BEGIN
          IF lPostCode."Latitude Lambert 2E" <> 0 THEN BEGIN
            pX := lPostCode."Latitude Lambert 2E";
            pY := lPostCode."Longitude Lambert 2E";
            EXIT;
          END;
          bUpdatePostCode := TRUE;
        END;
      END;
      IF ISCLEAR(lwinHTTPService) THEN CREATE(lwinHTTPService);
      lwinHTTPService.Open('POST',GetWebServiceUrl() + 'geocodeService/',0);
      lwinHTTPService.SetRequestHeader('Content-type','text/xml; charset=UTF-8');
      lwinHTTPService.SetRequestHeader('SOAPAction','""');

      lData := '<?xml version="1.0" encoding="UTF-8"?>';
      lData += '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" ';
      lData += 'xmlns:sch="http://geoconcept.com/gc/schemas">';
      lData += '  <soapenv:Header/>';
      lData += '  <soapenv:Body>';
      lData += '    <sch:GeocodeRequest>';
      lData += '      <sch:Address>';
      lData += '     <!--   <sch:CountryCode>fr</sch:CountryCode>-->';
      lData += '        <sch:City>'+ lContactAltAddr.City +'</sch:City>';
      lData += '        <sch:PostalCode>'+ lContactAltAddr."Post Code" +'</sch:PostalCode>';
      lData += '        <sch:AddressLine></sch:AddressLine>';
      lData += '        <!--Optional:-->';
      lData += '        <sch:Projection>MAP</sch:Projection>';
      lData += '      </sch:Address>';
      lData += '    </sch:GeocodeRequest>';
      lData += '  </soapenv:Body>';
      lData += '</soapenv:Envelope>';
      lwinHTTPService.Send(lData);
      IF NOT lwinHTTPService.WaitForResponse(60) THEN ERROR('Request timed out.');
      // an XMLDOM object
      CREATE(lXmlDom);
      CREATE(lXmlNode);
      lXmlDom.load(lwinHTTPService.ResponseStream);
      lXmlDomElement := lXmlDom.selectSingleNode('//gc:GeocodedAddress/gc:X');
      IF NOT ISCLEAR(lXmlDomElement) THEN
        EVALUATE(pX,lXmlDomElement.text());
      lXmlDomElement := lXmlDom.selectSingleNode('//gc:GeocodedAddress/gc:Y');
      IF NOT ISCLEAR(lXmlDomElement) THEN
        EVALUATE(pY,lXmlDomElement.text());
      IF bUpdatePostCode THEN BEGIN
        lPostCode."Latitude Lambert 2E"   := pX;
        lPostCode."Longitude Lambert 2E" := pY ;
        lPostCode.MODIFY();
      END;
      CLEAR(lXmlDom);
      CLEAR(lXmlNode);
    END;

    PROCEDURE GetProviderGeoCodeWithAddress@1000000001(pProviderNo@1100281000 : Code[20];pContactAltAddress@1100281001 : Record 5051;VAR pX@1100281002 : Integer;VAR pY@1100281003 : Integer);
    VAR
      lPostCode@1100281015 : Record 225;
      lXmlDom@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lXmlNode@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lAttribute@1000000001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF83-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNamedNodeMap";
      lXmlDomElement@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
      lwinHTTPService@1100281009 : Automation "{662901FC-6951-4854-9EB2-D9A2570F2B2E} 5.1:{2087C2F4-2CEF-4953-A8AB-66779B670495}:'Microsoft WinHTTP Services, version 5.1'.WinHttpRequest";
      lData@1100281008 : Text[1024];
      lFilename@1100281007 : Text[1024];
      lInstream@1100281006 : InStream;
      lOutstream@1100281005 : OutStream;
      lFile@1100281004 : File;
      bUpdatePostCode@1100281016 : Boolean;
    BEGIN
      // IMH16.PC
      // Fonction pour corriger le distancier dans le cas de la recherche de prestataire
      bUpdatePostCode := FALSE;
      IF lPostCode.GET(pContactAltAddress."Post Code",pContactAltAddress.City) THEN BEGIN
        IF lPostCode."Latitude Lambert 2E" <> 0 THEN BEGIN
          pX := lPostCode."Latitude Lambert 2E";
          pY := lPostCode."Longitude Lambert 2E";
          EXIT;
        END;
        bUpdatePostCode := TRUE;
      END ELSE BEGIN
        lPostCode.RESET;
        lPostCode.SETRANGE(Code,pContactAltAddress."Post Code");
        IF lPostCode.FINDFIRST THEN BEGIN
          IF lPostCode."Latitude Lambert 2E" <> 0 THEN BEGIN
            pX := lPostCode."Latitude Lambert 2E";
            pY := lPostCode."Longitude Lambert 2E";
            EXIT;
          END;
          bUpdatePostCode := TRUE;
        END;
      END;
      IF ISCLEAR(lwinHTTPService) THEN CREATE(lwinHTTPService);
      lwinHTTPService.Open('POST',GetWebServiceUrl() + 'geocodeService/',0);
      lwinHTTPService.SetRequestHeader('Content-type','text/xml; charset=UTF-8');
      lwinHTTPService.SetRequestHeader('SOAPAction','""');

      lData := '<?xml version="1.0" encoding="UTF-8"?>';
      lData += '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" ';
      lData += 'xmlns:sch="http://geoconcept.com/gc/schemas">';
      lData += '  <soapenv:Header/>';
      lData += '  <soapenv:Body>';
      lData += '    <sch:GeocodeRequest>';
      lData += '      <sch:Address>';
      lData += '     <!--   <sch:CountryCode>fr</sch:CountryCode>-->';
      lData += '        <sch:City>'+ pContactAltAddress.City +'</sch:City>';
      lData += '        <sch:PostalCode>'+ pContactAltAddress."Post Code" +'</sch:PostalCode>';
      lData += '        <sch:AddressLine></sch:AddressLine>';
      lData += '        <!--Optional:-->';
      lData += '        <sch:Projection>MAP</sch:Projection>';
      lData += '      </sch:Address>';
      lData += '    </sch:GeocodeRequest>';
      lData += '  </soapenv:Body>';
      lData += '</soapenv:Envelope>';
      lwinHTTPService.Send(lData);
      IF NOT lwinHTTPService.WaitForResponse(60) THEN ERROR('Request timed out.');
      // an XMLDOM object
      CREATE(lXmlDom);
      CREATE(lXmlNode);
      lXmlDom.load(lwinHTTPService.ResponseStream);
      lXmlDomElement := lXmlDom.selectSingleNode('//gc:GeocodedAddress/gc:X');
      IF NOT ISCLEAR(lXmlDomElement) THEN
        EVALUATE(pX,lXmlDomElement.text());
      lXmlDomElement := lXmlDom.selectSingleNode('//gc:GeocodedAddress/gc:Y');
      IF NOT ISCLEAR(lXmlDomElement) THEN
        EVALUATE(pY,lXmlDomElement.text());
      IF bUpdatePostCode THEN BEGIN
        lPostCode."Latitude Lambert 2E"   := pX;
        lPostCode."Longitude Lambert 2E" := pY ;
        lPostCode.MODIFY();
      END;
      CLEAR(lXmlDom);
      CLEAR(lXmlNode);
    END;

    PROCEDURE GenGeoPostCode@1100281008();
    VAR
      lContactAltAddr@1100281015 : Record 5051;
      lPostCode@1100281014 : Record 225;
      lwinHTTPService@1100281013 : Automation "{662901FC-6951-4854-9EB2-D9A2570F2B2E} 5.1:{2087C2F4-2CEF-4953-A8AB-66779B670495}:'Microsoft WinHTTP Services, version 5.1'.WinHttpRequest";
      lData@1100281012 : Text[1024];
      lFilename@1100281011 : Text[1024];
      lInstream@1100281010 : InStream;
      lOutstream@1100281009 : OutStream;
      lFile@1100281008 : File;
      lXmlDom@1100281007 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lXmlNode@1100281006 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lAttribute@1100281005 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF83-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNamedNodeMap";
      lXmlDomElement@1100281004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
      bUpdatePostCode@1100281002 : Boolean;
      i@1100281000 : Integer;
    BEGIN
      lPostCode.RESET();
      lPostCode.SETFILTER(Code,'<>%1','');
      lPostCode.SETFILTER("Longitude Lambert 2E",'=%1',0);
      IF lPostCode.FINDSET() THEN
        REPEAT

          IF ISCLEAR(lwinHTTPService) THEN CREATE(lwinHTTPService);
          lwinHTTPService.Open('POST',GetWebServiceUrl() + 'geocodeService/',0);
          lwinHTTPService.SetRequestHeader('Content-type','text/xml; charset=UTF-8');
          lwinHTTPService.SetRequestHeader('SOAPAction','""');

          lData := '<?xml version="1.0" encoding="UTF-8"?>';
          lData += '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" ';
          lData += 'xmlns:sch="http://geoconcept.com/gc/schemas">';
          lData +=   '<soapenv:Header/>';
          lData +=   '<soapenv:Body>';
          lData +=      '<sch:GeocodeRequest>';
          lData +=        '<sch:Address>';
          lData +=          '<!--   <sch:CountryCode>fr</sch:CountryCode>-->';
          lData +=          '<sch:City>' + lPostCode.City +'</sch:City>';
          lData +=          '<sch:PostalCode>'+ lPostCode.Code +'</sch:PostalCode>';
          lData +=          '<sch:AddressLine></sch:AddressLine>';
          lData +=          '<sch:Projection>MAP</sch:Projection>';
          lData +=       '</sch:Address>';
          lData +=     '</sch:GeocodeRequest>';
          lData +=   '</soapenv:Body>';
          lData += '</soapenv:Envelope>';
          lwinHTTPService.Send(lData);
          IF NOT lwinHTTPService.WaitForResponse(60) THEN ERROR('Request timed out.');
          // an XMLDOM object
          CREATE(lXmlDom);
          CREATE(lXmlNode);
          lXmlDom.load(lwinHTTPService.ResponseStream);
          CLEAR(lXmlDomElement);
          lXmlDomElement := lXmlDom.selectSingleNode('//gc:GeocodedAddress/gc:X');
          IF NOT ISCLEAR(lXmlDomElement) THEN
            EVALUATE(lPostCode."Latitude Lambert 2E",lXmlDomElement.text());
          CLEAR(lXmlDomElement);
          lXmlDomElement := lXmlDom.selectSingleNode('//gc:GeocodedAddress/gc:Y');
          IF NOT ISCLEAR(lXmlDomElement) THEN
            EVALUATE(lPostCode."Longitude Lambert 2E",lXmlDomElement.text());
          lPostCode.MODIFY();
          COMMIT();
          CLEAR(lXmlDom);
          CLEAR(lXmlNode);
       UNTIL lPostCode.NEXT() = 0;
    END;

    PROCEDURE GetCampaignSpecialization@1100281009(pCampaignNo@1100281002 : Code[20]);
    VAR
      lServiceCode@1100281000 : Record 50040;
      lServiceHeader@1100281001 : Record 5900;
      lCampaignSpecilization@1100281003 : Record 50035;
      lDialog@1100281004 : Dialog;
      lIntervMgt@1100281005 : Codeunit 50014;
      lPSB@1100281006 : TEMPORARY Record 51002;
      lServiceOrderType@1100281007 : Record 5903;
    BEGIN
      IF GUIALLOWED THEN lDialog.OPEN(Text006);
      lServiceHeader.RESET();
      lServiceHeader.SETRANGE("Campaign No.",pCampaignNo);
      IF NOT lServiceHeader.ISEMPTY() THEN
        IF lServiceHeader.FINDSET() THEN;
        REPEAT
          IF lServiceOrderType.GET(lServiceHeader."Service Order Type") THEN BEGIN
            lIntervMgt.SetSkipMessage();
            lIntervMgt.LoadProviderSearchBasket(lServiceHeader."No.",lPSB,lServiceOrderType);
            IF lPSB.FINDSET() THEN
              REPEAT
                IF NOT lCampaignSpecilization.GET(pCampaignNo,lPSB."Speciality Code") THEN BEGIN
                   lCampaignSpecilization."Campaign No." := pCampaignNo;
                   lCampaignSpecilization."Specialization Code" := lPSB."Speciality Code";
                   lCampaignSpecilization.INSERT();
                END;
              UNTIL lPSB.NEXT()=0;
          END;
        UNTIL lServiceHeader.NEXT()=0;
      IF GUIALLOWED THEN lDialog.CLOSE();
    END;

    PROCEDURE GetCampaignIntervention@1100281037(pCampaignNo@1100281002 : Code[20];pSpecializationCode@1100281009 : Code[10];VAR pServiceHeader@1100281008 : Record 5900);
    VAR
      lServiceCode@1100281000 : Record 50040;
      lServiceHeader@1100281001 : Record 5900;
      lCampaignSpecilization@1100281003 : Record 50035;
      lDialog@1100281004 : Dialog;
      lIntervMgt@1100281005 : Codeunit 50014;
      lPSB@1100281006 : TEMPORARY Record 51002;
      lServiceOrderType@1100281007 : Record 5903;
    BEGIN
      IF GUIALLOWED THEN lDialog.OPEN(Text006);
      lServiceHeader.RESET();
      lServiceHeader.SETRANGE("Campaign No.",pCampaignNo);
      lServiceHeader.SETFILTER("Provider No.",'''''');
      IF NOT lServiceHeader.ISEMPTY() THEN
        IF lServiceHeader.FINDSET() THEN;
        REPEAT
          IF lServiceOrderType.GET(lServiceHeader."Service Order Type") THEN BEGIN
            lIntervMgt.SetSkipMessage();
            lPSB.RESET();
            lPSB.DELETEALL();
            lIntervMgt.LoadProviderSearchBasket(lServiceHeader."No.",lPSB,lServiceOrderType);
            lPSB.SETRANGE("Speciality Code",pSpecializationCode);
            IF NOT lPSB.ISEMPTY() THEN BEGIN
              pServiceHeader  := lServiceHeader;
              pServiceHeader.INSERT();
            END;
          END;
        UNTIL lServiceHeader.NEXT()=0;
      IF GUIALLOWED THEN lDialog.CLOSE();
    END;

    PROCEDURE GetCampaignSpeGeoCode@1100281010(pCampaignNo@1100281000 : Code[20];pSpecialityCode@1100281001 : Code[20]);
    VAR
      lServiceCode@1100281006 : Record 50040;
      lServiceHeader@1100281005 : Record 5900;
      lCampaignSpecilization@1100281004 : Record 50035;
      lDialog@1100281003 : Dialog;
      lCampaignSpeArea@1100281002 : Record 50036;
      lIntervMgt@1100281009 : Codeunit 50014;
      lPSB@1100281008 : TEMPORARY Record 51002;
      lServiceOrderType@1100281007 : Record 5903;
    BEGIN
      IF GUIALLOWED THEN lDialog.OPEN(Text006);
      lCampaignSpeArea.RESET();
      lCampaignSpeArea.SETRANGE("User ID",pCampaignNo);
      //lCampaignSpeArea.SETRANGE("Specialization Code",pSpecialityCode);
      lCampaignSpeArea.DELETEALL();
      lServiceHeader.RESET();
      lServiceHeader.SETRANGE("Campaign No.",pCampaignNo);
      IF NOT lServiceHeader.ISEMPTY() THEN
        IF lServiceHeader.FINDSET() THEN;
        REPEAT
          IF lServiceOrderType.GET(lServiceHeader."Service Order Type") THEN BEGIN
            lPSB.RESET();
            lPSB.DELETEALL();
            lIntervMgt.SetSkipMessage();
            lIntervMgt.LoadProviderSearchBasket(lServiceHeader."No.",lPSB,lServiceOrderType);
            lPSB.RESET();
            lPSB.SETFILTER(lPSB."Speciality Code",pSpecialityCode);
            IF lPSB.FINDSET() THEN BEGIN
              IF NOT lCampaignSpeArea.GET(pCampaignNo,pSpecialityCode,lServiceHeader."Geo. Reference Code") THEN BEGIN
                lCampaignSpeArea."User ID" := pCampaignNo;
                //lCampaignSpeArea."Specialization Code" := pSpecialityCode;
                //lCampaignSpeArea."Geo. Code" := lServiceHeader."Geo. Reference Code";
                //lCampaignSpeArea."Interv. Count" :=1;
                lCampaignSpeArea.INSERT();
              END ELSE BEGIN
                //lCampaignSpeArea."Interv. Count" +=1;
                lCampaignSpeArea.MODIFY();
              END;
            END;
          END;
          //lServiceCode.RESET();
          //lServiceCode.SETRANGE("Service Header No.",lServiceHeader."No.");
          //lServiceCode.SETRANGE("Service Type",lServiceCode."Service Type"::ServiceHeader);
          //lServiceCode.SETRANGE("Code Type",lServiceCode."Code Type"::Speciality);
          //lServiceCode.SETRANGE(Code,pSpecialityCode);
          //IF lServiceCode.FINDSET() THEN
          //  REPEAT
          //    IF NOT lCampaignSpeArea.GET(pCampaignNo,pSpecialityCode,lServiceHeader."Geo. Reference Code") THEN BEGIN
          //      lCampaignSpeArea."Campaign No." := pCampaignNo;
          //      lCampaignSpeArea."Specialization Code" := pSpecialityCode;
          //      lCampaignSpeArea."Geo. Code" := lServiceHeader."Geo. Reference Code";
          //      lCampaignSpeArea."Interv. Count" :=1;
          //      lCampaignSpeArea.INSERT();
          //    END ELSE BEGIN
          //      lCampaignSpeArea."Interv. Count" +=1;
          //      lCampaignSpeArea.MODIFY();
          //    END;
           // UNTIL lServiceCode.NEXT()=0;
        UNTIL lServiceHeader.NEXT()=0;
      IF GUIALLOWED THEN lDialog.CLOSE();
    END;

    PROCEDURE GetInseeByArea@1100281011(VAR pAbilityGeoSearchBuffer@1100281002 : Record 51001;pAreaCode@1100281000 : Code[10]);
    VAR
      lGeographicalReference@1100281001 : Record 50013;
    BEGIN
      // R‚cupŠre tous les codes de r‚f‚rence g‚o. en fonction d'un d‚partement

      lGeographicalReference.SETCURRENTKEY("Area Code");
      lGeographicalReference.SETRANGE("Area Code",pAreaCode);
      IF lGeographicalReference.FINDSET THEN BEGIN
        REPEAT
          IF NOT pAbilityGeoSearchBuffer.GET(lGeographicalReference.Code) THEN BEGIN
            pAbilityGeoSearchBuffer."Ref. Geo. Code" := lGeographicalReference.Code;
            pAbilityGeoSearchBuffer.INSERT;
          END;
        UNTIL lGeographicalReference.NEXT = 0;
      END;
    END;

    PROCEDURE GetInseeByTerritory@1100281015(VAR pAbilityGeoSearchBuffer@1100281002 : Record 51001;pTerritoryCode@1100281000 : Code[10]);
    VAR
      lGeographicalReference@1100281001 : Record 50013;
    BEGIN
      // R‚cupŠre tous les codes de r‚f‚rence g‚o. en fonction d'un d‚partement

      lGeographicalReference.SETCURRENTKEY("IMH Territory Code");
      lGeographicalReference.SETRANGE("Admin. Territory Code",pTerritoryCode);
      IF lGeographicalReference.FINDSET THEN BEGIN
        REPEAT
          IF NOT pAbilityGeoSearchBuffer.GET(lGeographicalReference.Code) THEN BEGIN
            pAbilityGeoSearchBuffer."Ref. Geo. Code" := lGeographicalReference.Code;
            pAbilityGeoSearchBuffer.INSERT;
          END;
        UNTIL lGeographicalReference.NEXT = 0;
      END;
    END;

    PROCEDURE GetInseeByCountry@1100281017(VAR pAbilityGeoSearchBuffer@1100281002 : Record 51001;pCountryCode@1100281000 : Code[10]);
    VAR
      lGeographicalReference@1100281001 : Record 50013;
    BEGIN
      // R‚cupŠre tous les codes de r‚f‚rence g‚o. en fonction d'un d‚partement

      lGeographicalReference.SETCURRENTKEY("IMH Territory Code");
      lGeographicalReference.SETRANGE("Country/Region Code",pCountryCode);
      IF lGeographicalReference.FINDSET THEN BEGIN
        REPEAT
          IF NOT pAbilityGeoSearchBuffer.GET(lGeographicalReference.Code) THEN BEGIN
            pAbilityGeoSearchBuffer."Ref. Geo. Code" := lGeographicalReference.Code;
            pAbilityGeoSearchBuffer.INSERT;
          END;
        UNTIL lGeographicalReference.NEXT = 0;
      END;
    END;

    PROCEDURE GetWebServiceUrl@1100281024() : Text[250];
    BEGIN
      GetProviderSetup();
      EXIT(ProviderSetup."Geoconcept Web Service URL");
    END;

    PROCEDURE GetProviderSetup@1100281025();
    BEGIN
      IF NOT IsGetProviderSetup THEN
        ProviderSetup.GET();
      IsGetProviderSetup := TRUE;
    END;

    PROCEDURE GetMarketingSetup@1100281033();
    BEGIN
      IF NOT IsGetMarketingSetup THEN
        MarketingSetup.GET();
      IsGetMarketingSetup := TRUE;
    END;

    PROCEDURE UpdateAbiGeoProvider@1100281029(pProviderNo@1100281003 : Code[20];pSpecializationCode@1100281004 : Code[10];pData@1100281000 : BigText;pUrgent@1100281007 : Boolean);
    VAR
      lAbiGeoProvider@1100281005 : Record 50016;
      lAbiGeoProviderSetup@1100281008 : Record 50033;
      lProviderSearchMgt@1100281011 : Codeunit 50284;
      lProviderSpecialization@1100281013 : Record 50006;
      lTextBuffer@1100281002 : Text[1024];
      lGeoCode@1100281006 : Code[6];
      lStartGeoCode@1100281010 : Code[10];
      lDistance@1100281012 : Decimal;
      lDistanceInt@1100281016 : Integer;
      i@1100281001 : Integer;
      lToModify@1100281009 : Boolean;
      lSetupExist@1100281014 : Boolean;
    BEGIN
      //<<IMH09.PC
      lStartGeoCode := GetProviderRefGeoCode(pProviderNo);

      // Mise en exclusion pour g‚rer les suppressions sur la carte
      lAbiGeoProvider.RESET;
      lAbiGeoProvider.SETFILTER("Provider No.",pProviderNo);
      IF pUrgent THEN BEGIN
        lAbiGeoProvider.SETRANGE(Emergency,TRUE);
      END ELSE BEGIN
        lAbiGeoProvider.SETRANGE(Standard,TRUE);
      END;
      IF pSpecializationCode <> '' THEN BEGIN
        lAbiGeoProvider.SETFILTER("Specialization Code",pSpecializationCode);
      END;
      IF pUrgent THEN BEGIN
        lAbiGeoProvider.MODIFYALL("Emergency Exclusion",TRUE);
      END ELSE BEGIN
        lAbiGeoProvider.MODIFYALL("Standard Exclusion",TRUE);
      END;
      lAbiGeoProvider.RESET;

      // Gestion de la suppression de la comp‚tence g‚o.
      IF pData.LENGTH = 0 THEN BEGIN
        IF NOT CONFIRM(Text013) THEN BEGIN
          EXIT;
        END;

        lAbiGeoProviderSetup.SETRANGE("Provider No.",pProviderNo);
        lAbiGeoProviderSetup.DELETEALL(TRUE);
        EXIT;
      END;

      // Traitement de mise … jour
      pData.GETSUBTEXT(lTextBuffer,pData.LENGTH,1);
      IF lTextBuffer <> ';' THEN BEGIN
        pData.ADDTEXT(';');
      END;

      FOR i := 0 TO (pData.LENGTH / 6) - 1 DO BEGIN
        pData.GETSUBTEXT(lTextBuffer,(i * 6) + 1,5);
        lGeoCode := lTextBuffer;
        lProviderSpecialization.SETRANGE("Provider No.", pProviderNo);
        IF pUrgent THEN BEGIN
          lProviderSpecialization.SETRANGE(Emergency, pUrgent);
        END;
        IF pSpecializationCode <> '' THEN BEGIN
          lProviderSpecialization.SETRANGE("Specialization Code",pSpecializationCode);
        END;
        IF lProviderSpecialization.FINDSET THEN BEGIN
          REPEAT
            lAbiGeoProvider.SETRANGE("Provider No.",pProviderNo);
            //lAbiGeoProvider.SETRANGE("Start Reference Code",lStartGeoCode);
            lAbiGeoProvider.SETFILTER("End Ref. Geo. Code",lGeoCode);
            lAbiGeoProvider.SETRANGE("Specialization Code",lProviderSpecialization."Specialization Code");
            IF lAbiGeoProvider.ISEMPTY THEN BEGIN
              // La ligne de comp geo n'existe pas, creation du setup
              lSetupExist := FALSE;
              IF pSpecializationCode <> '' THEN BEGIN
                lSetupExist :=
                  lAbiGeoProviderSetup.GET(pProviderNo,lStartGeoCode,pSpecializationCode,lAbiGeoProviderSetup."Setup Type"::Manual);
              END ELSE BEGIN
                lSetupExist :=
                  lAbiGeoProviderSetup.GET(pProviderNo,lStartGeoCode,'',lAbiGeoProviderSetup."Setup Type"::Manual);
              END;
              IF NOT lSetupExist THEN BEGIN
                lAbiGeoProviderSetup.RESET;
                lAbiGeoProviderSetup."Provider No." := pProviderNo;
                lAbiGeoProviderSetup."Start Reference Code" := lStartGeoCode;
                IF pSpecializationCode <> '' THEN BEGIN
                  lAbiGeoProviderSetup."Specialization Code" := pSpecializationCode;
                END ELSE BEGIN
                  lAbiGeoProviderSetup."Specialization Code" := '';
                END;
                lAbiGeoProviderSetup."Setup Type" := lAbiGeoProviderSetup."Setup Type"::Manual;
                //<<IMH19
                //lAbiGeoProviderSetup.Standard := NOT pUrgent;
                lAbiGeoProviderSetup.Standard := TRUE;
                //<<IMH19
                lAbiGeoProviderSetup.Emergency := pUrgent;
                lAbiGeoProviderSetup.Generated := TRUE;
                lAbiGeoProviderSetup.INSERT(TRUE);
              END ELSE BEGIN
                lToModify := FALSE;
                IF pUrgent AND NOT lAbiGeoProviderSetup.Emergency THEN BEGIN
                  lAbiGeoProviderSetup.Emergency := TRUE;
                  lToModify := TRUE;
                END;
                IF NOT pUrgent AND NOT lAbiGeoProviderSetup.Standard THEN BEGIN
                  lAbiGeoProviderSetup.Standard := TRUE;
                  lToModify := TRUE;
                END;
                IF lToModify THEN BEGIN
                  lAbiGeoProviderSetup.MODIFY(TRUE);
                END;
              END;
              // Creation de la ligne de comp
              lAbiGeoProvider.INIT;
              lAbiGeoProvider."Provider No." := pProviderNo;
              lAbiGeoProvider."Specialization Code" := lProviderSpecialization."Specialization Code";
              lAbiGeoProvider."Start Reference Code" := lStartGeoCode;
              lAbiGeoProvider."End Ref. Geo. Code" := lGeoCode;
              IF pUrgent THEN BEGIN
                lAbiGeoProvider."Emergency Exclusion" := FALSE;
                lAbiGeoProvider.Emergency := TRUE;
              END ELSE BEGIN
                lAbiGeoProvider."Standard Exclusion" := FALSE;
                lAbiGeoProvider.Standard := TRUE;
              END;
              lAbiGeoProvider."Setup Type" := lAbiGeoProvider."Setup Type"::Manual;
              lProviderSearchMgt.GetDistanceKm(lStartGeoCode,lGeoCode);  //IMH20
              lDistance := lProviderSearchMgt.GetDistanceKm(lStartGeoCode,lGeoCode);
              lDistanceInt := ROUND(lDistance,1,'=');
              lAbiGeoProvider."Distance (km)"  := lDistanceInt;
              lAbiGeoProvider.INSERT(TRUE);
            END ELSE BEGIN
              lAbiGeoProvider.FINDFIRST;
              IF NOT lAbiGeoProviderSetup.GET(
                lAbiGeoProvider."Provider No.",lAbiGeoProvider."Start Reference Code",
                lAbiGeoProvider."Specialization Code",lAbiGeoProvider."Setup Type")
              THEN BEGIN
                lAbiGeoProviderSetup.GET(
                  lAbiGeoProvider."Provider No.",lAbiGeoProvider."Start Reference Code",
                  '',lAbiGeoProvider."Setup Type")
              END;
              lToModify := FALSE;
              IF pUrgent AND NOT lAbiGeoProviderSetup.Emergency THEN BEGIN
                lAbiGeoProviderSetup.Emergency := TRUE;
                lToModify := TRUE;
              END;
              IF NOT pUrgent AND NOT lAbiGeoProviderSetup.Standard THEN BEGIN
                lAbiGeoProviderSetup.Standard := TRUE;
                lToModify := TRUE;
              END;
              IF lToModify THEN BEGIN
                lAbiGeoProviderSetup.MODIFY(TRUE);
              END;
              lToModify := FALSE;

              // mise … jour de standard ou urgence
              lToModify := FALSE;
              IF pUrgent THEN BEGIN
                IF lAbiGeoProvider."Emergency Exclusion" THEN BEGIN
                  lAbiGeoProvider."Emergency Exclusion" := FALSE;
                  lToModify := TRUE;
                END;
              END ELSE BEGIN
                IF lAbiGeoProvider."Standard Exclusion" THEN BEGIN
                  lAbiGeoProvider."Standard Exclusion" := FALSE;
                  lToModify := TRUE;
                END;
              END;
              IF pUrgent AND NOT lAbiGeoProvider.Emergency THEN BEGIN
                lAbiGeoProvider.Emergency := TRUE;
                lToModify := TRUE;
              END;
              IF NOT pUrgent AND NOT lAbiGeoProvider.Standard THEN BEGIN
                lAbiGeoProvider.Standard := TRUE;
                lToModify := TRUE;
              END;
              IF lToModify THEN BEGIN
                lAbiGeoProvider.MODIFY(TRUE);
              END;
            END;
          UNTIL lProviderSpecialization.NEXT = 0;
        END;
      END;
      //>>IMH09.PC
      {Old Version
      lStartGeoCode := GetProviderRefGeoCode(pProviderNo);

      lAbiGeoProviderSetup.RESET;
      lAbiGeoProviderSetup.SETRANGE("Provider No.",pProviderNo);
      lAbiGeoProviderSetup.SETRANGE("Start Reference Code",lStartGeoCode);
      IF pSpecializationCode <> '' THEN
        lAbiGeoProviderSetup.SETRANGE("Specialization Code",pSpecializationCode);
      lAbiGeoProviderSetup.SETRANGE("Setup Type",lAbiGeoProviderSetup."Setup Type"::Manual);
      lSetupExist := NOT lAbiGeoProviderSetup.ISEMPTY;

      lAbiGeoProvider.RESET;
      lAbiGeoProvider.SETFILTER("Provider No.",pProviderNo);
      lAbiGeoProvider.SETRANGE(Emergency,pUrgent);
      IF pSpecializationCode <> '' THEN
        lAbiGeoProvider.SETFILTER("Specialization Code",pSpecializationCode);
      lAbiGeoProvider.MODIFYALL(Exclusion,TRUE);
      //<<IMH04
      lAllSpec := (pSpecializationCode = '');
      IF lAllSpec THEN BEGIN
        lProviderSpecialization.SETRANGE("Provider No.", pProviderNo);
        lProviderSpecialization.SETRANGE(Emergency, pUrgent);
        lCount := lProviderSpecialization.COUNT;
      END;
      IF lCount = 0 THEN
        lCount := 1;

      pData.GETSUBTEXT(str,pData.LENGTH,1);
      IF str <> ';' THEN
        pData.ADDTEXT(';');

      FOR i := 0 TO (pData.LENGTH / 6) - 1 DO BEGIN
        pData.GETSUBTEXT(str,(i * 6) + 1,5);
        lGeoCode := str;
        IF lAllSpec THEN BEGIN
          IF lProviderSpecialization.FINDFIRST THEN
            pSpecializationCode := lProviderSpecialization."Specialization Code";
        END;
        FOR j := 1 TO lCount DO BEGIN
          IF j <> 1 THEN
            pSpecializationCode := lProviderSpecialization."Specialization Code";
        //>>IMH04
          lAbiGeoProvider.SETFILTER("End Ref. Geo. Code",lGeoCode);
          lAbiGeoProvider.SETFILTER("Specialization Code",pSpecializationCode);
          IF NOT lAbiGeoProvider.ISEMPTY() THEN BEGIN
            lAbiGeoProvider.MODIFYALL(Exclusion,FALSE);
          END ELSE BEGIN
            IF NOT lSetupExist THEN BEGIN
              lAbiGeoProviderSetup.RESET();
              lAbiGeoProviderSetup."Provider No." := pProviderNo;
              lAbiGeoProviderSetup."Start Reference Code" := lStartGeoCode;
              lAbiGeoProviderSetup."Specialization Code" := pSpecializationCode;
              lAbiGeoProviderSetup."Setup Type" := lAbiGeoProviderSetup."Setup Type"::Manual;
              //<<IMH19
              //lAbiGeoProviderSetup.Standard := NOT pUrgent;
              lAbiGeoProviderSetup.Standard := true;
              lAbiGeoProviderSetup.Emergency := pUrgent;
              //>>IMH19
              //<<IMH09.PC
              lAbiGeoProviderSetup.Generated := TRUE;
              //>>IMH09.PC
              IF lAbiGeoProviderSetup.INSERT(TRUE) THEN;
            END;
            lAbiGeoProvider."Provider No." := pProviderNo;
            lAbiGeoProvider."Specialization Code" := pSpecializationCode;
            lAbiGeoProvider."Start Reference Code" := lStartGeoCode;
            lAbiGeoProvider."End Ref. Geo. Code" := lGeoCode;
            lAbiGeoProvider.Emergency := pUrgent;
            lAbiGeoProvider.Standard := NOT pUrgent;
            lAbiGeoProvider.Exclusion := FALSE;
            lAbiGeoProvider."Setup Type" := lAbiGeoProvider."Setup Type"::Manual;
            lProviderSearchMgt.GetDistanceKm(lStartGeoCode,lGeoCode);
            lDistance := lProviderSearchMgt.GetDistanceKm(lStartGeoCode,lGeoCode);
            lDistanceInt := ROUND(lDistance,1,'=');
            lAbiGeoProvider."Distance (km)"  := lDistanceInt;
            lAbiGeoProvider.INSERT(TRUE);
          END;
          lProviderSpecialization.NEXT;
        END;
      END;
      }
      //>>IMH10.PC
    END;

    PROCEDURE UpdateAbiCampGeo@1100281044(pCampaignNo@1100281007 : Code[20];pData@1100281000 : BigText);
    VAR
      i@1100281001 : Integer;
      str@1100281002 : Text[1024];
      lAbiCampGeo@1100281005 : Record 50086;
      lAbiCampGeoSetup@1100281010 : Record 50082;
      lGeoCode@1100281006 : Code[6];
      lSetupExist@1100281009 : Boolean;
      lStartGeoCode@1100281011 : Code[10];
    BEGIN
      lAbiCampGeoSetup.RESET();
      lAbiCampGeoSetup.SETRANGE("Start Reference Code",'*');
      lAbiCampGeoSetup.SETRANGE("Campaign No.",pCampaignNo);
      lAbiCampGeoSetup.SETRANGE("Setup Type",lAbiCampGeoSetup."Setup Type"::Manual);
      lSetupExist := NOT lAbiCampGeoSetup.ISEMPTY();
      lAbiCampGeo.RESET();
      lAbiCampGeo.SETFILTER("Campaign No.",pCampaignNo);
      lAbiCampGeo.MODIFYALL(Exclusion,TRUE);

      pData.GETSUBTEXT(str,pData.LENGTH,1);
      IF str <> ';' THEN pData.ADDTEXT(';');
      FOR i := 0 TO (pData.LENGTH / 6) - 1 DO BEGIN
        pData.GETSUBTEXT(str,(i * 6) + 1,5);
        lGeoCode := str;
        lAbiCampGeo.SETFILTER("End Ref. Geo. Code",lGeoCode);
        IF NOT lAbiCampGeo.ISEMPTY() THEN BEGIN
          lAbiCampGeo.MODIFYALL(Exclusion,FALSE);
        END ELSE BEGIN
          IF NOT lSetupExist THEN BEGIN
            lAbiCampGeoSetup.RESET();
            lAbiCampGeoSetup."Campaign No." := pCampaignNo;
            lAbiCampGeoSetup."Start Reference Code" := '*';
            lAbiCampGeoSetup."Setup Type" := lAbiCampGeoSetup."Setup Type"::Manual;
            lAbiCampGeoSetup.Generated := TRUE;
            lAbiCampGeoSetup.INSERT(TRUE);
            lSetupExist := TRUE;
          END;

          lAbiCampGeo."Campaign No." := pCampaignNo;
          lAbiCampGeo."Start Ref. Geo. Code" := '*'; //lStartGeoCode;
          lAbiCampGeo."End Ref. Geo. Code" := lGeoCode;
          lAbiCampGeo.Exclusion := FALSE;
          lAbiCampGeo."Setup Type" := lAbiCampGeo."Setup Type"::Manual;
          lAbiCampGeo."Distance (km)"  := 0;
          lAbiCampGeo.INSERT(TRUE);
        END;
      END;
    END;

    PROCEDURE UpdateAbiCampGeoProvider@1100281030(pCampaignNo@1100281007 : Code[20];pProviderNo@1100281003 : Code[20];pData@1100281000 : BigText);
    VAR
      i@1100281001 : Integer;
      str@1100281002 : Text[1024];
      lAbiCampGeoProvider@1100281005 : Record 50015;
      lAbiCampGeoProvSetup@1100281010 : Record 50037;
      lProviderSpecialization@1100281012 : Record 50006;
      lGeoCode@1100281006 : Code[6];
      lSetupExist@1100281009 : Boolean;
      lStartGeoCode@1100281011 : Code[10];
      lAllSpec@1100281013 : Boolean;
    BEGIN
      lStartGeoCode := GetProviderRefGeoCode(pProviderNo);
      lAbiCampGeoProvSetup.RESET();
      lAbiCampGeoProvSetup.SETRANGE("Provider No.",pProviderNo);
      lAbiCampGeoProvSetup.SETRANGE("Start Reference Code",lStartGeoCode);
      lAbiCampGeoProvSetup.SETRANGE("Campaign No.",pCampaignNo);
      lAbiCampGeoProvSetup.SETRANGE("Setup Type",lAbiCampGeoProvSetup."Setup Type"::Manual);
      lSetupExist := NOT lAbiCampGeoProvSetup.ISEMPTY();

      lAbiCampGeoProvider.RESET();
      lAbiCampGeoProvider.SETFILTER("Provider No.",pProviderNo);
      lAbiCampGeoProvider.SETFILTER("Campaign No.",pCampaignNo);
      lAbiCampGeoProvider.MODIFYALL(Exclusion,TRUE);

      lProviderSpecialization.RESET();
      lProviderSpecialization.SETRANGE("Provider No.",pProviderNo);
          pData.GETSUBTEXT(str,pData.LENGTH,1);
          IF str <> ';' THEN pData.ADDTEXT(';');
          FOR i := 0 TO (pData.LENGTH / 6) - 1 DO BEGIN
            pData.GETSUBTEXT(str,(i * 6) + 1,5);
            lGeoCode := str;
            lAbiCampGeoProvider.SETFILTER("End Ref. Geo. Code",lGeoCode);
            IF NOT lAbiCampGeoProvider.ISEMPTY() THEN BEGIN
              lAbiCampGeoProvider.MODIFYALL(Exclusion,FALSE);
            END ELSE BEGIN
              IF NOT lSetupExist THEN BEGIN
                lAbiCampGeoProvSetup.RESET();
                lAbiCampGeoProvSetup."Provider No." := pProviderNo;
                lAbiCampGeoProvSetup."Campaign No." := pCampaignNo;
                lAbiCampGeoProvSetup."Start Reference Code" := '*';
      //          lAbiCampGeoProvSetup.GetGeoRefCode := pSpecializationCode;
                lAbiCampGeoProvSetup."Setup Type" := lAbiCampGeoProvSetup."Setup Type"::Manual;
                lAbiCampGeoProvSetup.INSERT(TRUE);
                lSetupExist := TRUE;
              END;

              lAbiCampGeoProvider."Campaign No." := pCampaignNo;
              lAbiCampGeoProvider."Provider No." := pProviderNo;
              lAbiCampGeoProvider."Start Ref. Geo. Code" := lStartGeoCode;
              lAbiCampGeoProvider."End Ref. Geo. Code" := lGeoCode;
              lAbiCampGeoProvider.Exclusion := FALSE;
              lAbiCampGeoProvider."Setup Type" := lAbiCampGeoProvider."Setup Type"::Manual;
              lAbiCampGeoProvider."Distance (km)"  := 0;
              lAbiCampGeoProvider.INSERT(TRUE);
            END;
          END;
    END;

    PROCEDURE GetProviderRefGeoCode@1100281034(pProviderNo@1100281000 : Code[20]) : Code[10];
    VAR
      lProvider@1100281001 : Record 50000;
      lContactAltAddr@1100281002 : Record 5051;
    BEGIN
      IF lProvider.GET(pProviderNo) THEN BEGIN
        GetMarketingSetup();
        lContactAltAddr.GET(pProviderNo,MarketingSetup."Main Address Code");
        IF lContactAltAddr."Geo. Reference Code" = '' THEN
          ERROR(Text009)
        ELSE
          EXIT(lContactAltAddr."Geo. Reference Code");
      END;
    END;

    PROCEDURE SetHideMessage@1100281041(pHideMessage@1100281000 : Boolean);
    BEGIN
      //<<IMH.isat.PC
      // D‚sactivation des messages
      HideMessage := pHideMessage;
      //>>IMH.isat.PC
    END;

    LOCAL PROCEDURE LoadGeoSearchBuffer@1100281046(VAR pAbilityGeoProviderSetup@1100281000 : Record 50033;VAR pAbilityGeoSearchBuffer@1100281001 : TEMPORARY Record 51001;pDistance@1100281002 : Decimal);
    VAR
      lProviderSearchMgt@1100281003 : Codeunit 50000;
    BEGIN
      //IMH08.ST
      pAbilityGeoSearchBuffer.RESET;
      pAbilityGeoSearchBuffer.DELETEALL;
      WITH pAbilityGeoProviderSetup DO BEGIN
        CASE "Setup Type" OF
          "Setup Type"::"City (Distance)" : BEGIN
            lProviderSearchMgt.GetInseeByDistanceKm(
              "Start Reference Code", pDistance,
              pAbilityGeoSearchBuffer,
              FALSE);
          END;
          "Setup Type"::Area :
            GetInseeByArea(pAbilityGeoSearchBuffer, "Start Reference Code");
          "Setup Type"::Territory :
            GetInseeByTerritory(pAbilityGeoSearchBuffer, "Start Reference Code");
          "Setup Type"::Country :
            GetInseeByCountry(pAbilityGeoSearchBuffer, "Start Reference Code");
        END;
      END;
    END;

    LOCAL PROCEDURE LoadGeoCampSearchBuffer@1100281048(VAR pAbilityCampGeoSetup@1100281000 : Record 50082;VAR pAbilityGeoSearchBuffer@1100281001 : TEMPORARY Record 51001;pDistance@1100281002 : Decimal);
    VAR
      lProviderSearchMgt@1100281003 : Codeunit 50000;
    BEGIN
      //IMH08.ST
      pAbilityGeoSearchBuffer.RESET;
      pAbilityGeoSearchBuffer.DELETEALL;
      WITH pAbilityCampGeoSetup DO BEGIN
        CASE "Setup Type" OF
          "Setup Type"::"City (Distance)" : BEGIN
            lProviderSearchMgt.GetInseeByDistanceKm(
              "Start Reference Code", pDistance,
              pAbilityGeoSearchBuffer,
              FALSE);
          END;
          "Setup Type"::Area :
            GetInseeByArea(pAbilityGeoSearchBuffer, "Start Reference Code");
          "Setup Type"::Territory :
            GetInseeByTerritory(pAbilityGeoSearchBuffer, "Start Reference Code");
          "Setup Type"::Country :
            GetInseeByCountry(pAbilityGeoSearchBuffer, "Start Reference Code");
        END;
      END;
    END;

    BEGIN
    {
      /** @r IMH20 @d 09/04/14 @a ISAT.ZW @v IMH6.01.P011 @s New Provider Search
          @c Remplacer CU 50000 par 50284 */
      /** @r IMH19 @d 23/05/13 @s ISAT.ZW @v IMH6.01.345 @s MAI @h 4198 @c Correction */
      /** @r IMH18 @d 19/02/13 @s ISAT.PC @v IMH6.01.215 @s NEP00006 @h 3883 @c Correction */
      /** @r IMH17 @d 25/04/12 @a ISAT.NFO @v IMH6.01.020 @s Competence g‚ographique @h 3396 @c Gestion booleen g‚n‚r‚ */
      /** @r IMH16 @d 10/04/12 @a ISAT.PC @v IMH6.01.020 @s Calcul distance
          @h 3002 @c Ajout fonction GetProviderGeoCodeWithAddress */
      /** @r IMH15 @d 26/03/12 @a ISAT.ZW @v IMH6.01.020 @s Gestion des visites @h 3191 @c Ajout fonction SearchAround2 */
      /** @r IMH14 @d 16/01/12 @a ISAT.PC @v IMH6.01.020 @s Competence g‚ographique @h 2733 @c Correctif */
      /** @r IMH13 @d 05/01/12 @a ISAT.NFO @v IMH6.01.020 @s Competence g‚ographique @h 2721
          @c ajout d'un fIiltre lorsque la g‚n‚ration est faite au niveau de la spe pour ne pas tout supprimer */
      /** @r IMH12 @d 09/11/11 @a ISAT.NFO @v IMH6.01.020 @s Competence g‚ographique
          @c modification du calcul r‚el si prestataire non g‚ocode utiliser la ville */
      /** @r IMH11 @d 18/10/11 @a ISAT.NFO @v IMH6.01.020 @s Competence g‚ographique
          @c G‚ocodage du service au code postal si pas de webservice g‚oconcept */
      /** @r IMH10 @d 08/08/11 @a ISAT.NFO @v IMH6.01.020 @s Competence g‚ographique @c Optimisations */
      /** @r IMH09 @d 16/07/11 @a ISAT.PC @v IMH6.01.020 @s Competence g‚ographique
          @c R‚‚criture de la fonction de mise … jour des comp‚tences manuelles */
      /** @r IMH08 @d 07/07/11 @a ISAT.ST @v IMH6.01.020 @s Competence g‚ographique @c Ajout message d'erreur
          @c Organisation et optimisation de code */
      /** @r IMH07 @d 30/03/11 @a ISAT.PC @v IMH6.01.020 @s Competence g‚ographique @c Ajout fonction HideMessage */
      /** @r IMH06 @d 25/03/11 @a ISAT.ZW @v IMH6.01.020 @s Competence g‚ographique @c Gestion booleen g‚n‚r‚ */
      /** @r IMH05 @d 01/03/a11 @a ISAT.NFO @v IMH6.01.020 @s Competence g‚ographique @c Nettoyage du code */
      /** @r IMH05 @d 28/02/11 @a ISAT.NFO @v IMH6.01.020 @s Competence g‚ographique @c Correction g‚n‚ration competance g‚o urgent */
      /** @r IMH04 @d 11/02/11 @a ISAT.ZW @v IMH6.01.020 @s Competence g‚ographique
          @c Mode manuel creation des lignes competence geo pour tous les specialites prestataire */
      /** @r IMH03 @d 27/01/11 @a ISAT.LLT @v IMH6.01.020 @s Competence g‚ographique @c compete */
      /** @r IMH03 @d 27/01/11 @a ISAT.LLT @v IMH6.01.020 @s Competence g‚ographique @c Gestion annulation geocodage */
      /** @r IMH02 @d 04/01/11 @a ISAT.PC @v IMH6.01.020 @s Competence g‚ographique @c Ajout fonction NormalizeAddress */
      /** @r IMH01 @d 07/10/10 @a ISAT.NFO @v IMH6.01.020 @s Competence g‚ographique @c Creation */
    }
    END.
  }
}