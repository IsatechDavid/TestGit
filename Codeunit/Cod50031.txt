OBJECT Codeunit 50031 Proc. Service Hdr Req. Funct.
{
  OBJECT-PROPERTIES
  {
    Date=03/06/14;
    Time=15:50:13;
    Modified=Yes;
    Version List=IMH6.01,SUPPORT,5141;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Funct001_Name@1100281001 : TextConst 'ENU=Tray line activities exists;FRA=Activit‚s corbeilles en cours';
      Funct001_Assist@1100281002 : TextConst 'ENU=Team code filter (unmandatory),Task code filter (unmandatory);FRA=Filtre code corbeille (non obligatoire),Filte code tƒche (non obligatoire)';
      AssistMode@1100281003 : Boolean;
      CurrRec@1100281004 : Record 5900;
      ProcCommFct@1100281005 : Codeunit 50049;
      Funct101_Name@1100281006 : TextConst 'ENU=Intervention Ceiling Overrun;FRA=D‚passement plafond d''intervention';
      Funct101_Assist@1100281000 : TextConst 'ENU=Quote type filter;FRA=Filtre type devis';
      Funct101_Text1@1000000002 : TextConst 'ENU=Quote amount is more than %1 °;FRA="Le montant des devis est sup‚rieur au plafond %1 ° "';
      Funct101_Text2@1000000001 : TextConst 'ENU=" (%1 %)";FRA=" soit %1 %."';
      Funct101_Text3@1000000000 : TextConst 'ENU=Quote amount is more than %1 °;FRA="Le montant du devis est sup‚rieur au plafond %1 ° "';
      Funct101_Text4@1000000003 : TextConst 'FRA=HT';
      Funct101_Text5@1000000004 : TextConst 'FRA=TTC';
      Funct106_Name@1100281008 : TextConst 'ENU=Estimate overrun;FRA=D‚passement estimation';
      Funct106_Assist@1100281007 : TextConst 'ENU=Quote type filter;FRA=Filtre type devis';
      Funct106_Text1@1100281009 : TextConst 'ENU=Quote amount is more than %1 °;FRA=Le montant des devis est sup‚rieur au chiffrage %1 ° HT';
      Funct106_Text2@1100281010 : TextConst 'ENU=" (%1 %)";FRA=" soit %1 %."';
      Funct106_Text3@1100281011 : TextConst 'ENU=Quote amount is more than %1 °;FRA=Le montant du devis est sup‚rieur au chiffrage %1 ° HT';
      Funct110_Name@1100281012 : TextConst 'ENU=Achieved random control objective;FRA=Objectifs de contr“les al‚atoires atteints';
      Funct106_Text4@1000000005 : TextConst 'ENU=Quote amount is more than %1 % (%2 °);FRA=Le montant du devis est sup‚rieur de %1 % au chiffrage initial (%2 ° HT)';
      Funct106_Text5@1000000006 : TextConst 'ENU=Quote amount is more than %1 % (%2 °);FRA=Le montant des devis est sup‚rieur de %1 % au chiffrage initial (%2 ° HT)';
      Funct114_Name@1000000008 : TextConst 'ENU=Last interaction date;FRA=D‚lai derniŠre interaction';
      Funct114_Assist@1000000007 : TextConst 'ENU=Delay,Date Field No.,Template Field No. 1,Filter Field 1,[Template Field No. 2,Filter Field 2,Compare : >];FRA=D‚lai,Nø champ Date,Nø champ modŠle 1,Filtre champ 1,[Nø champ modŠle 2,Filtre champ 2,Op‚rateur : >]';
      Funct102_Name@1100281014 : TextConst 'ENU=Last interaction date;FRA=Sp‚cialit‚s restantes';

    LOCAL PROCEDURE GetTableNo@1100281000() : Integer;
    BEGIN
      EXIT(DATABASE::"Service Header");
    END;

    PROCEDURE LoadFunctionList@1100281001();
    VAR
      lProcFunction@1100281000 : Record 50085;
    BEGIN
      // Source Table, Type, nø de la fonction, Description, ParamŠtre o/n
      WITH lProcFunction DO BEGIN
        // Plage 1 … 99 : commun DPS
        InitFunction(GetTableNo, "Function Type"::TestFunction,  1, Funct001_Name , TRUE);
        // Plage 100 … 199 : selon la table origine
        InitFunction(GetTableNo, "Function Type"::TestFunction,101, Funct101_Name , TRUE);
        InitFunction(GetTableNo, "Function Type"::TestFunction,102, Funct102_Name , FALSE); //IMH13.ST
        InitFunction(GetTableNo, "Function Type"::TestFunction,106, Funct106_Name , TRUE);
        InitFunction(GetTableNo, "Function Type"::TestFunction,110, Funct110_Name , FALSE); //IMH09.ST
        InitFunction(GetTableNo, "Function Type"::TestFunction,114, Funct114_Name , FALSE); //IMH11.ZW
      END;
      // Plage 200 : fonction communes
      ProcCommFct.LoadTestFunctionList(GetTableNo); //IMH02.ST
    END;

    PROCEDURE AssistFunction@1100281009(pFunctionNo@1100281000 : Integer);
    VAR
      lRecRef@1100281001 : RecordRef;
    BEGIN
      AssistMode := TRUE;
      TestFunction(pFunctionNo, '', lRecRef);
      AssistMode := FALSE;
    END;

    PROCEDURE TestFunction@1100281003(pFunctionNo@1100281000 : Integer;pParameters@1100281001 : Text[1024];pCurrRecRef@1100281002 : RecordRef) : Boolean;
    BEGIN
      IF NOT AssistMode THEN
        pCurrRecRef.SETTABLE(CurrRec);
      CASE pFunctionNo OF
        1 : EXIT(TrayLineExist(TRUE, pParameters));
        101 : EXIT(InterventionCeilingOverrun(CurrRec, pParameters, 0, 0));
        102 : EXIT(HasRemSpec(CurrRec)); //IMH13.ST
        106 : EXIT(EstimateOverrun(CurrRec, pParameters, 0, 0));
        110 : EXIT(TestControlsObj(CurrRec));  //IMH09.ST
        114 : EXIT(CheckLastInteractDate(pParameters));  //IMH11.ZW
        201 : IF NOT AssistMode THEN
                EXIT(AndFunction(pParameters, pCurrRecRef)); //IMH05.ST
      END;
      IF AssistMode THEN
        ProcCommFct.AssistTestFunction(GetTableNo, pFunctionNo, pParameters)
      ELSE
        EXIT(ProcCommFct.TestFunction(GetTableNo, pFunctionNo, pParameters)); //IMH02.ST
    END;

    PROCEDURE CheckParameters@1100281010(pFunctionNo@1100281000 : Integer;pParameter@1100281002 : Text[1024];VAR pErrorText@1100281001 : Text[250]) : Boolean;
    BEGIN
      //IMH04.zw
    END;

    PROCEDURE "-LIB--------------------------"@1100281018();
    BEGIN
    END;

    LOCAL PROCEDURE RetrieveDateField@1100281012(pText@1100281000 : Text[30];VAR pDate@1100281005 : Date) : Boolean;
    VAR
      lInt@1100281001 : Integer;
      lRecRef@1100281002 : RecordRef;
      lFieldRef@1100281003 : FieldRef;
      lDateTime@1100281004 : DateTime;
    BEGIN
      pDate := 0D;
      CASE TRUE OF
        pText = '', pText = '0' :
          pDate := WORKDATE;
        EVALUATE(lInt, pText) : BEGIN
          lRecRef.GETTABLE(CurrRec);
          lFieldRef := lRecRef.FIELD(lInt);
          IF NOT (UPPERCASE(FORMAT(lFieldRef.TYPE)) IN ['DATE', 'DATETIME']) THEN
            EXIT(FALSE);
          IF UPPERCASE(FORMAT(lFieldRef.CLASS)) = 'FLOWFIELD' THEN
            lFieldRef.CALCFIELD;
          CASE UPPERCASE(FORMAT(lFieldRef.TYPE)) OF
            'DATE' :     pDate := lFieldRef.VALUE;
            'DATETIME' : BEGIN
              lDateTime := lFieldRef.VALUE;
              pDate := DT2DATE(lDateTime);
            END;
          END;
        END;
        ELSE EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE "------------------------------"@1100281004();
    BEGIN
    END;

    LOCAL PROCEDURE TrayLineExist@1100281006(pUnclosed@1100281002 : Boolean;pParameters@1100281000 : Text[1024]) : Boolean;
    VAR
      lTrayLine@1100281001 : Record 50048;
      lParamNb@1100281003 : Integer;
      lTeamFilter@1100281004 : Text[250];
      lTaskFilter@1100281005 : Text[250];
    BEGIN
      IF AssistMode THEN BEGIN
        MESSAGE(Funct001_Assist);
        EXIT;
      END;
      lTrayLine.SETCURRENTKEY("Service No.", "Service Header No.");
      lTrayLine.SETRANGE("Service No.", CurrRec."Service No.");
      lTrayLine.SETRANGE("Service Header No.", CurrRec."No.");
      IF pUnclosed THEN
        lTrayLine.SETRANGE(Closed, FALSE);

      IF pParameters <> '' THEN BEGIN
        lParamNb := ProcCommFct.CountParameters(pParameters, ',');
        CASE lParamNb OF
          1 : // filtre corbeille uniquement
            lTeamFilter := pParameters;
          ELSE BEGIN
            lTeamFilter := SELECTSTR(1, pParameters);
            lTaskFilter := SELECTSTR(2, pParameters);
          END;
        END;
      END;

      IF lTeamFilter <> '' THEN
        lTrayLine.SETFILTER("Team Code", lTeamFilter);
      IF lTaskFilter <> '' THEN
        lTrayLine.SETFILTER("Task Code", lTaskFilter);
      EXIT(NOT lTrayLine.ISEMPTY);
    END;

    PROCEDURE InterventionCeilingOverrun@1100281007(pServHeader@1100281006 : Record 5900;pQuoteType@1100281001 : Text[1024];pAddExclVAT@1100281007 : Decimal;pAddInclVAT@1100281008 : Decimal) : Boolean;
    VAR
      lServIntervQuote@1100281000 : Record 50076;
      lServiceAmount@1100281002 : Record 50061;
      lTotalAmount@1100281003 : ARRAY [2] OF Decimal;
      lLineFound@1100281005 : Boolean;
      lCurrency@1100281009 : Record 4;
      lServiceIntervLine@1100281004 : Record 50075;
      lServiceIntervLineTmp@1100281010 : TEMPORARY Record 50075;
      lServiceMgtSetup@1100281011 : Record 5911;
      lProcessStatus@1100281012 : Record 50042;
      lDiffAmount@1000000000 : Decimal;
      lInclVAT@1000000001 : Text[30];
      lQuoteNb@1000000002 : Integer;
      lText@1000000003 : Text[1024];
    BEGIN
      IF AssistMode THEN BEGIN
        MESSAGE(Funct101_Assist);
        EXIT;
      END;
      // Attention cette fonction utilise pServHeader au lieu de CurrRec, appel dans intervention, devis

      lServiceAmount."Corporate No." := pServHeader."Corporate No.";
      lServiceAmount."Service Order Type" := pServHeader."Service Order Type";
      lServiceAmount."Amount Type" := lServiceAmount."Amount Type"::InterventionCeiling;
      lServiceAmount."Campaign No." := pServHeader."Campaign No.";
      lServiceAmount."Corporate Region Code" := pServHeader."Corporate Region Code";
      lServiceAmount.Requisitioner  := pServHeader.Requisitioner;
      lServiceAmount."Service Cause" := pServHeader."Service Cause";
      lServiceAmount.Urgent := pServHeader.Urgent;
      lServiceAmount."Occupier Nature" := pServHeader."Occupier Nature";
      lServiceAmount."Contract Form Code" := pServHeader."Contract Form Code";  //IMH13
      IF NOT lServiceAmount.RetrieveServAmount(lServiceAmount) THEN
        EXIT(FALSE);

      //<<IMH07
      //lServiceMgtSetup.GET;
      lServIntervQuote.SETRANGE("Service Header No.", pServHeader."No.");
      //lServIntervQuote.SETFILTER("Process Code", lServiceMgtSetup."IMH Validate Quote Process");
      //IF lServiceMgtSetup."IMH Validate Quote Status" <> 0 THEN
      //  lServIntervQuote.SETRANGE("Process Status No.", lServiceMgtSetup."IMH Validate Quote Status");
      //>>IMH07
      IF pQuoteType <> '' THEN
        lServIntervQuote.SETFILTER("Service Quote Type", pQuoteType);
      lServIntervQuote.SETRANGE(Active, TRUE);
      //lServIntervQuote.SETRANGE("Approval Status", lServIntervQuote."Approval Status"::Yes);  //IMH12 d‚sactiv‚
      //IF NOT lServIntervQuote.FINDSET(FALSE) THEN
      //  EXIT(FALSE);
      lCurrency.InitRoundingPrecision;
      lTotalAmount[1] := ROUND(pAddExclVAT, lCurrency."Amount Rounding Precision");
      lTotalAmount[2] := ROUND(pAddInclVAT, lCurrency."Amount Rounding Precision");
      //<<IMH08.ST ne plus d‚duire les franchises
      //lTotalAmount[1] -= pServHeader."Deductible Amount";
      //lTotalAmount[2] -= pServHeader."Deductible Amount";
      //>>IMH08.ST
      IF lServIntervQuote.FINDSET(FALSE) THEN
        REPEAT
          IF lServiceIntervLine.GET(lServIntervQuote."Service Header No.", lServIntervQuote."Intervention Line No.") THEN
            IF lServiceIntervLine."Intervention Status" <> lServiceIntervLine."Intervention Status"::Cancel THEN BEGIN
              lTotalAmount[1] += ROUND(lServIntervQuote."Amount Excl. VAT (LCY)", lCurrency."Amount Rounding Precision");
              lTotalAmount[2] += ROUND(lServIntervQuote."Amount Incl. VAT (LCY)", lCurrency."Amount Rounding Precision");
              lQuoteNb += 1;
            END;
        UNTIL lServIntervQuote.NEXT=0;

      IF lServiceAmount."Amount Incl. VAT" THEN BEGIN
        lDiffAmount := lTotalAmount[2] - lServiceAmount.Amount;
        lInclVAT := Funct101_Text5;
      END
      ELSE BEGIN
        lDiffAmount := lTotalAmount[1] - lServiceAmount.Amount;
        lInclVAT := Funct101_Text4;
      END;

      IF lDiffAmount <= 0 THEN
        EXIT(FALSE);

      //EXIT(lDiffAmount > 0);
      IF GUIALLOWED THEN BEGIN
        IF lQuoteNb > 1 THEN
          lText := STRSUBSTNO(Funct101_Text1, lServiceAmount.Amount)
        ELSE
          lText := STRSUBSTNO(Funct101_Text3, lServiceAmount.Amount);
        lText := lText + lInclVAT;
        IF lServiceAmount.Amount <> 0 THEN
          lText := lText + STRSUBSTNO(Funct101_Text2, (ROUND((lDiffAmount*100) / lServiceAmount.Amount, 1)));
        MESSAGE(lText);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE EstimateOverrun@1100281008(pServHeader@1100281006 : Record 5900;pQuoteType@1100281001 : Text[1024];pAddExclVAT@1100281007 : Decimal;pAddInclVAT@1100281008 : Decimal) : Boolean;
    VAR
      lServIntervQuote@1100281000 : Record 50076;
      lServiceAmount@1100281002 : Record 50061;
      lTotalAmount@1100281003 : ARRAY [2] OF Decimal;
      lLineFound@1100281005 : Boolean;
      lDiffAmount@1100281009 : ARRAY [2] OF Decimal;
      lText@1100281010 : Text[1024];
      lAmountToCheck@1100281011 : Decimal;
      lCurrency@1100281012 : Record 4;
      lQuoteNb@1100281004 : Integer;
      lServiceIntervLine@1000000000 : Record 50075;
    BEGIN
      //IMH06.ST
      IF AssistMode THEN BEGIN
        MESSAGE(Funct106_Assist);
        EXIT;
      END;
      // Attention cette fonction utilise pServHeader au lieu de CurrRec, appel dans intervention, devis

      IF pServHeader."Max. Est. Work Amt Excl. VAT" = 0 THEN BEGIN
        pServHeader.CALCFIELDS("Total Descr. Amount Excl. VAT");
        lAmountToCheck := pServHeader."Total Descr. Amount Excl. VAT";
      END
      ELSE
        lAmountToCheck := pServHeader."Max. Est. Work Amt Excl. VAT";

      IF lAmountToCheck = 0 THEN
        EXIT;

      lServIntervQuote.SETRANGE("Service Header No.", pServHeader."No.");
      IF pQuoteType <> '' THEN
        lServIntervQuote.SETFILTER("Service Quote Type", pQuoteType);
      lServIntervQuote.SETRANGE(Active, TRUE);
      //lServIntervQuote.SETRANGE("Approval Status", lServIntervQuote."Approval Status"::Yes); //IMH08.ST  //IMH12 d‚sactiv‚
      IF NOT lServIntervQuote.FINDSET(FALSE) THEN
        EXIT(FALSE);
      lCurrency.InitRoundingPrecision;
      lAmountToCheck := ROUND(lAmountToCheck, lCurrency."Amount Rounding Precision");
      lTotalAmount[1] := ROUND(pAddExclVAT, lCurrency."Amount Rounding Precision");
      lTotalAmount[2] := ROUND(pAddInclVAT, lCurrency."Amount Rounding Precision");
      REPEAT
        // IMH08.ST ne pas prendre les interventions annul‚es
        IF lServiceIntervLine.GET(lServIntervQuote."Service Header No.", lServIntervQuote."Intervention Line No.") THEN
          IF lServiceIntervLine."Intervention Status" <> lServiceIntervLine."Intervention Status"::Cancel THEN BEGIN
            lQuoteNb += 1;
            lTotalAmount[1] += ROUND(lServIntervQuote."Amount Excl. VAT (LCY)", lCurrency."Amount Rounding Precision");
            lTotalAmount[2] += ROUND(lServIntervQuote."Amount Incl. VAT (LCY)", lCurrency."Amount Rounding Precision");
          END;
      UNTIL lServIntervQuote.NEXT=0;

      lDiffAmount[1] := lTotalAmount[1] - lAmountToCheck;
      IF lDiffAmount[1] > 0 THEN BEGIN
        IF GUIALLOWED THEN BEGIN
          //<<IMH10
          IF lAmountToCheck = 0 THEN
            IF lQuoteNb > 1 THEN
              lText := STRSUBSTNO(Funct106_Text1, lAmountToCheck)
            ELSE
              lText := STRSUBSTNO(Funct106_Text3, lAmountToCheck);
          IF lAmountToCheck <> 0 THEN BEGIN
            IF lQuoteNb > 1 THEN
              lText := STRSUBSTNO(Funct106_Text5, (ROUND((lDiffAmount[1]*100) / lAmountToCheck, 1)), lAmountToCheck)
            ELSE
              lText := STRSUBSTNO(Funct106_Text4, (ROUND((lDiffAmount[1]*100) / lAmountToCheck, 1)), lAmountToCheck);
            //lText := lText + STRSUBSTNO(Funct106_Text2, (ROUND((lDiffAmount[1]*100) / lAmountToCheck, 1)));
          END;
          //<<IMH10
          MESSAGE(lText);
        END;
        EXIT(TRUE)
      END
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE AndFunction@1100281015(pParameters@1100281000 : Text[1024];pCurrRecRef@1100281001 : RecordRef) : Boolean;
    VAR
      lFunctionNo@1100281002 : Integer;
      lFunctionParam@1100281003 : Text[1024];
    BEGIN
      //IMH05.ST
      IF pParameters  = '' THEN
        EXIT(TRUE);
      REPEAT
        ProcCommFct.RetrieveFctParam(pParameters, lFunctionNo, lFunctionParam);
        IF NOT TestFunction(lFunctionNo, lFunctionParam, pCurrRecRef) THEN
          EXIT(FALSE);
      UNTIL pParameters = '';
      EXIT(TRUE);
    END;

    PROCEDURE TestControlsObj@1100281002(pCurrRec@1100281000 : Record 5900) : Boolean;
    VAR
      lControlObj@1100281002 : Record 50090;
      lIntervLine@1100281004 : Record 50075;
      lRandomObj@1100281005 : Integer;
      lRandomCtrl@1100281001 : Integer;
    BEGIN
      //IMH09.ST
      // Calcul des controles al‚atoires avec rendez-vous
      IF AssistMode THEN
        EXIT;
      WITH lIntervLine DO BEGIN
        SETRANGE("Service Header No.", pCurrRec."No.");
        SETRANGE("Quality Control", TRUE);
        SETRANGE("Quality Control Type", "Quality Control Type"::Random);
        SETFILTER("Expected Previsit Date", '<>%1', 0D);
        lRandomCtrl := COUNT;
      END;

      lControlObj.SETRANGE("Expert No.", pCurrRec."Contact No.");
      //<<IMH10 Correction
      lControlObj.SETRANGE("Lot Date", pCurrRec."Document Date");
      //lControlObj.SETRANGE("Lot Date", CREATEDATETIME(pCurrRec."Document Date", 0T), CREATEDATETIME(pCurrRec."Document Date"+1, 0T));
      //>>IMH10 Correction
      lControlObj.SETFILTER("Random Controls", '<>%1', 0);
      IF lControlObj.FINDSET THEN
        REPEAT
          lRandomObj += lControlObj."Random Controls";
        UNTIL lControlObj.NEXT=0;

      EXIT(lRandomCtrl >= lRandomObj);
    END;

    PROCEDURE CheckLastInteractDate@1000000000(pParameters@1100281000 : Text[1024]) : Boolean;
    VAR
      lInteracLogEntry@1100281013 : Record 5065;
      lInteractionTemplate@1100281019 : Record 5064;
      lInteractionTemplateTemp@1100281018 : TEMPORARY Record 5064;
      lDate1@1100281001 : Date;
      lDate2@1100281002 : Date;
      lDt@1100281014 : DateTime;
      lText@1100281003 : Text[30];
      lDirection@1100281006 : 'MoreThan,LessThan,Equal,MoreOrEqual,LessOrEqual';
      lParamNb@1100281005 : Integer;
      lDelay@1100281004 : Integer;
      lDateDiff@1100281007 : Integer;
      lRecRef@1100281008 : RecordRef;
      lFieldRef1@1100281009 : FieldRef;
      lFieldRef2@1100281012 : FieldRef;
      lFieldNo@1100281010 : Integer;
      lFilterValue@1100281011 : Text[250];
    BEGIN
      //IMH11.ZW
      //ParamŠtres : D‚lai,Nø champ Date,Nø champ modŠle 1,Filtre champ 1,[Nø champ modŠle 2],[Filtre champ 2],[Op‚rateur : >]
      IF AssistMode THEN BEGIN
        MESSAGE(Funct114_Assist);
        EXIT;
      END;

      IF pParameters = '' THEN
        EXIT(FALSE);


      lParamNb := ProcCommFct.CountParameters(pParameters, ',');
      IF (lParamNb < 4) OR (lParamNb > 7) THEN
        ProcCommFct.ErrorNbExpectedParam(Funct114_Name, lParamNb);

      lText := SELECTSTR(1, pParameters);
      IF (lText = '') OR (lText = '0') THEN
        lDelay := 0
      ELSE BEGIN
        IF NOT EVALUATE(lDelay, lText) THEN
          EXIT(FALSE);
      END;

      lText := SELECTSTR(2, pParameters);
      IF NOT RetrieveDateField(lText, lDate1) THEN
        EXIT(FALSE);


      lRecRef.OPEN(DATABASE::"Interaction Template");

      lText := SELECTSTR(3, pParameters);
      IF (lText <> '') AND (lText <> '0') THEN BEGIN
        IF NOT EVALUATE(lFieldNo, lText) THEN
          EXIT(FALSE);
        lFieldRef1 := lRecRef.FIELD(lFieldNo);

        lFilterValue := SELECTSTR(4, pParameters);
        lFieldRef1.SETFILTER(lFilterValue);
      END;

      // ParamŠtres optionnels
      lDirection := 0; // par d‚faut
      CASE lParamNb OF
        5 : BEGIN
          lText := SELECTSTR(5, pParameters);
          IF lText <> '' THEN
            IF NOT ProcCommFct.GetDirection(lText, lDirection) THEN
              ProcCommFct.ErrorIncompatibleParam(Funct114_Name, lText);
        END;
        6 : BEGIN
          lText := SELECTSTR(5, pParameters);
          IF (lText <> '') AND (lText <> '0') THEN BEGIN
            IF NOT EVALUATE(lFieldNo, lText) THEN
              EXIT(FALSE);
            lFieldRef2 := lRecRef.FIELD(lFieldNo);

            lFilterValue := SELECTSTR(6, pParameters);
            IF lFilterValue <> '' THEN
              lFieldRef2.SETFILTER(lFilterValue);
          END;
        END;
        7 : BEGIN
          lText := SELECTSTR(5, pParameters);
          IF (lText <> '') AND (lText <> '0') THEN BEGIN
            IF NOT EVALUATE(lFieldNo, lText) THEN
              EXIT(FALSE);
            lFieldRef2 := lRecRef.FIELD(lFieldNo);

            lFilterValue := SELECTSTR(6, pParameters);
            IF lFilterValue <> '' THEN
              lFieldRef2.SETFILTER(lFilterValue);
          END;

          lText := SELECTSTR(7, pParameters);
          IF lText <> '' THEN
            IF NOT ProcCommFct.GetDirection(lText, lDirection) THEN
              ProcCommFct.ErrorIncompatibleParam(Funct114_Name, lText);
        END;
      END;

      lInteractionTemplate.SETVIEW(lRecRef.GETVIEW);
      IF lInteractionTemplate.FINDSET THEN
        REPEAT
          lInteractionTemplateTemp := lInteractionTemplate;
          lInteractionTemplateTemp.INSERT;
        UNTIL lInteractionTemplate.NEXT = 0;

      lInteracLogEntry.SETCURRENTKEY("Service No.", "Service Header No.", "Intervention Line No.", Date, Postponed);
      lInteracLogEntry.SETRANGE("Service No.", CurrRec."Service No.");
      lInteracLogEntry.SETRANGE("Service Header No.", CurrRec."No.");
      IF lInteracLogEntry.FINDSET THEN BEGIN
        lDt := lInteracLogEntry."Creation Date";
        REPEAT
          IF lInteractionTemplateTemp.GET(lInteracLogEntry."Interaction Template Code") THEN BEGIN
            EXIT(FALSE);
          END;
        UNTIL lInteracLogEntry.NEXT = 0;
      END;

      IF lDate1 = 0D THEN
        EXIT(FALSE);

      lDate2 := WORKDATE;
      lDateDiff := lDate2 - lDate1;

      CASE lDirection OF
        lDirection::MoreThan :   EXIT(lDateDiff > lDelay);
        lDirection::LessThan :   EXIT(lDateDiff < lDelay);
        lDirection::Equal    :   EXIT(lDateDiff = lDelay);
        lDirection::MoreOrEqual : EXIT(lDateDiff >= lDelay);
        lDirection::LessOrEqual : EXIT(lDateDiff <= lDelay);
      END; // CASE
    END;

    PROCEDURE HasRemSpec@1100281005(pCurrRec@1100281000 : Record 5900) : Boolean;
    VAR
      lServHdrInfo@1100281001 : Codeunit 50062;
    BEGIN
      //IMH14.ST
      IF AssistMode THEN
        EXIT;
      EXIT(lServHdrInfo.CalcNoOfSpec(pCurrRec, TRUE) <> 0);
    END;

    BEGIN
    {
      /** @r IMH14 @d 27/05/14 @a ISAT.ST @v IMH6.01.P011 @s New Provider Search @h 5141 @c Ajout fonction HasRemSpec */
      /** @r IMH13 @d 31/12/13 @a ISAT.ZW @v IMH6.01.4843 @h 4843 @s Gestion plafond intervention
          @c Ajout champ 20 code formule dans la gestion */
      /** @r IMH12 @d 04/01/12 @a ISAT.ZW @v IMH6.01.333 @s NEP00012 @h 4210 @c Modification */
      /** @r IMH11 @d 23/08/12 @a ISAT.ZW @v IMH6.01.226 @s Version 1.4 @h 1900 @c Ajout fonction CheckLastInteractDate */
      /** @r IMH10 @d 20/08/12 @a ISAT.ZW @v IMH6.01.224 @s NEP000004 @h 3703 @c Message D‚passe estimation devis */
      /** @r IMH09 @d 30/05/12 @a ISAT.ST @v IMH6.01.105 @s Controle qualit‚ @c Ajout TestControlObjective */
      /** @r IMH08 @d 19/01/12 @a ISAT.ST @v IMH6.01.102 @s Gestion des statuts @c Ajout filtre tache sur fonction 1 */
      /** @r IMH07 @d 06/10/11 @a ISAT.ZW @v IMH6.01.102 @s Gestion des statuts @c mantis 1682 @c COntrole Plafond de d‚l‚gation */
      /** @r IMH06 @d 10/08/11 @a ISAT.ST @v IMH6.01.102 @s Gestion des statuts @c Ajout arrondi devise DS sur les controles de montant */
      /** @r IMH05 @d 04/07/11 @a ISAT.ST @v IMH6.01.102 @s Gestion des statuts @c Ajout AndFunction */
      /** @r IMH04 @d 05/05/11 @a ISAT.ZW @v IMH6.01.102 @s Gestion des statuts
          @c Ajout fonction CheckParameters */
      /** @r IMH03 @d 02/04/11 @a ISAT.ST @v IMH6.01.102 @s Gestion des statuts
          @c Ajout InterventionCeilingOverrun, EstimateOverrun */
      /** @r IMH02 @d 17/03/11 @a ISAT.ST @v IMH6.01.102 @s Gestion des statuts
          @c Appel fonctions communes */
      /** @r IMH01 @d 27/12/10 @a ISAT.ST @v IMH6.01.102 @s Gestion des statuts @c Cr‚ation objet */
    }
    END.
  }
}