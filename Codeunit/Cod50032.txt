OBJECT Codeunit 50032 Proc. Intervention Req. Funct.
{
  OBJECT-PROPERTIES
  {
    Date=22/11/13;
    Time=15:14:32;
    Modified=Yes;
    Version List=IMH6.01,SysAgDarva,MATMUT01;
  }
  PROPERTIES
  {
    OnRun=VAR
            lDT1@1100281000 : DateTime;
            lDT2@1100281001 : DateTime;
            lDelay@1100281002 : Integer;
          BEGIN
            lDT1 := CURRENTDATETIME;
            SLEEP(500);
            lDT2 := CURRENTDATETIME;
            lDelay := lDT2 - lDT1;
            MESSAGE(FORMAT(lDelay));
          END;

  }
  CODE
  {
    VAR
      ProcFunction@1100281000 : Record 50085;
      Text001@1100281013 : TextConst 'ENU=Field No. %1 is not a date datatype.;FRA=Le champ %1 n''est pas du type date.';
      Text003@1100281016 : TextConst 'ENU=Parameter %1 is not compatible.;FRA=Le paramŠtre %1 n''est pas compatible.';
      Funct001_Name@1100281001 : TextConst 'ENU=Tray line activities exists;FRA=Activit‚s corbeilles en cours';
      Funct001_Assist@1100281002 : TextConst 'ENU=Team code filter (unmandatory);FRA=Filtre code corbeille (non obligatoire)';
      AssistMode@1100281003 : Boolean;
      CurrRec@1100281004 : Record 50075;
      Funct101_Name@1100281006 : TextConst 'ENU=Intervention Ceiling Overrun;FRA=D‚passement plafond d''intervention';
      Funct101_Assist@1100281005 : TextConst 'ENU=Quote type filter;FRA=Filtre type devis';
      Funct102_Name@1100281008 : TextConst 'ENU=Next meeting date expired;FRA=Date de rendez-vous expir‚e';
      Funct103_Name@1100281007 : TextConst 'ENU=Next appointment date expired;FRA=Date de prochain contr“le expir‚e';
      Funct104_Name_old@1100281010 : TextConst 'ENU=Delay create date/expected previsit date more than;FRA=D‚lai date cr‚ation/pr‚visite pr‚visionnelle sup‚rieur …';
      Funct104_Assist_old@1100281009 : TextConst 'ENU=Delay (days);FRA=D‚lai (en jours)';
      Funct104_Name@1100281011 : TextConst 'ENU=Delay between dates;FRA=D‚lai entre deux dates';
      Funct104_Assist@1100281012 : TextConst 'ENU=Date 1,Date 2,[Delay (days)],[Compare : >];FRA=Date 1,Date 2,[D‚lai (en jours)],[Op‚rateur : >]';
      ProcCommFct@1100281017 : Codeunit 50049;
      Funct105_Name@1100281018 : TextConst 'ENU=Provider available;FRA=Prestataire disponible';
      Funct106_Name@1100281015 : TextConst 'ENU=Estimate overrun;FRA=D‚passement estimation';
      Funct106_Assist@1100281014 : TextConst 'ENU=Quote type filter;FRA=Filtre type devis';
      Funct107_Name@1100281020 : TextConst 'ENU=Delay between dates;FRA=D‚lai entre deux dates/heures';
      Funct107_Assist@1100281019 : TextConst 'ENU=Date 1,Date 2,[Delay (days)],[Compare : >];FRA=Date 1[+Heure 1],Date 2[+Heure 2],[D‚lai (en heure)],[Op‚rateur : >]';
      Funct108_Name@1100281021 : TextConst 'ENU=Provider inavailable;FRA=Prestataire indisponible';
      Funct120_Name@1000000000 : TextConst 'ENU=Check Minutes to DARVA;FRA=V‚rification PV pour DARVA';
      Funct120_Assist@1100281022 : TextConst 'ENU="Function return value (0 = false, 1 = true),Show missing informations message (0 = false, 1 = true)";FRA="Valeur de retour de la fonction (0 = faux, 1 = vrai),Affichage de message sur les infos manquantes (0 = faux, 1 = vrai)"';

    LOCAL PROCEDURE GetTableNo@1100281000() : Integer;
    BEGIN
      EXIT(DATABASE::"Service Intervention Line");
    END;

    PROCEDURE LoadFunctionList@1100281001();
    VAR
      lProcFunction@1100281000 : Record 50085;
    BEGIN
      // Source Table, Type, nø de la fonction, Description, ParamŠtre o/n
      WITH lProcFunction DO BEGIN
        // Plage 1 … 99 : commun DPS
        InitFunction(GetTableNo, "Function Type"::TestFunction,   1, Funct001_Name , TRUE);
        // Plage 100 … 199 : selon la table origine
        InitFunction(GetTableNo, "Function Type"::TestFunction, 101, Funct101_Name , TRUE);
      //<<IMH05.ST
      //  InitFunction(GetTableNo, "Function Type"::TestFunction, 102, Funct102_Name , FALSE);
      //  InitFunction(GetTableNo, "Function Type"::TestFunction, 103, Funct103_Name , FALSE);
        IF GET(GetTableNo, "Function Type"::TestFunction, 102) THEN
          DELETE(TRUE);
        IF GET(GetTableNo, "Function Type"::TestFunction, 103) THEN
          DELETE(TRUE);
      //>>IMH05.ST
        InitFunction(GetTableNo, "Function Type"::TestFunction, 104, Funct104_Name , TRUE);
        InitFunction(GetTableNo, "Function Type"::TestFunction, 105, Funct105_Name , FALSE);
        InitFunction(GetTableNo, "Function Type"::TestFunction, 106, Funct106_Name , TRUE); //IMH05.ST
        InitFunction(GetTableNo, "Function Type"::TestFunction, 107, Funct107_Name , TRUE); //IMH07.ST
        InitFunction(GetTableNo, "Function Type"::TestFunction, 108, Funct108_Name , FALSE);//IMH08.zw
        //<<IMH10.PC
        InitFunction(GetTableNo, "Function Type"::TestFunction, 120, Funct120_Name , TRUE);
        //>>IMH10.PC
      END;
      // Plage 200 : fonction communes
      ProcCommFct.LoadTestFunctionList(GetTableNo); //IMH04.ST
    END;

    PROCEDURE AssistFunction@1100281009(pFunctionNo@1100281000 : Integer);
    VAR
      lRecRef@1100281001 : RecordRef;
    BEGIN
      AssistMode := TRUE;
      TestFunction(pFunctionNo, '', lRecRef);
      AssistMode := FALSE;
    END;

    PROCEDURE TestFunction@1100281003(pFunctionNo@1100281000 : Integer;pParameters@1100281001 : Text[1024];pCurrRecRef@1100281002 : RecordRef) : Boolean;
    BEGIN
      IF NOT AssistMode THEN
        pCurrRecRef.SETTABLE(CurrRec);
      CASE pFunctionNo OF
        1 : EXIT(TrayLineExist(TRUE, pParameters));
        101 : EXIT(InterventionCeilingOverrun(pParameters));
        102 : EXIT(NextMeetingDateExpired);
        103 : EXIT(NextControlDateExpired);
        104 : EXIT(CheckDelayBetweenDates(pParameters));
        105 : EXIT(NOT ProviderNoAvailable);
        106 : EXIT(EstimateOverrun(pParameters)); //IMH05.ST
        107 : EXIT(CheckDelayBetweenDates2(pParameters)); //IMH07.ST
        108 : EXIT(ProviderNoAvailable); //IMH108
        //<<IMH10.PC
        120 : EXIT(IsNotOkDARVAToMinutes(pParameters));
        //>>IMH10.PC
        201 : IF NOT AssistMode THEN
                EXIT(AndFunction(pParameters, pCurrRecRef)); //IMH09.ST
      END;
      IF AssistMode THEN
        ProcCommFct.AssistTestFunction(GetTableNo, pFunctionNo, pParameters)
      ELSE
        EXIT(ProcCommFct.TestFunction(GetTableNo, pFunctionNo, pParameters)); //IMH04.ST
    END;

    PROCEDURE CheckParameters@1100281014(pFunctionNo@1100281000 : Integer;pParameter@1100281002 : Text[1024];VAR pErrorText@1100281001 : Text[250]) : Boolean;
    BEGIN
      //IMH04.zw
    END;

    LOCAL PROCEDURE "--LIB-------------------------"@1100281013();
    BEGIN
    END;

    LOCAL PROCEDURE RetrieveDateField@1100281012(pText@1100281000 : Text[30];VAR pDate@1100281005 : Date) : Boolean;
    VAR
      lInt@1100281001 : Integer;
      lRecRef@1100281002 : RecordRef;
      lFieldRef@1100281003 : FieldRef;
      lDateTime@1100281004 : DateTime;
    BEGIN
      pDate := 0D;
      CASE TRUE OF
        pText = '', pText = '0' :
          pDate := WORKDATE;
        EVALUATE(lInt, pText) : BEGIN
          lRecRef.GETTABLE(CurrRec);
          lFieldRef := lRecRef.FIELD(lInt);
          IF NOT (UPPERCASE(FORMAT(lFieldRef.TYPE)) IN ['DATE', 'DATETIME']) THEN
            EXIT(FALSE);
          IF UPPERCASE(FORMAT(lFieldRef.CLASS)) = 'FLOWFIELD' THEN
            lFieldRef.CALCFIELD;
          CASE UPPERCASE(FORMAT(lFieldRef.TYPE)) OF
            'DATE' :     pDate := lFieldRef.VALUE;
            'DATETIME' : BEGIN
              lDateTime := lFieldRef.VALUE;
              pDate := DT2DATE(lDateTime);
            END;
          END;
        END;
        ELSE EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE RetrieveDateTimeField@1100281018(pText@1100281000 : Text[80];VAR pDateTime@1100281006 : DateTime) : Boolean;
    VAR
      lInt@1100281001 : Integer;
      lInt2@1100281005 : Integer;
      lRecRef@1100281002 : RecordRef;
      lFieldRef@1100281003 : FieldRef;
      lDate@1100281007 : Date;
      lTime@1100281008 : Time;
      lTimeFound@1100281010 : Boolean;
      lPos@1100281009 : Integer;
      lText@1100281004 : Text[1024];
    BEGIN
      //IMH07.ST
      pDateTime := 0DT;
      IF pText IN ['','0'] THEN BEGIN
        pDateTime := CREATEDATETIME(WORKDATE, TIME);
        EXIT(TRUE);
      END;
      lPos := STRPOS(pText, '+');
      IF lPos = 0 THEN BEGIN
        IF NOT EVALUATE(lInt, pText) THEN
          EXIT(FALSE);
        lRecRef.GETTABLE(CurrRec);
        lFieldRef := lRecRef.FIELD(lInt);
        IF NOT (UPPERCASE(FORMAT(lFieldRef.TYPE)) IN ['DATE', 'DATETIME']) THEN
          EXIT(FALSE);
        IF UPPERCASE(FORMAT(lFieldRef.CLASS)) = 'FLOWFIELD' THEN
          lFieldRef.CALCFIELD;
        CASE UPPERCASE(FORMAT(lFieldRef.TYPE)) OF
          'DATE' : BEGIN
            lDate := lFieldRef.VALUE;
            pDateTime := CREATEDATETIME(lDate, lTime);
          END;
          'DATETIME' :
            pDateTime := lFieldRef.VALUE;
        END;
      END
      ELSE BEGIN
        lText := COPYSTR(pText,1,lPos-1);
        IF NOT RetrieveDateField(lText,lDate) THEN
          EXIT(FALSE);
        lText := COPYSTR(pText, lPos+1);
        IF NOT (lText IN ['','0']) THEN
          IF EVALUATE(lInt, lText) THEN BEGIN
            lRecRef.GETTABLE(CurrRec);
            lFieldRef := lRecRef.FIELD(lInt);
            IF UPPERCASE(FORMAT(lFieldRef.TYPE)) <> 'TIME' THEN
              EXIT(FALSE);
            IF UPPERCASE(FORMAT(lFieldRef.CLASS)) = 'FLOWFIELD' THEN
              lFieldRef.CALCFIELD;
            lTime := lFieldRef.VALUE;
          END;
        pDateTime := CREATEDATETIME(lDate, lTime);
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE "------------------------------"@1100281004();
    BEGIN
    END;

    LOCAL PROCEDURE TrayLineExist@1100281006(pUnclosed@1100281002 : Boolean;pParameters@1100281000 : Text[1024]) : Boolean;
    VAR
      lTrayLine@1100281001 : Record 50048;
    BEGIN
      IF AssistMode THEN BEGIN
        MESSAGE(Funct001_Assist);
        EXIT;
      END;
      lTrayLine.SETCURRENTKEY("Service No.", "Service Header No.", "Intervention Line No.");
      lTrayLine.SETRANGE("Service No.", CurrRec."Service No.");
      lTrayLine.SETRANGE("Service Header No.", CurrRec."Service Header No.");
      lTrayLine.SETRANGE("Intervention Line No.", CurrRec."Line No.");
      IF pUnclosed THEN
        lTrayLine.SETRANGE(Closed, FALSE);
      IF pParameters <> '' THEN
        lTrayLine.SETFILTER("Team Code", pParameters);

      EXIT(NOT lTrayLine.ISEMPTY);
    END;

    PROCEDURE InterventionCeilingOverrun@1100281007(pQuoteType@1100281001 : Text[1024]) : Boolean;
    VAR
      lServHeader@1100281004 : Record 5900;
      lServHeaderProcFct@1100281006 : Codeunit 50031;
    BEGIN
      IF AssistMode THEN BEGIN
        MESSAGE(Funct101_Assist);
        EXIT;
      END;

      IF NOT lServHeader.GET(lServHeader."Document Type"::Invoice, CurrRec."Service Header No.") THEN
        CLEAR(lServHeader);

      EXIT(lServHeaderProcFct.InterventionCeilingOverrun(lServHeader, pQuoteType, 0, 0)); //IMH05.ST
    END;

    PROCEDURE NextMeetingDateExpired@1100281002() : Boolean;
    BEGIN
      //IMH02.ST
      IF AssistMode THEN
        EXIT;
      EXIT(CurrRec."Meeting Date" < WORKDATE);
    END;

    PROCEDURE NextControlDateExpired@1100281005() : Boolean;
    BEGIN
      //IMH02.ST
      IF AssistMode THEN
        EXIT;
      EXIT(CurrRec."Next Appointment Date" < WORKDATE);
    END;

    PROCEDURE ExpectedPrevistDelay@1100281010(pDelay@1100281000 : Text[1024]) : Boolean;
    VAR
      lServHeader@1100281001 : Record 5900;
      lFromDate@1100281002 : Date;
      lDelay@1100281003 : Integer;
    BEGIN
      //IMH03.ST
      IF AssistMode THEN BEGIN
        MESSAGE(Funct104_Assist_old);
        EXIT;
      END;
      IF pDelay = '' THEN
        EXIT(FALSE);
      EVALUATE(lDelay, pDelay);
      IF (lDelay = 0) OR (CurrRec."Expected Previsit Date" = 0D) THEN
        EXIT(FALSE);
      IF NOT lServHeader.GET(lServHeader."Document Type"::Invoice, CurrRec."Service Header No.") THEN
        EXIT(FALSE);

      lFromDate := DT2DATE(lServHeader."Creation Date");
      EXIT(CurrRec."Expected Previsit Date" - lFromDate >= lDelay);
    END;

    PROCEDURE CheckDelayBetweenDates@1100281008(pParameters@1100281000 : Text[1024]) : Boolean;
    VAR
      lDate1@1100281001 : Date;
      lDate2@1100281002 : Date;
      lText@1100281003 : Text[30];
      lDirection@1100281006 : 'MoreThan,LessThan,Equal,MoreOrEqual,LessOrEqual';
      lParamNb@1100281005 : Integer;
      lDelay@1100281004 : Integer;
      lDateDiff@1100281007 : Integer;
    BEGIN
      //IMH03.ST
      IF AssistMode THEN BEGIN
        MESSAGE(Funct104_Assist);
        EXIT;
      END;

      IF pParameters = '' THEN
        EXIT(FALSE);

      lParamNb := ProcCommFct.CountParameters(pParameters, ',');
      IF (lParamNb < 2) OR (lParamNb > 4) THEN
        ProcCommFct.ErrorNbExpectedParam(Funct104_Name, lParamNb);
      lText := SELECTSTR(1, pParameters);
      IF NOT RetrieveDateField(lText, lDate1) THEN
        EXIT(FALSE);
      lText := SELECTSTR(2, pParameters);
      IF NOT RetrieveDateField(lText, lDate2) THEN
        EXIT(FALSE);

      IF (lDate1 = 0D) OR (lDate2 = 0D) THEN
        EXIT(FALSE);

      // ParamŠtres optionnels
      lDelay := 0;
      lDirection := 0; // par d‚faut
      CASE lParamNb OF
        3 : BEGIN
          lText := SELECTSTR(3, pParameters);
          IF lText <> '' THEN
            IF NOT EVALUATE(lDelay, lText) THEN
              IF NOT ProcCommFct.GetDirection(lText, lDirection) THEN
                ProcCommFct.ErrorIncompatibleParam(Funct104_Name, lText);
        END;
        4 : BEGIN
          lText := SELECTSTR(3, pParameters);
          IF lText <> '' THEN
            EVALUATE(lDelay, lText);
          lText := SELECTSTR(4, pParameters);
          IF lText <> '' THEN
            IF NOT ProcCommFct.GetDirection(lText, lDirection) THEN
              ProcCommFct.ErrorIncompatibleParam(Funct104_Name, lText);
        END;
      END;

      lDateDiff := lDate1 - lDate2;

      CASE lDirection OF
        lDirection::MoreThan :   EXIT(lDateDiff > lDelay);
        lDirection::LessThan :   EXIT(lDateDiff < lDelay);
        lDirection::Equal    :   EXIT(lDateDiff = lDelay);
        lDirection::MoreOrEqual : EXIT(lDateDiff >= lDelay);
        lDirection::LessOrEqual : EXIT(lDateDiff <= lDelay);
      END; // CASE
    END;

    PROCEDURE ProviderNoAvailable@1100281015() : Boolean;
    VAR
      lProviderCal@1100281001 : Codeunit 50007;
      lDate@1100281002 : Date;
      lIsConstrainte@1100281000 : Boolean;
    BEGIN
      //IMH04.ST
      //IMH08 presta non disponible
      EXIT(
        NOT lProviderCal.IsProviderAvailable(
          CurrRec."Provider No.", CurrRec."Main Speciality", CurrRec.Urgent,
          WORKDATE, WORKDATE, lDate,lIsConstrainte));
    END;

    PROCEDURE EstimateOverrun@1100281011(pQuoteType@1100281001 : Text[1024]) : Boolean;
    VAR
      lServHeaderProcFct@1100281000 : Codeunit 50031;
      lServHeader@1100281002 : Record 5900;
    BEGIN
      //IMH05.ST
      IF AssistMode THEN BEGIN
        MESSAGE(Funct106_Assist);
        EXIT;
      END;

      IF NOT lServHeader.GET(lServHeader."Document Type"::Invoice, CurrRec."Service Header No.") THEN
        CLEAR(lServHeader);

      EXIT(lServHeaderProcFct.EstimateOverrun(lServHeader, pQuoteType, 0, 0));
    END;

    PROCEDURE CheckDelayBetweenDates2@1100281016(pParameters@1100281000 : Text[1024]) : Boolean;
    VAR
      lDateTime1@1100281008 : DateTime;
      lDateTime2@1100281009 : DateTime;
      lText@1100281003 : Text[30];
      lDirection@1100281006 : 'MoreThan,LessThan,Equal,MoreOrEqual,LessOrEqual';
      lParamNb@1100281001 : Integer;
      lDelay@1100281004 : Decimal;
      lDateDiff@1100281007 : Decimal;
    BEGIN
      //IMH03.ST
      IF AssistMode THEN BEGIN
        MESSAGE(Funct107_Assist);
        EXIT;
      END;

      IF pParameters = '' THEN
        EXIT(FALSE);

      lParamNb := ProcCommFct.CountParameters(pParameters, ',');
      IF (lParamNb < 2) OR (lParamNb > 4) THEN
        ProcCommFct.ErrorNbExpectedParam(Funct107_Name, lParamNb);
      // Recup datetime ou date/heure

      lText := SELECTSTR(1, pParameters);
      IF NOT RetrieveDateTimeField(lText, lDateTime1) THEN
        EXIT(FALSE);

      lText := SELECTSTR(2, pParameters);
      IF NOT RetrieveDateTimeField(lText, lDateTime2) THEN
        EXIT(FALSE);

      IF (lDateTime1 = 0DT) OR (lDateTime2 = 0DT) THEN
        EXIT(FALSE);

      // ParamŠtres optionnels
      lDelay := 0;
      lDirection := 0; // par d‚faut
      CASE lParamNb OF
        3 : BEGIN
          lText := SELECTSTR(3, pParameters);
          IF lText <> '' THEN
            IF NOT EVALUATE(lDelay, lText) THEN
              IF NOT ProcCommFct.GetDirection(lText, lDirection) THEN
                ProcCommFct.ErrorIncompatibleParam(Funct104_Name, lText);
        END;
        4 : BEGIN
          lText := SELECTSTR(3, pParameters);
          IF lText <> '' THEN
            EVALUATE(lDelay, lText);
          lText := SELECTSTR(4, pParameters);
          IF lText <> '' THEN
            IF NOT ProcCommFct.GetDirection(lText, lDirection) THEN
              ProcCommFct.ErrorIncompatibleParam(Funct104_Name, lText);
        END;
      END;

      lDateDiff := (lDateTime1 - lDateTime2)/3600000; // Conversion en heure

      CASE lDirection OF
        lDirection::MoreThan : EXIT(lDateDiff > lDelay);
        lDirection::LessThan : EXIT(lDateDiff < lDelay);
        lDirection::Equal : EXIT(lDateDiff = lDelay);
        lDirection::MoreOrEqual : EXIT(lDateDiff >= lDelay);
        lDirection::LessOrEqual : EXIT(lDateDiff <= lDelay);
      END; // CASE
    END;

    PROCEDURE AndFunction@1100281017(pParameters@1100281000 : Text[1024];pCurrRecRef@1100281001 : RecordRef) : Boolean;
    VAR
      lFunctionNo@1100281002 : Integer;
      lFunctionParam@1100281003 : Text[1024];
    BEGIN
      //IMH09.ST
      IF pParameters  = '' THEN
        EXIT(TRUE);
      REPEAT
        ProcCommFct.RetrieveFctParam(pParameters, lFunctionNo, lFunctionParam);
        IF NOT TestFunction(lFunctionNo, lFunctionParam, pCurrRecRef) THEN
          EXIT(FALSE);
      UNTIL pParameters = '';
      EXIT(TRUE);
    END;

    PROCEDURE IsNotOkDARVAToMinutes@1000000000(pParameters@1000000002 : Text[1024]) : Boolean;
    VAR
      lServiceHeader@1000000000 : Record 5900;
      lInterfaceReference@1100281001 : Record 50164;
      lServiceInterventionLine@1100281006 : Record 50075;
      lDARVASetup@1100281000 : Record 50126;
      lDARVADTStorage@1100281004 : Record 50124;
      lInteractionTemplate@1100281002 : Record 5064;
      lCustomer@1100281003 : Record 18;
      lProvider@1000000009 : Record 50000;
      lDocumentAttachment@1000000020 : Record 50021;
      lLastStorageEntryNo@1100281005 : Integer;
      lTextBuffer@1000000001 : Text[1024];
      lText001@1000000003 : TextConst 'ENU=DARVA Setup empty : %1;FRA=ParamŠtre DARVA non fait : %1';
      lParentTagEntryNo@1000000008 : Integer;
      lParamNb@1000000017 : Integer;
      lShowMessage@1000000016 : Boolean;
      lReturnValue@1000000015 : Boolean;
      lText002@1000000014 : TextConst 'ENU=SDR64 not send;FRA="Un SDR64 n''a pas ‚t‚ pr‚alablement ‚mis pour ce Prestataire pour cette mission. "';
      lText003@1000000013 : TextConst 'ENU=SDR64 return;FRA=retour SDR64';
      lText004@1000000012 : TextConst 'ENU=DT datas empty;FRA=donn‚es DT';
      lText005@1000000011 : TextConst 'ENU=DT data %1 empty;FRA=donn‚e DT %1';
      lText006@1000000010 : TextConst 'ENU=provider;FRA=prestataire';
      lText007@1000000007 : TextConst 'ENU=provider address;FRA=adresse prestataire';
      lText008@1000000006 : TextConst 'ENU=fusion reference;FRA=r‚f‚rence fusion';
      lText009@1000000005 : TextConst 'ENU=registration;FRA=SIRET';
      lText010@1000000004 : TextConst 'ENU=DRT send is impossible because %1 missing;FRA="L''‚mission de la DRT est impossible : la donn‚e %1 est manquante "';
      lText011@1000000019 : TextConst 'ENU=VAT registration;FRA=TVA intracom.';
      lText012@1000000021 : TextConst 'ENU=Any invoice linked;FRA=facture associ‚e';
      lText100@1000000018 : TextConst 'ENU=Service header %1 do not exists;FRA=Impossible de trouver la ligne produit %1';
      lExitLoop@1100281007 : Boolean;
    BEGIN
      // IMH10.PC
      // le premier paramŠtre (0 = faux, 1= vrai) indique ce que l'on veut tester : est-ce que la fonction retourne la valeur demand‚e
      // le second indique si on veut du d‚tail sur ce qui manque
      // v‚rifciation en vue de la DRT.
      // V‚rification que le SDR64 a bien ‚t‚ envoy‚
      // Enregistrement retour SDR64 enregistr‚ (MATMUT & AMF) Numero partie
      // V‚rification des balises en reception DT (MATMUT & AMF)

      IF AssistMode THEN BEGIN
        MESSAGE(Funct120_Assist);
        EXIT;
      END;

      IF pParameters = '' THEN BEGIN
        ProcCommFct.ErrorNbExpectedParam(Funct120_Name, lParamNb);
      END;

      lParamNb := ProcCommFct.CountParameters(pParameters, ',');
      IF (lParamNb <> 2) THEN BEGIN
        ProcCommFct.ErrorNbExpectedParam(Funct120_Name, lParamNb);
      END;

      IF NOT EVALUATE(lReturnValue,SELECTSTR(1,pParameters)) THEN BEGIN
        ProcCommFct.ErrorIncompatibleParam(Funct120_Assist,pParameters);
      END;

      IF NOT EVALUATE(lShowMessage,SELECTSTR(1,pParameters)) THEN BEGIN
        ProcCommFct.ErrorIncompatibleParam(Funct120_Assist,pParameters);
      END;

      IF NOT lServiceHeader.GET(lServiceHeader."Document Type"::Invoice,CurrRec."Service Header No.") THEN BEGIN
        IF lShowMessage THEN BEGIN
          MESSAGE(lText100,CurrRec."Service Header No.");
        END;
        EXIT(NOT lReturnValue);
      END;

      // ligne produit DARVA
      IF NOT lServiceHeader."DARVA Interface" THEN BEGIN
        EXIT(lReturnValue);
      END;

      lDARVASetup.GET;
      IF NOT lInteractionTemplate.GET(lDARVASetup."DRT Inv. Inter. Temp. Code") THEN BEGIN
        IF lShowMessage THEN BEGIN
          MESSAGE(lText001,lDARVASetup.FIELDCAPTION("DRT Inv. Inter. Temp. Code"));
        END;
        EXIT(NOT lReturnValue);
      END;
      IF lDARVASetup."Default MATMUT Prov. Agreement" = '' THEN BEGIN
        IF lShowMessage THEN BEGIN
          MESSAGE(lText001,lDARVASetup.FIELDCAPTION("Default MATMUT Prov. Agreement"));
        END;
        EXIT(NOT lReturnValue);
      END;
      IF NOT lCustomer.GET(lDARVASetup."MATMUT Corporate No.") THEN BEGIN
        IF lShowMessage THEN BEGIN
          MESSAGE(lText001,lDARVASetup.FIELDCAPTION("MATMUT Corporate No."));
        END;
        EXIT(NOT lReturnValue);
      END;
      IF NOT lCustomer.GET(lDARVASetup."AMF Corporate No.") THEN BEGIN
        IF lShowMessage THEN BEGIN
          MESSAGE(lText001,lDARVASetup.FIELDCAPTION("AMF Corporate No."));
        END;
        EXIT(NOT lReturnValue);
      END;

      IF (CurrRec."Corporate No." = lDARVASetup."MATMUT Corporate No.") OR
         (CurrRec."Corporate No." = lDARVASetup."AMF Corporate No.")
      THEN BEGIN

        // SDR64 envoy‚
        lServiceHeader.CALCFIELDS("SDR64 Send");
        IF NOT lServiceHeader."SDR64 Send" THEN BEGIN
          IF lShowMessage THEN BEGIN
            MESSAGE(lText002);
          END;
          EXIT(NOT lReturnValue);
        END;

        // Numero partie recu en retour de SDR64
        //<<IMH11.PC
        //lInterfaceReference.SETRANGE("Source Table ID",DATABASE::"Service Intervention Line");
        //lInterfaceReference.SETRANGE("Source No.",CurrRec."Service No.");
        //lInterfaceReference.SETRANGE("Source No. 2",CurrRec."Service Header No.");
        //lInterfaceReference.SETRANGE("Source No. 3",CurrRec."Line No.");
        //IF NOT lInterfaceReference.FINDFIRST THEN BEGIN
        //  IF lShowMessage THEN BEGIN
        //    MESSAGE(STRSUBSTNO(lText010,lText003));
        //  END;
        //  EXIT(NOT lReturnValue);
        //END;
        lExitLoop := FALSE;
        lInterfaceReference.SETRANGE("Source Table ID",DATABASE::"Service Intervention Line");
        lInterfaceReference.SETRANGE("Source No.",CurrRec."Service No.");
        lInterfaceReference.SETRANGE("Source No. 2",CurrRec."Service Header No.");
        lInterfaceReference.SETRANGE("Source No. 3",CurrRec."Line No.");
        lInterfaceReference.SETFILTER("DARVA Reference",'<>%1','');
        IF NOT lInterfaceReference.FINDFIRST THEN BEGIN
          lInterfaceReference.SETFILTER("Source No. 3",'<>%1',CurrRec."Line No.");
          IF lInterfaceReference.FINDSET THEN BEGIN
            REPEAT
              lServiceInterventionLine.GET(lInterfaceReference."Source No. 2",lInterfaceReference."Source No. 3");
              lExitLoop := CurrRec."Provider No." = lServiceInterventionLine."Provider No.";
            UNTIL (lInterfaceReference.NEXT = 0) OR lExitLoop;
          END;
        END ELSE BEGIN
          lExitLoop := TRUE;
        END;
        IF NOT lExitLoop THEN BEGIN
          IF lShowMessage THEN BEGIN
            MESSAGE(STRSUBSTNO(lText010,lText003));
          END;
          EXIT(NOT lReturnValue);
        END;
        //>>IMH11.PC

        { suppression car la facture n'est pas forcement pr‚sente au moyen de la validation du PV
        lDocumentAttachment.SETCURRENTKEY(
          "Service No.","Service Document No.",
          "Service Intervention Line No.","Intervention Quote Line No.","Creation Date");
        lDocumentAttachment.SETRANGE("Service No.",CurrRec."Service No.");
        lDocumentAttachment.SETRANGE("Service Document No.",CurrRec."Service Header No.");
        lDocumentAttachment.SETRANGE("Service Intervention Line No.",CurrRec."Line No.");
        lDocumentAttachment.SETRANGE(Deleted,FALSE);
        lDocumentAttachment.SETRANGE("Interaction Template Code",lDARVASetup."DRT Inv. Inter. Temp. Code");
        IF NOT lDocumentAttachment.FINDFIRST THEN BEGIN
          lDocumentAttachment.SETRANGE("Interaction Template Code");
          lDocumentAttachment.SETRANGE("Queue Type",lDocumentAttachment."Queue Type"::Receipt);
          lDocumentAttachment.SETRANGE("Document Queue Type",lDocumentAttachment."Document Queue Type"::Invoice);
          IF NOT lDocumentAttachment.FINDFIRST THEN BEGIN
            IF lShowMessage THEN BEGIN
              MESSAGE(STRSUBSTNO(lText010,lText012));
            END;
            EXIT(NOT lReturnValue);
          END;
        END;
        }

        //<<IMH12.PC
        { D‚sactivation suite SFD 0.8
        // Nø dossier fusion
        IF lServiceHeader."Expert Ref." = '' THEN BEGIN
          IF lShowMessage THEN BEGIN
            MESSAGE(STRSUBSTNO(lText010,lText008));
          END;
         EXIT(NOT lReturnValue);
        END;
        }
        //>>IMH12.PC
        {
        lDARVADTStorage.RESET;
        lDARVADTStorage.SETRANGE("Service No.",CurrRec."Service No.");
        lDARVADTStorage.SETRANGE("Service Header No.",CurrRec."Service Header No.");
        IF NOT lDARVADTStorage.FINDLAST THEN BEGIN
          IF lShowMessage THEN BEGIN
            MESSAGE(STRSUBSTNO(lText010,lText004));
          END;
          EXIT(NOT lReturnValue);
        END;
        lLastStorageEntryNo := lDARVADTStorage."Entry No.";

        lDARVADTStorage.SETRANGE("Tag Type",lDARVADTStorage."Tag Type"::Tag);
        lDARVADTStorage.SETRANGE("Entry No.",lLastStorageEntryNo);

        // DE00440101
        lDARVADTStorage.SETRANGE("Tag Description",'DE00440101');
        IF NOT lDARVADTStorage.FINDFIRST THEN BEGIN
          IF lShowMessage THEN BEGIN
            MESSAGE(STRSUBSTNO(lText010,STRSUBSTNO(lText005,'DE00440101')));
          END;
          EXIT(NOT lReturnValue);
        END;
        lTextBuffer :=
          lDARVADTStorage."Value 1" + lDARVADTStorage."Value 2" + lDARVADTStorage."Value 3" +
          lDARVADTStorage."Value 4" + lDARVADTStorage."Value 5";
        IF lTextBuffer = '' THEN BEGIN
          IF lShowMessage THEN BEGIN
            MESSAGE(STRSUBSTNO(lText010,STRSUBSTNO(lText005,'DE00440101')));
          END;
          EXIT(NOT lReturnValue);
        END;

        // GR010101
        lDARVADTStorage.SETRANGE("Tag Description",'GR010101');
        IF NOT lDARVADTStorage.FINDFIRST THEN BEGIN
          IF lShowMessage THEN BEGIN
            MESSAGE(STRSUBSTNO(lText010,STRSUBSTNO(lText005,'GR010101')));
          END;
          EXIT(NOT lReturnValue);
        END ELSE BEGIN
          lParentTagEntryNo := lDARVADTStorage."Tag Entry No.";
          lDARVADTStorage.SETRANGE("Parent Tag Entry No.",lParentTagEntryNo);
        END;

        // SE0020101
        lDARVADTStorage.SETRANGE("Tag Description",'SE0020101');
        IF NOT lDARVADTStorage.FINDFIRST THEN BEGIN
          IF lShowMessage THEN BEGIN
            MESSAGE(STRSUBSTNO(lText010,STRSUBSTNO(lText005,'SE0020101')));
          END;
          EXIT(NOT lReturnValue);
        END;

        // SE0030401
        lDARVADTStorage.SETRANGE("Tag Description",'SE0030401');
        IF NOT lDARVADTStorage.FINDFIRST THEN BEGIN
          IF lShowMessage THEN BEGIN
            MESSAGE(STRSUBSTNO(lText010,STRSUBSTNO(lText005,'SE0030401')));
          END;
          EXIT(NOT lReturnValue);
        END;

        // SE1600102LIST
        lDARVADTStorage.SETRANGE("Tag Description",'SE1600102LIST');
        IF NOT lDARVADTStorage.FINDFIRST THEN BEGIN
          IF lShowMessage THEN BEGIN
            MESSAGE(STRSUBSTNO(lText010,STRSUBSTNO(lText005,'SE1600102LIST')));
          END;
          EXIT(NOT lReturnValue);
        END;

        IF NOT lProvider.GET(CurrRec."Provider No.") THEN BEGIN
          IF lShowMessage THEN BEGIN
            MESSAGE(STRSUBSTNO(lText010,lText006));
          END;
          EXIT(NOT lReturnValue);
        END;

        IF (lProvider.Name = '') AND ((lProvider.Address = '') OR
           (lProvider."Address 2" = '')) AND (lProvider."Post Code" = '') AND
           (lProvider.City = '')
        THEN BEGIN
          IF lShowMessage THEN BEGIN
            MESSAGE(STRSUBSTNO(lText010,lText007));
          END;
          EXIT(NOT lReturnValue);
        END;
        }
        //<<IMH12.PC
        { D‚sactivation suite SFD 0.8
        IF lProvider."VAT Registration No." = '' THEN BEGIN
          IF lShowMessage THEN BEGIN
            MESSAGE(STRSUBSTNO(lText010,lText011));
          END;
          EXIT(NOT lReturnValue);
        END;

        IF STRLEN(lProvider."Registration No.") <> 14 THEN BEGIN
          IF lShowMessage THEN BEGIN
            MESSAGE(STRSUBSTNO(lText010,lText009));
          END;
          EXIT(NOT lReturnValue);
        END;
        }
        //>>IMH12.PC
      END;

      EXIT(lReturnValue);
    END;

    BEGIN
    {
      /** @r IMH12 @d 20/11/13 @a ISAT.PC @v IMH6.01.348 @s DARVA MATMUT Lot 1 @s SFD 0.8 - Modification */
      /** @r IMH11 @d 18/11/13 @a ISAT.PC @v IMH6.01.348 @h 4862 @s DARVA MATMUT Lot 1 @s Correctif */
      /** @r IMH10 @d 28/10/13 @a ISAT.PC @v IMH6.01.350 @s SystŠme d'aiguillage @c ajout fonction CheckDarvaBeforeMinutes */
      /** @r IMH09 @d 04/07/11 @a ISAT.ST @v IMH6.01.102 @s Gestion des statuts @c Ajout AndFunction */
      /** @r IMH08 @d 25/05/11 @s ISAT.ZW @v IMH6.01.102 @s Gestion des statuts
          @c Ajout fonction prestataire disponible … presta non disponible */
      /** @r IMH07 @d 20/05/11 @s ISAT.ST @v IMH6.01.102 @s Gestion des statuts
          @c Ajout CheckDelayBetweenDates2 */
      /** @r IMH06 @d 05/05/11 @a ISAT.ZW @v IMH6.01.102 @s Gestion des statuts
          @c Ajout fonction CheckParameters */
      /** @r IMH05 @d 02/04/11 @a ISAT.ST @v IMH6.01.102 @s Gestion des statuts
          @c Modif plafond intervention, Ajout EstimateOverrun
          @c Suppression 102 et 103 */
      /** @r IMH04 @d 17/03/11 @a ISAT.ST @v IMH6.01.102 @s Gestion des statuts
          @c Appel fonctions communes
          @c Ajout indisponibilit‚ prestataire */
      /** @r IMH03 @d 21/02/11 @a ISAT.ST @v IMH6.01.102 @s Gestion des statuts @c Ajout ExpectedPrevistDelay */
      /** @r IMH02 @d 15/02/11 @a ISAT.ST @v IMH6.01.102 @s Gestion des statuts @c Ajout NextMeetingDateExpired, NextControlDateExpired */
      /** @r IMH01 @d 27/12/10 @a ISAT.ST @v IMH6.01.102 @s Gestion des statuts @c Cr‚ation objet */
    }
    END.
  }
}