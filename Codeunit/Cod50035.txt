OBJECT Codeunit 50035 Proc. Service Act. Funct.
{
  OBJECT-PROPERTIES
  {
    Date=28/11/12;
    Time=16:08:39;
    Modified=Yes;
    Version List=IMH6.01;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      AssistMode@1100281003 : Boolean;
      CurrRec@1100281004 : Record 50066;
      Text001@1100281000 : TextConst 'ENU=Service Header Process Function %1 can''t be used by NAS.;FRA=La fonction processus service %1 ne peut ˆtre utilis‚ pas un NAS.';
      Text002@1000000002 : TextConst 'ENU=Do you want to send a SMS %1 to %2 ?;FRA=Souhaitez-vous envoyer le SMS %1 au %2 ?';
      Funct001_Name@1100281002 : TextConst 'ENU=Cancel auto tray activities;FRA=Annulation activit‚s corbeille auto';
      Funct001_Assist@1100281001 : TextConst 'ENU="Team code filter (unmandatory),Tray task filter (unmandatory),Auto filtre (unmandatory : 0=Auto/1=Manuel/2=Toutes)";FRA="Filtre code corbeille (non obligatoire),Filtre tƒche corbeille (non obligatoire),Filtre activit‚ auto (non obligatoire, 0=Auto/1=Manuel/2=Toutes)"';
      ProcCommFct@1100281005 : Codeunit 50049;
      HideDialogBox@1100281006 : Boolean;
      Funct300_Name@1000000001 : TextConst 'ENU=sms auto transmission;FRA=Emission des SMS en auto';
      Funct300_Assist@1000000000 : TextConst 'ENU=Template to send SMS.;FRA=Code modŠle SMS';

    LOCAL PROCEDURE GetTableNo@1100281000() : Integer;
    BEGIN
      EXIT(DATABASE::Service);
    END;

    PROCEDURE LoadFunctionList@1100281001();
    VAR
      lProcFunction@1100281000 : Record 50085;
    BEGIN
      // Source Table, Type, nø de la fonction, Description, ParamŠtre o/n
      WITH lProcFunction DO BEGIN
      //  InitFunction(GetTableNo, "Function Type"::"Action Function", 1, Funct001_Name, TRUE);
        // Plage 1 … 99 : commun DPS
        //<<IMH05
        InitFunction(GetTableNo, "Function Type"::ActionFunction, 1, Funct001_Name, TRUE);
        //>>IMH05
        // Plage 100 … 199 : selon la table origine
        InitFunction(GetTableNo, "Function Type"::ActionFunction, 300, Funct300_Name, TRUE);  //IMH08
      END;
      // Plage 200 : fonction communes
      ProcCommFct.LoadActFunctionList(GetTableNo); //IMH02.ST
    END;

    PROCEDURE AssistFunction@1100281009(pFunctionNo@1100281000 : Integer);
    VAR
      lRecRef@1100281001 : RecordRef;
    BEGIN
      AssistMode := TRUE;
      RunFunction(pFunctionNo, '', lRecRef);
      AssistMode := FALSE;
    END;

    PROCEDURE RunFunction@1100281003(pFunctionNo@1100281000 : Integer;pParameters@1100281001 : Text[1024];VAR pCurrRecRef@1100281002 : RecordRef) rValue : Boolean;
    BEGIN
      IF NOT AssistMode THEN
        pCurrRecRef.SETTABLE(CurrRec);
      CASE pFunctionNo OF
        //  FunctionNo : rValue := Function(pParameters);
        1 : rValue := CancelTrayLines(pParameters);
        300 : rValue := SendSMS(pParameters); //IMH08
        ELSE BEGIN
          //<<IMH04.ISAT.EBA
          ProcCommFct.SetHideDialogBox(HideDialogBox);
          //>>IMH04.ISAT.EBA
          rValue := ProcCommFct.RunFunction(GetTableNo, pFunctionNo, pParameters); //IMH02.ST
        END
      END;
      IF NOT AssistMode THEN
        pCurrRecRef.GETTABLE(CurrRec);
    END;

    PROCEDURE CheckParameters@1100281010(pFunctionNo@1100281000 : Integer;pParameter@1100281002 : Text[1024];VAR pErrorText@1100281001 : Text[250]) : Boolean;
    BEGIN
      //IMH04.zw
      EXIT(pErrorText = '');    //IMH05
    END;

    LOCAL PROCEDURE "------------------------------"@1100281004();
    BEGIN
    END;

    PROCEDURE SetHideDialogBox@57(NewHideDialogBox@1000 : Boolean);
    BEGIN
      //<<IMH04.ISAT.EBA
      HideDialogBox := NewHideDialogBox;
      //>>IMH04.ISAT.EBA
    END;

    PROCEDURE CancelTrayLines@1100281008(pParameters@1100281000 : Text[1024]) : Boolean;
    VAR
      lTrayLine@1100281001 : Record 50048;
      lTrayTask@1100281002 : Record 50080;
      lTeamFilter@1100281003 : Text[1024];
      lTaskFilter@1100281004 : Text[1024];
      lParamNb@1100281005 : Integer;
      lActType@1000000000 : Integer;
      lToTreat@1100281006 : Boolean;
    BEGIN
      //<<IMH06
      IF AssistMode THEN BEGIN
        MESSAGE(Funct001_Assist);
        EXIT;
      END;
      lActType := 0; //IMH08.ST
      IF pParameters <> '' THEN BEGIN
        lParamNb := ProcCommFct.CountParameters(pParameters, ',');
        IF lParamNb > 3 THEN
          ProcCommFct.ErrorNbExpectedParam(Funct001_Name, lParamNb);
        lTeamFilter := SELECTSTR(1, pParameters);
        IF lParamNb > 1 THEN
          lTaskFilter := SELECTSTR(2, pParameters);
      //<<IMH08.ST
        IF lParamNb > 2 THEN BEGIN
          IF SELECTSTR(3, pParameters) <> '' THEN
            EVALUATE(lActType,SELECTSTR(3, pParameters));
        END;
      //>>IMH08.ST
      END;

      WITH lTrayLine DO BEGIN
        SETCURRENTKEY("Service No.", "Service Header No.", "Intervention Line No.");
        SETRANGE("Service No.", CurrRec."Service No.");
        SETRANGE(Closed, FALSE);
        IF lTeamFilter <> '' THEN
          SETFILTER("Team Code", lTeamFilter);
        IF lTaskFilter <> '' THEN
          SETFILTER("Task Code", lTaskFilter);
      //<<IMH08.ST
        CASE lActType OF
          0 : SETRANGE(Manual, FALSE);
          1 : SETRANGE(Manual, TRUE);
        END;
      //>>IMH08.ST
        IF ISEMPTY THEN
          EXIT(TRUE);
        FINDSET(TRUE);
        REPEAT
          //<<IMH07
          lToTreat := TRUE;
          IF lTrayTask.GET(lTrayTask."Source Table"::Intervention, lTrayLine."Task Code") THEN
            IF lTrayTask."Assist Action" <> lTrayTask."Assist Action"::OpenCard THEN
              lToTreat := FALSE;
          CALCFIELDS("Lock Exists");
          //IF NOT "Lock Exists"THEN BEGIN
          IF (NOT "Lock Exists") OR lToTreat THEN BEGIN
          //>>IMH07
            VALIDATE(Status, Status::Canceled);
            MODIFY(TRUE);
          END;
        UNTIL NEXT = 0;
      END;
      EXIT(TRUE);
      //>>IMH06
    END;

    PROCEDURE SendSMS@1000000001(pParameters@1100281002 : Text[1024]) : Boolean;
    VAR
      lContact@1000000001 : Record 5050;
      lSMSTemplate@1000000000 : Record 50185;
      lSMSMgt@1100281000 : Codeunit 50225;
      lParamNb@1100281003 : Integer;
    BEGIN
      //IMH08
      IF AssistMode THEN BEGIN
        MESSAGE(Funct300_Assist);
        EXIT;
      END;

      IF pParameters <> '' THEN BEGIN
        lParamNb := ProcCommFct.CountParameters(pParameters, ',');
        IF lParamNb > 1 THEN
          ProcCommFct.ErrorNbExpectedParam(Funct300_Name, lParamNb);

        IF  lParamNb =1 THEN BEGIN
          //>>IMH09
          IF NOT lSMSTemplate.GET(pParameters) THEN
            EXIT(TRUE);
          //>>IMH09
          IF lSMSMgt.CheckPhoneNo(CurrRec."Contact Mobile Phone No.") THEN BEGIN
            IF GUIALLOWED THEN BEGIN
              IF NOT CONFIRM(STRSUBSTNO(Text002, lSMSTemplate.Description, CurrRec."Contact Mobile Phone No.")) THEN
                EXIT(TRUE);
            END;
            lSMSMgt.SendSMSFromService(0,CurrRec,pParameters, 1, FALSE);
          END;
          EXIT(TRUE)
        END
        ELSE
          EXIT(TRUE);  //IMH09
      END;
      EXIT(TRUE);  //IMH09
    END;

    BEGIN
    {
      /** @r IMH09 @d 28/11/12 @a ISAT.ZW @v IMH6.01.330 @s Projet SMS V1.1 @h 4135
          @c Correction */
      /** @r IMH08 @d 15/11/12 @a ISAT.ZW @v IMH6.01.330 @s Projet SMS V1.1
          @c ajout fonction SendSMS */
      /** @r IMH07 @d 23/08/12 @a ISAT.ZW @v IMH6.01.226 @s version 1.4 @h 3545
          @c Modification CancelTrayLines : validation de l'activit‚ en cours de traitement */
      /** @r IMH06 @d 23/08/12 @a ISAT.ZW @v IMH6.01.226 @s version 1.4 @h 3545
          @c Modification CancelTrayLines : validation de l'activit‚ en cours de traitement */
      /** @r IMH05 @d 23/08/12 @a ISAT.ZW @v IMH6.01.226 @s version 1.4 @h 2690
          @c Ajout fonction CancelTrayLines */
      /** @r IMH04 @d 15/11/11 @a ISAT.EBA @v IMH6.01.102 @s Gestion des statuts
          @c Ajout de fonction "SetHideDialogBox" */
      /** @r IMH03 @d 05/05/11 @a ISAT.ZW @v IMH6.01.102 @s Gestion des statuts
          @c Ajout fonction CheckParameters */
      /** @r IMH02 @d 02/04/11 @a ISAT.ST @v IMH6.01.102 @s Gestion des statuts
          @c Appel fonctions communes */
      /** @r IMH01 @d 12/01/11 @a ISAT.ST @v IMH6.01.102 @s Gestion des statuts
          @c Cr‚ation objet
          @c Pr‚voir la gestion de la s‚curit‚ TableData */
    }
    END.
  }
}