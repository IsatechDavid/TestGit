OBJECT Codeunit 50042 Proc. Service Mgt
{
  OBJECT-PROPERTIES
  {
    Date=27/03/14;
    Time=11:28:13;
    Modified=Yes;
    Version List=IMH6.01,OPTIM,5005;
  }
  PROPERTIES
  {
    TableNo=50066;
    Permissions=TableData 50066=rm;
    OnRun=BEGIN
            TestAutoStep(Rec);
          END;

  }
  CODE
  {
    VAR
      ProcessMgt@1100281000 : Codeunit 50040;
      CurrRec@1100281001 : Record 50066;
      HideDialogBox@1100281002 : Boolean;
      Text001@1000000000 : TextConst 'ENU=Process has been initialised.;FRA=Le processus a ‚t‚ initialis‚.';
      TrayLineMgt@1000000001 : Codeunit 50050;

    PROCEDURE SelectNextStep@1100281000(VAR pRec@1100281000 : Record 50066);
    VAR
      lProcessStep@1100281001 : Record 50043;
    BEGIN
      //<<IMH15.ST
      IF pRec."Process Code" = '' THEN BEGIN
        IF InitProcess(pRec) THEN
          IF GUIALLOWED THEN
            MESSAGE(Text001);
      END;
      //>>IMH15.ST
      IF ProcessMgt.SelectNextStep(pRec."Process Code", pRec."Process Status No.", lProcessStep) THEN
        IF StatusChangeAllowed(pRec, lProcessStep, TRUE, TRUE) THEN
          PerformStatusChange(pRec, lProcessStep);
    END;

    PROCEDURE TestAutoStep@1100281001(VAR pRec@1100281000 : Record 50066) : Boolean;
    VAR
      lProcessStep@1100281002 : Record 50043;
      lProcessAutoStep@1100281001 : Codeunit 50129;
    BEGIN
      IF pRec."Process Code" = '' THEN
        EXIT;
      IF NOT ProcessMgt.SetAutoStepFilters(pRec."Process Code", pRec."Process Status No.", lProcessStep) THEN
        EXIT;
      lProcessStep.FINDSET; //IMH18.ST
      REPEAT
        IF StatusChangeAllowed(pRec, lProcessStep, FALSE, FALSE) THEN BEGIN
          lProcessAutoStep.AddStep(lProcessStep); //IMH11.ST
          PerformStatusChange(pRec, lProcessStep);
          lProcessAutoStep.InitCU; //IMH11.ST
          EXIT(TRUE);
        END;
      UNTIL lProcessStep.NEXT = 0;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE StatusChangeAllowed@1100281002(pRec@1100281000 : Record 50066;pProcessStep@1100281004 : Record 50043;pRaiseError@1100281002 : Boolean;pFromUserStep@1100281001 : Boolean) : Boolean;
    VAR
      lProcessStepRequirement@1100281003 : Record 50045;
      lRecRef@1100281005 : RecordRef;
    BEGIN
      WITH pProcessStep DO BEGIN
        IF NOT Active THEN
          EXIT(FALSE);
        IF (pFromUserStep AND "Enforce User Time Limit") OR (NOT pFromUserStep) THEN BEGIN
          CASE "Time Limit Base Date" OF
            "Time Limit Base Date"::LastStep :
              IF NOT ProcessMgt.AllowStepChangeDelay("Step Date Limit Formula", "Step Time Limit Formula",
                                                     DATABASE::Service, pRec."Service No.", '', 0,0, pRec."Creation Date",
                                                     GetCalendarCode, pRaiseError) THEN
                EXIT(FALSE);
            "Time Limit Base Date"::FieldValue : BEGIN
              lRecRef.GETTABLE(pRec);
              IF NOT ProcessMgt.AllowStepChangeDelayFieldVal("Step Date Limit Formula", "Step Time Limit Formula",
                                                             lRecRef, "Time Limit Base Field No.",
                                                             GetCalendarCode, pRaiseError) THEN
                EXIT(FALSE);
            END;
          END; // CASE
        END;
        //>>IMH07
        SetRequirementFilter(lProcessStepRequirement);
      END; // WITH
      EXIT(RequirementAllowed(lProcessStepRequirement, pRec, pRaiseError));
    END;

    LOCAL PROCEDURE ProcessActionAllowed@1100281009(pRec@1100281000 : Record 50066;pProcessAction@1100281004 : Record 50044;pRaiseError@1100281002 : Boolean) : Boolean;
    VAR
      lProcessStepRequirement@1100281003 : Record 50045;
    BEGIN
      pProcessAction.SetRequirementFilter(lProcessStepRequirement);
      EXIT(RequirementAllowed(lProcessStepRequirement, pRec, pRaiseError));
    END;

    PROCEDURE RequirementAllowed@1100281010(VAR pRequirement@1100281002 : Record 50045;pRec@1100281001 : Record 50066;pRaiseError@1100281000 : Boolean) : Boolean;
    VAR
      lServiceTemp@1100281006 : TEMPORARY Record 50066;
      lLastRequirement@1100281005 : Record 50045;
      lRecRef@1100281007 : RecordRef;
    BEGIN
      IF pRequirement.ISEMPTY THEN
        EXIT(TRUE);

      lServiceTemp := pRec;
      lServiceTemp.INSERT;
      lRecRef.GETTABLE(lServiceTemp);
      EXIT(ProcessMgt.CheckRequirements(lRecRef,pRequirement,pRaiseError));
    END;

    LOCAL PROCEDURE PerformStatusChange@1100281003(VAR pRec@1100281001 : Record 50066;pProcessStep@1100281003 : Record 50043);
    VAR
      lProcessAction@1100281002 : Record 50044;
      lProcStatusHistToCreate@1000000000 : Record 50047;
    BEGIN
      // Appel … partir du changement de statut utilisateur ou automatique
      IF pProcessStep.ProcessActionExists(lProcessAction) THEN
        ProcessAction(pRec, lProcessAction);

      //Historique statut
      CreateStatusHistoryLine(pRec, pProcessStep, lProcStatusHistToCreate);  //IMH19
      IF pRec."Process Code" <> pProcessStep."Next Process Code" THEN
        pRec.VALIDATE("Process Code", pProcessStep."Next Process Code");
      pRec.VALIDATE("Process Status No.", pProcessStep."Next Status");
      //<<IMH19
      //CreateStatusHistoryLine(pRec, pProcessStep);
      InsertStatusHistoryLine(lProcStatusHistToCreate);
      //>>IMH19
      //pRec.MODIFY(TRUE);   //IMH17 d‚placer dans la fonction changement statut
      //<<IMH17
      pRec.SetSkipAutoStep(TRUE);
      pRec.MODIFY(TRUE);
      pRec.SetSkipAutoStep(FALSE);
      pRec.AutoStep;
      //>>IMH17
    END;

    PROCEDURE ProcessAction@1100281005(VAR pRec@1100281001 : Record 50066;VAR pProcessAction@1100281000 : Record 50044);
    VAR
      lProcessCurrentAction@1100281008 : Record 50046;
      lProcessAction@1100281009 : Record 50044;
    BEGIN
      IF pProcessAction.FINDSET THEN
        REPEAT
          IF ProcessActionAllowed(pRec, pProcessAction, FALSE) THEN BEGIN
            CreateCrrrentActionLine(lProcessCurrentAction, pRec, pProcessAction);
          END;
        UNTIL pProcessAction.NEXT = 0;

      lProcessCurrentAction.InitActionFilters(pProcessAction); //IMH16.ST
      lProcessCurrentAction.SETRANGE("Source Table ID", DATABASE::Service);
      lProcessCurrentAction.SETRANGE("Source Key Code 1", pRec."Service No.");
      IF NOT lProcessCurrentAction.FINDSET THEN
        EXIT;
      CurrRec := pRec;
      REPEAT
        //<<IMH17
        IF lProcessAction.GET(lProcessCurrentAction."Process Code", lProcessCurrentAction."Source Action",
               lProcessCurrentAction."Source Line No.", lProcessCurrentAction."Action Line No.") THEN BEGIN
        //>>IMH17
          IF lProcessCurrentAction."Action Status" < lProcessCurrentAction."Action Status"::Realized THEN BEGIN
            IF lProcessCurrentAction."Action Status" = lProcessCurrentAction."Action Status"::Init THEN BEGIN
              lProcessCurrentAction."Action Status" := lProcessCurrentAction."Action Status"::Process;
              lProcessCurrentAction.MODIFY(TRUE);
            END;
            COMMIT;  //IMH17
            WITH lProcessAction DO BEGIN
            //<<IMH17
            //IF GET(lProcessCurrentAction."Process Code", lProcessCurrentAction."Source Action",
            //       lProcessCurrentAction."Source Line No.", lProcessCurrentAction."Action Line No.") THEN BEGIN
            //>>IMH17
              IF NOT "Suspend Action" THEN BEGIN
                CASE "Action Type" OF
                  "Action Type"::"Create Tray Line" :
                    Act_CreateTrayLine(lProcessAction);
                  "Action Type"::"Create Interaction" :
                    Act_CreateInteract(lProcessAction);
                  "Action Type"::"Run Object" :
                    Act_RunObject(lProcessAction);
                  "Action Type"::"Set Value" :
                    Act_SetValue(lProcessAction);
                  "Action Type"::"Run Function" :
                    Act_RunFunction(lProcessAction);
                END; // CASE
              END;
            END;
            lProcessCurrentAction."Action Status" := lProcessCurrentAction."Action Status"::Realized;
            lProcessCurrentAction.MODIFY(TRUE);
            COMMIT;  //IMH17
          END; // WITH
        //<<IMH17
        END ELSE BEGIN
          lProcessCurrentAction."Action Status" := lProcessCurrentAction."Action Status"::Realized;
          lProcessCurrentAction.MODIFY(TRUE);
          COMMIT;
        END;
        //>>IMH17
      UNTIL lProcessCurrentAction.NEXT=0;

      lProcessCurrentAction.DELETEALL;
      pRec := CurrRec;
      COMMIT;  //IMH17
    END;

    PROCEDURE OnChangeProcessStatus@1100281006(VAR pRec@1100281000 : Record 50066);
    VAR
      lProcessAction@1100281001 : Record 50044;
      lRec@1000000002 : Record 50066;
      lProcCode@1000000001 : Code[10];
      lProcStatusNo@1000000000 : Integer;
    BEGIN
      // Appel … partir du validate du champ "Process Status" : on traite les actions arrivant … ce statut
      //<<IMH17
      lRec := pRec;
      lRec.SETRECFILTER;
      IF NOT lRec.FINDFIRST THEN
        CLEAR(lRec);
      lProcCode := pRec."Process Code";
      lProcStatusNo := pRec."Process Status No.";
      pRec."Process Code" := lRec."Process Code";
      pRec."Process Status No." := lRec."Process Status No.";
      IF ProcessMgt.StatusActionExist(lProcCode, lProcStatusNo, lProcessAction) THEN
      //IF ProcessMgt.StatusActionExist(pRec."Process Code", pRec."Process Status No.", lProcessAction) THEN
      //>>IMH17
        ProcessAction(pRec, lProcessAction);

      //<<IMH17
      IF (pRec."Process Code" = lRec."Process Code") AND (pRec."Process Status No." = lRec."Process Status No.") THEN BEGIN
        pRec."Process Code" := lProcCode;
        pRec."Process Status No." := lProcStatusNo;
      END;
      //>>IMH17
    END;

    PROCEDURE CreateStatusHistoryLine@1000000002(pRec@1000000002 : Record 50066;pProcessStep@1000000001 : Record 50043;VAR pProcessStatusHistory@1000000000 : Record 50047);
    BEGIN
      //<<IMH21
      pProcessStatusHistory."Source Table ID" := DATABASE::Service;
      pProcessStatusHistory."Source Key Code 1" := pRec."Service No.";
      pProcessStatusHistory."From Process Code" := pProcessStep."Process Code";
      pProcessStatusHistory."From Status No." := pProcessStep."Previous Status";
      pProcessStatusHistory."To Process Code" := pProcessStep."Next Process Code";
      pProcessStatusHistory."To Status No." := pProcessStep."Next Status";
      pProcessStatusHistory."Auto Process" := pProcessStep."Auto Process Step";
      //lProcessStatusHistory.INSERT(TRUE);
      pProcessStatusHistory."Line No." := pProcessStatusHistory.GetNextEntry;
      //<<IMH21
    END;

    PROCEDURE InsertStatusHistoryLine@1000000001(VAR pProcessStatusHistory@1000000000 : Record 50047);
    VAR
      lProcessStatusHistory@1000000001 : Record 50047;
    BEGIN
      //<<IMH19
      lProcessStatusHistory := pProcessStatusHistory;
      WHILE lProcessStatusHistory.FIND('=') DO BEGIN
        lProcessStatusHistory."Line No." := lProcessStatusHistory."Line No." - 1;
      END;
      pProcessStatusHistory."Line No." := lProcessStatusHistory."Line No.";
      pProcessStatusHistory.INSERT(TRUE);
      //>>IMH19
    END;

    PROCEDURE CreateCrrrentActionLine@1100281007(VAR pProcessCurrentAction@1100281002 : Record 50046;pRec@1100281001 : Record 50066;pProcessAction@1100281000 : Record 50044);
    BEGIN
      ProcessMgt.AddCurrActionLine(pProcessCurrentAction,
                                   DATABASE::Service, pRec."Service No.", '', 0, 0,
                                   pProcessAction);
    END;

    PROCEDURE Act_CreateTrayLine@1100281008(pAction@1100281006 : Record 50044);
    VAR
      lTrayLineManagement@1100281003 : Codeunit 50050;
      lShowDlg@1100281000 : Boolean;
      lTeamCode@1000000000 : Code[10];
      lFilterTeamTrayTask@1000000001 : TEMPORARY Record 50129;
    BEGIN
      lTrayLineManagement.SetCallFrom(1);
      IF pAction.GetUserInterf THEN COMMIT; //IMH06.ST
      //<<IMH13.ISAT.EBA
      IF HideDialogBox THEN
        lShowDlg := FALSE
      ELSE
        lShowDlg := pAction.GetUserInterf;
      //>>IMH13.ISAT.EBA

      //<<IMH20
      lTeamCode := pAction."Team Code";
      IF pAction."Team Code" = '' THEN BEGIN
        lFilterTeamTrayTask."Corporate No." := CurrRec."Corporate No.";
        lFilterTeamTrayTask."Corporate Region Code" := CurrRec."Corporate Region Code";
        lTeamCode := TrayLineMgt.GetTeamByTask(pAction."Task Code", lFilterTeamTrayTask, '');
      END;


      IF NOT lTrayLineManagement.CreateTLFromService(
      //      CurrRec, pAction."Team Code", pAction."Task Code", lShowDlg) THEN
            CurrRec, lTeamCode, pAction."Task Code", lShowDlg) THEN
      //>>IMH20
        IF NOT pAction.Optional THEN
          ERROR('');
    END;

    PROCEDURE Act_CreateInteract@1100281011(pAction@1100281000 : Record 50044);
    VAR
      lSegLine@1100281002 : TEMPORARY Record 5077;
    BEGIN
      pAction.TESTFIELD("Interaction Template Code");
      CurrRec.MODIFY;  //imh12.st
      IF pAction.GetUserInterf THEN COMMIT; //IMH06.ST
      //<<IMH13.ISAT.EBA
      IF HideDialogBox THEN
        lSegLine.SetHideWizard(2)
      ELSE
      //>>IMH13.ISAT.EBA
        lSegLine.SetHideWizard(pAction.GetInteractParam);
      lSegLine."Process Code" := pAction."Process Code"; //IMH14.ST
      IF NOT lSegLine.CreateInteractionFromService(CurrRec, pAction."Interaction Template Code") THEN
        IF NOT pAction.Optional THEN
          ERROR('');
    END;

    PROCEDURE Act_RunObject@1100281013(pAction@1100281000 : Record 50044);
    VAR
      lRec@1100281001 : Record 50066;
      lShowDlg@1100281002 : Boolean;
    BEGIN
      CASE pAction."Object Type" OF
        pAction."Object Type"::Report : BEGIN
          CurrRec.MODIFY;
          lRec := CurrRec;
          lRec.SETRECFILTER;
          IF pAction."Use Request Form" THEN COMMIT;    //IMH10 .ZW
          //<<IMH13.ISAT.EBA
          //REPORT.RUN(pAction."Object No.", pAction."Use Request Form", pAction."Use System Printer", lRec);

          IF HideDialogBox THEN
            lShowDlg := FALSE
          ELSE
            lShowDlg := pAction."Use Request Form";

          REPORT.RUN(pAction."Object No.", lShowDlg, pAction."Use System Printer", lRec);
          //>>IMH13.ISAT.EBA
          // recharge le rec au cas o— le report le modifie
          lRec.FINDFIRST;
          CurrRec := lRec;
          //<<IMH17
          CurrRec.SetSkipAutoStep(TRUE);
          CurrRec.MODIFY(TRUE);
          //>>IMH17
        END;
        pAction."Object Type"::Codeunit : BEGIN
          lRec := CurrRec;
          lRec.SETRECFILTER;
          CODEUNIT.RUN(pAction."Object No.", lRec);
          CurrRec := lRec; // recopie le rec au cas o— le codeunit le modifie
          //<<IMH17
          CurrRec.SetSkipAutoStep(TRUE);
          CurrRec.MODIFY(TRUE);
          //>>IMH17
        END;
      END; // CASE
    END;

    PROCEDURE Act_SetValue@1100281015(pAction@1100281000 : Record 50044);
    VAR
      lRecRef@1100281001 : RecordRef;
    BEGIN
      lRecRef.GETTABLE(CurrRec);
      ProcessMgt.SetFieldValue(pAction, lRecRef);
      lRecRef.SETTABLE(CurrRec);

      //<<IMH17
      CurrRec.SetSkipAutoStep(TRUE);
      CurrRec.MODIFY(TRUE);
      //>>IMH17
    END;

    PROCEDURE Act_RunFunction@1100281012(pAction@1100281000 : Record 50044);
    VAR
      lActFunction@1100281001 : Record 50085;
      lRecRef@1100281002 : RecordRef;
    BEGIN
      lRecRef.GETTABLE(CurrRec);
      //<<IMH13.ISAT.EBA
      lActFunction.SetHideDialogBox(HideDialogBox);
      //>>IMH13.ISAT.EBA
      IF NOT lActFunction.ActFunction(lRecRef,pAction) THEN
      //<<IMH08.ST
        IF NOT pAction.Optional THEN
          ERROR('');
      //>>IMH08.ST
      lRecRef.SETTABLE(CurrRec);

      //<<IMH17
      CurrRec.SetSkipAutoStep(TRUE);
      CurrRec.MODIFY(TRUE);
      //>>IMH17
    END;

    PROCEDURE SetHideDialogBox@57(NewHideDialogBox@1000 : Boolean);
    BEGIN
      //<<IMH13.ISAT.EBA
      HideDialogBox := NewHideDialogBox;
      //>>IMH13.ISAT.EBA
    END;

    LOCAL PROCEDURE InitProcess@1000000000(VAR pRec@1000000000 : Record 50066) : Boolean;
    VAR
      lServiceSetup@1000000001 : Record 5911;
    BEGIN
      lServiceSetup.GET;
      IF lServiceSetup."Service Process Code" = '' THEN
        EXIT(FALSE);
      pRec."Process Code" := lServiceSetup."Service Process Code";
      pRec."Process Status No." := lServiceSetup."Service Start Status";
      pRec.MODIFY(FALSE);  //IMH17
      pRec.VALIDATE("Process Status No.");
      pRec.MODIFY(TRUE);
      EXIT(TRUE);
    END;

    PROCEDURE SetCurrRec@1100281014(VAR pCurrRec@1100281000 : Record 50066);
    BEGIN
      CurrRec := pCurrRec;
    END;

    BEGIN
    {
      /** @r IMH20 @d 26/03/14 @a ISAT.ZW @v IMH6.01.5005 @s Reorganisation DPS @h 5005
          @c Ajout la utilisation de la nouvelle Fonction GetTeamByTask */
      /** @r IMH19 @d 07/05/13 @a ISAT.ZW @v IMH6.01.334 @s MAI @h 4314 @c Gestion historisation ‚tape*/
      /** @r IMH18 @d 29/11/12 @a ISAT.ST @v IMH6.01.P008 @s Gestion des statuts @c optimisation findfirst -> findset */
      /** @r IMH17 @d 17/10/12 @a ISAT.ZW @v IMH6.01.215 @s NEP000006 @h 3702 @c Gestion Commit + Modification action*/
      /** @r IMH16 @d 06/06/12 @a ISAT.ST @v IMH6.01.102 @s Gestion des statuts @h 3454 @c Appel ProcessCurrentAction.InitActionFilters*/
      /** @r IMH15 @d 17/12/11 @a ISAT.ST @v IMH6.01.102 @s Gestion des statuts @c InitProcess */
      /** @r IMH14 @d 06/12/11 @a ISAT.ST @v IMH6.01.102 @s Gestion des statuts @c Suivi processus interactions */
      /** @r IMH13 @d 15/11/11 @a ISAT.EBA @v IMH6.01.102 @s Gestion des statuts
          @c Ajout de fonction "SetHideDialogBox" */
      /** @r IMH12 @d 02/09/11 @a ISAT.ST @v IMH6.01.102 @s Gestion des statuts @c Modify avant cr‚ation interaction */
      /** @r IMH11 @d 22/06/11 @a ISAT.ST @v IMH6.01.102 @s Gestion des statuts @c Controle des boucles infinies */
      /** @r IMH10 @d 12/05/11 @a ISAT.ZW @v IMH6.01.102 @s Gestion des statuts @c Ajout commit si Request form Report */
      /** @r IMH09 @d 10/05/11 @a ISAT.ST @v IMH6.01.102 @s Gestion des statuts @c Correctif enchainement d'actions */
      /** @r IMH08 @d 31/03/11 @a ISAT.ST @v IMH6.01.102 @s Gestion des statuts @c Mode optionel pour les actions */
      /** @r IMH07 @d 14/03/11 @a ISAT.ZW @v IMH6.01.102 @s Gestion des statuts
          @c Ajout gestion des celendriers pour le calcul de d‚lai processus */
      /** @r IMH06 @d 18/02/11 @a ISAT.ST @v IMH6.01.102 @s Gestion des status @c COMMIT before userinterface */
      /** @r IMH05 @d 25/01/11 @a ISAT.ST @v IMH6.01.102 @s Gestion des status
          @c Ajout d'une autre option pour interactions
          @c Test retour cr‚ation corbeille */
      /** @r IMH04 @d 20/01/11 @a ISAT.LLT @v IMH6.01.102 @s Gestion des statuts
          @c Adaptations */
      /** @r IMH03 @d 11/01/11 @a ISAT.ST @v IMH6.01.102 @s Gestion des statuts
          @c Gestion des erreurs
          @c Fonction Action */
      /** @r IMH02 @d 31/12/10 @a ISAT.ST @v IMH6.01.102 @s Gestion des statuts @c Finalisation */
      /** @r IMH01 @d 09/12/10 @a ISAT.ZW @v IMH6.01.102 @s Gestion des statuts @c Creation Objet */
    }
    END.
  }
}