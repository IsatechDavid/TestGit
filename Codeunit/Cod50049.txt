OBJECT Codeunit 50049 Proc. Common Functions
{
  OBJECT-PROPERTIES
  {
    Date=09/01/12;
    Time=09:31:40;
    Modified=Yes;
    Version List=IMH6.01;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      AssistMode@1100281000 : Boolean;
      Text000@1100281003 : TextConst 'ENU=Function %1 error.\;FRA=Erreur fonction %1.\';
      Text001@1100281004 : TextConst 'ENU=%1 is not expected parameters.;FRA=%1 n''est pas le nombre de paramŠtre attendu.';
      Text002@1100281005 : TextConst 'ENU=Parameter %1 is not compatible.;FRA=Le paramŠtre %1 n''est pas compatible.';
      Text003@1100281010 : TextConst 'ENU=Parameters string error : %1.;FRA=Erreur dans la chaine de paramŠtre : %1.';
      Text099@1100281011 : TextConst 'ENU=Interaction template.;FRA=ModŠle d''interaction.';
      Error001@1000000000 : TextConst 'ENU=Interaction template %2 does not exists.;FRA=Le modŠle d''interaction %1 n''existe pas.';
      FunctTest200_Name@1100281002 : TextConst 'ENU=User permission;FRA=Autorisation utilisateur';
      FunctTest200_Assist@1100281001 : TextConst 'ENU=Permission filter;FRA=Filtre autorisation';
      FunctTest201_Name@1100281009 : TextConst 'ENU=AND Function;FRA=Fonction ET';
      FunctTest201_Assist@1100281008 : TextConst 'ENU=Function list separated with ",". Ex. : function1 no.,fonction2 no.[parameters];FRA=Liste fonction s‚par‚e par ",". Ex. : nø fonction1,nø fonction2[paramŠtres]';
      FunctTest202_Name@1100281013 : TextConst 'ENU=User assignment;FRA=Affectation utilisateur';
      FunctTest202_Assist@1100281012 : TextConst 'ENU=Assignment code;FRA=Code affectation : DGS,DPR,DFC';
      FunctTest203_Name@1000000001 : TextConst 'ENU=System user (NAS, WebService);FRA=Utilisateur systŠme (NAS, WebService)';
      FunctAct200_Name@1100281007 : TextConst 'ENU=User Message;FRA=Message utilisateur';
      FunctAct200_Assist@1100281006 : TextConst 'ENU=Message to show;FRA=Message … afficher … l''utilisateur';
      HideDialogBox@1100281014 : Boolean;

    PROCEDURE LoadTestFunctionList@1100281001(pTableNo@1100281000 : Integer);
    VAR
      lProcFunction@1100281001 : Record 50085;
    BEGIN
      // Source Table, Type, nø de la fonction, Description, ParamŠtre o/n
      WITH lProcFunction DO BEGIN
        InitFunction(pTableNo, "Function Type"::TestFunction, 200, FunctTest200_Name, TRUE);
        InitFunction(pTableNo, "Function Type"::TestFunction, 201, FunctTest201_Name, TRUE);
        InitFunction(pTableNo, "Function Type"::TestFunction, 202, FunctTest202_Name, TRUE);
        InitFunction(pTableNo, "Function Type"::TestFunction, 203, FunctTest203_Name, FALSE); //IMH04.ST
      END;
    END;

    PROCEDURE AssistTestFunction@1100281009(pTableNo@1100281002 : Integer;pFunctionNo@1100281000 : Integer;pParameters@1100281001 : Text[1024]);
    BEGIN
      AssistMode := TRUE;
      TestFunction(pTableNo, pFunctionNo, pParameters);
      AssistMode := FALSE;
    END;

    PROCEDURE TestFunction@1100281003(pTableNo@1100281004 : Integer;pFunctionNo@1100281000 : Integer;pParameters@1100281001 : Text[1024]) : Boolean;
    VAR
      lProcFunction@1100281003 : Record 50085;
    BEGIN
      CASE pFunctionNo OF
        200 : EXIT(UserHasRole(pParameters));
        201 : BEGIN
          IF AssistMode THEN
            EXIT(AndFunction(pParameters))
          ELSE
            ERROR(STRSUBSTNO(Text000, pFunctionNo));
        END;
        202 : EXIT(UserAssignment(pParameters));
        203 : EXIT(IsAutoUser); //IMH04.ST
      END;
      lProcFunction."Source Table No." := pTableNo;
      lProcFunction."Function No." := pFunctionNo;
      //<<IMH03.ISAT.EBA
      lProcFunction.SetHideDialogBox(HideDialogBox);
      //>>IMH03.ISAT.EBA
      lProcFunction.UndefinedFunction;
    END;

    PROCEDURE LoadActFunctionList@1100281012(pTableNo@1100281000 : Integer);
    VAR
      lProcFunction@1100281001 : Record 50085;
    BEGIN
      // Source Table, Type, nø de la fonction, Description, ParamŠtre o/n
      WITH lProcFunction DO BEGIN
        InitFunction(pTableNo, "Function Type"::ActionFunction, 200, FunctAct200_Name, TRUE);
      END;
    END;

    PROCEDURE AssistRunFunction@1100281008(pTableNo@1100281002 : Integer;pFunctionNo@1100281000 : Integer);
    BEGIN
      AssistMode := TRUE;
      TestFunction(pTableNo, pFunctionNo, '');
      AssistMode := FALSE;
    END;

    PROCEDURE RunFunction@1100281007(pTableNo@1100281004 : Integer;pFunctionNo@1100281000 : Integer;pParameters@1100281001 : Text[1024]) : Boolean;
    VAR
      lProcFunction@1100281003 : Record 50085;
    BEGIN
      CASE pFunctionNo OF
        200 : EXIT(ShowMessage(pParameters));
      END;
      lProcFunction."Source Table No." := pTableNo;
      lProcFunction."Function No." := pFunctionNo;
      //<<IMH03.ISAT.EBA
      lProcFunction.SetHideDialogBox(HideDialogBox);
      //>>IMH03.ISAT.EBA
      lProcFunction.UndefinedFunction;
    END;

    PROCEDURE "--LIB-------------"@1100281002();
    BEGIN
    END;

    PROCEDURE CountParameters@1100281014(pText@1100281000 : Text[1024];pParametersSep@1100281001 : Text[30]) rValue : Integer;
    VAR
      lText@1100281002 : Text[1024];
      lPos@1100281003 : Integer;
      lSepSize@1100281004 : Integer;
    BEGIN
      rValue := 0;
      lText := pText;
      lPos := STRPOS(lText, pParametersSep);
      lSepSize := STRLEN(pParametersSep);
      IF (lPos > 0) AND (lSepSize > 0) THEN BEGIN
        REPEAT
          rValue += 1;
          lText := COPYSTR(lText, lPos + lSepSize);
          lPos := STRPOS(lText, pParametersSep);
        UNTIL (lPos = 0);
      END;
      rValue += 1;
    END;

    PROCEDURE GetDirection@1100281011(pText@1100281000 : Text[30];VAR pDirection@1100281001 : 'MoreThan,LessThan,Equal,MoreOrEqual,LessOrEqual') : Boolean;
    BEGIN
      pDirection := 0;
      CASE pText OF
        '>'  : pDirection := pDirection::MoreThan;
        '<'  : pDirection := pDirection::LessThan;
        '='  : pDirection := pDirection::Equal;
        '>=' : pDirection := pDirection::MoreOrEqual;
        '<=' : pDirection := pDirection::LessOrEqual;
        ELSE
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE ErrorNbExpectedParam@1100281006(pFunctionName@1100281000 : Text[1024];pParameters@1100281001 : Integer);
    BEGIN
      ERROR(STRSUBSTNO(Text000, pFunctionName) + STRSUBSTNO(Text001, pParameters));
    END;

    PROCEDURE ErrorIncompatibleParam@1100281005(pFunctionName@1100281001 : Text[1024];pParameter@1100281000 : Text[1024]);
    BEGIN
      ERROR(STRSUBSTNO(Text000, pFunctionName) + STRSUBSTNO(Text002, pParameter));
    END;

    PROCEDURE RetrieveFctParam@1100281010(VAR pText@1100281000 : Text[1024];VAR pFunctionNo@1100281001 : Integer;VAR pFunctionParam@1100281002 : Text[1024]) : Boolean;
    VAR
      lText@1100281003 : Text[1024];
      lInt@1100281005 : Integer;
    BEGIN
      // R‚cup de fonction et param‚trages dans la chaine
      pFunctionNo := 0;
      pFunctionParam := '';
      IF (pText IN ['',',']) THEN
        ERROR(Text003, pText);

      IF NOT GetFctInList(pText, lText) THEN
        ERROR(Text003, pText);

      lInt := STRPOS(lText, '[');
      IF lInt = 0 THEN BEGIN // Fonction sans paramŠtres
        IF NOT EVALUATE(pFunctionNo, lText) THEN
          ERROR(Text003, pText);
        EXIT(TRUE);
      END;
      IF lInt = 1 THEN // Erreur
        ERROR(Text003, pText);

      IF lText[STRLEN(lText)] <> ']' THEN
        ERROR(Text003, pText);

      // Fonction avec paramŠtres
      IF NOT EVALUATE(pFunctionNo, COPYSTR(lText, 1, lInt-1)) THEN
        ERROR(Text003, pText);
      lText := COPYSTR(lText,lInt);
      pFunctionParam := COPYSTR(lText,2, STRLEN(lText)-2);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetFctInList@1100281018(VAR pText@1100281001 : Text[1024];VAR pFunctionText@1100281000 : Text[1024]) rValue : Boolean;
    VAR
      lText@1100281005 : Text[1024];
      lParamLevel@1100281004 : Integer;
      lInt@1100281003 : Integer;
    BEGIN
      // Isole la chaine de fonction
      lInt := 1;
      REPEAT
        IF lInt = STRLEN(pText) THEN BEGIN
          pFunctionText := pText;
          pText := '';
          EXIT(TRUE);
        END;

        CASE pText[lInt] OF
          '[' : lParamLevel += 1;
          ']' : BEGIN
            lParamLevel -= 1;
            IF lParamLevel < 0 THEN
              ERROR(STRSUBSTNO(Text003, pText));
          END;
          ',' :
            IF lParamLevel = 0 THEN
              rValue := TRUE;
        END;
        lInt += 1;
      UNTIL rValue;
      pFunctionText := COPYSTR(pText, 1, lInt -2);
      pText := COPYSTR(pText, lInt);
    END;

    PROCEDURE "--TEST-FUNCTIONS--"@1100281004();
    BEGIN
    END;

    PROCEDURE UserHasRole@1100281000(pText@1100281000 : Text[1024]) : Boolean;
    VAR
      lUserSpecPerm@1100281002 : Record 50099;
    BEGIN
      IF AssistMode THEN BEGIN
        MESSAGE(FunctTest200_Assist);
        EXIT;
      END;
      lUserSpecPerm.SETRANGE("User ID", USERID);
      lUserSpecPerm.SETFILTER("Permission Code", pText);
      EXIT(NOT lUserSpecPerm.ISEMPTY);
    END;

    PROCEDURE AndFunction@1100281021(pText@1100281000 : Text[1024]) : Boolean;
    BEGIN
      IF AssistMode THEN
        MESSAGE(FunctTest201_Assist);
      EXIT(FALSE);
    END;

    PROCEDURE UserAssignment@1100281019(pText@1100281000 : Text[1024]) : Boolean;
    VAR
      lUserSetup@1100281002 : Record 91;
    BEGIN
      IF AssistMode THEN BEGIN
        MESSAGE(FunctTest202_Assist);
        EXIT;
      END;
      IF NOT lUserSetup.GET(USERID) THEN
        EXIT(FALSE);
      CASE UPPERCASE(pText) OF
        'DGS' : EXIT(lUserSetup."Show To DGS");
        'DPR' : EXIT(lUserSetup."Show To DPR");
        'DFC' : EXIT(lUserSetup."Show To DFC");
        ELSE
          ERROR(Text002, pText);
      END;
    END;

    PROCEDURE IsAutoUser@1000000000() : Boolean;
    BEGIN
      //IMH04.ST
      IF AssistMode THEN
        EXIT;
      EXIT(NOT GUIALLOWED);
    END;

    PROCEDURE "--ACT-FUNCTIONS--"@1100281017();
    BEGIN
    END;

    PROCEDURE ShowMessage@1100281016(pText@1100281000 : Text[1024]) : Boolean;
    BEGIN
      //<<IMH03.ISAT.EBA
      IF HideDialogBox THEN
        EXIT;
      //>>IMH03.ISAT.EBA
      IF AssistMode THEN BEGIN
        MESSAGE(FunctAct200_Assist);
        EXIT;
      END;
      MESSAGE(pText);
      EXIT(TRUE);
    END;

    PROCEDURE SendMailToUser@1100281013(pUser@1100281000 : Text[30];pParameters@1100281001 : Text[1024];VAR pSegLine@1100281006 : Record 5077;pAssistMode@1100281005 : Boolean;pHideWizard@1100281007 : Integer) : Boolean;
    VAR
      lUserSetup@1100281002 : Record 91;
      lContact@1100281003 : Record 5050;
      lSegmentLine@1100281004 : TEMPORARY Record 5077;
      lEmployee@1000000000 : Record 5200;
      lInteractTemplate@1000000001 : Record 5064;
    BEGIN
      IF pAssistMode THEN BEGIN
        MESSAGE(Text099);
        EXIT;
      END;
      {
      IF NOT lUserSetup.GET(pUser) THEN
        EXIT;
      lUserSetup.CALCFIELDS("Contact No.");
      IF NOT lContact.GET(lUserSetup."Contact No.") THEN
        EXIT;
        }

      //<<IMH05.ST
      IF pParameters <> '' THEN BEGIN
        IF STRLEN(pParameters) > MAXSTRLEN(lInteractTemplate.Code) THEN
          ERROR(STRSUBSTNO(Error001, pParameters))
        ELSE
          IF NOT lInteractTemplate.GET(pParameters) THEN
            ERROR(STRSUBSTNO(Error001, pParameters));
      END;
      //>>IMH05.ST

      lUserSetup.GET(pUser);
      lUserSetup.CALCFIELDS("Contact No.");
      lEmployee.GET(lUserSetup."Employee No.");
      lEmployee.TESTFIELD("Contact No.");
      lContact.GET(lUserSetup."Contact No.");

      pSegLine."Correspondence Type" := pSegLine."Correspondence Type"::"E-Mail";
      pSegLine."Force Correspondence Type" := TRUE;
      pSegLine.SetHideWizard(pHideWizard);
      pSegLine.CreateInteractionFromContact2(lContact, pParameters);
      EXIT(TRUE);
    END;

    PROCEDURE SetHideDialogBox@57(NewHideDialogBox@1000 : Boolean);
    BEGIN
      //<<IMH03.ISAT.EBA
      HideDialogBox := NewHideDialogBox;
      //>>IMH03.ISAT.EBA
    END;

    BEGIN
    {
      /** @r IMH05 @d 08/12/11 @a ISTA.ST @v IMH6.01.102 @s Gestion des statuts @c Controle du modŠle interaction */
      /** @r IMH04 @d 02/12/11 @a ISAT.ST @v IMH6.01.102 @s Gestion des statuts @c Ajout fonction IsAutoUser */
      /** @r IMH03 @d 15/11/11 @a ISAT.EBA @v IMH6.01.102 @s Gestion des statuts
          @c Ajout de fonction "SetHideDialogBox" */
      /** @r IMH02 @d 17/03/11 @a ISAT.ST @v IMH6.01.102 @s Gestion des statuts
          @c Ajout fonction UserHasRole */
      /** @r IMH01 @d 11/01/11 @a ISAT.ST @v IMH6.01.102 @s Gestion des statuts
          @c Cr‚ation objet : codeunit de fonctions communes pour les process
          @c par exemple roles */
    }
    END.
  }
}