OBJECT Codeunit 50050 Tray Line Management
{
  OBJECT-PROPERTIES
  {
    Date=10/06/14;
    Time=16:41:30;
    Modified=Yes;
    Version List=IMH6.01,5005,IMH6.01.P010;
  }
  PROPERTIES
  {
    Permissions=TableData 50048=rim;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ResultLine@1100281000 : Record 50048;
      Text001@1100281001 : TextConst 'ENU=Tray line has been tranfered to team %1.;FRA=L''activit‚ a ‚t‚ transf‚r‚e … la corbeille %1.';
      AutoProcess@1100281002 : Boolean;
      TraySetup@1100281003 : Record 50094;
      Text005@1100281004 : TextConst 'ENU=Do you want to affect the DT?;FRA=Voulez-vous affecter la  DT?';
      NewTrayLine@1100281005 : Record 50048;
      Text008@1100281006 : TextConst 'ENU=Export Attachment;FRA=Exporter document';

    PROCEDURE CreateTLFromTL@1(VAR pTrayLine@1000 : Record 50048;pDefaultTeam@1100281007 : Code[10];pDefaultTask@1100281008 : Code[10];pShowWizard@1100281004 : Boolean) : Boolean;
    VAR
      lTempTrayLine@1100281005 : TEMPORARY Record 50048;
      lCreateTrayLineWizard@1100281006 : Form 50124;
    BEGIN
      //IMH01 isat.zw
      lTempTrayLine.INIT;
      CopyTrayLine(pTrayLine, lTempTrayLine, pDefaultTeam, pDefaultTask); //IMH05.ST
      lTempTrayLine.INSERT;

      IF pShowWizard THEN BEGIN
        lCreateTrayLineWizard.SETRECORD(lTempTrayLine);
        lCreateTrayLineWizard.SETTABLEVIEW(lTempTrayLine);
        COMMIT;
        lCreateTrayLineWizard.RUNMODAL;
        IF NOT lCreateTrayLineWizard.GetIsOk THEN
          EXIT;
        lCreateTrayLineWizard.GetValue(lTempTrayLine);
      END;

      EXIT(CreateTrayLine(lTempTrayLine));
    END;

    LOCAL PROCEDURE CopyTrayLine@1100281015(VAR pTrayLine@1100281002 : Record 50048;VAR pResultTrayLine@1100281003 : Record 50048;pDefaultTeam@1100281001 : Code[10];pDefaultTask@1100281000 : Code[10]);
    VAR
      lCont@1100281012 : Record 5050;
      lSalesPurchPerson@1100281011 : Record 13;
      lTeam@1100281010 : Record 5083;
      lTrayTask@1100281009 : Record 50080;
      lCampaign@1100281008 : Record 5071;
      lService@1100281007 : Record 50066;
      lServiceHeader@1100281006 : Record 5900;
      lServIntervLine@1100281005 : Record 50075;
      lCustomer@1100281004 : Record 18;
      lDocumentQueue@1100281013 : Record 50054;
      lServiceInterventionQuote@1100281014 : Record 50076;
      lNetworkVisit@1000000000 : Record 50105;
      lUpdateTeamCode@1100281015 : Boolean;
    BEGIN
      //IMH05.ST
      WITH pResultTrayLine DO BEGIN
        IF pTrayLine.GETFILTER("Linked To Table") <> '' THEN BEGIN
          VALIDATE("Linked To Table", pTrayLine.GETRANGEMIN("Linked To Table"));
          SETRANGE("Linked To Table", "Linked To Table");
        END;

        IF pTrayLine.GETFILTER("Team Code") <> '' THEN BEGIN
          IF lTeam.GET(pTrayLine.GETFILTER("Team Code")) THEN BEGIN
            VALIDATE("Team Code", lTeam.Code);
            SETRANGE("Team Code", "Team Code");
          END;
        END;
        IF ("Team Code" = '') AND (pDefaultTeam <> '') THEN
          IF lTeam.GET(pDefaultTeam) THEN
            VALIDATE("Team Code", lTeam.Code);

        //<<IMH31
        IF "Team Code" = '' THEN
          lUpdateTeamCode := TRUE;
        //>>IMH31

        IF (pTrayLine.GETFILTER("Task Code") <> '') THEN
          IF lTrayTask.GET("Linked To Table", pTrayLine.GETFILTER("Task Code")) THEN BEGIN
            SetSkipCalcTeamCode(TRUE);  //IMH30
            VALIDATE("Task Code", lTrayTask."Task Code");
            SETRANGE("Task Code", "Task Code");
          END;

        IF ("Task Code" = '') AND (pDefaultTask <> '') THEN
          IF lTrayTask.GET("Linked To Table", pDefaultTask) THEN BEGIN
            SetSkipCalcTeamCode(TRUE);  //IMH30
            VALIDATE("Task Code", lTrayTask."Task Code");
          END;

        //<<IMH31
        IF lUpdateTeamCode THEN BEGIN
          IF pTrayLine.GETFILTER("Service Header No.") <> '' THEN BEGIN
            IF lServiceHeader.GET(lServiceHeader."Document Type"::Invoice, pTrayLine.GETFILTER("Service Header No.")) THEN
              VALIDATE("Team Code", lServiceHeader.GetTeamByServiceTask(lServiceHeader, "Task Code"));
          END ELSE BEGIN
            IF pTrayLine."Service Header No." <> '' THEN
              IF lServiceHeader.GET(lServiceHeader."Document Type"::Invoice, pTrayLine."Service Header No.") THEN
                VALIDATE("Team Code", lServiceHeader.GetTeamByServiceTask(lServiceHeader, "Task Code"));
          END;
        END;
        //>>IMH31

        //<<IMH08.PC
        IF pTrayLine.Description <> '' THEN BEGIN
          Description := pTrayLine.Description;
        END;
        IF pTrayLine."Short Comment" <> '' THEN BEGIN
          "Short Comment" := pTrayLine."Short Comment";
        END;
        //>>IMH08.PC

        IF pTrayLine.GETFILTER("Contact No.") <> '' THEN
          IF lCont.GET(pTrayLine.GETFILTER("Contact No.")) THEN BEGIN
            VALIDATE("Contact No.",lCont."No.");
            SETRANGE("Contact No.","Contact No.");
          END;

        IF pTrayLine.GETFILTER("Assigned Salesperson Code") <> '' THEN
          IF lSalesPurchPerson.GET(pTrayLine.GETFILTER("Assigned Salesperson Code")) THEN BEGIN
            VALIDATE("Assigned Salesperson Code", lSalesPurchPerson.Code);
            SETRANGE("Assigned Salesperson Code","Assigned Salesperson Code");
          END;

        IF pTrayLine.GETFILTER("Campaign No.") <> '' THEN
          IF lCampaign.GET(pTrayLine.GETFILTER("Campaign No.")) THEN BEGIN
            VALIDATE("Campaign No.", lCampaign."No.");
            SETRANGE("Campaign No.","Campaign No.");
          END;
        //<<IMH17
        IF pTrayLine.GETFILTER("Visit No.") <> '' THEN
          IF lNetworkVisit.GET(pTrayLine.GETFILTER("Visit No.")) THEN BEGIN
            VALIDATE("Visit No.", lNetworkVisit."No.");
            SETRANGE("Visit No.","Visit No.");
          END;
        //>>IMH17
        IF pTrayLine.GETFILTER("Corporate No.") <> '' THEN
          IF lCustomer.GET(pTrayLine.GETFILTER("Corporate No.")) THEN BEGIN
            VALIDATE("Corporate No.", lCustomer."No.");
            SETRANGE("Corporate No.", "Corporate No.");
          END;

        IF pTrayLine.GETFILTER("Service No.") <> '' THEN
          IF lService.GET(pTrayLine.GETRANGEMIN("Service No.")) THEN BEGIN
            VALIDATE("Service No.", lService."Service No.");
            SETRANGE("Service No.","Service No.");
          END;
        IF pTrayLine.GETFILTER("Service Header No.") <> '' THEN
          IF lServiceHeader.GET(lServiceHeader."Document Type"::Invoice, pTrayLine.GETFILTER("Service Header No.")) THEN BEGIN
            VALIDATE("Service No.", lServiceHeader."Service No.");
            VALIDATE("Service Header No.", lServiceHeader."No.");
            SETRANGE("Service No.", "Service No.");
            SETRANGE("Service Header No.","Service Header No.");
          END;
        IF pTrayLine.GETFILTER("Intervention Line No.") <> '' THEN
          IF lServIntervLine.GET(pTrayLine.GETFILTER("Service Header No."),
                                 pTrayLine.GETRANGEMIN("Intervention Line No.")) THEN BEGIN
            VALIDATE("Service No.", lServIntervLine."Service No.");
            VALIDATE("Service Header No.", lServIntervLine."Service Header No.");
            VALIDATE("Intervention Line No.", lServIntervLine."Line No.");
            VALIDATE("Intervention No.", lServIntervLine."Intervention No.");
            SETRANGE("Service Header No.", "Service Header No.");
            SETRANGE("Service No.", "Service No.");
            SETRANGE("Intervention Line No.", "Intervention Line No.");
            SETRANGE("Intervention No.", "Intervention No.");
          END;

        IF pTrayLine.GETFILTER("Intervention Quote Line No.") <> '' THEN
          IF lServiceInterventionQuote.GET(pTrayLine.GETFILTER("Service Header No."),
                                 pTrayLine.GETRANGEMIN("Intervention Line No."),
                                 pTrayLine.GETRANGEMIN("Intervention Quote Line No.")) THEN BEGIN
            VALIDATE("Service No.", lServIntervLine."Service No.");
            VALIDATE("Service Header No.", lServIntervLine."Service Header No.");
            VALIDATE("Intervention Line No.", lServIntervLine."Line No.");
            VALIDATE("Intervention No.", lServIntervLine."Intervention No.");
            VALIDATE("Intervention Quote Line No.", lServiceInterventionQuote."Line No.");
            SETRANGE("Service Header No.", "Service Header No.");
            SETRANGE("Service No.", "Service No.");
            SETRANGE("Intervention Line No.", "Intervention Line No.");
            SETRANGE("Intervention No.", "Intervention No.");
            SETRANGE("Intervention Quote Line No.", "Intervention Quote Line No.");
          END;

        IF pTrayLine.GETFILTER("Document Flow Code") <> '' THEN BEGIN
          VALIDATE("Document Flow Code", pTrayLine."Document Flow Code");
          SETRANGE("Document Flow Code", "Document Flow Code");
          VALIDATE("Document Queue Type", pTrayLine."Document Queue Type");
          SETRANGE("Document Queue Type", "Document Queue Type");
          VALIDATE("Doc. Queue Entry No.", pTrayLine."Doc. Queue Entry No.");
          SETRANGE("Doc. Queue Entry No.", "Doc. Queue Entry No.");
          Description := pTrayLine.Description;
        END;
        //<<IMH10.ISAT.EBA
        IF pTrayLine."Corporate No." <> '' THEN
          VALIDATE("Corporate No.",pTrayLine."Corporate No.");
        IF pTrayLine."Service Reference No." <> '' THEN
          "Service Reference No." := pTrayLine."Service Reference No.";
        IF pTrayLine."Mission No." <> '' THEN
          "Mission No." := pTrayLine."Mission No.";
        IF pTrayLine."DARAV Message ID" <> '' THEN
          "DARAV Message ID" := pTrayLine."DARAV Message ID";
        IF pTrayLine."EAI Entry No." <> '' THEN
          "EAI Entry No." := pTrayLine."EAI Entry No.";
        //>>IMH10.ISAT.EBA
      END;
    END;

    PROCEDURE CreateTrayLine@1100281008(pTrayLine@1100281000 : Record 50048) : Boolean;
    VAR
      lTrayLine@1100281001 : Record 50048;
      lTrayTask@1100281003 : Record 50080;
      lTeamSubst@1100281002 : Codeunit 50052;
    BEGIN
      //IMH01 isat.zw
      //<<IMH22.PC
      //<<IMH23
      //IF lTrayTask.GET(pTrayLine."Source Table No.",pTrayLine."Task Code") THEN BEGIN
      IF lTrayTask.GET(pTrayLine."Linked To Table",pTrayLine."Task Code") THEN BEGIN
      //>>IMH23
        IF NOT lTrayTask.Enable THEN BEGIN
          EXIT;
        END;
      END;
      //>>IMH22.PC
      lTrayLine := pTrayLine;
      lTeamSubst.FindSubstTeam(lTrayLine); //IMH05.ST
      lTrayLine.Status := pTrayLine.Status::"Not Started";
      lTrayLine."Entry No." := 0;
      lTrayLine.Manual := NOT AutoProcess; //IMH05.ST
      lTrayLine.INSERT(TRUE);
      ResultLine := lTrayLine; //IMH03.ST
      EXIT(TRUE);
    END;

    PROCEDURE CreateTLFromContact@1100281012(pContact@1100281000 : Record 5050;pTeamCode@1100281001 : Code[10];pTaskCode@1100281002 : Code[10];pShowWizard@1100281003 : Boolean) : Boolean;
    VAR
      lTempTrayLine@1100281004 : Record 50048;
    BEGIN
      //IMH01 isat.zw
      lTempTrayLine.SETRANGE("Linked To Table", lTempTrayLine."Linked To Table"::Contact);
      lTempTrayLine.SETRANGE("Contact No.", pContact."No.");

      EXIT(CreateTLFromTL(lTempTrayLine, pTeamCode, pTaskCode, pShowWizard));
    END;

    PROCEDURE CreateTLFromService@1100281002(pService@1100281000 : Record 50066;pTeamCode@1100281001 : Code[10];pTaskCode@1100281002 : Code[10];pShowWizard@1100281003 : Boolean) : Boolean;
    VAR
      lTempTrayLine@1100281004 : Record 50048;
    BEGIN
      //IMH01 isat.zw
      //<<IMH10.ISAT.EBA
      lTempTrayLine := NewTrayLine;
      //>>IMH10.ISAT.EBA
      lTempTrayLine.SETRANGE("Linked To Table", lTempTrayLine."Linked To Table"::Service);
      lTempTrayLine.SETRANGE("Service No.", pService."Service No.");
      lTempTrayLine.SETRANGE("Campaign No.", pService."Campaign No.");
      lTempTrayLine.SETRANGE("Contact No.", pService."Contact No.");
      lTempTrayLine.SETRANGE("Corporate No.", pService."Corporate No.");

      EXIT(CreateTLFromTL(lTempTrayLine, pTeamCode, pTaskCode, pShowWizard));
    END;

    PROCEDURE CreateTLFromServHeader@1100281003(pServiceHeader@1100281000 : Record 5900;pTeamCode@1100281002 : Code[10];pTaskCode@1100281001 : Code[10];pShowWizard@1100281003 : Boolean) : Boolean;
    VAR
      lTempTrayLine@1100281004 : Record 50048;
    BEGIN
      //IMH01 isat.zw
      //<<IMH10.ISAT.EBA
      lTempTrayLine := NewTrayLine;
      //>>IMH10.ISAT.EBA
      lTempTrayLine.SETRANGE("Linked To Table", lTempTrayLine."Linked To Table"::ServiceHeader);
      lTempTrayLine.SETRANGE("Service Header No.", pServiceHeader."No.");
      lTempTrayLine.SETRANGE("Service No.", pServiceHeader."Service No.");
      lTempTrayLine.SETRANGE("Campaign No.", pServiceHeader."Campaign No.");
      lTempTrayLine.SETRANGE("Contact No.", pServiceHeader."Contact No.");
      lTempTrayLine.SETRANGE("Corporate No.", pServiceHeader."Corporate No.");

      EXIT(CreateTLFromTL(lTempTrayLine, pTeamCode, pTaskCode, pShowWizard));
    END;

    PROCEDURE CreateTLFromIntervention@1100281004(pInterventionLine@1100281000 : Record 50075;pTeamCode@1100281002 : Code[10];pTaskCode@1100281001 : Code[10];pShowWizard@1100281003 : Boolean) : Boolean;
    VAR
      lTempTrayLine@1100281004 : Record 50048;
    BEGIN
      //IMH01 isat.zw
      lTempTrayLine.SETRANGE("Linked To Table", lTempTrayLine."Linked To Table"::Intervention);
      lTempTrayLine.SETRANGE("Service Header No.", pInterventionLine."Service Header No.");
      lTempTrayLine.SETRANGE("Intervention Line No.", pInterventionLine."Line No.");
      lTempTrayLine.SETRANGE("Contact No.", pInterventionLine."Contact No.");
      lTempTrayLine.SETRANGE("Corporate No.", pInterventionLine."Corporate No.");
      lTempTrayLine.SETRANGE("Service No.", pInterventionLine."Service No.");

      EXIT(CreateTLFromTL(lTempTrayLine, pTeamCode, pTaskCode, pShowWizard));
    END;

    PROCEDURE CreateTLFromIntervQuote@1100281011(pIntervQuote@1100281000 : Record 50076;pTeamCode@1100281002 : Code[10];pTaskCode@1100281001 : Code[10];pShowWizard@1100281003 : Boolean) : Boolean;
    VAR
      lTempTrayLine@1100281004 : Record 50048;
    BEGIN
      lTempTrayLine.SETRANGE("Linked To Table", lTempTrayLine."Linked To Table"::InterventionQuote);
      lTempTrayLine.SETRANGE("Service Header No.", pIntervQuote."Service Header No.");
      lTempTrayLine.SETRANGE("Intervention Line No.",pIntervQuote."Intervention Line No.");
      lTempTrayLine.SETRANGE("Intervention Quote Line No.",pIntervQuote."Line No.");
      lTempTrayLine.SETRANGE("Contact No.", pIntervQuote."Contact No.");
      lTempTrayLine.SETRANGE("Corporate No.", pIntervQuote."Corporate No.");

      EXIT(CreateTLFromTL(lTempTrayLine, pTeamCode, pTaskCode, pShowWizard));
    END;

    PROCEDURE CreateTLFromDocument@1100281005(pDocumentQueue@1100281000 : Record 50054;pTeamCode@1100281002 : Code[10];pTaskCode@1100281001 : Code[10];pShowWizard@1100281003 : Boolean) : Boolean;
    VAR
      lTempTrayLine@1100281004 : Record 50048;
    BEGIN
      //IMH01 isat.zw
      lTempTrayLine.SETRANGE("Linked To Table", lTempTrayLine."Linked To Table"::DocumentQueue);
      lTempTrayLine.SETRANGE("Document Flow Code", pDocumentQueue."Flow Code");
      lTempTrayLine.SETRANGE("Document Queue Type", pDocumentQueue."Queue Type");
      lTempTrayLine.SETRANGE("Doc. Queue Entry No.", pDocumentQueue."Entry No.");
      lTempTrayLine.VALIDATE("Linked To Table", lTempTrayLine."Linked To Table"::DocumentQueue);
      lTempTrayLine.VALIDATE("Document Flow Code", pDocumentQueue."Flow Code");
      lTempTrayLine.VALIDATE("Document Queue Type", pDocumentQueue."Queue Type");
      lTempTrayLine.VALIDATE("Doc. Queue Entry No.", pDocumentQueue."Entry No.");
      lTempTrayLine.Description := pDocumentQueue.Description;

      IF pDocumentQueue."Contact No." <> '' THEN
        lTempTrayLine.SETRANGE("Contact No.", pDocumentQueue."Contact No.");
      IF pDocumentQueue."Corporate No." <> '' THEN
        lTempTrayLine.SETRANGE("Corporate No.", pDocumentQueue."Corporate No.");
      IF pDocumentQueue."Service No." <> '' THEN
        lTempTrayLine.SETRANGE("Service No.", pDocumentQueue."Service No.");
      IF pDocumentQueue."Service Document No." <> '' THEN
        lTempTrayLine.SETRANGE("Service Header No.", pDocumentQueue."Service Document No.");
      IF pDocumentQueue."Service Intervention Line No." <> 0 THEN
        lTempTrayLine.SETRANGE("Intervention Line No.", pDocumentQueue."Service Intervention Line No.");

      EXIT(CreateTLFromTL(lTempTrayLine, pTeamCode, pTaskCode, pShowWizard));
    END;

    PROCEDURE CreateTLFromCompletnessTask@1100281018(pCompletnessTask@1100281000 : Record 50004;pTeamCode@1100281001 : Code[10];pTaskCode@1100281002 : Code[10];pShowWizard@1100281003 : Boolean) : Boolean;
    VAR
      lTempTrayLine@1100281004 : Record 50048;
    BEGIN
      //IMH01 isat.zw
      lTempTrayLine.SETRANGE("Linked To Table", lTempTrayLine."Linked To Table"::CompletnessTask);
      lTempTrayLine.SETRANGE("Linked Document No.", pCompletnessTask."Document Code");
      lTempTrayLine.SETRANGE("Contact No.", pCompletnessTask."Provider No.");

      EXIT(CreateTLFromTL(lTempTrayLine, pTeamCode, pTaskCode, pShowWizard));
    END;

    PROCEDURE CreateTLFromSearch@1100281010(pServiceHeaderNo@1100281000 : Code[20]);
    VAR
      lServiceHeader@1100281003 : Record 5900;
      lProviderSetup@1100281002 : Record 50011;
      lTeamCode@1100281001 : Code[10];
    BEGIN
      IF pServiceHeaderNo <> '' THEN BEGIN
        lProviderSetup.GET();
        lServiceHeader.GET(lServiceHeader."Document Type"::Invoice,pServiceHeaderNo);
        //<<IMH29
        lProviderSetup.TESTFIELD("Deprivation Task Code");
        lTeamCode := lServiceHeader.GetTeamByServiceTask(lServiceHeader, lProviderSetup."Deprivation Task Code");

        //IF lServiceHeader."Default Team Code" = '' THEN BEGIN
        IF lTeamCode = '' THEN BEGIN
        //>>IMH29
          lProviderSetup.TESTFIELD("Deprivation Team Code");
          lTeamCode := lProviderSetup."Deprivation Task Code";
        END;
          //lTeamCode := lServiceHeader."Default Team Code";

        CreateTLFromServHeader(lServiceHeader,lTeamCode,lProviderSetup."Deprivation Task Code",TRUE);
      END;
    END;

    PROCEDURE CreateTLForCampaign@1000000003(pCampaign@1000000001 : Record 5071;pInterventionLine@1100281000 : Record 50075;pProviderNo@1000000000 : Code[20];pTeamCode@1100281002 : Code[10];pTaskCode@1100281001 : Code[10];pShowWizard@1100281003 : Boolean) : Boolean;
    VAR
      lTempTrayLine@1100281004 : Record 50048;
    BEGIN
      //IMH16 isat.zw
      lTempTrayLine := NewTrayLine;
      lTempTrayLine.SETRANGE("Linked To Table", lTempTrayLine."Linked To Table"::Intervention);
      lTempTrayLine.SETRANGE("Service Header No.", pInterventionLine."Service Header No.");
      lTempTrayLine.SETRANGE("Intervention Line No.", pInterventionLine."Line No.");
      lTempTrayLine.SETRANGE("Service No.", pInterventionLine."Service No.");
      lTempTrayLine.SETRANGE("Campaign No.", pCampaign."No.");
      lTempTrayLine.SETRANGE("Contact No.", pInterventionLine."Contact No.");
      lTempTrayLine.SETRANGE("Corporate No.", pInterventionLine."Corporate No.");

      EXIT(CreateTLFromTL(lTempTrayLine, pTeamCode, pTaskCode, pShowWizard));
    END;

    PROCEDURE CreateTLFromVisit@1000000006(pNetworkVisit@1000000001 : Record 50105;pTeamCode@1100281002 : Code[10];pTaskCode@1100281001 : Code[10];pShowWizard@1100281003 : Boolean) : Boolean;
    VAR
      lTempTrayLine@1100281004 : Record 50048;
    BEGIN
      //IMH17 isat.zw
      lTempTrayLine := NewTrayLine;
      lTempTrayLine.SETRANGE("Linked To Table", lTempTrayLine."Linked To Table"::Contact);
      lTempTrayLine.SETRANGE("Visit No.", pNetworkVisit."No.");
      lTempTrayLine.SETRANGE("Contact No.", pNetworkVisit."Provider No.");

      EXIT(CreateTLFromTL(lTempTrayLine, pTeamCode, pTaskCode, pShowWizard));
    END;

    PROCEDURE CreateServiceByTrayLine@1100281000(VAR pTrayLine@1100281000 : Record 50048;pShowServiceCard@1100281005 : Boolean);
    VAR
      lCreateServiceForm@1100281001 : Form 50090;
      lService@1100281002 : Record 50066;
      lContact@1100281003 : Record 5050;
      lDocumentFlowMgt@1100281004 : Codeunit 50006;
      lDocumentQueueHistory@1100281006 : Record 50109;
      lDocumentQueue@1100281007 : Record 50054;
    BEGIN
      //IMH01 isat.zw
      //<<IMH02
      //pTrayLine.TESTFIELD("Service No.", 0);
      pTrayLine.TESTFIELD("Service No.", '');
      //>>IMH02
      lContact.GET(pTrayLine."Contact No.");
      lContact.CreateService(lService, TRUE);
      pTrayLine.VALIDATE("Service No.", lService."Service No.");
      pTrayLine."Service Header No." := '';
      pTrayLine."Intervention Line No." := 0;
      pTrayLine."Intervention No." := 0;
      pTrayLine.MODIFY(TRUE);

      IF lDocumentQueueHistory.GET(pTrayLine."Document Flow Code",
          pTrayLine."Document Queue Type", pTrayLine."Doc. Queue Entry No.") THEN BEGIN
        lDocumentQueueHistory."Service No." := lService."Service No.";
        lDocumentQueueHistory.MODIFY(FALSE);
        lDocumentFlowMgt.CreateInteractionByHistoryLine(lDocumentQueueHistory);
        IF lDocumentQueue.GET(pTrayLine."Document Flow Code",
            pTrayLine."Document Queue Type", pTrayLine."Doc. Queue Entry No.") THEN
          lDocumentQueue.DELETE(FALSE);
      END;

      //lInteractionLogEntry."Service No." :=
      {
      IF lContact.GET(pTrayLine."Contact No.") THEN
        IF lContact."Service Contact" = lContact."Service Contact"::Beneficiary THEN
          lService.VALIDATE("Contact No.", lContact."No.");
      //<<IMH02
      //La cr‚ation de service ne se fait plus par wizzard
      IF ISSERVICETIER THEN
        PAGE.RUNMODAL(PAGE::"Service Card",lService)
      ELSE
        FORM.RUNMODAL(FORM::"Service Card",lService);
      {
      lCreateServiceForm.SetNotShowCard(TRUE);
      lCreateServiceForm.SetupForm(lService);
      lCreateServiceForm.RUNMODAL;
      IF lCreateServiceForm.GetIsOk THEN
        lCreateServiceForm.GetValue(lService)
      ELSE
        EXIT;
      }
      //>>IMH02
      //MAJ nø service action
      pTrayLine.VALIDATE("Service No.", lService."Service No.");
      pTrayLine.MODIFY(FALSE);
      COMMIT;

      //Affectation file de document a la service cr‚‚e
      IF lDocumentQueue.GET(pTrayLine."Document Flow Code", pTrayLine."Document Queue Type", pTrayLine."Doc. Queue Entry No.") THEN
      BEGIN
        lDocumentQueue."Service Document Type" := lDocumentQueue."Service Document Type"::Service;
        lDocumentQueue.VALIDATE("Service No.", lService."Service No.");
        lDocumentQueue.Status := lDocumentQueue.Status::Done;
        lDocumentQueue.MODIFY(FALSE);
        lDocumentQueue.SETRECFILTER;
        CODEUNIT.RUN(CODEUNIT::"Doc. Queue-Post",lDocumentQueue);
      END;


      IF pShowServiceCard THEN
        FORM.RUNMODAL(FORM::"Service Card", lService);
      }
    END;

    PROCEDURE CreateAffectServHeadByTrayLine@1000000000(VAR pTrayLine@1100281000 : Record 50048;pShowCard@1100281005 : Boolean);
    VAR
      lCreateServiceForm@1100281001 : Form 50090;
      lService@1100281002 : Record 50066;
      lServiceHeader@1000000000 : Record 5900;
      lDocumentFlowMgt@1100281004 : Codeunit 50006;
      lDocumentQueueHistory@1100281006 : Record 50109;
      lDocumentQueue@1100281007 : Record 50054;
    BEGIN
      //IMH13 isat.zw
      pTrayLine.TESTFIELD("Service No.");
      lService.GET(pTrayLine."Service No.");
      lService.CreateServiceHeader(lServiceHeader, '');

      pTrayLine.VALIDATE("Service No.", lService."Service No.");
      pTrayLine.VALIDATE("Service Header No.", lServiceHeader."No.");
      pTrayLine."Intervention Line No." := 0;
      pTrayLine."Intervention No." := 0;
      pTrayLine.MODIFY(TRUE);

      IF lDocumentQueueHistory.GET(pTrayLine."Document Flow Code",
          pTrayLine."Document Queue Type", pTrayLine."Doc. Queue Entry No.") THEN BEGIN
        lDocumentQueueHistory."Service No." := lService."Service No.";
        lDocumentQueueHistory."Service Header No." := pTrayLine."Service Header No.";
        lDocumentQueueHistory."Service Intervention Line No." := pTrayLine."Intervention Line No.";
        lDocumentQueueHistory.MODIFY(FALSE);
        lDocumentFlowMgt.CreateInteractionByHistoryLine(lDocumentQueueHistory);
        IF lDocumentQueue.GET(pTrayLine."Document Flow Code",
            pTrayLine."Document Queue Type", pTrayLine."Doc. Queue Entry No.") THEN
          lDocumentQueue.DELETE(FALSE);
      END;

      IF pShowCard THEN BEGIN
        COMMIT;
        lServiceHeader.ShowCard(FALSE);
        //CreateTLFromServHeader(lServiceHeader, '', '', TRUE); //IMH15
      END;
    END;

    PROCEDURE CreateServiceHeaderByTrayLine@1100281020(VAR pTrayLine@1100281000 : Record 50048;pServiceOrderType@1100281004 : Code[10];VAR pResultServiceHeader@1100281008 : Record 5900;pShowServiceHeaderCard@1100281005 : Boolean);
    VAR
      lService@1100281002 : Record 50066;
      lContact@1100281003 : Record 5050;
    BEGIN
      //IMH09 isat.zw
      pTrayLine.TESTFIELD("Service No.");

      lService.GET(pTrayLine."Service No.");
      lService.CreateServiceHeader(pResultServiceHeader, pServiceOrderType);

      pTrayLine.VALIDATE("Service Header No.", pResultServiceHeader."No.");
      pTrayLine.MODIFY(TRUE);

      IF pShowServiceHeaderCard THEN BEGIN
        COMMIT;
        pResultServiceHeader.ShowCard(TRUE);
      END;
    END;

    PROCEDURE CreateDARVAServHdrByTrayLine@1100281021(VAR pTrayLine@1100281000 : Record 50048;VAR pResultServiceHeader@1100281008 : Record 5900;pShowServiceHeaderCard@1100281005 : Boolean) : Boolean;
    VAR
      lCreateServiceForm@1100281001 : Form 50090;
      lService@1100281002 : Record 50066;
      lContact@1100281003 : Record 5050;
      lDARVARcvdDTPostAct@1100281006 : Codeunit 50162;
      lEAIRcvdMQBuffer@1100281007 : TEMPORARY Record 8016721;
      lDARVASwitchSystemSetup@1000000000 : Record 50180;
    BEGIN
      //IMH09 isat.zw
      pTrayLine.TESTFIELD("Service No.");
      pTrayLine.CALCFIELDS("Attachment 2");

      lService.GET(pTrayLine."Service No.");

      pTrayLine.CALCFIELDS(Attachment);
      //<<IMH28.ACO
      //lDARVARcvdDTPostAct.SetService(lService."Service No.");
      //lEAIRcvdMQBuffer."XML Source" := pTrayLine.Attachment;
      //lEAIRcvdMQBuffer."EAI Partner Code" := pTrayLine."EAI Partner Code";
      //lDARVARcvdDTPostAct.Code(lEAIRcvdMQBuffer);
      //lDARVARcvdDTPostAct.GetResultServHeader(pResultServiceHeader);

      lEAIRcvdMQBuffer."XML Source" := pTrayLine.Attachment;
      lEAIRcvdMQBuffer."Response XML Source" := pTrayLine."Attachment 2";
      lEAIRcvdMQBuffer."EAI Partner Code" := pTrayLine."EAI Partner Code";
      lEAIRcvdMQBuffer."DARVA Action" := lEAIRcvdMQBuffer."DARVA Action"::"Create Service Header";
      lEAIRcvdMQBuffer."Service No." := lService."Service No.";

      lDARVASwitchSystemSetup.SETRANGE("Corporate No.",  pTrayLine."Corporate No.");
      lDARVASwitchSystemSetup.SETRANGE("Line Type", lDARVASwitchSystemSetup."Line Type"::Page);
      lDARVASwitchSystemSetup.SETRANGE("DARVA Data Flow Type", 'DT');
      lDARVASwitchSystemSetup.SETRANGE(Direction, lDARVASwitchSystemSetup.Direction::Receipt);
      lDARVASwitchSystemSetup.FINDFIRST;
      CODEUNIT.RUN(lDARVASwitchSystemSetup."Codeunit No.", lEAIRcvdMQBuffer);
      pResultServiceHeader.GET(pResultServiceHeader."Document Type"::Invoice, lEAIRcvdMQBuffer."Service Header No.");
      //>>IMH28.ACO

      pTrayLine.VALIDATE("Service Header No.", pResultServiceHeader."No.");
      pTrayLine."Intervention Line No." := 0;
      pTrayLine."Intervention No." := 0;
      pTrayLine.MODIFY(TRUE);

      IF pShowServiceHeaderCard THEN BEGIN
        //COMMIT;
        pResultServiceHeader.ShowCard(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE CreateDARVAServByTrayLine@1100281025(VAR pTrayLine@1100281000 : Record 50048;VAR pResultServiceHeader@1100281008 : Record 5900;pShowServiceHeaderCard@1100281005 : Boolean) : Boolean;
    VAR
      lCreateServiceForm@1100281001 : Form 50090;
      lService@1100281002 : Record 50066;
      lContact@1100281003 : Record 5050;
      lDARVARcvdDTPostAct@1100281006 : Codeunit 50162;
      lEAIRcvdMQBuffer@1100281007 : TEMPORARY Record 8016721;
      lDARVASwitchSystemSetup@1000000000 : Record 50180;
    BEGIN
      //IMH12 isat.zw
      pTrayLine.CALCFIELDS(Attachment);
      pTrayLine.CALCFIELDS("Attachment 2");
      //<<IMH28.ACO
      {
      lDARVARcvdDTPostAct.SetForceCreateService;
      lEAIRcvdMQBuffer."XML Source" := pTrayLine.Attachment;
      lEAIRcvdMQBuffer."EAI Partner Code" := pTrayLine."EAI Partner Code";
      lDARVARcvdDTPostAct.Code(lEAIRcvdMQBuffer);
      lDARVARcvdDTPostAct.GetResultServHeader(pResultServiceHeader);
      }
      lEAIRcvdMQBuffer."XML Source" := pTrayLine.Attachment;
      lEAIRcvdMQBuffer."Response XML Source" := pTrayLine."Attachment 2";
      lEAIRcvdMQBuffer."EAI Partner Code" := pTrayLine."EAI Partner Code";
      lEAIRcvdMQBuffer."DARVA Action" := lEAIRcvdMQBuffer."DARVA Action"::"Create Service";

      lDARVASwitchSystemSetup.SETRANGE("Corporate No.",  pTrayLine."Corporate No.");
      lDARVASwitchSystemSetup.SETRANGE("Line Type", lDARVASwitchSystemSetup."Line Type"::Page);
      lDARVASwitchSystemSetup.SETRANGE("DARVA Data Flow Type", 'DT');
      lDARVASwitchSystemSetup.SETRANGE(Direction, lDARVASwitchSystemSetup.Direction::Receipt);
      lDARVASwitchSystemSetup.FINDFIRST;
      CODEUNIT.RUN(lDARVASwitchSystemSetup."Codeunit No.", lEAIRcvdMQBuffer);
      pResultServiceHeader.GET(pResultServiceHeader."Document Type"::Invoice, lEAIRcvdMQBuffer."Service Header No.");
      //>>IMH28.ACO

      pTrayLine.VALIDATE("Service No.", pResultServiceHeader."Service No.");
      pTrayLine.VALIDATE("Service Header No.", pResultServiceHeader."No.");
      pTrayLine."Intervention Line No." := 0;
      pTrayLine."Intervention No." := 0;
      pTrayLine.MODIFY(TRUE);

      IF pShowServiceHeaderCard THEN BEGIN
        //COMMIT;
        pResultServiceHeader.ShowCard(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE AffectDTDARVA@1100281022(VAR pTrayLine@1100281001 : Record 50048) : Boolean;
    VAR
      lServiceHeader@1100281003 : Record 5900;
      lDARVASwitchSystemSetup@1000000000 : Record 50180;
      lEAIRcvdMQBuffer@1100281000 : TEMPORARY Record 8016721;
      lDARVARcvdDTPostAct@1000000003 : Codeunit 50162;
      lDARVAMgt@1000000005 : Codeunit 50150;
      lDARVAXMLMgt@1000000010 : Codeunit 50154;
      lXmlDom@1100281004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lXmlDom2@1100281006 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lXmlDom3@1000000009 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lXmlNodeList@1100281007 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNodeList";
      lXmlDomElement@1000000004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
      lXmlDomElement2@1000000006 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
      lInStream@1100281005 : InStream;
      lLength@1100281008 : Integer;
      lDARVACarrierSubscriberNo@1000000002 : Code[20];
      lDARVARecipientSubscriberNo@1000000001 : Code[20];
      lSinisterNo@1000000008 : Code[20];
      lMissionNo@1000000007 : Code[20];
    BEGIN
      pTrayLine.TESTFIELD("Service No.");

      lServiceHeader.SETCURRENTKEY("Service No.");
      lServiceHeader.SETRANGE("Service No.", pTrayLine."Service No.");
      IF NOT (FORM.RUNMODAL(0, lServiceHeader) = ACTION::LookupOK) THEN
        EXIT(FALSE);

      IF NOT CONFIRM(Text005) THEN
        EXIT;

      pTrayLine.CALCFIELDS(Attachment);
      pTrayLine.CALCFIELDS("Attachment 2");

      //IMH28.ACO
      {
      CREATE(lXmlDom);
      pTrayLine.CALCFIELDS(Attachment);
      pTrayLine.Attachment.CREATEINSTREAM(lInStream);
      lXmlDom.load(lInStream);

      lDARVARcvdDTPostAct.SetServiceHeader(lServiceHeader."No.");
      //<<IMH25.PC
      //lDARVARcvdDTPostAct.CreateAttachmentFile(lXmlDom,FALSE);
      CLEAR(lXmlNodeList);
      lDARVARcvdDTPostAct.CreateAttachmentFile(lXmlDom,FALSE,lXmlNodeList);
      pTrayLine.CALCFIELDS("Attachment 2");
      pTrayLine."Attachment 2".CREATEINSTREAM(lInStream);
      CREATE(lXmlDom2);
      lXmlDom2.load(lInStream);
      lXmlNodeList := lXmlDom2.getElementsByTagName('ns2:pieceJointe');
      lLength := lXmlNodeList.length;
      IF lLength <> 0 THEN BEGIN
        lDARVARcvdDTPostAct.CreateAttachment(lXmlNodeList);
      END;
      //>>IMH25.PC
      //<<IMH20.PC
      lDARVARcvdDTPostAct.GetDARVAMissionWorkLot(lXmlDom);
      //>>IMH20.PC
      }

      CREATE(lXmlDom);
      pTrayLine.Attachment.CREATEINSTREAM(lInStream);
      lXmlDom.load(lInStream);
      lDARVAXMLMgt.InitXMLDom(lXmlDom,lXmlDom3);
      lXmlDomElement := lXmlDom3.getElementsByTagName('SE0010201').item(0);
      lDARVACarrierSubscriberNo := lDARVAMgt.GetNodeValue(lXmlDomElement,'DE00380101');
      lDARVARecipientSubscriberNo := lDARVAMgt.GetNodeValue(lXmlDomElement,'DE00390101');
      lXmlDomElement := lXmlDom3.getElementsByTagName('GR010101').item(0);
      lXmlDomElement2 := lXmlDomElement.selectSingleNode('SE0020101');
      lSinisterNo := lDARVAMgt.GetNodeValue(lXmlDomElement2,'DE00470101');
      lMissionNo := lDARVAMgt.GetNodeValue(lXmlDomElement2,'DE00530101');

      lEAIRcvdMQBuffer."Reference No." := lSinisterNo;
      lEAIRcvdMQBuffer."Your Reference" := lMissionNo;
      lEAIRcvdMQBuffer."Origin Entry No." := lDARVACarrierSubscriberNo;
      lEAIRcvdMQBuffer."Origin EAI Act Code" := lDARVARecipientSubscriberNo;
      lEAIRcvdMQBuffer."XML Source" := pTrayLine.Attachment;
      lEAIRcvdMQBuffer."Response XML Source" := pTrayLine."Attachment 2";
      lEAIRcvdMQBuffer."DARVA Action" := lEAIRcvdMQBuffer."DARVA Action"::"Affect DT";
      lEAIRcvdMQBuffer."Service Header No." := lServiceHeader."No.";

      lDARVASwitchSystemSetup.SETRANGE("Corporate No.",  pTrayLine."Corporate No.");
      lDARVASwitchSystemSetup.SETRANGE("Line Type", lDARVASwitchSystemSetup."Line Type"::Page);
      lDARVASwitchSystemSetup.SETRANGE("DARVA Data Flow Type", 'DT');
      lDARVASwitchSystemSetup.SETRANGE(Direction, lDARVASwitchSystemSetup.Direction::Receipt);
      lDARVASwitchSystemSetup.FINDFIRST;
      CODEUNIT.RUN(lDARVASwitchSystemSetup."Codeunit No.", lEAIRcvdMQBuffer);
      //>>IMH28.ACO

      lServiceHeader.GET(lServiceHeader."Document Type"::Invoice,lServiceHeader."No.");
      lServiceHeader.ShowCard(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE QualifyTrayLine@1100281017(VAR pTrayLine@1100281000 : Record 50048);
    VAR
      lDocumentQueueHistory@1100281002 : Record 50109;
      lDocumentQueue@1100281001 : Record 50054;
    BEGIN
      IF lDocumentQueueHistory.GET(pTrayLine."Document Flow Code",
          pTrayLine."Document Queue Type", pTrayLine."Doc. Queue Entry No.") THEN BEGIN
        lDocumentQueueHistory.MODIFY(FALSE);
        IF lDocumentQueue.GET(pTrayLine."Document Flow Code",
            pTrayLine."Document Queue Type", pTrayLine."Doc. Queue Entry No.") THEN
          lDocumentQueue.DELETE(TRUE);
      END;
    END;

    PROCEDURE AffectDocServHeaderByTrayLine@1100281024(VAR pTrayLine@1100281000 : Record 50048);
    VAR
      lCreateServiceForm@1100281001 : Form 50090;
      lService@1100281002 : Record 50066;
      lContact@1100281003 : Record 5050;
      lDocumentFlowMgt@1100281004 : Codeunit 50006;
      lDocumentQueueHistory@1100281006 : Record 50109;
      lDocumentQueue@1100281007 : Record 50054;
      lTrayLineActionMgt@1000000000 : Codeunit 50056;
    BEGIN
      pTrayLine.TESTFIELD("Service No.");

      IF lDocumentQueueHistory.GET(pTrayLine."Document Flow Code",
          pTrayLine."Document Queue Type", pTrayLine."Doc. Queue Entry No.") THEN BEGIN
        lDocumentQueueHistory."Service No." := pTrayLine."Service No.";
        lDocumentQueueHistory."Service Document No." := pTrayLine."Service Header No.";
        lDocumentQueueHistory."Service Header No." := pTrayLine."Service Header No.";
        lDocumentQueueHistory."Service Intervention Line No." := pTrayLine."Intervention Line No.";
        lDocumentQueueHistory.MODIFY(FALSE);
        lDocumentFlowMgt.CreateInteractionByHistoryLine(lDocumentQueueHistory);
        IF lDocumentQueue.GET(pTrayLine."Document Flow Code",
            pTrayLine."Document Queue Type", pTrayLine."Doc. Queue Entry No.") THEN
          lDocumentQueue.DELETE(FALSE);
      END;

      lTrayLineActionMgt.ShowCard(pTrayLine) ;
      CreateServTLFromTrayLine(pTrayLine, '', '', TRUE)
    END;

    PROCEDURE AffectDocServiceByTrayLine@1100281026(VAR pTrayLine@1100281000 : Record 50048);
    VAR
      lCreateServiceForm@1100281001 : Form 50090;
      lService@1100281002 : Record 50066;
      lContact@1100281003 : Record 5050;
      lDocumentFlowMgt@1100281004 : Codeunit 50006;
      lDocumentQueueHistory@1100281006 : Record 50109;
      lDocumentQueue@1100281007 : Record 50054;
      lTrayLineActionMgt@1000000000 : Codeunit 50056;
    BEGIN
      // IMH21.PC
      WITH pTrayLine DO BEGIN
        TESTFIELD("Service No.");

        IF lDocumentQueueHistory.GET("Document Flow Code","Document Queue Type","Doc. Queue Entry No.") THEN BEGIN
          lDocumentQueueHistory."Service No." := "Service No.";
          lDocumentQueueHistory.MODIFY(FALSE);
          lDocumentFlowMgt.CreateInteractionByHistoryLine(lDocumentQueueHistory);
          IF lDocumentQueue.GET("Document Flow Code","Document Queue Type","Doc. Queue Entry No.") THEN BEGIN
            lDocumentQueue.DELETE(FALSE);
          END;
        END;
      END;
      lTrayLineActionMgt.ShowCard(pTrayLine) ;
      CreateServTLFromTrayLine(pTrayLine, '', '', TRUE)
    END;

    PROCEDURE CreateClaimServHdByTrayLine@1000000001(VAR pTrayLine@1100281000 : Record 50048);
    VAR
      lServiceIntervention@1100281002 : Record 50075;
      lServHeader@1000000000 : Record 5900;
      lServHeaderClaim@1100281001 : Record 5900;
      lDocumentFlowMgt@1000000003 : Codeunit 50006;
      lDocumentQueueHistory@1000000002 : Record 50109;
      lDocumentQueue@1000000001 : Record 50054;
    BEGIN
      //IMH09 isat.zw
      pTrayLine.TESTFIELD("Service Header No.");

      IF pTrayLine."Intervention Line No." <> 0 THEN BEGIN
        lServiceIntervention.GET(pTrayLine."Service Header No.", pTrayLine."Intervention Line No.");
        lServiceIntervention.VALIDATE(Claim, TRUE);
        lServiceIntervention.MODIFY(TRUE);
        lServHeaderClaim.GET(lServHeaderClaim."Document Type"::Invoice, lServiceIntervention."Service Header Claims No.");
      END ELSE BEGIN
        lServHeader.GET(lServHeader."Document Type"::Invoice, pTrayLine."Service Header No.");
        lServHeader.VALIDATE("Claimed Service Header", TRUE);
        lServHeader.MODIFY(TRUE);
        lServHeaderClaim.GET(lServHeaderClaim."Document Type"::Invoice, lServHeader."Service Header Claims No.");
      END;

      pTrayLine.VALIDATE("Service No.", lServHeaderClaim."Service No.");
      pTrayLine.VALIDATE("Service Header No.", lServHeaderClaim."No.");
      pTrayLine."Intervention Line No." := 0;
      pTrayLine."Intervention No." := 0;
      pTrayLine.MODIFY(TRUE);

      IF lDocumentQueueHistory.GET(pTrayLine."Document Flow Code",
          pTrayLine."Document Queue Type", pTrayLine."Doc. Queue Entry No.") THEN BEGIN
        lDocumentQueueHistory."Service No." := lServHeaderClaim."Service No.";
        lDocumentQueueHistory."Service Header No." := lServHeaderClaim."No.";
        lDocumentQueueHistory."Service Intervention Line No." := 0;  //IMH24
        lDocumentQueueHistory.MODIFY(FALSE);
        lDocumentFlowMgt.CreateInteractionByHistoryLine(lDocumentQueueHistory);
        IF lDocumentQueue.GET(pTrayLine."Document Flow Code",
            pTrayLine."Document Queue Type", pTrayLine."Doc. Queue Entry No.") THEN
          lDocumentQueue.DELETE(FALSE);
      END;
    END;

    PROCEDURE CreateProviderByTrayLine@1000000002(VAR pTrayLine@1100281000 : Record 50048;pShowCard@1000000001 : Boolean);
    VAR
      lProvider@1000000000 : Record 50000;
    BEGIN
      //IMH01 isat.zw
      pTrayLine.TESTFIELD("Contact No.", '');
      lProvider.INIT;
      lProvider.INSERT(TRUE);
      pTrayLine.VALIDATE("Contact No.", lProvider."No.");
      pTrayLine.MODIFY(TRUE);

      AffectProviderDocByTrayLine(pTrayLine, pShowCard);
    END;

    PROCEDURE AffectProviderDocByTrayLine@1000000005(VAR pTrayLine@1100281000 : Record 50048;pShowCard@1000000001 : Boolean);
    VAR
      lProvider@1000000000 : Record 50000;
      lDocumentFlowMgt@1100281004 : Codeunit 50006;
      lDocumentQueueHistory@1100281006 : Record 50109;
      lDocumentQueue@1100281007 : Record 50054;
    BEGIN
      //IMH01 isat.zw
      pTrayLine.TESTFIELD("Contact No.");
      lProvider.GET(pTrayLine."Contact No.");

      IF lDocumentQueueHistory.GET(pTrayLine."Document Flow Code",
          pTrayLine."Document Queue Type", pTrayLine."Doc. Queue Entry No.") THEN BEGIN
        lDocumentQueueHistory."Contact No." := lProvider."No.";
        lDocumentQueueHistory.MODIFY(FALSE);
        lDocumentFlowMgt.CreateInteractionByHistoryLine(lDocumentQueueHistory);
        IF lDocumentQueue.GET(pTrayLine."Document Flow Code",
            pTrayLine."Document Queue Type", pTrayLine."Doc. Queue Entry No.") THEN
          lDocumentQueue.DELETE(FALSE);
      END;

      IF pShowCard THEN BEGIN
        COMMIT;
        FORM.RUN(FORM::"Provider Card", lProvider);
      END;
    END;

    PROCEDURE CreateServTLFromTrayLine@1000000004(pTrayLine@1000000000 : Record 50048;pTeamCode@1100281002 : Code[10];pTaskCode@1100281001 : Code[10];pShowWizard@1100281003 : Boolean) : Boolean;
    VAR
      lService@1000000001 : Record 50066;
      lServiceHeader@1000000002 : Record 5900;
      lIntervLine@1000000003 : Record 50075;
    BEGIN
      //IMH15
      IF pTrayLine."Intervention Line No." <> 0 THEN BEGIN
        lIntervLine.GET(pTrayLine."Service Header No.", pTrayLine."Intervention Line No.");
        EXIT(CreateTLFromIntervention(lIntervLine, '', '', TRUE));
      END;
      IF pTrayLine."Service Header No." <> '' THEN BEGIN
        lServiceHeader.GET(lServiceHeader."Document Type"::Invoice, pTrayLine."Service Header No.");
        EXIT(CreateTLFromServHeader(lServiceHeader, '', '', TRUE));
      END;
      IF pTrayLine."Service No." <> '' THEN BEGIN
        lService.GET(pTrayLine."Service No.");
        EXIT(CreateTLFromService(lService, '', '', TRUE));
      END;
    END;

    PROCEDURE GetResultLine@1100281007(VAR pTrayLine@1100281000 : Record 50048);
    BEGIN
      //IMH03.ST
      pTrayLine := ResultLine;
    END;

    LOCAL PROCEDURE GetCodeFilter@1100281019(pSourceTable@1100281000 : Integer;VAR pCodeFilter@1100281001 : Text[1024]) : Boolean;
    VAR
      lRecRef@1100281002 : RecordRef;
    BEGIN
      IF (pCodeFilter = '') OR (pSourceTable = 0) THEN
        EXIT(FALSE);
      lRecRef.OPEN(pSourceTable);
      CASE pSourceTable OF
      END;
    END;

    PROCEDURE TransferTrayLine@1100281013(VAR pTrayLine@1100281002 : Record 50048;pOpenAssist@1100281000 : Boolean;pTransferType@1100281005 : 'Default,Salesperson') : Boolean;
    VAR
      lTeam@1100281001 : Record 5083;
      lTempTrayLine@1100281003 : TEMPORARY Record 50048;
      lCreateTrayLineWizard@1100281004 : Form 50124;
    BEGIN
      //IMH07 : Ajout paramŠtre pTransfertTYpe
      //IMH05.ST
      pTrayLine.TESTFIELD(Closed, FALSE);
      IF NOT GUIALLOWED THEN BEGIN
        pTrayLine.TESTFIELD("Transfer To Team");
        pOpenAssist := FALSE;
      END;

      lTempTrayLine := pTrayLine;
      WITH lTempTrayLine DO BEGIN
        // Remise … blanc des valeurs

        IF pTransferType = pTransferType::Default THEN BEGIN   //IMH07
          IF "Transfer To Team" = '' THEN BEGIN
            SETRANGE("Team Code");
            "Team Code" := '';
          END
          ELSE BEGIN
            "Team Code" := "Transfer To Team";
            "Transfer To Team" := '';
            //SETRANGE("Team Code", "Team Code");
          END;
          "Entry No." := 0;
          VALIDATE("Assigned Salesperson Code", '');

        //<<IMH07
        END ELSE BEGIN
          IF lTeam.GET(pTrayLine."Team Code") THEN BEGIN
            VALIDATE("Assigned Salesperson Code",lTeam."Salesperson Code");
            lTeam.TESTFIELD("Salesperson Code"); //IMH11
          END;
          SETRANGE("Team Code", "Team Code");
          SETRANGE("Assigned Salesperson Code",lTeam."Salesperson Code");
        END;
        //>>IMH07
        "Team Substitution" := FALSE;
        "Subst. Source Team Code" := '';
        RESET;
        // init des filtres
        SETRANGE("Linked To Table", "Linked To Table");
        SETRANGE("Task Code", "Task Code");
        SETRANGE("Contact No.", "Contact No.");
        SETRANGE("Campaign No.", "Campaign No.");
        SETRANGE("Corporate No.", "Corporate No.");
        SETRANGE("Service No.", "Service No.");
        SETRANGE("Service Header No.", "Service Header No.");
        SETRANGE("Intervention Line No.", "Intervention Line No.");
        SETRANGE("Intervention No.", "Intervention No.");
        SETRANGE("Document Flow Code", "Document Flow Code");
        SETRANGE("Document Queue Type", "Document Queue Type");
        SETRANGE("Doc. Queue Entry No.", "Doc. Queue Entry No.");
        //<<IMH19
        //SETRANGE(Description, Description);
        SETFILTER(Description,'=%1', Description);
        //>>IMH19
      END;
      IF pOpenAssist THEN BEGIN
        lCreateTrayLineWizard.SETRECORD(lTempTrayLine);
        lCreateTrayLineWizard.SETTABLEVIEW(lTempTrayLine);
        lCreateTrayLineWizard.RUNMODAL;
        IF NOT lCreateTrayLineWizard.GetIsOk THEN
          EXIT;
        lCreateTrayLineWizard.GetValue(lTempTrayLine);
      END
      ELSE BEGIN
        IF lTempTrayLine."Team Code" = '' THEN BEGIN
          lTeam.SETFILTER(Code, '<>%1', pTrayLine."Team Code");
          IF FORM.RUNMODAL(0, lTeam) <> ACTION::LookupOK THEN
            EXIT(FALSE);
          lTempTrayLine.VALIDATE("Team Code", lTeam.Code);
          //<<IMH07
          IF pTransferType = pTransferType::Salesperson THEN BEGIN
            IF lTeam."Salesperson Code" <> '' THEN
              lTempTrayLine."Assigned Salesperson Code" := lTeam."Salesperson Code";
          END;
          //>>IMH07

        END;
      END;

      pTrayLine."Transfer To Team" := lTempTrayLine."Team Code"; // avant substitution
      IF NOT CreateTrayLine(lTempTrayLine) THEN
        EXIT(FALSE);
      IF GUIALLOWED THEN
        MESSAGE(Text001,pTrayLine."Transfer To Team");
      pTrayLine.VALIDATE(Status, pTrayLine.Status::Transferred);
      pTrayLine.MODIFY(TRUE);
      EXIT(TRUE);
    END;

    PROCEDURE CreateResponse@1100281014(VAR pTrayLine@1100281000 : Record 50048;pTaskToRespond@1100281001 : Code[10]) : Boolean;
    VAR
      lTempTrayLine@1100281002 : TEMPORARY Record 50048;
    BEGIN
      lTempTrayLine := pTrayLine;
      lTempTrayLine.Response := TRUE;
      lTempTrayLine."Respond To Team" := '';
      lTempTrayLine."Response Created" := FALSE;
      lTempTrayLine.VALIDATE("Team Code", pTrayLine."Respond To Team");
      lTempTrayLine.SetSkipCalcTeamCode(TRUE);    //IMH30
      lTempTrayLine.VALIDATE("Task Code", pTaskToRespond);
      EXIT(CreateTrayLine(lTempTrayLine));
    END;

    PROCEDURE SetCallFrom@1100281001(pCallFromWhat@1100281000 : ' ,Process,DocQueue');
    BEGIN
      //IMH05.ST
      //<<IMH18.ST
      //AutoProcess := (pCallFromWhat <> pCallFromWhat::" ");
      AutoProcess := (pCallFromWhat = pCallFromWhat::Process);
      //>>IMH18.ST
    END;

    PROCEDURE TestDuration@1100281006(pTrayLine@1100281000 : Record 50048;pFromDateTime@1100281001 : DateTime);
    VAR
      lDuration@1100281003 : Duration;
    BEGIN
      //IMH05.ST
      IF pFromDateTime = 0DT THEN
        EXIT;
      lDuration := CURRENTDATETIME - pFromDateTime;
      IF lDuration <= 0 THEN
        EXIT;

      IF NOT TraySetup.GET THEN
        EXIT;
      IF lDuration < (TraySetup."Register Time Access From (s)" * 1000) THEN
        EXIT;
      IF TraySetup."Register Time Access To (s)" >= 0 THEN
        IF lDuration > (TraySetup."Register Time Access To (s)" * 1000) THEN
          EXIT;
      // Cr‚ation de la trace
      CreateAccessTrace(pTrayLine, lDuration / 1000);
    END;

    LOCAL PROCEDURE CreateAccessTrace@1100281009(pTrayLine@1100281001 : Record 50048;pDuration@1100281003 : Decimal);
    VAR
      lTrayAccess@1100281000 : Record 50095;
    BEGIN
      WITH lTrayAccess DO BEGIN
        INIT;
        "Close DateTime" := CURRENTDATETIME;
        "Duration (s)" := pDuration;
        "Team Code" := pTrayLine."Team Code";
        "Task Code" := pTrayLine."Task Code";
        Description := pTrayLine.Description;
        Manual := pTrayLine.Manual;
        INSERT(TRUE);
        COMMIT;
      END;
    END;

    LOCAL PROCEDURE DeleteForDocQueueLine@1100281016(pTrayLine@1100281000 : Record 50048);
    VAR
      lDocumentQueue@1100281001 : Record 50054;
    BEGIN
      IF lDocumentQueue.GET(pTrayLine."Document Flow Code", pTrayLine."Document Queue Type",
        pTrayLine."Doc. Queue Entry No.") THEN
        lDocumentQueue.DELETE(TRUE);
      //<<IMH14.ST
      //pTrayLine.DELETE(TRUE);
      IF pTrayLine.Status IN [pTrayLine.Status::"Not Started", pTrayLine.Status::"In Progress"] THEN BEGIN
        pTrayLine.VALIDATE(Status, pTrayLine.Status::Canceled);
        pTrayLine.MODIFY(TRUE);
      END;
      //>>IMH14.ST
    END;

    PROCEDURE InitTrayLine@1100281023(pTrayLine@1100281005 : Record 50048);
    BEGIN
      //<<IMH10.ISAT.EBA
      NewTrayLine := pTrayLine;
      //>>IMH10.ISAT.EBA
    END;

    PROCEDURE TrayLineAffectationBatch@1100281027(VAR pTrayLine@1100281000 : Record 50048);
    BEGIN
      IF FORM.RUNMODAL(FORM::"Tray Lines Affectation", pTrayLine) = ACTION::LookupOK THEN;
    END;

    PROCEDURE GetTeamByTask@1100281054(pTaskCode@1100281001 : Code[10];pFilterTeamTrayTask@1000000000 : Record 50129;pServiceHeaderNo@1000000001 : Code[20]) : Code[10];
    VAR
      lTeamTrayTask@1000000003 : Record 50129;
      lTrayTask@1000000004 : Record 50080;
      lTeam@1100281004 : Record 5083;
      lServiceHeader@1000000002 : Record 5900;
      lTrayTaskTemp@1100281003 : TEMPORARY Record 50080;
      lServiceHeaderTemp@1100281002 : TEMPORARY Record 5900;
    BEGIN
      //IMH30 Cr‚ation
      lTrayTask.SETRANGE("Task Code", pTaskCode);
      IF NOT lTrayTask.FINDFIRST THEN
        EXIT;

      //Filtre code corbeille table "Corbeille par tache"
      lTeamTrayTask.SETCURRENTKEY("Task Code", "Assignment Priority");
      lTeamTrayTask.SETRANGE(Enable, TRUE);
      lTeamTrayTask.SETRANGE("Task Code", pTaskCode);

      IF lServiceHeader.GET(lServiceHeader."Document Type"::Invoice, pServiceHeaderNo) THEN BEGIN
        pFilterTeamTrayTask."Service Order Type" := lServiceHeader."Service Order Type";
        pFilterTeamTrayTask."Corporate No." := lServiceHeader."Corporate No.";
        pFilterTeamTrayTask."Corporate Region Code" := lServiceHeader."Corporate Region Code";
      END;

      lTeamTrayTask.SETRANGE("Service Order Type", pFilterTeamTrayTask."Service Order Type");
      lTeamTrayTask.SETRANGE("Corporate No.", pFilterTeamTrayTask."Corporate No.");
      lTeamTrayTask.SETRANGE("Corporate Region Code", pFilterTeamTrayTask."Corporate Region Code");
      IF lTeamTrayTask.FINDFIRST THEN
        EXIT(lTeamTrayTask."Team Code");

      lTeamTrayTask.SETRANGE("Corporate Region Code", '');
      IF lTeamTrayTask.FINDFIRST THEN
        EXIT(lTeamTrayTask."Team Code");

      lTeamTrayTask.SETFILTER("Service Order Type", '%1|%2', '', pFilterTeamTrayTask."Service Order Type");
      lTeamTrayTask.SETFILTER("Corporate No.", '%1|%2', '', pFilterTeamTrayTask."Corporate No.");
      lTeamTrayTask.SETFILTER("Corporate Region Code", '%1|%2', '', pFilterTeamTrayTask."Corporate Region Code");
      IF lTeamTrayTask.FINDFIRST THEN
        EXIT(lTeamTrayTask."Team Code");

      //si pas de corbeille par tache param‚tr‚ : corbeille par d‚faut de la fiche tache
      IF lTrayTask."Default Team Code" <> '' THEN
        EXIT(lTrayTask."Default Team Code");

      //si pas de corbeille trouv‚ : filtre code tache sur la table corbeille
      lTeam.SETCURRENTKEY("Service Assignment", "Assignment Priority");
      lTeam.SETRANGE("Service Assignment", TRUE);

      lServiceHeaderTemp := lServiceHeader;
      lServiceHeaderTemp.INSERT;
      lTrayTaskTemp."Task Code" := pTaskCode;
      lTrayTaskTemp.INSERT;

      IF pTaskCode <> '' THEN BEGIN
        lTeam.SETFILTER("Service Tray Task Code Filter", '<>%1', '');
        IF lTeam.FINDSET(FALSE) THEN
          REPEAT
            {
            IF pServiceHeaderNo <> '' THEN BEGIN
              lServiceHeaderTemp.RESET;
              lServiceHeaderTemp.SETVIEW(lTeam.GetRecFilters(FALSE, 1));
            END;
            }
            lTrayTaskTemp.SETFILTER("Task Code", lTeam."Service Tray Task Code Filter");

            IF (NOT lServiceHeaderTemp.ISEMPTY) AND (NOT lTrayTaskTemp.ISEMPTY) THEN
              EXIT(lTeam.Code);
          UNTIL lTeam.NEXT = 0;
      END;

      {
      //sinon filtre service sur la table corbeille
      IF pServiceHeaderNo = '' THEN
        EXIT;

      lTeam.SETRANGE("Service Tray Task Code Filter", '');
      IF lTeam.FINDSET(FALSE) THEN
        REPEAT
          lServiceHeaderTemp.RESET;
          lServiceHeaderTemp.SETVIEW(lTeam.GetRecFilters(FALSE, 1));

          IF NOT lServiceHeaderTemp.ISEMPTY THEN
            EXIT(lTeam.Code);
        UNTIL lTeam.NEXT = 0;
      }
    END;

    PROCEDURE ShowAttachment@6(VAR pTrayLine@1000 : Record 50048);
    VAR
      lFileName@1100281004 : Text[250];
      lInStream@1100281003 : InStream;
      lTempFile@1100281006 : File;
      pExoportFileName@1100281002 : Text[1024];
      lFileFilter@1100281001 : Text[250];
      lRBAutoMgt@1100281000 : Codeunit 419;
      lFileExt@1100281005 : Text[30];
    BEGIN
      //IMH32
      lFileExt := pTrayLine."Attachment File Extension";

      lTempFile.CREATETEMPFILE();
      lFileName := COPYSTR(lTempFile.NAME,1,STRLEN(lTempFile.NAME) - 4) + '.' + lFileExt;
      pTrayLine.CALCFIELDS(Attachment);
      pTrayLine.Attachment.EXPORT(lFileName);


      lFileFilter := UPPERCASE(lFileExt) + ' (*.' + lFileExt + ')|*.' + lFileExt;
      pExoportFileName := lRBAutoMgt.ClientTempFileName('.',lFileExt);
      IF ISSERVICETIER THEN BEGIN
        DOWNLOAD(lFileName,Text008,'',lFileFilter,pExoportFileName);
      END ELSE BEGIN
        FILE.COPY(lFileName,pExoportFileName);
      END;
      HYPERLINK(pExoportFileName);
      IF ERASE(lFileName) THEN;
      IF ERASE(pExoportFileName) THEN;
    END;

    BEGIN
    {
      /** @r IMH32 @d 10/06/14 @a ISAT.ZW @v IMH6.01.P010 @s Projet PMU @c Ajout fonction ShowAttachment */
      /** @r IMH31 @d 20/05/14 @a ISAT.ZW @v IMH6.01.5005 @s Reorganisation DPS @h 5005
          @c Correction code corbielle */
      /** @r IMH30 @d 26/03/14 @a ISAT.ZW @v IMH6.01.5005 @s Reorganisation DPS @h 5005
          @c Ajout Fonction GetTeamByTask + ajout gestion de validation code tache*/
      /** @r IMH29 @d 24/02/14 @a ISAT.ZW @v IMH6.01.4985 @s R‚organisation DPS @c Gestion de code corbeille service par d‚faut */
      /** @r IMH28 @d 10/07/13 @a ISAT.ACO @v IMH6.01.350 @s SystŠme d'aiguillage @c Aiguillage actions DARVA */
      /** @r IMH27 @d 24/07/13 @a ISAT.PC @v IMH6.01.347 @s Juin @h 4605 @c ajout infor n‚cessaire */
      /** @r IMH26 @d 04/07/13 @a ISAT.ZW @v IMH6.01.222 @s Uniformisation DARVA
          @c Ajout de la gestion de la piŠce jointe : correction */
      /** @r IMH25 @d 13/05/13 @a ISAT.PC @v IMH6.01.222 @s Uniformisation DARVA
          @c Ajout de la gestion de la piŠce jointe */
      /** @r IMH24 @d 08/11/12 @a ISAT.ZW @v IMH6.01.224 @s NEP00004 @h 3827
          @c Correction*/
      /** @r IMH23 @d 06/08/12 @a ISAT.ZW @v IMH6.01.226 @s version 1.4 @h 3469
          @c Correction*/
      /** @r IMH22 @d 25/07/12 @a ISAT.PC @v IMH6.01.226 @s version 1.4 @h 3469
          @c Gestion des taches inactives*/
      /** @r IMH21 @d 05/07/12 @a ISAT.PC @v IMH6.01.226 @s version 1.4 @h 3456
          @c Changement nom fonction AffectServDocByTrayLine => AffectDocServHeaderByTrayLine
          @c Ajout fonction AffectDocServiceByTrayLine */
      /** @r IMH20 @d 25/06/12 @a ISAT.PC @v IMH6.01.134 @s Gestion lot DARVA @h 0003653
          @c gestion des DT x pour la sauvegarde des donn‚es */
      /** @r IMH19 @d 17/04/12 @a ISAT.LLT @v IMH6.01.013 @s Transfert corbeille @h 3007 */
      /** @r IMH18 @d 05/04/12 @a ISAT.ST @v IMH6.01.013 @s Non auto si venant des documents joints */
      /** @r IMH17 @d 07/03/12 @a ISAT.ZW @v IMH6.01.120 @s Gestion des visite
          @c Ajouter fonction CreateTLFromVisit */
      /** @r IMH16 @d 07/03/12 @a ISAT.ZW @v IMH6.01.120 @s Gestion des corbeilles
          @c Ajouter fonction CreateTLFromCampaign + CreateTLForCampaign */
      /** @r IMH15 @d 23/02/12 @a ISAT.ZW @v IMH6.01.120 @s Gestion des corbeilles
          @c fonction prestataire + afficher formulaire cr‚ation activit‚ aprŠs l'affectation de document */
      /** @r IMH14 @d 16/02/12 @a ISAT.ST @v IMH6.01.120 @s Gestion des corbeilles @c Annulation d'activit‚ et non suppression */
      /** @r IMH13 @d 13/01/12 @a ISAT.ZW @v IMH6.01.120 @h Mantis0507 @s Gestion des corbeilles @h
          @c Fonction CreateAffectServHeadByTrayLine */
      /** @r IMH12 @d 20/12/11 @a ISAT.ZW @v IMH6.01.120 @h Mantis2643 @s Gestion des corbeilles @h
          @c Fonction creation Service Darva */
      /** @r IMH11 @d 13/12/11 @a ISAT.ZW @v IMH6.01.120  @s Gestion des corbeilles @h mantis 2274
          @c permission transfert activit‚ */
      /** @r IMH10 @d 30/11/11 @a ISAT.EBA @v IMH6.01.134 @s DARVA Management
          @c Ajout de fonction InitTrayLine */
      /** @r IMH09 @d 16/09/11 @a ISAT.ZW @v IMH6.01.120 @s Gestion des corbeilles
          @c ajout fonction CreateServiceHeaderByTrayLine */
      /** @r IMH08 @d 25/08/11 @a ISAT.PC @v IMH6.01.120 @h Mantis403 @s Gestion des corbeilles @c Ajout code */
      /** @r IMH07 @d 08/03/11 @a ISAT.LLT @v IMH6.01.120 @s Gestion des corbeilles
          @c Modif. fonction transfert pour ajout Transf‚rer au responsable */
      /** @r IMH06 @d 24/02/11 @a ISAT.NFO @v IMH6.01.102 @s recherche
          @c Ajout fonction CreateTLFromSearch */
      /** @r IMH05 @d 31/01/11 @a ISAT.ST @v IMH6.01.120 @s Gestion des corbeilles
          @c Corbeille de substitution, transfert de corbeille, R‚ponse corbeille
          @c Ajout fonction CopyTrayLine, transfert de code dans le codeunit 50056
          @c Temps corbeille, automatisation */
      /** @r IMH04 @d 25/01/11 @a ISAT.ST @v IMH6.01.102 @s Gestion des status
          @c Valeur de retour Boolean sur les fonctions de cr‚ation */
      /** @r IMH03 @d 11/01/11 @a ISAT.ST @v IMH6.01.102 @s Gestion des status
          @c Ajout fonction GetResultLine pour gestion des erreurs process auto */
      /** @r IMH02 @d 29/11/10 @a ISAT.LLT @v IMH6.01.013 @s Gestion des corbeilles  @c Modif. type champ nø service */
      /** @r IMH01 @d 21/10/10 @a ISAT.ZW @v IMH6.01.013 @s Gestion des corbeilles  @c Cr‚ation objet */
    }
    END.
  }
}