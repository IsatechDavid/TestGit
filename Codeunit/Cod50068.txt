OBJECT Codeunit 50068 Service Header Claims Mgt
{
  OBJECT-PROPERTIES
  {
    Date=09/11/12;
    Time=09:30:17;
    Modified=Yes;
    Version List=IMH6.01;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1100281000 : TextConst 'ENU=No Claims Product Type;FRA=Il n''existe aucun produit de type r‚clamation';
      Text002@1100281001 : TextConst 'ENU=Create Claims Service Header ?;FRA=Cr‚er une ligne produit r‚clamation ?';
      Text003@1100281002 : TextConst 'ENU=You can''t create a claim.;FRA=Vous n''avez pas l''autorisation de cr‚er une r‚clamation.';

    PROCEDURE CreateServiceHeaderClaims@1100281000(VAR pServIntervLine@1100281000 : Record 50075) : Boolean;
    VAR
      lServiceHeader@1100281001 : Record 5900;
      lServiceHeaderClaims@1100281004 : Record 50100;
      lServiceOrderType@1100281002 : Record 5903;
      lServiceCode@1100281005 : Record 50040;
      lServiceOrderTypeCode@1100281003 : Code[10];
      lProcessCode@1100281007 : Code[10];
      lProcessStatus@1100281006 : Integer;
    BEGIN
      IF NOT ClaimsEnabled THEN
        ERROR(Text003);
      IF NOT CONFIRM(Text002) THEN
        EXIT(FALSE);
      WITH lServiceHeader DO BEGIN
        "Document Type" := "Document Type"::Invoice;
        VALIDATE("Corporate No.",pServIntervLine."Corporate No.");
        VALIDATE("Corporate Region Code",pServIntervLine."Corporate Region Code");
        VALIDATE("Service No.",pServIntervLine."Service No.");
        IF NOT SelectServiceOrderType(lServiceHeader,lServiceOrderTypeCode) THEN
          EXIT(FALSE);
        lServiceOrderType.GET(lServiceOrderTypeCode);
        VALIDATE("Service Order Type",lServiceOrderType.Code);
        VALIDATE("Contact No.", pServIntervLine."Contact No.");
        VALIDATE("Provider No.", pServIntervLine."Provider No.");
        VALIDATE("Ship-to Address Code",pServIntervLine."Alt. Address Code");
        "Ship-to Address" := pServIntervLine.Address;
        "Ship-to Address 2" := pServIntervLine."Address 2";
        "Ship-to Post Code" := pServIntervLine."Post Code";
        "Ship-to City" := pServIntervLine.City;
        "Ship-to Country/Region Code" := pServIntervLine."Country/Region Code";
        "Ship-to Phone" := pServIntervLine."Phone No.";
        "Ship-to Fax No." := pServIntervLine."Fax No.";
        "Ship-to E-Mail" := pServIntervLine."E-Mail";
        VALIDATE("Default Team Code",GetDefaultTeamCodeByServOrder(lServiceHeader));

        INSERT(TRUE);
        //<<IMH04 d‚placer plus bas
        //<<IMH03
        //GetDefaultProcessStatusCode(lProcessCode, lProcessStatus);
        //IF lProcessCode <> '' THEN
        //  VALIDATE("Process Code", lProcessCode);
        //IF lProcessStatus <> 0 THEN
        //  VALIDATE("Process Status No.", lProcessStatus);
        //MODIFY;
        //>>IMH03
        //>>IMH04
        lServiceHeaderClaims."Service Header No." := "No.";
        lServiceHeaderClaims."Service Header Creation Date" := "Creation Date";
        lServiceHeaderClaims."Provider No." := "Provider No.";
        lServiceHeaderClaims.INSERT;

        CreateServiceCode(pServIntervLine,lServiceHeader);

        // Mise … jour de l'intervention
        pServIntervLine."Service Header Claims No." := "No.";
        pServIntervLine.MODIFY;

        //Cr‚ation de la corbeille
        //CreateTrayLine(lServiceHeader);

        //FORM.RUN(lServiceOrderType."Service Card Form ID",lServiceHeader);

        //<<IMH04
        //<<IMH03
        GetDefaultProcessStatusCode(lProcessCode, lProcessStatus);
        IF lProcessCode <> '' THEN
          VALIDATE("Process Code", lProcessCode);
        IF lProcessStatus <> 0 THEN
          VALIDATE("Process Status No.", lProcessStatus);
        MODIFY;
        //>>IMH03
        //>>IMH04
        lServiceHeader.ShowCard(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE CreateClaimsByServHeader@1000000000(VAR pServiceHeader@1100281000 : Record 5900) : Boolean;
    VAR
      lServiceHeader@1000000000 : Record 5900;
      lServiceHeaderClaims@1100281004 : Record 50100;
      lServiceOrderType@1100281002 : Record 5903;
      lServiceCode@1100281005 : Record 50040;
      lServiceOrderTypeCode@1100281003 : Code[10];
      lProcessCode@1100281007 : Code[10];
      lProcessStatus@1100281006 : Integer;
    BEGIN
      IF NOT ClaimsEnabled THEN
        ERROR(Text003);
      IF NOT CONFIRM(Text002) THEN
        EXIT(FALSE);
      WITH lServiceHeader DO BEGIN
        "Document Type" := "Document Type"::Invoice;
        VALIDATE("Corporate No.",pServiceHeader."Corporate No.");
        VALIDATE("Corporate Region Code",pServiceHeader."Corporate Region Code");
        VALIDATE("Service No.",pServiceHeader."Service No.");
        IF NOT SelectServiceOrderType(lServiceHeader,lServiceOrderTypeCode) THEN
          EXIT(FALSE);
        lServiceOrderType.GET(lServiceOrderTypeCode);
        VALIDATE("Service Order Type",lServiceOrderType.Code);
        VALIDATE("Contact No.", pServiceHeader."Contact No.");
        VALIDATE("Ship-to Address Code",pServiceHeader."Ship-to Address Code");
        "Ship-to Address" := pServiceHeader."Ship-to Address";
        "Ship-to Address 2" := pServiceHeader."Ship-to Address 2";
        "Ship-to Post Code" := pServiceHeader."Ship-to Post Code";
        "Ship-to City" := pServiceHeader."Ship-to City";
        "Ship-to Country/Region Code" := pServiceHeader."Ship-to Country/Region Code";
        "Ship-to Phone" := pServiceHeader."Ship-to Phone";
        "Ship-to Fax No." := pServiceHeader."Ship-to Fax No.";
        "Ship-to E-Mail" := pServiceHeader."Ship-to E-Mail";
        VALIDATE("Default Team Code",GetDefaultTeamCodeByServOrder(lServiceHeader));

        INSERT(TRUE);

        lServiceHeaderClaims."Service Header No." := "No.";
        lServiceHeaderClaims."Service Header Creation Date" := "Creation Date";
        lServiceHeaderClaims."Provider No." := "Provider No.";
        lServiceHeaderClaims.INSERT(TRUE);

        // Mise … jour de la ligne produit
        pServiceHeader."Service Header Claims No." := "No.";
        pServiceHeader.MODIFY;

        //<<IMH04
        //<<IMH03
        GetDefaultProcessStatusCode(lProcessCode, lProcessStatus);
        IF lProcessCode <> '' THEN
          VALIDATE("Process Code", lProcessCode);
        IF lProcessStatus <> 0 THEN
          VALIDATE("Process Status No.", lProcessStatus);
        MODIFY;
        //>>IMH03
        //>>IMH04

        lServiceHeader.ShowCard(FALSE);
      END;
      EXIT(TRUE);
    END;

    PROCEDURE SelectServiceOrderType@1100281009(VAR pServiceHeader@1100281005 : Record 5900;VAR pServOrderType@1100281000 : Code[10]) : Boolean;
    VAR
      lServiceOrderType@1100281001 : Record 5903;
      lProductCatalog@1100281002 : Record 50060;
      lProductCatalogTemp@1100281003 : TEMPORARY Record 50060;
      lProductCatalogList@1100281004 : Form 50062;
      lTempFormula@1100281007 : TEMPORARY Record 50057;
      lAddLine@1100281006 : Boolean;
    BEGIN
      pServiceHeader.TESTFIELD("Corporate No.");
      lProductCatalog.SETCURRENTKEY("Corporate No.");
      lProductCatalog.FILTERGROUP(2);
      lProductCatalog.SETRANGE("Corporate No.", pServiceHeader."Corporate No.");
      lProductCatalog.SETRANGE(Active, TRUE);
      lProductCatalog.FINDSET(FALSE);
      REPEAT
        IF lServiceOrderType.GET(lProductCatalog."Service Order Type") THEN BEGIN
          IF lServiceOrderType.Claim THEN BEGIN
            lProductCatalogTemp := lProductCatalog;
            lProductCatalogTemp.INSERT;
          END;
        END;
      UNTIL lProductCatalog.NEXT=0;
      lProductCatalogTemp.SETFILTER("Corporate Region Filter",pServiceHeader."Corporate Region Code");
      IF lProductCatalogTemp.ISEMPTY THEN BEGIN
        ERROR(Text001);
      END;
      IF lProductCatalogTemp.COUNT = 1 THEN BEGIN
        pServOrderType := lProductCatalogTemp."Service Order Type";
        EXIT(TRUE);
      END;

      IF FORM.RUNMODAL(0, lProductCatalogTemp) = ACTION::LookupOK THEN BEGIN
        pServOrderType := lProductCatalogTemp."Service Order Type";
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    PROCEDURE CreateTrayLine@1100281002(VAR pServiceHeader@1100281000 : Record 5900) : Boolean;
    VAR
      lTrayLine@1100281001 : Record 50048;
    BEGIN
      WITH lTrayLine DO BEGIN
        //****************  A COMPLETER ******************//
        "Team Code" := pServiceHeader."Default Team Code";
        "Source Table No." := DATABASE::"Service Header";
        "Service No." := pServiceHeader."Service No.";
        "Service Header No." := pServiceHeader."No.";
        INSERT(TRUE);
      END;
    END;

    PROCEDURE ClaimsEnabled@1100281001() : Boolean;
    VAR
      UserSpecialPermission@1100281000 : Codeunit 50093;
    BEGIN
      EXIT(UserSpecialPermission.IsClaimManager);
    END;

    PROCEDURE CreateServiceCode@1100281003(VAR pInterventionLine@1100281000 : Record 50075;VAR pServiceHeader@1100281001 : Record 5900);
    VAR
      lServiceCodeSource@1100281002 : Record 50040;
      lServiceCodeDest@1100281003 : Record 50040;
    BEGIN
      lServiceCodeSource.SETRANGE("Service Type",lServiceCodeSource."Service Type"::Intervention);
      lServiceCodeSource.SETRANGE("Service No.",pInterventionLine."Service No.");
      lServiceCodeSource.SETRANGE("Service Header No.",pInterventionLine."Service Header No.");
      lServiceCodeSource.SETRANGE("Intervention Line No.",pInterventionLine."Line No.");
      IF NOT lServiceCodeSource.FINDSET THEN
        EXIT;
      REPEAT
        lServiceCodeDest.INIT;
        lServiceCodeDest."Service Type" := lServiceCodeDest."Service Type"::ServiceHeader;
        lServiceCodeDest."Service No." := pServiceHeader."Service No.";
        lServiceCodeDest."Service Header No." := pServiceHeader."No.";
        lServiceCodeDest."Code Type" := lServiceCodeSource."Code Type";
        lServiceCodeDest.Code := lServiceCodeSource.Code;
        lServiceCodeDest."Building Trade No." := lServiceCodeSource."Building Trade No.";
        lServiceCodeDest.Main := lServiceCodeSource.Main;
        lServiceCodeDest.INSERT(TRUE);
      UNTIL lServiceCodeSource.NEXT = 0;
    END;

    BEGIN
    {
      /** @r IMH04 @d 17/10/12 @a ISAT.ZW @v IMH6.01.224 @s NEP00004 @h 3827 @c D‚placer autostep pour commiter … la fin du traitement  */
      /** @r IMH03 @d 16/05/11 @a ISAT.ZW @v IMH6.01.011 @s Gestion du service @c Auto processus */
      /** @r IMH02 @d 18/03/11 @a ISAT.ST @v IMH6.01.011 @s Gestion du service @c Alerte si pas les droits */
      /** @r IMH01 @d 17/02/11 @a ISAT.LLT @v IMH6.01.011 @s Gestion du service @c Cr‚ation */
    }
    END.
  }
}