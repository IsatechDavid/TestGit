OBJECT Codeunit 50086 Service Form Mgt
{
  OBJECT-PROPERTIES
  {
    Date=12/02/14;
    Time=16:40:46;
    Modified=Yes;
    Version List=IMH6.01;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ServMgtSetup@1100281019 : Record 5911;
      SetupRead@1100281020 : Boolean;
      FaultReason@1100281000 : Record 5917;
      Campaign@1100281001 : Record 5071;
      BuildingTrade@1100281002 : Record 50032;
      Specialization@1100281003 : Record 50005;
      SpecBuildingTrade@1100281012 : Record 50031;
      ServiceDevice@1100281005 : Record 50071;
      FaultArea@1100281006 : Record 5915;
      Salutation@1100281010 : Record 5068;
      CorporateContact@1100281009 : Record 5050;
      CorporateRegion@1100281011 : Record 50058;
      TrayTask@1100281007 : Record 50080;
      ServiceQuoteCodes@1100281008 : Record 50062;
      CodeTable@1100281004 : Record 50079;
      OrgLevel@1100281013 : Record 5070;
      StandardText@1100281014 : Record 7;
      ExpertContact@1100281015 : Record 5050;
      CorporateCustomer@1100281016 : Record 18;
      JobResponsibility@1100281017 : Record 5066;
      ProductCatalog@1100281018 : Record 50060;
      ContactContract@1100281021 : Record 50059;
      Text001@1100281022 : TextConst 'ENU=Do you want to delete building trade ?;FRA=Confirmez-vous la suppression du corps d''‚tat ?';
      Text002@1100281023 : TextConst 'ENU=Do you want to delete specialization ?;FRA=Confirmez-vous la suppression de la sp‚cialit‚ ?';
      SpecFaultArea@1100281024 : Record 50183;
      FaultAreaLocationDetail@1100281025 : Record 50184;

    PROCEDURE ServCause_Lookup@1100281000(VAR pText@1100281001 : Text[100];VAR pCode@1100281002 : Code[10]) : Boolean;
    BEGIN
      WITH FaultReason DO BEGIN
        IF pCode <> '' THEN BEGIN
          IF FaultReason.Code <> pCode THEN BEGIN
            IF FaultReason.GET(Code) THEN;
          END;
        END
        ELSE BEGIN
          IF pText <> '' THEN BEGIN
            SETFILTER(Description,STRSUBSTNO('@*%1*', pText));
            IF FINDFIRST THEN;
            SETRANGE(Description);
          END;
        END;
        IF PAGE.RUNMODAL(0, FaultReason) = ACTION::LookupOK THEN BEGIN
          pCode := Code;
          pText := Description;
          EXIT(TRUE);
        END;
        EXIT(FALSE);
      END;
    END;

    PROCEDURE ServCause_Validate@1100281001(VAR pText@1100281002 : Text[100];VAR pCode@1100281001 : Code[10]) : Boolean;
    VAR
      lOldCode@1100281000 : Code[10];
    BEGIN
      lOldCode := pCode;
      IF pText = '' THEN BEGIN
        pCode := '';
        EXIT(pCode <> lOldCode);
      END;

      WITH FaultReason DO BEGIN
        IF STRLEN(pText) <= MAXSTRLEN(pCode) THEN BEGIN
          IF GET(pText) THEN BEGIN
            pCode := Code;
            pText := Description;
            EXIT(pCode <> lOldCode);
          END;
        END;

        SETFILTER(Description, STRSUBSTNO('@*%1*', pText));
        IF ISEMPTY THEN
          SETRANGE(Description)
        ELSE BEGIN
          IF COUNT = 1 THEN BEGIN
            FINDFIRST;
            pCode := Code;
            pText := Description;
            EXIT(pCode <> lOldCode);
          END;
        END;
        IF PAGE.RUNMODAL(0, FaultReason) = ACTION::LookupOK THEN BEGIN
          pCode := Code;
          pText := Description;
          EXIT(pCode <> lOldCode);
        END;
      END;
      pText := ServCause_Desc(pCode);
    END;

    PROCEDURE ServCause_Desc@1100281002(pCode@1100281000 : Code[10]) : Text[100];
    BEGIN
      IF pCode = '' THEN
        EXIT('');
      WITH FaultReason DO BEGIN
        IF Code <> pCode THEN
          IF NOT GET(pCode) THEN BEGIN
            CLEAR(FaultReason);
            Description := pCode; //IMH03.ST
          END;
        EXIT(Description);
      END;
    END;

    PROCEDURE Campaign_Lookup@1100281006(VAR pText@1100281001 : Text[100];VAR pCode@1100281002 : Code[10]) : Boolean;
    BEGIN
      WITH Campaign DO BEGIN
        IF pCode <> '' THEN BEGIN
          SETRANGE(Active,TRUE);  //IMH14
          IF Campaign."No." <> pCode THEN BEGIN
            IF Campaign.GET("No.") THEN;
          END;
        END
        ELSE BEGIN
        //<<IMHXX isat.nfo
          SETRANGE(Active,TRUE);
        //  SETFILTER("Starting Date",'=''''|<='''+FORMAT(TODAY())+'''');
        //  SETFILTER("Ending Date",'=''''|>='''+FORMAT(TODAY())+'''');
        //>>IMHXX isat.nfo
          IF pText <> '' THEN BEGIN
            SETFILTER(Description,STRSUBSTNO('@*%1*', pText));
            IF FINDFIRST THEN;
            SETRANGE(Description);
          END;
        END;
        IF PAGE.RUNMODAL(0, Campaign) = ACTION::LookupOK THEN BEGIN
          pCode := "No.";
          pText := Description;
          EXIT(TRUE);
        END;
        EXIT(FALSE);
      END;
    END;

    PROCEDURE Campaign_Validate@1100281005(VAR pText@1100281002 : Text[100];VAR pCode@1100281001 : Code[10]) : Boolean;
    VAR
      lOldCode@1100281000 : Code[10];
    BEGIN
      lOldCode := pCode;
      IF pText = '' THEN BEGIN
        pCode := '';
        EXIT(pCode <> lOldCode);
      END;

      WITH Campaign DO BEGIN
        IF STRLEN(pText) <= MAXSTRLEN(pCode) THEN BEGIN
          IF GET(pText) THEN BEGIN
            pCode := "No.";
            pText := Description;
            EXIT(pCode <> lOldCode);
          END;
        END;

        SETFILTER(Description, STRSUBSTNO('@*%1*', pText));
        IF ISEMPTY THEN
          SETRANGE(Description)
        ELSE BEGIN
          IF COUNT = 1 THEN BEGIN
            FINDFIRST;
            pCode := "No.";
            pText := Description;
            EXIT(pCode <> lOldCode);
          END;
        END;
        IF PAGE.RUNMODAL(0, Campaign) = ACTION::LookupOK THEN BEGIN
          pCode := "No.";
          pText := Description;
          EXIT(pCode <> lOldCode);
        END;
      END;
      pText := Campaign_Desc(pCode);
    END;

    PROCEDURE Campaign_Desc@1100281004(pCode@1100281000 : Code[10]) : Text[100];
    BEGIN
      IF pCode = '' THEN
        EXIT('');
      WITH Campaign DO BEGIN
        IF "No." <> pCode THEN
          IF NOT GET(pCode) THEN BEGIN
            CLEAR(Campaign);
            Campaign.Description := pCode;
          END;
        EXIT(Description);
      END;
    END;

    PROCEDURE BuildingTrade_Lookup@1100281009(VAR pText@1100281001 : Text[100];pSpecCode@1100281000 : Code[10];VAR pCode@1100281002 : Code[20]) : Boolean;
    BEGIN
      IF pSpecCode = '' THEN BEGIN
        WITH BuildingTrade DO BEGIN
          IF pCode <> '' THEN BEGIN
            IF BuildingTrade."No." <> pCode THEN BEGIN
              IF BuildingTrade.GET("No.") THEN;
            END;
          END
          ELSE BEGIN
            IF pText <> '' THEN BEGIN
              SETFILTER(Description,STRSUBSTNO('@*%1*', pText));
              IF FINDFIRST THEN;
              SETRANGE(Description);
            END;
          END;
          IF FORM.RUNMODAL(0,BuildingTrade) = ACTION::LookupOK THEN BEGIN
            pCode := "No.";
            pText := Description;
            SETRANGE(Description);
            EXIT(TRUE);
          END;
          EXIT(FALSE);
        END;
      END ELSE BEGIN
        WITH SpecBuildingTrade DO BEGIN
          IF pCode <> '' THEN BEGIN
            IF BuildingTrade."No." <> pCode THEN BEGIN
              IF SpecBuildingTrade.GET("Building Trade No.",pSpecCode) THEN;
            END;
          END
          ELSE BEGIN
          SETRANGE("Specialization Code",pSpecCode);
            IF pText <> '' THEN BEGIN
              SETFILTER("Building Trade Description",STRSUBSTNO('@*%1*', pText));
              IF FINDFIRST THEN;
              SETRANGE("Building Trade Description");
            END;
          END;
          IF FORM.RUNMODAL(0,SpecBuildingTrade) = ACTION::LookupOK THEN BEGIN
            pCode := SpecBuildingTrade."Building Trade No.";
            pText := "Building Trade Description";
            SETRANGE("Building Trade Description");
            EXIT(TRUE);
          END;
          EXIT(FALSE);
        END;

      END;
    END;

    PROCEDURE BuildingTrade_Validate@1100281008(VAR pText@1100281002 : Text[100];pSpecCode@1100281003 : Code[10];VAR pCode@1100281001 : Code[20]) : Boolean;
    VAR
      lOldCode@1100281000 : Code[10];
    BEGIN
      lOldCode := pCode;
      IF pText = '' THEN BEGIN
        pCode := '';
        EXIT(pCode <> lOldCode);
      END;
      IF pSpecCode = '' THEN BEGIN
        WITH BuildingTrade DO BEGIN
          IF STRLEN(pText) <= MAXSTRLEN(pCode) THEN BEGIN
            IF GET(pText) THEN BEGIN
              pCode := "No.";
              pText := Description;
              EXIT(pCode <> lOldCode);
            END;
          END;

          SETFILTER(Description, STRSUBSTNO('@*%1*', pText));
          IF ISEMPTY THEN
            SETRANGE(Description)
          ELSE BEGIN
            IF COUNT = 1 THEN BEGIN
              FINDFIRST;
              pCode := "No.";
              pText := Description;
              SETRANGE(Description);
              EXIT(pCode <> lOldCode);
            END;
          END;
          IF FORM.RUNMODAL(0,BuildingTrade) = ACTION::LookupOK THEN BEGIN
            pCode := "No.";
            pText := Description;
            SETRANGE(Description);
            EXIT(pCode <> lOldCode);
          END;
        END;
      END ELSE BEGIN
        WITH SpecBuildingTrade DO BEGIN
          IF STRLEN(pText) <= MAXSTRLEN(pCode) THEN BEGIN
            IF GET(pText,pSpecCode) THEN BEGIN
              pCode := "Building Trade No.";
              pText := "Building Trade Description";
              SETRANGE("Building Trade Description");
              EXIT(pCode <> lOldCode);
            END;
          END;

          SETFILTER("Building Trade Description", STRSUBSTNO('@*%1*', pText));
          IF ISEMPTY THEN
            SETRANGE("Building Trade Description")
          ELSE BEGIN
            IF COUNT = 1 THEN BEGIN
              FINDFIRST;
              pCode := "Building Trade No.";
              pText := "Building Trade Description";
              SETRANGE("Building Trade Description");
              EXIT(pCode <> lOldCode);
            END;
          END;
          IF FORM.RUNMODAL(0,SpecBuildingTrade) = ACTION::LookupOK THEN BEGIN
            pCode := "Building Trade No.";
            pText := "Building Trade Description";
            SETRANGE("Building Trade Description");
            EXIT(pCode <> lOldCode);
          END;
        END;

      END;
      pText := BuildingTrade_Desc(pSpecCode,pCode);
    END;

    PROCEDURE BuildingTrade_Desc@1100281007(pSpecCode@1100281001 : Code[10];pCode@1100281000 : Code[20]) : Text[100];
    BEGIN
      IF pCode = '' THEN
        EXIT('');
      WITH BuildingTrade DO BEGIN
        IF "No." <> pCode THEN
          IF NOT GET(pCode) THEN BEGIN
            CLEAR(BuildingTrade);
            Description := pCode; //IMH03.ST
          END;
        EXIT(Description);
      END;
    END;

    PROCEDURE Specialization_Lookup@1100281013(VAR pText@1100281001 : Text[100];pBuildingTrade@1100281000 : Code[20];VAR pCode@1100281002 : Code[10]) : Boolean;
    VAR
      lSpecializationBuildingTrade@1100281003 : Record 50031;
      lSpecializationBuildingTrade2@1100281004 : Record 50031;
    BEGIN
      IF pBuildingTrade = '' THEN BEGIN
        WITH Specialization DO BEGIN
          IF pCode <> '' THEN BEGIN
            IF Specialization.Code <> pCode THEN BEGIN
              IF Specialization.GET(Code) THEN;
            END;
          END
          ELSE BEGIN
            IF pText <> '' THEN BEGIN
              SETFILTER(Description,STRSUBSTNO('@*%1*', pText));
              IF FINDFIRST THEN;
              SETRANGE(Description);
            END;
          END;
          IF PAGE.RUNMODAL(0, Specialization) = ACTION::LookupOK THEN BEGIN
            pCode := Code;
            pText := Description;
            SETRANGE(Description);//IMH09
            EXIT(TRUE);
          END;
          EXIT(FALSE);
        END;
      END ELSE BEGIN
        WITH SpecBuildingTrade DO BEGIN
          IF pCode <> '' THEN BEGIN
            IF SpecBuildingTrade."Specialization Code" <> pCode THEN BEGIN
              IF SpecBuildingTrade.GET(pBuildingTrade, "Specialization Code") THEN;
            END;
          END
          ELSE BEGIN
            SETRANGE("Building Trade No.",pBuildingTrade);
            IF pText <> '' THEN BEGIN
              SETFILTER("Specialization Description",STRSUBSTNO('@*%1*', pText));
              IF FINDFIRST THEN;
              SETRANGE("Specialization Description");
            END;
          END;
          IF FORM.RUNMODAL(50304, SpecBuildingTrade) = ACTION::LookupOK THEN BEGIN
            pCode :="Specialization Code";
            pText := "Specialization Description";
            SETRANGE("Specialization Description");//IMH09
            EXIT(TRUE);
          END;
          EXIT(FALSE);
        END;
      END;
    END;

    PROCEDURE Specialization_Validate@1100281012(VAR pText@1100281002 : Text[100];pBuildingTrade@1100281003 : Code[20];VAR pCode@1100281001 : Code[10]) : Boolean;
    VAR
      lOldCode@1100281000 : Code[10];
    BEGIN
      lOldCode := pCode;
      IF pText = '' THEN BEGIN
        pCode := '';
        EXIT(pCode <> lOldCode);
      END;
      IF pBuildingTrade = '' THEN BEGIN
        WITH Specialization DO BEGIN
          IF STRLEN(pText) <= MAXSTRLEN(pCode) THEN BEGIN
            IF GET(pText) THEN BEGIN
              pCode := Code;
              pText := Description;
              EXIT(pCode <> lOldCode);
            END;
          END;

          SETFILTER(Description, STRSUBSTNO('@*%1*', pText));
          IF ISEMPTY THEN
            SETRANGE(Description)
          ELSE BEGIN
            IF COUNT = 1 THEN BEGIN
              FINDFIRST;
              pCode := Code;
              pText := Description;
              EXIT(pCode <> lOldCode);
            END;
          END;
          IF PAGE.RUNMODAL(0, Specialization) = ACTION::LookupOK THEN BEGIN
            pCode := Code;
            pText := Description;
            SETRANGE(Description); //IMH09
            EXIT(pCode <> lOldCode);
          END;
        END;
      END ELSE BEGIN
        WITH SpecBuildingTrade DO BEGIN
          IF STRLEN(pText) <= MAXSTRLEN(pCode) THEN BEGIN
            IF GET(pBuildingTrade,pText) THEN BEGIN
              pCode := "Specialization Code";
              //<<IMH03.ISAT.EBA
              //CALCFIELDS("Specialization Description");
              //>>IMH03.ISAT.EBA
              pText := "Specialization Description";
              SETRANGE("Specialization Description");//IMH09
              EXIT(pCode <> lOldCode);
            END;
          END;
          SETRANGE("Building Trade No.",pBuildingTrade);
          SETFILTER("Specialization Description", STRSUBSTNO('@*%1*', pText));
          IF ISEMPTY THEN
            SETRANGE("Specialization Description")
          ELSE BEGIN
            IF COUNT = 1 THEN BEGIN
              FINDFIRST;
              pCode := "Specialization Code";
              //<<IMH03.ISAT.EBA
              //CALCFIELDS("Specialization Description");
              //>>IMH03.ISAT.EBA
              pText := "Specialization Description";
              SETRANGE("Specialization Description");//IMH09
              EXIT(pCode <> lOldCode);
            END;
          END;
          IF PAGE.RUNMODAL(0, SpecBuildingTrade) = ACTION::LookupOK THEN BEGIN
            pCode := "Specialization Code";
            pText := "Specialization Description";
            SETRANGE("Specialization Description");//IMH09
            EXIT(pCode <> lOldCode);
          END;
        END;


      END;
      pText := Specialization_Desc(pBuildingTrade,pCode);
    END;

    PROCEDURE Specialization_Validate_Build@1100281044(VAR pSpecialityCode@1100281003 : Code[20];VAR pBuildingTrade@1100281004 : Code[20]);
    VAR
      lSpeciality@1100281002 : Record 50005;
      lSpecializationBuildingTrade@1100281000 : Record 50031;
      lSpecializationBuildingTrade2@1100281001 : Record 50031;
    BEGIN
      lSpeciality.GET(pSpecialityCode);

      // Descente du corps d'‚tat
      IF pBuildingTrade = '' THEN BEGIN
        lSpecializationBuildingTrade.RESET;
        lSpecializationBuildingTrade.SETRANGE("Specialization Code",pSpecialityCode);
        IF lSpecializationBuildingTrade.FINDFIRST THEN BEGIN
          lSpecializationBuildingTrade2.COPY(lSpecializationBuildingTrade);
          IF lSpecializationBuildingTrade2.NEXT = 1 THEN BEGIN
            IF FORM.RUNMODAL(0,lSpecializationBuildingTrade) <> ACTION::LookupOK THEN BEGIN
              EXIT;
            END;
          END;
          pBuildingTrade := lSpecializationBuildingTrade."Building Trade No.";
        END;
      END;
    END;

    PROCEDURE Specialization_Desc@1100281011(pCode@1100281000 : Code[10];pBuildingTrade@1100281001 : Code[20]) : Text[100];
    BEGIN
      IF pCode = '' THEN
        EXIT('');
      WITH Specialization DO BEGIN
        IF Code <> pCode THEN
          IF NOT GET(pCode) THEN BEGIN
            CLEAR(Specialization);
            Description := pCode; //IMH03.ST
          END;
        EXIT(Description);
      END;
    END;

    PROCEDURE ServiceDevice_Lookup@1100281014(VAR pText@1100281001 : Text[100];VAR pCode@1100281002 : Code[10]) : Boolean;
    BEGIN
      WITH ServiceDevice DO BEGIN
        IF pCode <> '' THEN BEGIN
          IF ServiceDevice.Code <> pCode THEN BEGIN
            IF ServiceDevice.GET(Code) THEN;
          END;
        END
        ELSE BEGIN
          IF pText <> '' THEN BEGIN
            SETFILTER(Description,STRSUBSTNO('@*%1*', pText));
            IF FINDFIRST THEN;
            SETRANGE(Description);
          END;
        END;
        IF PAGE.RUNMODAL(0, ServiceDevice) = ACTION::LookupOK THEN BEGIN
          pCode := Code;
          pText := Description;
          EXIT(TRUE);
        END;
        EXIT(FALSE);
      END;
    END;

    PROCEDURE ServiceDevice_Validate@1100281010(VAR pText@1100281002 : Text[100];VAR pCode@1100281001 : Code[10]) : Boolean;
    VAR
      lOldCode@1100281000 : Code[10];
    BEGIN
      lOldCode := pCode;
      IF pText = '' THEN BEGIN
        pCode := '';
        EXIT(pCode <> lOldCode);
      END;

      WITH ServiceDevice DO BEGIN
        IF STRLEN(pText) <= MAXSTRLEN(pCode) THEN BEGIN
          IF GET(pText) THEN BEGIN
            pCode := Code;
            pText := Description;
            EXIT(pCode <> lOldCode);
          END;
        END;

        SETFILTER(Description, STRSUBSTNO('@*%1*', pText));
        IF ISEMPTY THEN
          SETRANGE(Description)
        ELSE BEGIN
          IF COUNT = 1 THEN BEGIN
            FINDFIRST;
            pCode := Code;
            pText := Description;
            EXIT(pCode <> lOldCode);
          END;
        END;
        IF PAGE.RUNMODAL(0,ServiceDevice) = ACTION::LookupOK THEN BEGIN
          pCode := Code;
          pText := Description;
          EXIT(pCode <> lOldCode);
        END;
      END;
      pText := ServiceDevice_Desc(pCode);
    END;

    PROCEDURE ServiceDevice_Desc@1100281003(pCode@1100281000 : Code[10]) : Text[100];
    BEGIN
      IF pCode = '' THEN
        EXIT('');
      WITH ServiceDevice DO BEGIN
        IF Code <> pCode THEN
          IF NOT GET(pCode) THEN BEGIN
            CLEAR(ServiceDevice);
            Description := pCode; //IMH03.ST
          END;
        EXIT(Description);
      END;
    END;

    PROCEDURE FaultArea_Lookup@1100281017(VAR pText@1100281001 : Text[100];VAR pCode@1100281002 : Code[10]) : Boolean;
    BEGIN
      WITH FaultArea DO BEGIN
        IF pCode <> '' THEN BEGIN
          IF FaultArea.Code <> pCode THEN BEGIN
            IF FaultArea.GET(Code) THEN;
          END;
        END
        ELSE BEGIN
          IF pText <> '' THEN BEGIN
            SETFILTER(Description,STRSUBSTNO('@*%1*', pText));
            IF FINDFIRST THEN;
            SETRANGE(Description);
          END;
        END;
        IF PAGE.RUNMODAL(0, FaultArea) = ACTION::LookupOK THEN BEGIN
          pCode := Code;
          pText := Description;
          SETRANGE(Description);//IMH09
          EXIT(TRUE);
        END;
        EXIT(FALSE);
      END;
    END;

    PROCEDURE FaultArea_Validate@1100281016(VAR pText@1100281002 : Text[100];VAR pCode@1100281001 : Code[10]) : Boolean;
    VAR
      lOldCode@1100281000 : Code[10];
    BEGIN
      lOldCode := pCode;
      IF pText = '' THEN BEGIN
        pCode := '';
        EXIT(pCode <> lOldCode);
      END;

      WITH FaultArea DO BEGIN
        IF STRLEN(pText) <= MAXSTRLEN(pCode) THEN BEGIN
          IF GET(pText) THEN BEGIN
            pCode := Code;
            pText := Description;
            SETRANGE(Description);//IMH09
            EXIT(pCode <> lOldCode);
          END;
        END;

        SETFILTER(Description, STRSUBSTNO('@*%1*', pText));
        IF ISEMPTY THEN
          SETRANGE(Description)
        ELSE BEGIN
          IF COUNT = 1 THEN BEGIN
            FINDFIRST;
            pCode := Code;
            pText := Description;
            SETRANGE(Description);//IMH09
            EXIT(pCode <> lOldCode);
          END;
        END;
        IF PAGE.RUNMODAL(0,FaultArea) = ACTION::LookupOK THEN BEGIN
          pCode := Code;
          pText := Description;
          SETRANGE(Description);//IMH09
          EXIT(pCode <> lOldCode);
        END;
      END;
      pText := FaultArea_Desc(pCode);
    END;

    PROCEDURE FaultArea_Desc@1100281015(pCode@1100281000 : Code[10]) : Text[100];
    BEGIN
      IF pCode = '' THEN
        EXIT('');
      WITH FaultArea DO BEGIN
        IF Code <> pCode THEN
          IF NOT GET(pCode) THEN BEGIN
            CLEAR(FaultArea);
            Description := pCode; //IMH03.ST
          END;
        EXIT(Description);
      END;
    END;

    PROCEDURE FaultAreaSpec_Lookup@1100281070(pBuildingTradeNo@1100281000 : Code[20];pSpecializationCode@1100281003 : Code[10];VAR pText@1100281001 : Text[100];VAR pCode@1100281002 : Code[10]) : Boolean;
    BEGIN
      //IMH13
      WITH SpecFaultArea DO BEGIN
        SETRANGE("Building Trade No.", pBuildingTradeNo);
        SETRANGE("Specialization Code", pSpecializationCode);
        IF ISEMPTY THEN
          EXIT(FaultArea_Lookup(pText, pCode));

        IF pCode <> '' THEN BEGIN
          IF SpecFaultArea."Affected Location Code" <> pCode THEN BEGIN
            IF SpecFaultArea.GET(pBuildingTradeNo, pSpecializationCode, pCode) THEN;
          END;
        END
        ELSE BEGIN
          IF pText <> '' THEN BEGIN
            SETFILTER("Affected Location Description",STRSUBSTNO('@*%1*', pText));
            IF FINDFIRST THEN;
            SETRANGE("Affected Location Description");
          END;
        END;
        IF PAGE.RUNMODAL(0, SpecFaultArea) = ACTION::LookupOK THEN BEGIN
          pCode := "Affected Location Code";
          CALCFIELDS("Affected Location Description");
          pText := "Affected Location Description";
          SETRANGE("Affected Location Description");//IMH09
          EXIT(TRUE);
        END;
        EXIT(FALSE);
      END;
    END;

    PROCEDURE FaultAreaSpec_Validate@1100281069(pBuildingTradeNo@1100281004 : Code[20];pSpecializationCode@1100281003 : Code[10];VAR pText@1100281002 : Text[100];VAR pCode@1100281001 : Code[10]) : Boolean;
    VAR
      lOldCode@1100281000 : Code[10];
    BEGIN
      //IMH13
      lOldCode := pCode;
      IF pText = '' THEN BEGIN
        pCode := '';
        EXIT(pCode <> lOldCode);
      END;

      WITH SpecFaultArea DO BEGIN
        SETRANGE("Building Trade No.", pBuildingTradeNo);
        SETRANGE("Specialization Code", pSpecializationCode);
        IF ISEMPTY THEN
          EXIT(FaultArea_Validate(pText, pCode));

        IF STRLEN(pText) <= MAXSTRLEN(pCode) THEN BEGIN
          IF GET(pBuildingTradeNo, pSpecializationCode, pText) THEN BEGIN
            pCode := "Affected Location Code";
            CALCFIELDS("Affected Location Description");
            pText := SpecFaultArea."Affected Location Description";
            SETRANGE("Affected Location Description");//IMH09
            EXIT(pCode <> lOldCode);
          END;
        END;

        SETFILTER("Affected Location Description", STRSUBSTNO('@*%1*', pText));
        IF ISEMPTY THEN
          SETRANGE("Affected Location Description")
        ELSE BEGIN
          IF COUNT = 1 THEN BEGIN
            FINDFIRST;
            pCode := "Affected Location Code";
            CALCFIELDS("Affected Location Description");
            pText := SpecFaultArea."Affected Location Description";
            SETRANGE("Affected Location Description");//IMH09
            EXIT(pCode <> lOldCode);
          END;
        END;
        IF PAGE.RUNMODAL(0,SpecFaultArea) = ACTION::LookupOK THEN BEGIN
          pCode := "Affected Location Code";
          CALCFIELDS("Affected Location Description");
          pText := SpecFaultArea."Affected Location Description";
          SETRANGE("Affected Location Description");//IMH09
          EXIT(pCode <> lOldCode);
        END;
      END;
      pText := FaultArea_Desc(pCode);
    END;

    PROCEDURE LocatDetailFaultArea_Lookup@1100281071(pAffectedLocationCode@1100281000 : Code[20];VAR pText@1100281001 : Text[100];VAR pCode@1100281002 : Code[10]) : Boolean;
    BEGIN
      //IMH13
      WITH FaultAreaLocationDetail DO BEGIN
        SETRANGE("Affected Location Code", pAffectedLocationCode);
        IF ISEMPTY THEN
          EXIT(Code_Validate(pText,50070,19,pCode));

        IF pCode <> '' THEN BEGIN
          IF "Location Detail Code" <> pCode THEN BEGIN
            IF GET(pAffectedLocationCode, pCode) THEN;
          END;
        END
        ELSE BEGIN
          IF pText <> '' THEN BEGIN
            SETFILTER("Location Detail Description",STRSUBSTNO('@*%1*', pText));
            IF FINDFIRST THEN;
            SETRANGE("Location Detail Description");
          END;
        END;
        IF PAGE.RUNMODAL(0, FaultAreaLocationDetail) = ACTION::LookupOK THEN BEGIN
          pCode := "Location Detail Code";
          CALCFIELDS("Location Detail Description");
          pText := "Location Detail Description";
          SETRANGE("Location Detail Description");//IMH09
          EXIT(TRUE);
        END;
        EXIT(FALSE);
      END;
    END;

    PROCEDURE LocatDetaiFaultArea_Validate@1100281068(pAffectedLocationCode@1100281003 : Code[20];VAR pText@1100281002 : Text[100];VAR pCode@1100281001 : Code[10]) : Boolean;
    VAR
      lOldCode@1100281000 : Code[10];
    BEGIN
      //IMH13
      lOldCode := pCode;
      IF pText = '' THEN BEGIN
        pCode := '';
        EXIT(pCode <> lOldCode);
      END;

      WITH FaultAreaLocationDetail DO BEGIN
        SETRANGE("Affected Location Code", pAffectedLocationCode);
        IF ISEMPTY THEN
          EXIT(Code_Validate(pText,50070,19,pCode));

        IF STRLEN(pText) <= MAXSTRLEN(pCode) THEN BEGIN
          IF GET(pAffectedLocationCode, pText) THEN BEGIN
            pCode := "Location Detail Code";
            CALCFIELDS("Location Detail Description");
            pText := "Location Detail Description";
            SETRANGE("Location Detail Description");//IMH09
            EXIT(pCode <> lOldCode);
          END;
        END;

        SETFILTER("Location Detail Description", STRSUBSTNO('@*%1*', pText));
        IF ISEMPTY THEN
          SETRANGE("Affected Location Description")
        ELSE BEGIN
          IF COUNT = 1 THEN BEGIN
            FINDFIRST;
            pCode := "Location Detail Code";
            CALCFIELDS("Location Detail Description");
            pText := "Location Detail Description";
            SETRANGE("Location Detail Description");//IMH09
            EXIT(pCode <> lOldCode);
          END;
        END;
        IF PAGE.RUNMODAL(0,FaultAreaLocationDetail) = ACTION::LookupOK THEN BEGIN
          pCode := "Location Detail Code";
          CALCFIELDS("Location Detail Description");
          pText := "Location Detail Description";
          SETRANGE("Location Detail Description");//IMH09
          EXIT(pCode <> lOldCode);
        END;
      END;
      pText := Code_Desc(50070,19,pCode);
    END;

    PROCEDURE Salutation_Lookup@1100281020(VAR pText@1100281001 : Text[100];VAR pCode@1100281002 : Code[10]) : Boolean;
    BEGIN
      WITH Salutation DO BEGIN
        IF pCode <> '' THEN BEGIN
          IF Salutation.Code <> pCode THEN BEGIN
            IF Salutation.GET(Code) THEN;
          END;
        END
        ELSE BEGIN
          IF pText <> '' THEN BEGIN
            SETFILTER(Description,STRSUBSTNO('@*%1*', pText));
            IF FINDFIRST THEN;
            SETRANGE(Description);
          END;
        END;
        IF PAGE.RUNMODAL(0, Salutation) = ACTION::LookupOK THEN BEGIN
          pCode := Code;
          pText := Description;
          EXIT(TRUE);
        END;
        EXIT(FALSE);
      END;
    END;

    PROCEDURE Salutation_Validate@1100281019(VAR pText@1100281002 : Text[100];VAR pCode@1100281001 : Code[10]) : Boolean;
    VAR
      lOldCode@1100281000 : Code[10];
    BEGIN
      lOldCode := pCode;
      IF pText = '' THEN BEGIN
        pCode := '';
        EXIT(pCode <> lOldCode);
      END;

      WITH Salutation DO BEGIN
        IF STRLEN(pText) <= MAXSTRLEN(pCode) THEN BEGIN
          IF GET(pText) THEN BEGIN
            pCode := Code;
            pText := Description;
            EXIT(pCode <> lOldCode);
          END;
        END;

        SETFILTER(Description, STRSUBSTNO('@*%1*', pText));
        IF ISEMPTY THEN
          SETRANGE(Description)
        ELSE BEGIN
          IF COUNT = 1 THEN BEGIN
            FINDFIRST;
            pCode := Code;
            pText := Description;
            EXIT(pCode <> lOldCode);
          END;
        END;
        IF PAGE.RUNMODAL(0,Salutation) = ACTION::LookupOK THEN BEGIN
          pCode := Code;
          pText := Description;
          EXIT(pCode <> lOldCode);
        END;
      END;
      pText := Salutation_Desc(pCode);
    END;

    PROCEDURE Salutation_Desc@1100281018(pCode@1100281000 : Code[10]) : Text[100];
    BEGIN
      IF pCode = '' THEN
        EXIT('');
      WITH Salutation DO BEGIN
        IF Code <> pCode THEN
          IF NOT GET(pCode) THEN BEGIN
            CLEAR(Salutation);
            Description := pCode; //IMH03.ST
          END;
        EXIT(Description);
      END;
    END;

    PROCEDURE CorporateContact_Lookup@1100281024(VAR pText@1100281001 : Text[100];pCorporateNo@1100281000 : Code[20];pCorporateRegionCode@1100281005 : Code[10];VAR pCode@1100281002 : Code[20]) : Boolean;
    VAR
      lContactBusinessRelation@1100281003 : Record 5054;
      lMarketingSetup@1100281004 : Record 5079;
      lContact@1100281006 : Record 5050;
      lServSetup@1100281007 : Record 5911;
    BEGIN
      lMarketingSetup.GET;
      lContactBusinessRelation.SETCURRENTKEY("Link to Table","No.");
      lContactBusinessRelation.SETRANGE("Link to Table",lContactBusinessRelation."Link to Table"::Customer);
      lContactBusinessRelation.SETRANGE("No.",pCorporateNo);
      lContactBusinessRelation.SETRANGE("Business Relation Code",lMarketingSetup."Bus. Rel. Code for Customers");
      IF lContactBusinessRelation.ISEMPTY THEN
        EXIT;
      lContactBusinessRelation.FINDFIRST;

      lContact.GET(lContactBusinessRelation."Contact No."); //IMH06.ST
      WITH CorporateContact DO BEGIN
        SETCURRENTKEY("Company No.");
        FILTERGROUP(2);
        SETRANGE("Company No.", lContactBusinessRelation."Contact No.");
        SETRANGE("Company Name", lContact.Name); //IMH06.ST ajout car l'index liste commence par le nom
        SETRANGE(Type,Type::Person);
        SETRANGE("Mask To DGS", FALSE);   //IMH12
        FILTERGROUP(0);
        SETFILTER("Corporate Region Code",'%1|%2','', pCorporateRegionCode);
        //<<IMH06.ST
        lServSetup.GET;
        IF lServSetup."Corp. Contact Responsibility" <> '' THEN BEGIN
          SETFILTER("Job Responsibility Filter", lServSetup."Corp. Contact Responsibility");
          CALCFIELDS("No. of Job Responsibilities");
          SETFILTER("No. of Job Responsibilities", '>%1', 0);
        END;
        //>>IMH06.ST
        IF pCode <> '' THEN BEGIN
          IF "No." <> pCode THEN BEGIN
            IF GET(pCode) THEN;
          END;
        END
        ELSE BEGIN
          IF pText <> '' THEN BEGIN
            SETFILTER("Search Name",STRSUBSTNO('*%1*', pText));
            IF FINDFIRST THEN;
            SETRANGE("Search Name");
          END;
        END;

        IF FORM.RUNMODAL(0,CorporateContact) = ACTION::LookupOK THEN BEGIN
          pCode := "No.";
          pText := Name;
          EXIT(TRUE);
        END;
      END;
      EXIT(FALSE);
    END;

    PROCEDURE CorporateContact_Validate@1100281023(VAR pText@1100281002 : Text[100];pCorporateNo@1100281006 : Code[20];pCorporateRegionCode@1100281005 : Code[10];VAR pCode@1100281001 : Code[10]) : Boolean;
    VAR
      lContactBusinessRelation@1100281004 : Record 5054;
      lMarketingSetup@1100281003 : Record 5079;
      lOldCode@1100281000 : Code[10];
    BEGIN
      lOldCode := pCode;
      IF pText = '' THEN BEGIN
        pCode := '';
        EXIT(pCode <> lOldCode);
      END;

      lMarketingSetup.GET;
      lContactBusinessRelation.SETCURRENTKEY("Link to Table","No.");
      lContactBusinessRelation.SETRANGE("Link to Table",lContactBusinessRelation."Link to Table"::Customer);
      lContactBusinessRelation.SETRANGE("No.",pCorporateNo);
      lContactBusinessRelation.SETRANGE("Business Relation Code",lMarketingSetup."Bus. Rel. Code for Customers");
      IF lContactBusinessRelation.ISEMPTY THEN
        EXIT;
      lContactBusinessRelation.FINDFIRST;

      WITH CorporateContact DO BEGIN
        IF STRLEN(pText) <= MAXSTRLEN(pCode) THEN BEGIN
          IF GET(pText) THEN BEGIN
            pCode := "No.";
            pText := Name;
            EXIT(pCode <> lOldCode);
          END;
        END;
        SETCURRENTKEY("Company No.");
        SETRANGE("Company No.",lContactBusinessRelation."Contact No.");
        SETRANGE(Type,Type::Person);
        SETFILTER("Corporate Region Code",'%1|%2','',pCorporateRegionCode);
        SETRANGE("Mask To DGS", FALSE);   //IMH12

        SETFILTER(Name, STRSUBSTNO('@*%1*', pText));
        IF ISEMPTY THEN
          SETRANGE(Name)
        ELSE BEGIN
          IF COUNT = 1 THEN BEGIN
            FINDFIRST;
            pCode := "No.";
            pText := Name;
            EXIT(pCode <> lOldCode);
          END;
        END;
        IF PAGE.RUNMODAL(0, CorporateContact) = ACTION::LookupOK THEN BEGIN
          pCode := "No.";
          pText := Name;
          EXIT(pCode <> lOldCode);
        END;
      END;
      pText := CorporateContact_Desc(pCode);
    END;

    PROCEDURE CorporateContact_Desc@1100281022(pCode@1100281000 : Code[20]) : Text[100];
    BEGIN
      IF pCode = '' THEN
        EXIT('');
      WITH CorporateContact DO BEGIN
        IF "No." <> pCode THEN
          IF NOT GET(pCode) THEN BEGIN
            CLEAR(CorporateContact);
            Name := pCode;  //IMH03.ST
          END;
        EXIT(Name);

      END;
    END;

    PROCEDURE CorporateRegion_Lookup@1100281026(VAR pText@1100281001 : Text[100];VAR pCorporateNo@1100281000 : Code[20];VAR pRegionCode@1100281002 : Code[10]) : Boolean;
    BEGIN
      WITH CorporateRegion DO BEGIN
        IF pRegionCode <> '' THEN BEGIN
          IF CorporateRegion."Region Code" <> pRegionCode THEN BEGIN
            IF CorporateRegion.GET(pCorporateNo,"Region Code") THEN;
          END;
        END;
        //<<IMH09
        IF pCorporateNo <> '' THEN BEGIN
      //  ELSE BEGIN
        //>>IMH09
          SETRANGE("Corporate No.",pCorporateNo);
          IF pText <> '' THEN BEGIN
            SETFILTER(Name,STRSUBSTNO('@*%1*', pText));
            IF FINDFIRST THEN;
            SETRANGE(Name);
          END;
        END;
        IF PAGE.RUNMODAL(0, CorporateRegion) = ACTION::LookupOK THEN BEGIN
          pRegionCode := "Region Code";
          pText := Name;
          EXIT(TRUE);
        END;
        EXIT(FALSE);
      END;
    END;

    PROCEDURE CorporateRegion_Validate@1100281025(VAR pText@1100281002 : Text[100];VAR pCorporateNo@1100281001 : Code[20];VAR pRegionCode@1100281003 : Code[10]) : Boolean;
    VAR
      lOldCode@1100281004 : Code[20];
    BEGIN
      lOldCode := pRegionCode;
      IF pText = '' THEN BEGIN
        pRegionCode := '';
        EXIT(pRegionCode <> lOldCode);
      END;

      WITH CorporateRegion DO BEGIN
        IF STRLEN(pText) <= MAXSTRLEN(pRegionCode) THEN BEGIN
          IF GET(pCorporateNo,pText) THEN BEGIN
            pRegionCode := "Region Code";
            pText := Name;
            EXIT(pRegionCode <> lOldCode);
          END;
        END;
        SETRANGE("Corporate No.",pCorporateNo);
        SETFILTER(Name, STRSUBSTNO('@*%1*', pText));
        IF ISEMPTY THEN
          SETRANGE(Name)
        ELSE BEGIN
          IF COUNT = 1 THEN BEGIN
            FINDFIRST;
            pRegionCode := "Region Code";
            pText := Name;
        //    EXIT(pRegionCode <> lOldCode);
          END;
        END;
        IF PAGE.RUNMODAL(0, CorporateRegion) = ACTION::LookupOK THEN BEGIN
          pRegionCode := "Region Code";
          pText := Name;
      //    EXIT(pRegionCode <> lOldCode);
        END;
      END;
      pText := CorporateRegion_Desc(pCorporateNo,pRegionCode);
    END;

    PROCEDURE CorporateRegion_Desc@1100281021(pCorporateNo@1100281000 : Code[20];pRegionCode@1100281001 : Code[10]) : Text[100];
    BEGIN
      IF (pRegionCode = '') THEN
        EXIT('');
      WITH CorporateRegion DO BEGIN
        IF ("Region Code" <> pRegionCode) THEN
          IF NOT GET(pCorporateNo,pRegionCode) THEN BEGIN
            CLEAR(CorporateRegion);
            Name := pRegionCode;  //IMH03.ST
          END;
        EXIT(Name);
      END;
    END;

    PROCEDURE TrayTask_Lookup@1100281030(VAR pText@1100281001 : Text[100];pSourceTable@1100281003 : ' ,Contact,Service,ServiceHeader,Intervention,DocumentQueue,CompletnessTask,InterventionQuote';VAR pCode@1100281002 : Code[10]) : Boolean;
    BEGIN
      WITH TrayTask DO BEGIN
        IF pCode <> '' THEN BEGIN
          IF "Task Code" <> pCode THEN BEGIN
            IF GET(pSourceTable,"Task Code") THEN;
          END;
        END
        ELSE BEGIN
          SETRANGE("Source Table", pSourceTable);
          IF pText <> '' THEN BEGIN
            SETFILTER(Description,STRSUBSTNO('@*%1*', pText));
            IF FINDFIRST THEN;
            SETRANGE(Description);
          END;
        END;
        IF PAGE.RUNMODAL(0, TrayTask) = ACTION::LookupOK THEN BEGIN
          pCode := "Task Code";
          pText := Description;
          EXIT(TRUE);
        END;
        EXIT(FALSE);
      END;
    END;

    PROCEDURE TrayTask_Validate@1100281029(VAR pText@1100281002 : Text[100];pSourceTable@1100281000 : ' ,Contact,Service,ServiceHeader,Intervention,DocumentQueue,CompletnessTask,InterventionQuote';VAR pCode@1100281003 : Code[10]) : Boolean;
    VAR
      lOldCode@1100281004 : Code[20];
    BEGIN
      lOldCode := pCode;
      IF pText = '' THEN BEGIN
        pCode := '';
        EXIT(pCode <> lOldCode);
      END;

      WITH TrayTask DO BEGIN
        IF STRLEN(pText) <= MAXSTRLEN(pCode) THEN BEGIN
          IF GET(pSourceTable,pText) THEN BEGIN
            pCode := "Task Code";
            pText := Description;
            EXIT(pCode <> lOldCode);
          END;
        END;
        SETRANGE("Source Table", pSourceTable);
        SETFILTER(Description, STRSUBSTNO('@*%1*', pText));
        IF ISEMPTY THEN
          SETRANGE(Description)
        ELSE BEGIN
          IF COUNT = 1 THEN BEGIN
            FINDFIRST;
            pCode := "Task Code";
            pText := Description;
            EXIT(pCode <> lOldCode);
          END;
        END;
        IF PAGE.RUNMODAL(0, TrayTask) = ACTION::LookupOK THEN BEGIN
          pCode := "Task Code";
          pText := Description;
          EXIT(pCode <> lOldCode);
        END;
      END;
      pText := TrayTask_Desc(pSourceTable,pCode);
    END;

    PROCEDURE TrayTask_Desc@1100281028(pSourceTable@1100281000 : ' ,Contact,Service,ServiceHeader,Intervention,DocumentQueue,CompletnessTask,InterventionQuote';pCode@1100281001 : Code[10]) : Text[100];
    BEGIN
      IF (pCode = '') THEN
        EXIT('');
      WITH TrayTask DO BEGIN
        IF ("Task Code" <> pCode) THEN
          IF NOT GET(pSourceTable,pCode) THEN BEGIN
            CLEAR(TrayTask);
            Description := pCode; //IMH03.ST
          END;
        EXIT(Description);
      END;
    END;

    PROCEDURE ServiceQuoteCodes_Lookup@1100281033(VAR pText@1100281001 : Text[100];pServiceOrderType@1100281003 : Code[10];pType@1100281000 : 'QuoteType,QuoteRefusal';VAR pCode@1100281002 : Code[10]) : Boolean;
    BEGIN
      WITH ServiceQuoteCodes DO BEGIN
        IF pCode <> '' THEN BEGIN
          IF Code <> pCode THEN BEGIN
            IF GET(pServiceOrderType,Code,pType) THEN;
          END;
        END
        ELSE BEGIN
          SETRANGE("Service Order Type",pServiceOrderType);
          SETRANGE(Type,pType);
          IF pText <> '' THEN BEGIN
            SETFILTER("Quote Code Description",STRSUBSTNO('@*%1*', pText));
            IF FINDFIRST THEN;
            SETRANGE("Quote Code Description");
          END;
        END;
        IF PAGE.RUNMODAL(0, ServiceQuoteCodes) = ACTION::LookupOK THEN BEGIN
          pCode := Code;
          pText := "Quote Code Description";
          EXIT(TRUE);
        END;
        EXIT(FALSE);
      END;
    END;

    PROCEDURE ServiceQuoteCodes_Validate@1100281032(VAR pText@1100281002 : Text[100];pServiceOrderType@1100281005 : Code[10];pType@1100281001 : 'QuoteType,QuoteRefusal';VAR pCode@1100281003 : Code[10]) : Boolean;
    VAR
      lOldCode@1100281004 : Code[20];
    BEGIN
      lOldCode := pCode;
      IF pText = '' THEN BEGIN
        pCode := '';
        EXIT(pCode <> lOldCode);
      END;

      WITH ServiceQuoteCodes DO BEGIN
        IF STRLEN(pText) <= MAXSTRLEN(pCode) THEN BEGIN
          IF GET(pServiceOrderType,pText,pType) THEN BEGIN
            pCode := Code;
            pText := "Quote Code Description";
            EXIT(pCode <> lOldCode);
          END;
        END;
        SETRANGE("Service Order Type",pServiceOrderType);
        SETRANGE(Type,pType);
        SETFILTER("Quote Code Description", STRSUBSTNO('@*%1*', pText));
        IF ISEMPTY THEN
          SETRANGE("Quote Code Description")
        ELSE BEGIN
          IF COUNT = 1 THEN BEGIN
            FINDFIRST;
            pCode := Code;
            pText := "Quote Code Description";
            EXIT(pCode <> lOldCode);
          END;
        END;
        IF PAGE.RUNMODAL(0, ServiceQuoteCodes) = ACTION::LookupOK THEN BEGIN
          pCode := Code;
          pText := "Quote Code Description";
          EXIT(pCode <> lOldCode);
        END;
      END;
      pText := ServiceQuoteCodes_Desc(pServiceOrderType,pType,pCode);
    END;

    PROCEDURE ServiceQuoteCodes_Desc@1100281031(pServiceOrderType@1100281003 : Code[10];pType@1100281002 : 'QuoteType,QuoteRefusal';pCode@1100281001 : Code[10]) : Text[100];
    BEGIN
      IF (pCode = '') THEN
        EXIT('');
      WITH ServiceQuoteCodes DO BEGIN
        IF (Code <> pCode) THEN BEGIN
          IF NOT GET(pServiceOrderType,pCode,pType) THEN BEGIN
            CLEAR(ServiceQuoteCodes);
            "Quote Code Description" := pCode;  //IMH03.ST
          END
          ELSE
            CALCFIELDS("Quote Code Description");
        END;
        EXIT("Quote Code Description");
      END;
    END;

    PROCEDURE Code_Lookup@1100281037(VAR pText@1100281001 : Text[100];pTableID@1100281000 : Integer;pFieldID@1100281002 : Integer;VAR pCode@1100281003 : Code[10]) : Boolean;
    BEGIN
      WITH CodeTable DO BEGIN
        IF pText = '' THEN
          RESET;

        SETRANGE("Table ID",pTableID);
        SETRANGE("Field ID",pFieldID);

        IF pCode <> '' THEN BEGIN
          IF Code <> pCode THEN BEGIN
            IF GET(pTableID,pFieldID,Code) THEN;
          END;
        END
        ELSE BEGIN
          IF pText <> '' THEN BEGIN
            SETFILTER(Description,STRSUBSTNO('@*%1*', pText));
            IF FINDFIRST THEN;
            SETRANGE(Description);
          END;
        END;
        IF PAGE.RUNMODAL(0, CodeTable) = ACTION::LookupOK THEN BEGIN
          pCode := Code;
          pText := Description;
          RESET;
          EXIT(TRUE);
        END;
        RESET;
        EXIT(FALSE);
      END;
    END;

    PROCEDURE Code_Validate@1100281036(VAR pText@1100281002 : Text[100];pTableID@1100281005 : Integer;pFieldID@1100281000 : Integer;VAR pCode@1100281001 : Code[10]) : Boolean;
    VAR
      lOldCode@1100281004 : Code[20];
    BEGIN
      lOldCode := pCode;
      IF pText = '' THEN BEGIN
        pCode := '';
        EXIT(pCode <> lOldCode);
      END;

      WITH CodeTable DO BEGIN
        IF STRLEN(pText) <= MAXSTRLEN(pCode) THEN BEGIN
          IF GET(pTableID,pFieldID,pText) THEN BEGIN
            pCode := Code;
            pText := Description;
            EXIT(pCode <> lOldCode);
          END;
        END;
        SETRANGE("Table ID",pTableID);
        SETRANGE("Field ID",pFieldID);
        SETFILTER(Description, STRSUBSTNO('@*%1*', pText));
        IF ISEMPTY THEN
          SETRANGE(Description)
        ELSE BEGIN
          IF COUNT = 1 THEN BEGIN
            FINDFIRST;
            pCode := Code;
            pText := Description;
            RESET;
            EXIT(pCode <> lOldCode);
          END;
        END;
        IF PAGE.RUNMODAL(0, CodeTable) = ACTION::LookupOK THEN BEGIN
          pCode := Code;
          pText := Description;
          RESET;
          EXIT(pCode <> lOldCode);
        END;
      END;
      pText := Code_Desc(pTableID,pFieldID,pCode);
    END;

    PROCEDURE Code_Desc@1100281035(pTableID@1100281003 : Integer;pFieldID@1100281002 : Integer;pCode@1100281000 : Code[10]) : Text[100];
    BEGIN
      IF (pCode = '') THEN
        EXIT('');
      WITH CodeTable DO BEGIN
        IF (Code <> pCode) THEN
          IF NOT GET(pTableID,pFieldID,pCode) THEN BEGIN
            CLEAR(CodeTable);
            Description := pCode; //IMH03.ST
          END;
        EXIT(Description);
      END;
    END;

    PROCEDURE ShowServHeaderImplFacilities@1100281027(pServiceHeader@1100281000 : Record 5900);
    VAR
      lServiceHeaderAddressList@1100281001 : Page 50078;
      lServiceHeaderAddress@1100281002 : Record 50068;
    BEGIN
      //IMH02
      lServiceHeaderAddress.SETCURRENTKEY("Service Header No.","Address Type","Address No.");
      lServiceHeaderAddress.SETRANGE("Service Header No.", pServiceHeader."No.");
      lServiceHeaderAddress.SETFILTER("Address Type",'%1|%2|%3', lServiceHeaderAddress."Address Type"::Guarding,
        lServiceHeaderAddress."Address Type"::Moving, lServiceHeaderAddress."Address Type"::"Public Storage");
      lServiceHeaderAddressList.SETTABLEVIEW(lServiceHeaderAddress);
      lServiceHeaderAddressList.EDITABLE(FALSE);
      lServiceHeaderAddressList.SetHideEditionFonction(TRUE);
      lServiceHeaderAddressList.RUN;
    END;

    PROCEDURE OrgLevel_Lookup@1100281040(VAR pText@1100281001 : Text[100];VAR pCode@1100281002 : Code[10]) : Boolean;
    BEGIN
      //IMH04.ST
      WITH OrgLevel DO BEGIN
        IF pCode <> '' THEN BEGIN
          IF Code <> pCode THEN BEGIN
            IF GET(Code) THEN;
          END;
        END
        ELSE BEGIN
          IF pText <> '' THEN BEGIN
            SETFILTER(Description,STRSUBSTNO('@*%1*', pText));
            IF FINDFIRST THEN;
            SETRANGE(Description);
          END;
        END;
        IF PAGE.RUNMODAL(0, OrgLevel) = ACTION::LookupOK THEN BEGIN
          pCode := Code;
          pText := Description;
          EXIT(TRUE);
        END;
        EXIT(FALSE);
      END;
    END;

    PROCEDURE OrgLevel_Validate@1100281039(VAR pText@1100281002 : Text[100];VAR pCode@1100281001 : Code[10]) : Boolean;
    VAR
      lOldCode@1100281000 : Code[10];
    BEGIN
      //IMH04.ST
      lOldCode := pCode;
      IF pText = '' THEN BEGIN
        pCode := '';
        EXIT(pCode <> lOldCode);
      END;

      WITH OrgLevel DO BEGIN
        IF STRLEN(pText) <= MAXSTRLEN(pCode) THEN BEGIN
          IF GET(pText) THEN BEGIN
            pCode := Code;
            pText := Description;
            EXIT(pCode <> lOldCode);
          END;
        END;

        SETFILTER(Description, STRSUBSTNO('@*%1*', pText));
        IF ISEMPTY THEN
          SETRANGE(Description)
        ELSE BEGIN
          IF COUNT = 1 THEN BEGIN
            FINDFIRST;
            pCode := Code;
            pText := Description;
            EXIT(pCode <> lOldCode);
          END;
        END;
        IF PAGE.RUNMODAL(0,OrgLevel) = ACTION::LookupOK THEN BEGIN
          pCode := Code;
          pText := Description;
          EXIT(pCode <> lOldCode);
        END;
      END;
      pText := OrgLevel_Desc(pCode);
    END;

    PROCEDURE OrgLevel_Desc@1100281041(pCode@1100281000 : Code[10]) : Text[100];
    BEGIN
      //IMH04.ST
      IF pCode = '' THEN
        EXIT('');
      WITH OrgLevel DO BEGIN
        IF Code <> pCode THEN
          IF NOT GET(pCode) THEN BEGIN
            CLEAR(OrgLevel);
            Description := pCode;
          END;
        EXIT(Description);
      END;
    END;

    PROCEDURE DeclarationComment_Lookup@1100281034(VAR pText@1100281001 : Text[100];VAR pCode@1100281000 : Code[10]) : Boolean;
    BEGIN
      //IMH05.ZW
      WITH StandardText DO BEGIN
        RESET;
        IF pCode <> '' THEN BEGIN
          IF Code <> pCode THEN BEGIN
            IF GET(Code) THEN;
          END;
        END
        ELSE BEGIN
          IF pText <> '' THEN BEGIN
            SETFILTER(Description,STRSUBSTNO('@*%1*', pText));
            IF FINDFIRST THEN;
            SETRANGE(Description);
          END;
        END;
        IF PAGE.RUNMODAL(0, StandardText) = ACTION::LookupOK THEN BEGIN
          pCode := Code;
          pText := Description;
          EXIT(TRUE);
        END;
        EXIT(FALSE);
      END;
    END;

    PROCEDURE DeclarationComment_Validate@1100281042(VAR pText@1100281002 : Text[100];VAR pCode@1100281001 : Code[10]) : Boolean;
    VAR
      lOldCode@1100281000 : Code[10];
    BEGIN
      //IMH05.ZW
      lOldCode := pCode;
      IF pText = '' THEN BEGIN
        pCode := '';
        EXIT(pCode <> lOldCode);
      END;

      WITH StandardText DO BEGIN
        RESET;
        IF STRLEN(pText) <= MAXSTRLEN(pCode) THEN BEGIN
          IF GET(pText) THEN BEGIN
            pCode := Code;
            pText := Description;
            EXIT(pCode <> lOldCode);
          END;
        END;

        SETFILTER(Description, STRSUBSTNO('@*%1*', pText));
        IF ISEMPTY THEN
          SETRANGE(Description)
        ELSE BEGIN
          IF COUNT = 1 THEN BEGIN
            FINDFIRST;
            pCode := Code;
            pText := Description;
            EXIT(pCode <> lOldCode);
          END;
        END;
        IF PAGE.RUNMODAL(0,StandardText) = ACTION::LookupOK THEN BEGIN
          pCode := Code;
          pText := Description;
          EXIT(pCode <> lOldCode);
        END;
      END;
      pText := DeclarationComment_Desc(pCode);
    END;

    PROCEDURE DeclarationComment_Desc@1100281038(pCode@1100281000 : Code[10]) : Text[100];
    BEGIN
      //IMH05.ZW
      IF pCode = '' THEN
        EXIT('');
      WITH StandardText DO BEGIN
        RESET;
        IF Code <> pCode THEN
          IF NOT GET(pCode) THEN BEGIN
            CLEAR(StandardText);
            Description := pCode;
          END;
        EXIT(Description);
      END;
    END;

    PROCEDURE ServiceEditable@1100281043(pServiceHeader@1100281000 : Record 5900) : Boolean;
    BEGIN
      //IMH07.ZW
      //IF pServiceHeader."Fusion Service" THEN
      //  EXIT(FALSE);

      EXIT(TRUE);
    END;

    PROCEDURE Requi_Lookup@1100281047(VAR pText@1100281001 : Text[100];pServOrderType@1100281004 : Code[10];VAR pCode@1100281003 : Code[10]) : Boolean;
    VAR
      lServOrderType@1100281000 : Record 5903;
    BEGIN
      WITH CodeTable DO BEGIN
        IF pText = '' THEN
          RESET;

        FILTERGROUP(2);
        SETRANGE("Table ID",50066);
        SETRANGE("Field ID",13);
        IF lServOrderType.GET(pServOrderType) THEN
          IF lServOrderType."Requisitionner Allowed" <> '' THEN
            SETFILTER(Code, lServOrderType."Requisitionner Allowed");
        FILTERGROUP(0);

        IF pCode <> '' THEN BEGIN
          IF Code <> pCode THEN BEGIN
            IF GET(50066,13,Code) THEN;
          END;
        END
        ELSE BEGIN
          IF pText <> '' THEN BEGIN
            SETFILTER(Description,STRSUBSTNO('@*%1*', pText));
            IF FINDFIRST THEN;
            SETRANGE(Description);
          END;
        END;
        IF PAGE.RUNMODAL(0, CodeTable) = ACTION::LookupOK THEN BEGIN
          pCode := Code;
          pText := Description;
          RESET;
          EXIT(TRUE);
        END;
        RESET;
        EXIT(FALSE);
      END;
    END;

    PROCEDURE Requi_Validate@1100281046(VAR pText@1100281002 : Text[100];pServOrderType@1100281003 : Code[10];VAR pCode@1100281001 : Code[10]) : Boolean;
    VAR
      lOldCode@1100281004 : Code[20];
      lServOrderType@1100281006 : Record 5903;
    BEGIN
      lOldCode := pCode;
      IF pText = '' THEN BEGIN
        pCode := '';
        EXIT(pCode <> lOldCode);
      END;

      IF lServOrderType.GET(pServOrderType) THEN;
      WITH CodeTable DO BEGIN
        IF STRLEN(pText) <= MAXSTRLEN(pCode) THEN BEGIN
          IF GET(50066,13,pText) THEN BEGIN
            IF lServOrderType."Requisitionner Allowed" <> '' THEN BEGIN
              SETRECFILTER;
              SETFILTER(Code, lServOrderType."Requisitionner Allowed");
              IF NOT ISEMPTY THEN BEGIN
                pCode := Code;
                pText := Description;
                EXIT(pCode <> lOldCode);
              END;
            END
            ELSE BEGIN
              pCode := Code;
              pText := Description;
              EXIT(pCode <> lOldCode);
            END;
          END;
        END;
        RESET;
        SETRANGE("Table ID",50066);
        SETRANGE("Field ID",13);
        SETFILTER(Description, STRSUBSTNO('@*%1*', pText));
        IF lServOrderType."Requisitionner Allowed" <> '' THEN
          SETFILTER(Code, lServOrderType."Requisitionner Allowed");

        IF ISEMPTY THEN
          SETRANGE(Description)
        ELSE BEGIN
          IF COUNT = 1 THEN BEGIN
            FINDFIRST;
            pCode := Code;
            pText := Description;
            RESET;
            EXIT(pCode <> lOldCode);
          END;
        END;
        IF PAGE.RUNMODAL(0, CodeTable) = ACTION::LookupOK THEN BEGIN
          pCode := Code;
          pText := Description;
          RESET;
          EXIT(pCode <> lOldCode);
        END;
      END;
      pText := Requi_Desc(pCode);
    END;

    PROCEDURE Requi_Desc@1100281045(pCode@1100281000 : Code[10]) : Text[100];
    BEGIN
      EXIT(Code_Desc(50066,13,pCode));
    END;

    PROCEDURE ExpertContact_Desc@1100281048(pCode@1100281000 : Code[20]) : Text[100];
    BEGIN
      // IMH09.ISAT.MA
      IF pCode = '' THEN
        EXIT('');
      WITH ExpertContact DO BEGIN
        IF "No." <> pCode THEN
          IF NOT GET(pCode) THEN BEGIN
            CLEAR(CorporateContact);
            Name := pCode;
          END;
        EXIT(Name);
      END;
    END;

    PROCEDURE Corporate_Lookup@1100281051(VAR pText@1100281001 : Text[100];VAR pCode@1100281003 : Code[20]) : Boolean;
    VAR
      lServOrderType@1100281000 : Record 5903;
    BEGIN
      WITH CorporateCustomer DO BEGIN
        FILTERGROUP(2);
        SETRANGE("Service Contact", CorporateCustomer."Service Contact"::"Corporate Customer");
        SETRANGE("Parent Customer No.", '');
        SETRANGE(CorporateCustomer."Show For DPS",TRUE);
        SETRANGE("Service Corporate", TRUE);
        FILTERGROUP(0);

        IF pCode <> '' THEN BEGIN
          IF "No." <> pCode THEN BEGIN
            IF GET("No.") THEN
            BEGIN
              pCode := "No.";
              pText := Name;
              EXIT(TRUE);
            END;
          END;
        END
        ELSE BEGIN
          IF pText <> '' THEN BEGIN
            SETFILTER("Search Name",STRSUBSTNO('*%1*', pText));
            IF FINDFIRST THEN;
            SETRANGE("Search Name");
          END;
        END;
        IF PAGE.RUNMODAL(0, CorporateCustomer) = ACTION::LookupOK THEN BEGIN
          pCode := "No.";
          pText := Name;
          EXIT(TRUE);
        END;
        EXIT(FALSE);
      END;
    END;

    PROCEDURE Corporate_Validate@1100281050(VAR pText@1100281002 : Text[100];VAR pCode@1100281001 : Code[20]) : Boolean;
    VAR
      lOldCode@1100281004 : Code[20];
      lServOrderType@1100281006 : Record 5903;
    BEGIN
      lOldCode := pCode;
      IF pText = '' THEN BEGIN
        pCode := '';
        EXIT(pCode <> lOldCode);
      END;

      WITH CorporateCustomer DO BEGIN
        IF STRLEN(pText) <= MAXSTRLEN(pCode) THEN BEGIN
          IF GET(pText) THEN BEGIN
            pCode := "No.";
            pText := Name;
            EXIT(pCode <> lOldCode);
          END;
        END;
        FILTERGROUP(2);
        SETRANGE("Service Contact", CorporateCustomer."Service Contact"::"Corporate Customer");
        SETRANGE("Parent Customer No.", '');
        SETRANGE("Service Corporate", TRUE);
        SETRANGE(CorporateCustomer."Show For DPS",TRUE);
        FILTERGROUP(0);
        SETFILTER("Search Name", STRSUBSTNO('*%1*', pText));
        IF ISEMPTY THEN
          SETRANGE("Search Name")
        ELSE BEGIN
          IF COUNT = 1 THEN BEGIN
            FINDFIRST;
            pCode := "No.";
            pText := Name;
            RESET;
            EXIT(pCode <> lOldCode);
          END;
        END;
        IF PAGE.RUNMODAL(0, CorporateCustomer) = ACTION::LookupOK THEN BEGIN
          pCode := "No.";
          pText := Name;
          RESET;
          EXIT(pCode <> lOldCode);
        END;
      END;
      pText := Requi_Desc(pCode);
    END;

    PROCEDURE Corporate_Desc@1100281049(pCode@1100281000 : Code[20]) : Text[100];
    BEGIN
      IF CorporateCustomer."No." <> pCode THEN
        IF NOT CorporateCustomer.GET(pCode) THEN
          CLEAR(CorporateCustomer);
      EXIT(CorporateCustomer.Name);
    END;

    PROCEDURE JobTitle_Lookup@1100281054(VAR pText@1100281001 : Text[100];VAR pCode@1100281002 : Text[30]) : Boolean;
    BEGIN
      JobResponsibility.RESET;
      WITH JobResponsibility DO BEGIN
        IF pCode <> '' THEN BEGIN
          IF JobResponsibility.Code <> pCode THEN BEGIN
            IF JobResponsibility.GET(Code) THEN;
          END;
        END
        ELSE BEGIN
          IF pText <> '' THEN BEGIN
            //<<IMH15
            //SETFILTER(Description,STRSUBSTNO('@*%1*', pText));
            SETFILTER(Description,STRSUBSTNO('@*%1*', ReplaceSpecChara(pText)));
            //>>IMH15
            IF FINDFIRST THEN;
            SETRANGE(Description);
          END;
        END;

        IF PAGE.RUNMODAL(0, JobResponsibility) = ACTION::LookupOK THEN BEGIN
          pCode := Code;
          pText := Description;
          EXIT(TRUE);
        END;
        EXIT(FALSE);
      END;
    END;

    PROCEDURE JobTitle_Validate@1100281053(VAR pText@1100281002 : Text[100];VAR pCode@1100281001 : Text[30]) : Boolean;
    VAR
      lOldCode@1100281000 : Code[10];
    BEGIN
      lOldCode := pCode;
      IF pText = '' THEN BEGIN
        pCode := '';
        EXIT(pCode <> lOldCode);
      END;
      JobResponsibility.RESET;
      WITH JobResponsibility DO BEGIN
        IF STRLEN(pText) <= MAXSTRLEN(Code) THEN BEGIN
          IF GET(pText) THEN BEGIN
            pCode := Code;
            pText := Description;
            EXIT(pCode <> lOldCode);
          END;
        END;

        //<<IMH15
        //SETFILTER(Description,STRSUBSTNO('@*%1*', pText));
        SETFILTER(Description,STRSUBSTNO('@*%1*', ReplaceSpecChara(pText)));
        //>>IMH15
        IF ISEMPTY THEN
          SETRANGE(Description)
        ELSE BEGIN
          IF COUNT = 1 THEN BEGIN
            FINDFIRST;
            pCode := Code;
            pText := Description;
            EXIT(pCode <> lOldCode);
          END;
        END;
        IF PAGE.RUNMODAL(0,JobResponsibility) = ACTION::LookupOK THEN BEGIN
          pCode := Code;
          pText := Description;
          EXIT(pCode <> lOldCode);
        END;
      END;
      pText := JobTitle_Desc(pCode);
    END;

    PROCEDURE JobTitle_Desc@1100281052(pCode@1100281000 : Text[30]) : Text[100];
    BEGIN
      IF pCode = '' THEN
        EXIT('');
      JobResponsibility.RESET;
      WITH JobResponsibility DO BEGIN
        IF Code <> pCode THEN
          IF NOT GET(pCode) THEN BEGIN
            CLEAR(JobResponsibility);
            Description := pCode; //IMH03.ST
          END;
        EXIT(Description);
      END;
    END;

    PROCEDURE ContractForm_Lookup@1100281059(VAR pText@1100281001 : Text[100];VAR pCode@1100281002 : Code[10]) : Boolean;
    BEGIN
      {
      WITH ContactContract DO BEGIN
        IF pCode <> '' THEN BEGIN
          IF ContactContract.Code <> pCode THEN BEGIN
            IF ContactContract.GET(Code) THEN;
          END;
        END
        ELSE BEGIN
          IF pText <> '' THEN BEGIN
            SETFILTER(Description,STRSUBSTNO('@*%1*', pText));
            IF FINDFIRST THEN;
            SETRANGE(Description);
          END;
        END;
        IF PAGE.RUNMODAL(0, FaultReason) = ACTION::LookupOK THEN BEGIN
          pCode := Code;
          pText := Description;
          EXIT(TRUE);
        END;
        EXIT(FALSE);
      END;
      }
    END;

    PROCEDURE ContractForm_Validate@1100281058(VAR pText@1100281002 : Text[100];VAR pCode@1100281001 : Code[10]) : Boolean;
    VAR
      lOldCode@1100281000 : Code[10];
    BEGIN
      lOldCode := pCode;
      IF pText = '' THEN BEGIN
        pCode := '';
        EXIT(pCode <> lOldCode);
      END;

      WITH FaultReason DO BEGIN
        IF STRLEN(pText) <= MAXSTRLEN(pCode) THEN BEGIN
          IF GET(pText) THEN BEGIN
            pCode := Code;
            pText := Description;
            EXIT(pCode <> lOldCode);
          END;
        END;

        SETFILTER(Description, STRSUBSTNO('@*%1*', pText));
        IF ISEMPTY THEN
          SETRANGE(Description)
        ELSE BEGIN
          IF COUNT = 1 THEN BEGIN
            FINDFIRST;
            pCode := Code;
            pText := Description;
            EXIT(pCode <> lOldCode);
          END;
        END;
        IF PAGE.RUNMODAL(0, FaultReason) = ACTION::LookupOK THEN BEGIN
          pCode := Code;
          pText := Description;
          EXIT(pCode <> lOldCode);
        END;
      END;
      pText := ServCause_Desc(pCode);
    END;

    PROCEDURE ContractForm_Desc@1100281057(pCode@1100281000 : Code[10]) : Text[100];
    BEGIN
      IF pCode = '' THEN
        EXIT('');
      WITH FaultReason DO BEGIN
        IF Code <> pCode THEN
          IF NOT GET(pCode) THEN BEGIN
            CLEAR(FaultReason);
            Description := pCode; //IMH03.ST
          END;
        EXIT(Description);
      END;
    END;

    PROCEDURE ContactContractForm_Lookup@1100281062(VAR pText@1100281001 : Text[100];VAR pCode@1100281002 : Code[10];pContactNo@1100281003 : Code[20];pCorporateNo@1100281004 : Code[20];pEvent@1100281005 : Date) : Boolean;
    VAR
      lContactContract@1100281000 : Record 50059;
    BEGIN
      //IMH09
      WITH ContactContract DO BEGIN
        IF (pContactNo <> '') OR (pCorporateNo <> '') THEN BEGIN
          SETCURRENTKEY("Contact No.", "Corporate No.");
          FILTERGROUP(2);
          SETRANGE("Contact No.",pContactNo);
          SETRANGE("Corporate No.",pCorporateNo);
          FILTERGROUP(0);
        END;
        IF pEvent <> 0D THEN
          SETFILTER("Expiration Date",'%1|>=%2',0D,pEvent);
         "Contract Form Code" := "Contract Form Code";
        IF PAGE.RUNMODAL(0, ContactContract) = ACTION::LookupOK THEN BEGIN
          pCode := ContactContract."Contract Form Code";
          pText := ContactContract."Contract Name";
          SETRANGE("Contract Form Code");
          EXIT(TRUE);
        END;
        EXIT(FALSE);
      END;
    END;

    PROCEDURE ContactContractForm_Validate@1100281061(VAR pText@1100281002 : Text[100];VAR pCode@1100281001 : Code[10];pContactNo@1100281008 : Code[20];pCorporateNo@1100281007 : Code[20];pEvent@1100281006 : Date) : Boolean;
    VAR
      lContactContract@1100281005 : Record 50059;
      lOldCode@1100281000 : Code[10];
    BEGIN
      //IMH09
      lOldCode := pCode;
      IF pText = '' THEN BEGIN
        pCode := '';
        EXIT(pCode <> lOldCode);
      END;

      WITH ContactContract DO BEGIN
        IF (pContactNo <> '') OR (pCorporateNo <> '') THEN BEGIN
          SETCURRENTKEY("Contact No.", "Corporate No.");
          FILTERGROUP(2);
          SETRANGE("Contact No.",pContactNo);
          SETRANGE("Corporate No.",pCorporateNo);
          FILTERGROUP(0);
        END;
        IF pEvent <> 0D THEN
          SETFILTER("Expiration Date",'%1|>=%2',0D,pEvent);
        SETFILTER("Contract Form Code", STRSUBSTNO('@*%1*', pText));
        IF COUNT = 1 THEN BEGIN
          FINDFIRST;
          pCode := "Contract Form Code";
          CALCFIELDS("Contract Name");
          pText := "Contract Name";
          SETRANGE("Contract Form Code");
          EXIT(pCode <> lOldCode);
        END;

        IF ISEMPTY THEN
          SETRANGE("Contract Form Code");
        IF COUNT = 1 THEN BEGIN
          FINDFIRST;
          pCode := "Contract Form Code";
          CALCFIELDS("Contract Name");
          pText := "Contract Name";
          SETRANGE("Contract Form Code");
          EXIT(pCode <> lOldCode);
        END;
        IF PAGE.RUNMODAL(0,ContactContract)  = ACTION::LookupOK THEN BEGIN
          pCode := "Contract Form Code";
          CALCFIELDS("Contract Name");
          pText := "Contract Name";
          SETRANGE("Contract Form Code");
          EXIT(pCode <> lOldCode);
        END;
      END;
      pText := ContactContractForm_Desc(pCode,pContactNo,pCorporateNo);
    END;

    PROCEDURE ContactContractForm_Desc@1100281060(pCode@1100281000 : Code[10];pContactNo@1100281002 : Code[20];pCorporateNo@1100281001 : Code[20]) : Text[100];
    BEGIN
      //IMH09
      IF pCode = '' THEN
        EXIT('');
      WITH ContactContract DO BEGIN
        IF (pContactNo <> '') OR (pCorporateNo <> '') THEN BEGIN
          SETCURRENTKEY("Contact No.", "Corporate No.");
          FILTERGROUP(2);
          SETRANGE("Contact No.",pContactNo);
          SETRANGE("Corporate No.",pCorporateNo);
          FILTERGROUP(0);
        END;
        IF "Contract Form Code" <> pCode THEN BEGIN
          ContactContract.SETRANGE("Contract Form Code",pCode);
          IF NOT FINDFIRST THEN BEGIN
            CLEAR(ContactContract);
            "Contract Name" := pCode;
          END;
        END;
        CALCFIELDS("Contract Name");
        EXIT("Contract Name");
      END;
    END;

    PROCEDURE GetMeetingVisibility@1100281055(pServHeader@1100281000 : Record 5900;VAR pMeetingInfo@1100281001 : Boolean;VAR pNotMeetingInfo@1100281002 : Boolean);
    BEGIN
      GetSetup;
      pMeetingInfo := FALSE;
      pNotMeetingInfo := FALSE;
      IF (ProductCatalog."Corporate No." <> pServHeader."Corporate No.") OR
         (ProductCatalog."Service Order Type" <> pServHeader."Service Order Type") THEN
        IF NOT ProductCatalog.GET(pServHeader."Corporate No.",pServHeader."Service Order Type") THEN
          EXIT;

      IF (ProductCatalog."Show Meeting Date" = ProductCatalog."Show Meeting Date"::Yes) OR
         ((ServMgtSetup."Beneficiary Requ. Code" <> '') AND (pServHeader.Requisitioner = ServMgtSetup."Beneficiary Requ. Code")) OR
         ((ServMgtSetup."IMA Requisitionner Code" <> '') AND (pServHeader.Requisitioner = ServMgtSetup."IMA Requisitionner Code")) OR
         //<<IMH16
         (ProductCatalog."Show Declaration Fields" AND (ServMgtSetup."Irdweb Channel Code" <> '')
            AND (ServMgtSetup."Irdweb Channel Code" <> pServHeader.Channel))
         //<<IMH16
      THEN BEGIN
        pMeetingInfo := pServHeader."Declaration Comment Code" = '';
        pNotMeetingInfo := NOT ((pServHeader."Meeting Date" <> 0D) OR (pServHeader."9h-12h") OR (pServHeader."14h-17h"));
      END;
    END;

    PROCEDURE GetSetup@1100281056();
    BEGIN
      IF SetupRead THEN
        EXIT;
      ServMgtSetup.GET;
      SetupRead := TRUE;
    END;

    PROCEDURE SelectBuildingTradeLookup@1100281067(VAR pBuildingTradeDescription@1100281001 : Text[100];VAR pBuildingTradeNo@1100281002 : Code[20];VAR pSpecializationCode@1100281000 : Code[10]);
    VAR
      lBuildingTrade@1100281003 : Record 50032;
      lOldlBuildingTradeNo@1100281004 : Code[20];
    BEGIN
      // IMH10.PC
      // Permet de s‚lectionner un corps d'‚tat par sa description

      // S'il s'agit d'une saisie intiale on passe sur la saisie par sp‚cialit‚
      IF (pBuildingTradeNo = '') THEN BEGIN
      END ELSE BEGIN
        lOldlBuildingTradeNo := pBuildingTradeNo;

        WITH lBuildingTrade DO BEGIN
          IF pBuildingTradeNo <> '' THEN BEGIN
            IF GET(pBuildingTradeNo) THEN;
          END ELSE BEGIN
            IF pBuildingTradeDescription <> '' THEN BEGIN
              SETFILTER(Description,STRSUBSTNO('@*%1*', pBuildingTradeDescription));
              IF FINDFIRST THEN;
              SETRANGE(Description);
            END;
          END;
          IF FORM.RUNMODAL(FORM::"DPS Building Trade List",lBuildingTrade) = ACTION::LookupOK THEN BEGIN
            pBuildingTradeNo := "No.";
            pBuildingTradeDescription := Description;
            IF lOldlBuildingTradeNo <> pBuildingTradeNo THEN BEGIN
              pSpecializationCode := '';
            END;
          END;
        END;
      END;
    END;

    PROCEDURE SelectBuildingTradeValidate@1100281066(VAR pBuildingTradeDescription@1100281003 : Text[100];VAR pBuildingTradeNo@1100281002 : Code[20];VAR pSpecializationCode@1100281001 : Code[10]);
    VAR
      lBuildingTrade@1100281006 : Record 50032;
      lOldlBuildingTradeNo@1100281000 : Code[20];
      lCount@1100281004 : Integer;
    BEGIN
      // IMH10.PC
      // Permet de valider un un corps d'‚tat en fonction de sa description

      // S'il s'agit d'une saisie intiale on passe sur la saisie par sp‚cialit‚
      IF (pBuildingTradeNo = '') THEN BEGIN
      END ELSE BEGIN
        lOldlBuildingTradeNo := pBuildingTradeNo;

        WITH lBuildingTrade DO BEGIN
          IF pBuildingTradeDescription <> '' THEN BEGIN
            SETFILTER(Description,STRSUBSTNO('@*%1*', pBuildingTradeDescription));
          END;
          lCount := COUNT;
          CASE lCount OF
            0 : BEGIN
              SETRANGE(Description);
              IF NOT (FORM.RUNMODAL(FORM::"DPS Building Trade List",lBuildingTrade) = ACTION::LookupOK) THEN BEGIN
                EXIT;
              END;
            END;
            1 : FINDFIRST;
            ELSE BEGIN
              IF NOT (FORM.RUNMODAL(FORM::"DPS Building Trade List",lBuildingTrade) = ACTION::LookupOK) THEN BEGIN
                EXIT;
              END;
            END;
          END;
          pBuildingTradeNo := "No.";
          pBuildingTradeDescription := Description;
          IF lOldlBuildingTradeNo <> pBuildingTradeNo THEN BEGIN
            pSpecializationCode := '';
          END;
        END;
      END;
    END;

    PROCEDURE SelectSpecializationLookup@1100281065(VAR pDescription@1100281002 : Text[100];VAR pBuildingTradeNo@1100281001 : Code[20];VAR pSpecializationCode@1100281000 : Code[10]);
    VAR
      lSpecializationBuildingTrade@1100281003 : Record 50031;
      lOldSpecializationCode@1100281004 : Code[20];
      lCount@1100281005 : Integer;
    BEGIN
      // IMH10.PC
      // Permet de valider une sp‚cialit‚ en fonction de sa description

      lOldSpecializationCode := pSpecializationCode;

      WITH lSpecializationBuildingTrade DO BEGIN
        IF pBuildingTradeNo <> '' THEN BEGIN
          SETRANGE("Building Trade No.",pBuildingTradeNo);
        END;
      //  IF pSpecializationDescription <> '' THEN BEGIN
      //    SETFILTER(Description,STRSUBSTNO('@*%1*', pSpecializationDescription));
      //  end;
        IF FINDFIRST THEN;
      //  setrange(description);
        IF FORM.RUNMODAL(FORM::"DPS Spec. Building Trade List", lSpecializationBuildingTrade) = ACTION::LookupOK THEN BEGIN
          CALCFIELDS("Specialization Description");
          pSpecializationCode := "Specialization Code";
      //    pSpecializationDescription := "specialization Description";
        END;
      END;
    END;

    PROCEDURE SelectSpecializationValidate@1100281064(VAR pSpecializationDescription@1100281003 : Text[100];VAR pBuildingTradeNo@1100281002 : Code[20];VAR pSpecializationCode@1100281001 : Code[10]);
    VAR
      lOldCode@1100281000 : Code[10];
    BEGIN
      // IMH10.PC
      // Permet de valider une sp‚cialit‚ en fonction de sa description
      {
      lOldCode := pCode;
      IF pText = '' THEN BEGIN
        pCode := '';
        EXIT(pCode <> lOldCode);
      END;
      IF pBuildingTrade = '' THEN BEGIN
        WITH Specialization DO BEGIN
          IF STRLEN(pText) <= MAXSTRLEN(pCode) THEN BEGIN
            IF GET(pText) THEN BEGIN
              pCode := Code;
              pText := Description;
              EXIT(pCode <> lOldCode);
            END;
          END;

          SETFILTER(Description, STRSUBSTNO('@*%1*', pText));
          IF ISEMPTY THEN
            SETRANGE(Description)
          ELSE BEGIN
            IF COUNT = 1 THEN BEGIN
              FINDFIRST;
              pCode := Code;
              pText := Description;
              EXIT(pCode <> lOldCode);
            END;
          END;
          IF PAGE.RUNMODAL(0, Specialization) = ACTION::LookupOK THEN BEGIN
            pCode := Code;
            pText := Description;
            SETRANGE(Description); //IMH09
            EXIT(pCode <> lOldCode);
          END;
        END;
      END ELSE BEGIN
        WITH SpecBuildingTrade DO BEGIN
          IF STRLEN(pText) <= MAXSTRLEN(pCode) THEN BEGIN
            IF GET(pBuildingTrade,pText) THEN BEGIN
              pCode := "Specialization Code";
              //<<IMH03.ISAT.EBA
              //CALCFIELDS("Specialization Description");
              //>>IMH03.ISAT.EBA
              pText := "Specialization Description";
              SETRANGE("Specialization Description");//IMH09
              EXIT(pCode <> lOldCode);
            END;
          END;
          SETRANGE("Building Trade No.",pBuildingTrade);
          SETFILTER("Specialization Description", STRSUBSTNO('@*%1*', pText));
          IF ISEMPTY THEN
            SETRANGE("Specialization Description")
          ELSE BEGIN
            IF COUNT = 1 THEN BEGIN
              FINDFIRST;
              pCode := "Specialization Code";
              //<<IMH03.ISAT.EBA
              //CALCFIELDS("Specialization Description");
              //>>IMH03.ISAT.EBA
              pText := "Specialization Description";
              SETRANGE("Specialization Description");//IMH09
              EXIT(pCode <> lOldCode);
            END;
          END;
          IF PAGE.RUNMODAL(0, SpecBuildingTrade) = ACTION::LookupOK THEN BEGIN
            pCode := "Specialization Code";
            pText := "Specialization Description";
            SETRANGE("Specialization Description");//IMH09
            EXIT(pCode <> lOldCode);
          END;
        END;


      END;
      pText := Specialization_Desc(pBuildingTrade,pCode);
      }
    END;

    PROCEDURE ChoiceBuildingSpecialization@1100281063(pFromField@1100281000 : 'Building Trade,Specialization';pDescription@1100281006 : Text[50];VAR pBuildingTradeNo@1100281002 : Code[20];VAR pSpecializationCode@1100281004 : Code[10];pLookup@1100281009 : Boolean;pDelete@1100281011 : Boolean);
    VAR
      lSpecializationBuildingTrade@1100281005 : Record 50031;
      lBuildingTrade@1100281008 : Record 50032;
      lOldBuildingTradeNo@1100281003 : Code[10];
      lOldSpecializationCode@1100281001 : Code[10];
      lCount@1100281007 : Integer;
      lACTIONLookup@1100281010 : Action;
    BEGIN
      // IMH10.PC
      // Permet de valider un un corps d'‚tat en fonction de sa description
      lOldBuildingTradeNo := pBuildingTradeNo;
      lOldSpecializationCode := pSpecializationCode;

      WITH lSpecializationBuildingTrade DO BEGIN
        // Saisie initiale => Affichage de l'‚cran des sp‚cialit‚s par corps de m‚tier
        IF (lOldBuildingTradeNo = '') AND (lOldSpecializationCode = '') THEN BEGIN
          IF pDescription <> '' THEN BEGIN
            CASE pFromField OF
              pFromField::"Building Trade" : SETFILTER("Building Trade Description",STRSUBSTNO('@%1*',pDescription));
              pFromField::Specialization : SETFILTER("Specialization Description",STRSUBSTNO('@%1*',pDescription));
            END;
          END;
          lCount := COUNT;
          IF pDescription <> '' THEN BEGIN
            IF lCount = 0 THEN BEGIN
              CASE pFromField OF
                pFromField::"Building Trade" : BEGIN
                  SETRANGE("Building Trade Description");
                  SETFILTER("Specialization Description",STRSUBSTNO('@%1*',pDescription));
                END;
                pFromField::Specialization : BEGIN
                  SETRANGE("Specialization Description");
                  SETFILTER("Building Trade Description",STRSUBSTNO('@%1*',pDescription));
                END;
              END;
            END;
          END;
          lCount := COUNT;
          CASE lCount OF
            0 : BEGIN
              CASE pFromField OF
                pFromField::"Building Trade" : BEGIN
                  SETRANGE("Building Trade Description");
                  SETRANGE("Specialization Description");
                END;
                pFromField::Specialization : BEGIN
                  SETRANGE("Specialization Description");
                  SETRANGE("Building Trade Description");
                END;
              END;
              IF NOT (FORM.RUNMODAL(FORM::"DPS Spec. Building Trade List", lSpecializationBuildingTrade) = ACTION::LookupOK) THEN BEGIN
                EXIT;
              END;
            END;
            1 : BEGIN
              FINDFIRST;
              IF pLookup THEN BEGIN
                IF NOT (FORM.RUNMODAL(FORM::"DPS Spec. Building Trade List", lSpecializationBuildingTrade) = ACTION::LookupOK) THEN BEGIN
                  EXIT;
                END;
              END;
            END;
            ELSE BEGIN
              IF NOT (FORM.RUNMODAL(FORM::"DPS Spec. Building Trade List", lSpecializationBuildingTrade) = ACTION::LookupOK) THEN BEGIN
                EXIT;
              END;
            END;
          END;
          pBuildingTradeNo := lSpecializationBuildingTrade."Building Trade No.";
          pSpecializationCode := lSpecializationBuildingTrade."Specialization Code";
          EXIT;
        END;
      END;
      IF pFromField = pFromField::"Building Trade" THEN BEGIN
        IF pDelete THEN BEGIN
          pBuildingTradeNo := '';
          pSpecializationCode := '';
          EXIT;
        END;
        WITH lBuildingTrade DO BEGIN
          IF pDescription <> '' THEN BEGIN
            SETFILTER(Description,STRSUBSTNO('@%1*',pDescription));
          END;
          lCount := COUNT;
          CASE lCount OF
            0 : BEGIN
              SETRANGE(Description);
              IF NOT (FORM.RUNMODAL(FORM::"DPS Building Trade List",lBuildingTrade) = ACTION::LookupOK) THEN BEGIN
                EXIT;
              END;
            END;
            1 : BEGIN
              FINDFIRST;
              IF pLookup THEN BEGIN
                SETRANGE(Description);
                IF NOT (FORM.RUNMODAL(FORM::"DPS Building Trade List",lBuildingTrade) = ACTION::LookupOK) THEN BEGIN
                  EXIT;
                END;
              END;
            END;
            ELSE BEGIN
              FINDFIRST;
              IF pLookup THEN BEGIN
                SETRANGE(Description);
              END;
              IF NOT (FORM.RUNMODAL(FORM::"DPS Building Trade List",lBuildingTrade) = ACTION::LookupOK) THEN BEGIN
                EXIT;
              END;
            END;
          END;
          pBuildingTradeNo := "No.";
          lSpecializationBuildingTrade.SETRANGE("Building Trade No.",pBuildingTradeNo);
          lCount := lSpecializationBuildingTrade.COUNT;
          CASE lCount OF
            1 : lSpecializationBuildingTrade.FINDFIRST;
            ELSE BEGIN
              IF NOT (FORM.RUNMODAL(FORM::"DPS Spec. Building Trade List", lSpecializationBuildingTrade) = ACTION::LookupOK) THEN BEGIN
                pSpecializationCode := '';
                EXIT;
              END;
            END;
          END;
          pSpecializationCode := lSpecializationBuildingTrade."Specialization Code";
          EXIT;
        END;
      END;
      WITH lSpecializationBuildingTrade DO BEGIN
        IF pDelete THEN BEGIN
          pSpecializationCode := '';
          EXIT;
        END;
        IF pFromField = pFromField::Specialization THEN BEGIN
          SETRANGE("Building Trade No.",pBuildingTradeNo);
          IF pDescription <> '' THEN BEGIN
            SETFILTER("Specialization Description",STRSUBSTNO('@%1*', pDescription));
          END;
          lCount := COUNT;
          CASE lCount OF
            0 : BEGIN
              SETRANGE("Specialization Description");
              IF NOT (FORM.RUNMODAL(FORM::"DPS Spec. Building Trade List", lSpecializationBuildingTrade) = ACTION::LookupOK) THEN BEGIN
                EXIT;
              END;
            END;
            1 : BEGIN
              FINDFIRST;
              IF pLookup THEN BEGIN
                SETRANGE("Specialization Description");
                IF NOT (FORM.RUNMODAL(FORM::"DPS Spec. Building Trade List", lSpecializationBuildingTrade) = ACTION::LookupOK) THEN BEGIN
                  EXIT;
                END;
              END;
            END;
            ELSE BEGIN
              IF pLookup THEN BEGIN
                SETRANGE("Specialization Description");
              END;
              IF NOT (FORM.RUNMODAL(FORM::"DPS Spec. Building Trade List", lSpecializationBuildingTrade) = ACTION::LookupOK) THEN BEGIN
                EXIT;
              END;
            END;
          END;
          pSpecializationCode := "Specialization Code";
        END;
      END;
    END;

    PROCEDURE ReplaceSpecChara@1000000000(pText@1000000000 : Text[1024]) : Text[1024];
    BEGIN
      //IMH15
      EXIT(CONVERTSTR(pText, '()', '??'));
    END;

    PROCEDURE DARVADamage_Lookup@1000000006(VAR pText@1100281001 : Text[100];VAR pCode@1100281003 : Code[10]) : Boolean;
    VAR
      lServOrderType@1100281000 : Record 5903;
    BEGIN
      WITH CodeTable DO BEGIN
        IF pText = '' THEN
          RESET;

        FILTERGROUP(2);
        SETRANGE("Table ID",50032);
        SETRANGE("Field ID",50612);
        FILTERGROUP(0);

        IF pCode <> '' THEN BEGIN
          IF Code <> pCode THEN BEGIN
            IF GET(50032,50612,Code) THEN;
          END;
        END
        ELSE BEGIN
          IF pText <> '' THEN BEGIN
            SETFILTER(Description,STRSUBSTNO('@*%1*', pText));
            IF FINDFIRST THEN;
            SETRANGE(Description);
          END;
        END;
        IF PAGE.RUNMODAL(0, CodeTable) = ACTION::LookupOK THEN BEGIN
          pCode := Code;
          pText := Description;
          RESET;
          EXIT(TRUE);
        END;
        RESET;
        EXIT(FALSE);
      END;
    END;

    PROCEDURE DARVADamage_Validate@1000000005(VAR pText@1100281002 : Text[100];pServOrderType@1100281003 : Code[10];VAR pCode@1100281001 : Code[10]) : Boolean;
    VAR
      lOldCode@1100281004 : Code[20];
      lServOrderType@1100281006 : Record 5903;
    BEGIN
      {lOldCode := pCode;
      IF pText = '' THEN BEGIN
        pCode := '';
        EXIT(pCode <> lOldCode);
      END;

      IF lServOrderType.GET(pServOrderType) THEN;
      WITH CodeTable DO BEGIN
        IF STRLEN(pText) <= MAXSTRLEN(pCode) THEN BEGIN
          IF GET(50066,13,pText) THEN BEGIN
            IF lServOrderType."Requisitionner Allowed" <> '' THEN BEGIN
              SETRECFILTER;
              SETFILTER(Code, lServOrderType."Requisitionner Allowed");
              IF NOT ISEMPTY THEN BEGIN
                pCode := Code;
                pText := Description;
                EXIT(pCode <> lOldCode);
              END;
            END
            ELSE BEGIN
              pCode := Code;
              pText := Description;
              EXIT(pCode <> lOldCode);
            END;
          END;
        END;
        RESET;
        SETRANGE("Table ID",50066);
        SETRANGE("Field ID",13);
        SETFILTER(Description, STRSUBSTNO('@*%1*', pText));
        IF lServOrderType."Requisitionner Allowed" <> '' THEN
          SETFILTER(Code, lServOrderType."Requisitionner Allowed");

        IF ISEMPTY THEN
          SETRANGE(Description)
        ELSE BEGIN
          IF COUNT = 1 THEN BEGIN
            FINDFIRST;
            pCode := Code;
            pText := Description;
            RESET;
            EXIT(pCode <> lOldCode);
          END;
        END;
        IF PAGE.RUNMODAL(0, CodeTable) = ACTION::LookupOK THEN BEGIN
          pCode := Code;
          pText := Description;
          RESET;
          EXIT(pCode <> lOldCode);
        END;
      END;
      pText := Requi_Desc(pCode);
      }
    END;

    PROCEDURE DARVADamage_Desc@1000000004(pCode@1100281000 : Code[10]) : Text[100];
    BEGIN
      EXIT(Code_Desc(50032,50612,pCode));
    END;

    BEGIN
    {
      /** @r IMH17 @d 12/02/14 @a ISAT.ACO @v IMH6.01.4986 @s Nature dommages @h 4986
          @c Ajout fonctions DARVADamage_Lookup, DARVADamage_Validate, DARVADamage_Desc */
      /** @r IMH16 @d 05/03/13 @a ISAT.ZW @v IMH6.01.340 @s NEP IMH 4 @h 4330
          @c Modif gestion d'affichage des champs d‚claration  */
      /** @r IMH15 @d 31/12/12 @a ISAT.ZW @v IMH6.01.333 @s NEP00012 @h 4188 @s Ajout fonction ReplaceSpecChara  */
      /** @r IMH14 @d 03/10/12 @a ISAT.ZW @v IMH6.01.011 @s NEP00005 @h 3358 @s Correction  */
      /** @r IMH13 @d 16/07/12 @a ISAT.PC @v IMH6.01.226 @s version 1.4 @c Gestion lieux/d‚tail lieux @h 1986
          @c Lookup Validation Lieux/d‚tail lieux */
      /** @r IMH12 @d 22/06/12 @a ISAT.ZW @v IMH6.01.011 @h 3610 @s Gestion contact GC  */
      /** @r IMH11 @d 15/03/12 @a ISAT.NFO @v IMH6.01.011 @s EVC @c Contr“le si l'EVC est actif */
      /** @r IMH10 @d 08/12/11 @a ISAT.PC @v IMH6.01.011 @s Gestion du service @h 2484 @h 1985 */
      /** @r IMH09 @d 29/08/11 @a ISAT.LLT @v IMH6.01.011 @s Modif CorporateRegion_Lookup  */
      /** @r IMH08 @d 22/06/11 @a ISAT.ST @v IMH6.01.011 @s Ajout du demande en dehors du code (d‚pendant du type) */
      /** @r IMH07 @d 31/05/11 @a ISAT.ZW @v IMH6.01.123 @s Saisie description @c ajout fonction ServiceEditable */
      /** @r IMH06 @d 27/05/11 @a ISAT.ST @v IMH6.01.011 @s Gestion du service
          @c LookupCorporateContact */
      /** @r IMH05 @d 13/05/11 @a ISAT.ZW @v IMH6.01.123 @s Saisie description @c ajout fonction DeclarationComment_Lookup */
      /** @r IMH05 @d 13/05/11 @a ISAT.ZW @v IMH6.01.123 @s Saisie description @c ajout fonction DeclarationComment_Lookup */
      /** @r IMH04 @d 13/05/11 @a ISAT.ST @v IMH6.01.123 @s Saisie description @c Ajout organisation level */
      /** @r IMH03 @d 18/04/11 @a ISAT.EBA @v IMH6.01.123 @s Saisie description @c Correction */
      /** @r IMH03 @d 19/04/11 @a ISAT.ST @v IMH6.01.123 @s Saisie description @c Renvoi le code si rec n'existe pas */
      /** @r IMH02 @d 08/04/11 @a ISAT.ZW @v IMH6.01.123 @s Saisie description @c fonction ShowServHeaderImplFacilities */
      /** @r IMH01 @d 10/03/11 @a ISAT.IMH @v IMH6.01.123 @s Saisie description @c Cr‚ation */
    }
    END.
  }
}