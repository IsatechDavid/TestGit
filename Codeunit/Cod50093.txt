OBJECT Codeunit 50093 User Special Permission
{
  OBJECT-PROPERTIES
  {
    Date=26/05/14;
    Time=11:57:16;
    Modified=Yes;
    Version List=IMH6.01,JUIN,P011;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      SpecialPermSetup@1100281001 : Record 50098;
      SetupRead@1100281002 : Boolean;

    LOCAL PROCEDURE GetSetup@1100281002();
    BEGIN
      //IMH02.ST
      IF SetupRead THEN
        EXIT;
      IF SpecialPermSetup.GET THEN
        SetupRead := TRUE;
    END;

    LOCAL PROCEDURE CheckUserRole@1100481003(pRoleID@1100481000 : Code[10]) : Boolean;
    VAR
      lUserPerm@1100481001 : Record 50099;
    BEGIN
      // V‚rification au niveau login windows
      IF pRoleID = '' THEN
        EXIT(FALSE);
      lUserPerm.SETRANGE("User ID", USERID);
      lUserPerm.SETRANGE("Permission Code", pRoleID);
      EXIT(NOT lUserPerm.ISEMPTY);
    END;

    PROCEDURE IsAdmin@1100481005() : Boolean;
    BEGIN
      GetSetup;
      IF SpecialPermSetup."Admin Role" <> '' THEN
        EXIT(CheckUserRole(SpecialPermSetup."Admin Role"));
      EXIT(FALSE);
    END;

    PROCEDURE IsAdminForTable@1100481001(pTableId@1100481000 : Integer) : Boolean;
    BEGIN
      CASE pTableId OF
      END;
      EXIT(IsAdmin);
    END;

    PROCEDURE IsLockAdmin@1100281000(pTableId@1100281000 : Integer) : Boolean;
    VAR
      lCode@1100281001 : Code[10];
    BEGIN
      GetSetup;
      lCode := SpecialPermSetup."Lock Admin";
      CASE pTableId OF
      END;
      IF lCode <> '' THEN
        IF CheckUserRole(lCode) THEN
          EXIT(TRUE);
      EXIT(IsAdmin);
    END;

    PROCEDURE IsClaimManager@1100281001() : Boolean;
    BEGIN
      // Seuls les manager et gestionnaires recla peuvent cr‚er une r‚cla
      //IMH02.ST
      GetSetup;
      IF CheckUserRole(SpecialPermSetup."Create Claim") THEN
        EXIT(TRUE);
      EXIT(IsAdmin);
    END;

    PROCEDURE IsTransferTrayLineManager@1100281004() : Boolean;
    BEGIN
      // Transfert activit‚ corbeille doit ˆtre autoris‚e seulement aux responsables, managers, r‚f‚rents et gestionnaires r‚clamations
      //IMH04.ZW
      GetSetup;
      IF CheckUserRole(SpecialPermSetup."Transfer Tray Line") THEN
        EXIT(TRUE);
      EXIT(IsAdmin);
    END;

    PROCEDURE IsForceProvAssignManager@1100281005() : Boolean;
    BEGIN
      // Permission assignation directe prestataire
      //IMH06.ZW
      GetSetup;
      IF CheckUserRole(SpecialPermSetup."Force Provider Assignment") THEN
        EXIT(TRUE);
      EXIT(IsAdmin);
    END;

    PROCEDURE DPRSearchPermitted@1100281006() : Boolean;
    BEGIN
      // Permission recherche DPR : accŠs fiche prestataire/Suivi depuis la recheche
      //IMH08.ZW
      GetSetup;
      IF SpecialPermSetup."DPR Search" = '' THEN
        EXIT(FALSE);
      IF CheckUserRole(SpecialPermSetup."DPR Search") THEN
        EXIT(TRUE);
      EXIT(IsAdmin);
    END;

    PROCEDURE QuoteCommissionAllowed@1100281003() : Boolean;
    BEGIN
      //IMH02.ST
      GetSetup;
      IF SpecialPermSetup."Quote Commission Edit" = '' THEN
        EXIT(FALSE);
      IF CheckUserRole(SpecialPermSetup."Quote Commission Edit") THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    PROCEDURE SkipWorkAmountCheck@1000000000() : Boolean;
    BEGIN
      //IMH05.ST
      GetSetup;
      IF SpecialPermSetup."Work Amount Unchecking" = '' THEN
        EXIT(FALSE);
      IF CheckUserRole(SpecialPermSetup."Work Amount Unchecking") THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    PROCEDURE DeleteDocFlowHeaderPermitted@1000000001() : Boolean;
    BEGIN
      //IMH07.ACO
      GetSetup;
      IF SpecialPermSetup."Delete Doc. Flow Header" = '' THEN
        EXIT(FALSE);
      IF CheckUserRole(SpecialPermSetup."Delete Doc. Flow Header") THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    PROCEDURE IsAdminForSetupID@1000000003(pTableId@1100481000 : Integer) : Boolean;
    VAR
      lRecRef@1000000000 : RecordRef;
      lFieldRef@1000000001 : FieldRef;
      lRole@1000000002 : Code[10];
    BEGIN
      IF pTableId <> 0 THEN BEGIN
        GetSetup;
        lRecRef.GETTABLE(SpecialPermSetup);
        lFieldRef := lRecRef.FIELD(pTableId);
        lRole := lFieldRef.VALUE;
        IF CheckUserRole(lRole) THEN
          EXIT(TRUE);
      END;
      EXIT(IsAdmin);
    END;

    BEGIN
    {
      /** @r IMH09 @d 26/05/14 @a ISAT.ST @v IMH6.01.P011 @s New Provider Search @h 5118 @c Ajout fonction IsAdminForSetupID */
      /** @r IMH08 @d 17/04/14 @a ISAT.ZW @v IMH6.01.P011 @s New Provider Search
          @c Ajout permission recherche DPR */
      /** @r IMH07 @d 18/06/13 @a ISAT.ACO @v IMH6.01.347 @s JUIN @h 3057 @c Ajout fonction DeleteDocFlowHeaderPermitted */
      /** @r IMH06 @d 28/03/12 @a ISAT.ZW @v IMH6.01.160 @s Roles DPS @h Mantis2725 @c Ajout fonction IsForceProvAssignManager */
      /** @r IMH05 @d 14/02/12 @a ISAT.ST @v IMH6.01.160 @s Roles DPS @h Mantis1291 @c SkipWorkAmountCheck */
      /** @r IMH04 @d 13/12/11 @a ISAT.ZW @v IMH6.01.160 @s Roles DPS @h Mantis2274 @c IsTransferTrayLineManager */
      /** @r IMH03 @d 18/08/11 @a ISAT.ST @v IMH6.01.160 @s Roles DPS @c QuoteCommissionAllowed */
      /** @r IMH02 @d 17/03/11 @a ISAT.ST @v IMH6.01.160 @s Roles DPS @c Ajout table Setup */
      /** @r IMH01 @d 17/02/11 @a ISAT.LLT @v IMH6.01.011 @s Gestion du service @c Ajout droits */
    }
    END.
  }
}