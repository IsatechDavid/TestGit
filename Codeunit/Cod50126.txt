OBJECT Codeunit 50126 Statistics Group Mgt
{
  OBJECT-PROPERTIES
  {
    Date=15/09/11;
    Time=13:31:19;
    Modified=Yes;
    Version List=IMH6.01;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      NameBreakdownDisable@1100281000 : Boolean;
      RMSetup@1100281003 : Record 5079;
      NoSeriesMgt@1100281002 : Codeunit 396;
      NoSeries@1100281001 : Code[10];
      ContactBusinessRelation@1100281004 : Record 5054;

    PROCEDURE OnInsert@3(VAR pStatisticsGroup@1000 : Record 50002);
    BEGIN
      RMSetup.GET;
      IF RMSetup."Bus. Rel. Code for Stat. Grp." = '' THEN BEGIN
        EXIT;
      END;

      InsertNewContact(pStatisticsGroup,TRUE);
    END;

    PROCEDURE OnModify@1(VAR pStatisticsGroup@1100281004 : Record 50002);
    VAR
      lChangeLogMgt@1001 : Codeunit 423;
      lEAISendSynchroAction@1100281000 : Codeunit 8016730;
      lRecRef@1003 : RecordRef;
      lxRecRef@1002 : RecordRef;
      lContact@1100281001 : Record 5050;
      lOldContact@1100281002 : Record 5050;
      lContactNo@1100281003 : Code[20];
    BEGIN
      WITH ContactBusinessRelation DO BEGIN
        SETCURRENTKEY("Link to Table","No.");
        SETRANGE("Link to Table","Link to Table"::"Statistics Group");
        SETRANGE("No.",pStatisticsGroup."No.");
        IF ISEMPTY THEN BEGIN
          EXIT;
        END;
        FINDFIRST;
        lContact.GET("Contact No.");
        lOldContact := lContact;
      END;

      lContactNo := lContact."No.";
      NoSeries := lContact."No. Series";
      lContact.VALIDATE("E-Mail",pStatisticsGroup."E-Mail");
      lContact.TRANSFERFIELDS(pStatisticsGroup);
      lContact."No." := lContactNo ;
      lContact."No. Series" := NoSeries;
      lContact.VALIDATE(Name);
      lContact.OnModify(lOldContact);
      lContact.MODIFY(TRUE);

      lxRecRef.GETTABLE(lOldContact);
      lRecRef.GETTABLE(lContact);
      lChangeLogMgt.LogModification(lRecRef,lxRecRef);
      //<<IMH03.ISAT.EBA
      lEAISendSynchroAction.LogModification(lRecRef,lxRecRef);
      //>>IMH03.ISAT.EBA
    END;

    PROCEDURE OnDelete@2(VAR pStatisticsGroup@1100281000 : Record 50002);
    BEGIN
      WITH ContactBusinessRelation DO BEGIN
        SETCURRENTKEY("Link to Table","No.");
        SETRANGE("Link to Table","Link to Table"::"Statistics Group");
        SETRANGE("No.", pStatisticsGroup."No.");
        DELETEALL(TRUE);
      END;
    END;

    PROCEDURE InsertNewContact@5(VAR pStatisticsGroup@1100281001 : Record 50002;pLocalCall@1001 : Boolean);
    VAR
      lContactAltAddress@1100281000 : Record 5051;
      lContact@1100281002 : Record 5050;
    BEGIN
      IF NOT pLocalCall THEN BEGIN
        RMSetup.GET;
        RMSetup.TESTFIELD("Bus. Rel. Code for Stat. Grp.");
      END;

      WITH lContact DO BEGIN
        INIT;
        TRANSFERFIELDS(pStatisticsGroup);
        lContact.SetNameBreakdownDisable(NameBreakdownDisable); // IMH02.ISAT.MA
        lContact.VALIDATE(Name);
        lContact.VALIDATE("E-Mail");
        "No." := pStatisticsGroup."No.";
        "No. Series" := '';
        Type := Type::Company;
        "Service Contact" := "Service Contact"::"Statistics Group";
        TypeChange;
        SetSkipDefault(FALSE);
        INSERT(TRUE);
      END;

      WITH ContactBusinessRelation DO BEGIN
        INIT;
        "Contact No." := lContact."No.";
        "Business Relation Code" := RMSetup."Bus. Rel. Code for Stat. Grp.";
        "Link to Table" := "Link to Table"::"Statistics Group";
        "No." := pStatisticsGroup."No.";
        INSERT(TRUE);
      END;

      lContactAltAddress.UpdateAltAddress(lContact);
    END;

    PROCEDURE SetNameBreakdownDisable@1100281011(pSetNameBreakdownDisable@1100281000 : Boolean);
    BEGIN
      // IMH02.ISAT.MA
      NameBreakdownDisable := pSetNameBreakdownDisable;
    END;

    PROCEDURE UpdateExclusionProvider@1100281005(VAR pStatisticsGroup@1100281001 : Record 50002);
    VAR
      lProvider@1100281000 : Record 50000;
    BEGIN
      //pStatisticsGroup.TESTFIELD("Exclusion Process Code");
      //pStatisticsGroup.TESTFIELD("Exclu. Proc. Status No.");
      lProvider.SETCURRENTKEY("Statistics Group No.");
      lProvider.SETRANGE("Statistics Group No.", pStatisticsGroup."No.");
      IF lProvider.FINDFIRST THEN
        REPEAT
          IF (lProvider.Exclusion <> pStatisticsGroup.Exclusion)
              OR (lProvider."Exclusion Reason Code" <> pStatisticsGroup."Exclusion Reason Code")
              OR (lProvider."Exclusion Date" <> pStatisticsGroup."Exclusion Date") THEN BEGIN
            lProvider.Exclusion := pStatisticsGroup.Exclusion;
            lProvider."Exclusion Reason Code" := pStatisticsGroup."Exclusion Reason Code";
            lProvider.VALIDATE("Exclusion Date", pStatisticsGroup."Exclusion Date");
            lProvider.MODIFY(FALSE);
            IF (lProvider."Process Code" <> pStatisticsGroup."Exclusion Process Code")
                OR (lProvider."Process Status No." <> pStatisticsGroup."Exclu. Proc. Status No.") THEN BEGIN
              lProvider.VALIDATE("Process Code", pStatisticsGroup."Exclusion Process Code");
              lProvider.VALIDATE("Process Status No.", pStatisticsGroup."Exclu. Proc. Status No.");
              lProvider.MODIFY(TRUE);
            END;
          END;
        UNTIL lProvider.NEXT = 0;
    END;

    PROCEDURE UpdateExclusionTempProvider@1100281014(VAR pStatisticsGroup@1100281001 : Record 50002);
    VAR
      lProvider@1100281000 : Record 50000;
    BEGIN
      //pStatisticsGroup.TESTFIELD("Temp. Exclusion Process Code");
      //pStatisticsGroup.TESTFIELD("Temp. Exclu. Proc. Status No.");

      lProvider.SETCURRENTKEY("Statistics Group No.");
      lProvider.SETRANGE("Statistics Group No.", pStatisticsGroup."No.");
      IF lProvider.FINDFIRST THEN
        REPEAT
          IF (lProvider."Temp. Exclusion" <> pStatisticsGroup."Temp. Exclusion")
              OR (lProvider."Temp. Exclusion Reason Code" <> pStatisticsGroup."Temp. Exclusion Reason Code")
              OR (lProvider."Temp. Exclusion Start Date" <> pStatisticsGroup."Temp. Exclusion Start Date")
              OR (lProvider."Temp. Exclusion End Date" <> pStatisticsGroup."Temp. Exclusion End Date") THEN BEGIN
            lProvider."Temp. Exclusion" := pStatisticsGroup."Temp. Exclusion";
            lProvider."Temp. Exclusion Reason Code" := pStatisticsGroup."Temp. Exclusion Reason Code";
            lProvider."Temp. Exclusion Start Date" := pStatisticsGroup."Temp. Exclusion Start Date";
            lProvider.VALIDATE("Temp. Exclusion End Date", pStatisticsGroup."Temp. Exclusion End Date");
            lProvider.MODIFY(FALSE);

            IF (lProvider."Process Code" <> pStatisticsGroup."Temp. Exclusion Process Code")
                OR (lProvider."Process Status No." <> pStatisticsGroup."Temp. Exclu. Proc. Status No.") THEN BEGIN
              lProvider.VALIDATE("Process Code", pStatisticsGroup."Temp. Exclusion Process Code");
              lProvider.VALIDATE("Process Status No.", pStatisticsGroup."Temp. Exclu. Proc. Status No.");
              lProvider.MODIFY(TRUE);
            END;
          END;
        UNTIL lProvider.NEXT = 0;
    END;

    PROCEDURE UpdateBlackListProvider@1100281015(VAR pStatisticsGroup@1100281001 : Record 50002);
    VAR
      lProvider@1100281000 : Record 50000;
    BEGIN
      pStatisticsGroup.TESTFIELD("Black List Process Code");
      pStatisticsGroup.TESTFIELD("Black List Proc. Status No.");

      lProvider.SETCURRENTKEY("Statistics Group No.");
      lProvider.SETRANGE("Statistics Group No.", pStatisticsGroup."No.");
      IF lProvider.FINDFIRST THEN
        REPEAT
          IF (lProvider."Black List" <> pStatisticsGroup."Black List")
              OR (lProvider."Black List Reason Code" <> pStatisticsGroup."Black List Reason Code")
              OR (lProvider."Black List Date" <> pStatisticsGroup."Black List Date") THEN BEGIN
            lProvider."Black List" := pStatisticsGroup."Black List";
            lProvider."Black List Reason Code" := pStatisticsGroup."Black List Reason Code";
            lProvider.VALIDATE("Black List Date", pStatisticsGroup."Black List Date");
            lProvider.MODIFY(FALSE);
            IF (lProvider."Process Code" <> pStatisticsGroup."Black List Process Code")
                OR (lProvider."Process Status No." <> pStatisticsGroup."Black List Proc. Status No.") THEN BEGIN
              lProvider.VALIDATE("Process Code", pStatisticsGroup."Black List Process Code");
              lProvider.VALIDATE("Process Status No.", pStatisticsGroup."Black List Proc. Status No.");
              lProvider.MODIFY(TRUE);
            END;
          END;
        UNTIL lProvider.NEXT = 0;
    END;

    PROCEDURE ProvOnChangeGroupStat@1100281000(pProvider@1100281002 : Record 50000;pStatGroupNo@1100281004 : Code[20]);
    VAR
      lVendor@1100281001 : Record 23;
      lVendor2@1100281006 : Record 23;
      lVendorNo@1100281000 : Code[20];
      lProviderVendorNo@1100281005 : Code[20];
      lStatisticsGroup@1100281003 : Record 50002;
    BEGIN
      IF NOT lStatisticsGroup.GET(pStatGroupNo) THEN
        CLEAR(lStatisticsGroup);

      lProviderVendorNo := pProvider.GetVendorNo(pProvider."No.");
      IF lVendor.GET(lProviderVendorNo) THEN BEGIN
        lVendorNo := lStatisticsGroup.GetVendorNo(lStatisticsGroup."No.");
        IF lVendor."Pay-to Vendor No." <> lVendorNo THEN
          IF lVendor2.GET(lVendorNo) THEN BEGIN
            lVendor.VALIDATE("Pay-to Vendor No.", lVendor2."No.");
          END ELSE
            lVendor.VALIDATE("Pay-to Vendor No.", '');
          lVendor.MODIFY(TRUE);
      END;
    END;

    BEGIN
    {
      /** @r IMH01 @d 16/03/11 @a CAP.ZW @v IMH6.01.136 @s Interface Fusion @c cr‚ation */
    }
    END.
  }
}