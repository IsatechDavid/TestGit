OBJECT Codeunit 50133 IMA Sales Order Rcvd Act
{
  OBJECT-PROPERTIES
  {
    Date=24/11/11;
    Time=17:41:10;
    Modified=Yes;
    Version List=IMH6.01;
  }
  PROPERTIES
  {
    TableNo=8016721;
    Permissions=TableData 110=rm,
                TableData 7322=rm;
    OnRun=VAR
            lEAIRcvdMQBuffer@1100281000 : TEMPORARY Record 8016721;
          BEGIN
            lEAIRcvdMQBuffer := Rec;

            Code(lEAIRcvdMQBuffer);
            Rec := lEAIRcvdMQBuffer;
          END;

  }
  CODE
  {
    VAR
      Text001@1100481008 : TextConst 'ENU=XML Node %1 unfound.;FRA=Noeud XML %1 non trouv‚.';
      ToolsMgt@1100281007 : Codeunit 8016602;
      EAIXmlDocMgt@1100281002 : Codeunit 8016713;
      MsgEntryNo@1100281004 : Code[20];
      Text002@1100281000 : TextConst 'ENU=There is an Order (%1) for Service %2, Service Header %3.;FRA=Il existe une commande (%1) pour le service %2, ligne de produit %3.';
      Text003@1100281001 : TextConst 'ENU=There is no item for Service Order Type %1, Corporate %2, Corporate Region %3;FRA=Il n''existe pas d''article pour le type de produit %1, grand compte %2, r‚gion %3.';
      Amt@1100281003 : Decimal;
      AmtExist@1100281005 : Boolean;
      IntervLineNo@1100281006 : Integer;
      UseAmount@1100281008 : ' ,Deposit,Variable';

    LOCAL PROCEDURE Code@1100281003(VAR pEAIRcvdMQBuffer@1100281001 : Record 8016721);
    VAR
      lEAIAct@1100281011 : Record 8016706;
      lTempHeader@1100281010 : TEMPORARY Record 5900;
      lSalesHeader@1100281002 : Record 36;
      lEAIXMLDocMgt@1100481004 : Codeunit 8016713;
      lEAIDocumentEntryMgt@1100481003 : Codeunit 8016707;
      lXMLDocument@1100281005 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{88D96A05-F192-11D4-A65F-0040963251E5}:'Microsoft XML, v6.0'.DOMDocument60";
      lXMLReturnMessageHeader@1100281003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lXMLDocumentsNode@1100281006 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lXMLDocumentNodeList@1100281007 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNodeList";
      lXMLCurrDocumentNode@1100281008 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lOutStream@1100281004 : OutStream;
      lRecRef@1100281000 : RecordRef;
    BEGIN
      CLEAR(lXMLDocument);
      CREATE(lXMLDocument);

      MsgEntryNo := pEAIRcvdMQBuffer."Entry No.";

      lEAIAct.GET(pEAIRcvdMQBuffer."EAI Act Type Code",pEAIRcvdMQBuffer."EAI Act Code");

      pEAIRcvdMQBuffer.CALCFIELDS("XML Source");
      pEAIRcvdMQBuffer."XML Source".CREATEOUTSTREAM(lOutStream);
      lXMLDocument.load(lOutStream);
      lXMLDocumentsNode := lXMLDocument.documentElement;

      EAIXmlDocMgt.ReadXMLMessageHeader(lXMLDocument,lXMLReturnMessageHeader);
      EAIXmlDocMgt.ReadXMLDocuments(lXMLDocument,lXMLDocumentsNode);
      EAIXmlDocMgt.ReadXMLDocument(lXMLDocumentsNode,lXMLDocumentNodeList);

      lXMLDocumentNodeList.reset();
      lXMLCurrDocumentNode := lXMLDocumentNodeList.nextNode();

      ReadXMLDoc(lXMLCurrDocumentNode,lEAIAct,lTempHeader);

      CreateDocument(lTempHeader,lSalesHeader);

      PostDocument(lSalesHeader);

      //cr‚ation suivi de document
      lEAIDocumentEntryMgt.AddEntryFromRcvdBuffer(
         DATABASE::"Sales Header",lSalesHeader."Document Type",lSalesHeader."No.",
         lSalesHeader."External Document No.",0,pEAIRcvdMQBuffer);

      lRecRef.GETTABLE(lSalesHeader);
      pEAIRcvdMQBuffer.RecordId := lRecRef.RECORDID;
    END;

    PROCEDURE ReadXMLDoc@1100481003(pXMLDocumentNode@1100481000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";pEAIAct@1100481007 : Record 8016706;VAR pTempHeader@1100481001 : Record 5900);
    VAR
      lEAIXMLMgt@1100481012 : Codeunit 8016710;
      lXMLDocHeaderNode@1100481002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lXMLNodeFound@1100481003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
    BEGIN
      Amt := 0;
      AmtExist := FALSE;
      IntervLineNo := 0;
      UseAmount := 0; //IMH02.ST

      EAIXmlDocMgt.ReadXMLDocHeader(pXMLDocumentNode,lXMLDocHeaderNode);

      WITH lEAIXMLMgt DO BEGIN
        IF FindFirstNode(lXMLDocHeaderNode,'SERVICE_NO',lXMLNodeFound) THEN
          pTempHeader."Service No." := COPYSTR(lXMLNodeFound.text,1,MAXSTRLEN(pTempHeader."Service No."))
        ELSE
          ERROR(Text001,'SERVICE_NO');

        IF FindFirstNode(lXMLDocHeaderNode,'SERVICE_ORDER_NO',lXMLNodeFound) THEN
          pTempHeader."No." := lXMLNodeFound.text
        ELSE
          ERROR(Text001,'SERVICE_ORDER_NO');

        IF FindFirstNode(lXMLDocHeaderNode,'SERVICE_INTERV_LINE_NO',lXMLNodeFound) THEN BEGIN
          IF STRLEN(lXMLNodeFound.text) > 0 THEN
            IntervLineNo := ToolsMgt.TextToInteger(lXMLNodeFound.text);
        END;

        IF FindFirstNode(lXMLDocHeaderNode,'SERVICE_ORDER_TYPE',lXMLNodeFound) THEN
          pTempHeader."Service Order Type" := lXMLNodeFound.text
        ELSE
          ERROR(Text001,'SERVICE_ORDER_TYPE');

        IF FindFirstNode(lXMLDocHeaderNode,'CORPORATE_NO',lXMLNodeFound) THEN
          pTempHeader."Corporate No." := lXMLNodeFound.text
        ELSE
          ERROR(Text001,'CORPORATE_NO');

        IF FindFirstNode(lXMLDocHeaderNode,'CORPORATE_REGION',lXMLNodeFound) THEN
          pTempHeader."Corporate Region Code" := lXMLNodeFound.text
        ELSE
          ERROR(Text001,'CORPORATE_REGION');

        IF FindFirstNode(lXMLDocHeaderNode,'CUSTOMER_NO',lXMLNodeFound) THEN
          pTempHeader."Customer No." := lXMLNodeFound.text
        ELSE
          ERROR(Text001,'CUSTOMER_NO');

      //<<IMH02.ST
        IF FindFirstNode(lXMLDocHeaderNode, 'DEPOSIT_AMOUNT', lXMLNodeFound) THEN BEGIN
          IF STRLEN(lXMLNodeFound.text) > 0 THEN
            pTempHeader."Deposit Amount" := ToolsMgt.TextToDecimal(lXMLNodeFound.text);
          UseAmount := UseAmount::Deposit;
        END;
      //>>IMH02.ST

        IF FindFirstNode(lXMLDocHeaderNode,'AMOUNT',lXMLNodeFound) THEN BEGIN
          UseAmount := UseAmount::Variable;
          IF STRLEN(lXMLNodeFound.text) > 0 THEN
            Amt := ToolsMgt.TextToDecimal(lXMLNodeFound.text);
        END;
        pTempHeader.INSERT;
      END;
    END;

    PROCEDURE CreateDocument@1100281002(VAR pTempHeader@1100281000 : Record 5900;VAR pSalesHeader@1100281007 : Record 36);
    VAR
      lSalesHeader@1100281001 : Record 36;
      lSalesLine@1100281005 : Record 37;
      lSalesItemSetup@1100281002 : Record 50138;
      lCust@1100281004 : Record 18;
      lItem@1100281006 : Record 27;
    BEGIN
      WITH pTempHeader DO BEGIN
        lSalesHeader.SETCURRENTKEY("Document Type","Sell-to Customer No.","No.");
        lSalesHeader.SETRANGE("Document Type",lSalesHeader."Document Type"::Order);
        lSalesHeader.SETRANGE("Sell-to Customer No.",pTempHeader."Customer No.");
        lSalesHeader.SETRANGE("IMH Service No.",pTempHeader."Service No.");
        lSalesHeader.SETRANGE("IMH Service Header No.",pTempHeader."No.");
        lSalesHeader.SETRANGE("IMH Intervention Line No.",IntervLineNo);
        IF lSalesHeader.FINDFIRST THEN
          ERROR(Text002,lSalesHeader."No.",pTempHeader."Service No.",pTempHeader."No.");

        lCust.GET(pTempHeader."Customer No.");

        lSalesItemSetup.RESET;
        lSalesItemSetup.SETRANGE("Service Order Type","Service Order Type");
        lSalesItemSetup.SETRANGE("Corporate No.","Corporate No.");
        lSalesItemSetup.SETRANGE("Corporate Region Code","Corporate Region Code");
        IF NOT lSalesItemSetup.FINDLAST THEN BEGIN
          lSalesItemSetup.SETFILTER("Corporate Region Code",'=%1|=%2','',"Corporate Region Code");
          IF NOT lSalesItemSetup.FINDLAST THEN BEGIN
            lSalesItemSetup.SETFILTER("Corporate No.",'=%1|=%2','',"Corporate No.");
            IF NOT lSalesItemSetup.FINDLAST THEN BEGIN
              lSalesItemSetup.SETFILTER("Service Order Type",'=%1|=%2','',"Service Order Type");
              IF NOT lSalesItemSetup.FINDLAST THEN
                ERROR(Text003,"Service Order Type","Corporate No.","Corporate Region Code");
            END;
          END;
        END;

        IF UseAmount = UseAmount::Variable THEN
          lItem.GET(lSalesItemSetup."Commission Item No.")
        ELSE
          lItem.GET(lSalesItemSetup."Item No.");

        lSalesHeader.INIT;
        lSalesHeader."Document Type" := lSalesHeader."Document Type"::Order;
        lSalesHeader.INSERT(TRUE);

        lSalesHeader.VALIDATE("Sell-to Customer No.",lCust."No.");
      //<<IMH02.ST
        IF UseAmount = UseAmount::Deposit THEN
          IF NOT lSalesHeader."Prices Including VAT" THEN
            lSalesHeader.VALIDATE("Prices Including VAT", TRUE);
      //>>IMH02.ST
        lSalesHeader."IMH Service No." := pTempHeader."Service No.";
        lSalesHeader."IMH Service Header No." := pTempHeader."No.";
        lSalesHeader."IMH Intervention Line No." := IntervLineNo;
        //<<IMH03.PC
        lSalesHeader."Service Order Type" := pTempHeader."Service Order Type";
        lSalesHeader."Corporate No." := pTempHeader."Corporate No.";
        lSalesHeader."Corporate Region Code" := pTempHeader."Corporate Region Code";
        //>>IMH03.PC
        lSalesHeader."EAI Message Entry No." := MsgEntryNo;
        lSalesHeader.MODIFY(TRUE);

        lSalesLine.INIT;
        lSalesLine."Document Type" := lSalesHeader."Document Type";
        lSalesLine."Document No." := lSalesHeader."No.";
        lSalesLine."Line No." := 10000;
        lSalesLine.VALIDATE(Type,lSalesLine.Type::Item);
        lSalesLine.VALIDATE("No.",lItem."No.");
        lSalesLine.VALIDATE(Quantity,1);
        //<<IMH03.PC
        lSalesLine."Service Order Type" := pTempHeader."Service Order Type";
        lSalesLine."Corporate No." := pTempHeader."Corporate No.";
        lSalesLine."Corporate Region Code" := pTempHeader."Corporate Region Code";
        //<<IMH04.SB
        lSalesLine."IMH Service No." := pTempHeader."Service No.";
        //>>IMH04.SB
        //>>IMH03.PC

      //<<IMH02.ST
        CASE UseAmount OF
          UseAmount::Deposit : BEGIN
            IF lSalesHeader."Prices Including VAT" THEN
              lSalesLine.VALIDATE("Unit Price", pTempHeader."Deposit Amount")
            ELSE
              lSalesLine.VALIDATE("Unit Price", pTempHeader."Deposit Amount" / (1 + (lSalesLine."VAT %"/100)));
          END;
          UseAmount::Variable : BEGIN
            IF lSalesHeader."Prices Including VAT" THEN
              lSalesLine.VALIDATE("Unit Price", Amt * (1+(lSalesLine."VAT %"/100)))
            ELSE
              lSalesLine.VALIDATE("Unit Price", Amt);
          END;
        END;
      //>>IMH02.ST
        lSalesLine.INSERT(TRUE);
      END;
      pSalesHeader := lSalesHeader;
    END;

    PROCEDURE PostDocument@1100481005(VAR pSalesHeader@1100481000 : Record 36);
    VAR
      SalesPost@1100281000 : Codeunit 80;
    BEGIN
      pSalesHeader.Ship := TRUE;
      SalesPost.RUN(pSalesHeader);
    END;

    BEGIN
    {
      /** @r IMH04 @d 24/11/11 @a ISAT.SB @v IMH6.01.159 @s Comptabilit‚ @c Transfert nø service origine IMH dans les lignes ventes */
      /** @r IMH03 @d 20/09/11 @a ISAT.PC @v IMH6.01.159 @s Comptabilit‚ @c transfert nø GC + type produit */
      /** @r IMH02 @d 17/08/11 @a ISAT.ST @v IMH6.01.159 @s montant frais dossier */
      /** @r IMH01 @d 16/05/11 @a ISAT.EBA @v IMH6.01.159 @s Comptabilit‚ - IMA Service */
    }
    END.
  }
}