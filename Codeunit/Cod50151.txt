OBJECT Codeunit 50151 Network Visit Import Mgt
{
  OBJECT-PROPERTIES
  {
    Date=28/03/12;
    Time=15:04:51;
    Modified=Yes;
    Version List=IMH6.01;
  }
  PROPERTIES
  {
    OnRun=VAR
            lProviderVisitPlanning@1100281000 : Record 50167;
          BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1100281002 : TextConst 'ENU=You must enter a file name.;FRA=Vous devez saisir un nom de fichier.';
      Text002@1100281001 : TextConst 'ENU=You must enter an Excel worksheet name.;FRA=Vous devez saisir un nom de feuille Excel.';
      Text003@1100281003 : TextConst 'ENU=You must enter a error file name.;FRA=Vous devez saisir un nom de fichier d''erreur.';
      Text004@1100281007 : TextConst 'ENU=Import finished.;FRA=Importation termin‚e.';
      ToolsMgt@1100281009 : Codeunit 8016602;
      Text006@1000000000 : TextConst 'ENU=The visit is already affected to the planning %1. Do you want to modify the visit date/time?;FRA=La visite a d‚j… ‚t‚ affectr‚ au planning nø %1, souhaitez-vous modifier la date/l''heure de visite?';
      Text007@1000000001 : TextConst 'ENU=Do you want to create the provider and put the process status to Black List?;FRA=Souhaitez-vous cr‚er le prestataire et mettre le statut processus du prestataire … Black Liste?';
      Text008@1000000002 : TextConst 'ENU=Do you want to create the provider and put the process status to not interesting?;FRA=Souhaitez-vous cr‚er le prestataire et mettre le statut processus du prestataire … non int‚ress‚?';
      Text009@1000000004 : TextConst 'ENU=Do you want to put the process status to Black List?;FRA=Souhaitez-vous mettre le statut processus du prestataire … Black Liste?';
      Text010@1000000003 : TextConst 'ENU=Do you want to put the process status to not interesting?;FRA=Souhaitez-vous mettre le statut processus du prestataire … non int‚ress‚?';
      Text011@1000000006 : TextConst 'ENU=Import Attachment;FRA=Importer document';
      Text012@1000000005 : TextConst 'ENU=All Files (*.*)|*.*;FRA=Tous les fichiers (*.*)|*.*';
      FolderMgt@1000000007 : Codeunit 50004;
      Text013@1100281011 : TextConst 'ENU=Management visit crreated from %1 provider(s);FRA=Visite(s) d''animation et de gestion cr‚e(s) pour %1 prestataire(s)';
      Text014@1000000014 : TextConst 'ENU=Empty file;FRA=Fichier vide';
      ErrorText001@1000000013 : TextConst 'ENU=Row %1 : Provider exist.;FRA=Ligne %1 : Prestataire existant.';
      ErrorText002@1000000012 : TextConst 'ENU=Row %1 : Post code %2 city %3 do not exists in Post Code table.;FRA=Ligne %1 : Code postal %2 ville %3 n''existe pas dans la table Code postal.';
      ErrorText003@1000000011 : TextConst 'ENU=Row %1 column %2 : Phone No. format %3 is not correct.;FRA=Ligne %1 colonne %2 : Le format du nø de t‚l‚phone %3 n''est pas correct.';
      ErrorText004@1000000010 : TextConst 'ENU=Row %1 column %2 : Specialization %3 nonexistent.;FRA=Ligne %1 colonne %2 : Sp‚cialit‚ %3 inexistante.';
      ErrorText005@1000000009 : TextConst 'ENU=Errors Number : %1.;FRA=Nbre d''erreurs : %1.';
      ErrorText006@1000000008 : TextConst 'ENU=Row %1 column %2 : Several specializations found for %3.;FRA=Ligne %1 colonne %2 : Plusieurs sp‚cialit‚s trouv‚es pour %3.';
      ErrorText007@1100281000 : TextConst 'ENU=Line %1 : The provider %1 had already a visit of type recruitment.;FRA=Ligne %1 : Le prestataire %2 possŠde d‚j… une visite de type recrutement.';
      PostCode@1000000015 : Record 225;

    PROCEDURE ImportExcel@1100281000(pFileName@1100281001 : Text[250];pSheetName@1100281000 : Text[250];pErrorFileName@1100281016 : Text[250];VAR pInStream@1100281014 : InStream);
    VAR
      lExcelBufTemp@1100281002 : TEMPORARY Record 370;
      lNetworkFacilitatorVisit@1100281003 : Record 50105;
      lNetworkFacilitatorVisit2@1000000000 : Record 50105;
      lSpecialization@1100281012 : Record 50005;
      lArea@1100281021 : Record 284;
      lRBAutoMgt@1100281007 : Codeunit 419;
      lFolderMgt@1100281006 : Codeunit 50004;
      lSpecSearchText@1100281018 : Text[100];
      lTempFileName@1100281005 : Text[250];
      lErrorText@1000000001 : Text[250];
      lErrorFile@1100281008 : File;
      lErrorFileCreated@1100281009 : Boolean;
      lErrorLine@1100281011 : Boolean;
      lToInsert@1100281013 : Boolean;
      lErrorNumber@1100281010 : Integer;
      lNbRow@1100281020 : Integer;
      i@1100281004 : Integer;
      lCount@1100281019 : Integer;
      lProviderNoTemp@1000000002 : Code[20];
    BEGIN
      // Pour les campagnes de recrutement - Importation donn‚es excel dans la table visite reseau

      IF pFileName = '' THEN BEGIN
        ERROR(Text001);
      END;
      IF pSheetName = '' THEN BEGIN
        ERROR(Text002);
      END;
      IF pErrorFileName = '' THEN BEGIN
        ERROR(Text003);
      END;

      lTempFileName := lRBAutoMgt.ServerTempFileName('', 'txt');

      IF ISSERVICETIER THEN BEGIN
        DOWNLOADFROMSTREAM(pInStream,'','<TEMP>','',pFileName);
      END;

      lExcelBufTemp.OpenBook(pFileName, pSheetName);
      lExcelBufTemp.ReadSheet;
      IF lExcelBufTemp.ISEMPTY THEN BEGIN
        MESSAGE(Text014);
        EXIT;
      END;

      lExcelBufTemp.FINDLAST;
      lNbRow := lExcelBufTemp."Row No.";

      FOR i := 2 TO lNbRow DO BEGIN
        lErrorLine := FALSE;
        lToInsert := TRUE;
        CLEAR(lNetworkFacilitatorVisit);
        lNetworkFacilitatorVisit.INIT;
        lNetworkFacilitatorVisit."No." := '';
        lNetworkFacilitatorVisit.Type := lNetworkFacilitatorVisit.Type::"Camp. Recruitment";
        // Nom prestataire
        lNetworkFacilitatorVisit."Provider Name" := GetExcelValue(lExcelBufTemp, i, 1);
        lNetworkFacilitatorVisit."Provider Name 2" := GetExcelValue(lExcelBufTemp, i, 2);
        // Addresse
        lNetworkFacilitatorVisit."Provider Address" := GetExcelValue(lExcelBufTemp, i, 3);
        lNetworkFacilitatorVisit."Provider Address 2" := GetExcelValue(lExcelBufTemp, i, 4);
        lNetworkFacilitatorVisit."Provider Post Code" := GetExcelValue(lExcelBufTemp, i, 5);
        lNetworkFacilitatorVisit."Provider City" := GetExcelValue(lExcelBufTemp, i, 6);
        lNetworkFacilitatorVisit."Prov. Geo. Reference Code" :=
          PostCode.GetReferenceGeoCode(lNetworkFacilitatorVisit."Provider Post Code",lNetworkFacilitatorVisit."Provider City");
        lNetworkFacilitatorVisit."Provider Area Code" := COPYSTR(lNetworkFacilitatorVisit."Provider Post Code",1,2);
        // Nø telephone - Nø telophone mobile
        lNetworkFacilitatorVisit."Provider Phone No." := GetExcelValue(lExcelBufTemp, i, 7);
        lNetworkFacilitatorVisit."Provider Mobile Phone No." := GetExcelValue(lExcelBufTemp, i, 8);
        // Nø SIRET
        lNetworkFacilitatorVisit."Provider Registration No." := GetExcelValue(lExcelBufTemp, i, 9);
        // Sp‚cialit‚
        lNetworkFacilitatorVisit."Main Spec. Description" := GetExcelValue(lExcelBufTemp, i, 10);

        // Recherche si le prestataire existe d‚j… dans la base des prestataire
        lProviderNoTemp :=
          CheckProvider(
            lNetworkFacilitatorVisit."Provider Registration No.",
            lNetworkFacilitatorVisit."Provider Post Code",
            lNetworkFacilitatorVisit."Provider Phone No.");
        IF lProviderNoTemp = '' THEN BEGIN
          // Recherche si le prestataire possŠde d‚j… une visite de type recrutement
          IF CheckLineExist(
               lNetworkFacilitatorVisit."Provider Registration No.",
               lNetworkFacilitatorVisit."Provider Post Code",
               lNetworkFacilitatorVisit."Provider Phone No.")
          THEN BEGIN
            lErrorText :=
              STRSUBSTNO(
                ErrorText007, i,
                lNetworkFacilitatorVisit."Provider Registration No." + '\' +
                lNetworkFacilitatorVisit."Provider Post Code" + '\' +
                lNetworkFacilitatorVisit."Provider Phone No.");
            AddToErrorFile(lErrorFile,lErrorText,lErrorNumber,lErrorFileCreated,lTempFileName);
            lErrorLine := TRUE;
            //MESSAGE(
            //   lNetworkFacilitatorVisit."Provider Registration No." + '\' +
            //   lNetworkFacilitatorVisit."Provider Post Code" + '\' +
            //   lNetworkFacilitatorVisit."Provider Phone No.");
            lToInsert := FALSE;
          END;
        END ELSE BEGIN
          lNetworkFacilitatorVisit.VALIDATE("Provider No.",lProviderNoTemp);
        END;

        // V‚rification des t‚l‚phones
        CheckPhone(
          DATABASE::"Network Visit",lNetworkFacilitatorVisit.FIELDNO("Provider Phone No.") ,
          lNetworkFacilitatorVisit."Provider Phone No.",lNetworkFacilitatorVisit."Provider Country/Region Code",
          i,7,lErrorText);
        IF lErrorText <> '' THEN BEGIN
          lNetworkFacilitatorVisit.Comment := lErrorText;
          AddToErrorFile(lErrorFile,lErrorText,lErrorNumber,lErrorFileCreated,lTempFileName);
          lErrorLine := TRUE;
        END;
        CheckPhone(
          DATABASE::"Network Visit",lNetworkFacilitatorVisit.FIELDNO("Provider Mobile Phone No.") ,
          lNetworkFacilitatorVisit."Provider Mobile Phone No.",lNetworkFacilitatorVisit."Provider Country/Region Code",
          i,8,lErrorText);
        IF lErrorText <> '' THEN BEGIN
          lNetworkFacilitatorVisit.Comment := lErrorText;
          AddToErrorFile(lErrorFile,lErrorText,lErrorNumber,lErrorFileCreated,lTempFileName);
          lErrorLine := TRUE;
        END;

        // V‚rification de la sp‚cialit‚
        CheckSpecialization(lNetworkFacilitatorVisit."Main Specialization Code",i,10,lErrorText);
        IF lErrorText <> '' THEN BEGIN
          lNetworkFacilitatorVisit.Comment := lErrorText;
          AddToErrorFile(lErrorFile,lErrorText,lErrorNumber,lErrorFileCreated,lTempFileName);
          lErrorLine := TRUE;
        END;

        // v‚rification des code postaux
        IF NOT CheckPostCode(lNetworkFacilitatorVisit."Provider Area Code",
                lNetworkFacilitatorVisit."Provider Post Code",
                lNetworkFacilitatorVisit."Provider City",
                lNetworkFacilitatorVisit."Provider Country/Region Code")
        THEN BEGIN
          lErrorText :=
            STRSUBSTNO(
              ErrorText002, i, lNetworkFacilitatorVisit."Provider Post Code",
              lNetworkFacilitatorVisit."Provider City");
          AddToErrorFile(lErrorFile,lErrorText,lErrorNumber,lErrorFileCreated,lTempFileName);
          lErrorLine := TRUE;
        END;

        lNetworkFacilitatorVisit.VALIDATE("Provider Post Code");
        IF lToInsert THEN BEGIN
          lNetworkFacilitatorVisit.INSERT(TRUE);
        END;
      END;

      IF lErrorFileCreated THEN BEGIN
        lErrorText := STRSUBSTNO(ErrorText005, lErrorNumber);
        AddToErrorFile(lErrorFile,lErrorText,lErrorNumber,lErrorFileCreated,lTempFileName);
        lErrorFile.CLOSE;
        MESSAGE(Text004 + ' ' + lErrorText);
        lFolderMgt.CopyFile(lTempFileName, pErrorFileName);
      END ELSE BEGIN
        MESSAGE(Text004);
      END;
    END;

    PROCEDURE CheckProvider@1000000005(pRegistrationNo@1100281004 : Code[20];pPostCode@1000000000 : Code[20];pPhoneNo@1000000001 : Text[30]) : Code[20];
    VAR
      lTempContact@1100281002 : TEMPORARY Record 5050;
      lTempText@1100281000 : Text[1024];
      lProvider@1100281005 : Record 50000;
    BEGIN
      // Permet de retrouver un prestataire en fonction du nø de siret ou en fonction du couple code postal + nø telephone

      IF (pRegistrationNo = '') AND
         (pPostCode = '') AND
         (pPhoneNo = '')
      THEN BEGIN
        EXIT;
      END;

      WITH lProvider DO BEGIN
        IF pRegistrationNo <> '' THEN BEGIN
          SETCURRENTKEY("Registration No.");
          SETRANGE("Registration No.",pRegistrationNo);
          IF FINDFIRST THEN BEGIN
            EXIT("No.");
          END;
        END;
        IF (pPostCode <> '') AND (pPhoneNo <> '') THEN BEGIN
          SETCURRENTKEY("Phone No.");
          SETRANGE("Phone No.",pPhoneNo);
          SETRANGE("Post Code",pPostCode);
          IF FINDFIRST THEN BEGIN
            EXIT("No.");
          END;
        END;
      END;
    END;

    PROCEDURE CheckLineExist@1000000006(pRegistrationNo@1000000003 : Code[20];pPostCode@1000000002 : Code[20];pPhoneNo@1000000001 : Text[30]) : Boolean;
    VAR
      lNetworkFacilitatorVisit@1100281000 : Record 50105;
    BEGIN
      // V‚rification si une ligne de visite correspond au paramŠtre

      IF (pRegistrationNo = '') AND
         //(pPostCode = '') AND
         (pPhoneNo = '')
      THEN BEGIN
        EXIT;
      END;

      WITH lNetworkFacilitatorVisit DO BEGIN
        IF pRegistrationNo <> '' THEN BEGIN
          SETCURRENTKEY("Provider Registration No.");
          SETRANGE("Provider Registration No.",pRegistrationNo);
          IF FINDFIRST THEN BEGIN
            EXIT(TRUE);
          END;
        END;
        IF (pPostCode <> '') OR (pPhoneNo <> '') THEN BEGIN
          IF (pPostCode <> '') THEN BEGIN
            SETCURRENTKEY("Provider Post Code","Provider Phone No.");
          END ELSE BEGIN
            SETCURRENTKEY("Provider Phone No.","Provider Post Code");
          END;
          SETRANGE("Provider Post Code",pPostCode);
          SETRANGE("Provider Phone No.",pPhoneNo);
          IF FINDFIRST THEN BEGIN
            EXIT(TRUE);
          END;
        END;
      END;
    END;

    PROCEDURE CheckSpecialization@1100281008(pSp‚cializationDescription@1100281004 : Text[50];pLineNo@1000000002 : Integer;pColumnNo@1000000001 : Integer;VAR pErrorText@1000000000 : Text[250]) rValue : Code[10];
    VAR
      lSpecialization@1100281003 : TEMPORARY Record 50005;
      lTempText@1100281000 : Text[1024];
      lCount@1000000003 : Integer;
    BEGIN
      // recherche en fonction de la description le code de sp‚cialit‚

      rValue := '';
      pErrorText := '';

      IF pSp‚cializationDescription = '' THEN BEGIN
        EXIT;
      END;

      lTempText := '@' + ChangeSpecChar(pSp‚cializationDescription);
      lSpecialization.SETCURRENTKEY("Search Name");
      lSpecialization.SETFILTER("Search Name",lTempText);
      lCount := lSpecialization.COUNT;
      CASE lCount OF
        0 : pErrorText := STRSUBSTNO(ErrorText004, pLineNo, pColumnNo, pSp‚cializationDescription);
        1 : BEGIN
          lSpecialization.FINDFIRST;
          rValue := lSpecialization.Code;
        END;
        ELSE pErrorText := STRSUBSTNO(ErrorText006, pLineNo, pColumnNo, pSp‚cializationDescription);
      END;
    END;

    PROCEDURE CheckPhone@1000000012(pTableID@1000000007 : Integer;pFieldNo@1000000006 : Integer;pPhoneNo@1000000000 : Text[30];pCountryCode@1000000001 : Code[10];pLineNo@1000000004 : Integer;pColumnNo@1000000005 : Integer;VAR pErrorText@1000000003 : Text[250]) rValue : Boolean;
    VAR
      lPhoneStandardization@1000000002 : Codeunit 50099;
    BEGIN
      // V‚rification si le nø de t‚l‚phone est correct - vrai si le tel n'est pas bon

      rValue := FALSE;
      pErrorText := '';

      IF pPhoneNo = '' THEN BEGIN
        EXIT;
      END;

      lPhoneStandardization.SetHideMessage(TRUE);
      IF NOT lPhoneStandardization.ValidatePhoneNo(pTableID,pFieldNo,pCountryCode,pPhoneNo) THEN BEGIN
        pErrorText := STRSUBSTNO(ErrorText003, pLineNo, pColumnNo, pPhoneNo);
        rValue := TRUE;
      END;
    END;

    PROCEDURE CheckPostCode@1100281011(VAR pAreaCode@1100281001 : Code[10];VAR pPostCode@1100281000 : Code[20];VAR pCity@1100281002 : Text[30];VAR pCountryRegionCode@1100281006 : Code[10]) : Boolean;
    VAR
      lPostCode@1100281005 : Record 225;
      lSearchCity@1100281004 : Text[50];
      i@1100281003 : Integer;
      lCity@1100281007 : Text[80];
      lArea@1100281008 : Text[30];
    BEGIN
      lCity := lPostCode.CreateSimplyCity(pCity);

      lArea := pAreaCode;

      IF (STRLEN(pAreaCode) > 2) THEN
        lArea := COPYSTR(pAreaCode,1,2);
      IF (STRLEN(pAreaCode) < 2) THEN
        lArea := '0' + pAreaCode;

      lPostCode.RESET;
      lPostCode.SETCURRENTKEY(Code,"City 2");
      lPostCode.SETRANGE("City 2",lCity);
      lPostCode.SETRANGE("Area Code",lArea);
      IF lPostCode.ISEMPTY THEN
        EXIT(FALSE);

      IF (lPostCode.COUNT > 1) AND (lArea = '') THEN
        EXIT(FALSE);

      IF lPostCode.FINDFIRST THEN
      BEGIN
        pCity := lPostCode.City;
        pPostCode := lPostCode.Code;
        pCountryRegionCode := lPostCode."Country/Region Code";
      END;
      EXIT(TRUE);
    END;

    PROCEDURE ChangeSpecChar@1100281013(pString@1100281000 : Text[250]) : Text[250];
    VAR
      lText001@1100281003 : TextConst 'ENU='';FRA=''';
      lToolsMgt@1100281001 : Codeunit 8016602;
    BEGIN
      EXIT(lToolsMgt.ChangeSpecChar(pString,' ' + lText001));
    END;

    PROCEDURE GetExcelValue@1100281004(VAR pExcelBuffer@1100281002 : Record 370;pRowNo@1100281000 : Integer;pColumnNo@1100281001 : Integer) : Text[250];
    BEGIN
      IF pExcelBuffer.GET(pRowNo, pColumnNo) THEN BEGIN
        EXIT(pExcelBuffer."Cell Value as Text");
      END;
      EXIT('');
    END;

    PROCEDURE CreateErrorFile@1100281007(VAR pErrorFile@1100281001 : File;pErrorFileName@1100281000 : Text[250]);
    BEGIN
      pErrorFile.TEXTMODE(TRUE);
      pErrorFile.WRITEMODE(TRUE);
      pErrorFile.CREATE(pErrorFileName);
    END;

    LOCAL PROCEDURE AddToErrorFile@1000000000(VAR pErrorFile@1100281000 : File;pErrorText@1000000002 : Text[250];VAR pErrorNumber@1100281001 : Integer;VAR pErrorFileCreated@1100281002 : Boolean;pErrorFileName@1100281003 : Text[250]);
    VAR
      lToolsMgt@1100281004 : Codeunit 8016602;
    BEGIN
      IF NOT pErrorFileCreated THEN BEGIN
        CreateErrorFile(pErrorFile, pErrorFileName);
        pErrorFileCreated := TRUE;
      END;
      pErrorFile.WRITE(lToolsMgt.FormatExport(pErrorText));
      pErrorNumber += 1;
    END;

    BEGIN
    {
      /** @r IMH01 @d 21/02/12 @a ISAT.PC @v IMH6.01.115 @s Visite Animation Reseau @c Cr‚ation */
    }
    END.
  }
}