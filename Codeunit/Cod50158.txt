OBJECT Codeunit 50158 DARVA Rcvd Doc. Validation Act
{
  OBJECT-PROPERTIES
  {
    Date=06/12/13;
    Time=10:38:30;
    Modified=Yes;
    Version List=IMH6.01,SysAgDarva;
  }
  PROPERTIES
  {
    TableNo=8016721;
    OnRun=BEGIN
            Code(Rec);
          END;

  }
  CODE
  {
    VAR
      DARVAMgt@1100281000 : Codeunit 50150;
      Text003@1100281001 : TextConst 'ENU=GTA reference %1 doesn''t exists.;FRA=La r‚f‚rence GTA %1 n''est pas d‚finie.';
      DARVAXMLMgt@1000000000 : Codeunit 50154;
      Error003@1000000001 : TextConst 'ENU=HTTP Error %1 :;FRA=Erreur HTTP %1 :';

    PROCEDURE Code@1100281000(VAR pEAIRcvdMQBuffer@1100281001 : Record 8016721);
    VAR
      lEAIExchangeType@1100281007 : Record 8016717;
      lEAIRcvdMQBuffer@1100281005 : TEMPORARY Record 8016721;
      lEAIAct@1100281014 : Record 8016706;
      lEAIActMgt@1100281012 : Codeunit 8016703;
      lEAIMQBufferMgt@1100281016 : Codeunit 8016708;
      lEAIXMLDocMgt@1100281017 : Codeunit 8016713;
      lWinHTTPService@1100281006 : Automation "{662901FC-6951-4854-9EB2-D9A2570F2B2E} 5.1:{2087C2F4-2CEF-4953-A8AB-66779B670495}:'Microsoft WinHTTP Services, version 5.1'.WinHttpRequest";
      lXmlNewDoc@1100281013 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lOriginalXmlDoc@1100281004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lCheckXmlDoc@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lXmlDoc@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lXMLNodeList@1100281009 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNodeList";
      lXmlDomNode1@1100281011 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lXmlDomNode2@1100281024 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lXmlDomNode3@1100281015 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lXmlNewChild1@1100281023 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lXmlNewChild2@1100281022 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lXmlNode@1100281010 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lInStream@1100281003 : InStream;
      lOutStream@1100281002 : OutStream;
      lAttachmentsNb@1100281008 : Integer;
      i@1100281000 : Integer;
      lText@1000000000 : Text[1024];
      lPath@1000000001 : Text[1024];
      lError001@1100281018 : TextConst 'ENU=Error from Web Service;FRA=Erreur au niveau du Web Service';
      lDARVACorporateNo@1100281019 : Code[20];
      lCorporateNo@1100281027 : Code[20];
      lCorporateRegionCode@1100281020 : Code[20];
      lXmlDomElement@1100281021 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
      lXmlDomElement2@1100281025 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
      lEAIPartnerCrossRef@1100281026 : Record 8016748;
      lCustomer@1100281028 : Record 18;
      lCorporateRegion@1100281029 : Record 50058;
      lErrorType@1000000005 : Text[30];
      lErrorDescription@1000000004 : Text[80];
      lEAIPartnerCode@1100281030 : Code[20];
    BEGIN
      //<<IMH06.ACO
      {lEAIRcvdMQBuffer := pEAIRcvdMQBuffer;
      lEAIRcvdMQBuffer."EAI Act Code" :=
        lEAIActMgt.GetEAIActCode(
          lEAIRcvdMQBuffer."EAI Act Type Code",'',
          lEAIRcvdMQBuffer."Message Code" + lEAIRcvdMQBuffer."Message Version" + lEAIRcvdMQBuffer."Message Release",
          lEAIRcvdMQBuffer."Message Sub-type");
      IF lEAIMQBufferMgt.RcvdMessageExists(lEAIRcvdMQBuffer,TRUE) THEN BEGIN
        EXIT;
      END;
      }
      //>>IMH06

      lEAIExchangeType.GET(lEAIExchangeType.Type::Inbound,pEAIRcvdMQBuffer."EAI Exchange Type Code");
      lEAIExchangeType.TESTFIELD("Ingoing Queue Label");
      lEAIExchangeType.TESTFIELD(Enable);

      IF ISCLEAR(lWinHTTPService) THEN BEGIN
        CREATE(lWinHTTPService);
      END;

      lWinHTTPService.Open('POST',lEAIExchangeType."Ingoing Queue Label",0);
      lWinHTTPService.SetRequestHeader('Content-type','application/soap+xml;charset=utf-8');
      lWinHTTPService.SetRequestHeader('SOAPAction','""');
      lWinHTTPService.SetTimeouts(10000,10000,10000,0);

      CREATE(lXmlDoc);
      pEAIRcvdMQBuffer.CALCFIELDS("XML Source");
      pEAIRcvdMQBuffer."XML Source".CREATEINSTREAM(lInStream);
      lXmlDoc.load(lInStream);
      lWinHTTPService.Send(lXmlDoc);
      CLEAR(lInStream);
      CLEAR(lXmlDoc);

      IF NOT lWinHTTPService.WaitForResponse(60) THEN BEGIN
        ERROR('Request timed out.');
      END;

      CREATE(lOriginalXmlDoc);
      CREATE(lCheckXmlDoc);
      lOriginalXmlDoc.load(lWinHTTPService.ResponseStream);
      lCheckXmlDoc.load(lWinHTTPService.ResponseStream);

      IF lWinHTTPService.Status = 200 THEN BEGIN

        //<<IMH6.ACO
        //Nø grand compte
        DARVAXMLMgt.InitXMLDom(lCheckXmlDoc,lXmlDoc);

        lXmlDomElement := lXmlDoc.getElementsByTagName('GR010101').item(0);
        lXmlDomElement2 := lXmlDomElement.selectSingleNode('SE0020101');
        lDARVACorporateNo := DARVAMgt.GetNodeValue(lXmlDomElement2,'DE00460101');
        IF NOT lEAIPartnerCrossRef.GetFromCrossRef(
               DATABASE::Customer,pEAIRcvdMQBuffer."EAI Partner Code",
               lDARVACorporateNo,lEAIPartnerCrossRef)
        THEN BEGIN
          ERROR(Text003,lDARVACorporateNo);
        END;

        // R‚gion du grand compte
        lEAIPartnerCrossRef.TESTFIELD("Source No.");
        lCorporateNo := lEAIPartnerCrossRef."Source No.";
        lCorporateRegionCode := '';
        lCustomer.GET(lCorporateNo);
        IF lCustomer."Parent Customer No." <> '' THEN BEGIN
          lCorporateRegion.SETRANGE("Corporate No.", lCustomer."Parent Customer No.");
          lCorporateRegion.SETRANGE("Sell-to Customer No.", lCustomer."No.");
          IF NOT lCorporateRegion.ISEMPTY THEN BEGIN
            lCorporateRegion.FINDFIRST;
            lCorporateNo := lCorporateRegion."Corporate No.";
            lCorporateRegionCode := lCorporateRegion."Region Code";
          END;
        END;

        //>>IMH6.ACO

        CREATE(lXmlNewDoc);
        lEAIXMLDocMgt.CreateXmlByRootNodeName2(lXmlNewDoc,'Message',lXmlNewChild1);
        lXMLNodeList := lOriginalXmlDoc.getElementsByTagName('ns2:formatXml');
        IF lXMLNodeList.length <> 0 THEN BEGIN
          lXmlDomNode1 := lXMLNodeList.item(0);
          lXmlNewChild1.appendChild(lXmlDomNode1);
          lXMLNodeList := lOriginalXmlDoc.getElementsByTagName('ns2:formatPdf');
          IF lXMLNodeList.length <> 0 THEN BEGIN
            lXmlDomNode1 := lXMLNodeList.item(0);
            lXmlNewChild1.appendChild(lXmlDomNode1);
          END;
          lXMLNodeList := lOriginalXmlDoc.getElementsByTagName('ns2:piecesJointes');
          IF lXMLNodeList.length <> 0 THEN BEGIN
            lXmlDomNode2 := lXMLNodeList.item(0);
            lXmlNewChild1.appendChild(lXmlDomNode2);
            lXMLNodeList := lOriginalXmlDoc.getElementsByTagName('ns2:pieceJointe');
            lAttachmentsNb := lXMLNodeList.length();
            IF lAttachmentsNb <> 0 THEN BEGIN
              lEAIXMLDocMgt.AddElement(lXmlNewChild1,'Piecesjointes','','',lXmlNewChild2);
              FOR i := 1 TO lAttachmentsNb DO BEGIN
                lXmlDomNode3 := lXMLNodeList.item(i - 1);
                lXmlNewChild2.appendChild(lXmlDomNode3);
              END;
            END;
          END;
        END;
        // Cr‚ation du nouveau flux … valider
        lEAIRcvdMQBuffer := pEAIRcvdMQBuffer;
        WITH lEAIRcvdMQBuffer DO BEGIN
          "Entry No." := '';
          //<< IMH06.ACO

          //<<IMH07.ACO
          {"EAI Act Code" :=
            lEAIActMgt.GetEAIActCode(
              "Message Code",
              "Message Version",
              "Message Release",
              "Message Sub-type",
              lCorporateNo,
              lCorporateRegionCode);}
          "EAI Act Code" :=
            lEAIActMgt.GetEAIActCode(
              "Message Code",
              "Message Version",
              "Message Release",
              "Message Sub-type",
              lCorporateNo,
              lCorporateRegionCode,
              lEAIPartnerCode
              );
           IF lEAIPartnerCode <> '' THEN
              "EAI Partner Code" := lEAIPartnerCode;
          //>>IMH07.ACO

          IF NOT lEAIMQBufferMgt.RcvdMessageExists(lEAIRcvdMQBuffer,TRUE) THEN BEGIN
          //>>IMH06.ACO
            IF lEAIAct.GET("EAI Act Type Code","EAI Act Code") THEN BEGIN
              "Act Priority" := lEAIAct."Act Priority";
            END;
           "Date Creation" := WORKDATE;
            "Time Creation" := TIME;
            "User Creation" := USERID;
            Step := Step::Validation;
            Status := Status::Unprocessed;
            CLEAR("XML Source");
            CLEAR("Response XML Source");
            "XML Source".CREATEOUTSTREAM(lOutStream);
            lXmlNewDoc.save(lOutStream);
            INSERT;
            lEAIMQBufferMgt.InsertReceivedBufferToMQCode("EAI MQ Code",lEAIRcvdMQBuffer);
            DELETE;
          //<<IMH06.ACO
          END;
          //>>IMH06.ACO
        END;
      END ELSE BEGIN
        CLEAR(pEAIRcvdMQBuffer."Response XML Source");
        //<<IMH07.ACO
        CREATE(lXmlDoc);
        lXmlDoc.load(lWinHTTPService.ResponseStream);

        lXmlDomNode1 := lXmlDoc.getElementsByTagName('ns3:ErreurTraitement').item(0);
        IF ISCLEAR(lXmlDomNode1) THEN BEGIN
          EXIT;
        END;
        lXmlDomNode2 := lXmlDomNode1.selectSingleNode('ns3:codeErreur');
        IF NOT ISCLEAR(lXmlDomNode2) THEN BEGIN
          lErrorType := lXmlDomNode2.text;
        END;
        lXmlDomNode3 := lXmlDomNode1.selectSingleNode('ns3:libelleErreur');
        IF NOT ISCLEAR(lXmlDomNode3) THEN BEGIN
          lErrorDescription := COPYSTR(lXmlDomNode3.text,1,MAXSTRLEN(lErrorDescription));
        END;
        //>>IMH07.ACO

        lXmlNode := lXmlDoc.documentElement;
        IF NOT ISCLEAR(lXmlNode) THEN BEGIN
          pEAIRcvdMQBuffer."Response XML Source".CREATEOUTSTREAM(lOutStream);
          CREATE(lXmlNewDoc);
          lEAIXMLDocMgt.CreateXmlByRootNodeName2(lXmlNewDoc,'Retour_WS',lXmlNewChild1);
          lXmlNewChild1.appendChild(lXmlNode);
          lXmlNewDoc.save(lOutStream);
        END;
        pEAIRcvdMQBuffer.Status := pEAIRcvdMQBuffer.Status::Error;
        pEAIRcvdMQBuffer."Not Change Status" := TRUE;
        pEAIRcvdMQBuffer."Comment Status" := COPYSTR(lWinHTTPService.StatusText,1,MAXSTRLEN(pEAIRcvdMQBuffer."Comment Status"));

        //<<IMH07.ACO
        IF (lErrorType <> '') OR (lErrorDescription <> '') THEN BEGIN
          ERROR(lErrorType + ' ' + lErrorDescription);
        END ELSE BEGIN
          ERROR(STRSUBSTNO(Error003, lWinHTTPService.Status) + lWinHTTPService.StatusText);
        END;
        //>>IMH07.ACO
      END;
    END;

    BEGIN
    {
      /** @r IMH07 @d 08/10/13 @a ISAT.ACO @v IMH6.01.350 @s SystŠme d'aiguillage @c R‚cup‚ration du EAI Partner Code */
      /** @r IMH06 @d 25/06/13 @a ISAT.ACO @v IMH6.01.350 @s SystŠme d'aiguillage @c Utilisation matrice aiguillage DARVA */
      /** @r IMH05 @d 29/04/13 @a ISAT.PC @v IMH6.01.222 @s Uniformisation Darva @c R‚‚criture complŠte */
      /** @r IMH05 @d 13/02/13 @a ISAT.PC @v IMH6.01.222 @s Uniformisation DARVA @c Gestion des piŠces jointes absentes */
      /** @r IMH04 @d 06/11/12 @a ISAT.PC @v IMH6.01.222 @s Uniformisation DARVA @c R‚‚criture */
      /** @r IMH03 @d 11/06/12 @a ISAT.PC @v IMH6.01.134 @s DARVA Management
          @c Gestion du debug path */
      /** @r IMH02 @d 19/11/11 @a ISAT.EBA @v IMH6.01.134 @s DARVA Management */
      /** @r IMH01 @d 13/07/11 @a ISAT.MA @v IMH6.01.134 @s DARVA Management @s Cr‚ation */
    }
    END.
  }
}