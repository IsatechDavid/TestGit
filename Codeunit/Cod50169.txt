OBJECT Codeunit 50169 DARVA Sent SDR99 Gen. Act
{
  OBJECT-PROPERTIES
  {
    Date=19/02/14;
    Time=16:51:42;
    Modified=Yes;
    Version List=IMH6.01,NEP00011,JUIN,V1.7,SUPPORT;
  }
  PROPERTIES
  {
    TableNo=8016720;
    OnRun=VAR
            lEAISentMQBuffer@1100281000 : TEMPORARY Record 8016720;
          BEGIN
            lEAISentMQBuffer := Rec;
            Code(lEAISentMQBuffer);
            lEAISentMQBuffer.CALCFIELDS("XML Source");
            "XML Source" := lEAISentMQBuffer."XML Source";
            Rec := lEAISentMQBuffer;
          END;

  }
  CODE
  {
    VAR
      DARVAXMLMgt@1100281004 : Codeunit 50154;
      EAIXMLDocMgt@1100281003 : Codeunit 8016713;
      Text001@1100281007 : TextConst 'FRA=http://www.w3.org/2003/05/soap-envelope';
      Text002@1100281006 : TextConst 'FRA=http://www.darva.com/ws/ird/reparateur/2010/11/schema';
      Text003@1100281005 : TextConst 'FRA=http://www.darva.com/ws/datatype/2010/11';
      NASHandler@1100281009 : Codeunit 8016720;
      DARVAMgt@1000000000 : Codeunit 50150;
      EAIBufferMgt@1000000001 : Codeunit 8016708;
      Text004@1000000002 : TextConst 'ENU=There is no file for the attachment.;FRA=Aucun fichier ne correspond Ö la piäce jointe';

    PROCEDURE Code@1100281000(VAR pEAISentMQBuffer@1100281000 : Record 8016720);
    VAR
      lServiceHeader@1100281018 : Record 5900;
      lService@1100281017 : Record 50066;
      lAdvCommentLine@1100281011 : Record 50056;
      lAdvCommentLine2@1100281013 : Record 50056;
      lEAIAct@1100281014 : Record 8016706;
      lEAIPartner@1100281003 : Record 8016707;
      lCorporateRegion@1100281019 : Record 50058;
      lInterfaceReference@1100281022 : Record 50164;
      lEAISetup@1100281024 : Record 8016700;
      lServiceOrderType@1100281025 : Record 5903;
      lDocumentAttachment@1100281020 : Record 50021;
      lFile@1100281027 : Record 2000000022;
      lCustomer@1000000002 : Record 18;
      lEAIDocEntryMgt@1100281002 : Codeunit 8016707;
      lXMLDocument@1100281001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{88D96A05-F192-11D4-A65F-0040963251E5}:'Microsoft XML, v6.0'.DOMDocument60";
      lXMLNewChild0@1100281010 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lXMLNewChild1@1100281004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lXMLNewChild2@1100281007 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lXMLNewChild3@1100281008 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lXMLNewChild4@1100281009 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lXMLNewChild5@1100281012 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lInStream@1100281005 : InStream;
      lNameSpace@1100281006 : Text[250];
      lBigText@1100281028 : BigText;
      lRecRef@1100281016 : RecordRef;
      lRecRef2@1100281021 : RecordRef;
      lRecID@1100281015 : RecordID;
      lManagerTodoText@1000000000 : Text[1];
      lSDR64Send@1100281023 : Boolean;
      lSDR99ChoiceSend@1100281026 : Boolean;
      lDARVASubscriberNo@1000000001 : Code[20];
      lStartPosComment@1000000003 : Integer;
      lPartNo@1000000005 : Integer;
      lLengthAddedComment@1000000013 : Integer;
      lLengthMaxComment2@1000000006 : Integer;
      lLengthMaxComment@1000000012 : Integer;
      lPrefix@1000000008 : Text[100];
      lComment@1000000004 : Text[710];
      lBigTextLength@1000000009 : Integer;
      lXMLDocument2@1000000010 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{88D96A05-F192-11D4-A65F-0040963251E5}:'Microsoft XML, v6.0'.DOMDocument60";
      lXMLDocument3@1000000011 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{88D96A05-F192-11D4-A65F-0040963251E5}:'Microsoft XML, v6.0'.DOMDocument60";
      TextPrefix@1000000007 : TextConst 'FRA="Commentaires en plusieurs parties - %1 - %2 - %3 "';
      lNbPart@1000000014 : Integer;
      lCounter@1000000015 : Integer;
      lBigText2@1000000016 : BigText;
      lEAIMQ@1000000017 : Record 8016704;
      lEAISentMQBuffer@1000000018 : TEMPORARY Record 8016720;
      lXMLNewChild4Doc3@1000000019 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
    BEGIN
      CLEAR(lXMLDocument);
      CREATE(lXMLDocument);
      lRecID := pEAISentMQBuffer.RecordId;
      lRecRef := lRecID.GETRECORD;
      lRecRef.LOCKTABLE;
      IF lRecRef.FIND('=') THEN;
      lRecRef.SETTABLE(lAdvCommentLine);
      //lAdvCommentLine.TESTFIELD(Comment);

      //lAdvCommentLine.FINDFIRST;
      lEAIPartner.GET(pEAISentMQBuffer."EAI Partner Code");
      lServiceHeader.GET(lServiceHeader."Document Type"::Invoice,lAdvCommentLine."Source No. 2");
      lService.GET(lServiceHeader."Service No.");
      lServiceHeader.TESTFIELD("DARVA Interface",TRUE);
      //Root Node
      lXMLDocument.async := FALSE;
      DARVAXMLMgt.SetType(1);
      lXMLDocument.setProperty('SelectionNamespaces',DARVAXMLMgt.GetSelectionNameSpace);
      DARVAXMLMgt.CreateWSHeader(lXMLDocument,lXMLNewChild2,lEAIPartner.Username,lEAIPartner.Password);
      lNameSpace := DARVAXMLMgt.GetNameSpace(1);
      EAIXMLDocMgt.AddElement(lXMLNewChild2,'sch:SoumettreSuiviDossierReparateurCommentaireDemande','',lNameSpace,lXMLNewChild3);

      lNameSpace := DARVAXMLMgt.GetNameSpace(2);
      //context
      DARVAXMLMgt.Sent_InsertContext(lEAIPartner, lXMLNewChild3);
      //dossier
      DARVAXMLMgt.Sent_InsertService(lEAIPartner, lService, lXMLNewChild3);

      //<<IMH04.PC
      lEAISetup.GET;
      lInterfaceReference.SETRANGE("Source Table ID",DATABASE::"Service Header");
      lInterfaceReference.SETRANGE("Source No.",lServiceHeader."No.");
      lInterfaceReference.SETRANGE("SDR64 Send",TRUE);
      lSDR64Send := NOT lInterfaceReference.ISEMPTY;
      //>>IMH04.PC

      //Partenaire
      //<<IMH03.PC
      //DARVAXMLMgt.Sent_InsertPartners(lEAIPartner, lServiceHeader, lXMLNewChild3);
      lSDR99ChoiceSend := FALSE;
      IF lServiceOrderType.GET(lServiceHeader."Service Order Type") THEN BEGIN
        lSDR99ChoiceSend := lServiceOrderType."DARVA SDR99 Send Choice";
      END;

      IF NOT lSDR64Send OR NOT lSDR99ChoiceSend THEN BEGIN
        DARVAXMLMgt.Sent_InsertPartners(lEAIPartner, lServiceHeader, lXMLNewChild3);
      END ELSE BEGIN
        CASE lAdvCommentLine."DARVA Send Type" OF
          lAdvCommentLine."DARVA Send Type"::" " : DARVAXMLMgt.Sent_InsertPartners(lEAIPartner, lServiceHeader, lXMLNewChild3);
          lAdvCommentLine."DARVA Send Type"::Expert : BEGIN
            DARVAXMLMgt.Sent_InsertPartnersSDR99(
              lEAIPartner,lServiceHeader,lXMLNewChild3,lServiceHeader."DARVA Carrier Subscriber No.");
          END;
          lAdvCommentLine."DARVA Send Type"::Corporate : BEGIN
            //<<IMH08.PC
            {
            lCorporateRegion.GET(lServiceHeader."Corporate No.",lServiceHeader."Corporate Region Code");
            lCorporateRegion.TESTFIELD("DARVA Subscriber No.");
            DARVAXMLMgt.Sent_InsertPartnersSDR99(lEAIPartner,lServiceHeader,lXMLNewChild3,lCorporateRegion."DARVA Subscriber No.");
            }
            IF lServiceHeader."Corporate Region Code" <> '' THEN BEGIN
              lCorporateRegion.GET(lServiceHeader."Corporate No.",lServiceHeader."Corporate Region Code");
              lCorporateRegion.TESTFIELD("DARVA Subscriber No.");
              lDARVASubscriberNo := lCorporateRegion."DARVA Subscriber No.";
            END ELSE BEGIN
              lCustomer.GET(lServiceHeader."Corporate No.");
              lCustomer.TESTFIELD("DARVA Subscriber No.");
              lDARVASubscriberNo := lCustomer."DARVA Subscriber No.";
            END;
            DARVAXMLMgt.Sent_InsertPartnersSDR99(lEAIPartner,lServiceHeader,lXMLNewChild3,lDARVASubscriberNo);
            //>>IMH08.PC
          END;
        END;
      END;
      //>>IMH03.PC


      EAIXMLDocMgt.AddElement(lXMLNewChild3,'ns:suiviDossierReparateurCommentaire','',lNameSpace,lXMLNewChild4);
      //<<IMH04.PC
      IF lAdvCommentLine."Manager To-do Type" <> lAdvCommentLine."Manager To-do Type"::" " THEN BEGIN
        IF lEAISetup."MACIF Customer No." = lService."Corporate No." THEN BEGIN
          IF lSDR64Send THEN BEGIN
            CASE lAdvCommentLine."Manager To-do Type" OF
              lAdvCommentLine."Manager To-do Type"::Information : lManagerTodoText := 'N';
              lAdvCommentLine."Manager To-do Type"::"To-do" : lManagerTodoText := 'O';
            END;
            EAIXMLDocMgt.AddElement(lXMLNewChild4,'ns:actionGestionnaireDemandee',lManagerTodoText,lNameSpace,lXMLNewChild5);
          END;
        END;
      END;
      //>>IMH04.PC

      //<<IMH05.PC
      //lBigText.ADDTEXT(lAdvCommentLine.Comment)
      lBigText.ADDTEXT(ReplaceSpecialChar(lAdvCommentLine.Comment));
      //>>IMH05.PC

      lAdvCommentLine2.SETCURRENTKEY(
        "Source Table ID","Source No.","Source No. 2","Source No. 3",
        "Source No. 4","Source No. 5","Attached To Line No.");
      lAdvCommentLine2.SETRANGE("Source Table ID", lAdvCommentLine."Source Table ID");
      lAdvCommentLine2.SETRANGE("Source No.", lAdvCommentLine."Source No.");
      lAdvCommentLine2.SETRANGE("Source No. 2", lAdvCommentLine."Source No. 2");
      lAdvCommentLine2.SETRANGE("Source No. 3", lAdvCommentLine."Source No. 3");
      lAdvCommentLine2.SETRANGE("Source No. 4", lAdvCommentLine."Source No. 4");
      lAdvCommentLine2.SETRANGE("Source No. 5", lAdvCommentLine."Source No. 5");
      lAdvCommentLine2.SETRANGE("Attached To Line No.", lAdvCommentLine."Line No.");
      IF lAdvCommentLine2.FINDLAST THEN BEGIN
        REPEAT
          IF (lAdvCommentLine2.Comment <> '') AND (lAdvCommentLine2.Comment <> '------------') THEN BEGIN
            //<<IMH05.PC
            //lBigText.ADDTEXT(lAdvCommentLine2.Comment);
            lBigText.ADDTEXT(ReplaceSpecialChar(lAdvCommentLine2.Comment));
            lBigText.ADDTEXT(' ');
            //>>IMH05.PC
          END;
        UNTIL lAdvCommentLine2.NEXT(-1) = 0;
      END;

      //<<IMH11.ACO
      // IF lBigText.LENGTH <> 0 THEN BEGIN
      lLengthAddedComment := 85;
      lLengthMaxComment:= 770;
      lLengthMaxComment2 := lLengthMaxComment - lLengthAddedComment ;
      lBigTextLength := lBigText.LENGTH;
      IF lBigTextLength <> 0 THEN BEGIN

        IF lBigTextLength <= lLengthMaxComment THEN BEGIN
          EAIXMLDocMgt.AddBigTextElement(lXMLNewChild4,'ns:commentaireLibre',lBigText,lNameSpace,lXMLNewChild5);

          //<<IMH12.ACO
          //Piäce jointes
          LoadAttachments(pEAISentMQBuffer, lXMLNewChild3, lNameSpace);
          //>>IMH12.ACO

          CLEAR(pEAISentMQBuffer."XML Source");
          pEAISentMQBuffer."XML Source".CREATEINSTREAM(lInStream);
          lXMLDocument.save(lInStream);
        END
        ELSE BEGIN
          IF ISCLEAR(lXMLDocument2) THEN
            CREATE(lXMLDocument2);

          lXMLDocument2.load(lXMLDocument);

          //Calcul du nombre de partie
          lNbPart := ROUND(lBigTextLength / lLengthMaxComment2, 1, '>');

          FOR lCounter := 1 TO lNbPart DO BEGIN
            lPrefix := STRSUBSTNO(TextPrefix, lServiceHeader."No.", pEAISentMQBuffer."Entry No.", lCounter);

            //1äre partie de commentaire : flux courant
            IF lCounter = 1 THEN BEGIN
              lBigText.GETSUBTEXT(lComment, 1, lLengthMaxComment2);
              lBigText2.ADDTEXT(lPrefix);
              lBigText2.ADDTEXT(lComment);

              EAIXMLDocMgt.AddBigTextElement(lXMLNewChild4,'ns:commentaireLibre',lBigText2,lNameSpace,lXMLNewChild5);

              //<<IMH12.ACO
              //Piäce jointes
              LoadAttachments(pEAISentMQBuffer, lXMLNewChild3, lNameSpace);
              //>>IMH12.ACO

              CLEAR(pEAISentMQBuffer."XML Source");
              pEAISentMQBuffer."XML Source".CREATEINSTREAM(lInStream);
              lXMLDocument.save(lInStream);
            END
            ELSE // autres parties de commentaire : crÇation de flux
              IF lEAIMQ.GET(pEAISentMQBuffer."EAI MQ Code") THEN BEGIN
                 //CrÇation du flux
                lEAISentMQBuffer := pEAISentMQBuffer;

                IF ISCLEAR(lXMLDocument3) THEN
                  CREATE(lXMLDocument3);

                lXMLDocument3.load(lXMLDocument2);

                //DÇcoupe des commentaires
                lBigText.GETSUBTEXT(lComment, (lCounter-1) * lLengthMaxComment2 + 1, lLengthMaxComment2);

                lXMLNewChild4Doc3 := lXMLDocument3.getElementsByTagName('ns:suiviDossierReparateurCommentaire').item(0);
                EAIXMLDocMgt.AddElement(lXMLNewChild4Doc3,'ns:commentaireLibre',lPrefix+lComment,lNameSpace,lXMLNewChild5);

                //CrÇation des XML
                CLEAR(lEAISentMQBuffer."XML Source");
                lEAISentMQBuffer."XML Source".CREATEINSTREAM(lInStream);
                lXMLDocument3.save(lInStream);

                lEAISentMQBuffer."Entry No." := '';
                lEAISentMQBuffer.Step := lEAISentMQBuffer.Step :: Validation;
                lEAISentMQBuffer.Status := lEAISentMQBuffer.Status :: Unprocessed;
                EAIBufferMgt.CreateSentMQBufferToSentMQ(lEAISentMQBuffer);

            END
          END
        END;

      //  EAIXMLDocMgt.AddBigTextElement(lXMLNewChild4,'ns:commentaireLibre',lBigText,lNameSpace,lXMLNewChild5);
      END;
      //<<IMH09.PC
      {
      //<<IMH03.PC
      // Si une piäce jointe a ÇtÇ ajoutÇe, on la rajoute au message
      IF lEAISetup."AGPM Customer No." = lService."Corporate No." THEN BEGIN
        IF lSDR64Send THEN BEGIN
          IF FORMAT(lAdvCommentLine."AGPM Attach Record ID") <> '' THEN BEGIN
            lRecID := lAdvCommentLine."AGPM Attach Record ID";
            lRecRef2 := lRecID.GETRECORD;
            lRecRef2.LOCKTABLE;
            IF lRecRef2.FIND('=') THEN;
            lRecRef2.SETTABLE(lDocumentAttachment);
            IF lDocumentAttachment.GetFile(lFile) THEN BEGIN
              EAIXMLDocMgt.AddFileElement(lXMLNewChild4,'ns:piecejointe',lFile.Path + lFile.Name,lNameSpace,lXMLNewChild5);
            END;
          END;
        END;
      END;
      //>>IMH03.PC
      }
      //>>IMH09.PC
      //CLEAR(pEAISentMQBuffer."XML Source");
      //pEAISentMQBuffer."XML Source".CREATEINSTREAM(lInStream);
      //lXMLDocument.save(lInStream);
      //>>IMH11.ACO

      IF NASHandler.IsDebug THEN
        lXMLDocument.save(TEMPORARYPATH + 'EnvoiSDR99_1.xml'); // pour test

      //TODO : Enregistrement dans la table "Çcriture document EDI"
      //lEAIDocEntryMgt.AddEntryFromSentBuffer(DATABASE::"Service Header",
      //                             lServiceHeader."Document Type", lServiceHeader."No.", '', 0, pEAISentMQBuffer);
    END;

    PROCEDURE AddAttachment@1000000000(pAttachNo@1000000003 : Integer;VAR pBigText@1000000005 : BigText);
    VAR
      lAttachment@1000000004 : Record 5062;
      lEAISentMQBuffer@1000000006 : TEMPORARY Record 8016720;
      lToolsMgt@1000000002 : Codeunit 8016602;
      lOutStream@1000000001 : OutStream;
      lInStreamToAdd@1000000000 : InStream;
      lText@1100281000 : Text[1024];
      lLength@1000000007 : Integer;
    BEGIN
      // IMH03.PC
      IF pAttachNo = 0 THEN BEGIN
        EXIT;
      END;
      IF NOT lAttachment.GET(pAttachNo) THEN BEGIN
        EXIT;
      END;
      lAttachment.CALCFIELDS(Attachment);
      IF NOT lAttachment.Attachment.HASVALUE THEN BEGIN
        EXIT;
      END;

      lAttachment.Attachment.CREATEINSTREAM(lInStreamToAdd);
      lEAISentMQBuffer."XML Source".CREATEOUTSTREAM(lOutStream);
      lToolsMgt.EncodeBase64(lInStreamToAdd,lOutStream);
      lEAISentMQBuffer.CALCFIELDS("XML Source");
      lEAISentMQBuffer."XML Source".CREATEINSTREAM(lInStreamToAdd);
      WHILE NOT lInStreamToAdd.EOS DO BEGIN
        lText := '';
        IF lInStreamToAdd.READ(lText) <> 0 THEN BEGIN
          pBigText.ADDTEXT(lText);
        END;
      END;
      lLength := pBigText.LENGTH;
      lAttachment.DELETE;
    END;

    PROCEDURE ReplaceSpecialChar@1100281001(pText@1100281000 : Text[80]) rValue : Text[80];
    BEGIN
      // IMH05.PC

      rValue := DARVAMgt.ReplaceSpecialChar(pText);
    END;

    LOCAL PROCEDURE LoadAttachments@1000000010(pEAISentMQBuffer@1000000002 : Record 8016720;VAR pXMLNode@1000000008 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";pNameSpace@1000000003 : Text[250]);
    VAR
      lDocumentAttachments@1000000000 : TEMPORARY Record 50021;
      lFile@1000000001 : Record 2000000022;
      lXMLNewChild4@1000000007 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lXMLNewChild5@1000000006 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lXMLNewChild6@1000000005 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lInStream@1000000004 : InStream;
    BEGIN
      //IMH12.ACO
      ReadAttachmentsFromXMLSource(pEAISentMQBuffer, lDocumentAttachments);
      lDocumentAttachments.RESET;

      IF lDocumentAttachments.FINDSET THEN BEGIN
        EAIXMLDocMgt.AddElement(pXMLNode,'ns:attachements','',pNameSpace,lXMLNewChild4);
        REPEAT
          //<<IMH02.ACO
          //lDocumentAttachments.GetFile(lFile);
          IF NOT lDocumentAttachments.GetFile(lFile) THEN
            ERROR(Text004);
          //>>IMH02.ACO

          EAIXMLDocMgt.AddElement(lXMLNewChild4,'ns:piecejointe','',pNameSpace,lXMLNewChild5);
          IF lDocumentAttachments."Darva ID" = '' THEN
            AffectDarvaIDAttachment(lDocumentAttachments);

          EAIXMLDocMgt.AddElement(lXMLNewChild5,'ns:identifiant', lDocumentAttachments."Darva ID",pNameSpace,lXMLNewChild6);
          EAIXMLDocMgt.AddElement(lXMLNewChild5,'ns:libelle', lDocumentAttachments.Description,pNameSpace,lXMLNewChild6);
          EAIXMLDocMgt.AddElement(lXMLNewChild5,'ns:type', '99',pNameSpace,lXMLNewChild6); //Ö modifier

          //<<IMH02.ACO
      //EAIXMLDocMgt.AddElement(lXMLNewChild5,'ns:format', UPPERCASE(lDocumentAttachments."File Extension"),pNameSpace,lXMLNewChild6);
          //EAIXMLDocMgt.AddFileElement(lXMLNewChild5,'ns:contenu',lFile.Path + lFile.Name,pNameSpace,lXMLNewChild6);
          EAIXMLDocMgt.AddElement(lXMLNewChild5,'ns:format', GetFormatAttachment(UPPERCASE(lDocumentAttachments."File Extension")),
                                  pNameSpace,lXMLNewChild6);
          EAIXMLDocMgt.AddFileElementWithoutAttribute(lXMLNewChild5,'ns:contenu',lFile.Path + lFile.Name,pNameSpace,lXMLNewChild6);
          //>>IMH02.ACO
        UNTIL lDocumentAttachments.NEXT = 0;
      END;

      lDocumentAttachments.DELETEALL;
    END;

    LOCAL PROCEDURE ReadAttachmentsFromXMLSource@1000000004(pEAISentMQBuffer@1000000001 : Record 8016720;VAR pDocumentAttachments@1000000000 : Record 50021);
    VAR
      lXmlDomElement@1000000005 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
      lXmlDomElement2@1000000004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
      lXmlDom@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lXmlNodeList2@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNodeList";
      lInStream@1000000006 : InStream;
      lXmlNodeList@1000000007 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNodeList";
      i@1000000008 : Integer;
      lDocumentAttachment@1000000009 : Record 50021;
      lReferentTableNo@1000000010 : Integer;
      lKeyInteger1@1000000011 : Integer;
      lKeyInteger2@1000000012 : Integer;
      lKeyCode1@1000000013 : Code[20];
      lKeyCode2@1000000014 : Code[20];
      lEntryNo@1000000015 : Integer;
      lTxt@1000000016 : Text[500];
    BEGIN
      //IMH12.ACO
      pDocumentAttachments.DELETEALL;

      pEAISentMQBuffer.CALCFIELDS("To Generate XML Source");

      CREATE(lXmlDom);
      IF pEAISentMQBuffer."To Generate XML Source".HASVALUE THEN BEGIN
        pEAISentMQBuffer."To Generate XML Source".CREATEINSTREAM(lInStream);
        lXmlDom.load(lInStream);

        lXmlNodeList := lXmlDom.getElementsByTagName('Attachment');

        IF lXmlNodeList.length > 0 THEN
          FOR i := 0 TO lXmlNodeList.length - 1 DO BEGIN
            lXmlDomElement := lXmlNodeList.item(i);

            EVALUATE(lReferentTableNo, DARVAMgt.GetNodeValue(lXmlDomElement,'ReferentTableNo.'));
            EVALUATE(lKeyInteger1, DARVAMgt.GetNodeValue(lXmlDomElement,'KeyInteger1'));
            EVALUATE(lKeyInteger2, DARVAMgt.GetNodeValue(lXmlDomElement,'KeyInteger2'));
            lKeyCode1 := DARVAMgt.GetNodeValue(lXmlDomElement,'KeyCode1');
            lKeyCode2 := DARVAMgt.GetNodeValue(lXmlDomElement,'KeyCode2');
            EVALUATE(lEntryNo, DARVAMgt.GetNodeValue(lXmlDomElement,'EntryNo'));
            IF lDocumentAttachment.GET(lReferentTableNo,
                                       lKeyInteger1,
                                       lKeyInteger2,
                                       lKeyCode1,
                                       lKeyCode2,
                                       lEntryNo) THEN
              pDocumentAttachments.INIT;
            pDocumentAttachments.TRANSFERFIELDS(lDocumentAttachment);
            pDocumentAttachments.INSERT;
          END
      END
    END;

    LOCAL PROCEDURE AffectDarvaIDAttachment@1000000001(VAR pDocumentAttachment@1000000000 : Record 50021);
    VAR
      lDARVAID@1000000001 : Text[50];
      lDocumentAttachment@1000000002 : Record 50021;
    BEGIN
      //IMH12.ACO
      lDARVAID := CREATEGUID;
      WHILE IsDARVAIDAlreadyExist(lDARVAID) DO BEGIN
        lDARVAID := CREATEGUID;
      END;

      IF pDocumentAttachment.GET(pDocumentAttachment."Referent Table No.",
                                 pDocumentAttachment."Key Integer 1",
                                 pDocumentAttachment."Key Integer 2",
                                 pDocumentAttachment."Key Code 1",
                                 pDocumentAttachment."Key Code 2",
                                 pDocumentAttachment."Entry No.") THEN BEGIN
        pDocumentAttachment."Darva ID" := lDARVAID;
        pDocumentAttachment.MODIFY(TRUE);
      END;
    END;

    LOCAL PROCEDURE IsDARVAIDAlreadyExist@1000000002(pDARVAID@1000000000 : Text[50]) : Boolean;
    VAR
      lDocumentAttachment@1000000001 : Record 50021;
    BEGIN
      //IMH12.ACO
      lDocumentAttachment.SETRANGE("Darva ID", pDARVAID);
      EXIT(NOT lDocumentAttachment.ISEMPTY);
    END;

    LOCAL PROCEDURE GetFormatAttachment@1000000006(pExtension@1000000000 : Code[10]) : Code[10];
    BEGIN
      //IMH12.ACO
      CASE pExtension OF
      'BMP', 'DOC', 'DOCX', 'GIF', 'HTML', 'PDF', 'PNG', ' TIF', 'TXT', 'XLS', 'XLSX','ZIP':
        EXIT(pExtension);
      'JPG':
        EXIT('JPEG');
      ELSE
        EXIT('9999');
      END
    END;

    BEGIN
    {
      /** @r IMH12 @d 19/02/14 @a ISAT.ACO @v IMH6.01.4900 @h 4900 @s Evolution fenàtre DARVA @c Ajout piäce jointe */
      /** @r IMH11 @d 03/07/13 @a ISAT.ACO @v IMH6.01.347 @s JUIN @h 3619 @c DÇcoupage des commentaires */
      /** @r IMH10 @d 25/09/12 @a ISAT.PC @v IMH6.01.228 @s NEP00011 @h 3815 */
      /** @r IMH09 @d 25/09/12 @a ISAT.PC @v IMH6.01.228 @s NEP00011 @h 3620 */
      /** @r IMH08 @d 21/09/12 @a ISAT.PC @v IMH6.01.228 @s NEP00011 @h 3739 */
      /** @r IMH07 @d 20/07/12 @a ISAT.PC @v IMH6.01.134 @s DARVA Management @h 3644 @c Annulation du IMH05 */
      /** @r IMH06 @d 18/06/12 @a ISAT.PC @v IMH6.01.134 @s DARVA Management @h 3618
          @c Correctif sur caractäres spÇciaux */
      /** @r IMH05 @d 02/04/12 @a ISAT.PC @v IMH6.01.134 @s DARVA Management @h 2997
          @c Correctif suite remarque de DARVA */
      /** @r IMH04 @d 06/01/12 @a ISAT.PC @v IMH6.01.134 @s DARVA Management @h 2610 @c Evolution SDR99 pour MACIF */
      /** @r IMH03 @d 09/11/11 @a ISAT.PC @v IMH6.01.134 @s DARVA Management @c Gestion des piäces jointes AGPM */
      /** @r IMH02 @d 15/09/11 @a ISAT.ZW @v IMH6.01.134 @s DARVA Management
          @c SDR99 : Soumettre Suivi Dossier Reparateur Commentaire Demande */
      /** @r IMH01 @d 13/07/11 @a ISAT.MA @v IMH6.01.134 @s DARVA Management @s CrÇation */
    }
    END.
  }
}