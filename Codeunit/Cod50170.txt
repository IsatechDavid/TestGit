OBJECT Codeunit 50170 ANSAAP Import File
{
  OBJECT-PROPERTIES
  {
    Date=18/04/14;
    Time=11:45:58;
    Modified=Yes;
    Version List=IMH6.01,ANSAAPMAT,PMU;
  }
  PROPERTIES
  {
    Permissions=TableData 5050=rim,
                TableData 5051=rim,
                TableData 50059=rim;
    OnRun=VAR
            lRcvdMQBuffer@1100281000 : TEMPORARY Record 8016721;
          BEGIN
            CurrentFile.WRITEMODE(TRUE);
            CurrentFile.TEXTMODE(TRUE);
            IF FileNameToImport = '' THEN BEGIN
              ERROR(Text012);
            END;
            IF NOT CurrentFile.OPEN(FileNameToImport) THEN BEGIN
              ERROR(Text011,FileNameToImport);
            END;
            FileCompleted := ImportFile;
            CurrentFile.CLOSE;
          END;

  }
  CODE
  {
    VAR
      Error001@1100281000 : TextConst 'FRA=Aucun CodeUnit de g‚n‚ration pour l''act %1, de type %2.';
      Error002@1100481001 : TextConst 'FRA=Le fichier "%1" est mal format‚.';
      TaskHandler@1100281008 : Codeunit 8016715;
      ToolsMgt@1100281012 : Codeunit 8016602;
      CurrentFile@1100281013 : File;
      Window@1100281002 : Dialog;
      Text001@1100281003 : TextConst 'ENU=Import file #1####################\ANSAAP #2#######;FRA=Importation fichier #1############################\ANSAAP #2#######';
      Text002@1100281004 : TextConst 'ENU=Import file #1####################\ANSRAP #2#######;FRA=Importation fichier #1############################\ANSRAP #2#######';
      Text003@1100281005 : TextConst 'ENU=%1 lines ANSAAP imported;FRA=%1 lignes ANSAAP import‚';
      Text004@1100281006 : TextConst 'ENU=%1 lines ANSRAP imported;FRA=%1 lignes ANSRAP import‚';
      FileNameToImport@1100281001 : Text[1024];
      ImportType@1100281014 : ' ,ANSAAP,ANSRAP';
      Text010@1100281015 : TextConst 'ENU=Line length no. %1 from file %2 is higher than %3;FRA=La longueur de la ligne %1 du fichier %2 est sup‚rieur … %3.';
      Text011@1100281016 : TextConst 'ENU=It is impossible to open file %1;FRA=Impossible d''ouvrir le fichier %1';
      Text012@1100281017 : TextConst 'ENU=File name to import is empty;FRA=Un nom de fichier est obligatoire';
      Text020@1000000000 : TextConst 'ENU=Contact %1 is not in imported files.;FRA=Le contact %1 n''est pas dans les fichiers import‚s.';
      ANSAAP@1000000001 : Record 50118;
      ANSAAP2@1000000003 : Record 50118;
      ANSRAP@1000000002 : Record 50119;
      FileCompleted@1100281007 : Boolean;
      OldLoadingTime@1100281009 : Duration;

    LOCAL PROCEDURE InitImportFile@1000000004(VAR pImportFile@1000000000 : Record 50120;pFileName@1000000001 : Text[1024]);
    BEGIN
      WITH pImportFile DO BEGIN
        SETCURRENTKEY("File Name");
        SETRANGE("File Name", pFileName);
        SETRANGE("Loading Complete", FALSE);
        IF FINDFIRST THEN BEGIN // Reprise
          "Start Date" := CURRENTDATETIME;
          "End Date" := 0DT;
          "Loading No." += 1;
          OldLoadingTime := "Loading Time"; //IMH04.ST
          MODIFY;
        END
        ELSE BEGIN
          OldLoadingTime := 0; //IMH04.ST
          INIT;
          "Entry No." := 0;
          "File Name" := pFileName;
          "Start Date" := CURRENTDATETIME;
          "Loading No." := 1;
          INSERT(TRUE);
        END;
      END; // WITH
    END;

    PROCEDURE ImportFile@1100281003() : Boolean;
    VAR
      lImportFileContact@1000000005 : Record 50120;
      lANSAAP@1100281005 : Record 50118;
      lANSRAP@1100281001 : Record 50119;
      lReadLine@1100281002 : Text[1024];
      lFileLine@1000000003 : Integer;
      lRecordsUpdated@1000000000 : Integer;
      lLineLen@1100281000 : Integer;
    BEGIN
      InitImportFile(lImportFileContact,FileNameToImport);
      CASE ImportType OF
        ImportType::" " : EXIT;
        ImportType::ANSAAP : lLineLen := 538;
        ImportType::ANSRAP : lLineLen := 387;
      END;
      lFileLine := 0;
      FileCompleted := FALSE;
      WHILE CurrentFile.READ(lReadLine) > 0 DO BEGIN
        lFileLine += 1;
        IF lImportFileContact."Last File Line No." < lFileLine THEN BEGIN
          IF STRLEN(lReadLine) > lLineLen THEN BEGIN
            CurrentFile.CLOSE;
            ERROR(Text010,lFileLine,FileNameToImport,lLineLen);
          END;
      //    lReadLine := ToolsMgt.ReplaceControlCaracter(lReadLine);
          lReadLine := ToolsMgt.FormatImport2(lReadLine);

          CASE ImportType OF
            ImportType::ANSAAP :
              IF ReadANSAAPLine(lReadLine, lANSAAP) THEN BEGIN
                lANSAAP."File Entry No." := lImportFileContact."Entry No.";
                IF SaveANSAAPLine(lANSAAP) THEN
                  lRecordsUpdated += 1;
              END;
            ImportType::ANSRAP :
              IF ReadANSRAPLine(lReadLine, lANSRAP) THEN BEGIN
                lANSRAP."File Entry No." := lImportFileContact."Entry No.";
                IF SaveANSRAPLine(lANSRAP) THEN
                  lRecordsUpdated += 1;
              END;
          END;

          IF lFileLine MOD 1000 = 0 THEN BEGIN
            lImportFileContact."Last File Line No." := lFileLine;
            lImportFileContact."Records Updated" += lRecordsUpdated;
            lImportFileContact."Loading Time" := OldLoadingTime + (CURRENTDATETIME - lImportFileContact."Start Date"); //IMH04.ST
            lImportFileContact.MODIFY;
            COMMIT;
            lRecordsUpdated := 0;
      //<<IMH04.ST
            IF TaskHandler.IsStoppingTime THEN BEGIN
              TaskHandler.AddExpiredMsg('');
              EXIT(FALSE);
            END;
      //>>IMH04.ST
          END;
        END;
      END;
      WITH lImportFileContact DO BEGIN
        "End Date" := CURRENTDATETIME;
        "Last File Line No." := lFileLine;
        "Records Updated" += lRecordsUpdated;
        "Loading Time" := OldLoadingTime + ("End Date" - "Start Date"); //IMH04.ST
        "Loading Complete" := TRUE;
        MODIFY;
      END;
      COMMIT;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ReadANSAAPLine@1000000001(pReadLine@1000000000 : Text[1024];VAR pANSAAP@1000000001 : Record 50118) : Boolean;
    VAR
      lDummyInteger@1000000002 : Integer;
    BEGIN
      //IMH03.ST Ligne du fichier -> Rec
      CLEAR(pANSAAP);
      WITH pANSAAP DO BEGIN
        Site := COPYSTR(pReadLine,1,1);
        "Customer No." := COPYSTR(pReadLine,2,3);
        "Contact No." := COPYSTR(pReadLine,5,20);
        "Warranty No." := COPYSTR(pReadLine,25,20);
        "Person Code" := COPYSTR(pReadLine,45,1);
        "Person ID" := COPYSTR(pReadLine,46,3);
        "Corporation ID" := COPYSTR(pReadLine,49,3);
        Name := DELCHR(ToolsMgt.FormatImport(COPYSTR(pReadLine,52,38)),'<>');
        FullName := DELCHR(ToolsMgt.FormatImport(COPYSTR(pReadLine,90,38)),'<>');
        "Address 1" := DELCHR(COPYSTR(pReadLine,128,38),'<>');
        "Address 2" := DELCHR(COPYSTR(pReadLine,166,38),'<>');
        "Address 3" := DELCHR(COPYSTR(pReadLine,204,38),'<>');
        "Post Code" := COPYSTR(pReadLine,242,7);
        City := DELCHR(COPYSTR(pReadLine,249,38),'<>');
        Country := COPYSTR(pReadLine,287,3);
        County := COPYSTR(pReadLine,290,2);
        "Customer County" := DELCHR(COPYSTR(pReadLine,292,5),'<>');
        "Phone No. 1" := DELCHR(COPYSTR(pReadLine,297,25),'<>');
        "Phone No. 2" := DELCHR(COPYSTR(pReadLine,322,25),'<>');
        "Fax No." := DELCHR(COPYSTR(pReadLine,347,25),'<>');
        "E-Mail 1" := DELCHR(COPYSTR(pReadLine,372,40),'<>');
        "E-Mail 2" := DELCHR(COPYSTR(pReadLine,412,40),'<>');
        Sexe := COPYSTR(pReadLine,452,1);
        IF EVALUATE(lDummyInteger,DELCHR(COPYSTR(pReadLine,453,8),'=',' ')) THEN
          "Birth Date" := lDummyInteger;
        IF EVALUATE(lDummyInteger,DELCHR(COPYSTR(pReadLine,461,8),'=',' ')) THEN
          "Radiation Date" := lDummyInteger;

        "Structure Code" := DELCHR(COPYSTR(pReadLine,469,5),'<>');
        //FILLER MACIF
        IF ("Structure Code" = '00001') AND ("Customer No." IN ['MB','MC','MCS']) THEN
          Filler := COPYSTR(pReadLine,474,37);
        //<<IMH08
        //FILLER MATMUT et AMF
        IF ("Structure Code" = '') AND ("Customer No." IN ['MF', 'AMA', 'AMF']) THEN
          Filler := ToolsMgt.FormatImport(COPYSTR(pReadLine,474,37));
        //>>IMH08

        Particularity := DELCHR(COPYSTR(pReadLine,511,10),'<>');
        IF EVALUATE(lDummyInteger,DELCHR(COPYSTR(pReadLine,521,8),'=',' ')) THEN
          "Movement Date" := lDummyInteger;
        Regimental := COPYSTR(pReadLine,529,10);
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE SaveANSAAPLine@1000000005(VAR pANSAAP@1000000001 : Record 50118) : Boolean;
    VAR
      lProcessedFound@1000000002 : Boolean;
      lPendingFound@1000000000 : Boolean;
    BEGIN
      //IMH03.ST
      WITH ANSAAP DO BEGIN
        RESET;
        SETRANGE("Contact No.", pANSAAP."Contact No.");
        SETRANGE("Customer No.", pANSAAP."Customer No.");
      {
        SETRANGE("Treatment Status", "Treatment Status"::Processed);
        LOCKTABLE;
        IF FINDLAST THEN BEGIN
          // Contr“le derniŠre donn‚es valid‚s
          IF SameANSAAP(ANSAAP, pANSAAP) THEN BEGIN
            // enregistrement identique -> suppressions des autres et sortie
            SETFILTER("Entry No.", '<>%1', "Entry No.");
            SETRANGE("Treatment Status");
            IF NOT ISEMPTY THEN
              DELETEALL;
            // Pas de mise … jour n‚cessaire
            EXIT(FALSE);
          END;
        END; // FINDLAST
        SETRANGE("Treatment Status", "Treatment Status"::Pending);
        IF FINDLAST THEN
          IF SameANSAAP(ANSAAP, pANSAAP) THEN
            EXIT(FALSE);
      }
        IF FIND('+') THEN
          REPEAT
            CASE "Treatment Status" OF
              "Treatment Status"::Processed :
                IF NOT lProcessedFound THEN BEGIN
                  IF SameANSAAP(ANSAAP, pANSAAP) THEN BEGIN
                    // enregistrement identique -> suppressions des autres et sortie
                    SETFILTER("Entry No.", '<>%1', "Entry No.");
                    SETRANGE("Treatment Status");
                    IF NOT ISEMPTY THEN
                      DELETEALL;
                    // Pas de mise … jour n‚cessaire
                    EXIT(FALSE);
                  END
                  ELSE lProcessedFound := TRUE;
                END;
              "Treatment Status"::Pending :
                IF NOT lPendingFound THEN BEGIN
                  ANSAAP2 := ANSAAP;
                  lPendingFound := TRUE;
                END;
            END; // CASE
          UNTIL (NEXT(-1) = 0) OR (lProcessedFound AND lPendingFound);
        IF lPendingFound THEN
          IF SameANSAAP(ANSAAP2, pANSAAP) THEN
            EXIT;
        // Cr‚ation de la ligne
        ANSAAP := pANSAAP;
        "Navision Corporate No." := GetNavisionCustomerNo("Customer No.");
        "Treatment Status" := "Treatment Status"::Pending;
        "Entry No." := 0;
        INSERT(TRUE);
      END; // WITH ANSAAP
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ReadANSRAPLine@1000000002(pReadLine@1000000000 : Text[1024];VAR pANSRAP@1000000001 : Record 50119) : Boolean;
    VAR
      lDummyInteger@1000000002 : Integer;
    BEGIN
      CLEAR(pANSRAP);
      WITH pANSRAP DO BEGIN
        Site := COPYSTR(pReadLine,1,1);
        "Customer No." := COPYSTR(pReadLine,2,3);
        "Contact No." := COPYSTR(pReadLine,5,20);
        "Warranty No." := COPYSTR(pReadLine,25,20);
        "Contract Code" := COPYSTR(pReadLine,45,3);
        "Residence Type" := COPYSTR(pReadLine,48,1);
        "Address 1" := DELCHR(COPYSTR(pReadLine,49,38),'<>');
        "Address 2" := DELCHR(COPYSTR(pReadLine,87,38),'<>');
        "Address 3" := DELCHR(COPYSTR(pReadLine,125,38),'<>');
        "Post Code" := COPYSTR(pReadLine,163,7);
        City := DELCHR(COPYSTR(pReadLine,170,38),'<>');
        Country := COPYSTR(pReadLine,208,3);
        County := COPYSTR(pReadLine,211,2);
        "Phone No. 1" := DELCHR(COPYSTR(pReadLine,213,25),'<>');
        Protection := COPYSTR(pReadLine,238,1);
        IF EVALUATE(lDummyInteger,DELCHR(COPYSTR(pReadLine,239,8),'=',' ')) THEN
          "Contract Start Date" := lDummyInteger;
        IF EVALUATE(lDummyInteger,DELCHR(COPYSTR(pReadLine,247,8),'=',' ')) THEN
          "Contract End Date" := lDummyInteger;
        "Structure Code" := DELCHR(COPYSTR(pReadLine,255,5),'<>');
        //FILLER MACIF
        IF ("Structure Code" = '00001') AND ("Customer No." IN ['MB','MC','MCS']) THEN
          Filler := COPYSTR(pReadLine,260,100); // pas de DELCHR sur le filler
        //<<IMH08
        //FILLER MATMUT et AMF
        IF ("Structure Code" = '') AND ("Customer No." IN ['MF', 'AMA', 'AMF']) THEN
          Filler := ToolsMgt.FormatImport(COPYSTR(pReadLine,260,100)); // pas de DELCHR sur le filler
        //>>IMH08

        //<<IMH09
        //FILLER MAIF
        IF ("Structure Code" = 'MAIJU') AND ("Customer No." ='MC') THEN
          Filler := ToolsMgt.FormatImport(COPYSTR(pReadLine,260,100)); // pas de DELCHR sur le filler
        //>>IMH09


        IF EVALUATE(lDummyInteger,DELCHR(COPYSTR(pReadLine,270,8),'=',' ')) THEN
          "Movement Date" := lDummyInteger;
        Particularity := COPYSTR(pReadLine,360,10);
        Regimental := COPYSTR(pReadLine,378,10);
      END; // WITH
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE SaveANSRAPLine@1000000010(VAR pANSRAP@1000000001 : Record 50119) : Boolean;
    VAR
      lDummyInteger@1000000002 : Integer;
    BEGIN
      WITH ANSRAP DO BEGIN
        RESET;
        SETRANGE("Contact No.", pANSRAP."Contact No.");
        SETRANGE("Customer No.", pANSRAP."Customer No.");
        SETRANGE("Warranty No.", pANSRAP."Warranty No.");
        SETRANGE("Contract Code", pANSRAP."Contract Code"); //IMH06.ST
        SETRANGE("Treatment Status", "Treatment Status"::Processed);
        LOCKTABLE;
        IF FINDLAST THEN
          IF SameANSRAP(ANSRAP, pANSRAP) THEN BEGIN
            // enregistrement identique -> suppressions des autres et sortie
            SETFILTER("Entry No.", '<>%1', "Entry No.");
            SETRANGE("Treatment Status");
            IF NOT ISEMPTY THEN
              DELETEALL;
            // Pas de mise … jour n‚cessaire
            EXIT(FALSE);
          END;

        SETRANGE("Treatment Status", "Treatment Status"::Pending);
        IF FINDLAST THEN
          IF SameANSRAP(ANSRAP, pANSRAP) THEN
            EXIT(FALSE);

        // Cr‚ation de la ligne
        ANSRAP := pANSRAP;
        "Navision Corporate No." := GetNavisionCustomerNo("Customer No.");
        "Treatment Status" := "Treatment Status"::Pending;
        "Entry No." := 0;
        INSERT(TRUE);
      END; // WITH ANSRAP
      EXIT(TRUE);
    END;

    PROCEDURE SameANSAAP@1000000003(VAR pANSAAP1@1000000000 : Record 50118;VAR pANSAAP2@1000000001 : Record 50118) : Boolean;
    BEGIN
      WITH pANSAAP1 DO BEGIN
        EXIT(
             (Site = pANSAAP2.Site) AND
             ("Warranty No." = pANSAAP2."Warranty No.") AND
             ("Person Code" = pANSAAP2."Person Code") AND
             ("Person ID" = pANSAAP2."Person ID") AND
             ("Corporation ID" = pANSAAP2."Corporation ID") AND
             (Name = pANSAAP2.Name) AND
             (FullName = pANSAAP2.FullName) AND
             ("Address 1" = pANSAAP2."Address 1") AND
             ("Address 2" = pANSAAP2."Address 2") AND
             ("Address 3" = pANSAAP2."Address 3") AND
             ("Post Code" = pANSAAP2."Post Code") AND
             (City = pANSAAP2.City) AND
             (Country = pANSAAP2.Country) AND
             (County = pANSAAP2.County) AND
             ("Customer County" = pANSAAP2."Customer County") AND
             ("Phone No. 1" = pANSAAP2."Phone No. 1") AND
             ("Phone No. 2" = pANSAAP2."Phone No. 2") AND
             ("Fax No." = pANSAAP2."Fax No.") AND
             ("E-Mail 1" = pANSAAP2."E-Mail 1") AND
             ("E-Mail 2" = pANSAAP2."E-Mail 2") AND
             (Sexe = pANSAAP2.Sexe) AND
             ("Birth Date" = pANSAAP2."Birth Date") AND
             ("Radiation Date" = pANSAAP2."Radiation Date") AND
             ("Structure Code" = pANSAAP2."Structure Code") AND
             (Filler = pANSAAP2.Filler) AND
             (Particularity = pANSAAP2.Particularity) AND
             ("Movement Date" = pANSAAP2."Movement Date") AND // voir si cela a un int‚ret
             (Regimental = pANSAAP2.Regimental)
           );
      END; // WITH
    END;

    PROCEDURE SameANSRAP@1000000007(VAR pANSRAP1@1000000000 : Record 50119;VAR pANSRAP2@1000000001 : Record 50119) : Boolean;
    BEGIN
      WITH pANSRAP1 DO BEGIN
        EXIT(
             (Site = pANSRAP2.Site) AND
             ("Contract Code" = pANSRAP2."Contract Code") AND
             ("Residence Type" = pANSRAP2."Residence Type") AND
             ("Address 1" = pANSRAP2."Address 1") AND
             ("Address 2" = pANSRAP2."Address 2") AND
             ("Address 3" = pANSRAP2."Address 3") AND
             ("Post Code" = pANSRAP2."Post Code") AND
             (City = pANSRAP2.City) AND
             (Country = pANSRAP2.Country) AND
             (County = pANSRAP2.County) AND
             ("Phone No. 1" = pANSRAP2."Phone No. 1") AND
             (Protection = pANSRAP2.Protection) AND
             ("Contract Start Date" = pANSRAP2."Contract Start Date") AND
             ("Contract End Date" = pANSRAP2."Contract End Date") AND
             ("Structure Code" = pANSRAP2."Structure Code") AND
             (Filler = pANSRAP2.Filler) AND
             ("Movement Date" = pANSRAP2."Movement Date") AND
             (Particularity = pANSRAP2.Particularity) AND
             (Regimental = pANSRAP2.Regimental)
            );
      END; // WITH
    END;

    PROCEDURE SetParameters@1100281005(pFileNameToImport@1100281000 : Text[1024];pType@1100281001 : ' ,ANSAAP,ANSRAP');
    BEGIN
      FileNameToImport := pFileNameToImport;
      ImportType := pType;
    END;

    PROCEDURE ActualizeContact@1000000000(pContact@1000000000 : Record 5050;pWithForce@1100281000 : Boolean) rValue : Boolean;
    VAR
      lANSAAP@1000000001 : Record 50118;
      lANSAAPBuffer@1100281001 : TEMPORARY Record 50118;
      lANSRAP@1000000003 : Record 50119;
      lANSRAPBuffer@1100281004 : TEMPORARY Record 50119;
      lEAIAct@1000000013 : Record 8016706;
      lTempCont@1000000008 : TEMPORARY Record 5050;
      lTempContract@1000000007 : TEMPORARY Record 50059;
      lTempContAltAddr@1000000006 : TEMPORARY Record 5051;
      lANSAAPRcvdGenerationAct@1000000005 : Codeunit 50143;
      lANSAAPRcvdAct@1000000004 : Codeunit 50144;
      lXMLDocument@1000000012 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{88D96A05-F192-11D4-A65F-0040963251E5}:'Microsoft XML, v6.0'.DOMDocument60";
      lXMLRootNode@1000000011 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lXMLDocumentNode@1000000010 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lXMLNewNode@1000000009 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lROOTText@1000000002 : TextConst 'FRA=MESSAGE';
      lXMLFilled@1100281002 : Boolean;
      lText@1100281003 : Text[100];
    BEGIN
      // IMH04b.PC
      // Met … jour le contact avec les informations pr‚sent dans les tables ANSAAP et ANSRAP

      pContact.TESTFIELD("Service Contact", pContact."Service Contact"::Beneficiary);
      pContact.TESTFIELD("Member No.");
      pContact.TESTFIELD("Corporate No.");
      lANSAAP.SETRANGE("Contact No.", pContact."Member No.");
      //<<IMH07
      //lANSAAP.SETRANGE("Customer No.",GetANSAAPCustomerNo(pContact."Corporate No."));
      lANSAAP.SETFILTER("Customer No.",GetANSAAPCustomerFilter(pContact."Corporate No."));
      //>>IMH07
      IF NOT pWithForce THEN BEGIN
        lANSAAP.SETRANGE("Treatment Status",lANSAAP."Treatment Status"::Pending);
      END;

      // Cr‚ation du fichier XML en teomporaire
      IF ISCLEAR(lXMLDocument) THEN BEGIN
        CREATE(lXMLDocument);
      END;
      IF NOT lXMLDocument.loadXML('<?xml version="1.0" encoding="ISO-8859-1" ?><' + lROOTText + '/>') THEN BEGIN
        EXIT;
      END;

      lXMLRootNode := lXMLDocument.documentElement;
      lXMLFilled := FALSE;
      //<<IMH07
      //IF lANSAAP.FINDSET THEN BEGIN
      IF lANSAAP.FINDLAST THEN BEGIN
        lXMLFilled := TRUE;
        //REPEAT
      //>>IMH07
          lANSAAPRcvdGenerationAct.WriteMemberFromANSAAP(lXMLRootNode,lANSAAP,'',lXMLDocumentNode);
          //<<IMH07
        //UNTIL lANSAAP.NEXT = 0;
        //>>IMH07
      END ELSE BEGIN
        // Gestion des ANSRAP seuls
        lANSRAP.SETRANGE("Contact No.", pContact."Member No.");
        //<<IMH07
        //lANSRAP.SETRANGE("Customer No.",GetANSAAPCustomerNo(pContact."Corporate No."));
        lANSRAP.SETFILTER("Customer No.",GetANSAAPCustomerFilter(pContact."Corporate No."));
        //>>IMH07
        IF NOT pWithForce THEN BEGIN
          lANSRAP.SETRANGE("Treatment Status",lANSRAP."Treatment Status"::Pending);
        END;
        IF lANSRAP.FINDLAST THEN BEGIN  //IMH07
          // g‚n‚ration du record ANSAAP en temporaire
          lANSAAPBuffer."Customer No." := lANSRAP."Customer No.";
          lANSAAPBuffer."Contact No." := lANSRAP."Contact No.";
          lANSAAPBuffer."Address 1" := COPYSTR(pContact.Address,1,MAXSTRLEN(lANSAAPBuffer."Address 1"));
          lANSAAPBuffer."Address 2" := COPYSTR(pContact."Address 2",1,MAXSTRLEN(lANSAAPBuffer."Address 2"));
          lANSAAPBuffer."Address 3" := COPYSTR(pContact."Address 3",1,MAXSTRLEN(lANSAAPBuffer."Address 3"));
          lANSAAPBuffer."Post Code" := COPYSTR(pContact."Post Code",1,MAXSTRLEN(lANSAAPBuffer."Post Code"));
          lANSAAPBuffer.City := COPYSTR(pContact.City,1,MAXSTRLEN(lANSAAPBuffer.City));
          IF pContact.Type = pContact.Type::Company THEN BEGIN
            lANSAAPBuffer."Corporation ID" := COPYSTR(pContact."Salutation Code",1,MAXSTRLEN(lANSAAPBuffer."Corporation ID"));
          END ELSE BEGIN
            lANSAAPBuffer."Person ID" := COPYSTR(pContact."Salutation Code",1,MAXSTRLEN(lANSAAPBuffer."Person ID"));
          END;
          lANSAAPBuffer."Phone No. 1" := COPYSTR(pContact."Phone No.",1,MAXSTRLEN(lANSAAPBuffer."Phone No. 1"));
          lANSAAPBuffer."Phone No. 2" := COPYSTR(pContact."Mobile Phone No.",1,MAXSTRLEN(lANSAAPBuffer."Phone No. 2"));
          lANSAAPBuffer."Fax No." := COPYSTR(pContact."Fax No.",1,MAXSTRLEN(lANSAAPBuffer."Fax No."));
          lANSAAPBuffer."E-Mail 1" := COPYSTR(pContact."E-Mail",1,MAXSTRLEN(lANSAAPBuffer."E-Mail 1"));
          lANSAAPBuffer."E-Mail 2" := COPYSTR(pContact."E-Mail 2",1,MAXSTRLEN(lANSAAPBuffer."E-Mail 2"));
          //<<IMH05
          IF EVALUATE(
               lANSAAPBuffer."Birth Date", ToolsMgt.DateToText2(pContact.Birthdate))
          THEN;
          IF EVALUATE(
               lANSAAPBuffer."Radiation Date", ToolsMgt.DateToText2(pContact."Rayed Date"))
          THEN;
          {
          IF EVALUATE(
               lANSAAPBuffer."Birth Date",
               COPYSTR(ToolsMgt.DateToText2(pContact.Birthdate),1,MAXSTRLEN(lANSAAPBuffer."Birth Date")))
          THEN;
          IF EVALUATE(
               lANSAAPBuffer."Radiation Date",
               COPYSTR(ToolsMgt.DateToText2(pContact."Rayed Date"),1,MAXSTRLEN(lANSAAPBuffer."Radiation Date")))
          THEN;
          }
          //>>IMH05
          lANSAAPBuffer.INSERT;
          lANSAAPRcvdGenerationAct.WriteMemberFromANSAAP(lXMLRootNode,lANSAAPBuffer,'',lXMLDocumentNode);
          lXMLFilled := TRUE;
        END;
      END;

      IF lXMLFilled THEN BEGIN
      //<<IMH07
          lANSRAP.SETRANGE("Contact No.", pContact."Member No.");
          //<<IMH07
          //lANSRAP.SETRANGE("Customer No.",GetANSAAPCustomerNo(pContact."Corporate No."));
          lANSRAP.SETFILTER("Customer No.",GetANSAAPCustomerFilter(pContact."Corporate No."));
          //>>IMH07
          IF NOT pWithForce THEN BEGIN
            lANSAAP.SETRANGE("Treatment Status",lANSAAP."Treatment Status"::Pending);
          END;
          IF lANSRAP.FINDLAST THEN
            REPEAT
              lANSRAPBuffer.SETRANGE("Contact No.", lANSRAP."Contact No.");
              lANSRAPBuffer.SETRANGE("Customer No.", lANSRAP."Customer No.");
              lANSRAPBuffer.SETRANGE("Warranty No.", lANSRAP."Warranty No.");
              lANSRAPBuffer.SETRANGE("Contract Code", lANSRAP."Contract Code");
              IF lANSRAPBuffer.ISEMPTY THEN BEGIN
                lANSRAPBuffer := lANSRAP;
                lANSRAPBuffer.INSERT;
              END;
            UNTIL lANSRAP.NEXT(-1) = 0;
          lANSRAPBuffer.RESET;
          IF lANSRAPBuffer.FINDSET THEN BEGIN
            REPEAT
              lANSAAPRcvdGenerationAct.WriteMemberFromANSRAP(lXMLDocumentNode,lANSRAPBuffer,'',lXMLNewNode);
            UNTIL lANSRAPBuffer.NEXT = 0;
          END;
      //IMH07
        lXMLDocumentNode := lXMLDocument.documentElement;
        lANSAAPRcvdAct.SetPartnerCode('ANSAAP');
        lANSAAPRcvdAct.ReadXMLDoc(lXMLDocumentNode,lEAIAct,lTempCont,lTempContract,lTempContAltAddr);
        IF lTempCont.FINDSET THEN BEGIN
          REPEAT
            lANSAAPRcvdAct.UpdateContact(lTempCont,lTempContract,lTempContAltAddr);
          UNTIL lTempCont.NEXT = 0;
        END;
      END;

      CLEAR(lXMLRootNode);
      CLEAR(lXMLDocumentNode);
      CLEAR(lXMLNewNode);
      CLEAR(lXMLDocument);
    END;

    PROCEDURE CreateContactFromANSAAP@1100281000(pMemberNo@1100281000 : Code[20];pNavisionCorporateNo@1100281001 : Code[20]) rValue : Boolean;
    VAR
      lANSAAP@1100281013 : Record 50118;
      lANSRAP@1100281011 : Record 50119;
      lEAIAct@1100281010 : Record 8016706;
      lTempCont@1100281009 : TEMPORARY Record 5050;
      lTempContract@1100281008 : TEMPORARY Record 50059;
      lTempContAltAddr@1100281007 : TEMPORARY Record 5051;
      lANSAAPRcvdGenerationAct@1100281006 : Codeunit 50143;
      lANSAAPRcvdAct@1100281005 : Codeunit 50144;
      lXMLDocument@1100281004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{88D96A05-F192-11D4-A65F-0040963251E5}:'Microsoft XML, v6.0'.DOMDocument60";
      lXMLRootNode@1100281003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lXMLDocumentNode@1100281002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lROOTText@1100281012 : TextConst 'FRA=MESSAGE';
      lXMLNewNode@1100281014 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
    BEGIN
      // IMH02.PC
      // Permet de cr‚er directement depuis la table ANSAAP/ANSRAP une fiche contact
      rValue := FALSE;

      IF (pMemberNo = '') OR (pNavisionCorporateNo = '') THEN BEGIN
        EXIT;
      END;

      lANSAAP.SETRANGE("Contact No.",pMemberNo);
      lANSAAP.SETRANGE("Customer No.",GetANSAAPCustomerNo(pNavisionCorporateNo));
      IF lANSAAP.ISEMPTY THEN BEGIN
        EXIT;
      END;
      lANSAAP.FINDSET;
      // Cr‚ation du fichier XML en teomporaire
      IF ISCLEAR(lXMLDocument) THEN BEGIN
        CREATE(lXMLDocument);
      END;
      IF NOT lXMLDocument.loadXML('<?xml version="1.0" encoding="ISO-8859-1" ?><' + lROOTText + '/>') THEN BEGIN
        EXIT;
      END;
      lXMLRootNode := lXMLDocument.documentElement;
      REPEAT
        lANSAAPRcvdGenerationAct.WriteMemberFromANSAAP(lXMLRootNode,lANSAAP,'',lXMLDocumentNode);
        lANSRAP.SETRANGE("Contact No.",pMemberNo);
        lANSRAP.SETRANGE("Customer No.",GetANSAAPCustomerNo(pNavisionCorporateNo));
        IF lANSRAP.FINDSET THEN BEGIN
          REPEAT
            lANSAAPRcvdGenerationAct.WriteMemberFromANSRAP(lXMLDocumentNode,lANSRAP,'',lXMLNewNode);
          UNTIL lANSRAP.NEXT = 0;
        END;
      UNTIL lANSAAP.NEXT = 0;
      lXMLDocumentNode := lXMLDocument.documentElement;
      lANSAAPRcvdAct.SetPartnerCode('ANSAAP');
      lANSAAPRcvdAct.ReadXMLDoc(lXMLDocumentNode,lEAIAct,lTempCont,lTempContract,lTempContAltAddr);
      IF lTempCont.FINDSET THEN BEGIN
        REPEAT
          lANSAAPRcvdAct.UpdateContact(lTempCont,lTempContract,lTempContAltAddr);
        UNTIL lTempCont.NEXT = 0;
      END;

      CLEAR(lXMLRootNode);
      CLEAR(lXMLDocumentNode);
      CLEAR(lXMLNewNode);
      CLEAR(lXMLDocument);
    END;

    PROCEDURE IsFileCompleted@1100281001() : Boolean;
    BEGIN
      EXIT(FileCompleted);
    END;

    LOCAL PROCEDURE GetANSAAPCustomerNo@1000000006(pCorporateNo@1000000001 : Code[20]) : Text[30];
    VAR
      lEAIPartnerCrossReference@1000000000 : Record 8016748;
    BEGIN
      // IMH04b.PC
      WITH lEAIPartnerCrossReference DO BEGIN
        SETRANGE("Table ID",DATABASE::Customer);
        SETRANGE("Source No.",pCorporateNo);
        SETRANGE("Source No. 2",'');
        SETRANGE("Partner Code",'ANSAAP');
        IF ISEMPTY THEN BEGIN
          SETRANGE("Partner Code");
        END;
        IF FINDFIRST THEN BEGIN
          EXIT(lEAIPartnerCrossReference."Partner Reference");
        END ELSE BEGIN
          EXIT('');
        END;
      END;
    END;

    LOCAL PROCEDURE GetANSAAPCustomerFilter@1100281002(pCorporateNo@1000000001 : Code[20]) rValue : Text[250];
    VAR
      lEAIPartnerCrossReference@1000000000 : Record 8016748;
    BEGIN
      // IMH07
      WITH lEAIPartnerCrossReference DO BEGIN
        SETRANGE("Table ID",DATABASE::Customer);
        SETRANGE("Source No.",pCorporateNo);
        SETRANGE("Source No. 2",'');
        SETRANGE("Partner Code",'ANSAAP');
        IF ISEMPTY THEN BEGIN
          SETRANGE("Partner Code");
        END;
        IF FINDFIRST THEN BEGIN
          REPEAT
            IF rValue = '' THEN
              rValue := lEAIPartnerCrossReference."Partner Reference"
            ELSE
              rValue := rValue + '|' + lEAIPartnerCrossReference."Partner Reference";
          UNTIL lEAIPartnerCrossReference.NEXT = 0;
          EXIT(rValue);
        END ELSE BEGIN
          EXIT('');
        END;
      END;
    END;

    BEGIN
    {
      /** @r IMH09 @d 18/04/14 @a IMH.WGA @v IMH6.01.P009 @s MAIF PMU
          @c Ajout gestion de FILLER pour MAIF */
      /** @r IMH08 @d 13/11/13 @a ISAT.ZW @v IMH6.01.4853 @s ANSRAP MATMUT @h 4853
          @c Ajout gestion de FILLER pour matmut et AMF */
      /** @r IMH07 @d 09/07/12 @a ISAT.ZW @v IMH6.01.133 @s Interface GC/IMA @h 3584 @c Correction */
      /** @r IMH06 @d 02/05/12 @a ISAT.ST @v IMH6.01.133 @s Interface GC/IMA @h 3440 @c Filtre formule */
      /** @r IMH05 @d 20/04/11 @a ISAT.ZW @v IMH6.01.133 @s Interface GC/IMA @h mantis 3280 @c Correction bug */
      /** @r IMH04b @d 10/04/12 @a ISAT.PC @v IMH6.01.133 @s Update Beneficiary @h 3280
          @c Add ActualizeContact function */
      /** @r IMH04 @d 05/03/12 @a ISAT.ST @v IMH6.01.133 @s Processus … tƒches : expirations
          @c Ajout LoadingTime
          @c ajout permission 5050, Contact, 5051, "Contact Alt. Address" et 50059, "Contact Contract" = rim*/
      /** @r IMH03 @d 06/02/12 @a ISAT.ST @v IMH6.01.133 @s Interface GC/IMA @c Gestion derniŠre version */
      /** @r IMH02 @d 31/01/12 @a ISAT.PC @v IMH6.01.133 @s Interface GC/IMA @c r‚‚criture */
      /** @r IMH01 @d 22/09/11 @a ISAT.EBA @v IMH6.01.133 @s Interface fichier soci‚taire */
    }
    END.
  }
}