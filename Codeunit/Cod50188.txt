OBJECT Codeunit 50188 FUSION Rcvd Doc. Post Line
{
  OBJECT-PROPERTIES
  {
    Date=04/12/12;
    Time=14:38:03;
    Modified=Yes;
    Version List=IMH6.01;
  }
  PROPERTIES
  {
    TableNo=8016721;
    OnRun=BEGIN
            EAIRcvdMQBuffer := Rec;
            Rec.CALCFIELDS("XML Source");
            EAIRcvdMQBuffer."XML Source" := Rec."XML Source";
            Code;
            Rec := EAIRcvdMQBuffer;
            IF NOT MODIFY THEN
              INSERT;
          END;

  }
  CODE
  {
    VAR
      EAIRcvdMQBuffer@1100281000 : Record 8016721;
      ToolsMgt@1100281002 : Codeunit 8016602;
      FUSIONInterfaceMgt@1100281003 : Codeunit 50181;
      ErrorText001@1100281004 : TextConst 'ENU="The corporate %1 nonexistent. ";FRA=Le code GTA donneur d''ordre %1 n''est pas valide.';
      ErrorText002@1100281001 : TextConst 'ENU="Beneficiary missing ";FRA=B‚n‚ficiaire manquant.';
      ErrorText003@1100281005 : TextConst 'ENU="The beneficiary %1 nonexistent. ";FRA=Le code GTA b‚n‚ficiaire %1 n''est pas valide.';
      lFUSIONInvoiceMgt@1100281008 : Codeunit 50180;
      EAIXMLMgt@1100281006 : Codeunit 8016710;
      CompanyInformation@1100281007 : Record 79;
      InterfaceSetup@1100281009 : Record 50139;
      NoSeriesMgt@1100281010 : Codeunit 396;
      DarvaMgt@1100281011 : Codeunit 50150;
      NHLineNo@1100281012 : Integer;
      GenJnlBatch@1100281013 : Record 232;
      GenJnlTemplate@1100281014 : Record 80;

    PROCEDURE Code@1100281000();
    VAR
      lInStream@1100281005 : InStream;
      lXmlDom@1100281009 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lXmlNodeList@1100281007 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNodeList";
      lXmlDomElement@1100281001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
      lAttributeNode@1100281002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lBeneficiaryContact@1100281000 : Record 5050;
      lCorporateContact@1100281013 : Record 5050;
      lServiceHeaderAddress@1100281008 : Record 50068;
      lServiceHeader@1100281012 : Record 5900;
      lServiceHeader1@1100281017 : Record 5900;
      lContact@1100281004 : Record 5050;
      lCorporateGTANo@1100281003 : Code[20];
      lCorporateNo@1100281011 : Code[20];
      lCorporateRegionCode@1100281010 : Code[10];
      lErrorText@1100281006 : Text[250];
      lRecRef@1100281014 : RecordRef;
      lDec@1100281015 : Decimal;
      lErrorText001@1100281016 : TextConst 'ENU="The value %1 of field %2 is not a valide. ";FRA=Le valeur %1 du champ %2 n''est pas valide.';
    BEGIN
      // an XMLDOM object
      EAIRcvdMQBuffer.CALCFIELDS("XML Source");
      EAIRcvdMQBuffer."XML Source".CREATEINSTREAM(lInStream);
      CREATE(lXmlDom);
      lXmlDom.load(lInStream);
      //lXmlDom.save('C:\Temp\Fusion.xml');
      lXmlNodeList := lXmlDom.getElementsByTagName('GetInterventionResult');
      lXmlDomElement := lXmlNodeList.item(0);

      //Grand compte
      lAttributeNode := lXmlDomElement.selectSingleNode('a:DonneurOrdreCodeGTA');
      lCorporateGTANo := lAttributeNode.text;
      IF NOT FUSIONInterfaceMgt.GetCorporateByGTAContact(lCorporateGTANo, lCorporateNo, lCorporateRegionCode) THEN
        lErrorText := STRSUBSTNO(ErrorText001, lCorporateGTANo);

      //controle addresse service header
      IF lErrorText = '' THEN BEGIN
        lXmlNodeList := lXmlDom.getElementsByTagName('a:Contact');
        TreatServHeaderAdd(lXmlNodeList, lServiceHeader, TRUE, lErrorText);
      END;

      //Creation/Modification contact
      IF lErrorText = '' THEN BEGIN
        TreatBeneficiaryContact(lXmlNodeList, lCorporateNo, lCorporateRegionCode, lBeneficiaryContact, lCorporateContact, lErrorText);
      END;

      IF lErrorText = '' THEN
       IF lBeneficiaryContact."No." = '' THEN
        lErrorText := ErrorText002;

      //Creation service
      IF lErrorText = '' THEN
        TreatService(lXmlDomElement, lServiceHeader, lBeneficiaryContact, lCorporateContact, lErrorText);

      //Creation addresse service header
      IF lErrorText = '' THEN
        TreatServHeaderAdd(lXmlNodeList, lServiceHeader, FALSE, lErrorText);

      //Notes d'honoraire
      IF lErrorText = '' THEN BEGIN
        lXmlNodeList := lXmlDom.getElementsByTagName('a:NoteHonoraire');
        TreatFeeNote(lServiceHeader, lXmlNodeList, lErrorText);
      END;

      //Intervention description
      IF lErrorText = '' THEN BEGIN
        lXmlNodeList := lXmlDom.getElementsByTagName('a:RapportExpertiseLigne');
        TreatInterventionDescrip(lServiceHeader, lXmlNodeList, lErrorText);

        lServiceHeader1.SETCURRENTKEY("Service No.");
        lServiceHeader1.SETRANGE("Service No.", lServiceHeader."Service No.");
        lServiceHeader1.SETRANGE("Fusion Service Status Created", TRUE);
        IF lServiceHeader1.FINDFIRST THEN BEGIN
          lXmlNodeList := lXmlDom.getElementsByTagName('a:rapportExpertise');
          lXmlDomElement := lXmlNodeList.item(0);
          lAttributeNode := lXmlDomElement.selectSingleNode('a:FranchiseAppliqu‚e');
          IF NOT ISCLEAR(lAttributeNode) THEN BEGIN
            IF lAttributeNode.text <> '' THEN BEGIN
              IF EVALUATE(lDec, lAttributeNode.text) THEN BEGIN
                IF lDec <> 0 THEN BEGIN
                  lServiceHeader1.VALIDATE("Appropriate Deductible Amount",
                    lServiceHeader1."Appropriate Deductible Amount"::Other);
                  lServiceHeader1.VALIDATE("Deductible Amount", lDec);
                  lServiceHeader1.MODIFY(TRUE);
                END ELSE BEGIN
                  lServiceHeader1.VALIDATE("Appropriate Deductible Amount",
                    lServiceHeader1."Appropriate Deductible Amount"::"No Deductible");
                  lServiceHeader1.MODIFY(TRUE);
                END;
              END ELSE BEGIN
                IF NOT EVALUATE(lDec, CONVERTSTR(lAttributeNode.text, '.', ',')) THEN
                  lErrorText := STRSUBSTNO(lErrorText001, lAttributeNode.text, 'FranchiseAppliqu‚e')
                ELSE BEGIN
                  IF lDec <> 0 THEN BEGIN
                    lServiceHeader1.VALIDATE("Appropriate Deductible Amount",
                      lServiceHeader1."Appropriate Deductible Amount"::Other);
                    lServiceHeader1.VALIDATE("Deductible Amount", lDec);
                    lServiceHeader1.MODIFY(TRUE);
                  END ELSE BEGIN
                    lServiceHeader1.VALIDATE("Appropriate Deductible Amount",
                      lServiceHeader1."Appropriate Deductible Amount"::"No Deductible");
                    lServiceHeader1.MODIFY(TRUE);
                  END;
                END;
              END;
            END;
          END;

          IF lServiceHeader1."Appropriate Deductible Amount" = lServiceHeader1."Appropriate Deductible Amount"::" " THEN BEGIN
            lServiceHeader1.VALIDATE("Appropriate Deductible Amount",
              lServiceHeader1."Appropriate Deductible Amount"::"No Deductible");
            lServiceHeader1.MODIFY(TRUE);
          END;

        END;
      END;

      //documents joints
      IF lErrorText = '' THEN BEGIN
        lXmlNodeList := lXmlDom.getElementsByTagName('a:PiŠceJointe');
        TreatDocAttachs(lServiceHeader, lXmlNodeList, lErrorText);
      END;
      //Commentaires
      IF lErrorText = '' THEN BEGIN
        lXmlNodeList := lXmlDom.getElementsByTagName('a:SuiviIntervention');
        TreatComments(lServiceHeader, lXmlNodeList, lErrorText);
      END;

      IF lErrorText <> '' THEN
        ERROR(lErrorText);

      lRecRef.GETTABLE(lServiceHeader);
      EAIRcvdMQBuffer.RecordId := lRecRef.RECORDID;
    END;

    PROCEDURE TreatService@1100281003(VAR pXmlDomElement@1100281004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";VAR pServiceHeader@1100281001 : Record 5900;pBeneficiaryContact@1100281000 : Record 5050;pCorporateContact@1100281022 : Record 5050;VAR pErrorText@1100281002 : Text[250]) : Boolean;
    VAR
      lAttributeNode@1100281003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lErrorText001@1100281010 : TextConst 'ENU="The service %1 existent. ";FRA=Le nø service Fusion %1 existe d‚j….';
      lErrorText002@1100281009 : TextConst 'ENU="The sinister %1 existent. ";FRA=Le nø sinistre %1 existe d‚j….';
      lErrorText003@1100281018 : TextConst 'ENU=Insert error in the Navison base.;FRA=Erreur de cr‚ation service dans la base Navision.';
      lErrorText007@1100281007 : TextConst 'ENU="The contact %1 is not a corporate. ";FRA=Le contact %1 n''est pas un grand compte.';
      lErrorText009@1100281006 : TextConst 'ENU=The sinister date is not valid.;FRA=La date de sinistre n''est pas valide.';
      lErrorText011@1100281005 : TextConst 'ENU="The service order type %1 nonexistent. ";FRA=Le type produit %1 n''existe pas.';
      lServiceHeader@1100281012 : Record 5900;
      lServiceHeader2@1100281026 : Record 5900;
      lServiceHeader3@1100281028 : Record 5900;
      lContact@1100281016 : Record 5050;
      lServOrderTypeTable@1100281015 : Record 5903;
      lService@1100281017 : Record 50066;
      lEAIPartnerCrossReference@1100281023 : Record 8016748;
      lServiceNo@1100281020 : Code[20];
      lFusionServNo@1100281011 : Code[40];
      lServiceOrderType@1100281008 : Code[40];
      lSinisterNo@1100281014 : Code[30];
      lSinisterDate@1100281013 : DateTime;
      lErrorText012@1100281019 : TextConst 'ENU=Le No. service SiTiers is not valid for then Fusion service code.;FRA=L''identifiant service SiTiers ne correspond pas le code service Fusion.';
      lErrorText013@1100281021 : TextConst 'ENU="The service %1 is not valid. ";FRA=Le nø service SiTiers %1 n''est pas valide.';
      lToCreate@1100281024 : Boolean;
      lInterfaceSetup@1100281025 : Record 50139;
      lTrayLineMgt@1100281027 : Codeunit 50050;
      lOldFusionServiceStatus@1100281029 : Text[50];
      lNewFusionServiceStatus@1100281030 : Text[50];
      lFusionType@1100281031 : Code[50];
      lFusionStatus@1100281033 : Record 50157;
      lErrorText014@1100281034 : TextConst 'ENU=The couple corporate %1 and service order type is not exist.;FRA=Le couple grand compte %1 et type produit %2 n''existe pas.';
      lProductCatalog@1100281035 : Record 50060;
      lFusionStatusText@1100281036 : Text[80];
      lFusionReference@1100281032 : Record 50164;
    BEGIN
      {
          <GetServiceResult xmlns:a="http://schemas.datacontract.org/2004/07/Fusion.EDI" xmlns:i="http://www.w3.org/2001/XMLSchema-instanc
      e"
      >
        <a:Archiv‚>false</a:Archiv‚>
        </a:Contacts>
        <a:DateInt‚grationOrdreMission>2010-09-14T13:29:56.59</a:DateInt‚grationOrdreMission>
        <a:DateSinistre>2010-05-17T00:00:00</a:DateSinistre>
        <a:DonneurOrdreCodeGTA>0001</a:DonneurOrdreCodeGTA>
        <a:FusionDossierId>a6bf5925-7620-4449-b2fd-4c8d3e7af62c</a:FusionDossierId>
        <a:IdentifiantServiceSiTiers i:nil="true" />
        <a:NatureSinistre>DEGATS DES EAUX</a:NatureSinistre>
        <a:Num‚roOM i:nil="true" />
        <a:Num‚roSinistre>102M31491R</a:Num‚roSinistre>
        <a:PiŠcesJointes />
        <a:StatutService>FinDeMission</a:StatutService>
        <a:Suivi />
        <a:TypeService>TELE-EXPERTISE</a:TypeService>
        <a:UtilisateurLoginWindows>IMH\jbaux</a:UtilisateurLoginWindows>
        </GetServiceResult>
      </GetServiceResponse>
      }

      //Service NO.
      lAttributeNode := pXmlDomElement.selectSingleNode('a:IdentifiantInterventionSiTiers');
      lServiceNo := lAttributeNode.text;
      //FusionService NO.
      lAttributeNode := pXmlDomElement.selectSingleNode('a:FusionDossierId');
      lFusionServNo := lAttributeNode.text;

      //le service d‚j… cr‚‚
      //--------?????????????-----------------changer le statut?????????????-----TODO----------
      IF lServiceNo <> '' THEN
        IF pServiceHeader.GET(pServiceHeader."Document Type"::Invoice,lServiceNo) THEN BEGIN
          //controle sur l'existance du service
          //<<IMH04
          //lServiceHeader.SETCURRENTKEY("GUID Fusion Code");
          //lServiceHeader.SETRANGE("GUID Fusion Code", lFusionServNo);
          //IF NOT lServiceHeader.ISEMPTY THEN BEGIN
          lFusionReference.SETCURRENTKEY("Fusion GUID");
          lFusionReference.SETRANGE("Source Table ID", DATABASE::"Service Header");
          lFusionReference.SETRANGE("Fusion GUID", lFusionServNo);
          IF NOT lFusionReference.ISEMPTY THEN BEGIN
            lFusionReference.FINDFIRST;
            lServiceHeader.GET(lServiceHeader."Document Type"::Invoice, lFusionReference."Source No.");
          //>>IMH04
            IF pServiceHeader."No." <> lServiceHeader."No." THEN BEGIN
              pErrorText := lErrorText012;
              EXIT(FALSE);
            END;
          END ELSE BEGIN
            pErrorText := lErrorText012;
            EXIT(FALSE);
          END;
          EXIT(TRUE);
        END ELSE BEGIN
          pErrorText := lErrorText013;
          EXIT(FALSE);
        END;

      //controle sur type produit

      lAttributeNode := pXmlDomElement.selectSingleNode('a:TypeServiceCode');
      lFusionType := lAttributeNode.text;
      lAttributeNode := pXmlDomElement.selectSingleNode('a:StatutService');
      lFusionStatusText := lAttributeNode.text;
      lServiceOrderType := lFusionStatus.GetServOrderType(lFusionType, lFusionStatusText, TRUE);  //IMH06

      //controle si le service exist pour le b‚n‚ficiaire + date d'‚v‚nement alors creation ligne produit pour le service trouv‚
      //sinon cr‚ation service + ligne produit
      lAttributeNode := pXmlDomElement.selectSingleNode('a:Num‚roSinistre');
      lSinisterNo := lAttributeNode.text;
      lAttributeNode := pXmlDomElement.selectSingleNode('a:DateSinistre');
      IF NOT ISCLEAR(lAttributeNode) THEN
        IF lAttributeNode.text <> '0001-01-01T00:00:00' THEN
          IF NOT EVALUATE(lSinisterDate, lAttributeNode.text, 9) THEN
            CLEAR(lSinisterDate);

      lService.SETCURRENTKEY("Contact No.", "Event Date");
      lService.SETRANGE("Contact No.", pBeneficiaryContact."No.");
      lService.SETRANGE("Event Date", DT2DATE(lSinisterDate));
      IF lService.ISEMPTY THEN BEGIN
        //controle date sinistre (Date ‚v‚nement)
        lService.VALIDATE("Contact No.", pBeneficiaryContact."No.");
        lService."Event Date" := DT2DATE(lSinisterDate);
        IF NOT lService.CheckEventDate THEN BEGIN
          pErrorText := lErrorText009;
          EXIT(FALSE);
        END;

        CLEAR(lService);
        //controler lServORderType dans les produits GC (et actif)
        IF NOT lProductCatalog.GET(pBeneficiaryContact."Corporate No.", lServiceOrderType) THEN BEGIN
          pErrorText := STRSUBSTNO(lErrorText014, pBeneficiaryContact."Corporate No.", lServiceOrderType);
          EXIT(FALSE);
        END ELSE BEGIN
          IF NOT lProductCatalog.Active THEN BEGIN
            pErrorText := STRSUBSTNO(lErrorText014, pBeneficiaryContact."Corporate No.", lServiceOrderType);
            EXIT(FALSE);
          END;
        END;

        pBeneficiaryContact.CreateService(lService, FALSE);
        lService.SetCallFrom(2); //IMH03.ST
        lService.VALIDATE("Reference No.", lSinisterNo);
        lService.VALIDATE("Event Date", DT2DATE(lSinisterDate));
        //<a:NatureSinistre>DEGATS DES EAUX</a:NatureSinistre>
        lAttributeNode := pXmlDomElement.selectSingleNode('a:NatureSinistreCode');
        //lService.VALIDATE("Event Nature",
        //  FUSIONInterfaceMgt.GetEventNatureByFusion(
        //    COPYSTR(lAttributeNode.text, 1, 50)));

        lEAIPartnerCrossReference.SETRANGE("Partner Code", EAIRcvdMQBuffer."EAI Partner Code");
        lEAIPartnerCrossReference.SETRANGE("Table ID", DATABASE::"Fault Reason Code");
        lEAIPartnerCrossReference.SETRANGE("Partner Reference", COPYSTR(lAttributeNode.text, 1, 30));
        IF lEAIPartnerCrossReference.FINDFIRST THEN
          lService.VALIDATE("Service Cause", lEAIPartnerCrossReference."Source No.");
        IF lService."Service Cause" = '' THEN
          lService.VALIDATE("Service Cause", InterfaceSetup."Fusion Default Service Cause");
        lService."Fusion Reference No." := EAIRcvdMQBuffer."Reference No.";
        lService.MODIFY(TRUE);
      END ELSE
        lService.FINDFIRST;

      //lServiceHeader.SETCURRENTKEY("GUID Fusion Code");
      //lServiceHeader.SETRANGE("GUID Fusion Code", lFusionServNo);
      //----------????????????MAJ????????????TODO----------------
      lToCreate := TRUE;

      //IF lServiceHeader.FINDFIRST THEN
      //  lToCreate := FALSE;

      //<<IMH04
      lFusionReference.SETCURRENTKEY("Fusion GUID");
      lFusionReference.SETRANGE("Source Table ID", DATABASE::"Service Header");
      lFusionReference.SETRANGE("Fusion GUID", lFusionServNo);
      IF NOT lFusionReference.ISEMPTY THEN BEGIN
        lFusionReference.FINDFIRST;
        lServiceHeader.GET(lServiceHeader."Document Type"::Invoice, lFusionReference."Source No.");
        lToCreate := FALSE;
      END;
      //>>IMH04

      lInterfaceSetup.GET;
      IF lToCreate THEN BEGIN
        //lServiceHeader."GUID Fusion Code" := lFusionServNo;    //IMH04

        lService.SetCallFrom(2); //IMH03.ST

        IF NOT lService.CreateServiceHeader(lServiceHeader, lServiceOrderType) THEN BEGIN
          pErrorText := lErrorText003;
          EXIT(FALSE);
        END;
        lServiceHeader.VALIDATE("Corporate Contact No.", pCorporateContact."No.");
        lServiceHeader."Fusion Service" := TRUE;
        lServiceHeader."Intervention Allowed" := FALSE;
        lServiceHeader."Fusion Reference No." := EAIRcvdMQBuffer."Reference No.";
        lServiceHeader.VALIDATE(Requisitioner, lInterfaceSetup."Fusion Default Requisitioner");
        lServiceHeader.VALIDATE(Channel, lInterfaceSetup."Fusion Service Channel");
        lFusionReference.CreateByServiceHeader(lServiceHeader, lFusionServNo);//IMH04
      END;

      lAttributeNode := pXmlDomElement.selectSingleNode('a:NomDernierExpert');
      pServiceHeader.TeleExpert := COPYSTR(lAttributeNode.text, 1, MAXSTRLEN(pServiceHeader.TeleExpert));


      lAttributeNode := pXmlDomElement.selectSingleNode('a:StatutService');
      lOldFusionServiceStatus := lServiceHeader."Fusion Service Status";
      lServiceHeader."Fusion Service Status" := lAttributeNode.text;
      //<<IMH06
      //lServiceOrderType := lFusionStatus.GetServOrderType(lFusionType, lServiceHeader."Fusion Service Status");
      lServiceOrderType := lFusionStatus.GetServOrderType(lFusionType, lServiceHeader."Fusion Service Status", TRUE);  //IMH06
      //lServiceHeader."New Service Order Type" := lFusionStatus.GetServOrderType(lFusionType, lServiceHeader."Fusion Service Status");
      lServiceHeader."New Service Order Type" :=
        lFusionStatus.GetServOrderType(lFusionType, lServiceHeader."Fusion Service Status", TRUE);
      //>>IMH06
      IF lServiceHeader."New Service Order Type" = lServiceHeader."Service Order Type" THEN
        lServiceHeader."New Service Order Type" := '';
      IF lServiceHeader."New Service Order Type" <> '' THEN BEGIN
        //controler lServORderType dans les produits GC (et actif)
        IF NOT lProductCatalog.GET(lServiceHeader."Corporate No.", lServiceHeader."New Service Order Type") THEN BEGIN
          pErrorText := STRSUBSTNO(lErrorText014, lServiceHeader."Corporate No.", lServiceHeader."New Service Order Type");
          EXIT(FALSE);
        END ELSE BEGIN
          IF NOT lProductCatalog.Active THEN BEGIN
            pErrorText := STRSUBSTNO(lErrorText014, lServiceHeader."Corporate No.", lServiceHeader."New Service Order Type");
            EXIT(FALSE);
          END;
        END;
      END;
      lServiceHeader.MODIFY(TRUE);

      //IF lServiceHeader."Fusion Service Status" <> lOldFusionServiceStatus THEN BEGIN
        //Changement statut service fusion -----TODO ---- Montants … r‚cup‚rer -------
      //  lFUSIONInvoiceMgt.ChangeStatusFusionService(lServiceHeader,lServiceHeader."Fusion Service Status", 0, 0, 0);

        // Cr‚ation d'un service REN si on arrive … un statut particulier
        IF lInterfaceSetup."Fusion Create Service Status 1" <> '' THEN
          IF lServiceHeader."Fusion Service Status" = lInterfaceSetup."Fusion Create Service Status 1" THEN BEGIN
            lServiceHeader3.SETCURRENTKEY("Service No.");
            lServiceHeader3.SETRANGE("Service No.", lServiceHeader."Service No.");
            lServiceHeader3.SETRANGE("Fusion Service Status Created", TRUE);
            IF lServiceHeader3.ISEMPTY THEN BEGIN
              lInterfaceSetup.TESTFIELD("Fusion Crt. Serv. Ord. Type 1");
              lService.SetCallFrom(2); //IMH03.ST
              IF NOT lService.CreateServiceHeader(lServiceHeader2, lInterfaceSetup."Fusion Crt. Serv. Ord. Type 1") THEN BEGIN
                pErrorText := lErrorText003;
                EXIT(FALSE);
              END;

              lServiceHeader2.VALIDATE("Corporate Contact No.", pCorporateContact."No.");
              lServiceHeader2."Fusion Service Status Created" := TRUE;
              lServiceHeader2."Fusion Service" := TRUE;
              lServiceHeader2.VALIDATE(Requisitioner, lInterfaceSetup."Fusion Requis. Serv. Ord. 1");
              lServiceHeader2.VALIDATE(Channel, lInterfaceSetup."Fusion Service Channel");
              lServiceHeader2.MODIFY(TRUE);
              //lInterfaceSetup.TESTFIELD("Fusion Crt. Serv. Team Code");
              //lInterfaceSetup.TESTFIELD("Fusion Crt. Serv. Task Code");
              //IF lInterfaceSetup."Fusion Crt. Serv. Team Code" = '' THEN
              //  lInterfaceSetup."Fusion Crt. Serv. Team Code" := lServiceHeader2."Default Team Code";
              IF lInterfaceSetup."Fusion Crt. Serv. Team Code" <> '' THEN
                lTrayLineMgt.CreateTLFromServHeader(lServiceHeader2,
                    lInterfaceSetup."Fusion Crt. Serv. Team Code", lInterfaceSetup."Fusion Crt. Serv. Task Code", FALSE);
            END;
          END;
      //END;

      pServiceHeader := lServiceHeader;
      EXIT(TRUE);
    END;

    PROCEDURE TreatBeneficiaryContact@1100281002(VAR pXmlNodeContactList@1100281000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNodeList";pCorporateNo@1100281007 : Code[20];pCorporateRegionCode@1100281006 : Code[10];VAR pBeneficiaryContact@1100281005 : Record 5050;VAR pCorporateContact@1100281026 : Record 5050;VAR pErrorText@1100281015 : Text[250]) : Boolean;
    VAR
      lAttribute@1100281004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF83-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNamedNodeMap";
      lXmlDomElement@1100281003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
      lAttributeNode@1100281002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lContact@1100281008 : Record 5050;
      lContact2@1100281012 : Record 5050;
      lPostCodeTable@1100281010 : Record 225;
      lCust@1100281020 : Record 18;
      lCompanyInformation@1100281032 : Record 79;
      lCustContactNo@1100281021 : Code[20];
      lContactNo@1100281014 : Code[20];
      lContactGUID@1100281016 : Code[40];
      lTypeContact@1100281018 : 'Beneficiary,Corporate Contact';
      i@1100281001 : Integer;
      lErrorText008@1100281009 : TextConst 'ENU="The contact %1 is not a beneficiary. ";FRA=Le contact %1 n''est pas un b‚n‚ficiaire.';
      lErrorText009@1100281011 : TextConst 'ENU="The contact %1 is not a beneficiary. ";FRA=L''identifiant contact SiTiers %1 n''est pas valide.';
      lErrorText010@1100281013 : TextConst 'ENU=Le No. contact SiTiers is not valid for then Fusion GTA code.;FRA=L''identifiant contact SiTiers ne correspond pas le code GTA Fusion.';
      lErrorText011@1100281017 : TextConst 'ENU="The corporate of beneficiary %1 is not valid. ";FRA=Le donneur d''ordre du b‚n‚ficiaire %1 n''est pas valide.';
      lErrorText012@1100281019 : TextConst 'ENU="The corporate of manager %1 is not valid. ";FRA=Le gestionnaire donneur d''ordre %1 n''est pas valide.';
      lPhoneNo1@1100281022 : Text[30];
      lPhoneNo2@1100281023 : Text[30];
      lMobilePhoneNo1@1100281024 : Text[30];
      lMobilePhoneNo2@1100281025 : Text[30];
      lPostCode@1100281029 : Code[20];
      lCity@1100281028 : Text[30];
      lAddress@1100281027 : Text[250];
      lFaxNo@1100281030 : Text[30];
      lSkipModif@1100281031 : Boolean;
      lName@1100281033 : Text[50];
      lFirstName@1100281034 : Text[50];
      lBeneficiairy@1100281035 : Code[30];
      lInterfaceReference@1100281036 : Record 50164;
    BEGIN
      {
      <a:Contact>
        <a:AdresseBoitePostale i:nil="true" />
        <a:AdresseCodePostal>27930</a:AdresseCodePostal>
        <a:AdresseCompl‚ment>12 Rue des noyers</a:AdresseCompl‚ment>
        <a:AdresseLocalit‚>EMALLEVILLE</a:AdresseLocalit‚>
        <a:AdresseNomVoie i:nil="true" />
        <a:AdresseNumVoie i:nil="true" />
        <a:AdresseTypeVoie i:nil="true" />
        <a:Civilit‚>Monsieur</a:Civilit‚>
        <a:Email i:nil="true" />
        <a:FusionActeurId>4ecfff11-bcc2-4e4f-ade5-d1c23acde852</a:FusionActeurId>
        <a:GenreContact>PersonnePhysique</a:GenreContact>
        <a:IdentifiantContactSiTiers i:nil="true" />
        <a:NomRaisonSociale>BOUDAILLIEZ</a:NomRaisonSociale>
        <a:Pr‚nom>C‚dric</a:Pr‚nom>
        <a:TypeContact>B‚n‚ficiaire</a:TypeContact>
        <a:T‚l‚copie i:nil="true" />
        <a:T‚l‚phonProfessionnePortable i:nil="true" />
        <a:T‚l‚phonePersonnelFixe>02 32 07 08 92</a:T‚l‚phonePersonnelFixe>
        <a:T‚l‚phonePersonnelPortable>06 89 62 85 71</a:T‚l‚phonePersonnelPortable>
        <a:T‚l‚phoneProfessionnelFixe i:nil="true" />
      </a:Contact>
      }

      FOR i := 0 TO pXmlNodeContactList.length()-1 DO BEGIN
        lSkipModif := FALSE;
        lXmlDomElement := pXmlNodeContactList.item(i);
        lAttributeNode := lXmlDomElement.selectSingleNode('a:TypeContact');
        IF lAttributeNode.text IN ['B‚n‚ficiaire', 'GestionnaireDonneurOrdre'] THEN BEGIN
          CASE lAttributeNode.text OF
            'B‚n‚ficiaire' : lTypeContact := lTypeContact::Beneficiary;
            'GestionnaireDonneurOrdre' : lTypeContact := lTypeContact::"Corporate Contact";
          END;
          //Controle sur le contact
          CLEAR(lContact);
          CLEAR(lContact2);
          lCustContactNo := '';
          lContact.INIT;
          lContact."No." := '';
          lAttributeNode := lXmlDomElement.selectSingleNode('a:IdentifiantContactSiTiers');
          lContactNo := lAttributeNode.text;
          lAttributeNode := lXmlDomElement.selectSingleNode('a:FusionActeurId');
          lContactGUID := lAttributeNode.text;

          IF lContactNo <> '' THEN BEGIN
            IF NOT lContact.GET(lContactNo) THEN BEGIN
              pErrorText := STRSUBSTNO(lErrorText009, lContactNo);
              EXIT(FALSE);
            END;

            IF lTypeContact = lTypeContact::Beneficiary THEN BEGIN
              IF lContact."Service Contact" <> lContact."Service Contact"::Beneficiary THEN BEGIN
                pErrorText := STRSUBSTNO(lErrorText008, lContactGUID);
                EXIT(FALSE);
              END;
              {
              IF (lContact."Corporate No." <> pCorporateNo) OR (pCorporateRegionCode <> lContact."Corporate Region Code") THEN BEGIN
                pErrorText := STRSUBSTNO(lErrorText011, lContactGUID);
                EXIT(FALSE);
              END;
              }
            END;
            IF lTypeContact = lTypeContact::"Corporate Contact" THEN BEGIN
              IF lContact.Type <> lContact.Type::Person THEN BEGIN
                pErrorText := STRSUBSTNO(lErrorText012, lContactGUID);
                EXIT(FALSE);
              END;
              {
              IF lCust.GET(pCorporateNo) THEN
                lCust.GetContactNo(lCustContactNo);
              IF lContact."Company No." <> lCustContactNo THEN BEGIN
                pErrorText := STRSUBSTNO(lErrorText012, lContactGTACode);
                EXIT(FALSE);
              END;
              IF pCorporateRegionCode <> lContact."Corporate Region Code" THEN BEGIN
                pErrorText := STRSUBSTNO(lErrorText012, lContactGTACode);
                EXIT(FALSE);
              END;
              }
            END;
            //<<IMH05
            {
            lContact2.RESET;
            lContact2.SETCURRENTKEY("GUID Fusion Code");
            lContact2.SETRANGE("GUID Fusion Code", lContactGUID);
            IF lContact2.FINDFIRST THEN BEGIN
              IF lContact."No." <> lContact2."No." THEN BEGIN
                pErrorText := lErrorText010;
                EXIT(FALSE);
              END;
            END ELSE BEGIN
              IF lContactGUID <> '' THEN BEGIN
                lContact."GUID Fusion Code" := lContactGUID;
                lContact.MODIFY(FALSE);
              END;
            END;
            }
            IF lInterfaceReference.GetContactByGUID(lContact2, lContactGUID) THEN BEGIN
              IF lContact."No." <> lContact2."No." THEN BEGIN
                pErrorText := lErrorText010;
                EXIT(FALSE);
              END;
            END ELSE BEGIN
              IF lContactGUID <> '' THEN BEGIN
                lInterfaceReference.CreateByContact(lContact, lContactGUID);
              END;
            END;
            //>>IMH05
            CASE lTypeContact OF
              lTypeContact::Beneficiary : pBeneficiaryContact := lContact;
              lTypeContact::"Corporate Contact" : pCorporateContact := lContact;
            END;
            lSkipModif := TRUE;
          END ELSE BEGIN
            CLEAR(lContact);
            lContact.RESET;
            //<<IMH05
            {
            lContact.SETCURRENTKEY("GUID Fusion Code");
            lContact.SETRANGE("GUID Fusion Code", lContactGUID);
            IF lContact.ISEMPTY THEN BEGIN
            }
            IF NOT lInterfaceReference.GetContactByGUID(lContact, lContactGUID) THEN BEGIN
            //>>IMH05
              //<a:NomRaisonSociale>BOUDAILLIEZ</a:NomRaisonSociale>
              lAttributeNode := lXmlDomElement.selectSingleNode('a:NomRaisonSociale');
              lName := COPYSTR(lAttributeNode.text, 1, MAXSTRLEN(lContact.Surname));
              //<a:Pr‚nom>C‚dric</a:Pr‚nom>
              lAttributeNode := lXmlDomElement.selectSingleNode('a:Pr‚nom');
              lFirstName := COPYSTR(lAttributeNode.text, 1, MAXSTRLEN(lContact."First Name"));
              lAttributeNode := lXmlDomElement.selectSingleNode('a:AdresseCodePostal');
              lPostCode := COPYSTR(lAttributeNode.text, 1, 20);
              //<a:AdresseLocalit‚>EMALLEVILLE</a:AdresseLocalit‚>
              lAttributeNode := lXmlDomElement.selectSingleNode('a:AdresseLocalit‚');
              lCity := COPYSTR(lAttributeNode.text, 1, 30);
              //Num‚roSoci‚taire
              IF lTypeContact = lTypeContact::Beneficiary THEN BEGIN
                lAttributeNode := lXmlDomElement.selectSingleNode('a:Num‚roSoci‚taire');
                lBeneficiairy := COPYSTR(lAttributeNode.text, 1, MAXSTRLEN(lContact."Member No."));
              END;
              CASE lTypeContact OF
                lTypeContact::Beneficiary : BEGIN
      //<<IMH03.ST
                  IF FUSIONInterfaceMgt.FindMemberContact(lBeneficiairy, pCorporateNo, lContact) THEN BEGIN
                    IF lContact."Service Contact" = lContact."Service Contact"::Beneficiary THEN BEGIN
                      pBeneficiaryContact := lContact;
                      lSkipModif := TRUE;
                    END;
                  END;
      //>>IMH03.ST
                  IF FUSIONInterfaceMgt.GetContact(1, lName, lFirstName, lPostCode, lCity, lContact) THEN BEGIN
                    IF lContact."Service Contact" = lContact."Service Contact"::Beneficiary THEN BEGIN
                      pBeneficiaryContact := lContact;
                      lSkipModif := TRUE;
                    END;
                  END;
                END;
                lTypeContact::"Corporate Contact" : BEGIN
                  IF FUSIONInterfaceMgt.GetContact(2, lName, lFirstName, lPostCode, lCity, lContact) THEN BEGIN
                    IF lContact.Type = lContact.Type::Person THEN BEGIN
                      pCorporateContact := lContact;
                      lSkipModif := TRUE;
                    END;
                  END;
                END;
              END;

              IF NOT lSkipModif THEN BEGIN
                IF lTypeContact = lTypeContact::"Corporate Contact" THEN BEGIN
                  lContact.Type := lContact.Type::Person;
                  IF lCust.GET(pCorporateNo) THEN
                    lCust.GetContactNo(lCustContactNo);
                  lContact.VALIDATE("Company No.",lCustContactNo);
      //<<IMH02.ST
                  IF lContact."Company No." = '' THEN
                    lContact.FIELDERROR("Company No.");
      //>>IMH02.ST
                  lContact.INSERT(TRUE);
                  lContact."Correspondence Type" := lContact."Correspondence Type"::" ";
                  lContact.VALIDATE("Corporate No.", pCorporateNo);
                  lContact.VALIDATE("Corporate Region Code", pCorporateRegionCode);
                END;

                IF lTypeContact = lTypeContact::Beneficiary THEN BEGIN
                  lContact.Type := lContact.Type::Company; //IMH02.ST
                  lContact.INSERT(TRUE);
                  lContact."Correspondence Type" := lContact."Correspondence Type"::" ";
                  lContact.VALIDATE("Service Contact", lContact."Service Contact"::Beneficiary);
                  lContact.VALIDATE("Corporate No.", pCorporateNo);
                  lContact.VALIDATE("Corporate Region Code", pCorporateRegionCode);
                  lContact.VALIDATE("Member No.", lBeneficiairy);
                END;
              END;
            END ELSE BEGIN
              //pas de modification
              //lContact.FINDFIRST;
              CASE lTypeContact OF
                lTypeContact::Beneficiary : pBeneficiaryContact := lContact;
                lTypeContact::"Corporate Contact" : pCorporateContact := lContact;
              END;
              lSkipModif := TRUE;
              //EXIT(TRUE);
            END;
          END;

          IF NOT lSkipModif THEN BEGIN
            IF NOT GetAddress(lXmlDomElement, lPostCode, lCity, lAddress, pErrorText) THEN
              EXIT(FALSE);

            lContact."Post Code" := lPostCode;
            lContact.City := lCity;
            lCompanyInformation.GET;
            lContact."Country/Region Code" := lCompanyInformation."Country/Region Code";

            IF lAddress <> '' THEN BEGIN
              lContact.VALIDATE(Address, COPYSTR(lAddress, 1, MAXSTRLEN(lContact.Address)));
              //<a:AdresseCompl‚ment>12 Rue des noyers</a:AdresseCompl‚ment>
              lAttributeNode := lXmlDomElement.selectSingleNode('a:AdresseCompl‚ment');
              lContact.VALIDATE("Address 2", COPYSTR(lAttributeNode.text, 1, MAXSTRLEN(lContact."Address 2")));
            END ELSE BEGIN
              //<a:AdresseCompl‚ment i:nil="true" />
              lAttributeNode := lXmlDomElement.selectSingleNode('a:AdresseCompl‚ment');
              lContact.VALIDATE(Address, COPYSTR(lAttributeNode.text, 1, MAXSTRLEN(lContact.Address)));
            END;

            lContact."Geo. Reference Code" := lPostCodeTable.GetReferenceGeoCode(lContact."Post Code",lContact.City);

            //<a:Civilit‚>Monsieur</a:Civilit‚>
            lAttributeNode := lXmlDomElement.selectSingleNode('a:Civilit‚');
            lContact."Salutation Code" := FUSIONInterfaceMgt.GetSalutationByFusion(lAttributeNode.text);

            //<a:Email i:nil="true" />
            lAttributeNode := lXmlDomElement.selectSingleNode('a:Email');
            lContact."Correspondence Type" := lContact."Correspondence Type"::" ";
            lContact.VALIDATE("E-Mail", COPYSTR(lAttributeNode.text, 1, MAXSTRLEN(lContact."E-Mail")));

            //<a:NomRaisonSociale>BOUDAILLIEZ</a:NomRaisonSociale>
            lAttributeNode := lXmlDomElement.selectSingleNode('a:NomRaisonSociale');
            lContact.VALIDATE(Surname, COPYSTR(lAttributeNode.text, 1, MAXSTRLEN(lContact.Surname)));
            //lContact.VALIDATE(Name, COPYSTR(lAttributeNode.text, 1, MAXSTRLEN(lContact.Name)));

            //<a:Pr‚nom>C‚dric</a:Pr‚nom>
            lAttributeNode := lXmlDomElement.selectSingleNode('a:Pr‚nom');
            lContact.VALIDATE("First Name", COPYSTR(lAttributeNode.text, 1, MAXSTRLEN(lContact."First Name")));

            //<a:T‚l‚copie i:nil="true" />
            lAttributeNode := lXmlDomElement.selectSingleNode('a:T‚l‚copie');
            lFaxNo := COPYSTR(lAttributeNode.text, 1, MAXSTRLEN(lContact."Fax No."));
            IF lFaxNo <> '' THEN
              IF ToolsMgt.TestPhoneNo('',lFaxNo) THEN
                lContact.VALIDATE("Fax No.", lFaxNo)
              ELSE
                lContact."Fax No." := lFaxNo;

            //lContact.VALIDATE("Fax No.", COPYSTR(lAttributeNode.text, 1, MAXSTRLEN(lContact."Fax No.")));

            //<a:T‚l‚phonePersonnelFixe>02 32 07 08 92</a:T‚l‚phonePersonnelFixe>
            lAttributeNode := lXmlDomElement.selectSingleNode('a:T‚l‚phonePersonnelFixe');
            lPhoneNo1 := COPYSTR(lAttributeNode.text, 1, MAXSTRLEN(lContact."Phone No."));

            //<a:T‚l‚phoneProfessionnelFixe i:nil="true" />
            lAttributeNode := lXmlDomElement.selectSingleNode('a:T‚l‚phoneProfessionnelFixe');
            lPhoneNo2 := COPYSTR(lAttributeNode.text, 1, MAXSTRLEN(lContact."Phone No. 2"));

            //<a:T‚l‚phonePersonnelPortable>06 89 62 85 71</a:T‚l‚phonePersonnelPortable>
            lAttributeNode := lXmlDomElement.selectSingleNode('a:T‚l‚phonePersonnelPortable');
            lMobilePhoneNo1 := COPYSTR(lAttributeNode.text, 1, MAXSTRLEN(lContact."Mobile Phone No."));

            //<a:T‚l‚phonProfessionnePortable i:nil="true" />
            lAttributeNode := lXmlDomElement.selectSingleNode('a:T‚l‚phonProfessionnePortable');
            lMobilePhoneNo2 := COPYSTR(lAttributeNode.text, 1, MAXSTRLEN(lContact."Mobile Phone No. 2"));

            IF lPhoneNo1 = '' THEN BEGIN
              lPhoneNo1 := lPhoneNo2;
              lPhoneNo2 := '';
            END;
            IF lMobilePhoneNo1 = '' THEN BEGIN
              lMobilePhoneNo1 := lMobilePhoneNo2;
              lMobilePhoneNo2 := '';
            END;

            IF lPhoneNo1 <> '' THEN
              IF ToolsMgt.TestPhoneNo('',lPhoneNo1) THEN
                lContact.VALIDATE("Phone No.", lPhoneNo1)
              ELSE
                lContact."Phone No." := lPhoneNo1;

            IF lPhoneNo2 <> '' THEN
              IF ToolsMgt.TestPhoneNo('',lPhoneNo2) THEN
                lContact.VALIDATE("Phone No. 2", lPhoneNo2)
              ELSE
                lContact."Phone No. 2" := lPhoneNo2;

            IF lMobilePhoneNo1 <> '' THEN
              IF ToolsMgt.TestPhoneNo('',lMobilePhoneNo1) THEN
                lContact.VALIDATE("Mobile Phone No.", lMobilePhoneNo1)
              ELSE
                lContact."Mobile Phone No." := lMobilePhoneNo1;

            IF lMobilePhoneNo2 <> '' THEN
              IF ToolsMgt.TestPhoneNo('',lMobilePhoneNo2) THEN
                lContact.VALIDATE("Mobile Phone No. 2", lMobilePhoneNo2)
              ELSE
                lContact."Mobile Phone No. 2" := lMobilePhoneNo2;

            //lContact."GUID Fusion Code" := lContactGUID;
            lContact.MODIFY(TRUE);
            lInterfaceReference.CreateByContact(lContact, lContactGUID);   //IMH05
            CASE lTypeContact OF
              lTypeContact::Beneficiary : pBeneficiaryContact := lContact;
              lTypeContact::"Corporate Contact" : pCorporateContact := lContact;
            END;
          END;
        END;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE TreatServHeaderAdd@1100281017(VAR pXmlNodeContactList@1100281000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNodeList";pServiceHeader@1100281005 : Record 5900;pToCheck@1100281018 : Boolean;VAR pErrorText@1100281004 : Text[250]) : Boolean;
    VAR
      lXmlDomElement@1100281003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
      lAttributeNode@1100281002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lServiceHeaderAddress@1100281006 : Record 50068;
      lServiceHeaderAddress2@1100281008 : Record 50068;
      lPostCodeTable@1100281012 : Record 225;
      lCompanyInformation@1100281023 : Record 79;
      lServHeaderAddKeysText@1100281007 : Text[80];
      lContactGTACode@1100281009 : Code[40];
      i@1100281001 : Integer;
      lErrorText009@1100281011 : TextConst 'ENU="The contact %1 is not a beneficiary. ";FRA=L''identifiant contact SiTiers %1 n''est pas valide.';
      lErrorText010@1100281010 : TextConst 'ENU=Le No. contact SiTiers is not valid for then Fusion GTA code.;FRA=L''identifiant contact SiTiers ne correspond pas le code GTA Fusion.';
      lPostCode@1100281015 : Code[20];
      lCity@1100281014 : Text[30];
      lAddress@1100281013 : Text[250];
      lPhoneNo1@1100281020 : Text[30];
      lPhoneNo2@1100281019 : Text[30];
      lMobilePhoneNo1@1100281017 : Text[30];
      lMobilePhoneNo2@1100281016 : Text[30];
      lFaxNo@1100281021 : Text[30];
      lSkipModif@1100281022 : Boolean;
      lInterfaceReference@1100281024 : Record 50164;
    BEGIN
      FOR i := 0 TO pXmlNodeContactList.length()-1 DO BEGIN
        lSkipModif := FALSE;
        lXmlDomElement := pXmlNodeContactList.item(i);
        lAttributeNode := lXmlDomElement.selectSingleNode('a:TypeContact');
        IF lAttributeNode.text IN ['Tiers', 'Expert', 'inconnu'] THEN BEGIN
          //Controle
          lServiceHeaderAddress.INIT;
          lServiceHeaderAddress."Service Header No." := pServiceHeader."No.";
          CASE lAttributeNode.text OF
            'Tiers', 'Inconnu' : lServiceHeaderAddress."Address Type" := lServiceHeaderAddress."Address Type"::"Annexe Contact";
            'Expert' : lServiceHeaderAddress."Address Type" := lServiceHeaderAddress."Address Type"::"Expert Contact";
          END;
          lServiceHeaderAddress."Address No." := 0;

          lAttributeNode := lXmlDomElement.selectSingleNode('a:IdentifiantContactSiTiers');
          lServHeaderAddKeysText := lAttributeNode.text;
          lAttributeNode := lXmlDomElement.selectSingleNode('a:FusionActeurId');
          lContactGTACode := lAttributeNode.text;

          IF lServHeaderAddKeysText <> '' THEN BEGIN
            IF NOT FUSIONInterfaceMgt.GetServHeaderAddByKey(lServHeaderAddKeysText, lServiceHeaderAddress) THEN BEGIN
              pErrorText := STRSUBSTNO(lErrorText009, lServHeaderAddKeysText);
              EXIT(FALSE);
            END;
            //<<IMH05
            {
            lServiceHeaderAddress2.RESET;
            lServiceHeaderAddress2.SETCURRENTKEY("GUID Fusion Code");
            lServiceHeaderAddress2.SETRANGE("GUID Fusion Code", lContactGTACode);
            IF lServiceHeaderAddress2.FINDFIRST THEN BEGIN
              IF (lServiceHeaderAddress."Service Header No." <> lServiceHeaderAddress2."Service Header No.")
                  OR (lServiceHeaderAddress."Address Type" <> lServiceHeaderAddress2."Address Type")
                  OR (lServiceHeaderAddress."Address No." <> lServiceHeaderAddress2."Address No.") THEN BEGIN
                pErrorText := lErrorText010;
                EXIT(FALSE);
              END;
            END ELSE BEGIN
              lServiceHeaderAddress."GUID Fusion Code" := lContactGTACode;
              lServiceHeaderAddress.MODIFY(FALSE);
            END;
            }
            IF lInterfaceReference.GetServHeaderAddByGUID(lServiceHeaderAddress2, lContactGTACode) THEN BEGIN
              IF (lServiceHeaderAddress."Service Header No." <> lServiceHeaderAddress2."Service Header No.")
                  OR (lServiceHeaderAddress."Address Type" <> lServiceHeaderAddress2."Address Type")
                  OR (lServiceHeaderAddress."Address No." <> lServiceHeaderAddress2."Address No.") THEN BEGIN
                pErrorText := lErrorText010;
                EXIT(FALSE);
              END;
            END ELSE BEGIN
              lInterfaceReference.CreateByServHeaderAdd(lServiceHeaderAddress, lContactGTACode);
            END;
            //>>IMH05
            lSkipModif := TRUE;

          END ELSE BEGIN
            //<<IMH05
            {
            lServiceHeaderAddress2.RESET;
            lServiceHeaderAddress2.SETCURRENTKEY("GUID Fusion Code");
            lServiceHeaderAddress2.SETRANGE("GUID Fusion Code", lContactGTACode);
            IF lServiceHeaderAddress2.ISEMPTY THEN BEGIN
            }
            CLEAR(lServiceHeaderAddress2);
            lServiceHeaderAddress2.RESET;
            IF NOT lInterfaceReference.GetServHeaderAddByGUID(lServiceHeaderAddress2, lContactGTACode) THEN BEGIN
              IF NOT pToCheck THEN BEGIN
                lServiceHeaderAddress.INSERT(TRUE);
                lServiceHeaderAddress.RESET;
              END;
            END ELSE BEGIN
              //IF NOT pToCheck THEN
                //pas de modification
                lSkipModif := TRUE;
                //EXIT(TRUE);
              //lServiceHeaderAddress2.FINDFIRST;
              lServiceHeaderAddress := lServiceHeaderAddress2;
            END;
          END;

          IF NOT lSkipModif THEN BEGIN
            IF NOT GetAddress(lXmlDomElement, lPostCode, lCity, lAddress, pErrorText) THEN
              EXIT(FALSE);

            lServiceHeaderAddress."Post Code" := lPostCode;
            lServiceHeaderAddress.City := lCity;
            lCompanyInformation.GET;
            lServiceHeaderAddress."Country/Region Code" := lCompanyInformation."Country/Region Code";

            IF lAddress <> '' THEN
              lServiceHeaderAddress.VALIDATE(Address, COPYSTR(lAddress, 1, MAXSTRLEN(lServiceHeaderAddress.Address)))
            ELSE BEGIN
              //<a:AdresseBoitePostale i:nil="true" />
              lAttributeNode := lXmlDomElement.selectSingleNode('a:AdresseBoitePostale');
              lServiceHeaderAddress.VALIDATE(Address, COPYSTR(lAttributeNode.text, 1, MAXSTRLEN(lServiceHeaderAddress.Address)));
            END;

            //<a:AdresseCompl‚ment>12 Rue des noyers</a:AdresseCompl‚ment>
            lAttributeNode := lXmlDomElement.selectSingleNode('a:AdresseCompl‚ment');
            lServiceHeaderAddress.VALIDATE("Address 2", COPYSTR(lAttributeNode.text, 1, MAXSTRLEN(lServiceHeaderAddress."Address 2")));
            lServiceHeaderAddress."Geo. Reference Code" :=
              lPostCodeTable.GetReferenceGeoCode(lServiceHeaderAddress."Post Code",lServiceHeaderAddress.City);


            //<a:Civilit‚>Monsieur</a:Civilit‚>
            lAttributeNode := lXmlDomElement.selectSingleNode('a:Civilit‚');
            lServiceHeaderAddress."Salutation Code" := FUSIONInterfaceMgt.GetSalutationByFusion(lAttributeNode.text);

            //<a:Email i:nil="true" />
            //lAttributeNode := lXmlDomElement.selectSingleNode('a:Email');
            //lServiceHeaderAddress.VALIDATE("E-Mail", COPYSTR(lAttributeNode.text, 1, MAXSTRLEN(lServiceHeaderAddress."E-Mail")));

            //<a:NomRaisonSociale>BOUDAILLIEZ</a:NomRaisonSociale>
            lAttributeNode := lXmlDomElement.selectSingleNode('a:NomRaisonSociale');
            lServiceHeaderAddress.VALIDATE(Name, COPYSTR(lAttributeNode.text, 1, MAXSTRLEN(lServiceHeaderAddress.Name)));

            //<a:Pr‚nom>C‚dric</a:Pr‚nom>
            lAttributeNode := lXmlDomElement.selectSingleNode('a:Pr‚nom');
            lServiceHeaderAddress."First Name" := COPYSTR(lAttributeNode.text, 1, MAXSTRLEN(lServiceHeaderAddress."First Name"));

            //<a:T‚l‚copie i:nil="true" />
            lAttributeNode := lXmlDomElement.selectSingleNode('a:T‚l‚copie');
            //lServiceHeaderAddress.VALIDATE("Fax No.", COPYSTR(lAttributeNode.text, 1, MAXSTRLEN(lServiceHeaderAddress."Fax No.")));
            lFaxNo := COPYSTR(lAttributeNode.text, 1, MAXSTRLEN(lServiceHeaderAddress."Fax No."));
            IF lFaxNo <> '' THEN
              IF ToolsMgt.TestPhoneNo('',lFaxNo) THEN
                lServiceHeaderAddress.VALIDATE("Fax No.", lFaxNo)
              ELSE
                lServiceHeaderAddress."Fax No." := lFaxNo;


            //<a:T‚l‚phonePersonnelFixe>02 32 07 08 92</a:T‚l‚phonePersonnelFixe>
            lAttributeNode := lXmlDomElement.selectSingleNode('a:T‚l‚phonePersonnelFixe');
            lPhoneNo1 := COPYSTR(lAttributeNode.text, 1, MAXSTRLEN(lServiceHeaderAddress."Phone No."));

            //<a:T‚l‚phoneProfessionnelFixe i:nil="true" />
            lAttributeNode := lXmlDomElement.selectSingleNode('a:T‚l‚phoneProfessionnelFixe');
            lPhoneNo2 := COPYSTR(lAttributeNode.text, 1, MAXSTRLEN(lServiceHeaderAddress."Phone No."));

            //<a:T‚l‚phonePersonnelPortable>06 89 62 85 71</a:T‚l‚phonePersonnelPortable>
            lAttributeNode := lXmlDomElement.selectSingleNode('a:T‚l‚phonePersonnelPortable');
            lMobilePhoneNo1 := COPYSTR(lAttributeNode.text, 1, MAXSTRLEN(lServiceHeaderAddress."Mobile Phone No."));

            //<a:T‚l‚phonProfessionnePortable i:nil="true" />
            lAttributeNode := lXmlDomElement.selectSingleNode('a:T‚l‚phonProfessionnePortable');
            lMobilePhoneNo2 := COPYSTR(lAttributeNode.text, 1, MAXSTRLEN(lServiceHeaderAddress."Mobile Phone No."));

            IF lPhoneNo1 = '' THEN
              lPhoneNo1 := lPhoneNo2;
            IF lMobilePhoneNo1 = '' THEN
              lMobilePhoneNo1 := lMobilePhoneNo2;

            IF lPhoneNo1 <> '' THEN
              IF ToolsMgt.TestPhoneNo('',lPhoneNo1) THEN
                lServiceHeaderAddress.VALIDATE("Phone No.", lPhoneNo1)
              ELSE
                lServiceHeaderAddress."Phone No." := lPhoneNo1;

            IF lMobilePhoneNo1 <> '' THEN
              IF ToolsMgt.TestPhoneNo('',lMobilePhoneNo1) THEN
                lServiceHeaderAddress.VALIDATE("Mobile Phone No.", lMobilePhoneNo1)
              ELSE
                lServiceHeaderAddress."Mobile Phone No." := lMobilePhoneNo1;

            //lServiceHeaderAddress."GUID Fusion Code" := lContactGTACode;
            IF NOT pToCheck THEN BEGIN
              lServiceHeaderAddress.MODIFY(TRUE);
              lInterfaceReference.CreateByServHeaderAdd(lServiceHeaderAddress, lContactGTACode);
            END;
          END;
        END;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE GetAddress@1100281045(VAR pXmlDomElement@1100281000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";VAR pPostCode@1100281004 : Code[20];VAR pCity@1100281003 : Text[30];VAR pAddress@1100281002 : Text[250];VAR pErrorText@1100281005 : Text[250]) : Boolean;
    VAR
      lAttributeNode@1100281001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lErrorText011@1100281007 : TextConst 'ENU=Post code %1 city %2 is not exist.;FRA=Code postal %1 ville %2 n''existe pas dans la base NAVISION.';
      lErrorText012@1100281006 : TextConst 'ENU=Way name is not exist.;FRA=Nom de voie %1 n''existe pas dans la base NAVISION.';
    BEGIN
      //<a:AdresseCodePostal>27930</a:AdresseCodePostal>
      lAttributeNode := pXmlDomElement.selectSingleNode('a:AdresseCodePostal');
      pPostCode := COPYSTR(lAttributeNode.text, 1, 20);
      //<a:AdresseLocalit‚>EMALLEVILLE</a:AdresseLocalit‚>
      lAttributeNode := pXmlDomElement.selectSingleNode('a:AdresseLocalit‚');
      pCity := COPYSTR(lAttributeNode.text, 1, 30);
      ToolsMgt.CheckCity2(pPostCode,pCity);
      {
      IF (pPostCode <> '') OR (pCity <> '') THEN
        IF NOT FUSIONInterfaceMgt.CheckPostCode(pPostCode, pCity) THEN BEGIN
          pErrorText := STRSUBSTNO(lErrorText011, pPostCode, pCity);
          EXIT(FALSE);
        END;
      }
      //<a:AdresseNomVoie i:nil="true" />
      lAttributeNode := pXmlDomElement.selectSingleNode('a:AdresseNomVoie');
      pAddress := COPYSTR(lAttributeNode.text, 1, 50);
      IF pAddress <> '' THEN BEGIN
        {
        //----????????????????????????Controle adresse????????TODO---------------
        IF NOT FUSIONInterfaceMgt.CheckAddress(pPostCode, pCity, pAddress) THEN BEGIN
          pErrorText := STRSUBSTNO(lErrorText012, pAddress);
          EXIT(FALSE);
        END;
        }
        //<a:AdresseTypeVoie i:nil="true" />
        lAttributeNode := pXmlDomElement.selectSingleNode('a:AdresseTypeVoie');
        IF lAttributeNode.text <> '' THEN
          pAddress := lAttributeNode.text + ' ' + pAddress;
        //<a:AdresseNumVoie i:nil="true" />
        lAttributeNode := pXmlDomElement.selectSingleNode('a:AdresseNumVoie');
        IF lAttributeNode.text <> '' THEN
          pAddress := lAttributeNode.text + ' ' + pAddress;
        // <a:AdresseBoitePostale i:nil="true" />
        lAttributeNode := pXmlDomElement.selectSingleNode('a:AdresseBoitePostale');
        IF lAttributeNode.text <> '' THEN
          pAddress := lAttributeNode.text + ' ' + pAddress;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE TreatComments@1100281008(pServiceHeader@1100281005 : Record 5900;VAR pXmlNodeList@1100281000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNodeList";VAR pErrorText@1100281008 : Text[250]) : Boolean;
    VAR
      lAttribute@1100281004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF83-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNamedNodeMap";
      lXmlDomElement@1100281003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
      lAttributeNode@1100281002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      i@1100281001 : Integer;
      lAdvCommentLine@1100281006 : Record 50056;
      lAdvCommentLine2@1100281010 : Record 50056;
      lDt@1100281007 : DateTime;
      lAdvCommentKeysText@1100281009 : Text[250];
      lErrorText009@1100281012 : TextConst 'ENU="The comment %1 is not a beneficiary. ";FRA=L''identifiant suivi SiTiers %1 n''est pas valide.';
      lErrorText010@1100281011 : TextConst 'ENU=Le No. comment SiTiers is not valid for then Fusion GTA code.;FRA=L''identifiant suivi SiTiers ne correspond pas le code Fusion.';
      lFusionId@1100281013 : Code[40];
      lBigText@1100281014 : BigText;
      lBigText2@1100281017 : BigText;
      lOutStream@1100281018 : OutStream;
      lInstream@1100281019 : InStream;
      lTextMgt@1100281015 : Codeunit 50085;
      lSkipModif@1100281016 : Boolean;
      lTempBlob@1100281020 : TEMPORARY Record 99008535;
      lFusionReference@1100281021 : Record 50164;
    BEGIN
      {
      <a:SuiviService>
        <a:ContenuSuivi>Modification du statut du dossier vers Rapport_Envoy‚ le 13/04/2011 16:16:45</a:ContenuSuivi>
        <a:Cr‚ationSuivi>2011-04-13T16:16:45.377</a:Cr‚ationSuivi>
        <a:FusionSuiviId>4ca34ded-cc8c-469f-8f24-dac15008a1cd</a:FusionSuiviId>
        <a:FusionTypeSuivi>Suivi manuel</a:FusionTypeSuivi>
        <a:IdentifiantSuiviSiTiers i:nil="true" />
        <a:Libell‚Suivi>Modification statut dossier</a:Libell‚Suivi>
        <a:NomUtilisateur>Fabien Grattery</a:NomUtilisateur>
        <a:UtilisateurLoginWindows>ATER2000\fgr</a:UtilisateurLoginWindows>
      </a:SuiviService>
      }

      FOR i := pXmlNodeList.length()-1 DOWNTO 0 DO BEGIN
        lSkipModif := FALSE;
        lXmlDomElement := pXmlNodeList.item(i);
        lAttributeNode := lXmlDomElement.selectSingleNode('a:FusionSuiviId');
        lFusionId := lAttributeNode.text;

        //<a:IdentifiantPiŠceJointeSiTiers i:nil="true"/>
        lAttributeNode := lXmlDomElement.selectSingleNode('a:IdentifiantSuiviSiTiers');
        lAdvCommentKeysText := lAttributeNode.text;

        IF lAdvCommentKeysText <> '' THEN BEGIN
          IF NOT FUSIONInterfaceMgt.GetAdvServCommentByKey(lAdvCommentKeysText, lAdvCommentLine) THEN BEGIN
            EXIT(FALSE);
            pErrorText := STRSUBSTNO(lErrorText009, lAdvCommentKeysText);
          END;

          //lAdvCommentLine2.RESET;
          //lAdvCommentLine2.SETCURRENTKEY("GUID Fusion Code");
          //lAdvCommentLine2.SETRANGE("GUID Fusion Code", lFusionId);

          {
          IF lAdvCommentLine2.ISEMPTY THEN BEGIN
            pErrorText := lErrorText010;
            EXIT(FALSE);
          END;
          }
          //IF lAdvCommentLine2.FINDFIRST THEN BEGIN
          //<<IMH04
          lFusionReference.SETCURRENTKEY("Fusion GUID");
          lFusionReference.SETRANGE("Source Table ID", DATABASE::"Adv. Comment Line");
          lFusionReference.SETRANGE("Fusion GUID", lFusionId);
          IF NOT lFusionReference.ISEMPTY THEN BEGIN
            lFusionReference.FINDFIRST;
            lAdvCommentLine2.GET(lFusionReference."Source No. 7", lFusionReference."Source No.",
                lFusionReference."Source No. 2", lFusionReference."Source No. 3",
                lFusionReference."Source No. 4", lFusionReference."Source No. 5",
                lFusionReference."Source No. 6");
          //>>IMH04
            IF (lAdvCommentLine."Source Table ID" <> lAdvCommentLine2."Source Table ID")
               OR (lAdvCommentLine."Source No." <> lAdvCommentLine2."Source No.")
               OR (lAdvCommentLine."Source No. 2" <> lAdvCommentLine2."Source No. 2")
               OR (lAdvCommentLine."Source No. 3" <> lAdvCommentLine2."Source No. 3")
               OR (lAdvCommentLine."Source No. 4" <> lAdvCommentLine2."Source No. 4")
               OR (lAdvCommentLine."Line No." <> lAdvCommentLine2."Line No.") THEN BEGIN
              pErrorText := lErrorText010;
              EXIT(FALSE);
            END;
          END ELSE BEGIN
            //lAdvCommentLine2."GUID Fusion Code" := lFusionId;
            //lAdvCommentLine2.MODIFY;
            lFusionReference.CreateByAdvCommentLine(lAdvCommentLine2, lFusionId);
          END;
        END;

        IF lAdvCommentKeysText = '' THEN BEGIN
          //lAdvCommentLine2.RESET;
          //lAdvCommentLine2.SETCURRENTKEY("GUID Fusion Code");
          //lAdvCommentLine2.SETRANGE("GUID Fusion Code", lFusionId);
          //IF NOT lAdvCommentLine2.ISEMPTY THEN
          //  lSkipModif := TRUE;

          //<<IMH04
          lFusionReference.SETCURRENTKEY("Fusion GUID");
          lFusionReference.SETRANGE("Source Table ID", DATABASE::"Adv. Comment Line");
          lFusionReference.SETRANGE("Fusion GUID", lFusionId);
          IF NOT lFusionReference.ISEMPTY THEN BEGIN
            lSkipModif := TRUE;
          END;
          //>>IMH04

          IF NOT lSkipModif THEN BEGIN
            lAdvCommentLine.INIT;
            lAdvCommentLine."Source Table ID" := DATABASE::"Service Header";
            lAdvCommentLine."Source No." := pServiceHeader."Service No.";
            lAdvCommentLine."Source No. 2" := pServiceHeader."No.";
            lAdvCommentLine."Line No." := 0;
            //lAdvCommentLine."GUID Fusion Code" := lFusionId;

            //a:Libell‚Suivi ----?????????----
            //Date suivi
            lAttributeNode := lXmlDomElement.selectSingleNode('a:Cr‚ationSuivi');
            CLEAR(lDt);
            IF NOT ISCLEAR(lAttributeNode) THEN
              IF lAttributeNode.text <> '0001-01-01T00:00:00' THEN
                IF EVALUATE(lDt, lAttributeNode.text, 9) THEN
                  lAdvCommentLine.Date := DT2DATE(lDt)
                ELSE
                  CLEAR(lDt);

            //Libell‚ suivi
            CLEAR(lBigText2);
            lAttributeNode := lXmlDomElement.selectSingleNode('a:Libell‚Suivi');
            EAIXMLMgt.GetBigTextNodeValue(lAttributeNode, lBigText2);
            CLEAR(lBigText);
            lAttributeNode := lXmlDomElement.selectSingleNode('a:ContenuSuivi');
            EAIXMLMgt.GetBigTextNodeValue(lAttributeNode, lBigText);
            IF lBigText2.LENGTH <> 0 THEN BEGIN
      //<<IMH.ST
              lTempBlob.CALCFIELDS(Blob);
              IF lTempBlob.Blob.HASVALUE THEN
                CLEAR(lTempBlob.Blob);
      //>>IMH.ST
              lBigText2.ADDTEXT(' : ');
              lTempBlob.Blob.CREATEOUTSTREAM(lOutStream);
              lBigText2.WRITE(lOutStream);
              lTempBlob.Blob.CREATEINSTREAM(lInstream);
              lBigText.READ(lInstream);
            END;

            //lAdvCommentLine.Comment := COPYSTR(lAttributeNode.text, 0, MAXSTRLEN(lAdvCommentLine.Comment));
            //a:NomUtilisateur
            lAttributeNode := lXmlDomElement.selectSingleNode('a:NomUtilisateur');
            lAdvCommentLine."Fusion User Name" := COPYSTR(lAttributeNode.text, 1, MAXSTRLEN(lAdvCommentLine."Fusion User Name"));
            lAdvCommentLine.Publication := lAdvCommentLine.Publication::Fusion;
            lAdvCommentLine.Reception := lAdvCommentLine.Reception::Fusion;
            //lAdvCommentLine.INSERT(TRUE);
            lTextMgt.SaveBigText(lAdvCommentLine, lAdvCommentLine.Date, lBigText);
            lFusionReference.CreateByAdvCommentLine(lAdvCommentLine, lFusionId);
            IF DT2DATE(lDt) <> 0D THEN BEGIN
              lAdvCommentLine."Creation Date" := lDt;
              lAdvCommentLine.MODIFY;
              lAdvCommentLine2.RESET;
              lAdvCommentLine2.SETRANGE("Source Table ID",lAdvCommentLine."Source Table ID");
              lAdvCommentLine2.SETRANGE("Source No.",lAdvCommentLine."Source No.");
              lAdvCommentLine2.SETRANGE("Source No. 2",lAdvCommentLine."Source No. 2");
              lAdvCommentLine2.SETRANGE("Source No. 3",lAdvCommentLine."Source No. 3");
              lAdvCommentLine2.SETRANGE("Source No. 4",lAdvCommentLine."Source No. 4");
              lAdvCommentLine2.SETRANGE("Attached To Line No.", lAdvCommentLine."Line No.");
              IF NOT lAdvCommentLine2.ISEMPTY THEN BEGIN
                lAdvCommentLine2.MODIFYALL("Creation Date", lAdvCommentLine."Creation Date");
              END;
            END;
          END;
        END;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE TreatInterventionDescrip@1100281004(pServiceHeader@1100281005 : Record 5900;VAR pXmlNodeList@1100281000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNodeList";VAR pErrorText@1100281008 : Text[250]) : Boolean;
    VAR
      lAttribute@1100281004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF83-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNamedNodeMap";
      lXmlDomElement@1100281003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
      lAttributeNode@1100281002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      i@1100281001 : Integer;
      lInterventionDescTmp@1100281006 : TEMPORARY Record 50070;
      lIntervDescriptionDetailTmp@1100281010 : TEMPORARY Record 50161;
      lDt@1100281007 : DateTime;
      lErrorText001@1100281012 : TextConst 'ENU="The value %1 of field %2 is not a valide. ";FRA=Le valeur %1 du champ %2 n''est pas valide.';
      lSkipModif@1100281016 : Boolean;
      lUnsecuredDepreciationAmount@1100281009 : Decimal;
      lAffectedLocationDesc@1100281011 : Text[30];
      lLineNo@1100281013 : Integer;
      lCount@1100281014 : Integer;
      lServiceHeader@1100281015 : Record 5900;
    BEGIN
      {
      <RapportExpertiseLigne>
        <ExtensionData />
        <CoutUnitaireHT>0</CoutUnitaireHT>
        <DossierChiffrageLigneId>321b286e-2ac4-42c0-acd4-be9cb45971b7</DossierChiffrageLigneId>
        <ElementChiffrage_Code>MIIREN</ElementChiffrage_Code>
        <El‚mentChiffrage_Libell‚>Forfait montant des INDEMNITES v‚tust‚ d‚duite immobilier ESP (REN v‚tust‚ 0%)</El‚mentChiffra
        <Libell‚LigneChiffrage>Forfait montant des INDEMNITES v‚tust‚ d‚duite immobilier ESP (REN v‚tust‚ 0%)</Libell‚LigneChiff
        <ModeIndemnisation>REN</ModeIndemnisation>
        <NatureEl‚mentLibell‚>Expertise-Terrain</NatureEl‚mentLibell‚>
        <Quantit‚>1</Quantit‚>
        <TauxTVA>0</TauxTVA>
        <TauxV‚tust‚Appliqu‚>0</TauxV‚tust‚Appliqu‚>
        <TypeSurface>NonDefini</TypeSurface>
      </RapportExpertiseLigne>

        <xs:element minOccurs="0" name="CoutUnitaireHT" type="xs:double" />
        <xs:element minOccurs="0" name="DescriptionEl‚mentChiffrage" nillable="true" type="xs:string" />
        <xs:element minOccurs="0" name="DossierChiffrageLigneId" nillable="true" type="ser:guid" />
        <xs:element minOccurs="0" name="ElementChiffrage_Code" nillable="true" type="xs:string" />
        <xs:element minOccurs="0" name="El‚mentChiffrage_CodeNavCorpsM‚tier" nillable="true" type="xs:string" />
        <xs:element minOccurs="0" name="El‚mentChiffrage_CodeNavSp‚cialit‚" nillable="true" type="xs:string" />
        <xs:element minOccurs="0" name="El‚mentChiffrage_Description" nillable="true" type="xs:string" />
        <xs:element minOccurs="0" name="El‚mentChiffrage_Libell‚" nillable="true" type="xs:string" />
        <xs:element minOccurs="0" name="FamilleEl‚mentChiffrageLibell‚" nillable="true" type="xs:string" />
        <xs:element minOccurs="0" name="Libell‚LigneChiffrage" nillable="true" type="xs:string" />
        <xs:element minOccurs="0" name="ModeIndemnisation" nillable="true" type="xs:string" />
        <xs:element minOccurs="0" name="NatureDommageLibell‚" nillable="true" type="xs:string" />
        <xs:element minOccurs="0" name="NatureEl‚mentLibell‚" nillable="true" type="xs:string" />
        <xs:element minOccurs="0" name="PiŠceLibell‚" nillable="true" type="xs:string" />
        <xs:element minOccurs="0" name="Quantit‚" type="xs:double" />
        <xs:element minOccurs="0" name="TauxTVA" nillable="true" type="xs:double" />
        <xs:element minOccurs="0" name="TauxV‚tust‚Appliqu‚" nillable="true" type="xs:double" />
        <xs:element minOccurs="0" name="TypeSurface" nillable="true" type="xs:string" />
        <xs:element minOccurs="0" name="Unit‚" nillable="true" type="xs:string" />

      }
      lLineNo := 10000;
      lCount := pXmlNodeList.length();
      IF lCount = 0 THEN
        EXIT;

      lServiceHeader.SETCURRENTKEY("Service No.");
      lServiceHeader.SETRANGE("Service No.", pServiceHeader."Service No.");
      lServiceHeader.SETRANGE("Fusion Service Status Created", TRUE);
      IF NOT lServiceHeader.FINDFIRST THEN
        EXIT;

      FOR i := lCount-1 DOWNTO 0 DO BEGIN
        lSkipModif := FALSE;
        lXmlDomElement := pXmlNodeList.item(i);
        lIntervDescriptionDetailTmp."Service Header No." := lServiceHeader."No.";
        lIntervDescriptionDetailTmp."Affected Location Code" := '';
        lIntervDescriptionDetailTmp."Speciality Code" := '';
        lIntervDescriptionDetailTmp."Building Trade No." := '';
        lIntervDescriptionDetailTmp."Line No." := lLineNo;

        //<xs:element minOccurs="0" name="El‚mentChiffrage_CodeNavCorpsM‚tier" nillable="true" type="xs:string" />
        lAttributeNode := lXmlDomElement.selectSingleNode('a:El‚mentChiffrage_CodeNavCorpsM‚tier');
        IF NOT ISCLEAR(lAttributeNode) THEN
          lIntervDescriptionDetailTmp."Building Trade No." := lAttributeNode.text;

        //<xs:element minOccurs="0" name="El‚mentChiffrage_CodeNavSp‚cialit‚" nillable="true" type="xs:string" />
        lAttributeNode := lXmlDomElement.selectSingleNode('a:El‚mentChiffrage_CodeNavSp‚cialit‚');
        IF NOT ISCLEAR(lAttributeNode) THEN
          lIntervDescriptionDetailTmp."Speciality Code" := lAttributeNode.text;

        //<xs:element minOccurs="0" name="CoutUnitaireHT" type="xs:double" />
        lAttributeNode := lXmlDomElement.selectSingleNode('a:CoutUnitaireHT');
        IF NOT ISCLEAR(lAttributeNode) THEN
          lIntervDescriptionDetailTmp."Unit Price" := ToolsMgt.TextToDecimal2(lAttributeNode.text);
          {
          IF NOT EVALUATE(lIntervDescriptionDetailTmp."Unit Price", lAttributeNode.text, 9) THEN BEGIN
            pErrorText := STRSUBSTNO(lErrorText001, lAttributeNode.text, 'CoutUnitaireHT');
            EXIT(FALSE);
          END;
          }
        //<xs:element minOccurs="0" name="DescriptionEl‚mentChiffrage" nillable="true" type="xs:string" />
        lAttributeNode := lXmlDomElement.selectSingleNode('a:DescriptionEl‚mentChiffrage');
        IF NOT ISCLEAR(lAttributeNode) THEN
          lIntervDescriptionDetailTmp."Fusion Element Description" :=
            COPYSTR(lAttributeNode.text, 1, MAXSTRLEN(lIntervDescriptionDetailTmp."Fusion Element Description"));

        //<xs:element minOccurs="0" name="DossierChiffrageLigneId" nillable="true" type="ser:guid" />
        lAttributeNode := lXmlDomElement.selectSingleNode('a:DossierChiffrageLigneId');
        IF NOT ISCLEAR(lAttributeNode) THEN
          lIntervDescriptionDetailTmp."Fusion Descr. Amount Line Id" := lAttributeNode.text;

        //<xs:element minOccurs="0" name="ElementChiffrage_Code" nillable="true" type="xs:string" />
        lAttributeNode := lXmlDomElement.selectSingleNode('a:ElementChiffrage_Code');
        IF NOT ISCLEAR(lAttributeNode) THEN
          lIntervDescriptionDetailTmp."Fusion Descr. Amt. Elmt. Code" := lAttributeNode.text;

        //<xs:element minOccurs="0" name="El‚mentChiffrage_Description" nillable="true" type="xs:string" />
        lAttributeNode := lXmlDomElement.selectSingleNode('a:El‚mentChiffrage_Description');
        IF NOT ISCLEAR(lAttributeNode) THEN
          lIntervDescriptionDetailTmp."Fusion Element Description" :=
            COPYSTR(lAttributeNode.text, 1, MAXSTRLEN(lIntervDescriptionDetailTmp."Fusion Element Description"));

        //<xs:element minOccurs="0" name="El‚mentChiffrage_Libell‚" nillable="true" type="xs:string" />
        lAttributeNode := lXmlDomElement.selectSingleNode('a:El‚mentChiffrage_Libell‚');
        IF NOT ISCLEAR(lAttributeNode) THEN
          lIntervDescriptionDetailTmp."Fusion Element Description 2" :=
            COPYSTR(lAttributeNode.text, 1, MAXSTRLEN(lIntervDescriptionDetailTmp."Fusion Element Description 2"));

        //<xs:element minOccurs="0" name="FamilleEl‚mentChiffrageLibell‚" nillable="true" type="xs:string" />
        lAttributeNode := lXmlDomElement.selectSingleNode('a:FamilleEl‚mentChiffrageLibell‚');
        IF NOT ISCLEAR(lAttributeNode) THEN
          lIntervDescriptionDetailTmp."Fusion Descr. Elmt. Family" :=
            COPYSTR(lAttributeNode.text, 1, MAXSTRLEN(lIntervDescriptionDetailTmp."Fusion Descr. Elmt. Family"));

        //<xs:element minOccurs="0" name="Libell‚LigneChiffrage" nillable="true" type="xs:string" />
        lAttributeNode := lXmlDomElement.selectSingleNode('a:Libell‚LigneChiffrage');
        IF NOT ISCLEAR(lAttributeNode) THEN
          lIntervDescriptionDetailTmp."Fusion Descr. Amount Line" :=
            COPYSTR(lAttributeNode.text, 1, MAXSTRLEN(lIntervDescriptionDetailTmp."Fusion Descr. Amount Line"));

        //<xs:element minOccurs="0" name="ModeIndemnisation" nillable="true" type="xs:string" />
        lAttributeNode := lXmlDomElement.selectSingleNode('a:ModeIndemnisation');
        IF NOT ISCLEAR(lAttributeNode) THEN
          lIntervDescriptionDetailTmp."Fusion Indemnity Mode" := lAttributeNode.text;

        //<xs:element minOccurs="0" name="NatureDommageLibell‚" nillable="true" type="xs:string" />
        lAttributeNode := lXmlDomElement.selectSingleNode('a:NatureDommageLibell‚');
        IF NOT ISCLEAR(lAttributeNode) THEN
          lIntervDescriptionDetailTmp."Fusion Damage Type Description" :=
            COPYSTR(lAttributeNode.text, 1, MAXSTRLEN(lIntervDescriptionDetailTmp."Fusion Damage Type Description"));

        //<xs:element minOccurs="0" name="NatureEl‚mentLibell‚" nillable="true" type="xs:string" />
        lAttributeNode := lXmlDomElement.selectSingleNode('a:NatureEl‚mentLibell‚');
        IF NOT ISCLEAR(lAttributeNode) THEN
          lIntervDescriptionDetailTmp."Fusion Element Type Descrip." :=
            COPYSTR(lAttributeNode.text, 1, MAXSTRLEN(lIntervDescriptionDetailTmp."Fusion Element Type Descrip."));

        //<xs:element minOccurs="0" name="PiŠceLibell‚" nillable="true" type="xs:string" />
        lAttributeNode := lXmlDomElement.selectSingleNode('a:PiŠceLibell‚');
        IF NOT ISCLEAR(lAttributeNode) THEN BEGIN
          lAffectedLocationDesc := COPYSTR(lAttributeNode.text, 1, MAXSTRLEN(lAffectedLocationDesc));
          lIntervDescriptionDetailTmp."Affected Location Code" :=
            DarvaMgt.GetAffectedLocationCode(lAffectedLocationDesc, EAIRcvdMQBuffer."EAI Partner Code");
          IF lIntervDescriptionDetailTmp."Affected Location Code" = '' THEN
            lIntervDescriptionDetailTmp."Affected Location Description" := lAffectedLocationDesc;
        END;

        //<xs:element minOccurs="0" name="Quantit‚" type="xs:double" />
        lAttributeNode := lXmlDomElement.selectSingleNode('a:Quantit‚');
        IF NOT ISCLEAR(lAttributeNode) THEN
          lIntervDescriptionDetailTmp.Quantity := ToolsMgt.TextToDecimal2(lAttributeNode.text);
          {
          IF NOT EVALUATE(lIntervDescriptionDetailTmp.Quantity, lAttributeNode.text) THEN BEGIN
            pErrorText := STRSUBSTNO(lErrorText001, lAttributeNode.text, 'Quantit‚');
            EXIT(FALSE);
          END;
          }

        //<xs:element minOccurs="0" name="TauxTVA" nillable="true" type="xs:double" />
        lAttributeNode := lXmlDomElement.selectSingleNode('a:TauxTVA');
        IF NOT ISCLEAR(lAttributeNode) THEN
          lIntervDescriptionDetailTmp."VAT %" := ToolsMgt.TextToDecimal2(lAttributeNode.text);
          IF NOT EVALUATE(lIntervDescriptionDetailTmp."VAT %", lAttributeNode.text, 9) THEN BEGIN
            pErrorText := STRSUBSTNO(lErrorText001, lAttributeNode.text, 'TauxTVA');
            EXIT(FALSE);
          END;

        //<xs:element minOccurs="0" name="TauxV‚tust‚Appliqu‚" nillable="true" type="xs:double" />
        lAttributeNode := lXmlDomElement.selectSingleNode('a:TauxV‚tust‚Appliqu‚');
        IF NOT ISCLEAR(lAttributeNode) THEN
          lIntervDescriptionDetailTmp."Depreciation %" := ToolsMgt.TextToDecimal2(lAttributeNode.text);
          {
          IF EVALUATE(lIntervDescriptionDetailTmp."Depreciation %", lAttributeNode.text, 9) THEN BEGIN
            pErrorText := STRSUBSTNO(lErrorText001, lAttributeNode.text, 'TauxV‚tust‚Appliqu‚');
            EXIT(FALSE);
          END;
          }
        //<xs:element minOccurs="0" name="TypeSurface" nillable="true" type="xs:string" />
        lAttributeNode := lXmlDomElement.selectSingleNode('a:TypeSurface');
        IF NOT ISCLEAR(lAttributeNode) THEN
          lIntervDescriptionDetailTmp."Fusion Surface Type" := lAttributeNode.text;

        //<xs:element minOccurs="0" name="Unit‚" nillable="true" type="xs:string" />
        lAttributeNode := lXmlDomElement.selectSingleNode('a:Unit‚');
        IF NOT ISCLEAR(lAttributeNode) THEN
          lIntervDescriptionDetailTmp."Unit of Measure" := lAttributeNode.text;

        lIntervDescriptionDetailTmp.INSERT;
        lLineNo += 10000;
        lInterventionDescTmp."Service Header No." := lIntervDescriptionDetailTmp."Service Header No.";
        lInterventionDescTmp."Affected Location Code" := lIntervDescriptionDetailTmp."Affected Location Code";
        lInterventionDescTmp."Speciality Code" := lIntervDescriptionDetailTmp."Speciality Code";
        lInterventionDescTmp."Building Trade No." := lIntervDescriptionDetailTmp."Building Trade No.";
        IF lInterventionDescTmp.INSERT THEN;

      END;
      CreateIntervDescLine(lInterventionDescTmp, lIntervDescriptionDetailTmp);
      EXIT(TRUE);
    END;

    PROCEDURE CreateIntervDescLine@1100281010(VAR pInterventionDesc@1100281001 : Record 50070;VAR pIntervDescriptionDetail@1100281000 : Record 50161);
    VAR
      lInterventionDesc@1100281003 : Record 50070;
      lIntervDescriptionDetail@1100281002 : Record 50161;
      lIntervDescriptionDetail2@1100281006 : Record 50161;
      lVATPostingSetup@1100281005 : Record 325;
      lServMgtSetup@1100281004 : Record 5911;
      lDARVARcvdDTPostAct@1100281007 : Codeunit 50162;
      lLocationDetailDescription@1100281008 : Text[80];
      lDiffDesc@1100281009 : Boolean;
    BEGIN
      lServMgtSetup.GET;
      IF pInterventionDesc.FINDSET THEN
        REPEAT
          lLocationDetailDescription := '';
          lDiffDesc := FALSE;
          pIntervDescriptionDetail.SETRANGE("Service Header No.", pInterventionDesc."Service Header No.");
          pIntervDescriptionDetail.SETRANGE("Affected Location Code", pInterventionDesc."Affected Location Code");
          pIntervDescriptionDetail.SETRANGE("Speciality Code", pInterventionDesc."Speciality Code");
          pIntervDescriptionDetail.SETRANGE("Building Trade No.", pInterventionDesc."Building Trade No.");
          IF pIntervDescriptionDetail.FINDSET THEN BEGIN
            lInterventionDesc.INIT;
            lInterventionDesc.VALIDATE("Service Header No.", pIntervDescriptionDetail."Service Header No.");
            lInterventionDesc.VALIDATE("Affected Location Code", pIntervDescriptionDetail."Affected Location Code");
            lInterventionDesc.VALIDATE("Speciality Code", pIntervDescriptionDetail."Speciality Code");
            lInterventionDesc.VALIDATE("Building Trade No.", pIntervDescriptionDetail."Building Trade No.");
            IF pIntervDescriptionDetail.COUNT = 1 THEN BEGIN
              lIntervDescriptionDetail.VALIDATE(Quantity, pIntervDescriptionDetail.Quantity);
              lInterventionDesc.VALIDATE("Unit Price", pIntervDescriptionDetail."Unit Price");
              lInterventionDesc.VALIDATE("Affected Location Description", pIntervDescriptionDetail."Affected Location Description");
            END;
            IF lInterventionDesc.INSERT(TRUE) THEN;
            REPEAT
              lIntervDescriptionDetail2.SETCURRENTKEY("Fusion Descr. Amount Line Id");
              lIntervDescriptionDetail2.SETRANGE("Fusion Descr. Amount Line Id", pIntervDescriptionDetail."Fusion Descr. Amount Line Id");
              IF lIntervDescriptionDetail2.ISEMPTY THEN BEGIN
                lIntervDescriptionDetail := pIntervDescriptionDetail;
                lIntervDescriptionDetail."VAT Bus. Posting Group" := lServMgtSetup."VAT Bus. Posting Group Default";
                lVATPostingSetup.SETRANGE("VAT Bus. Posting Group", lIntervDescriptionDetail."VAT Bus. Posting Group");
                lVATPostingSetup.SETRANGE("VAT %", lIntervDescriptionDetail."VAT %");
                lVATPostingSetup.FINDFIRST;
                lIntervDescriptionDetail.VALIDATE("Amount Excl. VAT",
                  pIntervDescriptionDetail."Unit Price" * pIntervDescriptionDetail.Quantity);
                lIntervDescriptionDetail.VALIDATE("VAT Prod. Posting Group", lVATPostingSetup."VAT Prod. Posting Group");
                lIntervDescriptionDetail.VALIDATE("VAT %");
                lIntervDescriptionDetail.VALIDATE("Amount Incl. VAT");
                lIntervDescriptionDetail."Location Detail Code" :=
                  lDARVARcvdDTPostAct.GetRecCode(
                    DATABASE::"Intervention Description",
                    lInterventionDesc.FIELDNO("Location Detail Code"),
                    COPYSTR(pIntervDescriptionDetail."Fusion Surface Type",1,50));
                lIntervDescriptionDetail."Location Detail Description" :=
                  COPYSTR(pIntervDescriptionDetail."Fusion Surface Type",1,
                  MAXSTRLEN(lIntervDescriptionDetail."Location Detail Description"));
                IF lIntervDescriptionDetail.INSERT(TRUE) THEN;
              END;

              IF (NOT lDiffDesc) AND (lInterventionDesc."Location Detail Description" = '')
                 AND (lIntervDescriptionDetail."Location Detail Description" <> '') THEN BEGIN
                lInterventionDesc."Location Detail Code" := lIntervDescriptionDetail."Location Detail Code";
                lInterventionDesc."Location Detail Description" := lIntervDescriptionDetail."Location Detail Description";
              END;
              IF (lInterventionDesc."Location Detail Description" <> '')
                  AND (lInterventionDesc."Location Detail Description"
                      <> lIntervDescriptionDetail."Location Detail Description")
                  AND (lIntervDescriptionDetail."Location Detail Description" <> '') THEN BEGIN
                lInterventionDesc."Location Detail Code" := '';
                lInterventionDesc."Location Detail Description" := '';
                lDiffDesc := TRUE;
              END;
            UNTIL pIntervDescriptionDetail.NEXT = 0;
            IF NOT lDiffDesc THEN
            lInterventionDesc.MODIFY;
          END;
        UNTIL pInterventionDesc.NEXT = 0;
    END;

    PROCEDURE TreatFeeNote@1100281005(pServiceHeader@1100281002 : Record 5900;VAR pXmlNodeList@1100281001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNodeList";VAR pErrorText@1100281000 : Text[250]) : Boolean;
    VAR
      lAttribute@1100281010 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF83-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNamedNodeMap";
      lXmlDomElement@1100281009 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
      lAttributeNode@1100281008 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      i@1100281007 : Integer;
      lFUSIONFeeNote@1100281006 : Record 50160;
      lFUSIONFeeNote2@1100281003 : Record 50160;
      lDt@1100281005 : DateTime;
      lSkipModif@1100281004 : Boolean;
      lErrorText001@1100281011 : TextConst 'ENU="The value %1 of field %2 is not a valide. ";FRA=Le valeur %1 du champ %2 n''est pas valide.';
      lGenJournalLine@1100281012 : Record 81;
      lErrorText002@1100281013 : TextConst 'ENU=The amount %1 %2 should be not negative for a fee note.;FRA=Le montant %1 %2 ne doit pas ˆtre n‚gatif pour une NH.';
      lErrorText003@1100281014 : TextConst 'ENU=The amount %1 %2 should be not positive for a cr. memo.;FRA=Le montant %1 %2 ne doit pas ˆtre positif pour un avoir.';
      lCount@1100281015 : Integer;
      lGenJrnlLineToPost@1100281016 : Boolean;
      lToInsert@1100281017 : Boolean;
    BEGIN
      {
      <NotesHonoraire>
        <NoteHonoraire>
          <ExtensionData />
          <AP_DateR‚glementDonneurOrdres>0001-01-01T00:00:00</AP_DateR‚glementDonneurOrdres>
          <AVOIR_Date>0001-01-01T00:00:00</AVOIR_Date>
          <AVOIR_MontantHT>0</AVOIR_MontantHT>
          <AVOIR_MontantTTC>0</AVOIR_MontantTTC>
          <AVOIR_MontantTVA>0</AVOIR_MontantTVA>
          <NH_DateCr‚ation>2011-08-29T18:41:30.087</NH_DateCr‚ation>
          <NH_DatePiŠce>2011-08-29T00:00:00</NH_DatePiŠce>
          <NH_MontantHT>196.0200</NH_MontantHT>
          <NH_MontantTTC>234.4399</NH_MontantTTC>
          <NH_MontantTVA>38.4199</NH_MontantTVA>
          <NH_R‚f‚renceExpert>2011-002113/NC</NH_R‚f‚renceExpert>
          <NH_R‚f‚renceIMH>2011-002113/NC</NH_R‚f‚renceIMH>
          <NH_TypeExpertise>EAD</NH_TypeExpertise>
          <NoteHonoraireAvoirId xsi:nil="true" />
          <NoteHonoraireId>df2a5927-248d-4b9b-88c5-4953df76b8f5</NoteHonoraireId>
        </NoteHonoraire>
      </NotesHonoraire>

      <xs:complexType name="ArrayOfNoteHonoraire">
       <xs:sequence>
        <xs:element minOccurs="0" maxOccurs="unbounded" name="NoteHonoraire" nillable="true" type="tns:NoteHonoraire" />
        </xs:sequence>
        </xs:complexType>
        <xs:element name="ArrayOfNoteHonoraire" nillable="true" type="tns:ArrayOfNoteHonoraire" />
       <xs:complexType name="NoteHonoraire">
       <xs:sequence>
          <xs:element minOccurs="0" name="AP_DateR‚glementDonneurOrdres" type="xs:dateTime" />
          <xs:element minOccurs="0" name="AP_Num‚roCommandeDonneurOrdres" nillable="true" type="xs:string" />
          <xs:element minOccurs="0" name="AVOIR_Date" type="xs:dateTime" />
          <xs:element minOccurs="0" name="AVOIR_MontantHT" type="xs:decimal" />
          <xs:element minOccurs="0" name="AVOIR_MontantTTC" type="xs:decimal" />
          <xs:element minOccurs="0" name="AVOIR_MontantTVA" type="xs:decimal" />
          <xs:element minOccurs="0" name="AVOIR_R‚f‚renceExpert" nillable="true" type="xs:string" />
          <xs:element minOccurs="0" name="NH_DateCr‚ation" type="xs:dateTime" />
          <xs:element minOccurs="0" name="NH_DatePiŠce" type="xs:dateTime" />
          <xs:element minOccurs="0" name="NH_MontantHT" type="xs:decimal" />
          <xs:element minOccurs="0" name="NH_MontantTTC" type="xs:decimal" />
          <xs:element minOccurs="0" name="NH_MontantTVA" type="xs:decimal" />
          <xs:element minOccurs="0" name="NH_R‚f‚renceExpert" nillable="true" type="xs:string" />
          <xs:element minOccurs="0" name="NH_R‚f‚renceIMH" nillable="true" type="xs:string" />
          <xs:element minOccurs="0" name="NH_TypeExpertise" nillable="true" type="xs:string" />
          <xs:element minOccurs="0" name="NoteHonoraireAvoirId" nillable="true" type="ser:guid" />
          <xs:element minOccurs="0" name="NoteHonoraireId" type="ser:guid" />
          <xs:element minOccurs="0" name="Num‚roCompteComptableDonneurOrdres" nillable="true" type="xs:string" />
          <xs:element minOccurs="0" name="Num‚roCompteComptableExpert" nillable="true" type="xs:string" />
        </xs:sequence>
       </xs:complexType>
      <xs:element name="NoteHonoraire" nillable="true" type="tns:NoteHonoraire" />
      }

      InterfaceSetup.GET;
      NHLineNo := 10000;
      lCount := pXmlNodeList.length();
      FOR i := lCount-1 DOWNTO 0 DO BEGIN
        lToInsert := FALSE;
        lFUSIONFeeNote.INIT;
        lFUSIONFeeNote."Fee No." := '';
        lFUSIONFeeNote."Line No." := 0;
        lFUSIONFeeNote."Service No." := pServiceHeader."Service No.";
        lFUSIONFeeNote."Corporate No." := pServiceHeader."Corporate No.";
        lFUSIONFeeNote."Corporate Region Code" := pServiceHeader."Corporate Region Code";
        lFUSIONFeeNote."Service Order Type" := pServiceHeader."Service Order Type";
        lFUSIONFeeNote."Service Header No." := pServiceHeader."No.";
        InterfaceSetup.TESTFIELD("Fee Note Journal Template");
        InterfaceSetup.TESTFIELD("Fee Note Journal Batch Name");
        lGenJournalLine.SETRANGE("Journal Template Name", InterfaceSetup."Fee Note Journal Template");
        lGenJournalLine.SETRANGE("Journal Batch Name", InterfaceSetup."Fee Note Journal Batch Name");
        GenJnlTemplate.GET(InterfaceSetup."Fee Note Journal Template");
        GenJnlBatch.GET(InterfaceSetup."Fee Note Journal Template",InterfaceSetup."Fee Note Journal Batch Name");
        GenJnlBatch.TESTFIELD("No. Series");

        lSkipModif := FALSE;
        lXmlDomElement := pXmlNodeList.item(lCount - i - 1);
        //----??????????????-----------ExtensionData
        lAttributeNode := lXmlDomElement.selectSingleNode('a:ExtensionData');

        //AP_DateR‚glementDonneurOrdres
        lAttributeNode := lXmlDomElement.selectSingleNode('a:AP_DateR‚glementDonneurOrdres');
        CLEAR(lDt);
        IF NOT ISCLEAR(lAttributeNode) THEN
          IF lAttributeNode.text <> '0001-01-01T00:00:00' THEN
            IF NOT EVALUATE(lDt, lAttributeNode.text, 9) THEN BEGIN
              pErrorText := STRSUBSTNO(lErrorText001, lAttributeNode.text, 'AP_DateR‚glementDonneurOrdres');
              EXIT(FALSE);
            END ELSE
              lFUSIONFeeNote.VALIDATE("AP Payment Date", DT2DATE(lDt));

        //-------------??????????????--------------AP_Num‚roCommandeDonneurOrdres
        lAttributeNode := lXmlDomElement.selectSingleNode('a:AP_Num‚roCommandeDonneurOrdres');
        IF NOT ISCLEAR(lAttributeNode) THEN
          lFUSIONFeeNote.VALIDATE("AP External Document No", lAttributeNode.text);

        //AVOIR_Date
        lAttributeNode := lXmlDomElement.selectSingleNode('a:AVOIR_Date');
        CLEAR(lDt);
        IF NOT ISCLEAR(lAttributeNode) THEN
          IF lAttributeNode.text <> '0001-01-01T00:00:00' THEN
            IF NOT EVALUATE(lDt, lAttributeNode.text, 9) THEN BEGIN
              pErrorText := STRSUBSTNO(lErrorText001, lAttributeNode.text, 'AVOIR_Date');
              EXIT(FALSE);
            END ELSE
              lFUSIONFeeNote.VALIDATE("CN Document Date", DT2DATE(lDt));

        //AVOIR_MontantHT
        lAttributeNode := lXmlDomElement.selectSingleNode('a:AVOIR_MontantHT');
        IF NOT ISCLEAR(lAttributeNode) THEN
          lFUSIONFeeNote.VALIDATE("CN Amount", ToolsMgt.TextToDecimal2(lAttributeNode.text));
        IF lFUSIONFeeNote."CN Amount" > 0 THEN BEGIN
          pErrorText := STRSUBSTNO(lErrorText003, 'AVOIR_MontantHT', lAttributeNode.text);
          EXIT(FALSE);
        END;

        //AVOIR_MontantTTC
        lAttributeNode := lXmlDomElement.selectSingleNode('a:AVOIR_MontantTTC');
        IF NOT ISCLEAR(lAttributeNode) THEN
          lFUSIONFeeNote.VALIDATE("CN Amount Incl. VAT", ToolsMgt.TextToDecimal2(lAttributeNode.text));
        IF lFUSIONFeeNote."CN Amount Incl. VAT" > 0 THEN BEGIN
          pErrorText := STRSUBSTNO(lErrorText003, 'AVOIR_MontantTTC', lAttributeNode.text);
          EXIT(FALSE);
        END;

        //AVOIR_MontantTVA
        lAttributeNode := lXmlDomElement.selectSingleNode('a:AVOIR_MontantTVA');
        IF NOT ISCLEAR(lAttributeNode) THEN
          lFUSIONFeeNote.VALIDATE("CN VAT Amount", ToolsMgt.TextToDecimal2(lAttributeNode.text));
        IF lFUSIONFeeNote."CN VAT Amount" > 0 THEN BEGIN
          pErrorText := STRSUBSTNO(lErrorText003, 'AVOIR_MontantTVA', lAttributeNode.text);
          EXIT(FALSE);
        END;

        //-----------??????????????????-------AVOIR_R‚f‚renceExpert
        lAttributeNode := lXmlDomElement.selectSingleNode('a:AVOIR_R‚f‚renceExpert');
        IF NOT ISCLEAR(lAttributeNode) THEN
          lFUSIONFeeNote.VALIDATE(lFUSIONFeeNote."CN Expert Reference", lAttributeNode.text);

        //NH_DateCr‚ation
        lAttributeNode := lXmlDomElement.selectSingleNode('a:NH_DateCr‚ation');
        IF NOT ISCLEAR(lAttributeNode) THEN
          IF lAttributeNode.text <> '0001-01-01T00:00:00' THEN
            IF NOT EVALUATE(lDt, lAttributeNode.text, 9) THEN BEGIN
              pErrorText := STRSUBSTNO(lErrorText001, lAttributeNode.text, 'NH_DateCr‚ation');
              EXIT(FALSE);
            END ELSE
              lFUSIONFeeNote.VALIDATE("NH Creation Date", DT2DATE(lDt));

        //----------???????????????????---------------NH_DatePiŠce
        lAttributeNode := lXmlDomElement.selectSingleNode('a:NH_DatePiŠce');
        IF NOT ISCLEAR(lAttributeNode) THEN
          IF lAttributeNode.text <> '0001-01-01T00:00:00' THEN
            IF NOT EVALUATE(lDt, lAttributeNode.text, 9) THEN BEGIN
              pErrorText := STRSUBSTNO(lErrorText001, lAttributeNode.text, 'NH_DatePiŠce');
              EXIT(FALSE);
            END ELSE
              lFUSIONFeeNote.VALIDATE("NH Document Date", DT2DATE(lDt));

        //NH_MontantHT
        lAttributeNode := lXmlDomElement.selectSingleNode('a:NH_MontantHT');
        IF NOT ISCLEAR(lAttributeNode) THEN
          lFUSIONFeeNote.VALIDATE("NH Amount", ToolsMgt.TextToDecimal2(lAttributeNode.text));
        IF lFUSIONFeeNote."NH Amount" < 0 THEN BEGIN
          pErrorText := STRSUBSTNO(lErrorText002, 'NH_MontantHT', lAttributeNode.text);
          EXIT(FALSE);
        END;

        //NH_MontantTTC
        lAttributeNode := lXmlDomElement.selectSingleNode('a:NH_MontantTTC');
        IF NOT ISCLEAR(lAttributeNode) THEN
          lFUSIONFeeNote.VALIDATE("NH Amount Incl. VAT", ToolsMgt.TextToDecimal2(lAttributeNode.text));
        IF lFUSIONFeeNote."NH Amount Incl. VAT" < 0 THEN BEGIN
          pErrorText := STRSUBSTNO(lErrorText002, 'NH_MontantTTC', lAttributeNode.text);
          EXIT(FALSE);
        END;

        //NH_MontantTVA
        lAttributeNode := lXmlDomElement.selectSingleNode('a:NH_MontantTVA');
        IF NOT ISCLEAR(lAttributeNode) THEN
          lFUSIONFeeNote.VALIDATE("NH VAT Amount", ToolsMgt.TextToDecimal2(lAttributeNode.text));
        IF lFUSIONFeeNote."NH VAT Amount" < 0 THEN BEGIN
          pErrorText := STRSUBSTNO(lErrorText002, 'NH_MontantTVA', lAttributeNode.text);
          EXIT(FALSE);
        END;

        //-----------??????????????????-------NH_R‚f‚renceExpert
        lAttributeNode := lXmlDomElement.selectSingleNode('a:NH_R‚f‚renceExpert');
        IF NOT ISCLEAR(lAttributeNode) THEN
          lFUSIONFeeNote.VALIDATE(lFUSIONFeeNote."NH Expert Reference", lAttributeNode.text);

        //-------------????????????-----------NH_R‚f‚renceIMH
        lAttributeNode := lXmlDomElement.selectSingleNode('a:NH_MontantTVA');
        //IF EVALUATE(lFUSIONFeeNote."NH VAT Amount", lAttributeNode.text) THEN
        //  lFUSIONFeeNote.validate("NH VAT Amount");

        //NH_TypeExpertise
        lAttributeNode := lXmlDomElement.selectSingleNode('a:NH_TypeExpertise');
        IF NOT ISCLEAR(lAttributeNode) THEN
          lFUSIONFeeNote.VALIDATE("NH Fee Type", lAttributeNode.text);

        //------------?????????????????----------------NoteHonoraireAvoirId
        lAttributeNode := lXmlDomElement.selectSingleNode('a:NoteHonoraireAvoirId');
        IF NOT ISCLEAR(lAttributeNode) THEN
          lFUSIONFeeNote.VALIDATE("CN GUID", lAttributeNode.text);


        //------------?????????????????----------------NoteHonoraireId
        lAttributeNode := lXmlDomElement.selectSingleNode('a:NoteHonoraireId');
        IF NOT ISCLEAR(lAttributeNode) THEN
          lFUSIONFeeNote.VALIDATE("Fusion NH GUID", lAttributeNode.text);

        IF lFUSIONFeeNote."CN GUID" <> '' THEN
          IF lFUSIONFeeNote."CN Expert Reference" = '' THEN
            lFUSIONFeeNote."CN Expert Reference" := 'A' + lFUSIONFeeNote."NH Expert Reference";
        //<xs:element minOccurs="0" name="Num‚roCompteComptableExpert" nillable="true" type="xs:string" />
        lAttributeNode := lXmlDomElement.selectSingleNode('a:Num‚roCompteComptableExpert');
        IF NOT ISCLEAR(lAttributeNode) THEN
          lFUSIONFeeNote.VALIDATE("NH Vendor No.", lAttributeNode.text);

        lFUSIONFeeNote2.SETCURRENTKEY("Fusion NH GUID");
        lFUSIONFeeNote2.SETRANGE("Fusion NH GUID", lFUSIONFeeNote."Fusion NH GUID");
        IF NOT lFUSIONFeeNote2.FINDLAST THEN
          CLEAR(lFUSIONFeeNote2)
        ELSE
          lFUSIONFeeNote."Fee No." := lFUSIONFeeNote2."Fee No.";

        IF (lFUSIONFeeNote."NH Amount" <> 0) OR (lFUSIONFeeNote."NH Amount Incl. VAT" <> 0) THEN
          IF (lFUSIONFeeNote."NH Amount" > lFUSIONFeeNote2."NH Amount")
             OR (lFUSIONFeeNote."NH Amount Incl. VAT" > lFUSIONFeeNote2."NH Amount Incl. VAT") THEN BEGIN
            PostGenJournalLine(0, lFUSIONFeeNote2, lFUSIONFeeNote, pServiceHeader, lGenJournalLine);
            lGenJrnlLineToPost := TRUE;
            lToInsert := TRUE;
          END;
        IF (lFUSIONFeeNote."CN Amount" <> 0) OR (lFUSIONFeeNote."CN Amount Incl. VAT" <> 0) THEN
          IF (lFUSIONFeeNote."CN Amount" < lFUSIONFeeNote2."CN Amount")
             OR (lFUSIONFeeNote."NH Amount Incl. VAT" < lFUSIONFeeNote2."NH Amount Incl. VAT") THEN BEGIN
            PostGenJournalLine(1, lFUSIONFeeNote2, lFUSIONFeeNote, pServiceHeader, lGenJournalLine);
            lGenJrnlLineToPost := TRUE;
            lToInsert := TRUE;
          END;
        IF lToInsert THEN
          lFUSIONFeeNote.INSERT(TRUE);

        IF lFUSIONFeeNote."AP Payment Date" <> 0D THEN
          PaymentReceived(lFUSIONFeeNote, pServiceHeader);
      END;

      //ERROR('test');
      IF lGenJrnlLineToPost THEN BEGIN
        CODEUNIT.RUN(CODEUNIT::"Gen. Jnl.-Post Batch", lGenJournalLine);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE PostGenJournalLine@1100281007(pTreatType@1100281003 : 'Invoice,Credit Memo';pOldFUSIONFeeNote@1100281001 : Record 50160;pNewFUSIONFeeNote@1100281000 : Record 50160;pServiceHeader@1100281012 : Record 5900;VAR pGenJournalLine@1100281002 : Record 81);
    VAR
      lVATPostingSetup@1100281010 : Record 325;
      lNoSeris@1100281004 : Code[10];
      lxNoSeris@1100281005 : Code[10];
      "lVAT%"@1100281006 : Decimal;
      lAmountIncVAT@1100281007 : Decimal;
      lVAT@1100281008 : Decimal;
      lAmountExclVAT@1100281009 : Decimal;
      lAccountNo@1100281011 : Code[20];
    BEGIN
      pGenJournalLine.INIT;
      //Ligne achat : fournisseur Expert
      pGenJournalLine."Source Code" := GenJnlTemplate."Source Code";
      pGenJournalLine."Reason Code" := GenJnlBatch."Reason Code";
      pGenJournalLine."Posting No. Series" := GenJnlBatch."Posting No. Series";

      CASE pTreatType OF
        pTreatType::Invoice : BEGIN
          pGenJournalLine.VALIDATE("Journal Template Name", InterfaceSetup."Fee Note Journal Template");
          pGenJournalLine.VALIDATE("Journal Batch Name", InterfaceSetup."Fee Note Journal Batch Name");

          pGenJournalLine.VALIDATE("Document Type", pGenJournalLine."Document Type"::Invoice);
          //pGenJournalLine."Document No." := NoSeriesMgt.TryGetNextNo(GenJnlBatch."No. Series",pGenJournalLine."Posting Date");
          //NoSeriesMgt.InitSeries(GenJnlBatch."No. Series",'',0D,pGenJournalLine."Document No.",GenJnlBatch."No. Series");
          //NoSeriesMgt.InitSeries(GenJnlBatch."No. Series",lxNoSeris,0D,pGenJournalLine."Document No.",lNoSeris);
          pGenJournalLine."Document No." := NoSeriesMgt.GetNextNo(GenJnlBatch."No. Series",pGenJournalLine."Posting Date",FALSE);
          pGenJournalLine.Description := 'NH ' + pNewFUSIONFeeNote."NH Expert Reference";
          pGenJournalLine.VALIDATE("Document Date", pNewFUSIONFeeNote."NH Document Date");
          pGenJournalLine.VALIDATE("External Document No.", pNewFUSIONFeeNote."NH Expert Reference");

          lAmountIncVAT := pNewFUSIONFeeNote."NH Amount Incl. VAT" - pOldFUSIONFeeNote."NH Amount Incl. VAT";
          //lVAT := pNewFUSIONFeeNote."NH VAT Amount" - pOldFUSIONFeeNote."NH VAT Amount";
          //lAmountExclVAT := pNewFUSIONFeeNote."NH Amount" - pOldFUSIONFeeNote."NH Amount";
        END;
        pTreatType::"Credit Memo" : BEGIN
          pGenJournalLine.VALIDATE("Journal Template Name", InterfaceSetup."Fee Note Journal Template");
          pGenJournalLine.VALIDATE("Journal Batch Name", InterfaceSetup."Fee Note Journal Batch Name");

          pGenJournalLine.VALIDATE("Document Type", pGenJournalLine."Document Type"::"Credit Memo");
          //NoSeriesMgt.InitSeries(GenJnlBatch."No. Series",lxNoSeris,0D,pGenJournalLine."Document No.",lNoSeris);
          //pGenJournalLine."Document No." := NoSeriesMgt.TryGetNextNo(GenJnlBatch."No. Series",pGenJournalLine."Posting Date");
          //NoSeriesMgt.InitSeries(GenJnlBatch."No. Series",'',0D,pGenJournalLine."Document No.",GenJnlBatch."No. Series");
          pGenJournalLine."Document No." := NoSeriesMgt.GetNextNo(GenJnlBatch."No. Series",pGenJournalLine."Posting Date",FALSE);

          pGenJournalLine.Description := 'NH ' + pNewFUSIONFeeNote."CN Expert Reference";
          pGenJournalLine.VALIDATE("Document Date", pNewFUSIONFeeNote."CN Document Date");
          pGenJournalLine.VALIDATE("External Document No.", pNewFUSIONFeeNote."CN Expert Reference");

          lAmountIncVAT := pNewFUSIONFeeNote."CN Amount Incl. VAT" - pOldFUSIONFeeNote."CN Amount Incl. VAT";
          //lVAT := pNewFUSIONFeeNote."CN VAT Amount" - pOldFUSIONFeeNote."CN VAT Amount";
          //lAmountExclVAT := pNewFUSIONFeeNote."CN Amount" - pOldFUSIONFeeNote."CN Amount";
        END;
      END;

      pGenJournalLine."Line No." := NHLineNo;
      //"Document No." := NoSeriesMgt.TryGetNextNo(GenJnlBatch."No. Series","Posting Date");
      pGenJournalLine.VALIDATE("Account Type", pGenJournalLine."Account Type"::Vendor);

      //lAccountNo := GetVendorAccountNo(pNewFUSIONFeeNote."NH Vendor No.");
      IF lAccountNo <> '' THEN
        pGenJournalLine.VALIDATE("Account No.", lAccountNo)//Expert
      ELSE
        pGenJournalLine.VALIDATE("Account No.", pNewFUSIONFeeNote."NH Vendor No.");
      pGenJournalLine.VALIDATE("Posting Date", WORKDATE);

      pGenJournalLine.VALIDATE(Amount, -lAmountIncVAT);
      //pGenJournalLine."Bal. VAT Amount" := lVAT;

      IF pNewFUSIONFeeNote."AP Payment Date" = 0D THEN
        pGenJournalLine.VALIDATE("On Hold", 'NH');

      {
      "lVAT%" := (lVAT / lAmountExclVAT) * 100;
      lVATPostingSetup.SETRANGE("VAT %", "lVAT%" - 1, "lVAT%" + 1);
      IF lVATPostingSetup.FINDFIRST THEN BEGIN
        pGenJournalLine.VALIDATE("Bal. VAT Bus. Posting Group", lVATPostingSetup."VAT Bus. Posting Group");
        pGenJournalLine.VALIDATE("Bal. VAT Prod. Posting Group", lVATPostingSetup."VAT Prod. Posting Group");
      END;
      }

      //pGenJournalLine.VALIDATE(Amount);
      //pGenJournalLine.VALIDATE("Bal. VAT Amount");
      pGenJournalLine."Fusion NH GUID" := pNewFUSIONFeeNote."Fusion NH GUID";
      pGenJournalLine."Corporate No." := pServiceHeader."Corporate No.";
      pGenJournalLine."Corporate Region Code" := pServiceHeader."Corporate Region Code";
      pGenJournalLine."Service No." := pServiceHeader."Service No.";
      pGenJournalLine."Service Header No." := pServiceHeader."No.";
      pGenJournalLine."Reference No." := pServiceHeader."Reference No.";
      pGenJournalLine.INSERT(TRUE);

      //ligne contre partie : client grand compte
      NHLineNo += 10000;
      pGenJournalLine."Line No." := NHLineNo;
      //"Document No." := NoSeriesMgt.TryGetNextNo(GenJnlBatch."No. Series","Posting Date");
      pGenJournalLine.VALIDATE("Account Type", pGenJournalLine."Account Type"::Customer);

      lAccountNo := GeCustomerAccountNo(pServiceHeader);
      pGenJournalLine.VALIDATE("Account No.", lAccountNo);//Grand compte

      pGenJournalLine.VALIDATE(Amount, lAmountIncVAT);
      pGenJournalLine.INSERT(TRUE);
      NHLineNo += 10000;

      pGenJournalLine.SETRANGE("Journal Template Name", InterfaceSetup."Fee Note Journal Template");
      pGenJournalLine.SETRANGE("Journal Batch Name", InterfaceSetup."Fee Note Journal Batch Name");

      //CODEUNIT.RUN(CODEUNIT::"Gen. Jnl.-Post Batch", pGenJournalLine);
      //NHLineNo := 10000;
    END;

    PROCEDURE GetVendorAccountNo@1100281013(pFusionVendorAccountNo@1100281000 : Code[20]) : Code[20];
    BEGIN
      {
      //IMH06
      //D‚sactiv‚
      lRDDMatchingCode.SETRANGE("Source Table ID", 23);
      lRDDMatchingCode.SETRANGE("Source Code", pFusionVendorAccountNo);
      IF lRDDMatchingCode.FINDFIRST THEN
        EXIT(lRDDMatchingCode."New Code");
      }
    END;

    PROCEDURE GeCustomerAccountNo@1100281016(pServiceHeader@1100281000 : Record 5900) : Code[20];
    VAR
      lInvoicingMatrixSetup@1100281001 : Record 50137;
    BEGIN
      WITH lInvoicingMatrixSetup DO BEGIN
        SETRANGE("Corporate No.",pServiceHeader."Corporate No.");
        SETRANGE("Service Order Type",pServiceHeader."Service Order Type");
        SETRANGE("Corporate Region Code",pServiceHeader."Corporate Region Code");
        SETRANGE(Enable,TRUE);
        SETFILTER("Starting Date",'''''|<=%1',DT2DATE(pServiceHeader."Creation Date"));
        SETFILTER("Ending Date",'''''|>=%1',DT2DATE(pServiceHeader."Creation Date"));
        IF FINDFIRST THEN BEGIN
          EXIT(lInvoicingMatrixSetup."Repayment Customer No.");
        END;
      END;
    END;

    PROCEDURE PaymentReceived@1100281026(pFUSIONFeeNote@1100281000 : Record 50160;pServiceHeader@1100281002 : Record 5900);
    VAR
      lVendorLedgerEntry@1100281001 : Record 25;
    BEGIN
      lVendorLedgerEntry.SETCURRENTKEY("Service No.","Service Header No.","Intervention Line No.");
      lVendorLedgerEntry.SETRANGE("Service No.", pServiceHeader."Service No.");
      lVendorLedgerEntry.SETRANGE("Service Header No.", pServiceHeader."No.");
      lVendorLedgerEntry.SETRANGE("Fusion NH GUID", pFUSIONFeeNote."Fusion NH GUID");

      IF NOT lVendorLedgerEntry.ISEMPTY THEN
        lVendorLedgerEntry.MODIFYALL("On Hold", '', TRUE);
    END;

    PROCEDURE TreatDocAttachs@1100281009(pServiceHeader@1100281005 : Record 5900;VAR pXmlNodeList@1100281000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNodeList";VAR pErrorText@1100281009 : Text[250]) : Boolean;
    VAR
      lAttribute@1100281004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF83-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNamedNodeMap";
      lXmlDomElement@1100281003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
      lAttributeNode@1100281002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lDocAttach@1100281007 : Record 50021;
      lDocAttach2@1100281011 : Record 50021;
      lAttchFusionId@1100281006 : Text[40];
      lAttachKeysText@1100281008 : Text[250];
      i@1100281001 : Integer;
      lErrorText009@1100281010 : TextConst 'ENU="The attachment %1 is not a beneficiary. ";FRA=L''identifiant document joint SiTiers %1 n''est pas valide.';
      lErrorText010@1100281012 : TextConst 'ENU=Le No. attachment SiTiers is not valid for then Fusion GTA code.;FRA=L''identifiant document joint SiTiers ne correspond pas le code Fusion.';
      lInterfaceReference@1100281013 : Record 50164;
    BEGIN
      {
      <a:PiŠcesJointes>
      <a:PiŠceJointe>
        <a:DateCr‚ation>2010-09-14T10:53:59.067</a:DateCr‚ation>
        <a:Description>10 3M 89374 P.tif</a:Description>
        <a:Description2 i:nil="true" />
        <a:FusionPiŠceJointeId>b7cfe17e-43f7-4178-ac99-b9f5c504cb7b</a:FusionPiŠceJointeId>
        <a:IdentifiantPiŠceJointeSiTiers i:nil="true" />
        <a:NAV_InterventionLineNo i:nil="true" />
        <a:NAV_LineNo i:nil="true" />
        <a:NAV_ServiceHeaderNo i:nil="true" />
        <a:NAV_ServiceNo i:nil="true" />
        <a:NomFichier>\10 3M 89374 P.tif</a:NomFichier>
        <a:TailleOctet>176522</a:TailleOctet>
        <a:TypeMime>image/tiff</a:TypeMime>
        <a:Url>http://IMHDTC-TEST1/pjfusion.ashx?id=b7cfe17e-43f7-4178-ac99-b9f5c504cb7b</a:Url>
        </a:PiŠceJointe>
      </a:PiŠcesJointes>
      }

      FOR i := 0 TO pXmlNodeList.length()-1 DO BEGIN
        lXmlDomElement := pXmlNodeList.item(i);

        //<a:FusionPiŠceJointeId>df92bedc-d143-4838-8a58-4f3e29a7b61a</a:FusionPiŠceJointeId>
        lAttributeNode := lXmlDomElement.selectSingleNode('a:FusionPiŠceJointeId');
        lAttchFusionId := lAttributeNode.text;

        //<a:IdentifiantPiŠceJointeSiTiers i:nil="true"/>
        lAttributeNode := lXmlDomElement.selectSingleNode('a:IdentifiantPiŠceJointeSiTiers');
        lAttachKeysText := lAttributeNode.text;
        IF lAttachKeysText <> '' THEN BEGIN
          IF NOT FUSIONInterfaceMgt.GetDocAttachByKey(lAttachKeysText, lDocAttach) THEN BEGIN
            pErrorText := STRSUBSTNO(lErrorText009, lAttachKeysText);
            EXIT(FALSE);
          END;
          //<<IMH05
          {
          lDocAttach2.RESET;
          lDocAttach2.SETCURRENTKEY("GUID Fusion Code");
          lDocAttach2.SETRANGE("GUID Fusion Code", lAttchFusionId);
          lDocAttach2.SETRANGE(Deleted, FALSE);
          IF lDocAttach2.FINDFIRST THEN BEGIN
          }
          //>>IMH05
          IF lInterfaceReference.GetDocAttachByGUID(lDocAttach2, lAttchFusionId) THEN BEGIN
            IF (lDocAttach."Referent Table No." <> lDocAttach2."Referent Table No.")
               OR (lDocAttach."Key Integer 1" <> lDocAttach2."Key Integer 1")
               OR (lDocAttach."Key Integer 2" <> lDocAttach2."Key Integer 2")
               OR (lDocAttach."Key Code 1" <> lDocAttach2."Key Code 1")
               OR (lDocAttach."Key Code 2" <> lDocAttach2."Key Code 2")
               OR (lDocAttach."Entry No." <> lDocAttach2."Entry No.") THEN BEGIN
              pErrorText := lErrorText010;
              EXIT(FALSE);
            END;
          END ELSE BEGIN
            //<<IMH05
            //lDocAttach2."GUID Fusion Code" :=  lAttchFusionId;
            //lDocAttach2.MODIFY;
            lInterfaceReference.CreateByAttach(lDocAttach, lAttchFusionId);
            //>>IMH05
          END;

          //GetDocAttachment(pServiceHeader, lAttchFusionId, FALSE, lDocAttach, lAttachKeysText = '');
        END ELSE BEGIN
          //<<IMH05
          {
          lDocAttach2.RESET;
          lDocAttach2.SETCURRENTKEY("GUID Fusion Code");
          lDocAttach2.SETRANGE("GUID Fusion Code", lAttchFusionId);
          lDocAttach2.SETRANGE(Deleted, FALSE);
          IF lDocAttach2.ISEMPTY THEN BEGIN
          }
          IF NOT lInterfaceReference.GetDocAttachByGUID(lDocAttach2, lAttchFusionId) THEN BEGIN
          //>>IMH05
            //GetDocAttachment(pServiceHeader, lAttchFusionId, FALSE, lDocAttach, lAttachKeysText = '');
            TreatXMLDocAttach(pServiceHeader, lXmlDomElement, lAttchFusionId, lDocAttach, TRUE);
          END;
        END;
      END;
      EXIT(TRUE);
    END;

    PROCEDURE GetDocAttachment@1100281001(pServiceHeader@1100281000 : Record 5900;pAttchFusionId@1100281001 : Text[40];pCompressGZip@1100281002 : Boolean;VAR pDocAttach@1100281013 : Record 50021;pToCreate@1100281012 : Boolean);
    VAR
      lInterfaceSetup@1100281006 : Record 50139;
      lInStream@1100281005 : InStream;
      lOutStream@1100281004 : OutStream;
      lAdoStream@1100281003 : Automation "{2A75196C-D9EB-4129-B803-931327F72D5C} 2.8:{00000566-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.8 Library'.Stream";
      lwinHTTPService@1100281009 : Automation "{662901FC-6951-4854-9EB2-D9A2570F2B2E} 5.1:{2087C2F4-2CEF-4953-A8AB-66779B670495}:'Microsoft WinHTTP Services, version 5.1'.WinHttpRequest";
      lXmlDoc@1100281008 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lXmlDom@1100281007 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lTempFile@1100281010 : File;
      lFileName@1100281011 : Text[250];
    BEGIN
      //Generation de SOAP XML d'‚mission vers le WS Fusion
      lInterfaceSetup.GET;
      lInterfaceSetup.TESTFIELD("Fusion Get Attachment WS Url");
      CREATE(lAdoStream);
      lAdoStream.Open;
      lAdoStream.Charset('UTF-8');

      lAdoStream.WriteText('<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" ');
      lAdoStream.WriteText('xmlns:tem="http://tempuri.org/">');
      lAdoStream.WriteText('<soapenv:Header/>');
      lAdoStream.WriteText('<soapenv:Body>');

      lAdoStream.WriteText('<tem:GetPiŠceJointe>');
      lAdoStream.WriteText('<tem:piŠceJointeId>' +
          pAttchFusionId + '</tem:piŠceJointeId>');
      //IF pCompressGZip THEN
      //  lAdoStream.WriteText('<tem:compressionGzip>true</tem:compressionGzip>')
      //ELSE
      //  lAdoStream.WriteText('<tem:compressionGzip>false</tem:compressionGzip>');
      lAdoStream.WriteText('</tem:GetPiŠceJointe>');
      lAdoStream.WriteText('</soapenv:Body>');
      lAdoStream.WriteText('</soapenv:Envelope>');

      lTempFile.CREATETEMPFILE;
      lFileName := lTempFile.NAME + '.xml';
      lAdoStream.SaveToFile(lFileName);
      lAdoStream.Close;
      lTempFile.OPEN(lFileName);
      lTempFile.CREATEINSTREAM(lInStream);

      IF ISCLEAR(lwinHTTPService) THEN
        CREATE(lwinHTTPService);

      lwinHTTPService.Open('POST',lInterfaceSetup."Fusion Get Attachment WS Url",0);
      lwinHTTPService.SetAutoLogonPolicy(0);
      lwinHTTPService.SetRequestHeader('Content-type','text/xml; charset=UTF-8');
      lwinHTTPService.SetRequestHeader('SOAPAction','"http://tempuri.org/IEdiService/GetPiŠceJointe"');
      //The last parameter set to zero allows to wait till webservice finishes
      lwinHTTPService.SetTimeouts(10000,10000,10000,0);

      lwinHTTPService.Send(lInStream);
      CLEAR(lInStream);

      IF NOT lwinHTTPService.WaitForResponse(600) THEN ERROR('Request timed out.');

      CREATE(lXmlDom);

      lXmlDom.load(lwinHTTPService.ResponseStream);

      lTempFile.CLOSE;
      ERASE(lFileName);


      //TreatXMLDocAttach(pServiceHeader, lXmlDom, pAttchFusionId, pDocAttach, pToCreate);
    END;

    PROCEDURE TreatXMLDocAttach@1100281006(pServiceHeader@1100281000 : Record 5900;VAR pXmlDomElement@1100281007 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";pAttchFusionId@1100281015 : Text[40];VAR pDocAttach@1100281018 : Record 50021;pToCreate@1100281017 : Boolean);
    VAR
      lDocAttach@1100281002 : Record 50021;
      lCreateDateTime@1100281003 : DateTime;
      lDesc@1100281004 : Text[50];
      lDesc2@1100281005 : Text[50];
      lXmlNodeList@1100281009 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNodeList";
      lAttributeNode@1100281006 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lSourceAttchMgt@1100281008 : Codeunit 50003;
      lFileName@1100281010 : Text[250];
      lAttachmentTemp@1100281011 : TEMPORARY Record 5062;
      lAdoStream@1100281012 : Automation "{2A75196C-D9EB-4129-B803-931327F72D5C} 2.8:{00000566-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.8 Library'.Stream";
      lTempFile@1100281013 : File;
      lText@1100281014 : Text[1024];
      lOldFileName@1100281016 : Text[1024];
      lAttachMgt@1100281019 : Codeunit 50002;
      lInterfaceReference@1100281001 : Record 50164;
    BEGIN
      {
      <s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/">
      <s:Body>
      <GetPiŠceJointeResponse xmlns="http://tempuri.org/">
      <GetPiŠceJointeResult xmlns:a="http://schemas.datacontract.org/2004/07/Fusion.EDI" xmlns:i="http://www.w3.org/2001/XMLSchema-insta
        <a:CompressionGZip>false</a:CompressionGZip>
        <a:ContenuBinaire i:nil="true"/>
        <a:DateCr‚ation>2010-10-01T14:13:14.533</a:DateCr‚ation>
        <a:FusionPiŠceJointeId>df92bedc-d143-4838-8a58-4f3e29a7b61a</a:FusionPiŠceJointeId>
        <a:IdentifiantPiŠceJointeSiTiers i:nil="true" />
        <a:Libell‚>10 2M 31491 R RAPPEL.tif</a:Libell‚>
        <a:NomFichier>\10 2M 31491 R RAPPEL.tif</a:NomFichier>
        <a:TailleOctet>671026</a:TailleOctet>
        <a:TypeMime>image/tiff</a:TypeMime>
        </GetPiŠceJointeResult>
        </GetPiŠceJointeResponse>
      </s:Body>
      </s:Envelope>

        <xs:element minOccurs="0" name="DateCr‚ation" type="xs:dateTime" />
        <xs:element minOccurs="0" name="FusionPiŠceJointeId" nillable="true" type="ser:guid" />
        <xs:element minOccurs="0" name="IdentifiantPiŠceJointeSiTiers" nillable="true" type="xs:string" />
        <xs:element minOccurs="0" name="Libell‚" nillable="true" type="xs:string" />
        <xs:element minOccurs="0" name="NAV_InterventionLineNo" nillable="true" type="xs:int" />
        <xs:element minOccurs="0" name="NAV_LineNo" nillable="true" type="xs:int" />
        <xs:element minOccurs="0" name="NAV_ServiceHeaderNo" nillable="true" type="xs:string" />
        <xs:element minOccurs="0" name="NAV_ServiceNo" nillable="true" type="xs:string" />
        <xs:element minOccurs="0" name="NomFichier" nillable="true" type="xs:string" />
        <xs:element minOccurs="0" name="TailleOctet" type="xs:long" />
        <xs:element minOccurs="0" name="TypeMime" nillable="true" type="xs:string" />
        <xs:element minOccurs="0" name="Url" nillable="true" type="xs:string" />


      <a:PiŠceJointe>
        <a:DateCr‚ation>2010-09-14T10:53:59.067</a:DateCr‚ation>
        <a:Description>10 3M 89374 P.tif</a:Description>
        <a:Description2 i:nil="true" />
        <a:FusionPiŠceJointeId>b7cfe17e-43f7-4178-ac99-b9f5c504cb7b</a:FusionPiŠceJointeId>
        <a:IdentifiantPiŠceJointeSiTiers i:nil="true" />
        <a:NAV_InterventionLineNo i:nil="true" />
        <a:NAV_LineNo i:nil="true" />
        <a:NAV_ServiceHeaderNo i:nil="true" />
        <a:NAV_ServiceNo i:nil="true" />
        <a:NomFichier>\10 3M 89374 P.tif</a:NomFichier>
        <a:TailleOctet>176522</a:TailleOctet>
        <a:TypeMime>image/tiff</a:TypeMime>
        <a:Url>http://IMHDTC-TEST1/pjfusion.ashx?id=b7cfe17e-43f7-4178-ac99-b9f5c504cb7b</a:Url>
        </a:PiŠceJointe>
        </a:PiŠcesJointes>

      }

      //lXmlNodeList := pXmlDom.getElementsByTagName('GetPiŠceJointeResult');
      //lXmlDomElement := lXmlNodeList.item(0);

      //<a:DateCr‚ation>2010-10-01T14:13:14.533</a:DateCr‚ation>
      lAttributeNode := pXmlDomElement.selectSingleNode('a:DateCr‚ation');
      IF NOT EVALUATE(lCreateDateTime, lAttributeNode.text, 9) THEN
        CLEAR(lCreateDateTime);
      //<a:Libell‚>10 2M 31491 R RAPPEL.tif</a:Libell‚>
      lAttributeNode := pXmlDomElement.selectSingleNode('a:Description');
      lDesc := lAttributeNode.text;
      //<a:NomFichier>\10 2M 31491 R RAPPEL.tif</a:NomFichier>
      lAttributeNode := pXmlDomElement.selectSingleNode('a:NomFichier');
      lText := DELCHR(lAttributeNode.text,'=', '\/');
      IF STRLEN(lText) > MAXSTRLEN(lDesc2) THEN
        lDesc2 := COPYSTR(lText,
          STRLEN(lText) - MAXSTRLEN(lDesc2) + 1, MAXSTRLEN(lDesc2))
      ELSE
        lDesc2 := lText;
      {
      //<a:ContenuBinaire/>
      lAttributeNode := pXmlDomElement.selectSingleNode('a:ContenuBinaire');
      lAttributeNode.dataType := 'bin.base64';
      CREATE(lAdoStream);
      lAdoStream.Open;
      lAdoStream.Type := 1;

      lAdoStream.Write(lAttributeNode.nodeTypedValue);
      lTempFile.CREATETEMPFILE;
      lFileName := lTempFile.NAME + '_' + lDesc2;

      lAdoStream.SaveToFile(lFileName);
      lAdoStream.Close;
      }
      IF pToCreate THEN BEGIN
        lDocAttach.RESET;
        lDocAttach.SETRANGE("Service Document No.", pServiceHeader."No.");

        lDocAttach."Key Integer 1" := 0;
        lDocAttach."Key Integer 2" := 0;
        lDocAttach."Key Code 1" := '';
        lDocAttach."Key Code 2" := '';

        lDocAttach.Description := COPYSTR(lDesc,1,MAXSTRLEN(lDocAttach.Description));
        lDocAttach."Description 2" := COPYSTR(lDesc2,1,MAXSTRLEN(lDocAttach."Description 2"));
        //lDocAttach."GUID Fusion Code" := pAttchFusionId;
        lDocAttach."Storage Type" := pDocAttach."Storage Type"::Internet;
        lAttributeNode := pXmlDomElement.selectSingleNode('a:Url');
        lDocAttach."Storage Url" := lAttributeNode.text;

        lSourceAttchMgt.CreateAttachment(lDocAttach
          ,lFileName
          ,lAttachmentTemp);

        //lDocAttach."GUID Fusion Code" := pAttchFusionId;
        //lDocAttach.MODIFY(FALSE);
        lInterfaceReference.CreateByAttach(lDocAttach, pAttchFusionId);    //IMH05
        pDocAttach := lDocAttach;
      END ELSE BEGIN
        //si une MAJ document joint : replacer le document par le nouveau
        lOldFileName := lAttachMgt.GetFilePath(pDocAttach);
        IF EXISTS(lOldFileName) THEN BEGIN
          lDocAttach.RESET;
          lDocAttach.SETRANGE("Service Document No.", pServiceHeader."No.");
          lDocAttach := pDocAttach;
          lDocAttach."Key Integer 1" := 0;
          lDocAttach."Key Integer 2" := 0;
          lDocAttach."Key Code 1" := '';
          lDocAttach."Key Code 2" := '';
          lSourceAttchMgt.CreateAttachment(lDocAttach
            ,lOldFileName
            ,lAttachmentTemp);
          lDocAttach.Deleted := TRUE;
          lDocAttach.MODIFY(FALSE);

          ERASE(lOldFileName);
        END;
        COPY(lFileName, lOldFileName);
        pDocAttach.Description := COPYSTR(lDesc,1,MAXSTRLEN(lDocAttach.Description));
        pDocAttach."Description 2" := COPYSTR(lDesc2,1,MAXSTRLEN(lDocAttach."Description 2"));
        pDocAttach."Storage Type" := pDocAttach."Storage Type"::Internet;
        lAttributeNode := pXmlDomElement.selectSingleNode('a:Url');
        pDocAttach."Storage Url" := lAttributeNode.text;
        pDocAttach.MODIFY(TRUE);
      END;
    END;

    BEGIN
    {
      /** @r IMH06 @d 04/12/12 @a ISAT.ZW @v IMH6.01.220 @s Projet Facturation Fusion @c Ajout ParamŠtre fonction GetFusionServiceOrder */
      /** @r IMH05 @d 12/12/11 @a ISAT.ZW @v IMH6.01.136 @s Interface Fusion @c gestion table reference fusion Contact */
      /** @r IMH05 @d 12/12/11 @a ISAT.ZW @v IMH6.01.136 @s Interface Fusion @c gestion table reference fusion Contact */
      /** @r IMH04 @d 03/11/11 @a ISAT.ZW @v IMH6.01.136 @s Interface Fusion @c gestion table reference fusion  */
      /** @r IMH03 @d 18/08/11 @a ISAT.ST @v IMH6.01.136 @s Interface Fusion @c stabilisation */
      /** @r IMH02 @d 04/08/11 @a ISAT.ST @v IMH6.01.136 @s Interface Fusion @c Ajout de contr“les */
      /** @r IMH01 @d 12/04/11 @a ISAT.ZW @v IMH6.01.136 @s Interface Fusion @c cr‚ation */
    }
    END.
  }
}