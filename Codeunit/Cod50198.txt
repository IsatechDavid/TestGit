OBJECT Codeunit 50198 Extranet Interv. Web Serv.
{
  OBJECT-PROPERTIES
  {
    Date=16/05/14;
    Time=09:46:01;
    Modified=Yes;
    Version List=IMH6.01,LogWS,JUIN;
  }
  PROPERTIES
  {
    Permissions=TableData 18=rimd,
                TableData 25=r,
                TableData 38=r,
                TableData 39=r,
                TableData 122=r,
                TableData 123=r,
                TableData 225=rimd,
                TableData 5065=rimd,
                TableData 50000=rimd,
                TableData 50021=rimd,
                TableData 50053=rimd,
                TableData 50054=rimd,
                TableData 50058=rimd,
                TableData 50068=rimd,
                TableData 50075=rimd,
                TableData 50076=rimd,
                TableData 50079=rimd,
                TableData 50084=rimd,
                TableData 50139=rimd,
                TableData 50153=rimd,
                TableData 50189=rimd;
    OnRun=VAR
            lBigText@1000000000 : BigText;
            lText@1000000001 : Text[1024];
          BEGIN
            GLOBALLANGUAGE(1036);
          END;

  }
  CODE
  {
    VAR
      Text000@1100281000 : TextConst 'ENU=Provider %1 not found.;FRA=Prestataire %1 inexistant.';
      Text001@1100281001 : TextConst 'ENU=Service Header %1 not found.;FRA=Ligne de produit %1 inexistante.';
      Text003@1100281003 : TextConst 'ENU=Document Queue %1 %2 %3 not found.;FRA=Flux de document %1 %2 %3 inexistant.';
      Text004@1100281004 : TextConst 'ENU=Surname, Post Code and City mandatory.;FRA=Nom, code postal et ville obligatoires.';
      Text005@1100281005 : TextConst 'ENU=Intervention COntact already exists.;FRA=Contact intervention existe d‚j….';
      Text006@1100281006 : TextConst 'ENU=Beneficiarie Contact not modifiable.;FRA=Contact b‚n‚ficiaire non modifiable.';
      Text007@1100281007 : TextConst 'ENU=Intervention Contact not found.;FRA=Contact intervention inexistant.';
      Text008@1100281008 : TextConst 'ENU=Address not modified : same address.;FRA=Adresse non modifi‚e : adresse identique.';
      Text009@1100281009 : TextConst 'ENU=Post Code and City %1 %2 not valid;FRA=Code postal et ville %1 %2 invalides.';
      Text010@1100281010 : TextConst 'ENU=Provider Notification %1 %2 not found.;FRA=Notification prestataire %1 %2 inexistant.';
      Text011@1100281011 : TextConst 'ENU=Error during upload. Please retry.;FRA=Erreur de transfert du document, merci de renouveler l''op‚ration.';
      Text012@1100281012 : TextConst 'ENU=Document Attachment %1 %2 %3 not found.;FRA=Document joint %1 %2 %3 inexistant.';
      Text012b@1000000045 : TextConst 'ENU=Attached file %1 %2 %3 doesn''t exist.;FRA=Le fichier joint %1 %2 %3 n''existe pas.';
      Text013@1100281013 : TextConst 'ENU=Error to generate Temporary File.;FRA=Erreur g‚n‚ration fichier temporaire.';
      Text014@1100281014 : TextConst 'ENU=The Intervention Line %1 %2 is not emergency.;FRA=La ligne d''intervention %1 %2 n''est pas urgente.';
      Text015@1100281015 : TextConst 'ENU=Intervention Line %1 %2 (Line No.) not found.;FRA=Intervention %1 %2(nø ligne) inexistante.';
      Text016@1100281016 : TextConst 'ENU=New date proposed : %1;FRA=Nouvelle date propos‚e : %1';
      Text017@1100281017 : TextConst 'ENU=Invoice reconcilied;FRA=Facture rapprochee';
      Text018@1100281018 : TextConst 'ENU=Invoice not reconcilied;FRA=Facture non rapprochee';
      Text019@1100281019 : TextConst 'ENU=Financial invoice;FRA=Facture passee en comptabilite';
      Text020@1100281020 : TextConst 'ENU=Invoice paid or send to corporate;FRA=Facture reglee ou transmise au grande compte';
      InterfaceSetup@1100281021 : Record 50139;
      ToolsMgt@1100281025 : Codeunit 8016602;
      InterfaceSetupVers@1100281022 : DateTime;
      Text021@1100281023 : TextConst 'ENU=%1 reason code %2 unknown;FRA=Code motif %1 : %2 inconnu';
      Text022@1100281024 : TextConst 'ENU=Cancel;FRA=Annulation';
      Text023@1100281026 : TextConst 'ENU=Document don''t exist  : %1 - %2 - %3 - %4 - %5;FRA=Document inexistant : %1 - %2 - %3 - %4 - %5';
      Text024@1100281027 : TextConst 'ENU=Any document exist  : %1 - %2 - %3 - %4;FRA=Aucun document disponible : %1 - %2 - %3 - %4 (%5)';
      Text025@1100281028 : TextConst 'ENU=Intervention %1 from service header %2 haven''t current minutes with reserves.;FRA=L''intervention %1 de la ligne de produit %2 ne possŠde pas de PV en cours avec des reserves.';
      Text026@1100281029 : TextConst 'ENU=Update done;FRA=Mise … jour r‚alis‚e';
      Text027@1100281030 : TextConst 'ENU=Any value change (name and address);FRA=Pas de diff‚rence de valeurs (nom et adresse)';
      Text028@1100281031 : TextConst 'ENU=This document isn''t provider %1 document;FRA=Ce document ne concerne pas le prestataire %1';
      Text029@1000000041 : TextConst 'ENU=Invoice received.;FRA=Facture recue.';
      Text030@1000000043 : TextConst 'ENU=Document Attachment %1 %2 %3 doesn''t exist anymore.;FRA=Document joint %1 %2 %3 n''existe plus.';
      Text031@1000000044 : TextConst 'ENU=No intervention for service header %1.;FRA=Aucune intervention pour la ligne produit %1';
      Text100@1000000020 : TextConst 'FRA=Extranet';
      Text101a@1000000000 : TextConst 'FRA=DEFINITION DATE DE PREVISITE PREVISIONNELLE.';
      Text101b@1000000019 : TextConst 'FRA="D‚finition de la date de pr‚visite : "';
      Text102a@1000000001 : TextConst 'FRA=DATE DE PREVISITE PREVISIONNELLE NON PLANIFIEE.';
      Text102b@1000000016 : TextConst 'FRA=La pr‚visite n''a pas pu ˆtre planifi‚e.';
      Text102c@1000000017 : TextConst 'FRA=" Raison : "';
      Text102d@1000000018 : TextConst 'FRA=" Commentaire : "';
      Text103a@1000000002 : TextConst 'FRA=CONFIRMATION DATE DE PREVISITE PREVISIONNELLE.';
      Text104a@1000000003 : TextConst 'FRA=PREVISITE REELLE NON REALISEE.';
      Text104b@1000000021 : TextConst 'FRA=La pr‚visite n''a pas pu ˆtre r‚alis‚e.';
      Text104c@1000000023 : TextConst 'FRA=" Raison : "';
      Text104d@1000000022 : TextConst 'FRA=" Commentaire : "';
      Text104e@1000000024 : TextConst 'FRA="Date de replanification : "';
      Text104f@1000000052 : TextConst 'ENU=Not replanned.;FRA=Pas de replanification.';
      Text105a@1000000004 : TextConst 'FRA=CONFIRMATION DATE DE PREVISITE REELLE AVEC TH.';
      Text105b@1000000025 : TextConst 'FRA=La pr‚visite a bien eu lieu le %1.';
      Text105c@1000000027 : TextConst 'FRA=" Un problŠme d''humidit‚ (%1) a ‚t‚ constat‚."';
      Text105d@1000000026 : TextConst 'FRA=" Une nouvelle visite a ‚t‚ planifi‚e pour le %1."';
      Text105e@1000000028 : TextConst 'FRA=" La cause n''est pas r‚par‚e."';
      Text106a@1000000005 : TextConst 'FRA=CONFIRMATION DATE DE PREVISITE REELLE AVEC CAUSE NON REPAREE.';
      Text107a@1000000006 : TextConst 'FRA=AJOUT DE DEVIS.';
      Text107b@1000000033 : TextConst 'FRA=Proposition de devis. Devis (ref : %1 - montant TTC : %2).';
      Text108a@1000000007 : TextConst 'FRA=DEFINITION DATE DE DEBUT ET FIN PREVISIONNELLES DE TRAVAUX.';
      Text108b@1000000029 : TextConst 'FRA=D‚finition date de d‚marrage des travaux : le %1.';
      Text108c@1000000030 : TextConst 'FRA=" Date de fin de travaux : le %2."';
      Text109a@1000000008 : TextConst 'FRA=CONFIRMATION DATE DE TRAVAUX.';
      Text109b@1000000031 : TextConst 'FRA=Confirmation date de d‚marrage des travaux : le %1.';
      Text109c@1000000032 : TextConst 'FRA=" Date de fin de travaux : le %2."';
      Text110a@1000000009 : TextConst 'FRA=CONFIRMATION FIN DE TRAVAUX.';
      Text110b@1000000034 : TextConst 'FRA=Confirmation date de fin des travaux : le %1.';
      Text111a@1000000010 : TextConst 'FRA=INFORMATION TRAVAUX PAS TERMINES.';
      Text111b@1000000035 : TextConst 'FRA=Les travaux ne se sont pas termin‚s le %1 comme pr‚vu.';
      Text111c@1000000036 : TextConst 'FRA=" Raison : %1."';
      Text111d@1000000037 : TextConst 'FRA=" Pr‚cision : %1. "';
      Text111e@1000000038 : TextConst 'FRA=" Fin des travaux replanifi‚e le %1."';
      Text112a@1000000011 : TextConst 'FRA=ENVOI PV DE FIN TRAVAUX SANS RESERVES.';
      Text112b@1000000039 : TextConst 'FRA=Envoi de PV.';
      Text113a@1000000012 : TextConst 'FRA=ENVOI PV DE FIN DE TRAVAUX AVEC RESERVES.';
      Text114a@1000000013 : TextConst 'FRA=PV DE REPRISE DES TRAVAUX.';
      Text115a@1000000014 : TextConst 'FRA=DEMANDE DE CONTACT PAR IMH.';
      Text115b@1000000040 : TextConst 'FRA="Etre contact‚ par IMH. Raison : "';
      Text116a@1000000015 : TextConst 'FRA=ENVOI SUIVI PAR LE PRESTATAIRE EXTRANET.';
      ExtrFct@1000000042 : Codeunit 50204;
      Text117a@1000000046 : TextConst 'ENU=WORK UNSTARTED;FRA=TRAVAUX NON DEMARRES.';
      Text117b@1000000047 : TextConst 'ENU=Work doesn''t start on %1 like expected.;FRA=Les travaux n''ont pas d‚marr‚s le %1 comme pr‚vu.';
      Text117c@1000000048 : TextConst 'ENU=Work start date replanned %1;FRA=D‚but des travaux replanifi‚ le %1';
      Text117d@1000000049 : TextConst 'ENU=" expected work end date replanned %1";FRA=" fin des travaux pr‚vue le %1"';
      Text118a@1000000050 : TextConst 'ENU=WORK UNPLANNED;FRA=TRAVAUX NON PLANIFIES.';
      Text118b@1000000051 : TextConst 'ENU=Work can''t be planned.;FRA=Les travaux n''ont pas pu ˆtre planifi‚s.';
      Text119@1000000053 : TextConst 'ENU=Update ship-to Address;FRA=Mise … jour adresse MEO';

    PROCEDURE UpdateDocumentQualification@1100281000(pProviderNo@1100281000 : Code[20];pFlowCode@1100281003 : Code[10];pDocEntryNo@1100281004 : Integer;pDocumentNature@1100281006 : Integer;pServiceHeaderNo@1100281002 : Code[20];pInterventionNo@1100281001 : Integer) : Boolean;
    VAR
      lProvider@1100281007 : Record 50000;
      lDocumentQueue@1100281005 : Record 50054;
      lIntervLine@1100281008 : Record 50075;
      lDocQueuePost@1100281009 : Codeunit 50008;
      lGUID@1000000000 : GUID;
    BEGIN
      // IMH01 ISAT.EB --> A tester (10/08/2011)
      {
      Rubrique 11.04
      0000654: Web Service SOAP : Qualification d'un document + liaison … une intervention

      Colonnes attendues :
      - Retour de confirmation du succŠs de l'op‚ration

      ParamŠtres :
      - Identifiant systŠme NAV du document
      - Nature du document
      - Identifiant de l'intervention NAV

      ParamŠtres d‚finitifs :
      - pProviderNo : Nø prestataire
      - pFlowCode : Code workflow (premiŠre partie de l'identifiant Nav du document)
      - pDocEntryNo : Nø s‚quence (seconde partie de l'identifiant Nav du document)
      - pDocumentNature : valeur entiŠre de la nature de document
      - pServiceHeaderNo : nø entˆte de service (premiŠre partie de l'identifiant de l'intervention Nav)
      - pInterventionNo : Nø intervention (seconde partie de l'identifiant de l'intervention Nav)
      }
      GLOBALLANGUAGE(1036);

      //<<IMH65.PC
      ExtrFct.Initial(
        2,'UpdateDocumentQualification',
        STRSUBSTNO(
          '%1-%2-%3-%4-%5-%6',
          pProviderNo,pFlowCode,pDocEntryNo,pDocumentNature,pServiceHeaderNo,pInterventionNo),
        lGUID);
      //>>IMH65.PC

      // R‚cup‚rer le prestataire
      IF NOT lProvider.GET(pProviderNo) THEN
        ERROR(Text000,pProviderNo);

      // R‚cup‚rer le document
      IF NOT lDocumentQueue.GET(pFlowCode,lDocumentQueue."Queue Type"::Receipt,pDocEntryNo) THEN
        ERROR(Text003,pFlowCode,FORMAT(lDocumentQueue."Queue Type"::Receipt),pDocEntryNo);

      IF pProviderNo <> lDocumentQueue."Contact No." THEN BEGIN
        ERROR(Text028,pProviderNo);
      END;

      // R‚cup‚rer l'intervention
      IF (pServiceHeaderNo <> '') AND (pInterventionNo <> 0) THEN BEGIN
        IF NOT ExtrFct.GetInterv(pServiceHeaderNo, pInterventionNo,TRUE, lIntervLine) THEN
          EXIT;
      END;

      //<<IMH35.ST
      WITH lDocumentQueue DO BEGIN
        // Mettre … jour le type de document
        VALIDATE("Document Type",pDocumentNature);

        // Lier le document … l'intervention
        IF (pServiceHeaderNo <> '') AND (pInterventionNo <> 0) THEN BEGIN
          "Service Document Type" := "Service Document Type"::Intervention;
          VALIDATE("Service Document No.",pServiceHeaderNo);
          VALIDATE("Service Intervention Line No.",lIntervLine."Line No.");
        END;

        CASE "Document Type" OF
          "Document Type"::Minutes : BEGIN
            ExtrFct.CreateIntervCommentText(lIntervLine,Text112b, CURRENTDATETIME, '');
            AutoCreateMinute(lIntervLine); //IMH49.ST
          END;
        END;
      //<<IMH61.ST
        IF "Document Type" IN ["Document Type"::Invoice, "Document Type"::Minutes, "Document Type"::Quote] THEN BEGIN
          TESTFIELD("Service Document No.");
          TESTFIELD("Service Intervention Line No.");
        END;
      //>>IMH61.ST

        "Status To Qualify" := "Status To Qualify"::Treated;
        MODIFY(TRUE);

        //<<IMH.PC
        Status := Status::Done;
        //>>IMH.PC

        MODIFY(FALSE);
      END;

      {
      //<<IMH.PC
      lDocumentQueue.SETRECFILTER;
      CLEAR(lDocQueuePost);
      lDocQueuePost.SetHideError(TRUE);
      lDocQueuePost.RUN(lDocumentQueue);
      IF lDocumentQueue.FIND THEN BEGIN
        lDocumentQueue.DELETE(TRUE);
      //>>IMH.PC
      END;
      }
      //>>IMH35.ST

      //<<IMH65.PC
      ExtrFct.Finish(lGUID);
      //>>IMH65.PC

      EXIT(TRUE);
    END;

    PROCEDURE ListDocumentToQualify@1100281009(pProviderNo@1100281000 : Code[20];VAR pDocumentList@1100281001 : BigText);
    VAR
      lProvider@1100281002 : Record 50000;
      lDocumentQueue@1100281003 : Record 50054;
      lDocumentAttachment@1100281007 : Record 50021;
      lDocumentFlow@1100281013 : Record 50053;
      lXMLDoc@1100281008 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lXMLNode1@1100281009 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lXMLNode2@1100281010 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lXMLNode3@1100281011 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lXMLMgt@1100281012 : Codeunit 8016710;
      linStream@1100281005 : InStream;
      lFileName@1100281014 : Text[1024];
      lFile@1100281006 : File;
      RBAutoMgt@1100281004 : Codeunit 419;
      lGUID@1000000000 : GUID;
    BEGIN
      // IMH22 ISAT.EB --> A tester (22/08/2011)
      {
      Rubrique 11.04

      0000652: Requˆte SQL : Liste des documents en attente de qualification pour un prestataire
      Colonnes attendues :
      - Identifiant systŠme NAV du document
      - Nom du document
      - Type (extension du fichier) du document
      - Taille (en octet) du document
      - Date et heure de r‚ception du document
      - Source du document (Email, Fax,... ?)
      - Toutes autres informations utiles permettant de t‚l‚charger le contenu binaire du document

      CritŠres de filtrage :
      - Identifiant systŠme du prestataire

      ParamŠtres d‚finitfs :
      - En entr‚e
        - pProviderNo
      - En sortie
        - DocumentList : Dataset des documents
          - Document
             - pFlowCode : Code workflow (premiŠre partie de l'identifiant Nav du document)
             - pDocEntryNo : Nø s‚quence document (seconde partie de l'identifiant Nav du document)
             - pAttachEntryNo : Nø s‚quence piŠce (troisiŠme partie de l'identifiant Nav du document)
             - pDocName : Nom du document
             - pDocSize : Taille du document
             - pDocType : Type du document
             - pDocSource : source du document
             - pDocDate : date du document
             - pTableID : Cl‚ primaire
             - pKeyInteger1 : Cl‚ primaire
             - pKeyInteger2 : Cl‚ primaire
             - pKeyCode1 : Cl‚ primaire
             - pKeyCode2 : Cl‚ primaire
             - pEntryNo : Cl‚ primaire
             - pServiceHeaderNo : Nø ligne de produit
             - pInterventionLineNo : Nø de ligne de produit
             - pInterventionQuoteLineNo : Nø ligne devis
             - pDocumentType : type du document si connu
      }
      GLOBALLANGUAGE(1036);

      //<<IMH65.PC
      ExtrFct.Initial(2,'ListDocumentToQualify',pProviderNo,lGUID);
      //>>IMH65.PC

      // R‚cup‚ration du prestataire
      IF NOT lProvider.GET(pProviderNo) THEN
        ERROR(Text000,pProviderNo);

      lXMLMgt.CreateXml(lXMLDoc,'<DocumentList />',lXMLNode1);
      lDocumentQueue.SETCURRENTKEY("Contact No.");
      lDocumentQueue.SETRANGE("Contact No.",pProviderNo);
      // *** Code … activer pour passage en exploitation
      //lDocumentQueue.SETRANGE("Status To Qualify",lDocumentQueue."Status To Qualify"::"To Qualify");
      lDocumentQueue.SETFILTER("Status To Qualify",'%1|%2',
                               lDocumentQueue."Status To Qualify"::" ",
                               lDocumentQueue."Status To Qualify"::"To Qualify");
      IF NOT lDocumentQueue.ISEMPTY THEN BEGIN
        lDocumentQueue.FINDSET(FALSE);
        REPEAT
          //<<IMH29.ISAT.EBA
          IF NOT lDocumentFlow.GET(lDocumentQueue."Flow Code") THEN
            lDocumentFlow.INIT;
          //>>IMH29.ISAT.EBA

          lDocumentAttachment.RESET;
          lDocumentAttachment.SETRANGE("Referent Table No.",DATABASE::"Document Queue");
          lDocumentAttachment.SETRANGE("Key Integer 1",lDocumentQueue."Queue Type");
          lDocumentAttachment.SETRANGE("Key Integer 2",lDocumentQueue."Entry No.");
          lDocumentAttachment.SETRANGE("Key Code 1",lDocumentQueue."Flow Code");
          lDocumentAttachment.SETRANGE(Deleted, FALSE); //IMH46.ST
          IF NOT lDocumentAttachment.ISEMPTY THEN BEGIN
            lDocumentAttachment.FINDSET(FALSE);
            REPEAT
              lXMLMgt.AddElement(lXMLNode1,'Document','','',lXMLNode2);
              IF lDocumentAttachment."Key Code 1" <> '' THEN
                lXMLMgt.AddElement(lXMLNode2,'pFlowCode',lDocumentAttachment."Key Code 1",'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'pDocEntryNo',FORMAT(lDocumentAttachment."Key Integer 2"),'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'pAttachEntryNo',FORMAT(lDocumentAttachment."Entry No."),'',lXMLNode3);
              IF lDocumentAttachment.Description <> '' THEN
                //<<IMH53.PC
                //lXMLMgt.AddElement(lXMLNode2,'pDocName',lDocumentAttachment.Description,'',lXMLNode3)
                lXMLMgt.AddElement(lXMLNode2,'pDocName',ToolsMgt.ReplaceSpecialChar(lDocumentAttachment.Description),'',lXMLNode3)
                //>>IMH53.PC
              ELSE
              //>>IMH29.ISAT.EBA
                //<<IMH53.PC
                //lXMLMgt.AddElement(lXMLNode2,'pDocName',lDocumentAttachment."Description 2",'',lXMLNode3);
                lXMLMgt.AddElement(lXMLNode2,'pDocName',ToolsMgt.ReplaceSpecialChar(lDocumentAttachment."Description 2"),'',lXMLNode3);
                //>>IMH53.PC
              IF lDocumentAttachment."File Size" <> 0 THEN
                lXMLMgt.AddElement(lXMLNode2,'pDocSize',FORMAT(lDocumentAttachment."File Size"),'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'pDocType',lDocumentAttachment."File Extension",'',lXMLNode3);
              IF lDocumentFlow."Default Channel" <> '' THEN
                lXMLMgt.AddElement(lXMLNode2,'pDocSource',lDocumentFlow."Default Channel",'',lXMLNode3);
              //<<IMH29.ISAT.EBA
              //IF lDocumentQueue."Document Date" <> 0D THEN
              //  lXMLMgt.AddElement(lXMLNode2,'pDocDate',FORMAT(lDocumentQueue."Document Date",0,'<Year4>-<Month,2>-<Day,2>'),
              //          '',lXMLNode3);

              IF lDocumentAttachment."Creation Date" <> 0DT THEN
                lXMLMgt.AddElement(lXMLNode2,'pDocDate',FORMAT(lDocumentAttachment."Creation Date",0,9),'',lXMLNode3);
              //>>IMH29.ISAT.EBA
              //<<IMH32.PC
              lXMLMgt.AddElement(lXMLNode2,'pTableID',FORMAT(lDocumentAttachment."Referent Table No.",0,1),'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'pKeyInteger1',FORMAT(lDocumentAttachment."Key Integer 1",0,1),'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'pKeyInteger2',FORMAT(lDocumentAttachment."Key Integer 2",0,1),'',lXMLNode3);
              IF lDocumentAttachment."Key Code 1" <> '' THEN BEGIN
                lXMLMgt.AddElement(lXMLNode2,'pKeyCode1',lDocumentAttachment."Key Code 1",'',lXMLNode3);
              END;
              IF lDocumentAttachment."Key Code 2" <> '' THEN BEGIN
                lXMLMgt.AddElement(lXMLNode2,'pKeyCode2',lDocumentAttachment."Key Code 2",'',lXMLNode3);
              END;
              lXMLMgt.AddElement(lXMLNode2,'pKeyEntryNo',FORMAT(lDocumentAttachment."Entry No.",0,1),'',lXMLNode3);
              IF lDocumentAttachment."Service Document No." <> '' THEN BEGIN
                lXMLMgt.AddElement(lXMLNode2,'pServiceHeaderNo',lDocumentAttachment."Service Document No.",'',lXMLNode3);
              END;
              lXMLMgt.AddElement(lXMLNode2,'pInterventionLineNo',FORMAT(lDocumentAttachment."Service Intervention Line No.",0,1),
                '',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'pInterventionQuoteLineNo',FORMAT(lDocumentAttachment."Intervention Quote Line No.",0,1),
                '',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'pDocumentType',FORMAT(lDocumentAttachment."Document Queue Type",0,9),
                '',lXMLNode3);
              //>>IMH32.PC
            UNTIL lDocumentAttachment.NEXT = 0;
          END;
        UNTIL lDocumentQueue.NEXT = 0;
      END;

      lFileName := ExtrFct.GetTempFilename('xml');
      lXMLDoc.save(lFileName);
      IF lFile.OPEN(lFileName) THEN BEGIN
        lFile.CREATEINSTREAM(linStream);
        pDocumentList.READ(linStream);
        lFile.CLOSE;
        ERASE(lFileName);
      END ELSE BEGIN
        ERROR(Text013);
      END;

      //<<IMH65.PC
      ExtrFct.Finish(lGUID);
      //>>IMH65.PC
    END;

    PROCEDURE AddContact@1100281001(pServiceHeaderNo@1100281013 : Code[20];pContactSalutationCode@1100281014 : Code[10];pContactSurname@1100281012 : Text[30];pContactFirstName@1100281005 : Text[30];pContactAddress@1100281011 : Text[50];pContactAddress2@1100281010 : Text[50];pContactPostCode@1100281009 : Code[20];pContactCity@1100281008 : Text[30];pContactCountryCode@1100281017 : Code[10];pContactComment@1100281016 : Text[80];pContactPhoneNo@1100281007 : Text[30];pContactMobilePhoneNo@1100281006 : Text[20];pExtranetUserNo@1100281004 : Code[20];pExtranetUserName@1100281003 : Text[50];pExtranetUserFirstName@1100281002 : Text[50]) : Boolean;
    VAR
      lServiceHeaderAddress@1100281001 : Record 50068;
      lRecref@1100281000 : RecordRef;
      lChangeLogMgt@1100281015 : Codeunit 423;
      lToolsMgt@1100281018 : Codeunit 8016602;
      lGUID@1000000000 : GUID;
    BEGIN
      // IMH02 ISAT.EB --> A tester (10/08/2011)
      {
      Rubrique 11.06
      0000684: Web Service SOAP : Cr‚ation d'un contact

      Colonnes attendues :
      - Retour de confirmation du succŠs de l'op‚ration

      ParamŠtres :
      - Identifiant Navision de l'intervention (ou du service ?)
      - Civilit‚ du contact --> Correspondance via table 8016748 + partenaire extranet … cr‚er
      - Nom du contact
      - Pr‚nom du contact
      - T‚l‚phone(s) du contact
      - Adresse postale complŠte
      - Commentaire ‚ventuel

      ParamŠtres d‚finitifs :
      - pServiceHeaderNo : nø entˆte de service
      - pContactSalutationCode : Code appellation pour la civilit‚
      - pContactSurname : nom (patronyme)
      - pContactFirstName : Pr‚nom
      - pContactAddress : adresse 1
      - pContactAddress2 : Adresse 2
      - pContactPostCode : Code postal
      - pContactCity : Ville
      - pContactCountryCode : Code pays
      - pContactComment : commentaire
      - pContactPhoneNo : Nø t‚l‚phone
      - pContactMobilePhoneNo : Nø mobile
      - pExtranetUserNo : Nø utilisateur Extranet
      - pExtranetUserName : Nom utilisateur Extranet
      - pExtranetUserFirstName : Pr‚nom utilisateur extranet
      }
      GLOBALLANGUAGE(1036);

      //<<IMH65.PC
      ExtrFct.Initial(
        2,'AddContact',
        STRSUBSTNO(
          '%1-%2-%3-%4-%5-%6-%7-%8-%9-%10-%11-%12',
          pServiceHeaderNo,pContactSalutationCode,pContactSurname,pContactFirstName,pContactAddress,pContactAddress2,
          pContactPostCode,pContactCity,pContactCountryCode,pContactComment,pContactPhoneNo,pContactMobilePhoneNo),
        lGUID);
      //>>IMH65.PC

      IF (pContactSurname = '') OR
         (pContactPostCode = '') OR
         (pContactCity = '') THEN
        ERROR(Text004);

      // *** Test des codes postaux
      IF NOT lToolsMgt.CheckCity2(pContactPostCode,pContactCity) THEN
        ERROR(Text009,pContactPostCode,pContactCity);

      lServiceHeaderAddress.RESET;
      lServiceHeaderAddress.SETRANGE("Service Header No.",pServiceHeaderNo);
      lServiceHeaderAddress.SETRANGE("Address Type",lServiceHeaderAddress."Address Type"::"Annexe Contact");
      lServiceHeaderAddress.SETRANGE("Salutation Code",pContactSalutationCode);
      lServiceHeaderAddress.SETRANGE(Surname,pContactSurname);
      lServiceHeaderAddress.SETRANGE("First Name",pContactFirstName);
      lServiceHeaderAddress.SETRANGE(Address,pContactAddress);
      lServiceHeaderAddress.SETRANGE("Address 2",pContactAddress2);
      lServiceHeaderAddress.SETRANGE("Post Code",pContactPostCode);
      lServiceHeaderAddress.SETRANGE(City,pContactCity);
      lServiceHeaderAddress.SETRANGE("Phone No.",pContactPhoneNo);
      lServiceHeaderAddress.SETRANGE("Mobile Phone No.",pContactMobilePhoneNo);
      IF NOT lServiceHeaderAddress.ISEMPTY THEN
        ERROR(Text005);

      GetInterfaceSetup;
      lServiceHeaderAddress.INIT;
      lServiceHeaderAddress.VALIDATE("Service Header No.",pServiceHeaderNo);
      lServiceHeaderAddress.VALIDATE("Address Type",lServiceHeaderAddress."Address Type"::"Annexe Contact");
      lServiceHeaderAddress.VALIDATE("Salutation Code",pContactSalutationCode);
      lServiceHeaderAddress.VALIDATE(Surname,pContactSurname);
      lServiceHeaderAddress.VALIDATE("First Name",pContactFirstName);
      lServiceHeaderAddress.VALIDATE(Address,pContactAddress);
      lServiceHeaderAddress.VALIDATE("Address 2",pContactAddress2);
      lServiceHeaderAddress.City := pContactCity;
      lServiceHeaderAddress.VALIDATE("Post Code",pContactPostCode);
      lServiceHeaderAddress.City := pContactCity;
      lServiceHeaderAddress.VALIDATE("Country/Region Code",pContactCountryCode);
      lServiceHeaderAddress.VALIDATE(Comment,pContactComment);
      lServiceHeaderAddress.VALIDATE("Phone No.",pContactPhoneNo);
      lServiceHeaderAddress.VALIDATE("Mobile Phone No.",pContactMobilePhoneNo);
      lServiceHeaderAddress."Role Code" := InterfaceSetup."Default Role Code";
      lServiceHeaderAddress.INSERT(TRUE);

      lServiceHeaderAddress."Creation User ID" := pExtranetUserName;
      lServiceHeaderAddress."Last Modification User ID" := pExtranetUserName;
      lServiceHeaderAddress.MODIFY(FALSE);

      lRecref.GETTABLE(lServiceHeaderAddress);
      lChangeLogMgt.LogInsertion(lRecref);

      //<<IMH65.PC
      ExtrFct.Finish(lGUID);
      //>>IMH65.PC

      EXIT(TRUE);
    END;

    PROCEDURE UpdateContact@1100281002(pServiceHeaderNo@1100281018 : Code[20];pAddressNo@1100281016 : Integer;pContactSalutationCode@1100281017 : Code[10];pContactSurName@1100281015 : Text[30];pContactFirstName@1100281019 : Text[30];pContactAddress@1100281014 : Text[50];pContactAddress2@1100281013 : Text[50];pContactPostCode@1100281012 : Code[20];pContactCity@1100281011 : Text[30];pContactCountryCode@1100281020 : Code[10];pContactComment@1100281021 : Text[80];pContactPhoneNo@1100281010 : Text[30];pContactMobilePhoneNo@1100281009 : Text[20];pExtranetUserNo@1100281008 : Code[20];pExtranetUserName@1100281007 : Text[50];pExtranetUserFirstName@1100281006 : Text[50]) : Boolean;
    VAR
      lServiceHeader@1100281022 : Record 5900;
      lxServHeader@1000000000 : Record 5900;
      lService@1100281025 : Record 50066;
      lServiceHeaderAddress@1100281005 : Record 50068;
      lXRecServiceHeaderAddress@1100281003 : Record 50068;
      lPostCode@1100281024 : Record 225;
      lToolsMgt@1100281001 : Codeunit 8016602;
      lChangeLogMgt@1100281000 : Codeunit 423;
      lCommentNotificationMgt@1100281029 : Codeunit 50148;
      lProviderNotificationMgt@1100281027 : Codeunit 50148;
      lRecref@1100281004 : RecordRef;
      lXRecref@1100281002 : RecordRef;
      lToModify@1100281023 : Boolean;
      lToModifyService@1100281026 : Boolean;
      lGUID@1100281028 : GUID;
    BEGIN
      // IMH03 ISAT.EB --> A tester (10/08/2011)
      // Attention Pas de modification de contact b‚n‚ficiaire --> pAddressNo = 0
      // Attention uniquement type adresse = contact annexe
      {
      Rubrique 11.06
      0000685: Web Service SOAP : Modification d'un contact

      Colonnes attendues :
      - Retour de confirmation du succŠs de l'op‚ration

      ParamŠtres :
      - Identifiant Navision du contact
       - Civilit‚ du contact
       - Nom du contact
       - Pr‚nom du contact
       - T‚l‚phone(s) du contact
      - Adresse postale complŠte
      - Commentaire ‚ventuel

      ParamŠtres d‚finitifs :
      - pServiceHeaderNo : nø entˆte de service
      - pAddressNo : Nø adresse
      - pContactSalutationCode : Code appellation pour la civilit‚
      - pContactSurname : nom (patronyme)
      - pContactFirstName : Pr‚nom
      - pContactAddress : adresse 1
      - pContactAddress2 : Adresse 2
      - pContactPostCode : Code postal
      - pContactCity : Ville
      - pContactPhoneNo : Nø t‚l‚phone
      - pContactMobilePhoneNo : Nø mobile
      - pExtranetUserNo : Nø utilisateur Extranet
      - pExtranetUserName : Nom utilisateur Extranet
      - pExtranetUserFirstName : Pr‚nom utilisateur extranet
      }
      GLOBALLANGUAGE(1036);

      //<<IMH65.PC
      ExtrFct.Initial(
        2,'UpdateContact',
        STRSUBSTNO(
          '%1-%2-%3-%4-%5-%6-%7-%8-%9-%10-%11-%12-%13',
          pServiceHeaderNo,pAddressNo,pContactSalutationCode,pContactSurName,pContactFirstName,pContactAddress,
          pContactAddress2,pContactPostCode,pContactCity,pContactCountryCode,pContactComment,pContactPhoneNo,pContactMobilePhoneNo),
        lGUID);
      //>>IMH65.PC

      //<<IMH33.PC
      // Modification de l'adresse de mise en oeuvre
      //IF pAddressNo <= 0 THEN begin
      //  ERROR(Text006);
      // V‚rification si le service existe
      IF NOT lServiceHeader.GET(lServiceHeader."Document Type"::Invoice,pServiceHeaderNo) THEN BEGIN
        ERROR(Text001,pServiceHeaderNo);
      END;

      IF pAddressNo <= 0 THEN BEGIN

        IF (pContactPostCode <> '') AND (pContactCity <> '') THEN BEGIN
          IF NOT lToolsMgt.CheckCity2(pContactPostCode,pContactCity) THEN BEGIN
            ERROR(Text009,pContactPostCode,pContactCity);
          END;
        END;

        lPostCode.SETRANGE(Code,pContactPostCode);
        lPostCode.SETRANGE("City (Without Accent)",pContactCity);
        IF lPostCode.FINDFIRST THEN BEGIN
          pContactCity := lPostCode.City
        END;

        //IF (lService."Contact Salutation Code" = pContactSalutationCode) AND
        //   (lServiceHeader."Contact Name" = (pContactFirstName + ' ' + pContactSurName)) AND
        IF (lServiceHeader."Ship-to Address" = pContactAddress) AND
           (lServiceHeader."Ship-to Address 2" = pContactAddress2) AND
           (lServiceHeader."Ship-to City" = pContactCity) AND
           (lServiceHeader."Ship-to Post Code" = pContactPostCode) AND
           (lServiceHeader."Ship-to Phone" = pContactPhoneNo) AND
           (lServiceHeader."Ship-to Mobile Phone No." = pContactMobilePhoneNo) AND
           (lServiceHeader."Ship-to Country/Region Code" = pContactCountryCode)
        THEN BEGIN
          EXIT(TRUE);
        END;

        {
        lService.GET(lServiceHeader."Service No.");
        lToModify := FALSE;
        lToModifyService := FALSE;
        IF (lService."Contact Salutation Code" <> pContactSalutationCode) THEN BEGIN
          lService.VALIDATE("Contact Salutation Code",pContactSalutationCode);
          lToModify := TRUE;
          lToModifyService := FALSE;
        END;
        IF (lServiceHeader."Contact Name" <> (pContactFirstName + ' ' + pContactSurName)) THEN BEGIN
          lServiceHeader."Contact Name" := pContactFirstName + ' ' + pContactSurName;
          lService."Contact Name" := pContactFirstName + ' ' + pContactSurName;
          lToModify := TRUE;
          lToModifyService := FALSE;
        END;
        IF lToModifyService THEN BEGIN
          lService.MODIFY(TRUE);
        END;
        }

        lxServHeader := lServiceHeader; //IMH48.ST
        IF (lServiceHeader."Ship-to Address" <> pContactAddress) THEN BEGIN
          lServiceHeader."Ship-to Address" := pContactAddress;
          lToModify := TRUE;
        END;
        IF (lServiceHeader."Ship-to Address 2" <> pContactAddress2) THEN BEGIN
          lServiceHeader."Ship-to Address 2" := pContactAddress2;
          lToModify := TRUE;
        END;
        IF (lServiceHeader."Ship-to City" <> pContactCity) THEN BEGIN
          lServiceHeader.VALIDATE("Ship-to City",pContactCity);
          lToModify := TRUE;
        END;
        IF (lServiceHeader."Ship-to Post Code" <> pContactPostCode) THEN BEGIN
          lServiceHeader.VALIDATE("Ship-to Post Code",pContactPostCode);
          lToModify := TRUE;
        END;
        IF (lServiceHeader."Ship-to Phone" <> pContactPhoneNo) THEN BEGIN
          lServiceHeader."Ship-to Phone" := pContactPhoneNo;
          lToModify := TRUE;
        END;
        IF (lServiceHeader."Ship-to Mobile Phone No." <> pContactMobilePhoneNo) THEN BEGIN
          lServiceHeader."Ship-to Mobile Phone No." := pContactMobilePhoneNo;
          lToModify := TRUE;
        END;
        IF lServiceHeader."Ship-to Country/Region Code" <> pContactCountryCode THEN BEGIN
          lServiceHeader."Ship-to Country/Region Code" := pContactCountryCode;
          lToModify := TRUE;
        END;
        IF lToModify THEN BEGIN
          lCommentNotificationMgt.CreateNotifFromServHeader(lServiceHeader,lxServHeader);
          lServiceHeader.MODIFY(TRUE);
        END;

        // Mise … jour de l'AddressCr‚ation ligne activit‚ corbeille
        GetInterfaceSetup;
        IF InterfaceSetup."Update Ship-to Add. Task Code" <> '' THEN BEGIN
          ExtrFct.CreateTrayLineServHeader(lServiceHeader,InterfaceSetup."Update Ship-to Add. Task Code");
        END;
        EXIT(TRUE);
      END;
      //>>IMH33.PC

      lServiceHeaderAddress.RESET;
      lServiceHeaderAddress.SETRANGE("Service Header No.",pServiceHeaderNo);
      lServiceHeaderAddress.SETRANGE("Address Type",lServiceHeaderAddress."Address Type"::"Annexe Contact");
      lServiceHeaderAddress.SETRANGE("Address No.",pAddressNo);
      IF NOT lServiceHeaderAddress.FINDFIRST THEN
        EXIT(FALSE);

      lXRecServiceHeaderAddress := lServiceHeaderAddress;

      IF (lServiceHeaderAddress."Salutation Code" = pContactSalutationCode) AND
         (lServiceHeaderAddress.Surname = pContactSurName) AND
         (lServiceHeaderAddress."First Name" = pContactFirstName) AND
         (lServiceHeaderAddress.Address = pContactAddress) AND
         (lServiceHeaderAddress."Address 2" = pContactAddress2) AND
         (lServiceHeaderAddress.City = pContactCity) AND
         (lServiceHeaderAddress."Post Code" = pContactPostCode) AND
         (lServiceHeaderAddress."Phone No." = pContactPhoneNo) AND
         (lServiceHeaderAddress."Mobile Phone No." = pContactMobilePhoneNo) AND
         (lServiceHeaderAddress.Comment = pContactComment)
      THEN
        EXIT(TRUE);

      IF lServiceHeaderAddress."Salutation Code" <> pContactSalutationCode THEN BEGIN
        lServiceHeaderAddress.VALIDATE("Salutation Code",pContactSalutationCode);
      END;
      IF lServiceHeaderAddress.Surname <> pContactSurName THEN BEGIN
        lServiceHeaderAddress.VALIDATE(Surname,pContactSurName);
      END;
      IF lServiceHeaderAddress."First Name" <> pContactFirstName THEN BEGIN
        lServiceHeaderAddress.VALIDATE("First Name",pContactFirstName);
      END;
      IF lServiceHeaderAddress.Address <> pContactAddress THEN BEGIN
        lServiceHeaderAddress.VALIDATE(Address,pContactAddress);
      END;
      IF lServiceHeaderAddress."Address 2" <> pContactAddress2 THEN BEGIN
        lServiceHeaderAddress.VALIDATE("Address 2",pContactAddress2);
      END;
      IF (lServiceHeaderAddress.City <> pContactCity) OR
         (lServiceHeaderAddress."Post Code" <> pContactPostCode)
      THEN BEGIN
        IF NOT lToolsMgt.CheckCity2(pContactPostCode,pContactCity) THEN
          ERROR(Text009,pContactPostCode,pContactCity);
        lServiceHeaderAddress.City := pContactCity;
        lServiceHeaderAddress.VALIDATE("Post Code",pContactPostCode);
        lServiceHeaderAddress.City := pContactCity;
      END;
      IF lServiceHeaderAddress."Country/Region Code" <> pContactCountryCode THEN BEGIN
        lServiceHeaderAddress.VALIDATE("Country/Region Code",pContactCountryCode);
      END;
      IF lServiceHeaderAddress.Comment <> pContactComment THEN BEGIN
        lServiceHeaderAddress.VALIDATE(Comment,pContactComment);
      END;
      IF lServiceHeaderAddress."Phone No." <> pContactPhoneNo THEN BEGIN
        lServiceHeaderAddress.VALIDATE("Phone No.",pContactPhoneNo);
      END;
      IF lServiceHeaderAddress."Mobile Phone No." <> pContactMobilePhoneNo THEN BEGIN
        lServiceHeaderAddress.VALIDATE("Mobile Phone No.",pContactMobilePhoneNo);
      END;

      lServiceHeaderAddress.MODIFY(TRUE);

      lServiceHeaderAddress."Last Modification User ID" := pExtranetUserName;
      lServiceHeaderAddress.MODIFY(FALSE);
      //<<IMH70.PC
      lProviderNotificationMgt.CreateNotifFromServHeaderAddr(lServiceHeaderAddress,lXRecServiceHeaderAddress,FALSE);
      //>>IMH70.PC

      lRecref.GETTABLE(lServiceHeaderAddress);
      lXRecref.GETTABLE(lXRecServiceHeaderAddress);
      lChangeLogMgt.LogModification(lRecref,lXRecref);

      //<<IMH65.PC
      ExtrFct.Finish(lGUID);
      //>>IMH65.PC

      EXIT(TRUE);
    END;

    PROCEDURE UpdatePlace@1100281020(pServiceHeaderNo@1100281004 : Code[20];pInterventionLineNo@1100281005 : Integer;pAddress@1100281003 : Text[50];pAddress2@1100281002 : Text[50];pPostCode@1100281001 : Code[20];pCity@1100281000 : Text[30];pExtranetUserNo@1100281009 : Code[20];pExtranetUserName@1100281008 : Text[50];pExtranetUserFirstName@1100281007 : Text[50]) : Boolean;
    VAR
      lServiceHeader@1100281015 : Record 5900;
      lServiceInterventionLine@1000000005 : Record 50075;
      lXServiceInterventionLine@1100281016 : Record 50075;
      lToolsMgt@1100281011 : Codeunit 8016602;
      lChangeLogMgt@1100281010 : Codeunit 423;
      lRecref@1100281013 : RecordRef;
      lXRecref@1100281012 : RecordRef;
      lCommentNotificationMgt@1000000001 : Codeunit 50148;
      lPostCOde@1000000000 : Record 225;
      lxServHeader@1000000002 : Record 5900;
      lToModify@1000000003 : Boolean;
      lGUID@1000000004 : GUID;
    BEGIN
      // IMH04 ISAT.EB --> A tester (10/08/2011)
      // Mise … jour sur l'entˆte de service (Service Header)
      {
      Rubrique 11.06
      0000948: Web Service SOAP : Modification du lieu d'intervention

      ParamŠtres d'entr‚es :
      - Identifiant intervention NAV
      - Coordonn‚es postales complŠtes du lieu d'intervention

      ParamŠtres d‚finitifs :
      - pServiceHeaderNo : Nø entˆte service
      - pAddress : adresse 1
      - pAddress2 : adresse 2
      - pPostCode : Code postal
      - pCity : Ville
      - pExtranetUserNo : Nø utilisateur Extranet
      - pExtranetUserName : Nom utilisateur Extranet
      - pExtranetUserFirstName : Pr‚nom utilisateur extranet
      }

      GLOBALLANGUAGE(1036);

      //<<IMH65.PC
      ExtrFct.Initial(
        2,'UpdatePlace',
        STRSUBSTNO(
          '%1-%2-%3-%4-%5-%6-%7-%8-%9-%10-%11',
          pServiceHeaderNo,pInterventionLineNo,pAddress,pAddress2,pPostCode,pCity),
        lGUID);
      //>>IMH65.PC

      // R‚cup‚rer l'entˆte de service
      IF NOT lServiceHeader.GET(lServiceHeader."Document Type"::Invoice,pServiceHeaderNo) THEN
        ERROR(Text001,pServiceHeaderNo);

      //<<IMH48.ST modification sur la ligne produit et non l'intervention
      IF (pPostCode <> '') AND (pCity <> '') THEN BEGIN
        IF NOT lToolsMgt.CheckCity2(pPostCode, pCity) THEN BEGIN
          ERROR(Text009, pPostCode,pCity);
        END;
      END;

      lPostCOde.SETRANGE(Code, pPostCode);
      lPostCOde.SETRANGE("City (Without Accent)", pCity);
      IF lPostCOde.FINDFIRST THEN BEGIN
        pCity := lPostCOde.City
      END;

      IF (lServiceHeader."Ship-to Address" = pAddress) AND
         (lServiceHeader."Ship-to Address 2" = pAddress2) AND
         (lServiceHeader."Ship-to City" = pCity) AND
         (lServiceHeader."Ship-to Post Code" = pPostCode)
      THEN BEGIN
        EXIT(TRUE);
      END;

      lxServHeader := lServiceHeader;
      IF (lServiceHeader."Ship-to Address" <> pAddress) THEN BEGIN
        //<<IMH67.PC
        lServiceHeader.SetDisableNotif(TRUE);
        //>>IMH67.PC
        lServiceHeader."Ship-to Address" := pAddress;
        lToModify := TRUE;
      END;
      IF (lServiceHeader."Ship-to Address 2" <> pAddress2) THEN BEGIN
        //<<IMH67.PC
        lServiceHeader.SetDisableNotif(TRUE);
        //>>IMH67.PC
        lServiceHeader."Ship-to Address 2" := pAddress2;
        lToModify := TRUE;
      END;
      IF (lServiceHeader."Ship-to City" <> pCity) THEN BEGIN
        //<<IMH67.PC
        lServiceHeader.SetDisableNotif(TRUE);
        //>>IMH67.PC
        lServiceHeader.VALIDATE("Ship-to City", pCity);
        lToModify := TRUE;
      END;
      IF (lServiceHeader."Ship-to Post Code" <> pPostCode) THEN BEGIN
        //<<IMH67.PC
        lServiceHeader.SetDisableNotif(TRUE);
        //>>IMH67.PC
        lServiceHeader.VALIDATE("Ship-to Post Code", pPostCode);
        lToModify := TRUE;
      END;
      IF lToModify THEN BEGIN
        lRecref.GETTABLE(lServiceHeader);
        lXRecref.GETTABLE(lxServHeader);
        lChangeLogMgt.LogModification(lRecref,lXRecref);
        //<<IMH67.PC
        IF lServiceInterventionLine.GET(pServiceHeaderNo,pInterventionLineNo) THEN BEGIN
          ExtrFct.CreateIntervCommentText(lServiceInterventionLine,Text119,CURRENTDATETIME,pExtranetUserName);
        END;
        //>>IMH67.PC
      //<<IMH66.ST
      //  lCommentNotificationMgt.CreateNotifFromServHeader(lServiceHeader,lxServHeader);
      //>>IMH66.ST
        lServiceHeader.MODIFY(TRUE);
        //<<IMH67.PC
        // ProblŠme du xrec
        lServiceInterventionLine.RESET;
        lServiceInterventionLine.SETRANGE("Service Header No.",pServiceHeaderNo);
        lServiceInterventionLine.SETRANGE("Quality Control",FALSE);
        IF lServiceInterventionLine.FINDSET THEN BEGIN
          REPEAT
            lServiceInterventionLine.Address := lServiceHeader."Ship-to Address";
            lServiceInterventionLine."Address 2" := lServiceHeader."Ship-to Address 2";
            lServiceInterventionLine.City := lServiceHeader."Ship-to City";
            lServiceInterventionLine."Post Code" := lServiceHeader."Ship-to Post Code";
            lServiceInterventionLine.MODIFY;
          UNTIL lServiceInterventionLine.NEXT = 0;
        END;
        //>>IMH67.PC
      END;

      // Mise … jour de l'AddressCr‚ation ligne activit‚ corbeille
      GetInterfaceSetup;
      IF InterfaceSetup."Update Ship-to Add. Task Code" <> '' THEN BEGIN
        ExtrFct.CreateTrayLineServHeader(lServiceHeader,InterfaceSetup."Update Ship-to Add. Task Code");
      END;

      //<<IMH65.PC
      ExtrFct.Finish(lGUID);
      //>>IMH65.PC

      EXIT(TRUE);
      //>>IMH48.ST
      {
      IF NOT ExtrFct.GetInterv(pServiceHeaderNo,pInterventionLineNo,TRUE, lServiceInterventionLine) THEN
        EXIT;

      lXServiceInterventionLine := lServiceInterventionLine;
      WITH lServiceInterventionLine DO BEGIN
        IF (Address = pAddress) AND
           ("Address 2" = pAddress2) AND
           ("Post Code" = pPostCode) AND
           (City = pCity)
        THEN
          EXIT(TRUE);

        IF Address <> pAddress THEN BEGIN
          VALIDATE(Address,pAddress);
        END;
        IF "Address 2" <> pAddress2 THEN BEGIN
          VALIDATE("Address 2",pAddress2);
        END;
        IF ("Post Code" <> pPostCode) OR
           (City <> pCity)
        THEN BEGIN
          // *** Test des codes postaux
          IF NOT lToolsMgt.CheckCity2(pPostCode,pCity) THEN
            ERROR(Text009,pPostCode,pCity);

          "Post Code" := pPostCode;
          City := pCity;
        END;

        MODIFY(TRUE);
        "Last Modification User ID" := pExtranetUserName;
        MODIFY;
      END;

      lRecref.GETTABLE(lServiceInterventionLine);
      lXRecref.GETTABLE(lXServiceInterventionLine);
      lChangeLogMgt.LogModification(lRecref,lXRecref);

      //<<IMH44.ISAT.EBA
      // Cr‚ation ligne activit‚ corbeille
      GetInterfaceSetup;
      IF InterfaceSetup."Update Ship-to Add. Task Code" <> '' THEN BEGIN
        ExtrFct.CreateTrayLineInterv(lServiceInterventionLine,InterfaceSetup."Update Ship-to Add. Task Code");
      END;
      //>>IMH44.ISAT.EBA

      EXIT(TRUE);
      }
    END;

    PROCEDURE ValidateNotification@1100281006(pProviderNo@1100281001 : Code[20];pNotificationId@1100281002 : Integer;pExtranetUserNo@1100281006 : Code[20];pExtranetUserName@1100281005 : Text[50];pExtranetUserFirstName@1100281004 : Text[50]) : Boolean;
    VAR
      lProvider@1100281003 : Record 50000;
      lProviderNotif@1100281000 : Record 50153;
      lGUID@1000000000 : GUID;
    BEGIN
      // IMH05 ISAT.EB --> A tester (10/08/2011)
      {
      Rubrique 11.06
      0000946: Web Service SOAP : Validation d'une notification

            Permet aux prestataires d'indiquer qu'ils ont lu une notification (pouvant provenir de plusieurs sources :
              intervention, commentaire

      ParamŠtre d'entr‚e :
      - Identifiant NAV de la notification ?

      ParamŠtres d‚finitifs :
      - pProviderNo : nø entˆte de service
      - pNotificationId : Id Notification
      - pExtranetUserNo : Nø utilisateur Extranet
      - pExtranetUserName : Nom utilisateur Extranet
      - pExtranetUserFirstName : Pr‚nom utilisateur extranet
      }
      GLOBALLANGUAGE(1036);

      // R‚cup‚rer le prestataire
      //<<IMH65.PC
      ExtrFct.Initial(
        2,'ValidateNotification',
        STRSUBSTNO(
          '%1-%2',
          pProviderNo,pNotificationId),
        lGUID);
      //>>IMH65.PC


      IF NOT lProvider.GET(pProviderNo) THEN
        ERROR(Text000,pProviderNo);

      // R‚cup‚rer la notification
      IF NOT lProviderNotif.GET(pProviderNo,pNotificationId) THEN
        ERROR(Text010,pProviderNo,pNotificationId);

      // Mettre … jour la notification
      lProviderNotif.VALIDATE(Acknowledgement,TRUE);
      lProviderNotif.VALIDATE("Acknowledgment User ID",pExtranetUserName);
      lProviderNotif.VALIDATE("Acknowledgement Date",CURRENTDATETIME);
      lProviderNotif.MODIFY(TRUE);

      //<<IMH65.PC
      ExtrFct.Finish(lGUID);
      //<<IMh65.PC

      EXIT(TRUE);
    END;

    PROCEDURE AddDocument@1100281008(pProviderNo@1100281002 : Code[20];pServiceHeaderNo@1100281001 : Code[20];pInterventionNo@1100281000 : Integer;pDocName@1100281004 : Text[50];pDocFileExtension@1100281003 : Text[30];pDocBinaryContent@1100281005 : BigText;pDocSize@1100281006 : Decimal;pExtranetUserNo@1100281009 : Code[20];pExtranetUserName@1100281008 : Text[50];pExtranetUserFirstName@1100281007 : Text[50];pCreateActivity@1000000001 : Boolean;VAR pFlowCode@1100281018 : Code[10];VAR pDocEntryNo@1100281019 : Integer;VAR pAttachEntryNo@1100281020 : Integer;VAR pTableID@1100281028 : Integer;VAR pKeyInteger1@1100281027 : Integer;VAR pKeyInteger2@1100281026 : Integer;VAR pKeyCode1@1100281025 : Code[20];VAR pKeyCode2@1100281024 : Code[20];VAR pEntryNo@1100281014 : Integer) : Boolean;
    VAR
      lProvider@1100281011 : Record 50000;
      lServiceHeader@1100281012 : Record 5900;
      lIntervLine@1100281013 : Record 50075;
      lDocumentQueue@1100281010 : Record 50054;
      lDocAttachment@1100281016 : Record 50021;
      lAttachmentTemp@1100281017 : TEMPORARY Record 5062;
      lOutStream@1100281023 : OutStream;
      lInStream@1100281031 : InStream;
      lSourceAttchMgt@1100281015 : Codeunit 50003;
      lFileName@1100281021 : Text[1024];
      lFileName2@1100281030 : Text[1024];
      lFile@1100281022 : File;
      lFile2@1100281029 : File;
      lGUID@1000000000 : GUID;
    BEGIN
      // IMH06 ISAT.EB --> A tester 16/08/2011
      {
      Rubrique 11.06
      0000687: Web Service SOAP : Ajout d'une piŠce jointe … une intervention

      Colonnes attendues :
      - Retour de confirmation du succŠs de l'op‚ration
      - Identifiant Nav de la piŠce jointe

      ParamŠtres :
      - Identifiant de l'intervention NAV
      - Nom du document
      - Type (extension du fichier) de la piŠce jointe
      - Taille (en octet) de la piŠce jointe
      - Contenu binaire de la piŠce jointe
      - Utilisateur ayant transmis la piŠce jointe

      ParamŠtres d‚finitifs :
      - En entr‚e
        - pProviderNo
        - pServiceHeaderNo
        - pInterventionNo
        - pDocName
        - pDocFileExtension
        - pDocBinaryContent
        - pDocSize
        - pExtranetUserNo : Nø utilisateur Extranet
        - pExtranetUserName : Nom utilisateur Extranet
        - pExtranetUserFirstName : Pr‚nom utilisateur extranet
      - En sortie
        - Return_value : Retourne un bool‚en … vrai si tout est ok
        - pFlowCode : Code workflow (premiŠre partie de l'identifiant Nav du document)
        - pDocEntryNo : Nø s‚quence document (seconde partie de l'identifiant Nav du document)
        - pAttachEntryNo : Nø s‚quence piŠce (troisiŠme partie de l'identifiant Nav du document)
      }

      GLOBALLANGUAGE(1036);

      //<<IMH65.PC
      ExtrFct.Initial(
        2,'AddDocument',
        STRSUBSTNO(
          '%1-%2-%3-%4-%5-%6-%7',
          pProviderNo,pServiceHeaderNo,pInterventionNo,pDocName,pDocFileExtension,pDocSize,pCreateActivity),
        lGUID);
      //>>IMH65.PC

      // R‚cup‚rer le code flux document extranet
      GetInterfaceSetup;
      InterfaceSetup.TESTFIELD("Ext. Doc Flow Code");

      IF pDocBinaryContent.LENGTH < 50 THEN
        ERROR(Text011);

      // R‚cup‚rer le prestataire
      IF NOT lProvider.GET(pProviderNo) THEN
        ERROR(Text000,pProviderNo);

      IF (pServiceHeaderNo <> '') AND
         (pInterventionNo > 0) THEN BEGIN
        // R‚cup‚rer l'entˆte de service
        IF NOT lServiceHeader.GET(lServiceHeader."Document Type"::Invoice,pServiceHeaderNo) THEN
          ERROR(Text001,pServiceHeaderNo);

        IF NOT ExtrFct.GetInterv(pServiceHeaderNo, pInterventionNo,TRUE,lIntervLine) THEN
          EXIT(FALSE);
      END;

      //<<IMH69.ST Code d‚plac‚ ici
      // Export du bigtext dans un fichier sur disque
      lFileName2 := ExtrFct.GetTempFilename(pDocFileExtension);
      //error(lfilename2);
      IF NOT lFile2.CREATE(lFileName2) THEN BEGIN
        ERROR(Text013);
      END;
      lFile2.CREATEOUTSTREAM(lOutStream);
      pDocBinaryContent.WRITE(lOutStream);
      lFile2.CLOSE;
      // D‚codage du flux binaire
      lFileName := ExtrFct.GetTempFilename(pDocFileExtension);
      IF NOT lFile.CREATE(lFileName) THEN BEGIN
        ERROR(Text013);
      END;
      lFile2.OPEN(lFileName2);
      lFile2.CREATEINSTREAM(lInStream);
      lFile.CREATEOUTSTREAM(lOutStream);
      ToolsMgt.DecodeBase64(lInStream,lOutStream);
      lFile2.CLOSE;
      lFile.CLOSE;
      ERASE(lFileName2);
      //>>IMH69.ST

      // Cr‚er un Document Queue
      lDocumentQueue.INIT;
      lDocumentQueue."Flow Code" := InterfaceSetup."Ext. Doc Flow Code";
      lDocumentQueue.VALIDATE("Queue Type",lDocumentQueue."Queue Type"::Receipt);
      lDocumentQueue."Entry No." := 0;
      lDocumentQueue."Flow Nature" := lDocumentQueue."Flow Nature"::" ";
      lDocumentQueue."Source No." := '';
      lDocumentQueue.Date := WORKDATE;
      lDocumentQueue.Description := pDocName;
      lDocumentQueue."Receive Reference" := '';
      lDocumentQueue."Document Flow Header No." := '';
      lDocumentQueue.VALIDATE("Contact No.",pProviderNo);
      lDocumentQueue."Attachment Type" := lDocumentQueue."Attachment Type"::" ";
      IF (pServiceHeaderNo <> '') AND
         (pInterventionNo > 0) THEN BEGIN
        lDocumentQueue."Service Document Type" := lDocumentQueue."Service Document Type"::Intervention;
        lDocumentQueue.VALIDATE("Service Document No.",lServiceHeader."No.");
        lDocumentQueue."Service Intervention Line No." := lIntervLine."Line No.";
        lDocumentQueue."Service No." := lIntervLine."Service No.";
        lDocumentQueue."Service Intervention No." := lIntervLine."Intervention No.";
        lDocumentQueue."Service Header No." := lServiceHeader."No.";
      END;
      lDocumentQueue."Status To Qualify" := lDocumentQueue."Status To Qualify"::"To Qualify";
      lDocumentQueue.INSERT(TRUE);

      //IMH69.ST Code d‚plac‚ plus haut

      // Cr‚er un Document Attachment li‚ au DQ
      lDocAttachment.RESET;
      lDocAttachment.SETRANGE("Referent Table No.",DATABASE::"Document Queue");
      lDocAttachment.SETRANGE("Key Integer 1",lDocumentQueue."Queue Type");
      lDocAttachment.SETRANGE("Key Integer 2",lDocumentQueue."Entry No.");
      lDocAttachment.SETRANGE("Key Code 1",lDocumentQueue."Flow Code");
      lDocAttachment.SETRANGE("Key Code 2",'');
      lDocAttachment."Referent Table No." := DATABASE::"Document Queue";
      lDocAttachment."Key Integer 1" := lDocumentQueue."Queue Type";
      lDocAttachment."Key Integer 2" := lDocumentQueue."Entry No.";
      lDocAttachment."Key Code 1" := lDocumentQueue."Flow Code";
      lDocAttachment."Key Code 2" := '';

      IF (pServiceHeaderNo <> '') AND
         (pInterventionNo > 0) THEN BEGIN
        lDocAttachment."Service No." := lIntervLine."Service No.";
        lDocAttachment."Service Document No." := lIntervLine."Service Header No.";
        lDocAttachment."Service Intervention Line No." := lIntervLine."Line No.";
      END;
      lDocAttachment."Contact No." := pProviderNo;
      lDocAttachment."Provider No." := pProviderNo;
      lDocAttachment.Description := COPYSTR(pDocName,1,MAXSTRLEN(lDocAttachment.Description));

      lSourceAttchMgt.CreateAttachment(lDocAttachment,lFileName,lAttachmentTemp);
      //ERASE(lFileName);

      lDocAttachment."File Size" := pDocSize;
      lDocAttachment.Description := pDocName;
      lDocAttachment."File Extension" := pDocFileExtension;
      lDocAttachment.MODIFY;

      // Gestion des valeurs … retourner
      pFlowCode := lDocumentQueue."Flow Code";
      pDocEntryNo := lDocumentQueue."Entry No.";
      pAttachEntryNo := lDocAttachment."Entry No.";
      pTableID := lDocAttachment."Referent Table No.";
      pKeyInteger1 := lDocAttachment."Key Integer 1";
      pKeyInteger2 := lDocAttachment."Key Integer 2";
      pKeyCode1 := lDocAttachment."Key Code 1";
      pKeyCode2 := lDocAttachment."Key Code 2";
      pEntryNo := lDocAttachment."Entry No.";

      // Cr‚ation ligne activit‚ corbeille
      IF pCreateActivity THEN
        IF InterfaceSetup."Add Document Task Code" <> '' THEN
          ExtrFct.CreateTrayLineInterv(lIntervLine,InterfaceSetup."Add Document Task Code");

      //<<IMH65.PC
      ExtrFct.Finish(lGUID);
      //>>IMH65.PC

      EXIT(TRUE);
    END;

    PROCEDURE RemoveDocument@1000000004(VAR pFlowCode@1000000008 : Code[10];VAR pDocEntryNo@1000000007 : Integer;VAR pAttachEntryNo@1000000006 : Integer) : Boolean;
    VAR
      lFctName@1000000009 : Text[30];
      lDocQueue@1000000011 : Record 50054;
      lDocAttach@1000000012 : Record 50021;
      lDocAttachMgt@1000000013 : Codeunit 50002;
      lGUID@1000000000 : GUID;
    BEGIN
      //IMH46.ST
      GLOBALLANGUAGE(1036);

      //<<IMH65.PC
      ExtrFct.Initial(
        2,'RemoveDocument',
        STRSUBSTNO('%1|%2|%3', pFlowCode, pDocEntryNo, pAttachEntryNo),
        lGUID);
      //>>IMH65.PC

      lDocAttach.SETRANGE("Referent Table No.",DATABASE::"Document Queue");
      lDocAttach.SETRANGE("Key Integer 1", lDocQueue."Queue Type"::Receipt);
      lDocAttach.SETRANGE("Key Integer 2", pDocEntryNo);
      lDocAttach.SETRANGE("Key Code 1", pFlowCode);
      IF NOT lDocAttach.FINDFIRST THEN
        ERROR(Text030,pFlowCode,pDocEntryNo,pAttachEntryNo);
      lDocAttachMgt.DeleteAllAttachment(lDocAttach, FALSE);

      lDocQueue.SETRANGE("Flow Code", pFlowCode);
      lDocQueue.SETRANGE("Queue Type", lDocQueue."Queue Type"::Receipt);
      lDocQueue.SETRANGE("Entry No.", pDocEntryNo);
      IF lDocQueue.FINDFIRST THEN BEGIN
        lDocQueue.CALCFIELDS(Attachment);
        IF lDocQueue.Attachment = 0 THEN
          lDocQueue.DELETE(TRUE);
      END;

      //<<IMH65.PC
      ExtrFct.Finish(lGUID);
      //>>IMH65.PC

      EXIT(TRUE);
    END;

    PROCEDURE AddQuote@1100281010(pProviderNo@1100281006 : Code[20];pServiceHeaderNo@1100281011 : Code[20];pInterventionNo@1100281012 : Integer;pFlowCode@1100281001 : Code[10];pDocEntryNo@1100281000 : Integer;pDocDescrQualification@1100281025 : Text[250];pAmountInclVAT@1100281020 : Decimal;pAmountExclVAT@1100281019 : Decimal;pAmountVAT@1100281015 : Decimal;pDocDate@1100281002 : DateTime;pDocReference@1100281007 : Text[80];pExtranetUserNo@1100281005 : Code[20];pExtranetUserName@1100281004 : Text[50];pExtranetUserFirstName@1100281003 : Text[50]) : Boolean;
    VAR
      lProvider@1100281008 : Record 50000;
      lServiceHeader@1100281009 : Record 5900;
      lIntervLine@1100281010 : Record 50075;
      lDocumentQueue@1100281013 : Record 50054;
      lDocQueuePost@1100281014 : Codeunit 50008;
      lGUID@1000000000 : GUID;
    BEGIN
      // IMH07 ISAT.EB
      // Utilisation de l'ajout de document puis utilisation de cette fonction
      // Qualification automatique de la nature du document
      // Faut-il valider le document ?
      {
      Rubrique 11.06
      0000693: Web Service SOAP : Ajout d'un devis

      Colonnes attendues :
      - Retour de confirmation du succŠs de l'op‚ration

      ParamŠtres
      - Identifiant de l'intervention
      - Le type du devis
      - Identifiant NAV de la piŠce jointe correspondante au devis
      - Si document qualifi‚ : lÉidentifiant systŠme du document qualifi‚
      - Montant HT EXO TVA
      - Montant HT TVA REDUITE
      - Montant HT TVA NORMALE
      - R‚f‚rence de piŠce
      - Utilisateur … l'origine
      - Date du devis

      ParamŠtres d‚finitifs
      - En entr‚e
        - pProviderNo : Nø prestataire
        - pServiceHeaderNo : Nø entˆte service
        - pInterventionNo : Nø intervention
        - pFlowCode : Code flux document (premiŠre partie de l'identifiant Nav du document)
        - pDocEntryNo : Nø s‚quence document (seconde partie de l'identifiant Nav du document)
        - pDocDescrQualification : si document qualifi‚, renseigner la r‚f‚rence systŠme du document
        - pExemptVATBaseAmount : Montant HT EXO TVA
        - pReducedVATBaseAmount : Montant HT TVA REDUITE
        - pNormalVATBaseAmount : Montant  HT TVA NORMAL
        - pDocDate : date de document
        - pDocReference : r‚f‚rence de piŠce
        - pExtranetUserNo : Nø utilisateur Extranet
        - pExtranetUserName : Nom utilisateur Extranet
        - pExtranetUserFirstName : Pr‚nom utilisateur extranet
      }

      GLOBALLANGUAGE(1036);

      //<<IMH65.PC
      ExtrFct.Initial(
        2,'AddQuote',
        STRSUBSTNO(
          '%1-%2-%3-%4-%5-%6-%7-%8-%9-%10-%11',
          pProviderNo,pServiceHeaderNo,pInterventionNo,pFlowCode,pDocEntryNo,pDocDescrQualification,pAmountInclVAT,pAmountExclVAT,
          pAmountVAT,pDocDate,pDocReference),
        lGUID);
      //>>IMH65.PC

      // R‚cup‚rer le prestataire
      IF NOT lProvider.GET(pProviderNo) THEN
        ERROR(Text000,pProviderNo);

      // R‚cup‚rer l'entˆte de service
      IF NOT lServiceHeader.GET(lServiceHeader."Document Type"::Invoice,pServiceHeaderNo) THEN
        ERROR(Text001,pServiceHeaderNo);

      // R‚cup‚rer l'intervention
      IF NOT ExtrFct.GetInterv(pServiceHeaderNo, pInterventionNo,TRUE, lIntervLine) THEN
        EXIT(FALSE);

      IF NOT lDocumentQueue.GET(pFlowCode,lDocumentQueue."Queue Type"::Receipt,pDocEntryNo) THEN
        ERROR(Text003,pFlowCode,FORMAT(lDocumentQueue."Queue Type"::Receipt),pDocEntryNo);

      IF pProviderNo <> lDocumentQueue."Contact No." THEN BEGIN
        ERROR(Text028,pProviderNo);
      END;

      WITH lDocumentQueue DO BEGIN
        SetHideMessage(TRUE);
        VALIDATE("Document Type",lDocumentQueue."Document Type"::Quote);
        IF ExtrFct.EvalDate(pDocDate) = 0D THEN
          VALIDATE("Document Date", TODAY)
        ELSE
          VALIDATE("Document Date", ExtrFct.EvalDate(pDocDate));
        "Receive Reference" := pDocReference;
        "Vendor Quote No." := pDocReference; //IMH35.ST
        VALIDATE(Amount,pAmountExclVAT);
        VALIDATE("Amount Including VAT",pAmountInclVAT);
        VALIDATE("Amount VAT",pAmountVAT);
        //Amount := pAmount;
        //"Amount VAT" := pAmountVAT;
        //"Amount VAT" := pAmountIncludingVAT;
        //"VAT Base Amount" := pVATBaseAmount;
        //"Exempt VAT Base Amount" := pExemptVATBaseAmount;
        //"Reduced VAT Base Amount" := pReducedVATBaseAmount;
        //"Normal VAT Base Amount" := pNormalVATBaseAmount;
        //"Amount obsolescence" := pAmountObsolescence;
        //"Franchise Amount" := pFranchiseAmount;

        //IF CheckVatAmount(0, FALSE) <> '' THEN
        //  EXIT(FALSE);

        IF pDocDescrQualification <> '' THEN BEGIN
          "Status To Qualify" := lDocumentQueue."Status To Qualify"::Treated;
          "Description Qualification" := pDocDescrQualification;
        END;
        //<<IMH.PC
        Status := Status::Done;
        //>>IMH.PC
        "Last Modification Date" := CURRENTDATETIME;
        "Last Modification User ID" := COPYSTR(pExtranetUserName,1,MAXSTRLEN("Last Modification User ID"));

        MODIFY(FALSE);

        // *** Pas de validation du document ???
      END;
      lDocumentQueue.SETRECFILTER;
      //lDocQueuePost.RunWithCheck(lDocumentQueue);
      CLEAR(lDocQueuePost);
      lDocQueuePost.RUN(lDocumentQueue);
      IF lDocumentQueue.FIND THEN
        lDocumentQueue.DELETE(TRUE);

      ExtrFct.CreateIntervCommentText(lIntervLine, STRSUBSTNO(Text107b, pDocReference, pAmountInclVAT),
                                      CURRENTDATETIME, pExtranetUserName); //IMH35.ST
      // Cr‚ation ligne activit‚ corbeille
      GetInterfaceSetup;
      IF InterfaceSetup."Add Quote Task Code" <> '' THEN BEGIN
        ExtrFct.CreateTrayLineInterv(lIntervLine, InterfaceSetup."Add Quote Task Code");
      END;

      //<<IMH65.PC
      ExtrFct.Finish(lGUID);
      //>>IMH65.PC

      EXIT(TRUE);
    END;

    PROCEDURE GetDocumentBinaryContent@1100281012(pProviderNo@1100281003 : Code[20];pFlowCode@1100281002 : Code[10];pDocEntryNo@1100281001 : Integer;pAttachEntryNo@1100281000 : Integer;VAR pDocBinaryContent@1100281004 : BigText) : Boolean;
    VAR
      lProvider@1100281005 : Record 50000;
      lDocumentQueue@1100281007 : Record 50054;
      lDocumentAttachment@1100281008 : Record 50021;
      lXMLMgt@1100281014 : Codeunit 8016710;
      lAttachmentMgt@1100281010 : Codeunit 50002;
      lXMLDoc@1100281013 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lXMLNode1@1100281012 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lXMLNode2@1100281011 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lDiskFile@1100281006 : File;
      lOutstream@1100281009 : OutStream;
      lFileName@1100281017 : Text[1024];
      lFile@1100281016 : File;
      lInstream@1100281015 : InStream;
      lFilePath@1100281018 : Text[1024];
      lGUID@1000000000 : GUID;
    BEGIN
      // IMH23 ISAT.EB
      {
      Rubrique 11.06

      0000653: Web Service SOAP ? : R‚cup‚ration du contenu binaire d'un document

      Colonnes attendues :
      - Contenu binaire du document

      CritŠres de filtrage :
      Identifiant systŠme du document r‚cup‚r‚ au pr‚alable via la requˆte SQL

      ParamŠtres d‚finitifs :
      - En entr‚e
        - pProviderNo : Nø prestataire
        - pFlowCode : Code flux (1Šre partie identifiant Nav du document)
        - pDocEntryNo : Nø s‚quence flux document (2nde partie identifiant Nav du document)
        - pAttachEntryNo : Nø s‚quence document (3eme partie identifiant Nav du document)
        - pDocBinaryContent : mettre vide en passage de paramŠtre
      - En sortie
        - pDocBinaryContent : contient un flux xml avec le contenu binaire du document
          - Utilisation du sch‚ma document.xsd
          - Document
            - pDocBinaryContent : contenu binaire du document
      }
      GLOBALLANGUAGE(1036);
      //error('Debut GetDocumentBinaryContent');
      // R‚cup‚rer le prestataire

      //<<IMH65.PC
      ExtrFct.Initial(
        2,'GetDocumentBinaryContent',
        STRSUBSTNO(
          '%1-%2-%3-%4',
          pProviderNo,pFlowCode,pDocEntryNo,pAttachEntryNo),
        lGUID);
      //>>IMH65.PC

      IF NOT lProvider.GET(pProviderNo) THEN
        ERROR(Text000,pProviderNo);

      // R‚cup‚rer le document attach‚
      IF pFlowCode <> '' THEN BEGIN
        IF NOT lDocumentQueue.GET(pFlowCode,lDocumentQueue."Queue Type"::Receipt,pDocEntryNo) THEN
          ERROR(Text003,pFlowCode,FORMAT(lDocumentQueue."Queue Type"::Receipt),pDocEntryNo);

        IF pProviderNo <> lDocumentQueue."Contact No." THEN BEGIN
          ERROR(Text028,pProviderNo);
        END;

        lDocumentAttachment.RESET;
        //<<IMH29.ISAT.EBA
        //lDocumentAttachment.SETRANGE("Referent Table No.",DATABASE::Provider);
        lDocumentAttachment.SETRANGE("Referent Table No.",DATABASE::"Document Queue");
        //>>IMH29.ISAT.EBA
        lDocumentAttachment.SETRANGE("Key Integer 1",lDocumentQueue."Queue Type");
        lDocumentAttachment.SETRANGE("Key Integer 2",lDocumentQueue."Entry No.");
        lDocumentAttachment.SETRANGE("Key Code 1",lDocumentQueue."Flow Code");
        lDocumentAttachment.SETRANGE("Entry No.",pAttachEntryNo);
        IF lDocumentAttachment.ISEMPTY THEN
          ERROR(Text012,pFlowCode,pDocEntryNo,pAttachEntryNo);
      END ELSE BEGIN
        //<<IMH29.ISAT.EBA
        IF pDocEntryNo <> 0 THEN BEGIN
        //>>IMH29.ISAT.EBA
          lDocumentAttachment.RESET;
          lDocumentAttachment.SETCURRENTKEY("Interaction Log Entry No.");
          lDocumentAttachment.SETRANGE("Interaction Log Entry No.",pDocEntryNo);
          lDocumentAttachment.SETRANGE("Entry No.",pAttachEntryNo);
          lDocumentAttachment.SETRANGE("Referent Table No.",DATABASE::"Interaction Log Entry");// ???
          IF lDocumentAttachment.ISEMPTY THEN
            ERROR(Text012,pFlowCode,pDocEntryNo,pAttachEntryNo);
        //<<IMH29.ISAT.EBA
        END ELSE BEGIN
          lDocumentAttachment.RESET;
          lDocumentAttachment.SETRANGE("Referent Table No.",DATABASE::"Service Header");
          //lDocumentAttachment.SETRANGE("Key Integer 1",lDocumentQueue."Queue Type");
          lDocumentAttachment.SETRANGE("Key Integer 2",pDocEntryNo);
          //lDocumentAttachment.SETRANGE("Key Code 1",lDocumentQueue."Flow Code");
          lDocumentAttachment.SETRANGE("Entry No.",pAttachEntryNo);
          IF lDocumentAttachment.ISEMPTY THEN
            ERROR(Text012,pFlowCode,pDocEntryNo,pAttachEntryNo);
        END;
        //>>IMH29.ISAT.EBA
      END;
      lDocumentAttachment.FINDFIRST;
      lFilePath := lAttachmentMgt.GetFilePath2(lDocumentAttachment);
      IF lFilePath = '' THEN BEGIN
        ERROR(Text012b,pFlowCode,pDocEntryNo,pAttachEntryNo);
      END;

      IF NOT EXISTS(lFilePath) THEN BEGIN
        ERROR(Text012b,pFlowCode,pDocEntryNo,pAttachEntryNo);
      END;

      // G‚n‚rer le contenu binaire du document
      lXMLMgt.CreateXml(lXMLDoc,'<Document />',lXMLNode1);
      lXMLMgt.AddFileElement(lXMLNode1,'pDocBinaryContent',lFilePath,'',lXMLNode2);
      lFileName := ExtrFct.GetTempFilename('xml');
      lXMLDoc.save(lFileName);
      IF lFile.OPEN(lFileName) THEN BEGIN
        lFile.CREATEINSTREAM(lInstream);
        pDocBinaryContent.READ(lInstream);
        lFile.CLOSE;
        ERASE(lFileName);
      END ELSE BEGIN
        ERROR(Text013);
      END;

      //<<IMH65.PC
      ExtrFct.Finish(lGUID);
      //>>IMH65.PC

      EXIT(TRUE);
    END;

    PROCEDURE GetDocBinaryWithFullKey@1100281032(pProviderNo@1100281006 : Code[20];pTableID@1100281000 : Integer;pKeyInteger1@1100281001 : Integer;pKeyInteger2@1100281002 : Integer;pKeyCode1@1100281003 : Code[20];pKeyCode2@1100281004 : Code[20];pEntryNo@1100281005 : Integer;VAR pDocBinaryContent@1100281018 : BigText;VAR pErrorDescription@1100281019 : Text[1024]) : Boolean;
    VAR
      lProvider@1100281007 : Record 50000;
      lDocumentAttachment@1100281009 : Record 50021;
      lXMLMgt@1100281008 : Codeunit 8016710;
      lAttachmentMgt@1100281014 : Codeunit 50002;
      lXMLDoc@1100281017 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lXMLNode1@1100281016 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lXMLNode2@1100281015 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lFileName@1100281010 : Text[1024];
      lFilePath@1100281013 : Text[1024];
      lFile@1100281012 : File;
      lInstream@1100281011 : InStream;
      lGUID@1000000000 : GUID;
    BEGIN
      // IMH23 ISAT.PC
      {
      0001746 : R‚cup‚ration du contenu binaire d'un document

      Colonnes attendues :
      - Contenu binaire du document

      CritŠres de filtrage : Identifiant systŠme du document r‚cup‚r‚ au pr‚alable via la requˆte SQL

      ParamŠtres d‚finitifs :
      - En entr‚e
        - pProviderNo : Nø prestataire
        - pTableID, pKeyInteger1, pKeyInteger2, pKeyCode1, pKeyCode2, pEntryNo : cl‚ d'accŠs au document
        - pDocBinaryContent : mettre vide en passage de paramŠtre
      - En sortie
        - pDocBinaryContent : contient un flux xml avec le contenu binaire du document
          - Utilisation du sch‚ma document.xsd
          - Document
            - pDocBinaryContent : contenu binaire du document
      }
      //error('D‚but GetDocBinaryWithFullKey');
      GLOBALLANGUAGE(1036);

      //<<IMH65.PC
      ExtrFct.Initial(
        2,'GetDocBinaryWithFullKey',
        STRSUBSTNO(
          '%1-%2-%3-%4-%5-%6-%7-%8-%9-%10',
          pProviderNo,pTableID,pKeyInteger1,pKeyInteger2,pKeyCode1,pKeyCode2,pEntryNo),
        lGUID);
      //>>IMH65.PC

      // R‚cup‚rer le prestataire
      IF NOT lProvider.GET(pProviderNo) THEN BEGIN
        pErrorDescription := STRSUBSTNO(Text000,pProviderNo);
        EXIT(FALSE);
      END;

      IF NOT lDocumentAttachment.GET(pTableID,pKeyInteger1,pKeyInteger2,pKeyCode1,pKeyCode2,pEntryNo) THEN BEGIN
        pErrorDescription := STRSUBSTNO(Text023,pTableID,pKeyInteger1,pKeyInteger2,pKeyCode1,pKeyCode2,pEntryNo);
        EXIT(FALSE);
      END;

      lFilePath := lAttachmentMgt.GetFilePath2(lDocumentAttachment);
      IF lFilePath = '' THEN BEGIN
        pErrorDescription := STRSUBSTNO(Text023,pTableID,pKeyInteger1,pKeyInteger2,pKeyCode1,pKeyCode2,pEntryNo);
        EXIT(FALSE);
      END;

      IF NOT EXISTS(lFilePath) THEN BEGIN
        pErrorDescription := STRSUBSTNO(Text023,pTableID,pKeyInteger1,pKeyInteger2,pKeyCode1,pKeyCode2,pEntryNo);
        EXIT(FALSE);
      END;
      //error('GetDocBinaryWithFullKey - chemin ' + lfilepath);
      // G‚n‚rer le contenu binaire du document
      lXMLMgt.CreateXml(lXMLDoc,'<Document />',lXMLNode1);
      lXMLMgt.AddFileElement(lXMLNode1,'pDocBinaryContent',lFilePath,'',lXMLNode2);
      lFileName := ExtrFct.GetTempFilename('xml');
      //ERROR('GetDocBinaryWithFullKey - fichier temp ' + lFileName);
      lXMLDoc.save(lFileName);
      IF lFile.OPEN(lFileName) THEN BEGIN
        lFile.CREATEINSTREAM(lInstream);
        pDocBinaryContent.READ(lInstream);
        lFile.CLOSE;
        ERASE(lFileName);
      END ELSE BEGIN
        pErrorDescription := Text013;
        EXIT(FALSE);
      END;

      //<<IMH65.PC
      ExtrFct.Finish(lGUID);
      //>>IMH65.PC

      EXIT(TRUE);
    END;

    PROCEDURE GetDocBinaryWithServiceKey@1100281031(pProviderNo@1100281006 : Code[20];pServiceNo@1100281000 : Code[20];pServiceHeaderNo@1100281001 : Code[20];pInterventionLineNo@1100281002 : Integer;pInterventionQuoteLineNo@1100281003 : Integer;VAR pDocBinaryContent@1100281018 : BigText;VAR pExtensionFile@1000000001 : Text[30]) : Boolean;
    VAR
      lProvider@1100281007 : Record 50000;
      lServHeader@1000000000 : Record 5900;
      lDocumentAttachment@1100281009 : Record 50021;
      lServIntervQuote@1100281004 : Record 50076;
      lXMLMgt@1100281008 : Codeunit 8016710;
      lAttachmentMgt@1100281014 : Codeunit 50002;
      lXMLDoc@1100281017 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lXMLNode1@1100281016 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lXMLNode2@1100281015 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lFileName@1100281010 : Text[1024];
      lFilePath@1100281013 : Text[1024];
      lFile@1100281012 : File;
      lInstream@1100281011 : InStream;
      lGUID@1000000002 : GUID;
    BEGIN
      // IMH23 ISAT.PC
      {
      0000653: Web Service SOAP ? : R‚cup‚ration du contenu binaire d'un document

      Colonnes attendues :
      - Contenu binaire du document

      CritŠres de filtrage : Identifiant systŠme du document r‚cup‚r‚ au pr‚alable via la requˆte SQL

      ParamŠtres d‚finitifs :
      - En entr‚e
        - pProviderNo : Nø prestataire
        - pServiceNo, pServiceHeaderNo, pInterventionNo, pQuoteLineNo : cl‚ d'accŠs au document
        - pDocBinaryContent : mettre vide en passage de paramŠtre
      - En sortie
        - pDocBinaryContent : contient un flux xml avec le contenu binaire du document
          - Utilisation du sch‚ma document.xsd
          - Document
            - pDocBinaryContent : contenu binaire du document
      }
      GLOBALLANGUAGE(1036);
      //ERROR('Debut GetDocBinaryWithServiceKey');
      // R‚cup‚rer le prestataire

      //<<IMH65.PC
      ExtrFct.Initial(
        2,'GetDocBinaryWithServiceKey',
        STRSUBSTNO(
          '%1-%2-%3-%4-%5',
          pProviderNo,pServiceNo,pServiceHeaderNo,pInterventionLineNo,pInterventionQuoteLineNo),
        lGUID);
      //>>IMH65.PC

      IF NOT lProvider.GET(pProviderNo) THEN BEGIN
        ERROR(Text000,pProviderNo);
      END;

      //<<IMH38.ISAT.EBA
      IF NOT lServIntervQuote.GET(pServiceHeaderNo,pInterventionLineNo,pInterventionQuoteLineNo) THEN BEGIN
        lServIntervQuote.RESET;
        lServIntervQuote.SETRANGE("Service Header No.",pServiceHeaderNo);
        lServIntervQuote.SETRANGE("Intervention No.",pInterventionLineNo);
        lServIntervQuote.SETRANGE("Line No.",pInterventionQuoteLineNo);
        IF NOT lServIntervQuote.FINDFIRST THEN
          ERROR(Text024,pServiceNo,pServiceHeaderNo,pInterventionLineNo,pInterventionQuoteLineNo,'a');
      END;
      //>>IMH38.ISAT.EBA

      lDocumentAttachment.SETCURRENTKEY("Service Document No.","Service Intervention Line No.","Intervention Quote Line No.");
      lDocumentAttachment.SETRANGE("Service Document No.",pServiceHeaderNo);
      //<<IMH38.ISAT.EBA
      //lDocumentAttachment.SETRANGE("Service Intervention Line No.",pInterventionLineNo);
      //lDocumentAttachment.SETRANGE("Intervention Quote Line No.",pInterventionQuoteLineNo);
      //IF lServHeader.GET(lServHeader."Document Type"::Invoice, pServiceHeaderNo) THEN
      //  lDocumentAttachment.SETRANGE("Service No.",lServHeader."Service No.")
      //ELSE BEGIN
      //  IF pServiceNo <> '' THEN
      //    lDocumentAttachment.SETRANGE("Service No.",pServiceNo);
      //END;

      lDocumentAttachment.SETRANGE("Service Intervention Line No.",lServIntervQuote."Intervention Line No.");
      lDocumentAttachment.SETRANGE("Intervention Quote Line No.",lServIntervQuote."Line No.");
      //>>IMH38.ISAT.EBA
      IF NOT lDocumentAttachment.FINDFIRST THEN BEGIN
        ERROR(Text024,pServiceNo,pServiceHeaderNo,pInterventionLineNo,pInterventionQuoteLineNo,'a');
      END;
      pExtensionFile := lDocumentAttachment."File Extension";
      lFilePath := lAttachmentMgt.GetFilePath2(lDocumentAttachment);
      IF lFilePath = '' THEN BEGIN
        ERROR(Text024,pServiceNo,pServiceHeaderNo,pInterventionLineNo,pInterventionQuoteLineNo,'b');
      END;

      IF NOT EXISTS(lFilePath) THEN BEGIN
        ERROR(Text024,pServiceNo,pServiceHeaderNo,pInterventionLineNo,pInterventionQuoteLineNo,'c');
      END;

      // G‚n‚rer le contenu binaire du document
      lXMLMgt.CreateXml(lXMLDoc,'<Document />',lXMLNode1);
      lXMLMgt.AddFileElement(lXMLNode1,'pDocBinaryContent',lFilePath,'',lXMLNode2);
      lFileName := ExtrFct.GetTempFilename('xml');
      lXMLDoc.save(lFileName);
      IF lFile.OPEN(lFileName) THEN BEGIN
        lFile.CREATEINSTREAM(lInstream);
        pDocBinaryContent.READ(lInstream);
        lFile.CLOSE;
        ERASE(lFileName);
      END ELSE BEGIN
        ERROR(Text013);
      END;

      //<<IMH65.PC
      ExtrFct.Finish(lGUID);
      //>>IMH65.PC

      EXIT(TRUE);
    END;

    PROCEDURE ListDocAttachment@1100281013(pProviderNo@1100281000 : Code[20];pServiceHeaderNo@1100281004 : Code[20];pInterventionNo@1100281005 : Integer;pInterventionQuoteLineNo@1100281019 : Integer;VAR pDocumentList@1100281001 : BigText);
    VAR
      lProvider@1100281002 : Record 50000;
      lServiceHeader@1100281006 : Record 5900;
      lIntervLine@1100281014 : Record 50075;
      lDocumentQueue@1100281003 : Record 50054;
      lDocumentAttachment@1100281007 : Record 50021;
      lDocumentFlow@1100281013 : Record 50053;
      lInterLogEntry@1100281016 : Record 5065;
      lXMLDoc@1100281008 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lXMLNode1@1100281009 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lXMLNode2@1100281010 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lXMLNode3@1100281011 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lXMLMgt@1100281012 : Codeunit 8016710;
      lFileName@1100281015 : Text[1024];
      lFile@1100281017 : File;
      lInstream@1100281018 : InStream;
      lAttachMgt@1000000000 : Codeunit 5052;
      lGUID@1000000001 : GUID;
    BEGIN
      // IMH24 ISAT.EB --> A tester 19/08/2011
      {
      Rubrique 11.06

      0000670: Requˆte SQL : Liste des piŠces jointes d'une intervention
      Colonnes attendues :
      - Identifiant systŠme NAV de la piŠce jointe
      - Nom du document
      - Type (extension du fichier) de la piŠce jointe
      - Taille (en octet) de la piŠce jointe
      - Date et heure de r‚ception de la piŠce jointe
      - Origine du document
      - Pr‚sence d'une notification pour le prestataire relative … la piŠce jointe
      - Toutes autres informations utiles permettant de t‚l‚charger le contenu binaire de la piŠce jointe

      CritŠres de filtrage :
      - Identifiant systŠme NAV de l'intervention

      ParamŠtres d‚finitfs :
      - En entr‚e
        - pProviderNo : Nø prestataire
        - pServiceHeaderNo : Nø entˆte service
        - pInterventionNo : Nøintervention
        //<<IMH32.PC
        - pInterventionQuoteLineNo : Nø devis
        //>>IMH32.PC
        - pDocumentList : mettre vide
      - En sortie
        - pDocumentList : Dataset des documents en XML avec noeud racine DocumentList
          - Document
             - pFlowCode : Code workflow (premiŠre partie de l'identifiant Nav du document)
             - pDocEntryNo : Nø s‚quence document (seconde partie de l'identifiant Nav du document)
             - pAttachEntryNo : Nø s‚quence piŠce (troisiŠme partie de l'identifiant Nav du document)
             - pDocName : Nom du document
             - pDocSize : Taille du document
             - pDocType : Type du document
             - pDocSource : source du document
             - pDocDate : date du document
             - pTableID : Cl‚ primaire
             - pKeyInteger1 : Cl‚ primaire
             - pKeyInteger2 : Cl‚ primaire
             - pKeyCode1 : Cl‚ primaire
             - pKeyCode2 : Cl‚ primaire
             - pEntryNo : Cl‚ primaire
             - pServiceHeaderNo : Nø ligne de produit
             - pInterventionLineNo : Nø de ligne de produit
             - pInterventionQuoteLineNo : Nø ligne devis
      }
      GLOBALLANGUAGE(1036);

      //<<IMH65.PC
      ExtrFct.Initial(
        2,'ListDocAttachment',
        STRSUBSTNO(
          '%1-%2-%3-%4',
          pProviderNo,pServiceHeaderNo,pInterventionNo,pInterventionQuoteLineNo),
        lGUID);
      //>>IMH65.PC

      // R‚cup‚ration du prestataire
      IF NOT lProvider.GET(pProviderNo) THEN
        ERROR(Text000,pProviderNo);

      // R‚cup‚rer l'entˆte de service
      IF NOT lServiceHeader.GET(lServiceHeader."Document Type"::Invoice,pServiceHeaderNo) THEN
        ERROR(Text001,pServiceHeaderNo);

      // R‚cup‚rer l'intervention
      IF NOT ExtrFct.GetInterv(pServiceHeaderNo, pInterventionNo, TRUE, lIntervLine) THEN
        EXIT;

      // Cr‚ation de la liste de document
      lXMLMgt.CreateXml(lXMLDoc,'<DocumentList />',lXMLNode1);

      //<<IMH47.ST d‚placement du code
      AddIntervDocToDocList(lIntervLine, pInterventionQuoteLineNo, pProviderNo, lXMLNode1);
      {
      // Parcours de Document Queue
      lDocumentQueue.SETCURRENTKEY("Contact No.");
      lDocumentQueue.SETRANGE("Contact No.",pProviderNo);
      lDocumentQueue.SETRANGE("Service Document Type",lDocumentQueue."Service Document Type"::Intervention);
      lDocumentQueue.SETRANGE("Service Document No.",lIntervLine."Service Header No.");
      lDocumentQueue.SETRANGE("Service Intervention Line No.",lIntervLine."Line No.");
      //<<IMH32.PC
      IF pInterventionQuoteLineNo <> 0 THEN BEGIN
        lDocumentQueue.SETRANGE("Service Intervention Quote No.",pInterventionQuoteLineNo);
      END;
      //>>IMH32.PC
      //<<IMH36.ST pas de filtre statut
      //lDocumentQueue.SETRANGE("Status To Qualify",lDocumentQueue."Status To Qualify"::"To Qualify");
      //>>IMH36.ST
      IF NOT lDocumentQueue.ISEMPTY THEN BEGIN
        lDocumentQueue.FINDSET;
        REPEAT
          //<<IMH29.ISAT.EBA
          IF NOT lDocumentFlow.GET(lDocumentQueue."Flow Code") THEN
            lDocumentFlow.INIT;
          //>>IMH29.ISAT.EBA

          lDocumentAttachment.RESET;
          lDocumentAttachment.SETRANGE("Referent Table No.",DATABASE::"Document Queue");
          lDocumentAttachment.SETRANGE("Key Integer 1",lDocumentQueue."Queue Type");
          lDocumentAttachment.SETRANGE("Key Integer 2",lDocumentQueue."Entry No.");
          lDocumentAttachment.SETRANGE("Key Code 1",lDocumentQueue."Flow Code");
          IF NOT lDocumentAttachment.ISEMPTY THEN BEGIN
            lDocumentAttachment.FINDSET;
            REPEAT
              lXMLMgt.AddElement(lXMLNode1,'Document','','',lXMLNode2);
              IF lDocumentAttachment."Key Code 1" <> '' THEN
                lXMLMgt.AddElement(lXMLNode2,'pFlowCode',lDocumentAttachment."Key Code 1",'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'pDocEntryNo',FORMAT(lDocumentAttachment."Key Integer 2"),'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'pAttachEntryNo',FORMAT(lDocumentAttachment."Entry No."),'',lXMLNode3);
              //<<IMH29.ISAT.EBA
              IF lDocumentAttachment.Description <> '' THEN BEGIN
                lXMLMgt.AddElement(lXMLNode2,'pDocName',lDocumentAttachment.Description,'',lXMLNode3)
              END ELSE BEGIN
              //>>IMH29.ISAT.EBA
                lXMLMgt.AddElement(lXMLNode2,'pDocName',lDocumentAttachment."Description 2",'',lXMLNode3);
              END;
              IF lDocumentAttachment."File Size" <> 0 THEN
                lXMLMgt.AddElement(lXMLNode2,'pDocSize',FORMAT(lDocumentAttachment."File Size"),'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'pDocType',lDocumentAttachment."File Extension",'',lXMLNode3);
              IF lDocumentFlow."Default Channel" <> '' THEN
                lXMLMgt.AddElement(lXMLNode2,'pDocSource',lDocumentFlow."Default Channel",'',lXMLNode3);
              //<<IMH29.ISAT.EBA
              //IF lDocumentQueue."Document Date" <> 0D THEN
              //  lXMLMgt.AddElement(lXMLNode2,'pDocDate',FORMAT(lDocumentQueue."Document Date",0,'<Year4>-<Month,2>-<Day,2>'),
              //          '',lXMLNode3);
              IF lDocumentAttachment."Creation Date" <> 0DT THEN
                lXMLMgt.AddElement(lXMLNode2,'pDocDate',FORMAT(lDocumentAttachment."Creation Date",0,9),'',lXMLNode3);
              //>>IMH29.ISAT.EBA
              //<<IMH32.PC
              lXMLMgt.AddElement(lXMLNode2,'pTableID',FORMAT(lDocumentAttachment."Referent Table No.",0,1),'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'pKeyInteger1',FORMAT(lDocumentAttachment."Key Integer 1",0,1),'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'pKeyInteger2',FORMAT(lDocumentAttachment."Key Integer 2",0,1),'',lXMLNode3);
              IF lDocumentAttachment."Key Code 1" <> '' THEN BEGIN
                lXMLMgt.AddElement(lXMLNode2,'pKeyCode1',lDocumentAttachment."Key Code 1",'',lXMLNode3);
              END;
              IF lDocumentAttachment."Key Code 2" <> '' THEN BEGIN
                lXMLMgt.AddElement(lXMLNode2,'pKeyCode2',lDocumentAttachment."Key Code 2",'',lXMLNode3);
              END;
              lXMLMgt.AddElement(lXMLNode2,'pKeyEntryNo',FORMAT(lDocumentAttachment."Entry No.",0,1),'',lXMLNode3);
              IF lDocumentAttachment."Service Document No." <> '' THEN BEGIN
                lXMLMgt.AddElement(lXMLNode2,'pServiceHeaderNo',lDocumentAttachment."Service Document No.",'',lXMLNode3);
              END;
              lXMLMgt.AddElement(lXMLNode2,'pInterventionLineNo',FORMAT(lDocumentAttachment."Service Intervention Line No.",0,1),
                '',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'pInterventionQuoteLineNo',FORMAT(lDocumentAttachment."Intervention Quote Line No.",0,1),
                '',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'pDocumentType',FORMAT(lDocumentAttachment."Document Queue Type",0,9),
                '',lXMLNode3);
              //>>IMH32.PC
            UNTIL lDocumentAttachment.NEXT = 0;
          END;
        UNTIL lDocumentQueue.NEXT = 0;
      END;

      // Parcours des ‚critures interactions
      lInterLogEntry.SETCURRENTKEY("Service No.","Service Header No.","Intervention Line No.");
      lInterLogEntry.SETRANGE("Service No.",lIntervLine."Service No.");
      lInterLogEntry.SETRANGE("Service Header No.",pServiceHeaderNo);
      lInterLogEntry.SETRANGE("Intervention Line No.",lIntervLine."Line No.");
      //<<IMH29.ISAT.EBA
      //lInterLogEntry.SETRANGE("Contact Company No.",pProviderNo);
      lInterLogEntry.SETRANGE("Provider No.",pProviderNo);
      //>>IMH29.ISAT.EBA
      //<<IMH32.PC
      IF pInterventionQuoteLineNo <> 0 THEN BEGIN
        lInterLogEntry.SETRANGE("Intervention Quote No.",pInterventionQuoteLineNo);
      END;
      //>>IMH32.PC
      IF NOT lInterLogEntry.ISEMPTY THEN BEGIN
        lInterLogEntry.FINDSET;
        REPEAT
          WITH lDocumentAttachment DO BEGIN
            RESET;
            SETCURRENTKEY("Interaction Log Entry No.");
            SETRANGE("Interaction Log Entry No.",lInterLogEntry."Entry No.");
            SETRANGE("Referent Table No.",DATABASE::"Interaction Log Entry"); // ???
            IF NOT ISEMPTY THEN BEGIN
              FINDSET;
              REPEAT
        //<<IMH36.ST
                IF "PDF Exist" THEN
                  "File Extension" := 'PDF';
        //>>IMH36.ST
                lXMLMgt.AddElement(lXMLNode1,'Document','','',lXMLNode2);
                lXMLMgt.AddElement(lXMLNode2,'pDocEntryNo',FORMAT("Interaction Log Entry No."),'',lXMLNode3);
                lXMLMgt.AddElement(lXMLNode2,'pAttachEntryNo',FORMAT("Entry No."),'',lXMLNode3);
                //<<IMH29.ISAT.EBA
                IF Description <> '' THEN
                  lXMLMgt.AddElement(lXMLNode2,'pDocName',Description,'',lXMLNode3)
                ELSE
                //>>IMH29.ISAT.EBA
                  lXMLMgt.AddElement(lXMLNode2,'pDocName',"Description 2",'',lXMLNode3);
                IF "File Size" <> 0 THEN
                  lXMLMgt.AddElement(lXMLNode2,'pDocSize',FORMAT("File Size"),'',lXMLNode3);
                lXMLMgt.AddElement(lXMLNode2,'pDocType',"File Extension",'',lXMLNode3);
                //<<IMH29.ISAT.EBA
                //IF lDocumentFlow."Default Channel" <> '' THEN
                //  lXMLMgt.AddElement(lXMLNode2,'pDocSource',lDocumentFlow."Default Channel",'',lXMLNode3);
                //IF lDocumentQueue."Document Date" <> 0D THEN
                //  lXMLMgt.AddElement(lXMLNode2,'pDocDate',FORMAT(lDocumentQueue."Document Date",0,'<Year4>-<Month,2>-<Day,2>'),
                //          '',lXMLNode3);

                IF lInterLogEntry."Interaction Group Code" <> '' THEN
                  lXMLMgt.AddElement(lXMLNode2,'pDocSource',lInterLogEntry."Interaction Group Code",'',lXMLNode3);

                IF "Creation Date" <> 0DT THEN
                  lXMLMgt.AddElement(lXMLNode2,'pDocDate',FORMAT("Creation Date",0,9),'',lXMLNode3);
                //>>IMH29.ISAT.EBA
                //<<IMH32.PC
                lXMLMgt.AddElement(lXMLNode2,'pTableID',FORMAT("Referent Table No.",0,1),'',lXMLNode3);
                lXMLMgt.AddElement(lXMLNode2,'pKeyInteger1',FORMAT("Key Integer 1",0,1),'',lXMLNode3);
                lXMLMgt.AddElement(lXMLNode2,'pKeyInteger2',FORMAT("Key Integer 2",0,1),'',lXMLNode3);
                IF "Key Code 1" <> '' THEN BEGIN
                  lXMLMgt.AddElement(lXMLNode2,'pKeyCode1',"Key Code 1",'',lXMLNode3);
                END;
                IF "Key Code 2" <> '' THEN BEGIN
                  lXMLMgt.AddElement(lXMLNode2,'pKeyCode2',"Key Code 2",'',lXMLNode3);
                END;
                lXMLMgt.AddElement(lXMLNode2,'pKeyEntryNo',FORMAT("Entry No.",0,1),'',lXMLNode3);
                IF "Service Document No." <> '' THEN BEGIN
                  lXMLMgt.AddElement(lXMLNode2,'pServiceHeaderNo',"Service Document No.",'',lXMLNode3);
                END;
                lXMLMgt.AddElement(lXMLNode2,'pInterventionLineNo',FORMAT("Service Intervention Line No.",0,1),
                  '',lXMLNode3);
                lXMLMgt.AddElement(lXMLNode2,'pInterventionQuoteLineNo',FORMAT("Intervention Quote Line No.",0,1),
                  '',lXMLNode3);
                lXMLMgt.AddElement(lXMLNode2,'pDocumentType',FORMAT("Document Queue Type",0,9),'',lXMLNode3);
                //>>IMH32.PC
              UNTIL NEXT = 0;
            END;
          END; // WITH
        UNTIL lInterLogEntry.NEXT = 0;
      END;

      // Parcours des documents attach‚s sans intervention
      WITH lDocumentAttachment DO BEGIN
        RESET;
        SETCURRENTKEY("Provider No.");
        SETRANGE("Provider No.",pProviderNo);
        SETRANGE("Referent Table No.",DATABASE::"Service Header");
        SETRANGE("Service Document No.",pServiceHeaderNo);
        SETRANGE("Service Intervention Line No.",pInterventionNo);
        //<<IMH32.PC
        IF pInterventionQuoteLineNo <> 0 THEN BEGIN
          SETRANGE("Intervention Quote Line No.",pInterventionQuoteLineNo);
        END;
        //>>IMH32.PC
      //<<IMH39.ST
      //  SETRANGE("Interaction Log Entry No.",0);
      //>>IMH39.ST
        IF NOT ISEMPTY THEN BEGIN
          FINDSET;
          REPEAT
            lXMLMgt.AddElement(lXMLNode1,'Document','','',lXMLNode2);
            //<<IMH29.ISAT.EBA
            //lXMLMgt.AddElement(lXMLNode2,'pDocEntryNo',FORMAT("Interaction Log Entry No."),'',lXMLNode3);
            lXMLMgt.AddElement(lXMLNode2,'pDocEntryNo',FORMAT("Key Integer 2"),'',lXMLNode3);
            //>>IMH29.ISAT.EBA

            lXMLMgt.AddElement(lXMLNode2,'pAttachEntryNo',FORMAT("Entry No."),'',lXMLNode3);
            //<<IMH29.ISAT.EBA
            IF Description <> '' THEN
              lXMLMgt.AddElement(lXMLNode2,'pDocName',Description,'',lXMLNode3)
            ELSE
            //>>IMH29.ISAT.EBA
              lXMLMgt.AddElement(lXMLNode2,'pDocName',"Description 2",'',lXMLNode3);
            IF lDocumentAttachment."File Size" <> 0 THEN
              lXMLMgt.AddElement(lXMLNode2,'pDocSize',FORMAT("File Size"),'',lXMLNode3);
            lXMLMgt.AddElement(lXMLNode2,'pDocType',"File Extension",'',lXMLNode3);
            //<<IMH29.ISAT.EBA
            IF "Attach. Template Code" <> '' THEN
              lXMLMgt.AddElement(lXMLNode2,'pDocSource',"Attach. Template Code",'',lXMLNode3);
            //>>IMH29.ISAT.EBA
            IF "Creation Date" <> 0DT THEN
              lXMLMgt.AddElement(lXMLNode2,'pDocDate',FORMAT("Creation Date",0,9),'',lXMLNode3);
            //<<IMH32.PC
            lXMLMgt.AddElement(lXMLNode2,'pTableID',FORMAT(lDocumentAttachment."Referent Table No.",0,1),'',lXMLNode3);
            lXMLMgt.AddElement(lXMLNode2,'pKeyInteger1',FORMAT(lDocumentAttachment."Key Integer 1",0,1),'',lXMLNode3);
            lXMLMgt.AddElement(lXMLNode2,'pKeyInteger2',FORMAT(lDocumentAttachment."Key Integer 2",0,1),'',lXMLNode3);
            IF lDocumentAttachment."Key Code 1" <> '' THEN BEGIN
              lXMLMgt.AddElement(lXMLNode2,'pKeyCode1',lDocumentAttachment."Key Code 1",'',lXMLNode3);
            END;
            IF lDocumentAttachment."Key Code 2" <> '' THEN BEGIN
              lXMLMgt.AddElement(lXMLNode2,'pKeyCode2',lDocumentAttachment."Key Code 2",'',lXMLNode3);
            END;
            lXMLMgt.AddElement(lXMLNode2,'pKeyEntryNo',FORMAT(lDocumentAttachment."Entry No.",0,1),'',lXMLNode3);
            IF lDocumentAttachment."Service Document No." <> '' THEN BEGIN
              lXMLMgt.AddElement(lXMLNode2,'pServiceHeaderNo',lDocumentAttachment."Service Document No.",'',lXMLNode3);
            END;
            lXMLMgt.AddElement(lXMLNode2,'pInterventionLineNo',FORMAT(lDocumentAttachment."Service Intervention Line No.",0,1),
              '',lXMLNode3);
            lXMLMgt.AddElement(lXMLNode2,'pInterventionQuoteLineNo',FORMAT(lDocumentAttachment."Intervention Quote Line No.",0,1),
              '',lXMLNode3);
            lXMLMgt.AddElement(lXMLNode2,'pDocumentType',FORMAT(lDocumentAttachment."Document Queue Type",0,9),'',lXMLNode3);
            //>>IMH32.PC
          UNTIL NEXT = 0;
        END;
      END;
      }


      lFileName := ExtrFct.GetTempFilename('xml');
      lXMLDoc.save(lFileName);
      IF lFile.OPEN(lFileName) THEN BEGIN
        lFile.CREATEINSTREAM(lInstream);
        pDocumentList.READ(lInstream);
        lFile.CLOSE;
        ERASE(lFileName);
      END ELSE BEGIN
        ERROR(Text013);
      END;

      //<<IMH65.PC
      ExtrFct.Finish(lGUID);
      //>>IMH65.PC
    END;

    PROCEDURE ListAllDocAttachmentService@1000000005(pServiceHeaderNo@1100281004 : Code[20];VAR pDocumentList@1100281001 : BigText);
    VAR
      lServiceHeader@1100281006 : Record 5900;
      lIntervLine@1100281014 : Record 50075;
      lXMLDoc@1100281008 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lXMLNode1@1100281009 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lXMLMgt@1100281012 : Codeunit 8016710;
      lFileName@1100281015 : Text[1024];
      lFile@1100281017 : File;
      lInstream@1100281018 : InStream;
      lFctName@1000000001 : Text[30];
      lGUID@1000000002 : GUID;
    BEGIN
      //IMH47.ST
      // Fonction de list des Attachment d'un service
      {
      CritŠres de filtrage :
      - Identifiant systŠme NAV de la ligne produit

      ParamŠtres d‚finitfs :
      - En entr‚e
        - pServiceHeaderNo : Nø entˆte service
        - pDocumentList : mettre vide
      - En sortie
        - pDocumentList : Dataset des documents en XML avec noeud racine DocumentList
          - Document
             - pFlowCode : Code workflow (premiŠre partie de l'identifiant Nav du document)
             - pDocEntryNo : Nø s‚quence document (seconde partie de l'identifiant Nav du document)
             - pAttachEntryNo : Nø s‚quence piŠce (troisiŠme partie de l'identifiant Nav du document)
             - pDocName : Nom du document
             - pDocSize : Taille du document
             - pDocType : Type du document
             - pDocSource : source du document
             - pDocDate : date du document
             - pTableID : Cl‚ primaire
             - pKeyInteger1 : Cl‚ primaire
             - pKeyInteger2 : Cl‚ primaire
             - pKeyCode1 : Cl‚ primaire
             - pKeyCode2 : Cl‚ primaire
             - pEntryNo : Cl‚ primaire
             - pServiceHeaderNo : Nø ligne de produit
             - pInterventionLineNo : Nø de ligne de produit
             - pInterventionQuoteLineNo : Nø ligne devis
      }

      // Cr‚ation d'une ligne de controle qualit‚
      //<<IMH65.PC
      ExtrFct.Initial(2,'ListAllDocAttachmentService',pServiceHeaderNo,lGUID);
      //>>IMH65.PC

      // R‚cup‚rer l'entˆte de service
      IF NOT lServiceHeader.GET(lServiceHeader."Document Type"::Invoice,pServiceHeaderNo) THEN
        ERROR(Text001,pServiceHeaderNo);

      lXMLMgt.CreateXml(lXMLDoc,'<DocumentList />',lXMLNode1);
      lIntervLine.SETRANGE("Service Header No.", lServiceHeader."Service No.");
      lIntervLine.SETFILTER("Provider No.", '<>%1', '');
      IF lIntervLine.FINDSET(FALSE) THEN
        REPEAT
          AddIntervDocToDocList(lIntervLine, 0, lIntervLine."Provider No.", lXMLNode1);
        UNTIL lIntervLine.NEXT = 0;

      lFileName := ExtrFct.GetTempFilename('xml');
      lXMLDoc.save(lFileName);
      IF lFile.OPEN(lFileName) THEN BEGIN
        lFile.CREATEINSTREAM(lInstream);
        pDocumentList.READ(lInstream);
        lFile.CLOSE;
        ERASE(lFileName);
      END ELSE BEGIN
        ERROR(Text013);
      END;

      //<<IMH65.PC
      ExtrFct.Finish(lGUID);
      //>>IMH65.PC
    END;

    PROCEDURE GetUnplannedPreVisitReason@1100281014(pProviderNo@1100281004 : Code[20];pServiceHeaderNo@1100281003 : Code[20];pInterventionNo@1100281002 : Integer;pReasonDescription@1100281001 : Text[80];pDetailReasonDescription@1100281009 : Text[1024];pExtranetUserNo@1100281010 : Code[20];pExtranetUserName@1100281005 : Text[50];pExtranetUserFirstName@1100281000 : Text[50]) : Boolean;
    VAR
      lProvider@1100281006 : Record 50000;
      lServiceHeader@1100281007 : Record 5900;
      lIntervLine@1100281008 : Record 50075;
      lBigText@1000000000 : BigText;
      lReasonDesc@1000000001 : Text[250];
      lGUID@1000000002 : GUID;
    BEGIN
      // IMH08 ISAT.EB --> A tester 24/08/2011
      {
      Rubrique 11.07
      0000691: Web Service SOAP : Raison de non planification de pr‚-visite

      Colonnes attendues :
      - Retour de confirmation du succŠs de l'op‚ration

      ParamŠtres :
      - Identifiant de l'intervention
      - Raison de la non planification de pr‚-visite
      - D‚tail de la non planification
      - Nom de l'‚ventuelle piŠce jointe
      - Extension de l'‚ventuelle piŠce jointe
      - Contenu binaire de l'‚ventuelle piŠce jointe

      ParamŠtres d‚finitifs :
      - En entr‚e
        - pProviderNo : Nø prestataire
        - pServiceHeaderNo : Nø entˆte de service
        - pInterventionNo : Nø intervention
        - pReasonDescription : raison de la non planification
        - pExtranetUserNo
        - pExtranetUserName
        - pExtranetUserFirstName
      }
      GLOBALLANGUAGE(1036);
      // IMH33.PC - Ajout paramŠtre pDetailReasonDescription

      //<<IMH65.PC
      ExtrFct.Initial(2,'GetunplannedPreVisitReason',
        STRSUBSTNO(
          '%1-%2-%3-%4-%5',
          pProviderNo,pServiceHeaderNo,pInterventionNo,pReasonDescription,pDetailReasonDescription),
        lGUID);
      //>>IMH65.PC

      // R‚cup‚rer le prestataire
      IF NOT lProvider.GET(pProviderNo) THEN
        ERROR(Text000,pProviderNo);

      // R‚cup‚rer l'entˆte de service
      IF NOT lServiceHeader.GET(lServiceHeader."Document Type"::Invoice,pServiceHeaderNo) THEN
        ERROR(Text001,pServiceHeaderNo);

      IF NOT ExtrFct.GetInterv(pServiceHeaderNo, pInterventionNo, TRUE, lIntervLine) THEN
        EXIT(FALSE);

      //<<IMH35.ST
      // Les deux cr‚ations de commentaires sont remplac‚s
      // Cr‚er la ligne de commentaire
      //CreateAdvCommentText(lIntervLine,pReasonDescription,CURRENTDATETIME,COPYSTR(pExtranetUserName,1,30));
      //<<IMH33.PC
      //CreateAdvCommentText(lIntervLine,pDetailReasonDescription,CURRENTDATETIME,COPYSTR(pExtranetUserName,1,30));
      //>>IMH33.PC
      lBigText.ADDTEXT(Text102b);
      IF pReasonDescription <> '' THEN
      IF pReasonDescription <> '' THEN
      //<<IMH59
      BEGIN
        lReasonDesc := GetReasonDescription(1000,pReasonDescription);
        IF lReasonDesc = '' THEN
          lReasonDesc := pReasonDescription;
        lBigText.ADDTEXT(Text102c + lReasonDesc + '.');
      END;
      //>>IMH59
      IF pDetailReasonDescription <> '' THEN
        lBigText.ADDTEXT(Text102d + pDetailReasonDescription + '.');
      ExtrFct.CreateIntervCommentBigText(lIntervLine, lBigText, CURRENTDATETIME,COPYSTR(pExtranetUserName,1,30));
      //>>IMH35.ST

      // Cr‚ation ligne activit‚ corbeille
      GetInterfaceSetup;
      IF InterfaceSetup."Unplanned Previsit Task Code" <> '' THEN BEGIN
        ExtrFct.CreateTrayLineInterv(lIntervLine,InterfaceSetup."Unplanned Previsit Task Code");
      END;

      //<<IMH65.PC
      ExtrFct.Finish(lGUID);
      //>>IMH65.PC

      EXIT(TRUE);
    END;

    PROCEDURE ContactBeneficiarie@1100281019(pProviderNo@1100281002 : Code[20];pServiceHeaderNo@1100281001 : Code[20];pInterventionNo@1100281000 : Integer;pPreVisitDateTime@1100281006 : DateTime) : Boolean;
    VAR
      lProvider@1100281003 : Record 50000;
      lServiceHeader@1100281004 : Record 5900;
      lIntervLine@1100281005 : Record 50075;
      lBigText@1000000000 : BigText;
      lCreateTrayLine@1000000001 : Boolean;
      lGUID@1000000002 : GUID;
    BEGIN
      // IMH09 ISAT.EB --> A tester 19/08/2011
      {
      Rubrique 11.07
      0000690: Web Service SOAP : "Contacter le soci‚taire"

      Colonnes attendues :
      - Retour de confirmation du succŠs de l'op‚ration

      ParamŠtres :
      - Identifiant de l'intervention
      - Date de pr‚-visite
      - Heure de pr‚-visite

      ParamŠtres d‚finitifs :
      - En entr‚e
        - pProviderNo
        - pServiceHeaderNo
        - pInterventionNo
        - pPreVisitDateTime
      }
      GLOBALLANGUAGE(1036);

      //<<IMH65.PC
      ExtrFct.Initial(
        2,'CreateBeneficiarie',
        STRSUBSTNO('%1-%2-%3-%4',pProviderNo,pServiceHeaderNo,pInterventionNo,pPreVisitDateTime),
        lGUID);
      //>>IMH65.PC

      // R‚cup‚rer le prestataire
      IF NOT lProvider.GET(pProviderNo) THEN
        ERROR(Text000,pProviderNo);

      // R‚cup‚rer l'entˆte de service
      IF NOT lServiceHeader.GET(lServiceHeader."Document Type"::Invoice,pServiceHeaderNo) THEN
        ERROR(Text001,pServiceHeaderNo);

      IF NOT ExtrFct.GetInterv(pServiceHeaderNo, pInterventionNo, TRUE, lIntervLine) THEN
        EXIT(FALSE);

      WITH lIntervLine DO BEGIN
        lCreateTrayLine := "Expected Previsit Date" <> 0D; //IMH35.ST
        VALIDATE("Expected Previsit Date",DT2DATE(pPreVisitDateTime));
        VALIDATE("Expected Previsit Time",DT2TIME(pPreVisitDateTime));

        IF NOT MODIFY(TRUE) THEN
          MODIFY(FALSE);
      END;
      ExtrFct.CreateIntervCommentText(lIntervLine, Text101b + FormatDate(lIntervLine."Expected Previsit Date"),
                                      CURRENTDATETIME,''); //IMH35.ST

      // Cr‚ation ligne activit‚ corbeille
      IF lCreateTrayLine THEN BEGIN //IMH35.ST
        GetInterfaceSetup;
        IF InterfaceSetup."Contact Beneficiarie Task Code" <> '' THEN
          ExtrFct.CreateTrayLineInterv(lIntervLine,InterfaceSetup."Contact Beneficiarie Task Code");
      END;

      //<<IMH65.PC
      ExtrFct.Finish(lGUID);
      //>>IMH65.PC

      EXIT(TRUE);
    END;

    PROCEDURE DeclareUnrealizedPreVisit@1100281024(pProviderNo@1100281003 : Code[20];pServiceHeaderNo@1100281002 : Code[20];pInterventionNo@1100281001 : Integer;pReasonDescription@1100281011 : Text[80];pDetailReasonDescription@1100281010 : Text[1024];pNewPrevisitDateTime@1100281009 : DateTime;pExtranetUserNo@1100281012 : Code[20];pExtranetUserName@1100281005 : Text[50];pExtranetUserFirstName@1100281004 : Text[50]) : Boolean;
    VAR
      lProvider@1100281008 : Record 50000;
      lServiceHeader@1100281007 : Record 5900;
      lIntervLine@1100281006 : Record 50075;
      lBigText@1000000000 : BigText;
      lReasonDesc@1000000001 : Text[80];
      lGUID@1000000002 : GUID;
    BEGIN
      // IMH10 ISAT.EB --> A tester 19/08/2011
      {
      Rubrique 11.08
      0000957: Web Service SOAP : D‚claration de la "non r‚alisation de la pr‚-visite"

      ParamŠtres d'entr‚es :
      - Code raison
      - D‚tail de la raison de non r‚alisation de la pr‚-visite
      - Date de replanification d'une pr‚visite
      - Heure de replanification d'une pr‚visite

      ParamŠtres d‚finitfs :
      - En entr‚e
        - pProviderNo : Nø prestataire
        - pServiceHeaderNo : Nø entˆte service
        - pInterventionNo : Nø intervention
        - pReasonDescription : raison de non r‚alisation
        - pNewPrevisitDate : Nouvelle date de pr‚ visite
        - pNewPrevisitTime : nouvelle heure de pr‚ visite
        - pExtranetUserNo
        - pExtranetUserName
        - pExtranetUserFirstName
      }
      GLOBALLANGUAGE(1036);
      // IMH33.PC - Ajout paramŠtre pDetailReasonDescription

      //<<IMH65.PC
      ExtrFct.Initial(
        2,'DeclareUnrealizedPreVisit',
        STRSUBSTNO(
          '%1-%2-%3-%4-%5-%6',
          pProviderNo,pServiceHeaderNo,pInterventionNo,pReasonDescription,pDetailReasonDescription,pNewPrevisitDateTime),
        lGUID);
      //>>IMH65.PC

      // R‚cup‚rer le prestataire
      IF NOT lProvider.GET(pProviderNo) THEN
        ERROR(Text000,pProviderNo);

      // R‚cup‚rer l'entˆte de service
      IF NOT lServiceHeader.GET(lServiceHeader."Document Type"::Invoice,pServiceHeaderNo) THEN
        ERROR(Text001,pServiceHeaderNo);

      IF NOT ExtrFct.GetInterv(pServiceHeaderNo, pInterventionNo, TRUE, lIntervLine) THEN
        EXIT(FALSE);

      ExtrFct.EvalDateTime(pNewPrevisitDateTime);

      WITH lIntervLine DO BEGIN
        VALIDATE("Expected Previsit Date",DT2DATE(pNewPrevisitDateTime));
        VALIDATE("Expected Previsit Time",DT2TIME(pNewPrevisitDateTime));

        IF NOT MODIFY(TRUE) THEN
          MODIFY(FALSE);
      END;

      //<<IMH35.ST
      // Les deux cr‚ations de commentaires sont remplac‚s
      // Cr‚er la ligne de commentaire
      //CreateAdvCommentText(lIntervLine,pReasonDescription,CURRENTDATETIME,COPYSTR(pExtranetUserName,1,30));
      //<<IMH33.PC
      //CreateAdvCommentText(lIntervLine,pDetailReasonDescription,CURRENTDATETIME,COPYSTR(pExtranetUserName,1,30));
      //>>IMH33.PC
      lBigText.ADDTEXT(Text104b);
      IF pReasonDescription <> '' THEN
      //<<IMH59
      BEGIN
        lReasonDesc := GetReasonDescription(1001,pReasonDescription);
        IF lReasonDesc = '' THEN
          lReasonDesc :=pReasonDescription;
        lBigText.ADDTEXT(Text104c + lReasonDesc + '.');
        //lBigText.ADDTEXT(Text104c + pReasonDescription + '.');
      END;
      //>>IMH59
      IF pDetailReasonDescription <> '' THEN
        lBigText.ADDTEXT(Text104d + pDetailReasonDescription + '.');
      IF lIntervLine."Expected Previsit Date" <> 0D THEN
        lBigText.ADDTEXT(Text104e + FormatDate(lIntervLine."Expected Previsit Date"))
      ELSE
        lBigText.ADDTEXT(Text104f);
      ExtrFct.CreateIntervCommentBigText(lIntervLine, lBigText, CURRENTDATETIME,COPYSTR(pExtranetUserName,1,30));
      //>>IMH35.ST

      // Cr‚ation ligne activit‚ corbeille
      GetInterfaceSetup;
      IF InterfaceSetup."Unrealized Previsit Task Code" <> '' THEN BEGIN
        ExtrFct.CreateTrayLineInterv(lIntervLine,InterfaceSetup."Unrealized Previsit Task Code");
      END;

      //<<IMh65.PC
      ExtrFct.Finish(lGUID);
      //>>IMH65.PC

      EXIT(TRUE);
    END;

    PROCEDURE ConfirmPreVisit@1100281023(pProviderNo@1100281006 : Code[20];pServiceHeaderNo@1100281005 : Code[20];pInterventionNo@1100281004 : Integer;pPreVisitDateTime@1100281003 : DateTime;pCNRStatus@1100281007 : Boolean;pTHStatus@1100281008 : Boolean;pTHValue@1100281009 : Decimal;pFuturePreVisitDateTime@1100281010 : DateTime) : Boolean;
    VAR
      lProvider@1100281002 : Record 50000;
      lServiceHeader@1100281001 : Record 5900;
      lIntervLine@1100281000 : Record 50075;
      lTempDate@1100281011 : Date;
      lCommentLine@1000000000 : Text[1024];
      lCreateTrayLine@1000000001 : Boolean;
      lTaskCode@1100281012 : Code[10];
      lGUID@1000000002 : GUID;
    BEGIN
      // IMH11 ISAT.EB --> A tester 19/08/2011
      {
      Rubrique 11.08
      0000692: Web Service SOAP : Confirmation de r‚alisation de la pr‚-visite

      Colonnes attendues :
      - Retour de confirmation du succŠs de l'op‚ration

      ParamŠtres :
      - Identifiant de l'intervention
      - La date de r‚alisation de la pr‚-visite
      - L'heure de r‚alisation de la pr‚-visite
      - LÉ‚tat ® CNR ¯
      - LÉ‚tat ® TH ¯
      - La valeur de ® TH ¯
      - LÉ‚ventuelle date de future pr‚-visite
      - LÉ‚ventuelle heure de future pr‚-visite

      ParamŠtres d‚finitifs
      - En entr‚e
        - pProviderNo : Nø prestataire
        - pServiceHeaderNo : Nø entˆte service
        - pInterventionNo : Nø intervention
        - pPreVisitDate : Date de pr‚ visite
        - pCNRStatus : Etat CNR
        - pTHStatus : Etat TH
        - pTHValue : Valeur TH
        - pFuturePreVisitDate : Date future pr‚ visite
        - pFuturePreVisitTime : heure future pr‚ visite
      }
      GLOBALLANGUAGE(1036);

      //<<IMH65.PC
      ExtrFct.Initial(
        2,'ConfirmPreVisit',
        STRSUBSTNO(
          '%1-%2-%3-%4-%5-%6-%7-%8',
          pProviderNo,pServiceHeaderNo,pInterventionNo,pPreVisitDateTime,pCNRStatus,pTHStatus,pTHValue,pFuturePreVisitDateTime),
        lGUID);
      //>>IMH65.PC

      // R‚cup‚rer le prestataire
      IF NOT lProvider.GET(pProviderNo) THEN
        ERROR(Text000,pProviderNo);

      // R‚cup‚rer l'entˆte de service
      IF NOT lServiceHeader.GET(lServiceHeader."Document Type"::Invoice,pServiceHeaderNo) THEN
        ERROR(Text001,pServiceHeaderNo);

      IF NOT ExtrFct.GetInterv(pServiceHeaderNo, pInterventionNo, TRUE, lIntervLine) THEN
        EXIT(FALSE);

      ExtrFct.EvalDateTime(pPreVisitDateTime);
      ExtrFct.EvalDateTime(pFuturePreVisitDateTime);

      WITH lIntervLine DO BEGIN
        lCreateTrayLine := "Previsit Date" <> 0D; //IMH35.ST
        //<<IMH55.PC
        IF pPreVisitDateTime <> 0DT THEN BEGIN
        //>>IMH55.PC
          VALIDATE("Previsit Date",DT2DATE(pPreVisitDateTime));
          VALIDATE("Previsit Time",DT2TIME(pPreVisitDateTime));
        //<<IMH55.PC
        END;
        //>>IMH55.PC
        // Etat CNR ???
        IF pCNRStatus THEN BEGIN

        END;
        //<<IMH45.ISAT.EBA
        //IF pTHStatus THEN BEGIN
        //>>IMH45.ISAT.EBA
          VALIDATE(Moisture,pTHStatus);
          VALIDATE("Moisture %",pTHValue);
          IF pFuturePreVisitDateTime <> 0DT THEN BEGIN
            VALIDATE("Next Appointment Date",DT2DATE(pFuturePreVisitDateTime));
          END;
        //<<IMH45.ISAT.EBA
        //END;
        //>>IMH45.ISAT.EBA

        IF NOT MODIFY(TRUE) THEN
          MODIFY(FALSE);
      END;

      //<<IMH35.ST
      lCommentLine := STRSUBSTNO(Text105b, FormatDT(pPreVisitDateTime));
      IF pCNRStatus THEN
        lCommentLine += Text105e;
      IF pTHStatus THEN
        lCommentLine += STRSUBSTNO(Text105c, FORMAT(pTHValue) + '%');
      IF pFuturePreVisitDateTime <> 0DT THEN
        lCommentLine += STRSUBSTNO(Text105d, FormatDT(pFuturePreVisitDateTime));
      ExtrFct.CreateIntervCommentText(lIntervLine, lCommentLine, CURRENTDATETIME, '');
      //>>IMH35.ST
      //<<IMH58.ST
      IF pTHStatus THEN
        lCreateTrayLine := TRUE;
      //>>IMH58.ST
      // Cr‚ation ligne activit‚ corbeille
      IF lCreateTrayLine THEN BEGIN //IMH35.ST
        GetInterfaceSetup;
        lTaskCode := InterfaceSetup."Realized Previsit Task Code";
      //<<IMH58.ST
        IF pTHStatus AND (InterfaceSetup."Moisture Task Code" <> '') THEN
          lTaskCode := InterfaceSetup."Moisture Task Code";
      //>>IMH58.ST
        IF lTaskCode <> '' THEN
          ExtrFct.CreateTrayLineInterv(lIntervLine,lTaskCode);
      END;

      //<<IMH65.PC
      ExtrFct.Finish(lGUID);
      //>>IMH65.PC

      EXIT(TRUE);
    END;

    PROCEDURE PlanTask@1100281026(pProviderNo@1100281004 : Code[20];pServiceHeaderNo@1100281003 : Code[20];pInterventionNo@1100281002 : Integer;pBeginDate@1100281001 : DateTime;pEndDate@1100281006 : DateTime) : Boolean;
    VAR
      lProvider@1100281009 : Record 50000;
      lServiceHeader@1100281008 : Record 5900;
      lIntervLine@1100281007 : Record 50075;
      lStartDate@1000000001 : Date;
      lCreateTrayLine@1000000000 : Boolean;
      lGUID@1000000002 : GUID;
    BEGIN
      // IMH12 ISAT.EB --> A tester 24/08/2011
      {
      Rubrique 11.11
      0000694: Web Service SOAP : Travaux … planifier

      ParamŠtres :
      - Identifiant de la tƒche
      - Date de d‚marrage des travaux
      - Date de fin des travaux (NULL si non renseign‚e)

      ParamŠtres d‚fintifs :
      - En entr‚e
        - pProviderNo : Nø prestataire
        - pServiceHeaderNo : Nø entˆte service
        - pInterventionNo : Nø intervention
        - pBeginDate : date de d‚but des travaux
        - pEndDate : date de fin des travaux
      }
      GLOBALLANGUAGE(1036);

      //<<IMH65.PC
      ExtrFct.Initial(
        2,'PlanTask',
        STRSUBSTNO(
          '%1-%2-%3-%4-%5',
          pProviderNo,pServiceHeaderNo,pInterventionNo,pBeginDate,pEndDate),
        lGUID);
      //>>IMH65.PC

      // R‚cup‚rer le prestataire
      IF NOT lProvider.GET(pProviderNo) THEN
        ERROR(Text000,pProviderNo);

      // R‚cup‚rer l'entˆte de service
      IF NOT lServiceHeader.GET(lServiceHeader."Document Type"::Invoice,pServiceHeaderNo) THEN
        ERROR(Text001,pServiceHeaderNo);

      IF NOT ExtrFct.GetInterv(pServiceHeaderNo, pInterventionNo, TRUE, lIntervLine) THEN
        EXIT(FALSE);

      ExtrFct.EvalDateTime(pEndDate); //IMH37.ST

      WITH lIntervLine DO BEGIN
      //<<IMH57.ST
      //  lCreateTrayLine := ("Expected Work Start Date" <> 0D) OR ("Expected Work End Date" <> 0D); //IMH35.ST
        lCreateTrayLine := TRUE;
      //>>IMH57.ST
        lStartDate := DT2DATE(pBeginDate);
        IF (lStartDate <> 0D) AND ("Expected Work End Date" <> 0D) AND (lStartDate > "Expected Work End Date") THEN
          "Expected Work End Date" := 0D;

        VALIDATE("Expected Work Start Date",lStartDate);
        IF DT2DATE(pEndDate) <> 0D THEN
          VALIDATE("Expected Work End Date",DT2DATE(pEndDate));

        IF NOT MODIFY(TRUE) THEN
          MODIFY(FALSE);
      END;
      //<<IMH35.ST
      IF pEndDate <> 0DT THEN
        ExtrFct.CreateIntervCommentText(lIntervLine, STRSUBSTNO(Text108b + Text108c,
                             FormatDT(pBeginDate), FormatDT(pEndDate)),
                             CURRENTDATETIME, '')
      ELSE
        ExtrFct.CreateIntervCommentText(lIntervLine, STRSUBSTNO(Text108b,
                             FormatDT(pBeginDate)),
                             CURRENTDATETIME, '');
      //>>IMH35.ST


      // Cr‚ation ligne activit‚ corbeille
      IF lCreateTrayLine THEN BEGIN //IMH35.ST
        GetInterfaceSetup;
        IF InterfaceSetup."Plan Task Task Code" <> '' THEN
          ExtrFct.CreateTrayLineInterv(lIntervLine,InterfaceSetup."Plan Task Task Code");
      END;

      //<<IMH65.PC
      ExtrFct.Finish(lGUID);
      //>>IMH65.PC

      EXIT(TRUE);
    END;

    PROCEDURE ConfirmBeginTask@1100281003(pProviderNo@1100281009 : Code[20];pServiceHeaderNo@1100281008 : Code[20];pInterventionNo@1100281007 : Integer;pBeginDateTime@1100281006 : DateTime;pEndDateTime@1100281004 : DateTime) : Boolean;
    VAR
      lProvider@1100281002 : Record 50000;
      lServiceHeader@1100281001 : Record 5900;
      lIntervLine@1100281000 : Record 50075;
      lCreateTrayLine@1000000000 : Boolean;
      lGUID@1000000001 : GUID;
    BEGIN
      // IMH13 ISAT.EB --> A tester 24/08/2011
      {
      Rubrique 11.12
      0000958: Web Service SOAP : "Confirmation du d‚but des travaux"

      ParamŠtres d'entr‚es :
      - Identifiant NAV de l'intervention
      - Date r‚elle de d‚but des travaux
      - Date pr‚visionnelle de fin des travaux (ou NULL si inconnue)

      ParamŠtres d‚finitifs :
      - En entr‚e
        - pProviderNo : Nø prestataire
        - pServiceHeaderNo : Nø entˆte service
        - pInterventionNo : Nø intervention
        - pBeginDate : Date r‚elle de d‚but des travaux
        - pBeginTime : Heure r‚elle de d‚but des travaux
        - pEndDate : Date pr‚visionnelle de fin des travaux
        - pEndTime : Heure pr‚visionnelle de fin des travaux
      }
      GLOBALLANGUAGE(1036);

      //<<IMH65.PC
      ExtrFct.Initial(
        2,'ConfirmBeginTask',
        STRSUBSTNO(
          '%1-%2-%3-%4-%5',
          pProviderNo,pServiceHeaderNo,pInterventionNo,pBeginDateTime,pEndDateTime),
        lGUID);
      //>>IMH65.PC

      // R‚cup‚rer le prestataire
      IF NOT lProvider.GET(pProviderNo) THEN
        ERROR(Text000,pProviderNo);

      // R‚cup‚rer l'entˆte de service
      IF NOT lServiceHeader.GET(lServiceHeader."Document Type"::Invoice,pServiceHeaderNo) THEN
        ERROR(Text001,pServiceHeaderNo);

      IF NOT ExtrFct.GetInterv(pServiceHeaderNo, pInterventionNo, TRUE, lIntervLine) THEN
        EXIT(FALSE);

      ExtrFct.EvalDateTime(pEndDateTime);
      WITH lIntervLine DO BEGIN
        lCreateTrayLine := ("Work Start Date" <> 0D) OR ("Work End Date" <> 0D); //IMH35.ST
        VALIDATE("Work Start Date",DT2DATE(pBeginDateTime));
        IF DT2DATE(pEndDateTime) <> 0D THEN
          VALIDATE("Expected Work End Date",DT2DATE(pEndDateTime));

        IF NOT MODIFY(TRUE) THEN
          MODIFY(FALSE);
      END;
      //<<IMH35.ST
      IF pEndDateTime <> 0DT THEN
        ExtrFct.CreateIntervCommentText(lIntervLine, STRSUBSTNO(Text109b + Text109c,
                             FormatDT(pBeginDateTime), FormatDT(pEndDateTime)),
                             CURRENTDATETIME, '')
      ELSE
        ExtrFct.CreateIntervCommentText(lIntervLine, STRSUBSTNO(Text109b,
                             FormatDT(pBeginDateTime)),
                             CURRENTDATETIME, '');
      //>>IMH35.ST
      // Cr‚ation ligne activit‚ corbeille
      IF lCreateTrayLine THEN BEGIN //IMH35.ST
        GetInterfaceSetup;
        IF InterfaceSetup."Begin Task Task Code" <> '' THEN
          ExtrFct.CreateTrayLineInterv(lIntervLine,InterfaceSetup."Begin Task Task Code");
      END;

      //<<IMH65.PC
      ExtrFct.Finish(lGUID);
      //>>IMH65.PC

      EXIT(TRUE);
    END;

    PROCEDURE ConfirmEndTask@1100281035(pProviderNo@1100281009 : Code[20];pServiceHeaderNo@1100281008 : Code[20];pInterventionNo@1100281007 : Integer;pEndDateTime@1100281004 : DateTime) : Boolean;
    VAR
      lProvider@1100281002 : Record 50000;
      lServiceHeader@1100281001 : Record 5900;
      lIntervLine@1100281000 : Record 50075;
      lConfirmEndTaskDate@1100281003 : Date;
      lCreateTrayLine@1000000000 : Boolean;
      lGUID@1000000001 : GUID;
    BEGIN
      // IMH13 ISAT.EB --> A tester 24/08/2011
      GLOBALLANGUAGE(1036);

      //<<IMH65.PC
      ExtrFct.Initial(
        2,'ConfirmEndTask',
        STRSUBSTNO(
          '%1-%2-%3-%4-%5-%6-%7',
          pProviderNo,pServiceHeaderNo,pInterventionNo,pEndDateTime),
        lGUID);
      //>>IMH65.PC

      // R‚cup‚rer le prestataire
      IF NOT lProvider.GET(pProviderNo) THEN
        ERROR(Text000,pProviderNo);

      // R‚cup‚rer l'entˆte de service
      IF NOT lServiceHeader.GET(lServiceHeader."Document Type"::Invoice,pServiceHeaderNo) THEN
        ERROR(Text001,pServiceHeaderNo);

      IF NOT ExtrFct.GetInterv(pServiceHeaderNo, pInterventionNo, TRUE, lIntervLine) THEN
        EXIT(FALSE);

      lConfirmEndTaskDate := ExtrFct.EvalDate(pEndDateTime);
      WITH lIntervLine DO BEGIN

        lCreateTrayLine := ("Work End Date" <> 0D); //IMH35.ST
        VALIDATE("Work End Date",lConfirmEndTaskDate);
        IF NOT MODIFY(TRUE) THEN
          MODIFY(FALSE);
      END;
      //<<IMH35.ST
      ExtrFct.CreateIntervCommentText(lIntervLine, STRSUBSTNO(Text110b,FormatDT(pEndDateTime)), CURRENTDATETIME, '');
      //>>IMH35.ST

      // Cr‚ation ligne activit‚ corbeille
      IF lCreateTrayLine THEN BEGIN //IMH35.ST
        GetInterfaceSetup;
        IF InterfaceSetup."End Task Task Code" <> '' THEN
          ExtrFct.CreateTrayLineInterv(lIntervLine,InterfaceSetup."End Task Task Code");
      END;

      //<<IMH65.PC
      ExtrFct.Finish(lGUID);
      //>>IMH65.PC

      EXIT(TRUE);
    END;

    PROCEDURE GetUnplannedTaskReason@1000000012(pProviderNo@1000000009 : Code[20];pServiceHeaderNo@1000000008 : Code[20];pInterventionNo@1000000007 : Integer;pReasonDescription@1000000006 : Text[80];pDetailReasonDescription@1000000005 : Text[1024];pExtranetUserNo@1000000002 : Code[20];pExtranetUserName@1000000001 : Text[50];pExtranetUserFirstName@1000000000 : Text[50]) : Boolean;
    VAR
      lIntervLine@1000000014 : Record 50075;
      lBigtext@1000000013 : BigText;
      lFctName@1000000012 : Text[80];
      lGUID@1000000011 : GUID;
      lNewStart@1000000010 : Date;
      lNewEnd@1000000004 : Date;
      lReplanned@1000000003 : Boolean;
      lReasonDesc@1000000015 : Text[80];
    BEGIN
      //IMH50.ST
      //<<IMH65.PC
      ExtrFct.Initial(
        2,'GetUnplannedTaskReason',
        STRSUBSTNO(
          '%1-%2-%3-%4-%5',
          pProviderNo,pServiceHeaderNo,pInterventionNo,pReasonDescription,pDetailReasonDescription),
        lGUID);
      //>>IMH65.PC

      IF NOT ExtrFct.GetInterv(pServiceHeaderNo, pInterventionNo, TRUE, lIntervLine) THEN
        EXIT(FALSE);


      lBigtext.ADDTEXT(Text118a + ' ');
      lBigtext.ADDTEXT(Text118b);
      WITH lIntervLine DO BEGIN
      END;

      IF pReasonDescription <> '' THEN
      //<<IMH59
      BEGIN
        lReasonDesc := GetReasonDescription(1002,pReasonDescription);
        IF lReasonDesc = '' THEN
          lReasonDesc :=pReasonDescription;
        lBigtext.ADDTEXT(STRSUBSTNO(Text111c, lReasonDesc));
        //lBigtext.ADDTEXT(STRSUBSTNO(Text111c, pReasonDescription));
      END;
      //>>IMH59


      IF pDetailReasonDescription <> '' THEN
        lBigtext.ADDTEXT(STRSUBSTNO(Text111d, pDetailReasonDescription));
      ExtrFct.CreateIntervCommentBigText(lIntervLine, lBigtext, CURRENTDATETIME,COPYSTR(pExtranetUserName,1,30));
      GetInterfaceSetup;
      IF InterfaceSetup."Unplanned Work Reas. Task Code" <> '' THEN
        ExtrFct.CreateTrayLineInterv(lIntervLine,InterfaceSetup."Unplanned Work Reas. Task Code");

      //<<IMH65.PC
      ExtrFct.Finish(lGUID);
      //>>IMH65.PC

      EXIT(TRUE);
    END;

    PROCEDURE GetUnstartedTaskReason@1000000009(pProviderNo@1100281002 : Code[20];pServiceHeaderNo@1100281001 : Code[20];pInterventionNo@1100281000 : Integer;pReasonDescription@1100281010 : Text[80];pDetailReasonDescription@1100281006 : Text[1024];pNewExpectedStartDate@1100281007 : DateTime;pNewExpectedEndDate@1000000003 : DateTime;pExtranetUserNo@1100281011 : Code[20];pExtranetUserName@1100281009 : Text[50];pExtranetUserFirstName@1100281008 : Text[50]) : Boolean;
    VAR
      lIntervLine@1100281003 : Record 50075;
      lBigtext@1000000000 : BigText;
      lFctName@1000000001 : Text[80];
      lGUID@1000000002 : GUID;
      lNewStart@1000000004 : Date;
      lNewEnd@1000000005 : Date;
      lReplanned@1000000006 : Boolean;
      lReasonDesc@1000000007 : Text[80];
      lText@1000000008 : Text[1024];
    BEGIN
      //IMH50.ST
      //<<IMH65.PC
      ExtrFct.Initial(
        2,'GetStartTaskDelayReason',
        STRSUBSTNO(
          '%1-%2-%3-%4-%5-%6-%7',
          pProviderNo,pServiceHeaderNo,pInterventionNo,pReasonDescription,pDetailReasonDescription,pNewExpectedStartDate,
          pNewExpectedEndDate),
        lGUID);
      //>>IMH65.PC

      IF NOT ExtrFct.GetInterv(pServiceHeaderNo, pInterventionNo, TRUE, lIntervLine) THEN
        EXIT(FALSE);

      lBigtext.ADDTEXT(Text117a + ' ');
      IF lIntervLine."Expected Work Start Date" <> 0D THEN BEGIN
        //<<IMH68.PC
        //lBigtext.ADDTEXT(STRSUBSTNO(Text117b, lIntervLine."Expected Work Start Date"));
        lBigtext.ADDTEXT(STRSUBSTNO(Text117b, FormatDate(lIntervLine."Expected Work Start Date")));
        //>>IMH68.PC
      END;
      lNewStart := ExtrFct.EvalDate(pNewExpectedStartDate);
      lNewEnd := ExtrFct.EvalDate(pNewExpectedEndDate);

      IF lNewStart <> 0D THEN BEGIN
        WITH lIntervLine DO BEGIN
          IF ("Expected Work Start Date" <> lNewStart) OR
             ("Expected Work End Date" <> lNewEnd) THEN BEGIN
            "Expected Work Start Date" := lNewStart;
            "Expected Work End Date" := lNewEnd;
            lReplanned := TRUE;
            MODIFY(TRUE);
          END;
        END;
      END;
      IF pReasonDescription <> '' THEN
      //<<IMH59
      BEGIN
        lReasonDesc := GetReasonDescription(1002,pReasonDescription);
        IF lReasonDesc = '' THEN
          lReasonDesc :=pReasonDescription;
        lBigtext.ADDTEXT(STRSUBSTNO(Text111c, lReasonDesc));
        //lBigtext.ADDTEXT(STRSUBSTNO(Text111c, pReasonDescription));
      END;
      //>>IMH59


      IF pDetailReasonDescription <> '' THEN
        lBigtext.ADDTEXT(STRSUBSTNO(Text111d, pDetailReasonDescription));
      IF lReplanned THEN BEGIN
        //<<IMH68.PC
        //lText := STRSUBSTNO(Text117c, lIntervLine."Expected Work Start Date");
        lText := STRSUBSTNO(Text117c, FormatDate(lIntervLine."Expected Work Start Date"));
        //>>IMH68.PC
        IF lIntervLine."Expected Work End Date" <> 0D THEN BEGIN
          //<<IMH68.PC
          //lText := lText + STRSUBSTNO(Text117d, lIntervLine."Expected Work End Date");
          lText := lText + STRSUBSTNO(Text117d, FormatDate(lIntervLine."Expected Work End Date"));
          //>>IMH68.PC
        END;
        lBigtext.ADDTEXT(lText);
      END;
      ExtrFct.CreateIntervCommentBigText(lIntervLine, lBigtext, CURRENTDATETIME,COPYSTR(pExtranetUserName,1,30));
      GetInterfaceSetup;
      IF lNewStart = 0D THEN BEGIN
        IF InterfaceSetup."Unstarted Work Reas. Task NoD" <> '' THEN
          ExtrFct.CreateTrayLineInterv(lIntervLine,InterfaceSetup."Unstarted Work Reas. Task NoD");
      END
      ELSE BEGIN
        IF InterfaceSetup."Unstarted Work Reas. Task Repl" <> '' THEN
          ExtrFct.CreateTrayLineInterv(lIntervLine,InterfaceSetup."Unstarted Work Reas. Task Repl");
      END;

      //<<IMH65.PC
      ExtrFct.Finish(lGUID);
      //>>IMH65.PC

      EXIT(TRUE);
    END;

    PROCEDURE GetEndTaskDelayReason@1100281007(pProviderNo@1100281002 : Code[20];pServiceHeaderNo@1100281001 : Code[20];pInterventionNo@1100281000 : Integer;pReasonDescription@1100281010 : Text[80];pDetailReasonDescription@1100281006 : Text[1024];pNewEndDate@1100281007 : DateTime;pExtranetUserNo@1100281011 : Code[20];pExtranetUserName@1100281009 : Text[50];pExtranetUserFirstName@1100281008 : Text[50]) : Boolean;
    VAR
      lProvider@1100281005 : Record 50000;
      lServiceHeader@1100281004 : Record 5900;
      lIntervLine@1100281003 : Record 50075;
      lBigtext@1000000000 : BigText;
      lNewEnd@1100281012 : Date;
      lReasonDesc@1000000001 : Text[80];
      lGUID@1000000002 : GUID;
    BEGIN
      // IMH14 ISAT.EB --> A tester 24/08/2011
      {
      Rubrique 11.13
      0000696: Web Service SOAP : Raison retard de fin de travaux

      Colonnes attendues :
      - Retour de confirmation du succŠs de l'op‚ration

      ParamŠtres :
      - Identifiant NAV de l'intervention
      - Raison de la non planification de pr‚-visite
      - D‚tail de la non planification
      - Date pr‚visionnelle de fin de travaux (NULL si non renseign‚e)

      ParamŠtres d‚finitifs :
      - En entr‚e
        - pProviderNo : Nø prestataire
        - pServiceHeaderNo : Nø entˆte service
        - pInterventionNo : Nø intervention
        - pReasonDescription : raison de non planification
        - pNewEndDate : Date pr‚visionnelle de fin de travaux
        - pExtranetUserNo
        - pExtranetUserName
        - pExtranetUserFirstName
      }
      GLOBALLANGUAGE(1036);
      // IMH33.PC - Ajout paramŠtre pDetailReasonDescription

      //<<IMH65.PC
      ExtrFct.Initial(
        2,'GetEndTaskDelayReason',
        STRSUBSTNO(
          '%1-%2-%3-%4-%5-%6',
          pProviderNo,pServiceHeaderNo,pInterventionNo,pReasonDescription,
          pDetailReasonDescription,pNewEndDate),
        lGUID);
      //>>IMH65.PC

      // R‚cup‚rer le prestataire
      IF NOT lProvider.GET(pProviderNo) THEN
        ERROR(Text000,pProviderNo);

      // R‚cup‚rer l'entˆte de service
      IF NOT lServiceHeader.GET(lServiceHeader."Document Type"::Invoice,pServiceHeaderNo) THEN
        ERROR(Text001,pServiceHeaderNo);

      IF NOT ExtrFct.GetInterv(pServiceHeaderNo, pInterventionNo, TRUE, lIntervLine) THEN
        EXIT(FALSE);

      lBigtext.ADDTEXT(STRSUBSTNO(Text111b,FormatDate(lIntervLine."Expected Work End Date"))); //IMH35.ST
      WITH lIntervLine DO BEGIN
        //<<IMH54.PC
        //IF DT2DATE(pNewEndDate) <> 0D THEN BEGIN
        lNewEnd := ExtrFct.EvalDate(pNewEndDate);
        IF lNewEnd <> 0D THEN BEGIN
        //>>IMH54.PC
          VALIDATE("Expected Work End Date",lNewEnd);
          IF NOT MODIFY(TRUE) THEN BEGIN
            MODIFY(FALSE);
          END;
        END;
      END;
      //<<IMH35.ST remplacement de la cr‚ation des 2 commentaires
      // Cr‚er la ligne de commentaire
      //CreateAdvCommentText(lIntervLine,pReasonDescription,CURRENTDATETIME,COPYSTR(pExtranetUserName,1,30));
      //<<IMH33.PC
      //CreateAdvCommentText(lIntervLine,pDetailReasonDescription,CURRENTDATETIME,COPYSTR(pExtranetUserName,1,30));
      //>>IMH33.PC
      IF pReasonDescription <> '' THEN
      //<<IMH59
      BEGIN
        lReasonDesc := GetReasonDescription(1002,pReasonDescription);
        IF lReasonDesc = '' THEN
          lReasonDesc :=pReasonDescription;
        lBigtext.ADDTEXT(STRSUBSTNO(Text111c, lReasonDesc));
        //lBigtext.ADDTEXT(STRSUBSTNO(Text111c, pReasonDescription));
      END;
      //>>IMH59
      IF pDetailReasonDescription <> '' THEN
        lBigtext.ADDTEXT(STRSUBSTNO(Text111d, pDetailReasonDescription));
      IF lNewEnd <> 0D THEN
        lBigtext.ADDTEXT(STRSUBSTNO(Text111e, FormatDate(lNewEnd)));
      ExtrFct.CreateIntervCommentBigText(lIntervLine, lBigtext, CURRENTDATETIME,COPYSTR(pExtranetUserName,1,30));
      //>>IMH35.ST
      // Cr‚ation ligne activit‚ corbeille
      GetInterfaceSetup;
      IF InterfaceSetup."End Task Delay Task Code" <> '' THEN BEGIN
        ExtrFct.CreateTrayLineInterv(lIntervLine,InterfaceSetup."End Task Delay Task Code");
      END;

      //<<IMH65.PC
      ExtrFct.Finish(lGUID);
      //>>IMH65.PC

      EXIT(TRUE);
    END;

    PROCEDURE GetPVEndTask@1100281011(pProviderNo@1100281002 : Code[20];pServiceHeaderNo@1100281001 : Code[20];pInterventionNo@1100281000 : Integer;pEndDate@1100281006 : DateTime) : Boolean;
    VAR
      lProvider@1100281005 : Record 50000;
      lServiceHeader@1100281004 : Record 5900;
      lIntervLine@1100281003 : Record 50075;
      lCreateTrayLine@1000000000 : Boolean;
      lGUID@1000000001 : GUID;
    BEGIN
      // IMH15 ISAT.EB --> A tester 24/08/2011
      {
      Rubrique 11.13
      0000695: Web Service SOAP : PV de fin de travaux … transmettre

      Colonnes attendues :
      - Retour de confirmation du succŠs de l'op‚ration

      ParamŠtres :
      - Identifiant NAV de l'intervention
      - Date r‚elle de fin des travaux

      ParamŠtres d‚finitifs :
      - En entr‚e
        - pProviderNo : Nø prestataire
        - pServiceHeaderNo : Nø entˆte service
        - pInterventionNo : Nø intervention
        - pEndDate : Date r‚elle de fin des travaux
      }
      GLOBALLANGUAGE(1036);

      //<<IMH65.PC
      ExtrFct.Initial(2,'GetPVEndTask',STRSUBSTNO('%1-%2-%3-%4',pProviderNo,pServiceHeaderNo,pInterventionNo,pEndDate),lGUID);
      //>>IMH65.PC

      // R‚cup‚rer le prestataire
      IF NOT lProvider.GET(pProviderNo) THEN
        ERROR(Text000,pProviderNo);

      // R‚cup‚rer l'entˆte de service
      IF NOT lServiceHeader.GET(lServiceHeader."Document Type"::Invoice,pServiceHeaderNo) THEN
        ERROR(Text001,pServiceHeaderNo);

      IF NOT ExtrFct.GetInterv(pServiceHeaderNo, pInterventionNo, TRUE, lIntervLine) THEN
        EXIT(FALSE);

      WITH lIntervLine DO BEGIN
        lCreateTrayLine := "Work End Date" <> 0D; //IMH35.ST
        VALIDATE("Work End Date",DT2DATE(pEndDate));

        IF NOT MODIFY(TRUE) THEN
          MODIFY(FALSE);
      END;

      ExtrFct.CreateIntervCommentText(lIntervLine, STRSUBSTNO(Text110b,FormatDT(pEndDate)), CURRENTDATETIME,''); //IMH35.ST

      // Cr‚ation ligne activit‚ corbeille
      IF lCreateTrayLine THEN BEGIN //IMH35.ST
        GetInterfaceSetup;
        IF InterfaceSetup."End Task Task Code" <> '' THEN
          ExtrFct.CreateTrayLineInterv(lIntervLine,InterfaceSetup."End Task Task Code");
      END;


      //<<IMH65.PC
      ExtrFct.Finish(lGUID);
      //>>IMH65.PC

      EXIT(TRUE);
    END;

    PROCEDURE AddInvoice@1100281042(pProviderNo@1100281006 : Code[20];pServiceHeaderNo@1100281011 : Code[20];pInterventionNo@1100281012 : Integer;pFlowCode@1100281001 : Code[10];pDocEntryNo@1100281000 : Integer;pDocDescrQualification@1100281025 : Text[250];pAmountInclVAT@1100281018 : Decimal;pAmountExclVAT@1100281017 : Decimal;pAmountVAT@1100281016 : Decimal;pDocDate@1100281002 : DateTime;pDocReference@1100281007 : Text[80];pNavQuote@1100281014 : Code[20];pExtranetUserNo@1100281005 : Code[20];pExtranetUserName@1100281004 : Text[50];pExtranetUserFirstName@1100281003 : Text[50]) : Boolean;
    VAR
      lProvider@1100281008 : Record 50000;
      lServiceHeader@1100281009 : Record 5900;
      lIntervLine@1100281010 : Record 50075;
      lDocumentQueue@1100281013 : Record 50054;
      lDocQueuePost@1100281015 : Codeunit 50008;
      lGUID@1000000000 : GUID;
    BEGIN
      // IMH16 ISAT.EB  --> A tester 24/08/2011
      {
      Rubrique 11.14
      0000963: Web Service SOAP : Ajout d'une facture

      Colonnes attendues :
      - Retour de confirmation du succŠs de l'op‚ration

      ParamŠtres
      - Identifiant de l'intervention
      - Identifiant NAV de la piŠce jointe correspondante … la facture
      - Si document qualifi‚ : lÉidentifiant systŠme du document qualifi‚
      - Montant HT EXO TVA
      - Montant HT TVA REDUITE
      - Montant HT TVA NORMALE
      - R‚f‚rence de piŠce
      - Utilisateur … l'origine
      - Date de la facture
      - Identifiant NAV du devis d'origine

      ParamŠtres d‚finitifs :
      - En Entr‚e
        - pProviderNo : Nø prestataire
        - pServiceHeaderNo : Nø entˆte service
        - pInterventionNo : Nø intervention
        - pFlowCode : Code flux document (premiŠre partie de l'identifiant Nav du document)
        - pDocEntryNo : Nø s‚quence document (seconde partie de l'identifiant Nav du document)
        - pDocDescrQualification : si document qualifi‚, renseigner la r‚f‚rence systŠme du document
        - pExemptVATBaseAmount : Montant HT EXO TVA
        - pReducedVATBaseAmount : Montant HT TVA REDUITE
        - pNormalVATBaseAmount : Montant  HT TVA NORMAL
        - pDocDate : date de document
        - pDocReference : r‚f‚rence de piŠce
        - pNavQuote : Devis d'origine Nav
        - pExtranetUserNo
        - pExtranetUserName
        - pExtranetUserFirstName
      }
      GLOBALLANGUAGE(1036);

      //<<IMH65.PC
      ExtrFct.Initial(
        2,'AddInvoice',
        STRSUBSTNO(
          '%1-%2-%3-%4-%5-%6-%7-%8-%9-%10-%11',
          pProviderNo,pServiceHeaderNo,pInterventionNo,pFlowCode,pDocEntryNo,pDocDescrQualification,pAmountInclVAT,pAmountExclVAT,
          pAmountVAT,pDocDate,pDocReference,pNavQuote),
        lGUID);
      //>>IMH65.PC

      // R‚cup‚rer le prestataire
      IF NOT lProvider.GET(pProviderNo) THEN
        ERROR(Text000,pProviderNo);

      // R‚cup‚rer l'entˆte de service
      IF NOT lServiceHeader.GET(lServiceHeader."Document Type"::Invoice,pServiceHeaderNo) THEN
        ERROR(Text001,pServiceHeaderNo);

      IF NOT ExtrFct.GetInterv(pServiceHeaderNo, pInterventionNo, TRUE, lIntervLine) THEN
        EXIT(FALSE);

      IF NOT lDocumentQueue.GET(pFlowCode,lDocumentQueue."Queue Type"::Receipt,pDocEntryNo) THEN
        ERROR(Text003,pFlowCode,FORMAT(lDocumentQueue."Queue Type"::Receipt),pDocEntryNo);

      IF pProviderNo <> lDocumentQueue."Contact No." THEN BEGIN
        ERROR(Text028,pProviderNo);
      END;

      WITH lDocumentQueue DO BEGIN
        SetHideMessage(TRUE);
        //<<IMH34.PC
        VALIDATE("Document Type",lDocumentQueue."Document Type"::Invoice);
        //>>IMH34.PC
        IF pDocDate = 0DT THEN BEGIN
          VALIDATE("Document Date", TODAY);
        END ELSE BEGIN
          VALIDATE("Document Date", DT2DATE(pDocDate));
        END;
        "Receive Reference" := pDocReference;
      //<<IMH35.ST
        "Vendor Invoice No." := pDocReference;
        "Vendor Quote No." := pNavQuote;
      //>>IMH35.ST
        VALIDATE(Amount,pAmountExclVAT);
        VALIDATE("Amount Including VAT",pAmountInclVAT);
        VALIDATE("Amount VAT",pAmountVAT);
        //Amount := pAmount;
        //"Amount VAT" := pAmountVAT;
        //"Amount VAT" := pAmountIncludingVAT;
        //"VAT Base Amount" := pVATBaseAmount;
        //"Exempt VAT Base Amount" := pExemptVATBaseAmount;
        //"Reduced VAT Base Amount" := pReducedVATBaseAmount;
        //"Normal VAT Base Amount" := pNormalVATBaseAmount;
        //"Amount obsolescence" := pAmountObsolescence;
        //"Franchise Amount" := pFranchiseAmount;

        //IF CheckVatAmount(0, FALSE) <> '' THEN
        //  EXIT(FALSE);

        IF pDocDescrQualification <> '' THEN BEGIN
          "Status To Qualify" := lDocumentQueue."Status To Qualify"::Treated;
          "Description Qualification" := pDocDescrQualification;
        END;
        //<<IMH.PC
        Status := Status::Done;
        //>>IMH.PC
        "Last Modification Date" := CURRENTDATETIME;
        "Last Modification User ID" := COPYSTR(pExtranetUserName,1,MAXSTRLEN("Last Modification User ID"));
        "Skip Document Create" := TRUE; //IMH52.ST
        MODIFY(FALSE);
      END;

      //<<IMH.PC
      lDocumentQueue.SETRECFILTER;
      CLEAR(lDocQueuePost);
      lDocQueuePost.RUN(lDocumentQueue);
      IF lDocumentQueue.FIND THEN
        lDocumentQueue.DELETE(TRUE);
      //>>IMH.PC

      //<<IMH35.ST
      //TODO
      //>>IMH35.ST
      // Cr‚ation ligne activit‚ corbeille
      GetInterfaceSetup;
      IF InterfaceSetup."Add Invoice Task Code" <> '' THEN BEGIN
        ExtrFct.CreateTrayLineInterv(lIntervLine,InterfaceSetup."Add Invoice Task Code");
      END;

      //<<IMH65.PC
      ExtrFct.Finish(lGUID);
      //>>IMH65.PC

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetEstimatedWorkRestartDate@1100281016(pProviderNo@1100281003 : Code[20];pServiceHeaderNo@1100281002 : Code[20];pInterventionNo@1100281001 : Integer;pRestartDate@1100281000 : DateTime) : Boolean;
    VAR
      lProvider@1100281006 : Record 50000;
      lServiceHeader@1100281005 : Record 5900;
      lIntervLine@1100281004 : Record 50075;
      lCreateTrayLine@1000000000 : Boolean;
      lGUID@1000000001 : GUID;
    BEGIN
      // IMH17 ISAT.EB --> A tester 24/08/2011
      {
      Rubrique 11.15
      0000964: Web Service SOAP : "Confirmation de contact Client pour date de reprise"

      ParamŠtres d'entr‚es :
      - Identifiant NAV de l'intervention
      - Date pr‚visionnelle de date de reprise

      ParamŠtres d‚finitifs :
      - En Entr‚e
        - pProviderNo : Nø prestataire
        - pServiceHeaderNo : Nø entˆte service
        - pInterventionNo : Nø intervention
        - pRestartDate : Date r‚elle de fin des travaux suite … reprise
      }
      //IMH41.ST 22/12/11 ObsolŠte.
      ExtrFct.Initial(
        2,'GetEstimatedWorkRestartDate',STRSUBSTNO('%1-%2-%3-%4',pProviderNo,pServiceHeaderNo,pInterventionNo,pRestartDate),lGUID);
      EXIT(GetRealWorkRestartDate(pProviderNo,pServiceHeaderNo,pInterventionNo,pRestartDate));


      GLOBALLANGUAGE(1036);
      // R‚cup‚rer le prestataire
      IF NOT lProvider.GET(pProviderNo) THEN
        ERROR(Text000,pProviderNo);

      // R‚cup‚rer l'entˆte de service
      IF NOT lServiceHeader.GET(lServiceHeader."Document Type"::Invoice,pServiceHeaderNo) THEN
        ERROR(Text001,pServiceHeaderNo);

      IF NOT ExtrFct.GetInterv(pServiceHeaderNo, pInterventionNo, TRUE, lIntervLine) THEN
        EXIT(FALSE);

      WITH lIntervLine DO BEGIN
        lCreateTrayLine := "Work Restart Date" <> 0D; //IMH35.ST
        VALIDATE("Work Restart Date",DT2DATE(pRestartDate));

        IF NOT MODIFY(TRUE) THEN
          MODIFY(FALSE);
      END;

      // Cr‚ation ligne activit‚ corbeille
      IF lCreateTrayLine THEN BEGIN //IMH35.ST
        GetInterfaceSetup;
        IF InterfaceSetup."Estim. Restart Date Task Code" <> '' THEN
          ExtrFct.CreateTrayLineInterv(lIntervLine,InterfaceSetup."Estim. Restart Date Task Code");
      END;

      //<<IMH65.PC
      ExtrFct.Finish(lGUID);
      //>>IMH65.PC

      EXIT(TRUE);
    END;

    PROCEDURE GetRealWorkRestartDate@1100281018(pProviderNo@1100281003 : Code[20];pServiceHeaderNo@1100281002 : Code[20];pInterventionLineNo@1100281001 : Integer;pEndDate@1100281000 : DateTime) : Boolean;
    VAR
      lProvider@1100281006 : Record 50000;
      lServiceHeader@1100281005 : Record 5900;
      lServiceInterventionLine@1100281004 : Record 50075;
      lServiceInterventionMinutes@1100281007 : Record 50084;
      lGUID@1000000000 : GUID;
    BEGIN
      // IMH18 ISAT.EB --> A tester 24/08/2011
      {
      Rubrique 11.16
      0000965: Web Service SOAP : Transmission PV de reprise des travaux

      Colonnes attendues :
      - Retour de confirmation du succŠs de l'op‚ration

      ParamŠtres :
      - Identifiant NAV de l'intervention
      - Date r‚elle de fin des travaux suite … reprise

      ParamŠtres d‚finitifs :
      - En Entr‚e
        - pProviderNo : Nø prestataire
        - pServiceHeaderNo : Nø entˆte service
        - pInterventionNo : Nø intervention
        - pEndDate : Date r‚elle de fin des travaux suite … reprise
      }
      GLOBALLANGUAGE(1036);

      //<<IMH65.PC
      ExtrFct.Initial(
        2,'GetRealWorkRestartDate',STRSUBSTNO('%1-%2-%3-%4',pProviderNo,pServiceHeaderNo,pInterventionLineNo,pEndDate),lGUID);
      //>>IMH65.PC

      // R‚cup‚rer le prestataire
      IF NOT lProvider.GET(pProviderNo) THEN
        ERROR(Text000,pProviderNo);

      // R‚cup‚rer l'entˆte de service
      IF NOT lServiceHeader.GET(lServiceHeader."Document Type"::Invoice,pServiceHeaderNo) THEN
        ERROR(Text001,pServiceHeaderNo);

      IF NOT ExtrFct.GetInterv(pServiceHeaderNo, pInterventionLineNo, TRUE, lServiceInterventionLine) THEN
        EXIT(FALSE);

      lServiceInterventionMinutes.SETRANGE("Service Header No.",pServiceHeaderNo);
      //<<IMH38.ISAT.EBA
      //lServiceInterventionMinutes.SETRANGE("Service Intervention Line No.",pInterventionLineNo);
      lServiceInterventionMinutes.SETRANGE("Service Intervention Line No.",lServiceInterventionLine."Line No.");
      //>>IMH38.ISAT.EBA
      //<<IMH64.PC
      //lServiceInterventionMinutes.SETRANGE(Type,lServiceInterventionMinutes.Type::"End of work");
      lServiceInterventionMinutes.SETFILTER(
        Type,
        '%1|%2',
        lServiceInterventionMinutes.Type::"End of work",
        lServiceInterventionMinutes.Type::Urgent);
      //>>IMH64.PC
      lServiceInterventionMinutes.SETRANGE("Current Minutes",TRUE);
      lServiceInterventionMinutes.SETRANGE(Reserves,TRUE);
      IF lServiceInterventionMinutes.ISEMPTY THEN BEGIN
        ERROR(Text025,pServiceHeaderNo,pInterventionLineNo);
      END;

      WITH lServiceInterventionMinutes DO BEGIN
        FINDFIRST;
        VALIDATE("Work Restart Date",DT2DATE(pEndDate));

        IF NOT MODIFY(TRUE) THEN BEGIN
          MODIFY(FALSE);
        END;
      END;

      // Cr‚ation ligne activit‚ corbeille
      GetInterfaceSetup;
      IF InterfaceSetup."Real Restart Date Task Code" <> '' THEN BEGIN
        lServiceInterventionLine.SETRECFILTER; //IMH73.ST
        lServiceInterventionLine.FINDFIRST;
        ExtrFct.CreateTrayLineInterv(lServiceInterventionLine,InterfaceSetup."Real Restart Date Task Code");
      END;

      //<<IMH65.PC
      ExtrFct.Finish(lGUID);
      //>>IMH65.PC

      EXIT(TRUE);
    END;

    PROCEDURE GetUnrealizedIntervReason@1100281021(pProviderNo@1100281003 : Code[20];pServiceHeaderNo@1100281002 : Code[20];pInterventionNo@1100281001 : Integer;pReasonCode@1100281010 : Code[20];pReasonDescription@1100281009 : Text[1024];pReplanDate@1100281000 : DateTime;pExtranetUserNo@1100281011 : Code[20];pExtranetUserName@1100281008 : Text[50];pExtranetUserFirstName@1100281007 : Text[50]) : Boolean;
    VAR
      lProvider@1100281006 : Record 50000;
      lServiceHeader@1100281005 : Record 5900;
      lIntervLine@1100281004 : Record 50075;
      lCodeRec@1100281014 : Record 50079;
      lTextMgt@1100281012 : Codeunit 50085;
      lText@1100281013 : Text[1024];
      lGUID@1000000000 : GUID;
    BEGIN
      // IMH19 ISAT.EB
      {
      Rubrique 11.17
      0000698: Web Service SOAP : Raison de non traitement d'une intervention urgente

      Colonnes attendues :
      - Retour de confirmation du succŠs de l'op‚ration

       ParamŠtres :
      - Identifiant de l'intervention NAV
      - Raison de non traitement d'une ARN urgente
      - Pr‚cision
      - Date de replanification (NULL si non renseign‚e)

      ParamŠtres d‚finitifs :
      - En Entr‚e
        - pProviderNo : Nø prestataire
        - pServiceHeaderNo : Nø entˆte service
        - pInterventionNo : Nø intervention
        - pReasonCode : Code motif
        - pReasonDescription : description du motif
        - pReplanDate : date de replanification
        - pExtranetUserNo : Nø utilisateur Extranet
        - pExtranetUserName : Nom utilisateur Extranet
        - pExtranetUserFirstName : Pr‚nom utilisateur extranet
      }
      GLOBALLANGUAGE(1036);

      //<<IMH65.PC
      ExtrFct.Initial(
        2,'GetUnrealizedIntervReason',
        STRSUBSTNO(
          '%1-%2-%3-%4-%5-%6',
          pProviderNo,pServiceHeaderNo,pInterventionNo,pReasonCode,pReasonDescription,pReplanDate),
        lGUID);
      //>>IMH65.PC

      // R‚cup‚rer le prestataire
      IF NOT lProvider.GET(pProviderNo) THEN
        ERROR(Text000,pProviderNo);

      // R‚cup‚rer l'entˆte de service
      IF NOT lServiceHeader.GET(lServiceHeader."Document Type"::Invoice,pServiceHeaderNo) THEN
        ERROR(Text001,pServiceHeaderNo);

      IF NOT ExtrFct.GetInterv(pServiceHeaderNo, pInterventionNo, TRUE, lIntervLine) THEN
        EXIT(FALSE);

      //<<IMH31.PC
      // Test du code motif (code motif annulation de l'intervention)
      IF NOT lCodeRec.GET(DATABASE::"Service Intervention Line",90,pReasonCode) THEN BEGIN
        ERROR(Text021,Text022,pReasonCode);
      END;
      //>>IMH31.PC

      // Tester que l'intervention est bien urgente
      IF NOT lIntervLine.Urgent THEN
        ERROR(Text014,pServiceHeaderNo,pInterventionNo);

      WITH lIntervLine DO BEGIN
        //<<IMH31.PC
        VALIDATE("Cancel Reason Code",pReasonCode);
        IF NOT MODIFY(TRUE) THEN BEGIN
          MODIFY(FALSE);
        END;
        //>>IMH31.PC
      END;

      // Cr‚er la ligne de commentaire
      IF pReasonDescription <> '' THEN
      //<<IMH59
      BEGIN
        lText := GetReasonDescription(1002,pReasonDescription);
        IF lText = '' THEN
          lText :=pReasonDescription;
      END;
      //>>IMH59

      //<<IMH27.ST
      IF lText <> '' THEN
        lText := lText + lTextMgt.GetEOL;
      lText := lText + STRSUBSTNO(Text016, pReplanDate);
      //>>IMH27.ST
      ExtrFct.CreateIntervCommentText(lIntervLine,lText,CURRENTDATETIME,COPYSTR(pExtranetUserName,1,30));

      // Cr‚ation ligne activit‚ corbeille
      GetInterfaceSetup;
      IF InterfaceSetup."Unrealized Emergency Task Code" <> '' THEN BEGIN
        ExtrFct.CreateTrayLineInterv(lIntervLine,InterfaceSetup."Unrealized Emergency Task Code");
      END;

      //<<IMH65.PC
      ExtrFct.Finish(lGUID);
      //>>IMH65.PC

      EXIT(TRUE);
    END;

    PROCEDURE ConfirmRealizedInterv@1100281022(pProviderNo@1100281003 : Code[20];pServiceHeaderNo@1100281002 : Code[20];pInterventionNo@1100281001 : Integer;pArrivalDate@1100281000 : DateTime;pNatureDescription@1100281008 : Text[1024];pExtranetUserNo@1100281012 : Code[20];pExtranetUserName@1100281011 : Text[50];pExtranetUserFirstName@1100281010 : Text[50]) : Boolean;
    VAR
      lProvider@1100281006 : Record 50000;
      lServiceHeader@1100281005 : Record 5900;
      lIntervLine@1100281004 : Record 50075;
      lCreateTrayLine@1000000000 : Boolean;
      lBigText@1000000002 : BigText;
      lGUID@1000000001 : GUID;
    BEGIN
      // IMH20 ISAT.EB
      {
      Rubrique 11.17
      0000697: Web Service SOAP : Intervention urgente - confirmation de traitement

      Colonnes attendues :
      - Retour de confirmation du succŠs de l'op‚ration

      ParamŠtres :
      - Identifiant de la tƒche --> Identifiant de l'intervention
      - Date de fin de l'intervention --> Date r‚elle de fin de travaux
      - Heure d'arriv‚e sur les lieux de l'intervention --> Heure d'arriv‚e r‚elle
      //- Type d'intervention --> N'existe plus
      - Nature de l'intervention --> Commentaire … cr‚er


      ParamŠtres d‚finitifs :
      - En Entr‚e
        - pProviderNo : Nø prestataire
        - pServiceHeaderNo : Nø entˆte service
        - pInterventionNo : Nø intervention
        - pEndDate : date de fin de l'intervention
        - pArrivalTime : heure d'arriv‚e
        - pNatureDescription : description de la nature de l'intervention
        - pExtranetUserNo : Nø utilisateur Extranet
        - pExtranetUserName : Nom utilisateur Extranet
        - pExtranetUserFirstName : Pr‚nom utilisateur extranet
      }
      GLOBALLANGUAGE(1036);

      //<<IMH65.PC
      ExtrFct.Initial(
        2,'ConfirmRealizedInterv',
        STRSUBSTNO(
          '%1-%2-%3-%4-%5-%6',
          pProviderNo,pServiceHeaderNo,pInterventionNo,pArrivalDate,pNatureDescription),
        lGUID);
      //>>IMH65.PC

      // R‚cup‚rer le prestataire
      IF NOT lProvider.GET(pProviderNo) THEN
        ERROR(Text000,pProviderNo);

      // R‚cup‚rer l'entˆte de service
      IF NOT lServiceHeader.GET(lServiceHeader."Document Type"::Invoice,pServiceHeaderNo) THEN
        ERROR(Text001,pServiceHeaderNo);

      IF NOT ExtrFct.GetInterv(pServiceHeaderNo, pInterventionNo, TRUE, lIntervLine) THEN
        EXIT(FALSE);

      // *** Tester que c'est une ARN ???

      // Tester que l'intervention est bien urgente
      IF NOT lIntervLine.Urgent THEN
        ERROR(Text014,pServiceHeaderNo,pInterventionNo);

      ExtrFct.EvalDateTime(pArrivalDate); //IMH51.ST
      WITH lIntervLine DO BEGIN
        lCreateTrayLine := TRUE; //"Work End Date" <> 0D; //IMH35.ST
        VALIDATE("Arrival Date", DT2DATE(pArrivalDate));
        VALIDATE("Arrival Time",DT2TIME(pArrivalDate));
      //<<IMH51.ST
      //  VALIDATE("Work End Date",DT2DATE(pEndDate));
      //  VALIDATE("Definitive Repair", pDefinitiveRepair);
      //  IF NOT MODIFY(TRUE) THEN
      //    MODIFY(FALSE);
        MODIFY(TRUE);
      //>>IMH51.ST
      END;

      // Cr‚er la ligne de commentaire pour la nature de l'intervention
      //<<IMH51.ST
      //<<IMH56.PC
      //<<IMH71
      //IF STRLEN(pNatureDescription) < (1024 - STRLEN(' - ' + FORMAT(pArrivalDate)) THEN BEGIN
      IF STRLEN(pNatureDescription) < (1024 - STRLEN(' - ' +
                                                FORMAT(pArrivalDate,0,'<Day,2>/<Month,2>/<Year4> <Hours24>:<Minutes,2>'))) THEN BEGIN
        //pNatureDescription := pNatureDescription + ' - ' + FORMAT(pArrivalDate);
        pNatureDescription := pNatureDescription + ' - ' + FORMAT(pArrivalDate,0,'<Day,2>/<Month,2>/<Year4> <Hours24>:<Minutes,2>');
        //>>IMH71
      END;
      //>>IMH56.PC
      ExtrFct.CreateIntervCommentText(lIntervLine,pNatureDescription,CURRENTDATETIME,COPYSTR(pExtranetUserName,1,30));
      //lBigText.ADDTEXT(pNatureDescription);
      //lBigText.ADDTEXT(STRSUBSTNO('%1 : %2', lIntervLine.FIELDCAPTION("Definitive Repair"), lIntervLine."Definitive Repair"));
      //ExtrFct.CreateIntervCommentBigText(lIntervLine, lBigText, CURRENTDATETIME,COPYSTR(pExtranetUserName,1,30));
      //>>IMH51.ST
      // Cr‚ation ligne activit‚ corbeille
      IF lCreateTrayLine THEN BEGIN //IMH35.ST
        GetInterfaceSetup;
        IF InterfaceSetup."Realized Emergency Task Code" <> '' THEN
          ExtrFct.CreateTrayLineInterv(lIntervLine,InterfaceSetup."Realized Emergency Task Code");
      END;

      //<<IMH65.PC
      ExtrFct.Finish(lGUID);
      //>>IMH65.PC

      EXIT(TRUE);
    END;

    PROCEDURE ConfirmRealizedInterv2@1000000006(pProviderNo@1100281003 : Code[20];pServiceHeaderNo@1100281002 : Code[20];pInterventionNo@1100281001 : Integer;pEndDate@1100281000 : DateTime;pArrivalDateTime@1000000001 : DateTime;pNatureDescription@1100281008 : Text[1024];pExtranetUserNo@1100281012 : Code[20];pExtranetUserName@1100281011 : Text[50];pExtranetUserFirstName@1100281010 : Text[50]) : Boolean;
    VAR
      lProvider@1100281006 : Record 50000;
      lServiceHeader@1100281005 : Record 5900;
      lIntervLine@1100281004 : Record 50075;
      lCreateTrayLine@1000000000 : Boolean;
      lTime@1100281007 : Time;
      lTimeText@1100281009 : Text[30];
      lPos@1100281013 : Integer;
      lGUID@1000000002 : GUID;
    BEGIN
      // IMH20 ISAT.EB
      {
      Rubrique 11.17
      0000697: Web Service SOAP : Intervention urgente - confirmation de traitement

      Colonnes attendues :
      - Retour de confirmation du succŠs de l'op‚ration

      ParamŠtres :
      - Identifiant de la tƒche --> Identifiant de l'intervention
      - Date de fin de l'intervention --> Date r‚elle de fin de travaux
      - Heure d'arriv‚e sur les lieux de l'intervention --> Heure d'arriv‚e r‚elle
      //- Type d'intervention --> N'existe plus
      - Nature de l'intervention --> Commentaire … cr‚er


      ParamŠtres d‚finitifs :
      - En Entr‚e
        - pProviderNo : Nø prestataire
        - pServiceHeaderNo : Nø entˆte service
        - pInterventionNo : Nø intervention
        - pEndDate : date de fin de l'intervention
        - pArrivalTime : heure d'arriv‚e
        - pNatureDescription : description de la nature de l'intervention
        - pExtranetUserNo : Nø utilisateur Extranet
        - pExtranetUserName : Nom utilisateur Extranet
        - pExtranetUserFirstName : Pr‚nom utilisateur extranet
      }
      GLOBALLANGUAGE(1036);

      //<<IMH65.PC
      ExtrFct.Initial(
        2,'ConfirmRealizedInterv2',
        STRSUBSTNO(
          '%1-%2-%3-%4-%5-%6',
          pProviderNo,pServiceHeaderNo,pInterventionNo,pEndDate,pArrivalDateTime,pNatureDescription),
        lGUID);
      //>>IMH65.PC

      // R‚cup‚rer le prestataire
      IF NOT lProvider.GET(pProviderNo) THEN
        ERROR(Text000,pProviderNo);

      // R‚cup‚rer l'entˆte de service
      IF NOT lServiceHeader.GET(lServiceHeader."Document Type"::Invoice,pServiceHeaderNo) THEN
        ERROR(Text001,pServiceHeaderNo);

      IF NOT ExtrFct.GetInterv(pServiceHeaderNo, pInterventionNo, TRUE, lIntervLine) THEN
        EXIT(FALSE);

      // *** Tester que c'est une ARN ???
      lPos := STRPOS(FORMAT(pArrivalDateTime,0,9),'T');
      IF lPos <> 0 THEN BEGIN
        lTimeText := COPYSTR(FORMAT(pArrivalDateTime,0,9),lPos + 1,8);
        EVALUATE(lTime,lTimeText);
      END;
      //error(format(pArrivalDateTime,0,9) +' - ' + format(DT2TIME(pArrivalDateTime),0,9) + ' - ' + ltimetext);

      // Tester que l'intervention est bien urgente
      IF NOT lIntervLine.Urgent THEN
        ERROR(Text014,pServiceHeaderNo,pInterventionNo);

      WITH lIntervLine DO BEGIN
        lCreateTrayLine := "Work End Date" <> 0D; //IMH35.ST
        VALIDATE("Work End Date", DT2DATE(pEndDate));
        VALIDATE("Arrival Date", DT2DATE(pArrivalDateTime));
        //VALIDATE("Arrival Time", DT2TIME(pArrivalDateTime));
        VALIDATE("Arrival Time", lTime);
        IF NOT MODIFY(TRUE) THEN
          MODIFY(FALSE);
      END;

      // Cr‚er la ligne de commentaire pour la nature de l'intervention
      ExtrFct.CreateIntervCommentText(lIntervLine,pNatureDescription,CURRENTDATETIME,COPYSTR(pExtranetUserName,1,30));

      // Cr‚ation ligne activit‚ corbeille
      IF lCreateTrayLine THEN BEGIN //IMH35.ST
        GetInterfaceSetup;
        IF InterfaceSetup."Realized Emergency Task Code" <> '' THEN
          ExtrFct.CreateTrayLineInterv(lIntervLine,InterfaceSetup."Realized Emergency Task Code");
      END;

      //<<IMH65.PC
      ExtrFct.Finish(lGUID);
      //>>IMH65.PC

      EXIT(TRUE);
    END;

    PROCEDURE AddComment@1100281005(pProviderNo@1100281006 : Code[20];pServiceHeaderNo@1100281005 : Code[20];pInterventionNo@1100281004 : Integer;pComment@1100281003 : Text[1024];pExtranetUserNo@1100281010 : Code[20];pExtranetUserName@1100281008 : Text[50];pExtranetUserFirstName@1100281007 : Text[50];pNotifyIMH@1100281011 : Boolean) : Boolean;
    VAR
      lProvider@1100281002 : Record 50000;
      lServiceHeader@1100281001 : Record 5900;
      lIntervLine@1100281000 : Record 50075;
    BEGIN
      // IMH21 ISAT.EB --> A tester 24/08/2011
      {
      Rubrique inconnue
      0000688: Web Service SOAP : Ajout d'un commentaire

      Colonnes attendues :
      - Retour de confirmation du succŠs de l'op‚ration

      ParamŠtres :
      - Identifiant de l'intervention
      - Objet du commentaire
      - Contenu du commentaire
      - Notifier IMH (oui/non)
      - Demande de contact par IMH (oui/non)
      - Auteur

      - En Entr‚e
        - pProviderNo : Nø prestataire
        - pServiceHeaderNo : Nø entˆte service
        - pInterventionNo : Nø intervention
        - pComment : commentaire
        - pExtranetUserNo
        - pExtranetUserName
        - pExtranetUserFirstName
      }

      EXIT(AddComment2(pProviderNo,pServiceHeaderNo,pInterventionNo,pComment,
                       pExtranetUserNo,pExtranetUserName,pExtranetUserFirstName,
                       pNotifyIMH, FALSE));
    END;

    PROCEDURE AddComment2@1000000001(pProviderNo@1100281006 : Code[20];pServiceHeaderNo@1100281005 : Code[20];pInterventionNo@1100281004 : Integer;pComment@1100281003 : Text[1024];pExtranetUserNo@1100281010 : Code[20];pExtranetUserName@1100281008 : Text[50];pExtranetUserFirstName@1100281007 : Text[50];pNotifyIMH@1100281011 : Boolean;pAskContact@1000000000 : Boolean) : Boolean;
    VAR
      lProvider@1100281002 : Record 50000;
      lServiceHeader@1100281001 : Record 5900;
      lIntervLine@1100281000 : Record 50075;
      lBigText@1000000001 : BigText;
      lGUID@1000000002 : GUID;
    BEGIN
      // IMH21 ISAT.EB --> A tester 24/08/2011
      {
      Rubrique inconnue
      0000688: Web Service SOAP : Ajout d'un commentaire

      Colonnes attendues :
      - Retour de confirmation du succŠs de l'op‚ration

      ParamŠtres :
      - Identifiant de l'intervention
      - Objet du commentaire
      - Contenu du commentaire
      - Notifier IMH (oui/non)
      - Demande de contact par IMH (oui/non)
      - Auteur

      - En Entr‚e
        - pProviderNo : Nø prestataire
        - pServiceHeaderNo : Nø entˆte service
        - pInterventionNo : Nø intervention
        - pComment : commentaire
        - pExtranetUserNo
        - pExtranetUserName
        - pExtranetUserFirstName
      }
      GLOBALLANGUAGE(1036);

      //<<IMH65.PC
      ExtrFct.Initial(
        2,'AddComment2',
        STRSUBSTNO(
          '%1-%2-%3-%4',
          pProviderNo,pServiceHeaderNo,pInterventionNo,COPYSTR(pComment,1,250)),
        lGUID);
      //>>IMH65.PC

      // R‚cup‚rer le prestataire
      IF NOT lProvider.GET(pProviderNo) THEN
        ERROR(Text000,pProviderNo);

      // R‚cup‚rer l'entˆte de service
      IF NOT lServiceHeader.GET(lServiceHeader."Document Type"::Invoice,pServiceHeaderNo) THEN
        ERROR(Text001,pServiceHeaderNo);

      IF NOT ExtrFct.GetInterv(pServiceHeaderNo, pInterventionNo, TRUE, lIntervLine) THEN
        EXIT(FALSE);

      // Cr‚er la ligne de commentaire
      IF pAskContact THEN BEGIN
        lBigText.ADDTEXT(Text115b);
        lBigText.ADDTEXT(pComment);
        ExtrFct.CreateIntervCommentBigText(lIntervLine,lBigText,CURRENTDATETIME,COPYSTR(pExtranetUserName,1,30));
      END
      ELSE
        ExtrFct.CreateIntervCommentText(lIntervLine,pComment,CURRENTDATETIME,COPYSTR(pExtranetUserName,1,30));

      // Cr‚ation ligne activit‚ corbeille
      GetInterfaceSetup;
      //<<IMH42.ST
      {
      IF InterfaceSetup."Add Comment Task Code" <> '' THEN BEGIN
        CreateTrayLine(lIntervLine,InterfaceSetup."Add Comment Task Code");
      END;
      //<<IMH30.PC
      IF pNotifyIMH THEN BEGIN
        CreateTrayLine(lIntervLine,InterfaceSetup."Contact Provider Task Code");
      END;
      //>>IMH30.PC
      }
      IF pAskContact THEN
        ExtrFct.CreateTrayLineInterv(lIntervLine,InterfaceSetup."Contact Provider Task Code")
      ELSE
        ExtrFct.CreateTrayLineInterv(lIntervLine,InterfaceSetup."Add Comment Task Code");
      //>>IMH42.ST

      //<<IMH65.PC
      ExtrFct.Finish(lGUID);
      //>>IMH65.PC

      EXIT(TRUE);
    END;

    PROCEDURE TestPathDoc@1100281017() : Text[200];
    VAR
      lText001@1100281001 : TextConst 'ENU=impossible acces;FRA=AccŠs impossible';
      lExtranetProviderWebServ@1100281006 : Codeunit 50197;
      lTestExtranetIntervention@1100281007 : Codeunit 50298;
      lFileNameBuffer@1100281000 : File;
      dnFile@1100281002 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.File";
      dnDirectory@1100281003 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Directory";
      dnStrArray@1100281004 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      lTempText@1100281005 : Text[1024];
      lFileName@1100281008 : Text[1024];
    BEGIN
      // Fonction qui test l'accŠs aux factures

      //lTestExtranetIntervention.RUN;
      //EXIT('fin de test');
      {
      EXIT(FORMAT(CURRENTDATETIME));
      lExtranetProviderWebServ.DeclareAbsencePeriod(
        '323830E',FALSE,'',
        CREATEDATETIME(100911D,100000T),CREATEDATETIME(100911D,100000T),
        'ML','PCabel','Philippe','CABEL');
      }
      //GLOBALLANGUAGE(1036);

      //ERROR(lText001);

      //dnStrArray  := dnDirectory.GetFileSystemEntries('\\172.21.101.37\IMHA\GED\');
      lFileName :='\\172.21.101.37\IMHA\GED\Test Extranet.txt';
      IF lFileNameBuffer.OPEN(lFileName) THEN BEGIN
      //IF dnFile.Exists('\\172.21.101.37\IMHA\GED\Test Extranet.txt') THEN BEGIN
      //IF dnFile.Exists('c:\Temp\Test Extranet.txt') THEN BEGIN
        lFileNameBuffer.READ(lTempText);
        lFileNameBuffer.CLOSE;

        EXIT('acces fichier '+ lFileName + '  ' + lTempText);
      END ELSE BEGIN
        EXIT('accŠs fichier '+ lFileName + ' impossible');
      END;
    END;

    LOCAL PROCEDURE SaveBinaryDoc@1100281029(VAR pXmlDomElement@1100281003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";pFilePathName@1100281002 : Text[1024]);
    VAR
      lAdoStream@1100281001 : Automation "{2A75196C-D9EB-4129-B803-931327F72D5C} 2.8:{00000566-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.8 Library'.Stream";
      lNode@1100281000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
    BEGIN
      // IMH32.PC
      // Permet de transformer un flux binaire en document
      lNode := pXmlDomElement.selectSingleNode('a:ContenuBinaire');
      lNode.dataType := 'bin.base64';
      CREATE(lAdoStream);
      lAdoStream.Open;
      lAdoStream.Type := 1;
      lAdoStream.Write(lNode.nodeTypedValue);
      lAdoStream.SaveToFile(pFilePathName);
      lAdoStream.Close;
      CLEAR(lAdoStream);
    END;

    LOCAL PROCEDURE GetInterfaceSetup@1100281004();
    BEGIN
      //<<IMH30.PC
      IF InterfaceSetupVers <> 0DT THEN
        IF CURRENTDATETIME - InterfaceSetupVers < 60000 THEN  //IMH46.ST rafraichissement 1 minute
          EXIT;
      InterfaceSetup.GET;
      InterfaceSetupVers := CURRENTDATETIME;
      //>>IMH30.PC
    END;

    LOCAL PROCEDURE FormatDT@1000000002(pDateTime@1000000000 : DateTime) : Text[30];
    BEGIN
      //IMH35.ST
      //<<IMH63.ST
      //EXIT(FORMAT(pDateTime,0,'<Day,2>/<Month,2>/<Year4> <Hours24>:<Minutes,2>'));
      EXIT(FormatDate(DT2DATE(pDateTime)));
      //>>IMH63.ST
    END;

    LOCAL PROCEDURE FormatDate@1000000010(pDate@1000000000 : Date) : Text[30];
    BEGIN
      //IMH35.ST
      EXIT(FORMAT(pDate,0,'<Day,2>/<Month,2>/<Year4>'));
    END;

    PROCEDURE GetInvoicesListWithRef@1000000003(pProviderNo@1100281002 : Code[20];pServiceHeaderNo@1100281001 : Code[20];pInterventionNo@1100281000 : Integer;VAR pDocumentList@1100281003 : BigText);
    VAR
      lServiceInterventionLine@1100281011 : Record 50075;
      lPurchaseHeader@1100281009 : Record 38;
      lPurchaseLine@1100281022 : Record 39;
      lPurchInvHeader@1100281010 : Record 122;
      lPurchInvLine@1100281023 : Record 123;
      lVendorLedgerEntry@1100281012 : Record 25;
      lCustomer@1100281018 : Record 18;
      lCorporateRegion@1100281019 : Record 50058;
      lInteractionLogEntry@1100281024 : Record 5065;
      lXMLMgt@1100281004 : Codeunit 8016710;
      lXMLDoc@1100281008 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lXMLNode1@1100281007 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lXMLNode2@1100281006 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lXMLNode3@1100281005 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lXMLNode4@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lXMLNode5@1000000005 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lFileName@1100281013 : Text[1024];
      lFile@1100281014 : File;
      lInstream@1100281015 : InStream;
      lCorporateName@1100281016 : Text[50];
      lCorporateRegionName@1100281017 : Text[50];
      lAmountExclVAT@1100281020 : Decimal;
      lAmountInclVAT@1100281021 : Decimal;
      lDocumentQueue@1000000000 : Record 50054;
      lService@1000000001 : Record 50066;
      lDocumentAttach@1000000004 : Record 50021;
    BEGIN
      //IMH40.ST Duplication de GetInvoicesListWithRef pour ajout des r‚f‚rences documents
      {
      0000953: Requˆte SQL : Liste des factures li‚es … une intervention

      Colonnes souhait‚es :
      - R‚f‚rence de la facture (r‚f‚rence prestataire)
      - Date de la facture
      - Statut de traitement de la facture
      - Montant total HT
      - Montant total TTC
      - Nom National Grand Compte (cf. Philippe Catherine)
      - Nom R‚gion Grand Compte (cf. Philippe Catherine)
      - Pr‚sence de notification relatif … la facture vers le prestataire ?

      CritŠres de filtrages :
      - Identifiant NAV de l'intervention
      }
      GLOBALLANGUAGE(1036);
      IF NOT ExtrFct.GetInterv(pServiceHeaderNo, pInterventionNo, TRUE, lServiceInterventionLine) THEN
        EXIT;

      // Cr‚ation du fichier XML
      lXMLMgt.CreateXml(lXMLDoc,'<InvoicesList/>',lXMLNode1);

      // Facture rapproch‚ ou non
      WITH lPurchaseHeader DO BEGIN
        SETCURRENTKEY("Service No.","Service Header No.","Intervention Line No.","Quote Line No.");
        SETRANGE("Service No.",lServiceInterventionLine."Service No.");
        SETRANGE("Service Header No.",lServiceInterventionLine."Service Header No.");
        SETRANGE("Intervention Line No.",lServiceInterventionLine."Line No.");
        IF FINDSET THEN BEGIN
          REPEAT
            lAmountExclVAT := 0;
            lAmountInclVAT := 0;
            lPurchaseLine.SETRANGE("Document Type","Document Type");
            lPurchaseLine.SETRANGE("Document No.","No.");
            IF lPurchaseLine.FINDSET THEN BEGIN
              REPEAT
                lAmountExclVAT += lPurchaseLine.Amount;
                lAmountInclVAT += lPurchaseLine."Amount Including VAT";
              UNTIL lPurchaseLine.NEXT = 0;
            END;
            lCorporateName := '';
            lCorporateRegionName := '';
            IF NOT lCustomer.GET("Corporate No.") THEN BEGIN
              lCustomer.INIT;
            END;
            lCorporateName := lCustomer.Name;
            IF lCorporateRegion.GET("Corporate No.","Corporate Region Code") THEN BEGIN
              lCorporateRegion.INIT;
            END;
            lCorporateRegionName := lCorporateRegion.Name;

            IF Reconciled THEN BEGIN
              lXMLMgt.AddElement(lXMLNode1,'Invoice','','',lXMLNode2);
              lXMLMgt.AddElement(lXMLNode2,'IMHInvoiceNo',"No.",'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'ProviderInvoiceNo',"Your Reference",'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'InvoiceDate',FORMAT("Posting Date",0,9),'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'Status',ToolsMgt.FormatExport(Text017),'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'AmountExclVAT',FORMAT(lAmountExclVAT,0,1),'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'AmountInclVAT',FORMAT(lAmountInclVAT,0,1),'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'CorporateName',lCorporateName,'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'CorporateRegionName',lCorporateRegionName,'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'NotificationExists','false','',lXMLNode3);
            END ELSE BEGIN
              lXMLMgt.AddElement(lXMLNode1,'Invoice','','',lXMLNode2);
              lXMLMgt.AddElement(lXMLNode2,'IMHInvoiceNo',"No.",'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'ProviderInvoiceNo',"Your Reference",'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'InvoiceDate',FORMAT("Posting Date",0,9),'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'Status',ToolsMgt.FormatExport(Text018),'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'AmountExclVAT',FORMAT(lAmountExclVAT,0,1),'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'AmountInclVAT',FORMAT(lAmountInclVAT,0,1),'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'CorporateName',lCorporateName,'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'CorporateRegionName',lCorporateRegionName,'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'NotificationExists','false','',lXMLNode3);
              {
              // Recherche d'un document de facture ‚ventuel
              lInteractionLogEntry.setcurrentkey("Service No.","Service Header No.","Intervention Line No.","Date","Postponed");
              lInteractionLogEntry.setcurrentkey("Service No.",);
              lInteractionLogEntry.setcurrentkey("Service No.","Service Header No.","Intervention Line No.","Date","Postponed");
              lInteractionLogEntry.setcurrentkey("Service No.","Service Header No.","Intervention Line No.","Date","Postponed");
              lXMLMgt.AddElement(lXMLNode2,'pTableID',FORMAT(lDocumentAttachment."Referent Table No.",0,1),'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'pKeyInteger1',FORMAT(lDocumentAttachment."Key Integer 1",0,1),'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'pKeyInteger2',FORMAT(lDocumentAttachment."Key Integer 2",0,1),'',lXMLNode3);
              IF lDocumentAttachment."Key Code 1" <> '' THEN BEGIN
                lXMLMgt.AddElement(lXMLNode2,'pKeyCode1',lDocumentAttachment."Key Code 1",'',lXMLNode3);
              END;
              IF lDocumentAttachment."Key Code 2" <> '' THEN BEGIN
                lXMLMgt.AddElement(lXMLNode2,'pKeyCode2',lDocumentAttachment."Key Code 2",'',lXMLNode3);
              END;
              lXMLMgt.AddElement(lXMLNode2,'pKeyEntryNo',FORMAT(lDocumentAttachment."Entry No.",0,1),'',lXMLNode3);
              }
            END;
      //<<IMH40.ST
              lXMLMgt.AddElement(lXMLNode2,'DocumentList','','',lXMLNode3);
              lDocumentAttach.SETRANGE("Referent Table No.", DATABASE::"Interaction Log Entry");
              lDocumentAttach.SETRANGE("Key Integer 1","Interaction Log Entry No.");
              IF lDocumentAttach.FINDSET(FALSE) THEN
                REPEAT
                  lXMLMgt.AddElement(lXMLNode3,'Document', '', '', lXMLNode4);
                  lXMLMgt.AddElement(lXMLNode4,'FlowCode', '', '', lXMLNode5);
                  lXMLMgt.AddElement(lXMLNode4,'DocEntryNo', FORMAT(lDocumentAttach."Key Integer 1"), '', lXMLNode5);
                  lXMLMgt.AddElement(lXMLNode4,'AttachEntryNo', FORMAT(lDocumentAttach."Entry No."), '', lXMLNode5);
                UNTIL lDocumentAttach.NEXT = 0;
      //>>IMH40.ST
          UNTIL NEXT = 0;
        END;
      END;

      // Facture comptabilis‚e non transmise
      WITH lPurchInvHeader DO BEGIN
        SETCURRENTKEY("Service No.","Service Header No.","Intervention Line No.");
        SETRANGE("Service No.",lServiceInterventionLine."Service No.");
        SETRANGE("Service Header No.",lServiceInterventionLine."Service Header No.");
        SETRANGE("Intervention Line No.",lServiceInterventionLine."Line No.");
        IF FINDSET THEN BEGIN
          REPEAT
            lAmountExclVAT := 0;
            lAmountInclVAT := 0;
            lPurchInvLine.SETRANGE("Document No.","No.");
            IF lPurchInvLine.FINDSET THEN BEGIN
              REPEAT
                lAmountExclVAT += lPurchInvLine.Amount;
                lAmountInclVAT += lPurchInvLine."Amount Including VAT";
              UNTIL lPurchInvLine.NEXT = 0;
            END;
            lCorporateName := '';
            lCorporateRegionName := '';
            IF NOT lCustomer.GET("Corporate No.") THEN BEGIN
              lCustomer.INIT;
            END;
            lCorporateName := lCustomer.Name;
            IF lCorporateRegion.GET("Corporate No.","Corporate Region Code") THEN BEGIN
              lCorporateRegion.INIT;
            END;
            lCorporateRegionName := lCorporateRegion.Name;

            lVendorLedgerEntry.SETCURRENTKEY("Vendor No.","Document No.","Posting Date");
            lVendorLedgerEntry.SETRANGE("Vendor No.",lPurchInvHeader."Pay-to Vendor No.");
            lVendorLedgerEntry.SETRANGE("Document No.","No.");
            lVendorLedgerEntry.SETRANGE("Posting Date","Posting Date");
            IF lVendorLedgerEntry.FINDFIRST THEN BEGIN
              lCorporateName := '';
              lCorporateRegionName := '';
              IF NOT lCustomer.GET(lVendorLedgerEntry."Corporate No.") THEN BEGIN
                lCustomer.INIT;
              END;
              lCorporateName := lCustomer.Name;
              IF lCorporateRegion.GET(lVendorLedgerEntry."Corporate No.",lVendorLedgerEntry."Corporate Region Code") THEN BEGIN
                lCorporateRegion.INIT;
              END;
              lCorporateRegionName := lCorporateRegion.Name;

              lVendorLedgerEntry.CALCFIELDS("Remaining Amount");
              IF lVendorLedgerEntry."Remaining Amount" = 0 THEN BEGIN
                lXMLMgt.AddElement(lXMLNode1,'Invoice','','',lXMLNode2);
                lXMLMgt.AddElement(lXMLNode2,'IMHInvoiceNo',"No.",'',lXMLNode3);
                lXMLMgt.AddElement(lXMLNode2,'ProviderInvoiceNo',"Your Reference",'',lXMLNode3);
                lXMLMgt.AddElement(lXMLNode2,'InvoiceDate',FORMAT("Posting Date",0,9),'',lXMLNode3);
                lXMLMgt.AddElement(lXMLNode2,'Status',ToolsMgt.FormatExport(Text020),'',lXMLNode3);
                lXMLMgt.AddElement(lXMLNode2,'AmountExclVAT',FORMAT(lAmountExclVAT,0,1),'',lXMLNode3);
                lXMLMgt.AddElement(lXMLNode2,'AmountInclVAT',FORMAT(lAmountInclVAT,0,1),'',lXMLNode3);
                lXMLMgt.AddElement(lXMLNode2,'CorporateName',lCorporateName,'',lXMLNode3);
                lXMLMgt.AddElement(lXMLNode2,'CorporateRegionName',lCorporateRegionName,'',lXMLNode3);
                lXMLMgt.AddElement(lXMLNode2,'NotificationExists','false','',lXMLNode3);
              END ELSE BEGIN
                lXMLMgt.AddElement(lXMLNode1,'Invoice','','',lXMLNode2);
                lXMLMgt.AddElement(lXMLNode2,'IMHInvoiceNo',"No.",'',lXMLNode3);
                lXMLMgt.AddElement(lXMLNode2,'ProviderInvoiceNo',"Your Reference",'',lXMLNode3);
                lXMLMgt.AddElement(lXMLNode2,'InvoiceDate',FORMAT("Posting Date",0,9),'',lXMLNode3);
                lXMLMgt.AddElement(lXMLNode2,'Status',ToolsMgt.FormatExport(Text019),'',lXMLNode3);
                lXMLMgt.AddElement(lXMLNode2,'AmountExclVAT',FORMAT(lAmountExclVAT,0,1),'',lXMLNode3);
                lXMLMgt.AddElement(lXMLNode2,'AmountInclVAT',FORMAT(lAmountInclVAT,0,1),'',lXMLNode3);
                lXMLMgt.AddElement(lXMLNode2,'CorporateName',lCorporateName,'',lXMLNode3);
                lXMLMgt.AddElement(lXMLNode2,'CorporateRegionName',lCorporateRegionName,'',lXMLNode3);
                lXMLMgt.AddElement(lXMLNode2,'NotificationExists','false','',lXMLNode3);
              END;
      //<<IMH40.ST
              lXMLMgt.AddElement(lXMLNode2,'DocumentList','','',lXMLNode3);
              lDocumentAttach.SETRANGE("Referent Table No.", DATABASE::"Interaction Log Entry");
              lDocumentAttach.SETRANGE("Key Integer 1","Interaction Log Entry No.");
              IF lDocumentAttach.FINDSET(FALSE) THEN
                REPEAT
                  lXMLMgt.AddElement(lXMLNode3,'Document', '', '', lXMLNode4);
                  lXMLMgt.AddElement(lXMLNode4,'FlowCode', '', '', lXMLNode5);
                  lXMLMgt.AddElement(lXMLNode4,'DocEntryNo', FORMAT(lDocumentAttach."Key Integer 1"), '', lXMLNode5);
                  lXMLMgt.AddElement(lXMLNode4,'AttachEntryNo', FORMAT(lDocumentAttach."Entry No."), '', lXMLNode5);
                UNTIL lDocumentAttach.NEXT=0;
      //>>IMH40.ST
            END;
          UNTIL NEXT = 0;
        END;
      END;


      //<<IMH40.ST
      // Vu avec TP 19/12/2011 Pas d'ajout des documents en GED
      {
      WITH lDocumentQueue DO BEGIN
        SETCURRENTKEY("Contact No.");
        SETRANGE("Contact No.",pProviderNo);
        SETRANGE("Document Type", "Document Type"::Invoice);
        SETRANGE("Service No.", lServiceInterventionLine."Service No.");
        SETRANGE("Service Header No.", lServiceInterventionLine."Service Header No.");
        SETRANGE("Service Intervention Line No.", lServiceInterventionLine."Line No.");
        IF FINDSET(FALSE) THEN
          REPEAT
            lCorporateName := '';
            lCorporateRegionName := '';
            IF lService.GET("Service No.") THEN BEGIN
              IF lCustomer.GET(lService."Corporate No.") THEN
                lCorporateName := lCustomer.Name;
              IF lCorporateRegion.GET(lService."Corporate No.",lService."Corporate Region Code") THEN
                lCorporateRegionName := lCorporateRegion.Name;
            END;
            lXMLMgt.AddElement(lXMLNode1,'Invoice','','',lXMLNode2);
            lXMLMgt.AddElement(lXMLNode2,'IMHInvoiceNo','','',lXMLNode3);
            lXMLMgt.AddElement(lXMLNode2,'ProviderInvoiceNo', "Vendor Invoice No.",'',lXMLNode3);
            lXMLMgt.AddElement(lXMLNode2,'InvoiceDate',FORMAT("Document Date",0,9),'',lXMLNode3);
            lXMLMgt.AddElement(lXMLNode2,'Status',ToolsMgt.FormatExport(Text029),'',lXMLNode3);
            lXMLMgt.AddElement(lXMLNode2,'AmountExclVAT',FORMAT(Amount,0,1),'',lXMLNode3);
            lXMLMgt.AddElement(lXMLNode2,'AmountInclVAT',FORMAT("Amount Including VAT",0,1),'',lXMLNode3);
            lXMLMgt.AddElement(lXMLNode2,'CorporateName',lCorporateName,'',lXMLNode3);
            lXMLMgt.AddElement(lXMLNode2,'CorporateRegionName',lCorporateRegionName,'',lXMLNode3);
            lXMLMgt.AddElement(lXMLNode2,'NotificationExists','false','',lXMLNode3);

            lXMLMgt.AddElement(lXMLNode2,'FlowCode', "Flow Code", '', lXMLNode3);
            lXMLMgt.AddElement(lXMLNode2,'DocEntryNo', FORMAT("Entry No."), '', lXMLNode3);
          UNTIL NEXT = 0;
      END;
      }        //IMH40.ST
      lFileName := ExtrFct.GetTempFilename('xml');
      lXMLDoc.save(lFileName);
      IF lFile.OPEN(lFileName) THEN BEGIN
        lFile.CREATEINSTREAM(lInstream);
        pDocumentList.READ(lInstream);
        lFile.CLOSE;
        ERASE(lFileName);
      END ELSE BEGIN
        ERROR(Text013);
      END;
    END;

    LOCAL PROCEDURE AddIntervDocToDocList@1000000007(pIntervLine@1000000000 : Record 50075;pLimitToQuoteNo@1000000002 : Integer;pLimitToContactNo@1000000001 : Code[20];VAR pXMLNode@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode");
    VAR
      lDocumentQueue@1000000018 : Record 50054;
      lDocumentAttachment@1000000017 : Record 50021;
      lDocumentFlow@1000000016 : Record 50053;
      lInterLogEntry@1000000015 : Record 5065;
      lFileName@1000000009 : Text[1024];
      lFile@1000000008 : File;
      lInstream@1000000007 : InStream;
      lAttachMgt@1000000006 : Codeunit 5052;
      lFctName@1000000005 : Text[30];
      lGUID@1000000004 : GUID;
    BEGIN
      // Fonction d'ajout des documents rattach‚ … une intervention sur un noeud XML

      //<<IMH47.ST changement d'index
      //lDocumentQueue.SETCURRENTKEY("Contact No.");
      lDocumentQueue.SETCURRENTKEY("Service Document Type","Service Document No.","Service Intervention Line No.");
      //>>IMH47.ST
      lDocumentQueue.SETRANGE("Service Document Type",lDocumentQueue."Service Document Type"::Intervention);
      lDocumentQueue.SETRANGE("Service Document No.", pIntervLine."Service Header No.");
      lDocumentQueue.SETRANGE("Service Intervention Line No.", pIntervLine."Line No.");
      IF pLimitToContactNo <> '' THEN
        lDocumentQueue.SETRANGE("Contact No.", pLimitToContactNo);
      //<<IMH32.PC
      IF pLimitToQuoteNo <> 0 THEN
        lDocumentQueue.SETRANGE("Service Intervention Quote No.", pLimitToQuoteNo);
      //>>IMH32.PC
      //<<IMH36.ST pas de filtre statut
      //lDocumentQueue.SETRANGE("Status To Qualify",lDocumentQueue."Status To Qualify"::"To Qualify");
      //>>IMH36.ST
      IF NOT lDocumentQueue.ISEMPTY THEN BEGIN
        lDocumentQueue.FINDSET;
        REPEAT
          //<<IMH29.ISAT.EBA
          IF NOT lDocumentFlow.GET(lDocumentQueue."Flow Code") THEN
            lDocumentFlow.INIT;
          //>>IMH29.ISAT.EBA

          lDocumentAttachment.RESET;
          lDocumentAttachment.SETRANGE("Referent Table No.",DATABASE::"Document Queue");
          lDocumentAttachment.SETRANGE("Key Integer 1",lDocumentQueue."Queue Type");
          lDocumentAttachment.SETRANGE("Key Integer 2",lDocumentQueue."Entry No.");
          lDocumentAttachment.SETRANGE("Key Code 1",lDocumentQueue."Flow Code");
          IF NOT lDocumentAttachment.ISEMPTY THEN BEGIN
            lDocumentAttachment.FINDSET;
            REPEAT
              AddDocAttachToList(lDocumentAttachment, lDocumentFlow."Default Channel", pXMLNode);
            UNTIL lDocumentAttachment.NEXT = 0;
          END;
        UNTIL lDocumentQueue.NEXT = 0;
      END;

      // Parcours des ‚critures interactions
      lInterLogEntry.SETCURRENTKEY("Service No.","Service Header No.","Intervention Line No.");
      lInterLogEntry.SETRANGE("Service No.", pIntervLine."Service No.");
      lInterLogEntry.SETRANGE("Service Header No.", pIntervLine."Service Header No.");
      lInterLogEntry.SETRANGE("Intervention Line No.", pIntervLine."Line No.");
      IF pLimitToContactNo <> '' THEN BEGIN // limitation … un prestataire
        //<<IMH29.ISAT.EBA
        //lInterLogEntry.SETRANGE("Contact Company No.",pProviderNo);
        lInterLogEntry.SETRANGE("Provider No.", pLimitToContactNo);
        //>>IMH29.ISAT.EBA
      END;
      //<<IMH32.PC
      IF pLimitToQuoteNo <> 0 THEN
        lInterLogEntry.SETRANGE("Intervention Quote No.",pLimitToQuoteNo);
      //>>IMH32.PC
      IF NOT lInterLogEntry.ISEMPTY THEN BEGIN
        lInterLogEntry.FINDSET;
        REPEAT
          WITH lDocumentAttachment DO BEGIN
            RESET;
            SETCURRENTKEY("Interaction Log Entry No.");
            SETRANGE("Interaction Log Entry No.",lInterLogEntry."Entry No.");
            SETRANGE("Referent Table No.",DATABASE::"Interaction Log Entry"); // ???
            IF NOT ISEMPTY THEN BEGIN
              FINDSET;
              REPEAT
                AddDocAttachToList(lDocumentAttachment, lInterLogEntry."Interaction Group Code", pXMLNode);
              UNTIL NEXT = 0;
            END;
          END; // WITH
        UNTIL lInterLogEntry.NEXT = 0;
      END;

      // Parcours des documents attach‚s sans intervention
      WITH lDocumentAttachment DO BEGIN
        RESET;
      //<<IMH47.ST changement index
      //  SETCURRENTKEY("Provider No.");
        SETCURRENTKEY("Service Document No.","Service Intervention Line No.","Intervention Quote Line No.");
        SETRANGE("Referent Table No.",DATABASE::"Service Header");
        SETRANGE("Service Document No.", pIntervLine."Service Header No.");
        SETRANGE("Service Intervention Line No.", pIntervLine."Line No.");
        IF pLimitToQuoteNo <> 0 THEN
          SETRANGE("Intervention Quote Line No.", pLimitToQuoteNo);
        IF pLimitToContactNo <> '' THEN
          SETRANGE("Provider No.", pLimitToContactNo);
      //<<IMH39.ST
      //  SETRANGE("Interaction Log Entry No.",0);
      //>>IMH39.ST
        IF NOT ISEMPTY THEN BEGIN
          FINDSET;
          REPEAT
            AddDocAttachToList(lDocumentAttachment, "Attach. Template Code", pXMLNode);
          UNTIL NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE AddDocAttachToList@1000000008(pDocAttach@1000000000 : Record 50021;pDocSource@1000000002 : Code[20];VAR pXMLNode@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode");
    VAR
      lXMLNode1@1000000013 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lXMLNode2@1000000012 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lXMLMgt@1000000010 : Codeunit 8016710;
      lFromFlow@1000000001 : Boolean;
    BEGIN
      // Fonction d'ajout d'un document sur un noeud XML
      //<<IMH36.ST
      IF pDocAttach."PDF Exist" THEN
        pDocAttach."File Extension" := 'PDF';
      //>>IMH36.ST

      WITH lXMLMgt DO BEGIN
        AddElement(pXMLNode,'Document','','',lXMLNode2);
        CASE pDocAttach."Referent Table No." OF
          DATABASE::"Document Queue" : BEGIN // Document attach‚ … un flux entrant
            lFromFlow := TRUE;
            IF pDocAttach."Key Code 1" <> '' THEN
              AddElement4(lXMLNode2,'pFlowCode',pDocAttach."Key Code 1",'');
            AddElement4(lXMLNode2,'pDocEntryNo',FORMAT(pDocAttach."Key Integer 2"),'');
          END;
          DATABASE::"Interaction Log Entry" : BEGIN  // ‚criture interaction
            AddElement4(lXMLNode2,'pDocEntryNo',FORMAT(pDocAttach."Interaction Log Entry No."),'');
          END;
          DATABASE::"Service Header" : BEGIN // fichier RDD
            AddElement4(lXMLNode2,'pDocEntryNo',FORMAT(pDocAttach."Key Integer 2"),'');
          END;
        END;
        AddElement4(lXMLNode2,'pAttachEntryNo',FORMAT(pDocAttach."Entry No."),'');
        //<<IMH29.ISAT.EBA
        IF pDocAttach.Description <> '' THEN
          AddElement4(lXMLNode2,'pDocName',pDocAttach.Description,'')
        ELSE
        //>>IMH29.ISAT.EBA
          AddElement4(lXMLNode2,'pDocName',pDocAttach."Description 2",'');

        IF pDocAttach."File Size" <> 0 THEN
          AddElement4(lXMLNode2,'pDocSize',FORMAT(pDocAttach."File Size"),'');
        AddElement4(lXMLNode2,'pDocType',pDocAttach."File Extension",'');
        IF pDocSource <> '' THEN
          AddElement4(lXMLNode2,'pDocSource',pDocSource,'');
        //<<IMH29.ISAT.EBA
        //IF lDocumentQueue."Document Date" <> 0D THEN
        //  AddElement4(lXMLNode2,'pDocDate',FORMAT(lDocumentQueue."Document Date",0,'<Year4>-<Month,2>-<Day,2>'),
        //          '',lXMLNode3);
        IF pDocAttach."Creation Date" <> 0DT THEN
          AddElement4(lXMLNode2,'pDocDate',FORMAT(pDocAttach."Creation Date",0,9),'');
        //>>IMH29.ISAT.EBA
        //<<IMH32.PC
        AddElement4(lXMLNode2,'pTableID',FORMAT(pDocAttach."Referent Table No.",0,1),'');
        AddElement4(lXMLNode2,'pKeyInteger1',FORMAT(pDocAttach."Key Integer 1",0,1),'');
        AddElement4(lXMLNode2,'pKeyInteger2',FORMAT(pDocAttach."Key Integer 2",0,1),'');
        IF pDocAttach."Key Code 1" <> '' THEN
          AddElement4(lXMLNode2,'pKeyCode1',pDocAttach."Key Code 1",'');
        IF pDocAttach."Key Code 2" <> '' THEN
          AddElement4(lXMLNode2,'pKeyCode2',pDocAttach."Key Code 2",'');
        AddElement4(lXMLNode2,'pKeyEntryNo',FORMAT(pDocAttach."Entry No.",0,1),'');
        IF pDocAttach."Service Document No." <> '' THEN
          AddElement4(lXMLNode2,'pServiceHeaderNo',pDocAttach."Service Document No.",'');

        AddElement4(lXMLNode2,'pInterventionLineNo',FORMAT(pDocAttach."Service Intervention Line No.",0,1),'');
        AddElement4(lXMLNode2,'pInterventionQuoteLineNo',FORMAT(pDocAttach."Intervention Quote Line No.",0,1),'');
        AddElement4(lXMLNode2,'pDocumentType',FORMAT(pDocAttach."Document Queue Type",0,9),'');
         //>>IMH32.PC
      END; // WITH
    END;

    LOCAL PROCEDURE AutoCreateMinute@1100281015(pIntervLine@1100281000 : Record 50075);
    VAR
      lServMin@1100281001 : Record 50084;
    BEGIN
      //IMH49.ST
      lServMin."Service Header No." := pIntervLine."Service Header No.";
      lServMin."Service Intervention Line No." := pIntervLine."Line No.";
      lServMin.InitNewLine;
      IF lServMin.Type <> lServMin.Type::"End of work" THEN
        lServMin.VALIDATE(Type, lServMin.Type::"End of work");
      lServMin.VALIDATE("Receipt Date", TODAY);
      lServMin.INSERT(TRUE);
    END;

    PROCEDURE GetReasonDescription@1000000000(pFieldNo@1100281000 : Integer;pCode@1000000000 : Text[80]) : Text[80];
    VAR
      lCode@1000000001 : Record 50079;
    BEGIN
      //IMH59
      IF STRLEN(pCode) > MAXSTRLEN(lCode.Code) THEN
        EXIT('');
      IF lCode.GET(50075,pFieldNo,pCode) THEN
        EXIT(lCode.Description)
      ELSE
        EXIT('');
    END;

    PROCEDURE SetMoisture@1000000013(pProviderNo@1000000007 : Code[20];pServiceHeaderNo@1000000006 : Code[20];pInterventionNo@1000000005 : Integer;pTHStatus@1000000003 : Boolean;pTHValue@1000000001 : Decimal;pFuturePreVisitDateTime@1000000004 : DateTime) : Boolean;
    VAR
      lProvider@1000000000 : Record 50000;
      lIntervLine@1000000002 : Record 50075;
      lCommentLine@1000000008 : Text[1024];
    BEGIN
      GLOBALLANGUAGE(1036);
      // R‚cup‚rer le prestataire
      IF NOT lProvider.GET(pProviderNo) THEN
        ERROR(Text000,pProviderNo);

      IF NOT ExtrFct.GetInterv(pServiceHeaderNo, pInterventionNo, TRUE, lIntervLine) THEN
        EXIT(FALSE);
      ExtrFct.EvalDateTime(pFuturePreVisitDateTime);

      WITH lIntervLine DO BEGIN
        VALIDATE(Moisture,pTHStatus);
        VALIDATE("Moisture %",pTHValue);
        VALIDATE("Next Appointment Date",DT2DATE(pFuturePreVisitDateTime));
        IF NOT MODIFY(TRUE) THEN
          MODIFY(FALSE);
      END;

      IF pTHStatus THEN BEGIN
        GetInterfaceSetup;
        lCommentLine := STRSUBSTNO(Text105c, FORMAT(pTHValue) + '%');
        IF pFuturePreVisitDateTime <> 0DT THEN
          lCommentLine += STRSUBSTNO(Text105d, FormatDT(pFuturePreVisitDateTime));
        ExtrFct.CreateIntervCommentText(lIntervLine, lCommentLine, CURRENTDATETIME, '');

        // Cr‚ation ligne activit‚ corbeille
        IF InterfaceSetup."Moisture Task Code" <> '' THEN
          ExtrFct.CreateTrayLineInterv(lIntervLine,InterfaceSetup."Moisture Task Code");
      END;
      EXIT(TRUE);
    END;

    PROCEDURE GetInvoicesListProvider@1100281027(pProviderNo@1100281002 : Code[20];VAR pDocumentList@1100281003 : BigText);
    VAR
      lServiceInterventionLine@1100281011 : Record 50075;
      lPurchaseHeader@1100281009 : Record 38;
      lPurchaseLine@1100281022 : Record 39;
      lPurchInvHeader@1100281010 : Record 122;
      lPurchInvLine@1100281023 : Record 123;
      lVendorLedgerEntry@1100281012 : Record 25;
      lCustomer@1100281018 : Record 18;
      lCorporateRegion@1100281019 : Record 50058;
      lInteractionLogEntry@1100281024 : Record 5065;
      lXMLMgt@1100281004 : Codeunit 8016710;
      lXMLDoc@1100281008 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lXMLNode1@1100281007 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lXMLNode2@1100281006 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lXMLNode3@1100281005 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lFileName@1100281013 : Text[1024];
      lFile@1100281014 : File;
      lInstream@1100281015 : InStream;
      lCorporateName@1100281016 : Text[50];
      lCorporateRegionName@1100281017 : Text[50];
      lAmountInclVAT@1100281021 : Decimal;
      lDocumentQueue@1000000000 : Record 50054;
      lGUID@1000000001 : GUID;
      lService@1000000002 : Record 50066;
      lProvider@1000000003 : Record 50000;
      lServiceHeader@1000000004 : Record 5900;
      lVendor@1000000005 : Record 23;
    BEGIN
      //<<IMH72.DBR
      // R‚cup‚ration de l'etat des factures prestataires

      {
        Payto Vendor No_
        Raison Sociale
        Due Date
        NøFacture
        NøService
        Montant TTC
        Date Comptabilisation
        Mode R‚glement
        Montant R‚glement
        Grand Compte
        Region Grand Compte
        Nom Soci‚taire
        Type Produit
        E-Mail
        Regional Coordinator
        Nøgrp statistique
      }

      ExtrFct.Initial(2,'GetInvoicesList',STRSUBSTNO('%1',pProviderNo),lGUID);

      GLOBALLANGUAGE(1036);

      // Cr‚ation du fichier XML
      lXMLMgt.CreateXml(lXMLDoc,'<InvoicesList/>',lXMLNode1);

      // Facture rapproch‚ ou non
      WITH lPurchaseHeader DO BEGIN
        SETCURRENTKEY("Buy-from Vendor No.");
        SETRANGE("Buy-from Vendor No.",pProviderNo);
        SETRANGE("Document Type","Document Type"::Invoice);
        IF FINDSET THEN BEGIN
          REPEAT
            lAmountInclVAT := 0;
            lPurchaseLine.SETRANGE("Document Type","Document Type");
            lPurchaseLine.SETRANGE("Document No.","No.");
            IF lPurchaseLine.FINDSET THEN BEGIN
              REPEAT
                lAmountInclVAT += lPurchaseLine."Amount Including VAT";
              UNTIL lPurchaseLine.NEXT = 0;
            END;
            lCorporateName := '';
            lCorporateRegionName := '';
            IF NOT lCustomer.GET("Corporate No.") THEN BEGIN
              lCustomer.INIT;
            END;
            lCorporateName := lCustomer.Name;
            IF lCorporateRegion.GET("Corporate No.","Corporate Region Code") THEN BEGIN
              lCorporateRegion.INIT;
            END;
            lCorporateRegionName := lCorporateRegion.Name;

            IF lService.GET(lPurchaseHeader."Service No.") THEN BEGIN
              IF NOT lProvider.GET(pProviderNo) THEN BEGIN
                lProvider.INIT;
              END;

              IF NOT lVendor.GET(pProviderNo) THEN BEGIN
                lVendor.INIT;
              END;

              IF NOT lServiceHeader.GET(lServiceHeader."Document Type"::Invoice,lPurchaseHeader."Service Header No.") THEN BEGIN
                lServiceHeader.INIT;
              END;

              lXMLMgt.AddElement(lXMLNode2,'PayToVendorNo',"Pay-to Vendor No.",'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'BuyFromVendorNo',"Buy-from Vendor No.",'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'PayToName',"Pay-to Name",'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'BuyFromVendorName',"Buy-from Vendor Name",'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'DueDate',FORMAT("Due Date",0,9),'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'VendorInvoiceNo',"Vendor Invoice No.",'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'AmountInclVAT',FORMAT(lAmountInclVAT,0,1),'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'PaymentMethodCode',lVendor."Payment Method Code",'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'ServiceNo',"Service No.",'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'PostingDate',FORMAT("Posting Date",0,9),'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'PaymentAmount','','',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'CorporateName',lCorporateName,'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'CorporateRegionName',lCorporateRegionName,'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'ContactName',lServiceHeader."Contact Name",'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'ServiceOrderType',lServiceHeader."Service Order Type",'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'E-Mail',lProvider."E-Mail",'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'RegionalCoordinator',lProvider."Regional Coordinator",'',lXMLNode3);

            END;
          UNTIL NEXT = 0;
        END;
      END;

      // Facture comptabilis‚e non transmise
      WITH lPurchInvHeader DO BEGIN
        SETCURRENTKEY("Buy-from Vendor No.");
        SETRANGE("Buy-from Vendor No.",pProviderNo);
        IF FINDSET THEN BEGIN
          REPEAT
            lAmountInclVAT := 0;
            lPurchInvLine.SETRANGE("Document No.","No.");
            IF lPurchInvLine.FINDSET THEN BEGIN
              REPEAT
                lAmountInclVAT += lPurchaseLine."Amount Including VAT";
              UNTIL lPurchInvLine.NEXT = 0;
            END;
            lCorporateName := '';
            lCorporateRegionName := '';
            IF NOT lCustomer.GET("Corporate No.") THEN BEGIN
              lCustomer.INIT;
            END;
            lCorporateName := lCustomer.Name;
            IF lCorporateRegion.GET("Corporate No.","Corporate Region Code") THEN BEGIN
              lCorporateRegion.INIT;
            END;
            lCorporateRegionName := lCorporateRegion.Name;

            IF lService.GET(lPurchaseHeader."Service No.") THEN BEGIN
              IF NOT lProvider.GET(pProviderNo) THEN BEGIN
                lProvider.INIT;
              END;

              IF NOT lVendor.GET(pProviderNo) THEN BEGIN
                lVendor.INIT;
              END;

              IF NOT lServiceHeader.GET(lServiceHeader."Document Type"::Invoice,lPurchaseHeader."Service Header No.") THEN BEGIN
                lServiceHeader.INIT;
              END;
              lXMLMgt.AddElement(lXMLNode2,'PayToVendorNo',"Pay-to Vendor No.",'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'BuyFromVendorNo',"Buy-from Vendor No.",'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'PayToName',"Pay-to Name",'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'BuyFromVendorName',"Buy-from Vendor Name",'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'DueDate',FORMAT("Due Date",0,9),'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'VendorInvoiceNo',"Vendor Invoice No.",'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'AmountInclVAT',FORMAT(lAmountInclVAT,0,1),'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'PaymentMethodCode',lVendor."Payment Method Code",'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'ServiceNo',"Service No.",'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'PostingDate',FORMAT("Posting Date",0,9),'',lXMLNode3);

              lVendorLedgerEntry.SETCURRENTKEY("Vendor No.","Document No.","Posting Date");
              lVendorLedgerEntry.SETRANGE("Vendor No.",lPurchInvHeader."Pay-to Vendor No.");
              lVendorLedgerEntry.SETRANGE("Document No.","No.");
              lVendorLedgerEntry.SETRANGE("Posting Date","Posting Date");
              IF lVendorLedgerEntry.FINDFIRST THEN BEGIN
                lVendorLedgerEntry.CALCFIELDS(Amount,"Remaining Amount");
                IF lVendorLedgerEntry."Remaining Amount" = 0 THEN BEGIN
                  lXMLMgt.AddElement(lXMLNode2,'PaymentAmount',FORMAT(lVendorLedgerEntry.Amount,0,1),'',lXMLNode3);
                END ELSE BEGIN
                  lXMLMgt.AddElement(lXMLNode2,'PaymentAmount','','',lXMLNode3);
                END;
              END ELSE BEGIN
                lXMLMgt.AddElement(lXMLNode2,'PaymentAmount','','',lXMLNode3);
              END;
              lXMLMgt.AddElement(lXMLNode2,'CorporateName',lCorporateName,'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'CorporateRegionName',lCorporateRegionName,'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'ContactName',lServiceHeader."Contact Name",'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'ServiceOrderType',lServiceHeader."Service Order Type",'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'E-Mail',lProvider."E-Mail",'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'RegionalCoordinator',lProvider."Regional Coordinator",'',lXMLNode3);

            END;
          UNTIL NEXT = 0;
        END;
      END;


      {
      // Facture comptabilis‚e non transmise
      WITH lPurchInvHeader DO BEGIN
        SETCURRENTKEY("Service No.","Service Header No.","Intervention Line No.");
        SETRANGE("Service No.",lServiceInterventionLine."Service No.");
        SETRANGE("Service Header No.",lServiceInterventionLine."Service Header No.");
        SETRANGE("Intervention Line No.",lServiceInterventionLine."Line No.");
        IF FINDSET THEN BEGIN
          REPEAT
            lAmountExclVAT := 0;
            lAmountInclVAT := 0;
            lPurchInvLine.SETRANGE("Document No.","No.");
            IF lPurchInvLine.FINDSET THEN BEGIN
              REPEAT
                lAmountExclVAT += lPurchInvLine.Amount;
                lAmountInclVAT += lPurchInvLine."Amount Including VAT";
              UNTIL lPurchInvLine.NEXT = 0;
            END;
            lCorporateName := '';
            lCorporateRegionName := '';
            IF NOT lCustomer.GET("Corporate No.") THEN BEGIN
              lCustomer.INIT;
            END;
            lCorporateName := lCustomer.Name;
            IF lCorporateRegion.GET("Corporate No.","Corporate Region Code") THEN BEGIN
              lCorporateRegion.INIT;
            END;
            lCorporateRegionName := lCorporateRegion.Name;

            lVendorLedgerEntry.SETCURRENTKEY("Vendor No.","Document No.","Posting Date");
            lVendorLedgerEntry.SETRANGE("Vendor No.",lPurchInvHeader."Pay-to Vendor No.");
            lVendorLedgerEntry.SETRANGE("Document No.","No.");
            lVendorLedgerEntry.SETRANGE("Posting Date","Posting Date");
            IF lVendorLedgerEntry.FINDFIRST THEN BEGIN
              lCorporateName := '';
              lCorporateRegionName := '';
              IF NOT lCustomer.GET(lVendorLedgerEntry."Corporate No.") THEN BEGIN
                lCustomer.INIT;
              END;
              lCorporateName := lCustomer.Name;
              IF lCorporateRegion.GET(lVendorLedgerEntry."Corporate No.",lVendorLedgerEntry."Corporate Region Code") THEN BEGIN
                lCorporateRegion.INIT;
              END;
              lCorporateRegionName := lCorporateRegion.Name;

              lVendorLedgerEntry.CALCFIELDS("Remaining Amount");
              IF lVendorLedgerEntry."Remaining Amount" = 0 THEN BEGIN
                lXMLMgt.AddElement(lXMLNode1,'Invoice','','',lXMLNode2);
                lXMLMgt.AddElement(lXMLNode2,'IMHInvoiceNo',"No.",'',lXMLNode3);
                lXMLMgt.AddElement(lXMLNode2,'ProviderInvoiceNo',"Your Reference",'',lXMLNode3);
                lXMLMgt.AddElement(lXMLNode2,'InvoiceDate',FORMAT("Posting Date",0,9),'',lXMLNode3);
                lXMLMgt.AddElement(lXMLNode2,'Status',ToolsMgt.FormatExport(Text020),'',lXMLNode3);
                lXMLMgt.AddElement(lXMLNode2,'AmountExclVAT',FORMAT(lAmountExclVAT,0,1),'',lXMLNode3);
                lXMLMgt.AddElement(lXMLNode2,'AmountInclVAT',FORMAT(lAmountInclVAT,0,1),'',lXMLNode3);
                lXMLMgt.AddElement(lXMLNode2,'CorporateName',lCorporateName,'',lXMLNode3);
                lXMLMgt.AddElement(lXMLNode2,'CorporateRegionName',lCorporateRegionName,'',lXMLNode3);
                lXMLMgt.AddElement(lXMLNode2,'NotificationExists','false','',lXMLNode3);
              END ELSE BEGIN
                lXMLMgt.AddElement(lXMLNode1,'Invoice','','',lXMLNode2);
                lXMLMgt.AddElement(lXMLNode2,'IMHInvoiceNo',"No.",'',lXMLNode3);
                lXMLMgt.AddElement(lXMLNode2,'ProviderInvoiceNo',"Your Reference",'',lXMLNode3);
                lXMLMgt.AddElement(lXMLNode2,'InvoiceDate',FORMAT("Posting Date",0,9),'',lXMLNode3);
                lXMLMgt.AddElement(lXMLNode2,'Status',ToolsMgt.FormatExport(Text019),'',lXMLNode3);
                lXMLMgt.AddElement(lXMLNode2,'AmountExclVAT',FORMAT(lAmountExclVAT,0,1),'',lXMLNode3);
                lXMLMgt.AddElement(lXMLNode2,'AmountInclVAT',FORMAT(lAmountInclVAT,0,1),'',lXMLNode3);
                lXMLMgt.AddElement(lXMLNode2,'CorporateName',lCorporateName,'',lXMLNode3);
                lXMLMgt.AddElement(lXMLNode2,'CorporateRegionName',lCorporateRegionName,'',lXMLNode3);
                lXMLMgt.AddElement(lXMLNode2,'NotificationExists','false','',lXMLNode3);
              END;
            END;
          UNTIL NEXT = 0;
        END;
      END;
      }

      lFileName := ExtrFct.GetTempFilename('xml');
      lXMLDoc.save(lFileName);
      IF lFile.OPEN(lFileName) THEN BEGIN
        lFile.CREATEINSTREAM(lInstream);
        pDocumentList.READ(lInstream);
        lFile.CLOSE;
        ERASE(lFileName);
      END ELSE BEGIN
        ERROR(Text013);
      END;

      //<<IMH65.PC
      ExtrFct.Finish(lGUID);
      //>>IMH65.PC
    END;

    PROCEDURE GetInvoicesList@1000000015(pProviderNo@1100281002 : Code[20];pServiceHeaderNo@1100281001 : Code[20];pInterventionNo@1100281000 : Integer;VAR pDocumentList@1100281003 : BigText);
    VAR
      lServiceInterventionLine@1100281011 : Record 50075;
      lPurchaseHeader@1100281009 : Record 38;
      lPurchaseLine@1100281022 : Record 39;
      lPurchInvHeader@1100281010 : Record 122;
      lPurchInvLine@1100281023 : Record 123;
      lVendorLedgerEntry@1100281012 : Record 25;
      lCustomer@1100281018 : Record 18;
      lCorporateRegion@1100281019 : Record 50058;
      lInteractionLogEntry@1100281024 : Record 5065;
      lXMLMgt@1100281004 : Codeunit 8016710;
      lXMLDoc@1100281008 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lXMLNode1@1100281007 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lXMLNode2@1100281006 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lXMLNode3@1100281005 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lFileName@1100281013 : Text[1024];
      lFile@1100281014 : File;
      lInstream@1100281015 : InStream;
      lCorporateName@1100281016 : Text[50];
      lCorporateRegionName@1100281017 : Text[50];
      lAmountExclVAT@1100281020 : Decimal;
      lAmountInclVAT@1100281021 : Decimal;
      lDocumentQueue@1000000000 : Record 50054;
      lGUID@1000000001 : GUID;
    BEGIN
      // IMH.PC
      // R‚cup‚ration des factures li‚ … une intervention

      {
      0000953: Requˆte SQL : Liste des factures li‚es … une intervention

      Colonnes souhait‚es :
      - R‚f‚rence de la facture (r‚f‚rence prestataire)
      - Date de la facture
      - Statut de traitement de la facture
      - Montant total HT
      - Montant total TTC
      - Nom National Grand Compte (cf. Philippe Catherine)
      - Nom R‚gion Grand Compte (cf. Philippe Catherine)
      - Pr‚sence de notification relatif … la facture vers le prestataire ?

      CritŠres de filtrages :
      - Identifiant NAV de l'intervention
      }
      GLOBALLANGUAGE(1036);

      //<<IMH65.PC
      ExtrFct.Initial(2,'GetInvoicesList',STRSUBSTNO('%1-%2-%3',pProviderNo,pServiceHeaderNo,pInterventionNo),lGUID);
      //>>IMH65.PC

      IF NOT ExtrFct.GetInterv(pServiceHeaderNo, pInterventionNo, TRUE, lServiceInterventionLine) THEN
        EXIT;

      // Cr‚ation du fichier XML
      lXMLMgt.CreateXml(lXMLDoc,'<InvoicesList/>',lXMLNode1);

      // Facture rapproch‚ ou non
      WITH lPurchaseHeader DO BEGIN
        SETCURRENTKEY("Service No.","Service Header No.","Intervention Line No.","Quote Line No.");
        SETRANGE("Service No.",lServiceInterventionLine."Service No.");
        SETRANGE("Service Header No.",lServiceInterventionLine."Service Header No.");
        SETRANGE("Intervention Line No.",lServiceInterventionLine."Line No.");
        IF FINDSET THEN BEGIN
          REPEAT
            lAmountExclVAT := 0;
            lAmountInclVAT := 0;
            lPurchaseLine.SETRANGE("Document Type","Document Type");
            lPurchaseLine.SETRANGE("Document No.","No.");
            IF lPurchaseLine.FINDSET THEN BEGIN
              REPEAT
                lAmountExclVAT += lPurchaseLine.Amount;
                lAmountInclVAT += lPurchaseLine."Amount Including VAT";
              UNTIL lPurchaseLine.NEXT = 0;
            END;
            lCorporateName := '';
            lCorporateRegionName := '';
            IF NOT lCustomer.GET("Corporate No.") THEN BEGIN
              lCustomer.INIT;
            END;
            lCorporateName := lCustomer.Name;
            IF lCorporateRegion.GET("Corporate No.","Corporate Region Code") THEN BEGIN
              lCorporateRegion.INIT;
            END;
            lCorporateRegionName := lCorporateRegion.Name;

            IF Reconciled THEN BEGIN
              lXMLMgt.AddElement(lXMLNode1,'Invoice','','',lXMLNode2);
              lXMLMgt.AddElement(lXMLNode2,'IMHInvoiceNo',"No.",'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'ProviderInvoiceNo',"Your Reference",'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'InvoiceDate',FORMAT("Posting Date",0,9),'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'Status',ToolsMgt.FormatExport(Text017),'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'AmountExclVAT',FORMAT(lAmountExclVAT,0,1),'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'AmountInclVAT',FORMAT(lAmountInclVAT,0,1),'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'CorporateName',lCorporateName,'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'CorporateRegionName',lCorporateRegionName,'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'NotificationExists','false','',lXMLNode3);
            END ELSE BEGIN
              lXMLMgt.AddElement(lXMLNode1,'Invoice','','',lXMLNode2);
              lXMLMgt.AddElement(lXMLNode2,'IMHInvoiceNo',"No.",'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'ProviderInvoiceNo',"Your Reference",'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'InvoiceDate',FORMAT("Posting Date",0,9),'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'Status',ToolsMgt.FormatExport(Text018),'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'AmountExclVAT',FORMAT(lAmountExclVAT,0,1),'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'AmountInclVAT',FORMAT(lAmountInclVAT,0,1),'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'CorporateName',lCorporateName,'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'CorporateRegionName',lCorporateRegionName,'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'NotificationExists','false','',lXMLNode3);
              {
              // Recherche d'un document de facture ‚ventuel
              lInteractionLogEntry.setcurrentkey("Service No.","Service Header No.","Intervention Line No.","Date","Postponed");
              lInteractionLogEntry.setcurrentkey("Service No.",);
              lInteractionLogEntry.setcurrentkey("Service No.","Service Header No.","Intervention Line No.","Date","Postponed");
              lInteractionLogEntry.setcurrentkey("Service No.","Service Header No.","Intervention Line No.","Date","Postponed");
              lXMLMgt.AddElement(lXMLNode2,'pTableID',FORMAT(lDocumentAttachment."Referent Table No.",0,1),'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'pKeyInteger1',FORMAT(lDocumentAttachment."Key Integer 1",0,1),'',lXMLNode3);
              lXMLMgt.AddElement(lXMLNode2,'pKeyInteger2',FORMAT(lDocumentAttachment."Key Integer 2",0,1),'',lXMLNode3);
              IF lDocumentAttachment."Key Code 1" <> '' THEN BEGIN
                lXMLMgt.AddElement(lXMLNode2,'pKeyCode1',lDocumentAttachment."Key Code 1",'',lXMLNode3);
              END;
              IF lDocumentAttachment."Key Code 2" <> '' THEN BEGIN
                lXMLMgt.AddElement(lXMLNode2,'pKeyCode2',lDocumentAttachment."Key Code 2",'',lXMLNode3);
              END;
              lXMLMgt.AddElement(lXMLNode2,'pKeyEntryNo',FORMAT(lDocumentAttachment."Entry No.",0,1),'',lXMLNode3);
              }
            END;
          UNTIL NEXT = 0;
        END;
      END;

      // Facture comptabilis‚e non transmise
      WITH lPurchInvHeader DO BEGIN
        SETCURRENTKEY("Service No.","Service Header No.","Intervention Line No.");
        SETRANGE("Service No.",lServiceInterventionLine."Service No.");
        SETRANGE("Service Header No.",lServiceInterventionLine."Service Header No.");
        SETRANGE("Intervention Line No.",lServiceInterventionLine."Line No.");
        IF FINDSET THEN BEGIN
          REPEAT
            lAmountExclVAT := 0;
            lAmountInclVAT := 0;
            lPurchInvLine.SETRANGE("Document No.","No.");
            IF lPurchInvLine.FINDSET THEN BEGIN
              REPEAT
                lAmountExclVAT += lPurchInvLine.Amount;
                lAmountInclVAT += lPurchInvLine."Amount Including VAT";
              UNTIL lPurchInvLine.NEXT = 0;
            END;
            lCorporateName := '';
            lCorporateRegionName := '';
            IF NOT lCustomer.GET("Corporate No.") THEN BEGIN
              lCustomer.INIT;
            END;
            lCorporateName := lCustomer.Name;
            IF lCorporateRegion.GET("Corporate No.","Corporate Region Code") THEN BEGIN
              lCorporateRegion.INIT;
            END;
            lCorporateRegionName := lCorporateRegion.Name;

            lVendorLedgerEntry.SETCURRENTKEY("Vendor No.","Document No.","Posting Date");
            lVendorLedgerEntry.SETRANGE("Vendor No.",lPurchInvHeader."Pay-to Vendor No.");
            lVendorLedgerEntry.SETRANGE("Document No.","No.");
            lVendorLedgerEntry.SETRANGE("Posting Date","Posting Date");
            IF lVendorLedgerEntry.FINDFIRST THEN BEGIN
              lCorporateName := '';
              lCorporateRegionName := '';
              IF NOT lCustomer.GET(lVendorLedgerEntry."Corporate No.") THEN BEGIN
                lCustomer.INIT;
              END;
              lCorporateName := lCustomer.Name;
              IF lCorporateRegion.GET(lVendorLedgerEntry."Corporate No.",lVendorLedgerEntry."Corporate Region Code") THEN BEGIN
                lCorporateRegion.INIT;
              END;
              lCorporateRegionName := lCorporateRegion.Name;

              lVendorLedgerEntry.CALCFIELDS("Remaining Amount");
              IF lVendorLedgerEntry."Remaining Amount" = 0 THEN BEGIN
                lXMLMgt.AddElement(lXMLNode1,'Invoice','','',lXMLNode2);
                lXMLMgt.AddElement(lXMLNode2,'IMHInvoiceNo',"No.",'',lXMLNode3);
                lXMLMgt.AddElement(lXMLNode2,'ProviderInvoiceNo',"Your Reference",'',lXMLNode3);
                lXMLMgt.AddElement(lXMLNode2,'InvoiceDate',FORMAT("Posting Date",0,9),'',lXMLNode3);
                lXMLMgt.AddElement(lXMLNode2,'Status',ToolsMgt.FormatExport(Text020),'',lXMLNode3);
                lXMLMgt.AddElement(lXMLNode2,'AmountExclVAT',FORMAT(lAmountExclVAT,0,1),'',lXMLNode3);
                lXMLMgt.AddElement(lXMLNode2,'AmountInclVAT',FORMAT(lAmountInclVAT,0,1),'',lXMLNode3);
                lXMLMgt.AddElement(lXMLNode2,'CorporateName',lCorporateName,'',lXMLNode3);
                lXMLMgt.AddElement(lXMLNode2,'CorporateRegionName',lCorporateRegionName,'',lXMLNode3);
                lXMLMgt.AddElement(lXMLNode2,'NotificationExists','false','',lXMLNode3);
              END ELSE BEGIN
                lXMLMgt.AddElement(lXMLNode1,'Invoice','','',lXMLNode2);
                lXMLMgt.AddElement(lXMLNode2,'IMHInvoiceNo',"No.",'',lXMLNode3);
                lXMLMgt.AddElement(lXMLNode2,'ProviderInvoiceNo',"Your Reference",'',lXMLNode3);
                lXMLMgt.AddElement(lXMLNode2,'InvoiceDate',FORMAT("Posting Date",0,9),'',lXMLNode3);
                lXMLMgt.AddElement(lXMLNode2,'Status',ToolsMgt.FormatExport(Text019),'',lXMLNode3);
                lXMLMgt.AddElement(lXMLNode2,'AmountExclVAT',FORMAT(lAmountExclVAT,0,1),'',lXMLNode3);
                lXMLMgt.AddElement(lXMLNode2,'AmountInclVAT',FORMAT(lAmountInclVAT,0,1),'',lXMLNode3);
                lXMLMgt.AddElement(lXMLNode2,'CorporateName',lCorporateName,'',lXMLNode3);
                lXMLMgt.AddElement(lXMLNode2,'CorporateRegionName',lCorporateRegionName,'',lXMLNode3);
                lXMLMgt.AddElement(lXMLNode2,'NotificationExists','false','',lXMLNode3);
              END;
            END;
          UNTIL NEXT = 0;
        END;
      END;


      lFileName := ExtrFct.GetTempFilename('xml');
      lXMLDoc.save(lFileName);
      IF lFile.OPEN(lFileName) THEN BEGIN
        lFile.CREATEINSTREAM(lInstream);
        pDocumentList.READ(lInstream);
        lFile.CLOSE;
        ERASE(lFileName);
      END ELSE BEGIN
        ERROR(Text013);
      END;

      //<<IMH65.PC
      ExtrFct.Finish(lGUID);
      //>>IMH65.PC
    END;

    BEGIN
    {
      /** @r IMH73 @d 16/05/14 @a ISAT.ST @v IMH6.01.4997 @s Mantis @h 4997 @c Filtre intervention manquant */
      /** @r IMH72 @d 17/12/13 @a IMH.DB  @v IMH6.01.3746 @s Decembre @h 3746 @c Etat de la facturation prestataire */
      /** @r IMH71 @d 06/08/13 @a ISAT.ZW @v IMH6.01.347 @s JUIN @h 4142 @c Correction format date */
      /** @r IMH70 @d 06/06/13 @a ISAT.PC @v IMH6.01.347 @s JUIN @h 4322 @c Correction */
      /** @r IMH69 @d 01/02/13 @a ISAT.ST @v IMH6.01.224 @s NEP00006 @h 3116 @c gestion de lock sur transmission de document */
      /** @r IMH68 @d 29/01/13 @a ISAT.PC @v IMH6.01.224 @s NEP00006 @h 4142 @c Correction format date */
      /** @r IMH67 @d 23/01/13 @a ISAT.PC @v IMH6.01.224 @s NEP00006 @h 2901 @c D‚sactivation notification sur UpdatePlace */
      /** @r IMH66 @d 02/11/12 @a ISAT.ST @v IMH6.01.224 @s NEP00006 @h 2901 @c D‚sactivation notification sur UpdatePlace */
      /** @r IMH65 @a 09/10/12 @a ISAT.PC @v IMH6.01.P003 @s Log Web Service @c Ajout de la fonctionnalit‚ */
      /** @r IMH64 @d 20/07/12 @a ISAT.PC @v IMH6.01.223 @s NEP000003 @c Extranet - Mantis @h 3734
          @c Prise en compte du type de PV urgent */
      /** @r IMH63 @d 04/06/12 @a ISAT.ST @v IMH6.01.165 @s Extranet - Mantis @h 2967
          @c Suppression heure des suivis, Modification FormatDT */
          @c Suppression heure des suivis FormatDT( -> FormatDate(DT2DAT( */
      /** @r IMH62 @d 30/05/12 @a ISAT.ST @v IMH6.01.165 @s Extranet - Mantis @h 2697 @c Ajout m‚thode pour controle d'humidit‚ */
      /** @r IMH61 @d 23/05/12 @a ISAT.ST @v IMH6.01.165 @s Extranet - Mantis @h 3027 @c Service obligatoire sur les documents */
      /** @r IMH60 @d 15/05/12 @a ISAT.ST @v IMH6.01.165 @s Extranet - Mantis @h 2814 @c pCreateActivity sur AddDocument */
      /** @r IMH59 @d 11/05/12 @a ISAT.LLT @v IMH6.01.165 @s Extranet - Mantis @h 3294 @c Gestion code raison */
      /** @r IMH58 @d 07/05/12 @a ISAT.ST @v IMH6.01.165 @s Extranet - Mantis @h 3305 @c Activit‚ pour humidit‚ */
      /** @r IMH57 @d 30/04/12 @a ISAT.ST @v IMH6.01.165 @s Extranet - Mantis @h 2697 @c Changement IMH35 sur PlanTask */
      /** @r IMH56 @d 27/04/12 @a ISAT.PC @v IMH6.01.165 @s Extranet - Mantis @h 2966 @c correction ConfirmRealizedInterv */
      /** @r IMH55 @d 27/04/12 @a ISAT.PC @v IMH6.01.165 @s Extranet - Mantis @h 2978 @c correction ComfirmPreVisit */
      /** @r IMH54 @d 27/04/12 @a ISAT.PC @v IMH6.01.165 @s Extranet - Mantis @h 3307
          @c Modification de la fonction GetEndTaskDelayReason */
      /** @r IMH53 @d 27/04/12 @a ISAT.PC @v IMH6.01.165 @s Extranet - Mantis @h 2862 @c gestion des exports */
      /** @r IMH52 @d 03/04/12 @a ISAT.ST @v IMH6.01.165 @s Extranet - Mantis @h 3039 @c Ne cr‚‚ pas de facture */
      /** @r IMH51 @d 03/04/12 @a ISAT.ST @v IMH6.01.165 @s Extranet - Mantis @h 2966
          @c Date de fin de travaux pour les interventions urgentes */
      /** @r IMH50 @d 03/04/12 @a ISAT.ST @v IMH6.01.165 @s Extranet - Mantis @h 2697
          @c Ajout de fonction GetUnStartedTaskReason */
      /** @r IMH49 @d 30/03/12 @a ISAT.ST @v IMH6.01.165 @s Extranet - Mantis @h 3208 @c Ajout auto de PV */
      /** @r IMH48 @d 28/03/12 @a ISAT.ST @v IMH6.01.165 @s Extranet - Mantis @h 1479 @c Trace modification */
      /** @r IMH47 @d 28/03/12 @a ISAT.ST @v IMH6.01.165 @s Extranet - Mantis @h 2938
          @c Ajout ListAllDocAttachmentService */
      /** @r IMH46 @d 20/03/12 @a ISAT.ST @v IMH6.01.165 @s Extranet - Mantis @h 2862
          @c Utilisation du codeunit 50202
          @c InterfaceSetup en local
          @c Ajout RemoveDocument */
      /** @r IMH45 @d 16/03/12 @a ISAT.EBA @v IMH6.01.165 @s Extranet @c Gestion TH … 0 */
      /** @r IMH44 @d 15/03/12 @a ISAT.EBA @v IMH6.01.165 @s Extranet @c Gestion activit‚ corbeille … la modification de l'adresse MEO */
      /** @r IMH43 @d 14/03/12 @a ISAT.PC @v IMH6.01.165 @s Extranet @h 3039
          @c Facture non typ‚ en facture pour ‚viter l'int‚gration dans moteur de rapprochement */
      /** @r IMH42 @d 28/12/11 @a ISAT.ST @v IMH6.01.165 @s Extranet @h 1642 @c Gestion des codes tƒches ajout commentaire */
      /** @r IMH41 @d 22/12/11 @a ISAT.ST @v IMH6.01.165 @s Extranet @h 2100 @c D‚sactivation m‚thode GetEstimatedWorkRestartDate */
      /** @r IMH40 @d 17/12/11 @a ISAT.ST @v IMH6.01.165 @s Extranet @c Ajout GetInvoicesListWithRef */
      /** @r IMH39 @d 08/12/11 @a ISTA.ST @v IMH6.01.165 @s Extranet @c Filtre nø interaction … 0 enlev‚ */
      /** @r IMH38 @d 16/11/11 @a ISAT.EBA @v IMH6.01.165 @s Extranet @c Correctif */
      /** @r IMH37 @d 14/11/11 @a ISAT.ST @v IMH6.01.165 @s Interface Extranet @c Test date nulle */
      /** @r IMH36 @d 09/11/11 @a ISAT.ST @v IMH6.01.165 @s Interface Extranet Prestataire @c Conversion Word->PDF */
      /** @r IMH35 @d 08/11/11 @a ISAT.ST @v IMH6.01.165 @s Interface Extranet Prestataire
          @c Condition g‚n‚ration activit‚
          @c Suivi nø de facture fournisseur */
      /** @r IMH34 @d 20/10/11 @a ISAT.NFO @v IMH6.01.165 @s Interface Extranet Prestataire
          @c Ajout de GLOBALLANGUAGE(1036); en d‚but de fonctions webservice pour avoir les valeurs en fr  */
      /** @r IMH33 @d 08/10/11 @a ISAT.PC @v IMH6.01.165 @s Extranet
          @c Ajout fonction CreateTrayLineFromServHeader */
      /** @r IMH32 @d 05/10/11 @a ISAT.PC @v IMH6.01.165 @s Extranet @c Ajout fonction SaveBinaryDoc */
      /** @r IMH31 @d 26/09/11 @a ISAT.PC @v IMH6.01.165 @s Extranet @s Modifciation sur fonction GetUnrealizedIntervReason */
      /** @r IMH30 @d 24/09/11 @a ISAT.PC @v IMH6.01.165 @s Extranet
          @s Ajout fonction GetInterfaceSetup
          @c Modification de la fonction AddComment */
      /** @r IMH29 @d 21/09/11 @a ISAT.EBA @v IMH6.01.165 @s Extranet @c Correctif */
      /** @r IMH28 @d 05/09/11 @a ISAT.ST @v IMH6.01.165 @s Interface Extranet Prestataire @c gestion des fichiers */
      /** @r IMH27 @d 02/09/11 @a ISAT.ST @v IMH6.01.165 @s Interface Extranet Prestataire @c Gestion date replanification */
      /** @r IMH26 @d 24/08/11 @a ISAT.EB @v IMH6.01.165 @s Interface Extranet Prestataire @c Fonction CreateTrayLine
          @c Cr‚ation d'une ligne d'activit‚ corbeille */
      /** @r IMH25 @d 24/08/11 @a ISAT.EB @v IMH6.01.165 @s Interface Extranet Prestataire @c Fonction CreateAdvComment
          @c Cr‚ation de commentaires sur l'intervention avec gestion de l'ordre de tri */
      /** @r IMH24 @d 19/08/11 @a ISAT.EB @v IMH6.01.165 @s Interface Extranet Prestataire @h 652
          @c Fonction ListDocAttachment
          @c Liste des piŠces jointes d'une intervention  */
      /** @r IMH23 @d 19/08/11 @a ISAT.EB @v IMH6.01.165 @s Interface Extranet Prestataire @h 653
          @c Fonction GetDocumentBinaryContent
          @c R‚cup‚ration du contenu binaire d'un document */
      /** @r IMH22 @d 16/08/11 @a ISAT.EB @v IMH6.01.165 @s Interface Extranet Prestataire @h 652
          @c Fonction ListDocumentToQualify
          @c Liste des documents en attente de qualification */
      /** @r IMH21 @d 04/08/11 @a ISAT.EB @v IMH6.01.165 @s Interface Extranet Prestataire @h 688
          @c Fonction AddComment
          @c Ajout d'un commentaire */
      /** @r IMH20 @d 04/08/11 @a ISAT.EB @v IMH6.01.165 @s Interface Extranet Prestataire @h 697
          @c Fonction ConfirmRealizedInterv
          @c Intervention urgente - confirmation de traitement  */
      /** @r IMH19 @d 04/08/11 @a ISAT.EB @v IMH6.01.165 @s Interface Extranet Prestataire @h 698
          @c Fonction GetUnrealizedIntervReason
          @c Raison de non traitement d'une intervention urgente */
      /** @r IMH18 @d 04/08/11 @a ISAT.EB @v IMH6.01.165 @s Interface Extranet Prestataire @h 965
          @c Fonction GetRealWorkRestartDate
          @c Transmission PV de reprise des travaux */
      /** @r IMH17 @d 04/08/11 @a ISAT.EB @v IMH6.01.165 @s Interface Extranet Prestataire @h 964
          @c Fonction GetEstimatedWorkRestartDate
          @c Confirmation de contact Client pour date de reprise */
      /** @r IMH16 @d 04/08/11 @a ISAT.EB @v IMH6.01.165 @s Interface Extranet Prestataire @h 963
          @c Fonction AddInvoice
          @c Ajout d'une facture */
      /** @r IMH15 @d 04/08/11 @a ISAT.EB @v IMH6.01.165 @s Interface Extranet Prestataire @h 695
          @c Fonction SendPVEndTask
          @c PV de fin de travaux … transmettre */
      /** @r IMH14 @d 04/08/11 @a ISAT.EB @v IMH6.01.165 @s Interface Extranet Prestataire @h 696
          @c Fonction GetEndTaskDelayReason
          @c Raison retard de fin de travaux */
      /** @r IMH13 @d 19/08/11 @a ISAT.EB @v IMH6.01.165 @s Interface Extranet Prestataire @h 958
          @c Fonction ConfirmBeginTask
          @c Confirmation du d‚but des travaux  */
      /** @r IMH12 @d 19/08/11 @a ISAT.EB @v IMH6.01.165 @s Interface Extranet Prestataire @h 694
          @c Fonction PlanTask
          @c 0000694: Web Service SOAP : Travaux … planifier */
      /** @r IMH11 @d 19/08/11 @a ISAT.EB @v IMH6.01.165 @s Interface Extranet Prestataire @h 692
          @c Fonction ConfirmPreVisit
          @c Confirmation de r‚alisation de la pr‚-visite */
      /** @r IMH10 @d 19/08/11 @a ISAT.EB @v IMH6.01.165 @s Interface Extranet Prestataire @h 957
          @c Fonction DeclareUnrealizedPreVisit
          @c D‚claration de la "non r‚alisation de la pr‚-visite" */
      /** @r IMH09 @d 19/08/11 @a ISAT.EB @v IMH6.01.165 @s Interface Extranet Prestataire @h 690
          @c Fonction ContactBeneficiarie
          @c Contacter le soci‚taire (b‚n‚ficiaire) */
      /** @r IMH08 @d 19/08/11 @a ISAT.EB @v IMH6.01.165 @s Interface Extranet Prestataire @h 691
          @c Fonction GetUnplannedPreVisitReason
          @c Raison de non planification de pr‚-visite */
      /** @r IMH07 @d 19/08/11 @a ISAT.EB @v IMH6.01.165 @s Interface Extranet Prestataire @h 693
          @c Fonction AddQuote
          @c Ajouter un devis … une intervention */
      /** @r IMH06 @d 16/08/11 @a ISAT.EB @v IMH6.01.165 @s Interface Extranet Prestataire @h 687
          @c Fonction AddDocument
          @c Ajouter une piŠce jointe … une intervention */
      /** @r IMH05 @d 10/08/11 @a ISAT.EB @v IMH6.01.165 @s Interface Extranet Prestataire @h 946
          @c Fonction ValidateNotification
          @c Valider une notification */
      /** @r IMH04 @d 10/08/11 @a ISAT.EB @v IMH6.01.165 @s Interface Extranet Prestataire @h 948
          @c Fonction UpdatePlace
          @c Modifier le lieu d'une intervention */
      /** @r IMH03 @d 10/08/11 @a ISAT.EB @v IMH6.01.165 @s Interface Extranet Prestataire @h 685
          @c Fonction UpdateContact
          @c Modifier le contact … une intervention */
      /** @r IMH02 @d 10/08/11 @a ISAT.EB @v IMH6.01.165 @s Interface Extranet Prestataire @h 684
          @c Fonction AddContact
          @c Ajouter un contact … une intervention */
      /** @r IMH01 @d 10/08/11 @a ISAT.EB @v IMH6.01.165 @s Interface Extranet Prestataire @h 654
          @c Fonction UpdateDocumentQualification
          @c Qualification d'un document + liaison … une intervention */
      /** @r IMH00 @d 10/08/11 @a ISAT.EB @v IMH6.01.165 @s Interface Extranet Prestataire
          @c cr‚ation */
    }
    END.
  }
}