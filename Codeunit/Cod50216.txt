OBJECT Codeunit 50216 EDM Sent Doc. Val. Act.
{
  OBJECT-PROPERTIES
  {
    Date=20/09/12;
    Time=12:00:00;
    Modified=Yes;
    Version List=IMH6.01,GED;
  }
  PROPERTIES
  {
    TableNo=8016720;
    OnRun=VAR
            lEAISentMQBuffer@1100281000 : TEMPORARY Record 8016720;
          BEGIN

            lEAISentMQBuffer := Rec;
            Code(lEAISentMQBuffer);
            lEAISentMQBuffer.CALCFIELDS("XML Source");
            "XML Source" := lEAISentMQBuffer."XML Source";
            Rec := lEAISentMQBuffer;
          END;

  }
  CODE
  {
    VAR
      InterfaceSetup@1100281001 : Record 50139;
      NASHandler@1100281000 : Codeunit 8016720;
      EAIExchangeTypeMgt@1100281002 : Codeunit 8016712;
      EDMManagement@1100281003 : Codeunit 50214;

    PROCEDURE Code@1100281000(VAR pEAISentMQBuffer@1100281000 : TEMPORARY Record 8016720);
    VAR
      lExchangeType@1100281017 : Record 8016717;
      lReturnExchangeType@1100281016 : Record 8016719;
      lEAIMQBufferMgt@1100281001 : Codeunit 8016708;
      lwinHTTPService@1100281014 : Automation "{662901FC-6951-4854-9EB2-D9A2570F2B2E} 5.1:{2087C2F4-2CEF-4953-A8AB-66779B670495}:'Microsoft WinHTTP Services, version 5.1'.WinHttpRequest";
      lXmlDoc@1100281011 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lXmlDocResponse@1100281004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lInStream@1100281007 : InStream;
      Error001@1100281018 : TextConst 'ENU=No %1 found.;FRA=Aucun %1 trouv‚.';
      Error002@1100281002 : TextConst 'ENU=Web Service Error;FRA=Erreur Web Service';
      lOutStream@1100281003 : OutStream;
    BEGIN
      InterfaceSetup.GET;
      IF ISCLEAR(lwinHTTPService) THEN
        CREATE(lwinHTTPService);

      IF NOT EAIExchangeTypeMgt.GetExchangeTypePerSendMQ(pEAISentMQBuffer,lReturnExchangeType) THEN
        ERROR(Error001,lReturnExchangeType.TABLECAPTION);

      CREATE(lXmlDoc);
      pEAISentMQBuffer.CALCFIELDS("XML Source");
      pEAISentMQBuffer."XML Source".CREATEINSTREAM(lInStream);
      lXmlDoc.load(lInStream);

      //<<IMH03.PC
      IF lXmlDoc.text = 'TRUE' THEN BEGIN
        EXIT;
      END;
      //>>IMH03.PC

      lExchangeType.GET(lExchangeType.Type::Outbound,lReturnExchangeType."EAI Exchange Type Code");
      lExchangeType.TESTFIELD("Outgoing Queue Label");
      lwinHTTPService.Open('POST',lExchangeType."Outgoing Queue Label",0);
      lwinHTTPService.SetRequestHeader('Content-type','text/xml; charset=utf-8');
      lwinHTTPService.SetRequestHeader('SOAPAction','http://tempuri.org/IGedService/AjoutLotFichierDepuisSystemeFichier');
      //The last parameter set to zero allows to wait till webservice finishes
      lwinHTTPService.SetTimeouts(10000,10000,10000,0);

      lwinHTTPService.Send(lXmlDoc);
      CLEAR(lInStream);

      IF NOT lwinHTTPService.WaitForResponse(60) THEN BEGIN
        ERROR('Request timed out.');
      END;

      CREATE(lXmlDocResponse);
      lXmlDocResponse.load(lwinHTTPService.ResponseStream);

      IF lwinHTTPService.Status = 200 THEN BEGIN
        DecodeResponse(lXmlDoc,lXmlDocResponse);
      END ELSE BEGIN
        CLEAR(pEAISentMQBuffer."Response XML Source");
        pEAISentMQBuffer."Response XML Source".CREATEOUTSTREAM(lOutStream);
        lXmlDocResponse.save(lOutStream);
        lEAIMQBufferMgt.TransferSendMQBufferToSendMQ(pEAISentMQBuffer);
        COMMIT;
        ERROR(lwinHTTPService.StatusText);
      END;
    END;

    LOCAL PROCEDURE DecodeResponse@1000000000(pXmlOrigin@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";pXmlResponse@1100281003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument");
    VAR
      lExcelBuffer@1100281006 : TEMPORARY Record 370;
      lEDMDocAttachement@1100281000 : Record 50182;
      lXMLNodeList@1000000005 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNodeList";
      lXMLNodeList2@1100281004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNodeList";
      lXMLNodeList3@1100281008 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNodeList";
      lXMLNodeList4@1100281011 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNodeList";
      lXMLNodeList5@1100281001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNodeList";
      lXmlDomElement@1000000010 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
      lXmlDomElement2@1000000007 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
      lXmlDomElement3@1100281005 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
      lXmlDomElement4@1100281009 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
      lXmlDomElement5@1100281012 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
      lFilterArray@1100281014 : ARRAY [6] OF Code[50];
      lFilterLevel@1100281015 : Integer;
      i@1000000006 : Integer;
      j@1100281007 : Integer;
      k@1100281010 : Integer;
      l@1100281013 : Integer;
      lCheckNodeValue@1100281002 : Text[1024];
      lCheckNodeText@1100281016 : Text[1024];
    BEGIN

      lXMLNodeList := pXmlResponse.getElementsByTagName('a:ResultatDemandeIntegration');
      FOR i := 0 TO lXMLNodeList.length - 1 DO BEGIN
        lXmlDomElement := lXMLNodeList.item(i);
        lXMLNodeList2 := lXmlDomElement.childNodes;
        FOR j := 0 TO lXMLNodeList2.length - 1 DO BEGIN
          lXmlDomElement2 := lXMLNodeList2.item(j);

          CASE lXmlDomElement2.nodeName OF
            'a:CheminFichierComplet' : BEGIN
              lExcelBuffer."Row No." := i + 1;
              lExcelBuffer."Cell Value as Text" := FORMAT(lXmlDomElement2.text);
            END;
            'a:IdentificationDocumentGed' : BEGIN
              lXMLNodeList3 := lXmlDomElement2.childNodes;
              FOR k := 0 TO lXMLNodeList3.length - 1 DO BEGIN
                lXmlDomElement3 := lXMLNodeList3.item(k);
                CASE lXmlDomElement3.nodeName OF
                  'a:identifiantDocument' : BEGIN
                    lExcelBuffer.Comment := FORMAT(lXmlDomElement3.text);
                    lExcelBuffer.INSERT;
                  END;
                END;
              END;
            END;
          END;
        END;
      END;

      lXMLNodeList := pXmlOrigin.getElementsByTagName('ged:FichierAIntegrer');
      FOR i := 0 TO lXMLNodeList.length - 1 DO BEGIN
        lXmlDomElement := lXMLNodeList.item(i);
        lXMLNodeList2 := lXmlDomElement.childNodes;
        FOR j := 0 TO lXMLNodeList2.length - 1 DO BEGIN
          lXmlDomElement2 := lXMLNodeList2.item(j);
          CASE lXmlDomElement2.nodeName OF
            'ged:CheminFichierComplet' : BEGIN
              CLEAR(lExcelBuffer);
              lExcelBuffer.SETFILTER("Cell Value as Text",FORMAT(lXmlDomElement2.text));
              IF lExcelBuffer.FINDFIRST THEN BEGIN
              END;
            END;
            'ged:M‚taDonn‚es' : BEGIN
              FOR l := 1 TO 6 DO BEGIN
                lFilterArray[l] := '';
              END;
              lXMLNodeList3 := lXmlDomElement2.childNodes;
              // Niveau ged:MetadDonnee
              FOR k := 0 TO lXMLNodeList3.length - 1 DO BEGIN
                lXmlDomElement3 := lXMLNodeList3.item(k);
                lXMLNodeList4 := lXmlDomElement3.childNodes;
                FOR l := 0 TO lXMLNodeList4.length - 1 DO BEGIN
                  lXmlDomElement4 := lXMLNodeList4.item(l);
                  lCheckNodeValue := lXmlDomElement4.nodeName;
                  lCheckNodeText := lXmlDomElement4.text;
                  CASE lXmlDomElement4.nodeName OF
                    'ged:Cl‚' : BEGIN
                      lFilterLevel := 0;
                      CASE FORMAT(lXmlDomElement4.text) OF
                        'Referente Table No.' : lFilterLevel := 1;
                        'Key Integer 1' : lFilterLevel := 2;
                        'Key Integer 2' : lFilterLevel := 3;
                        'Key Code 1' : lFilterLevel := 4;
                        'Key Code 2' : lFilterLevel := 5;
                        'Entry No.' : lFilterLevel := 6;
                      END;
                    END;
                    'ged:Valeur' : lFilterArray[lFilterLevel] := FORMAT(lXmlDomElement4.text);
                  END;
                END;
              END;
              lEDMDocAttachement.SETFILTER("Referent Table No.",lFilterArray[1]);
              lEDMDocAttachement.SETFILTER("Key Integer 1",lFilterArray[2]);
              lEDMDocAttachement.SETFILTER("Key Integer 2",lFilterArray[3]);
              lEDMDocAttachement.SETFILTER("Key Code 1",lFilterArray[4]);
              lEDMDocAttachement.SETFILTER("Key Code 2",lFilterArray[5]);
              lEDMDocAttachement.SETFILTER("Entry No.",lFilterArray[6]);
              IF lEDMDocAttachement.FINDFIRST THEN BEGIN
                lEDMDocAttachement."Send Document Date" := CURRENTDATETIME;
                lEDMDocAttachement."Send Document" := TRUE;
                lEDMDocAttachement."EDM ID" := lExcelBuffer.Comment;
                lEDMDocAttachement.MODIFY;
              END;
            END;
          END;
        END;
      END;
    END;

    BEGIN
    {
      /** @r IMH03 @d 19/09/12 @a ISAT.PC @v IMH6.01.P006 @s Interface GED @c Ajustement */
      /** @r IMH02 @d 16/07/12 @a ISAT.PC @v IMH6.01.P006 @s Interface GED @c Ajustement */
      /** @r IMH01 @d 18/07/12 @a ISAT.RC @v IMH6.01.P006 @s Interface GED @c cr‚ation */
    }
    END.
  }
}