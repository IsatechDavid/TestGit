OBJECT Codeunit 50239 DARVA Rcvd SD45 Matmut
{
  OBJECT-PROPERTIES
  {
    Date=28/03/14;
    Time=11:12:08;
    Modified=Yes;
    Version List=IMH6.01,MATMUT01,5005;
  }
  PROPERTIES
  {
    TableNo=8016721;
    OnRun=VAR
            lEAIRcvdMQBuffer@1100281000 : TEMPORARY Record 8016721;
          BEGIN
            lEAIRcvdMQBuffer := Rec;
            Rec.CALCFIELDS("XML Source");
            lEAIRcvdMQBuffer."XML Source" := "XML Source";
            Code(lEAIRcvdMQBuffer);
            Rec := lEAIRcvdMQBuffer;
          END;

  }
  CODE
  {
    VAR
      DARVAMgt@1100281001 : Codeunit 50150;
      DARVAXMLMgt@1100281002 : Codeunit 50154;
      TrayLineMgt@1100281000 : Codeunit 50050;
      XMLDom@1100281003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      InterfaceSetup@1100281004 : Record 50139;
      Text001@1100281007 : TextConst 'ENU=DARVA Cancel;FRA=Annulation Darva';
      Text002@1100281008 : TextConst 'ENU=Comments;FRA=Cf commentaire';
      Text003@1100281005 : TextConst 'ENU=GTA reference %1 doesn''t exists.;FRA=La r‚f‚rence GTA %1 n''est pas d‚finie.';
      Text004@1100281009 : TextConst 'ENU=It is impossible to get service header from service %1 with mission no. %2;FRA=Impossible d''idenfier la ligne produit du service %1 portant le nø de mission %2';
      Text012@1100281011 : TextConst 'ENU=Error in attachment rec research;FRA=Erreur de la recherche du flux piŠce jointe';
      Text013@1100281010 : TextConst 'ENU=Attachment difference between DT (%1) and DARVA request (%2);FRA=Diff‚rence de nb PJ entre les infos DT (%1) et la demande DARVA (%2)';
      TextUGS@1000000000 : TextConst 'FRA=UGS';
      DARVASetup@1000000001 : Record 50126;

    PROCEDURE Code@1100281000(VAR pEAIRcvdMQBuffer@1100281000 : Record 8016721);
    VAR
      lService@1100281009 : Record 50066;
      lServiceHeader@1100281008 : Record 5900;
      lEAIPartnerCrossRef@1100281004 : Record 8016748;
      lEAIAct@1100281017 : Record 8016706;
      lTrayLine@1100281016 : Record 50048;
      lCustomer@1100281018 : Record 18;
      lDARVAMission@1100281020 : Record 50168;
      lAdvCommentLineBuffer@1100281021 : TEMPORARY Record 50056;
      lEAIDocEntryMgt@1100281007 : Codeunit 8016707;
      lXmlDom@1100281002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lXmlDomElement@1100281005 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
      lXmlDomElement2@1100281015 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
      lXmlNodeList@1100281024 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNodeList";
      lXmlNodeList2@1100281006 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNodeList";
      lInStream@1100281001 : InStream;
      lCorporateNo@1100281012 : Code[20];
      lServiceRefNo@1100281011 : Code[20];
      lMissionOrder@1100281003 : Code[20];
      lDARVACorporateNo@1100281010 : Code[20];
      lCorporateRegionCode@1100281019 : Code[20];
      lResult@1100281023 : ' ,Quit,NoAttach,CreateMessage,ToTreat';
      lAttachNb@1100281022 : Integer;
      lDarvaSwitchSetup@1000000000 : Record 50180;
    BEGIN
      CREATE(lXmlDom);
      pEAIRcvdMQBuffer.CALCFIELDS("XML Source");
      pEAIRcvdMQBuffer."XML Source".CREATEINSTREAM(lInStream);
      lXmlDom.load(lInStream);
      InterfaceSetup.GET;
      DARVAXMLMgt.InitXMLDom(lXmlDom,XMLDom);

      lAttachNb := CheckAttachment(lXmlDom,pEAIRcvdMQBuffer,lResult);
      CASE lResult OF
        lResult::" " : ERROR(Text012);
        lResult::Quit : BEGIN
          pEAIRcvdMQBuffer."Not Change Status" := TRUE;
          EXIT;
        END;
        lResult::NoAttach : ;
        lResult::CreateMessage : BEGIN
          CreateAttachmentDemand(pEAIRcvdMQBuffer,lAttachNb);
          pEAIRcvdMQBuffer."Not Change Status" := TRUE;
          pEAIRcvdMQBuffer."Attachment Nb" := lAttachNb;
          EXIT;
        END;
        lResult::ToTreat : GetEAIRcvdPJ(pEAIRcvdMQBuffer,lXmlNodeList2);
      END;

      lXmlNodeList := XMLDom.getElementsByTagName('GR010101');
      lXmlDomElement := lXmlNodeList.item(0);

      lXmlDomElement2 := lXmlDomElement.selectSingleNode('SE0020101');

      lDARVACorporateNo := DARVAMgt.GetNodeValue(lXmlDomElement2,'DE00460101');
      IF NOT lEAIPartnerCrossRef.GetFromCrossRef(
               DATABASE::Customer,pEAIRcvdMQBuffer."EAI Partner Code",
               lDARVACorporateNo,lEAIPartnerCrossRef)
      THEN BEGIN
        ERROR(Text003,lDARVACorporateNo);
      END;

      lEAIPartnerCrossRef.TESTFIELD("Source No.");

      IF lCustomer.GET(lEAIPartnerCrossRef."Source No.") THEN BEGIN
        IF lCustomer."Parent Customer No." <> '' THEN BEGIN
          lCorporateNo := lCustomer."Parent Customer No."
        END ELSE BEGIN
          lCorporateNo := lCustomer."No.";
        END;
        //lCorporateRegionCode := lCustomer."Corporate Region Code";  //IMH02 D‚sactiv‚
      END ELSE BEGIN
        lCorporateNo := lEAIPartnerCrossRef."Source No.";
      END;
      //<<IMH02.ZW
      GetCorporateRegion(lXmlDomElement, lCorporateNo, lCorporateRegionCode);
      //>>IMH02 ZW

      lServiceRefNo := DARVAMgt.GetNodeValue(lXmlDomElement2,'DE00470101');
      lServiceRefNo := ReferenceNoWithOutZero(lServiceRefNo);
      lMissionOrder := DARVAMgt.GetNodeValue(lXmlDomElement2,'DE00530101');
      pEAIRcvdMQBuffer."Reference No." := lServiceRefNo;
      pEAIRcvdMQBuffer."Your Reference" := lMissionOrder;

      // Aiguillage
      lDARVAMission.SETCURRENTKEY("GTA Code", "Reference No.", "Mission No.");
      lDARVAMission.SETRANGE("GTA Code", DARVAXMLMgt.GetDARVAGTACode(XMLDom));
      lDARVAMission.SETRANGE("Reference No.", pEAIRcvdMQBuffer."Reference No.");
      lDARVAMission.SETRANGE("Mission No.", pEAIRcvdMQBuffer."Your Reference");
      IF lDARVAMission.FINDFIRST THEN BEGIN
        lServiceHeader.SETRANGE("No.", lDARVAMission."Service Header No.");
        IF lServiceHeader.FINDFIRST THEN BEGIN
          lDarvaSwitchSetup.SETCURRENTKEY("Message Code", "Message Version", "Message Release", "Message Sub-type");
          lDarvaSwitchSetup.SETRANGE("Message Code", pEAIRcvdMQBuffer."Message Code");
          lDarvaSwitchSetup.SETRANGE("Message Version", pEAIRcvdMQBuffer."Message Version");
          lDarvaSwitchSetup.SETRANGE("Message Release", pEAIRcvdMQBuffer."Message Release");
          lDarvaSwitchSetup.SETRANGE("Message Sub-type", pEAIRcvdMQBuffer."Message Sub-type");
          lDarvaSwitchSetup.SETRANGE("Line Type", lDarvaSwitchSetup."Line Type"::"Service Order Type");
          lDarvaSwitchSetup.SETRANGE("Service Order Type", lServiceHeader."Service Order Type");
          lDarvaSwitchSetup.SETRANGE("Corporate No.", lCorporateNo);
          lDarvaSwitchSetup.SETRANGE("Corporate Region Code", lCorporateRegionCode);
          lDarvaSwitchSetup.SETRANGE(Direction, lDarvaSwitchSetup.Direction::Receipt);

          IF lDarvaSwitchSetup.ISEMPTY THEN
            lDarvaSwitchSetup.SETRANGE("Corporate Region Code");

          IF lDarvaSwitchSetup.FINDFIRST THEN BEGIN
            IF pEAIRcvdMQBuffer."EAI Act Code" <>  lDarvaSwitchSetup."Act Code" THEN BEGIN
               pEAIRcvdMQBuffer."EAI Act Code" := lDarvaSwitchSetup."Act Code";
               pEAIRcvdMQBuffer."Not Change Status" := TRUE;
               EXIT;
            END;
          END;
        END;
      END;

      lTrayLine.INIT;
      lTrayLine."Service Reference No." := lServiceRefNo;
      lTrayLine."Mission No." := lMissionOrder;
      lTrayLine."Corporate No." := lCorporateNo;
      lTrayLine."DARAV Message ID" := pEAIRcvdMQBuffer."Message ID";
      lTrayLine."EAI Entry No." := pEAIRcvdMQBuffer."Entry No.";

      lEAIAct.GET(pEAIRcvdMQBuffer."EAI Act Type Code", pEAIRcvdMQBuffer."EAI Act Code");
      lEAIAct.TESTFIELD("Create Tray Line On Receive", TRUE); // cr‚ation activit‚ obligatoire pour ce message
      lService.SETCURRENTKEY("Reference No.", "Corporate No.");
      lService.SETFILTER("Reference No.",lServiceRefNo);
      lService.SETRANGE("Corporate No.",lCorporateNo);
      IF lCorporateRegionCode <> '' THEN BEGIN
        lService.SETRANGE("Corporate Region Code",lCorporateRegionCode);
      END;
      //<<IMH05.ACO
      //lService.FINDFIRST;
      IF NOT lService.FINDFIRST THEN BEGIN
        //<<IMH07
        //CreateErrorTrayLine(lTrayLine, lEAIAct, pEAIRcvdMQBuffer);
        CreateErrorTrayLine(lTrayLine, lEAIAct, pEAIRcvdMQBuffer, lService);
        //>>IMH07
        EXIT;
      END;
      //>>IMH05.ACO
      pEAIRcvdMQBuffer."Service No." := lService."Service No.";

      lServiceHeader.SETCURRENTKEY("Service No.");
      lServiceHeader.SETRANGE("Service No.",lService."Service No.");
      lServiceHeader.SETRANGE("Your Reference",lMissionOrder);

      IF lServiceHeader.ISEMPTY THEN BEGIN
        lDARVAMission.RESET;
        lDARVAMission.SETRANGE("Service No." , lService."Service No.");
        lDARVAMission.SETRANGE("Mission No.",lMissionOrder + '*');
        IF lDARVAMission.ISEMPTY THEN BEGIN
          lDARVAMission.SETRANGE("Mission No.",lMissionOrder);
          IF lDARVAMission.FINDFIRST THEN BEGIN
            lServiceHeader.GET(lServiceHeader."Document Type"::Invoice,lDARVAMission."Service Header No.");
          END ELSE BEGIN
            //<<IMH05.ACO
            //ERROR(Text004,lService."Service No.",lMissionOrder);
            //<<IMH07
            //CreateErrorTrayLine(lTrayLine, lEAIAct,pEAIRcvdMQBuffer);
            CreateErrorTrayLine(lTrayLine, lEAIAct,pEAIRcvdMQBuffer, lService);
            //>>IMH07
            EXIT;
            //>>IMH05.ACO
          END;
        END;
      END ELSE BEGIN
        lServiceHeader.FINDFIRST;
      END;

      pEAIRcvdMQBuffer."Service Header No." := lServiceHeader."No.";


      lEAIAct.GET(pEAIRcvdMQBuffer."EAI Act Type Code", pEAIRcvdMQBuffer."EAI Act Code");
      lEAIAct.TESTFIELD("Create Tray Line On Receive", TRUE);
      TrayLineMgt.InitTrayLine(lTrayLine);
      //<<IMH06
      TrayLineMgt.CreateTLFromServHeader(
        //lServiceHeader,lServiceHeader."Default Team Code",lEAIAct."Tray Line Task Code On Receive",FALSE);
        lServiceHeader,
        lServiceHeader.GetTeamByServiceTask(lServiceHeader, lEAIAct."Tray Line Task Code On Receive"),
        lEAIAct."Tray Line Task Code On Receive",FALSE);
      //>>IMH06
      lEAIDocEntryMgt.AddEntryFromRcvdBuffer(
        DATABASE::"Service Header",
        lServiceHeader."Document Type",lServiceHeader."No.",'',0,pEAIRcvdMQBuffer);

      pEAIRcvdMQBuffer.CALCFIELDS("XML Source");
      pEAIRcvdMQBuffer."XML Source".CREATEINSTREAM(lInStream);
      lXmlDom.load(lInStream);
      DARVAXMLMgt.InitXMLDom(lXmlDom,XMLDom);
      GetComments(XMLDom,lAdvCommentLineBuffer);
      SaveComments(lAdvCommentLineBuffer,lServiceHeader);

      // Partie piŠce jointe
      pEAIRcvdMQBuffer.CALCFIELDS("XML Source");
      pEAIRcvdMQBuffer."XML Source".CREATEINSTREAM(lInStream);
      lXmlDom.load(lInStream);
      CreateAttachmentFile(lServiceHeader,lXmlDom,lXmlNodeList2);
    END;

    PROCEDURE GetComments@1100281002(pXmlDom@1100281005 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";VAR pAdvCommentLine@1100281006 : Record 50056);
    VAR
      lXmlDomNodeList@1100281003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNodeList";
      lXmlDomElement2@1100281004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
      i@1100281000 : Integer;
      lLineNo@1100281008 : Integer;
    BEGIN
      lXmlDomNodeList := pXmlDom.getElementsByTagName('DE00080201');
      IF ISCLEAR(lXmlDomNodeList) THEN BEGIN
        EXIT;
      END;
      IF pAdvCommentLine.FINDLAST THEN BEGIN
        lLineNo := pAdvCommentLine."Line No.";
      END ELSE BEGIN
        lLineNo := 1;
      END;
      FOR i := 0 TO lXmlDomNodeList.length - 1 DO BEGIN
        lXmlDomElement2 := lXmlDomNodeList.item(i);
        pAdvCommentLine."Line No." := lLineNo + i;
        pAdvCommentLine.Comment := lXmlDomElement2.text;
        pAdvCommentLine.INSERT;
      END;
    END;

    PROCEDURE SaveComments@1100281001(VAR pAdvCommentLine@1100281000 : Record 50056;pServiceHeader@1100281001 : Record 5900);
    VAR
      lAdvCommentLine@1100281005 : Record 50056;
      lServiceCommentLine@1100281010 : Record 5906;
      lLineNo@1100281006 : Integer;
      lLastLine@1100281007 : Integer;
      lCommentLineCount@1100281008 : Integer;
      lCommentNbCountToAdd@1100281011 : Integer;
      lCommentNbCountActual@1100281012 : Integer;
      lDate@1100281009 : Date;
      lCommentToAdd@1100281013 : Text[250];
    BEGIN
      pAdvCommentLine.RESET;
      lCommentLineCount  := pAdvCommentLine.COUNT;
      IF lCommentLineCount = 0 THEN
        EXIT;

      //<<IMH03.ACO
      {
      // Calcul du nombre de caractŠre commentaires … ajouter
      lCommentNbCountToAdd := 0;
      pAdvCommentLine.FINDSET;
      REPEAT
        lCommentNbCountToAdd += STRLEN(pAdvCommentLine.Comment);
      UNTIL pAdvCommentLine.NEXT = 0;

      // V‚rification du nb de commentaire au niveau du champ contexte de la ligne de produit
      lCommentNbCountActual := 0;
      lServiceCommentLine.SETRANGE("Table Name",lServiceCommentLine."Table Name"::"Service Header");
      lServiceCommentLine.SETRANGE("Table Subtype",pServiceHeader."Document Type");
      lServiceCommentLine.SETRANGE("No.",pServiceHeader."No.");
      lServiceCommentLine.SETRANGE(Type,lServiceCommentLine.Type::General);
      lServiceCommentLine.SETRANGE("Table Line No.",0);
      lServiceCommentLine.SETRANGE("Line No.",-50012);
      IF lServiceCommentLine.FINDFIRST THEN BEGIN
        lCommentNbCountActual := STRLEN(lServiceCommentLine.Text);
      END;

      // 233 = 250 - 17 caractŠre de ' - Cf commentaire'
      // (lCommentLineCount - 1) = nb espace … ajouter entre chaque ligne
      IF lCommentNbCountToAdd + lCommentNbCountActual + (lCommentLineCount - 1) <= (250 - STRLEN(Text002)) THEN BEGIN
        pAdvCommentLine.FINDSET;
        REPEAT
          IF STRLEN(lCommentToAdd) = 0 THEN BEGIN
            lCommentToAdd := pAdvCommentLine.Comment;
          END ELSE BEGIN
            lCommentToAdd += ' ' + pAdvCommentLine.Comment;
          END;
        UNTIL pAdvCommentLine.NEXT = 0;
        IF lCommentNbCountActual = 0 THEN BEGIN
          lServiceCommentLine."Table Name" := lServiceCommentLine."Table Name"::"Service Header";
          lServiceCommentLine."Table Subtype" := pServiceHeader."Document Type";
          lServiceCommentLine."No." := pServiceHeader."No.";
          lServiceCommentLine.Type := lServiceCommentLine.Type::General;
          lServiceCommentLine."Table Line No." := 0;
          lServiceCommentLine."Line No." := -50012;
          lServiceCommentLine.Text := lCommentToAdd;
          lServiceCommentLine.INSERT;
        END ELSE BEGIN
          lServiceCommentLine.Text += ' ' + lCommentToAdd;
          lServiceCommentLine.MODIFY;
        END;
        pAdvCommentLine.DELETEALL;
      END ELSE BEGIN
        IF lCommentNbCountActual = 0 THEN BEGIN
          lServiceCommentLine."Table Name" := lServiceCommentLine."Table Name"::"Service Header";
          lServiceCommentLine."Table Subtype" := pServiceHeader."Document Type";
          lServiceCommentLine."No." := pServiceHeader."No.";
          lServiceCommentLine.Type := lServiceCommentLine.Type::General;
          lServiceCommentLine."Table Line No." := 0;
          lServiceCommentLine."Line No." := -50012;
          lServiceCommentLine.Text := Text002;
          lServiceCommentLine.INSERT;
        END ELSE BEGIN
          IF lCommentNbCountActual + 3 + STRLEN(Text002) <= 250 THEN BEGIN
            lServiceCommentLine.Text += ' - ' + Text002;
            lServiceCommentLine.MODIFY;
          END;
        END;
      }

      DARVASetup.GET;
      //>>IMH03.ACO

        lAdvCommentLine.SETRANGE("Source Table ID",DATABASE::"Service Header");
        lAdvCommentLine.SETRANGE("Source No.",pServiceHeader."Service No.");
        lAdvCommentLine.SETRANGE("Source No. 2",pServiceHeader."No.");
        lAdvCommentLine.SETRANGE("Source No. 3",0);
        IF lAdvCommentLine.FINDLAST THEN BEGIN
          lLineNo := lAdvCommentLine."Line No." + 10000
        END ELSE BEGIN
          lLineNo := 10000;
        END;

        lLastLine := lLineNo + lCommentLineCount -1;
        lDate := TODAY;
        pAdvCommentLine.FIND('+');
        REPEAT
          lAdvCommentLine := pAdvCommentLine;
          lAdvCommentLine."Source Table ID" := DATABASE::"Service Header";
          lAdvCommentLine."Source No." := pServiceHeader."Service No.";
          lAdvCommentLine."Source No. 2" := pServiceHeader."No.";
          lAdvCommentLine."Source No. 3" := 0;
          lAdvCommentLine."Line No." := lLineNo;
          IF lLineNo <> lLastLine THEN
            lAdvCommentLine."Attached To Line No." := lLastLine
          ELSE
            lAdvCommentLine.Date := lDate;
          lAdvCommentLine.Reception := lAdvCommentLine.Reception::Darva;
          //<<IMH03.ACO
          //lAdvCommentLine.Code := '';
          lAdvCommentLine.Code := DARVASetup."SD45 Comment Code";
          //>>IMH03.ACO
          lAdvCommentLine.INSERT(TRUE);

          //<<IMH03.ACO
          lAdvCommentLine."Creation User ID" := pServiceHeader."Corporate No.";
          lAdvCommentLine.MODIFY;
          //>>IMH03.ACO
          lLineNo += 1;
        UNTIL pAdvCommentLine.NEXT(-1) = 0;
        pAdvCommentLine.DELETEALL;
      //<<IMH03.ACO
      //END;
      //>>IMH03.ACO
    END;

    PROCEDURE CreateAttachmentFile@1100281012(pServiceHeader@1100281016 : Record 5900;pXMLDom@1100281001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";VAR pXmlNodeList@1100281018 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNodeList");
    VAR
      lXMLDOMNode@1100281017 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lAdoStream@1100281007 : Automation "{2A75196C-D9EB-4129-B803-931327F72D5C} 2.8:{00000566-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.8 Library'.Stream";
      lTempFile@1100281003 : File;
      lFileName@1100281002 : Text[250];
      lDocAttach@1100281008 : Record 50021;
      lSourceAttchMgt@1100281006 : Codeunit 50003;
      lAttachmentTemp@1100281005 : TEMPORARY Record 5062;
    BEGIN

      lXMLDOMNode := pXMLDom.getElementsByTagName('ns2:formatPdf').item(0);
      IF ISCLEAR(lXMLDOMNode) THEN BEGIN
        EXIT;
      END;

      lXMLDOMNode.dataType := 'bin.base64';
      CREATE(lAdoStream);
      lAdoStream.Open;
      lAdoStream.Type := 1;
      lAdoStream.Write(lXMLDOMNode.nodeTypedValue);
      lTempFile.CREATETEMPFILE;
      lFileName := COPYSTR(lTempFile.NAME,1,STRLEN(lTempFile.NAME) - 4) + '.pdf';
      lTempFile.CLOSE;
      lAdoStream.SaveToFile(lFileName);
      lAdoStream.Close;

      WITH lDocAttach DO BEGIN
        SETCURRENTKEY("Service Document No.","Service Intervention Line No.","Intervention Quote Line No.");
        SETRANGE("Service Document No.",pServiceHeader."No.");
        lDocAttach."Key Integer 1" := 0;
        lDocAttach."Key Integer 2" := 0;
        lDocAttach."Key Code 1" := '';
        lDocAttach."Key Code 2" := '';
        Description := Text001;
      END;
      lSourceAttchMgt.CreateAttachment(lDocAttach,lFileName,lAttachmentTemp);

      CreateAttachment(pServiceHeader,pXmlNodeList);
    END;

    LOCAL PROCEDURE ReferenceNoWithOutZero@1100281004(pServiceRefNo@1100281000 : Code[20]) rValue : Code[20];
    BEGIN
      rValue := '';
      rValue := DARVAMgt.ReferenceNoWithOutZero(pServiceRefNo);
    END;

    LOCAL PROCEDURE CheckAttachment@1000000002(VAR pXmlDom@1000000001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";pEAIRcvdMQBuffer@1000000003 : Record 8016721;VAR pResult@1000000005 : ' ,Quit,NoAttach,CreateMessage,ToTreat') rValue : Integer;
    VAR
      lEAIMQBufferMgt@1000000000 : Codeunit 8016708;
      lXmlNodeList@1000000013 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNodeList";
      lText001@1000000004 : TextConst 'ENU=Attachment Rec with ID %1 was error.;FRA=Le flux PJ portant l''ID %1 est en erreur.';
    BEGIN
      rValue := 0;
      pResult := pResult::" ";

      lXmlNodeList := pXmlDom.getElementsByTagName('ns2:pieceJointe');

      rValue := lXmlNodeList.length;
      IF rValue = 0 THEN BEGIN
        pResult := pResult::NoAttach;
        EXIT;
      END;

      // V‚rification de la pr‚sence du flux DARVA_PJ
      // pStep : 0 = Generate / 1 = Validation
      // pStatus : 0 = Non trait‚ / 1 = Trait‚ / 2 = Erreur / 3 = Test unitaire
      IF lEAIMQBufferMgt.CheckIfActExistsToNextAct(pEAIRcvdMQBuffer,FALSE,'','',TRUE,1,TRUE,1) THEN BEGIN
        pResult := pResult::ToTreat;
        EXIT;
      END;

      IF lEAIMQBufferMgt.CheckIfActExistsToNextAct(pEAIRcvdMQBuffer,FALSE,'','',FALSE,0,TRUE,2) THEN BEGIN
        ERROR(lText001,pEAIRcvdMQBuffer."Message ID");
      END;

      IF lEAIMQBufferMgt.CheckIfActExistsToNextAct(pEAIRcvdMQBuffer,FALSE,'','',FALSE,0,FALSE,2) THEN BEGIN
        pResult := pResult::Quit;
        EXIT;
      END ELSE BEGIN
        pResult := pResult::CreateMessage;
        EXIT;
      END;
    END;

    LOCAL PROCEDURE CreateAttachmentDemand@1000000004(pEAIRcvdMQBuffer@1000000000 : Record 8016721;pAttachNb@1100281000 : Integer);
    VAR
      lEAIRcvdMQBuffer@1000000001 : Record 8016721;
      lEAIAct@1000000002 : Record 8016706;
      lEAIMQBufferMgt@1000000003 : Codeunit 8016708;
    BEGIN
      lEAIRcvdMQBuffer := pEAIRcvdMQBuffer;
      WITH lEAIRcvdMQBuffer DO BEGIN
        lEAIAct.GET(pEAIRcvdMQBuffer."EAI Act Type Code",pEAIRcvdMQBuffer."EAI Act Code");
        lEAIAct.TESTFIELD("Next Act Type Code Af. Val.");
        lEAIAct.TESTFIELD("Next Act Code After Validation");
        "EAI Act Type Code" := lEAIAct."Next Act Type Code Af. Val.";
        "EAI Act Code" := lEAIAct."Next Act Code After Validation";
        "Entry No." := '';
        IF lEAIAct.GET("EAI Act Type Code","EAI Act Code") THEN BEGIN
          "Act Priority" := lEAIAct."Act Priority";
        END;
        "Date Creation" := WORKDATE;
        "Time Creation" := TIME;
        "User Creation" := USERID;
        Step := Step::Generation;
        Status := Status::Unprocessed;
        "Attachment Nb" := pAttachNb;
        "Origin Entry No." := pEAIRcvdMQBuffer."Entry No.";
        "Origin EAI Act Code" := pEAIRcvdMQBuffer."EAI Act Code";
        CLEAR("XML Source");
        CLEAR("Response XML Source");
        INSERT;
        lEAIMQBufferMgt.InsertReceivedBufferToMQCode("EAI MQ Code",lEAIRcvdMQBuffer);
        DELETE;
      END;
    END;

    LOCAL PROCEDURE CreateAttachment@1000000011(pServiceHeader@1100281002 : Record 5900;VAR pXmlNodeList@1100281000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNodeList");
    VAR
      lAttachmentTemp@1000000000 : Record 5062;
      lDocumentAttachmentBuffer@1000000007 : TEMPORARY Record 50021;
      lSourceAttchMgt@1000000003 : Codeunit 50003;
      lXmlDOMNode@1000000016 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lXmlDOMNode1@1000000015 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lXmlDOMNode2@1000000014 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lAdoStream@1000000012 : Automation "{2A75196C-D9EB-4129-B803-931327F72D5C} 2.8:{00000566-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.8 Library'.Stream";
      lTempFile@1000000011 : File;
      lLength@1000000002 : Integer;
      i@1000000001 : Integer;
      j@1100281001 : Integer;
      lMetadata@1000000020 : ARRAY [5] OF Text[50];
      lFileName@1000000006 : Text[1024];
    BEGIN
      IF ISCLEAR(pXmlNodeList) THEN BEGIN
        EXIT;
      END;

      lLength := pXmlNodeList.length;
      IF lLength = 0 THEN BEGIN
        EXIT;
      END;

      FOR i := 1 TO lLength DO BEGIN
        lXmlDOMNode := pXmlNodeList.item(i - 1);
        FOR j := 1 TO 5 DO BEGIN
          lMetadata[j] := '';
        END;

        // R‚cup‚ration des Metadata
        lXmlDOMNode1 := lXmlDOMNode.selectSingleNode('ns2:metadata');
        IF NOT ISCLEAR(lXmlDOMNode1) THEN BEGIN
          // ID PJ
          lXmlDOMNode2 := lXmlDOMNode1.selectSingleNode('ns2:idPJ');
          IF NOT ISCLEAR(lXmlDOMNode2) THEN BEGIN
            lMetadata[1]  := lXmlDOMNode2.text;
          END;
          // LIBELLE PJ
          lXmlDOMNode2 := lXmlDOMNode1.selectSingleNode('ns2:libellePJ');
          IF NOT ISCLEAR(lXmlDOMNode2) THEN BEGIN
            lMetadata[2]  := lXmlDOMNode2.text;
          END;
          // NATURE PJ
          lXmlDOMNode2 := lXmlDOMNode1.selectSingleNode('ns2:naturePJ');
          IF NOT ISCLEAR(lXmlDOMNode2) THEN BEGIN
            lMetadata[3]  := lXmlDOMNode2.text;
          END;
          // FORMAT PJ
          lXmlDOMNode2 := lXmlDOMNode1.selectSingleNode('ns2:formatPJ');
          IF NOT ISCLEAR(lXmlDOMNode2) THEN BEGIN
            lMetadata[4]  := lXmlDOMNode2.text;
          END;
          // VERSION PJ
          lXmlDOMNode2 := lXmlDOMNode1.selectSingleNode('ns2:versionPJ');
          IF NOT ISCLEAR(lXmlDOMNode2) THEN BEGIN
            lMetadata[5]  := lXmlDOMNode2.text;
          END;
        END;

        lXmlDOMNode1 := lXmlDOMNode.selectSingleNode('ns2:fluxPJ');
        IF NOT ISCLEAR(lXmlDOMNode1) THEN BEGIN
          lXmlDOMNode1.dataType := 'bin.base64';
          CLEAR(lAdoStream);
          CREATE(lAdoStream);
          lAdoStream.Open;
          lAdoStream.Type := 1;
          lAdoStream.Write(lXmlDOMNode1.nodeTypedValue);
          lTempFile.CREATETEMPFILE;
          lFileName := COPYSTR(lTempFile.NAME,1,STRLEN(lTempFile.NAME) - 4) + '.' + lMetadata[4];
          lTempFile.CLOSE;
          lAdoStream.SaveToFile(lFileName);
          lAdoStream.Close;
        END;

        // sauvegarde Document Attachment
        lDocumentAttachmentBuffer.SETRANGE("Service Document No.",pServiceHeader."No.");
        lDocumentAttachmentBuffer."Darva ID" := lMetadata[1];
        lDocumentAttachmentBuffer.Description := lMetadata[2];
        lDocumentAttachmentBuffer."Description 2" := lMetadata[3];
        lDocumentAttachmentBuffer."File Extension" := lMetadata[4];
        lDocumentAttachmentBuffer."Darva Attachment Version" := lMetadata[5];
        lSourceAttchMgt.CreateAttachment(lDocumentAttachmentBuffer,lFileName,lAttachmentTemp);
      END;
    END;

    PROCEDURE GetEAIRcvdPJ@1000000005(pEAIRcvdMQBuffer@1000000000 : Record 8016721;VAR pXmlNodeList@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNodeList");
    VAR
      lEAIRcvdMQBufferPJ@1000000006 : Record 8016721;
      lEAIAct@1000000005 : Record 8016706;
      lEAIMQBufferMgt@1000000007 : Codeunit 8016708;
      lXmlDom@1000000004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lLength@1000000002 : Integer;
      lInStream@1000000001 : InStream;
    BEGIN
      CLEAR(pXmlNodeList);

      // On r‚cupŠre le flux DARVA_PJ
      lEAIAct.GET(pEAIRcvdMQBuffer."EAI Act Type Code",pEAIRcvdMQBuffer."EAI Act Code");
      lEAIMQBufferMgt.GetSpecificAct(
        pEAIRcvdMQBuffer,
        lEAIAct."Next Act Type Code Af. Val.",lEAIAct."Next Act Code After Validation",
        lEAIRcvdMQBufferPJ);

      lEAIRcvdMQBufferPJ.CALCFIELDS("Response XML Source");
      lEAIRcvdMQBufferPJ."Response XML Source".CREATEINSTREAM(lInStream);
      CREATE(lXmlDom);
      lXmlDom.load(lInStream);
      lEAIRcvdMQBufferPJ.DELETE;
      pXmlNodeList := lXmlDom.getElementsByTagName('ns2:pieceJointe');
      lLength := pXmlNodeList.length;
      IF lLength = 0 THEN BEGIN
        EXIT;
      END;

      IF pEAIRcvdMQBuffer."Attachment Nb" <> lLength THEN BEGIN
        ERROR(Text013,pEAIRcvdMQBuffer."Attachment Nb",lLength);
      END;
    END;

    PROCEDURE GetCorporateRegion@1000000012(VAR pXmlDomElement@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";pCorporateNo@1000000005 : Code[20];VAR pCorporateRegionCode@1000000004 : Code[10]);
    VAR
      lXmlDomElement@1000000001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
      lXmlDomElement2@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
      lCorporateRegion@1000000008 : Record 50058;
      lManagerCode@1000000007 : Text[80];
      lPostCode@1000000006 : Text[30];
    BEGIN
      //IMH02 ZW
      lXmlDomElement := pXmlDomElement.selectSingleNode('SE0030401');
      lManagerCode := DARVAMgt.GetNodeValue(lXmlDomElement,'DE00560101');  //Code gestionnaire

      //si code = 1, MATMUT PGS
      IF STRLEN(lManagerCode) = 1 THEN BEGIN
        lXmlDomElement2 := lXmlDomElement.selectSingleNode('DCC0500103');
        lPostCode := DARVAMgt.GetNodeValue(lXmlDomElement2,'DE05390101');  //Code postal r‚gion PGS
        lCorporateRegion.SETRANGE("Corporate No.", pCorporateNo);
        lCorporateRegion.SETRANGE("Post Code", lPostCode);
        lCorporateRegion.FINDFIRST;
        pCorporateRegionCode := lCorporateRegion."Region Code";
      END ELSE BEGIN
        //<<IMH04.ACO
        //pCorporateRegionCode := TextUGS + COPYSTR(lManagerCode, 3);
        //lCorporateRegion.GET(pCorporateNo,pCorporateRegionCode);
        pCorporateRegionCode := lManagerCode;
        IF NOT lCorporateRegion.GET(pCorporateNo,pCorporateRegionCode) THEN BEGIN
          pCorporateRegionCode := TextUGS + COPYSTR(lManagerCode, 3);
          lCorporateRegion.GET(pCorporateNo,pCorporateRegionCode);
        END;
        //>>IMH04.ACO
      END;
    END;

    LOCAL PROCEDURE CreateErrorTrayLine@1000000000(VAR pTrayLine@1000000000 : Record 50048;pEAIAct@1000000001 : Record 8016706;VAR pEAIRcvdMQBuffer@1000000002 : Record 8016721;pService@1000000003 : Record 50066);
    VAR
      lFilterTeamTrayTask@1000000004 : TEMPORARY Record 50129;
      lTeamCode@1000000005 : Code[10];
    BEGIN
      //IMH05
      pEAIAct.TESTFIELD("Gen. Tray Line On Sent Error", TRUE);
      pEAIAct.TESTFIELD("Tray Line Task Code On Error");
      //<<IMH07
      //pEAIAct.TESTFIELD("Team Code On Error");
      IF pEAIAct."Team Code On Error" = '' THEN BEGIN
        IF pService."Service No." <> '' THEN BEGIN
          lFilterTeamTrayTask."Corporate No." := pService."Corporate No.";
          lFilterTeamTrayTask."Corporate Region Code" := pService."Corporate Region Code";
        END;
        lTeamCode := TrayLineMgt.GetTeamByTask(pEAIAct."Tray Line Task Code On Error", lFilterTeamTrayTask, '');
        IF lTeamCode = '' THEN
          pEAIAct.TESTFIELD("Team Code On Error");
      END ELSE
        lTeamCode := pEAIAct."Team Code On Error";
      //>>IMH07

      TrayLineMgt.InitTrayLine(pTrayLine);
      pTrayLine.SETRANGE("Linked To Table", pTrayLine."Linked To Table"::ServiceHeader);
      //<<IMH07
      //TrayLineMgt.CreateTLFromTL(pTrayLine, pEAIAct."Team Code On Error", pEAIAct."Tray Line Task Code On Error", FALSE);
      TrayLineMgt.CreateTLFromTL(pTrayLine, lTeamCode, pEAIAct."Tray Line Task Code On Error", FALSE);
      //>>IMH07

      //Flux SD45
      TrayLineMgt.GetResultLine(pTrayLine);
      pEAIRcvdMQBuffer.CALCFIELDS("XML Source");
      pTrayLine.Attachment := pEAIRcvdMQBuffer."XML Source";

      pTrayLine."EAI Partner Code" := pEAIRcvdMQBuffer."EAI Partner Code";
      pTrayLine."EAI Entry No." := pEAIRcvdMQBuffer."Entry No.";
      pTrayLine.MODIFY(FALSE);
    END;

    BEGIN
    {
      /** @r IMH07 @d 26/03/14 @a ISAT.ZW @v IMH6.01.5005 @s Reorganisation DPS @h 5005
          @c Ajout la gestion de team code par defaut */
      /** @r IMH06 @d 24/02/14 @a ISAT.ZW @v IMH6.01.4985 @s R‚organisation DPS @c Gestion de code corbeille service par d‚faut */
      /** @r IMH05 @d 17/10/13 @a ISAT.ACO @v IMH .01.348 @s DARVA MATMUT Lot 1 @h 4768
          @c Ajout activit‚ corbeille lors d'une erreur sur service introuvable
          @c Ajout activit‚ corbeille lors d'une erreur sur nø mission introuvable */
      /** @r IMH04 @d 06/09/13 @a ISAT.ACO @v IMH6.01.348 @s DARVA MATMUT Lot 1 @h 4708
          @c Le code de l'UGS est correspond exactement … la balise code gestionnaire (Pas de concat‚nation n‚cessaire) */
      /** @r IMH03 @d 09/09/13 @a ISAT.ACO @v IMH6.01.350 @s DARVA MATMUT Lot 1 @h 4703
          @c Suppression gestion commentaire dans contexte */
      /** @r IMH02 @d 02/08/13 @a ISAT.ZW @v IMH6.01.348 @s DARVA MATMUT Lot 1 @c Gestion gestionnaire + r‚gion */
      /** @r IMH01 @d 25/07/13 @a ISAT.ACO @v IMH6.01.348 @s DARVA Matmut Lot1 t @s Cr‚ation */
    }
    END.
  }
}