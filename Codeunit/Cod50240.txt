OBJECT Codeunit 50240 DARVA Rcvd SD99 Matmut
{
  OBJECT-PROPERTIES
  {
    Date=17/04/14;
    Time=10:09:52;
    Modified=Yes;
    Version List=IMH6.01,MATMUT01,,5005,5060;
  }
  PROPERTIES
  {
    TableNo=8016721;
    OnRun=VAR
            lEAIRcvdMQBuffer@1100281000 : TEMPORARY Record 8016721;
          BEGIN
            lEAIRcvdMQBuffer.COPY(Rec,TRUE);
            Rec.CALCFIELDS("XML Source");
            lEAIRcvdMQBuffer."XML Source" := "XML Source";
            Code(lEAIRcvdMQBuffer);
            COPY(lEAIRcvdMQBuffer,TRUE);
          END;

  }
  CODE
  {
    VAR
      DARVAMgt@1100281001 : Codeunit 50150;
      DARVAXMLMgt@1100281002 : Codeunit 50154;
      TrayLineMgt@1100281004 : Codeunit 50050;
      XmlDom@1100281000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      ServiceHeader@1100281005 : Record 5900;
      Text003@1100281006 : TextConst 'ENU=GTA reference %1 doesn''t exists.;FRA=La r‚f‚rence GTA %1 n''est pas d‚finie.';
      Text012@1100281008 : TextConst 'ENU=Error in attachment rec research;FRA=Erreur de la recherche du flux piŠce jointe';
      Text013@1100281003 : TextConst 'ENU=Attachment difference between DT (%1) and DARVA request (%2);FRA=Diff‚rence de nb PJ entre les infos DT (%1) et la demande DARVA (%2)';
      TextUGS@1000000000 : TextConst 'FRA=UGS';
      DARVASetup@1000000001 : Record 50126;
      EAIPartnerCode@1000000002 : Code[20];

    PROCEDURE Code@1100281000(VAR pEAIRcvdMQBuffer@1100281000 : Record 8016721);
    VAR
      lCustomer@1000000004 : Record 18;
      lEAIPartnerCrossRef@1000000003 : Record 8016748;
      lCorporateRegion@1000000002 : Record 50058;
      lService@1000000001 : Record 50066;
      lEAIAct@1000000006 : Record 8016706;
      lTrayLine@1000000005 : Record 50048;
      lDARVAMission@1100281001 : Record 50168;
      lEAIDocEntryMgt@1000000007 : Codeunit 8016707;
      lXmlDomElement@1100281005 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
      lXmlDomElement2@1100281012 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
      lXmlDom@1100281020 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lXmlNodeList2@1100281011 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNodeList";
      lDARVASubscriberNo@1000000010 : Text[30];
      lCorporateNo@1100281003 : Code[20];
      lCorporateRegionCode@1100281021 : Code[10];
      lServiceRefNo@1100281008 : Code[20];
      lDARVACorporateNo@1100281002 : Code[20];
      lMissionOrder@1100281010 : Code[20];
      lInStream@1000000008 : InStream;
      lServiceHeaderFound@1000000012 : Boolean;
      lResult@1100281009 : ' ,Quit,NoAttach,CreateMessage,ToTreat';
      lAttachNb@1100281007 : Integer;
      lServiceHeader@1000000014 : Record 5900;
      lDarvaSwitchSetup@1000000013 : Record 50180;
      lServiceTeamCode@1100281004 : Code[10];
      lTeamCode@1000000009 : Code[10];
      lFilterTeamTrayTask@1000000000 : TEMPORARY Record 50129;
    BEGIN
      lServiceHeaderFound := FALSE;
      CREATE(lXmlDom);
      pEAIRcvdMQBuffer.CALCFIELDS("XML Source");
      pEAIRcvdMQBuffer."XML Source".CREATEINSTREAM(lInStream);
      lXmlDom.load(lInStream);
      ServiceHeader.INIT;
      DARVAXMLMgt.InitXMLDom(lXmlDom,XmlDom);

      //<<IMH04.ACO
      EAIPartnerCode := pEAIRcvdMQBuffer."EAI Partner Code";
      //>>IMH04.ACO

      lAttachNb := CheckAttachment(lXmlDom,pEAIRcvdMQBuffer,lResult);
      CASE lResult OF
        lResult::" " : ERROR(Text012);
        lResult::Quit : BEGIN
          pEAIRcvdMQBuffer."Not Change Status" := TRUE;
          EXIT;
        END;
        lResult::NoAttach : ;
        lResult::CreateMessage : BEGIN
          CreateAttachmentDemand(pEAIRcvdMQBuffer,lAttachNb);
          pEAIRcvdMQBuffer."Not Change Status" := TRUE;
          pEAIRcvdMQBuffer."Attachment Nb" := lAttachNb;
          EXIT;
        END;
        lResult::ToTreat : GetEAIRcvdPJ(pEAIRcvdMQBuffer,lXmlNodeList2);
      END;

      lXmlDomElement := XmlDom.getElementsByTagName('SE0010201').item(0);
      lDARVASubscriberNo :=GetDARVAReceptionType(DARVAMgt.GetNodeValue(lXmlDomElement,'DE00380101'));

      lXmlDomElement := XmlDom.getElementsByTagName('GR010101').item(0);
      lXmlDomElement2 := lXmlDomElement.selectSingleNode('SE0020101');

      lDARVACorporateNo := DARVAMgt.GetNodeValue(lXmlDomElement2,'DE00460101');
      IF NOT lEAIPartnerCrossRef.GetFromCrossRef(
               DATABASE::Customer,pEAIRcvdMQBuffer."EAI Partner Code",
               lDARVACorporateNo,lEAIPartnerCrossRef)
      THEN BEGIN
        ERROR(Text003,lDARVACorporateNo);
      END;


      lEAIPartnerCrossRef.TESTFIELD("Source No.");
      lCorporateNo := lEAIPartnerCrossRef."Source No.";
      lCorporateRegionCode := '';
      lCustomer.GET(lCorporateNo);
      GetCorporateRegion(lXmlDomElement, lCorporateNo, lCorporateRegionCode);

      lServiceRefNo := DARVAMgt.GetNodeValue(lXmlDomElement2,'DE00470101');
      lServiceRefNo := ReferenceNoWithOutZero(lServiceRefNo);
      lMissionOrder := DARVAMgt.GetNodeValue(lXmlDomElement2,'DE00530101');
      pEAIRcvdMQBuffer."Reference No." := lServiceRefNo;
      pEAIRcvdMQBuffer."Your Reference" := lMissionOrder;

      lDARVAMission.SETCURRENTKEY("GTA Code", "Reference No.", "Mission No.");
      lDARVAMission.SETRANGE("GTA Code", DARVAXMLMgt.GetDARVAGTACode(XmlDom));
      lDARVAMission.SETRANGE("Reference No.", pEAIRcvdMQBuffer."Reference No.");
      lDARVAMission.SETRANGE("Mission No.", pEAIRcvdMQBuffer."Your Reference");
      IF lDARVAMission.FINDFIRST THEN BEGIN
        lServiceHeader.SETRANGE("No.", lDARVAMission."Service Header No.");
        IF lServiceHeader.FINDFIRST THEN BEGIN
          lDarvaSwitchSetup.SETCURRENTKEY("Message Code", "Message Version", "Message Release", "Message Sub-type");
          lDarvaSwitchSetup.SETRANGE("Message Code", pEAIRcvdMQBuffer."Message Code");
          lDarvaSwitchSetup.SETRANGE("Message Version", pEAIRcvdMQBuffer."Message Version");
          lDarvaSwitchSetup.SETRANGE("Message Release", pEAIRcvdMQBuffer."Message Release");
          lDarvaSwitchSetup.SETRANGE("Message Sub-type", pEAIRcvdMQBuffer."Message Sub-type");
          lDarvaSwitchSetup.SETRANGE("Line Type", lDarvaSwitchSetup."Line Type"::"Service Order Type");
          lDarvaSwitchSetup.SETRANGE("Service Order Type", lServiceHeader."Service Order Type");
          lDarvaSwitchSetup.SETRANGE("Corporate No.", lCorporateNo);
          lDarvaSwitchSetup.SETRANGE("Corporate Region Code", lCorporateRegionCode);
          lDarvaSwitchSetup.SETRANGE(Direction, lDarvaSwitchSetup.Direction::Receipt);

          IF lDarvaSwitchSetup.ISEMPTY THEN
            lDarvaSwitchSetup.SETRANGE("Corporate Region Code");

          IF lDarvaSwitchSetup.FINDFIRST THEN BEGIN
            IF pEAIRcvdMQBuffer."EAI Act Code" <>  lDarvaSwitchSetup."Act Code" THEN BEGIN
               pEAIRcvdMQBuffer."EAI Act Code" := lDarvaSwitchSetup."Act Code";
               pEAIRcvdMQBuffer."Not Change Status" := TRUE;
               EXIT;
            END;
          END;
        END;
      END;

      lTrayLine.INIT;
      lTrayLine."Service Reference No." := lServiceRefNo;
      lTrayLine."Mission No." := lMissionOrder;
      lTrayLine."Corporate No." := lCorporateNo;
      lTrayLine."DARAV Message ID" := pEAIRcvdMQBuffer."Message ID";
      lTrayLine."EAI Entry No." := pEAIRcvdMQBuffer."Entry No.";

      lService.SETCURRENTKEY("Reference No.","Corporate No.");
      lService.SETFILTER("Reference No.",lServiceRefNo);
      lService.SETRANGE("Corporate No.",lCorporateNo);
      IF lCorporateRegionCode <> '' THEN BEGIN
        lService.SETRANGE("Corporate Region Code",lCorporateRegionCode);
      END;
      lService.FINDFIRST;
      pEAIRcvdMQBuffer."Service No." := lService."Service No.";

      ServiceHeader.SETCURRENTKEY("Service No.");
      ServiceHeader.SETRANGE("Service No.", lService."Service No.");
      ServiceHeader.SETFILTER("Your Reference",lMissionOrder + '*');
      IF ServiceHeader.ISEMPTY THEN BEGIN
        ServiceHeader.SETRANGE("Your Reference",lMissionOrder);
      END;
      IF ServiceHeader.ISEMPTY THEN BEGIN
        lDARVAMission.RESET;
        lDARVAMission.SETRANGE("Service No." , lService."Service No.");
        lDARVAMission.SETRANGE("Mission No.",lMissionOrder + '*');
        IF lDARVAMission.ISEMPTY THEN BEGIN
          lDARVAMission.SETRANGE("Mission No.",lMissionOrder);
          IF lDARVAMission.FINDFIRST THEN BEGIN
            ServiceHeader.GET(ServiceHeader."Document Type"::Invoice,lDARVAMission."Service Header No.");
            lServiceHeaderFound := TRUE;
          END ELSE BEGIN
            lServiceHeaderFound := FALSE;
          END;
        END;
      END ELSE BEGIN
        ServiceHeader.FINDFIRST;
        lServiceHeaderFound := TRUE;
      END;

      pEAIRcvdMQBuffer."Service Header No." := ServiceHeader."No.";

      IF lServiceHeaderFound THEN BEGIN
        CreateComments(DATABASE::"Service Header",ServiceHeader."Service No.",ServiceHeader."No.", lDARVASubscriberNo);
        CreateAttachmentFile(lXmlDom,ServiceHeader."No.",TRUE,lXmlNodeList2);
      END ELSE BEGIN
        CreateComments(DATABASE::Service,lService."Service No.",'', lDARVASubscriberNo);
        CreateAttachmentFile(lXmlDom,lService."Service No.",FALSE,lXmlNodeList2);
      END;

      lEAIDocEntryMgt.AddEntryFromRcvdBuffer(
        DATABASE::"Service Header",
        ServiceHeader."Document Type",
        ServiceHeader."No.", '', 0, pEAIRcvdMQBuffer);

      IF lEAIAct.GET(pEAIRcvdMQBuffer."EAI Act Type Code", pEAIRcvdMQBuffer."EAI Act Code") THEN BEGIN
        IF lEAIAct."Create Tray Line On Receive" THEN BEGIN
          TrayLineMgt.InitTrayLine(lTrayLine);
          IF lServiceHeaderFound THEN BEGIN
            //<<IMH06
            lServiceTeamCode := ServiceHeader.GetTeamByServiceTask(ServiceHeader, lEAIAct."Tray Line Task Code On Receive");
            TrayLineMgt.CreateTLFromServHeader(
              //ServiceHeader,ServiceHeader."Default Team Code",lEAIAct."Tray Line Task Code On Receive",FALSE);
              ServiceHeader,lServiceTeamCode,lEAIAct."Tray Line Task Code On Receive",FALSE);
            //>>IMH06
          END ELSE BEGIN
            //<<IMH06
            lTeamCode := lEAIAct."Tray Line Team Code On Receive";
            IF lTeamCode = '' THEN BEGIN
              lFilterTeamTrayTask."Corporate No." := lService."Corporate No.";
              lFilterTeamTrayTask."Corporate Region Code" := lService."Corporate Region Code";
              lTeamCode := TrayLineMgt.GetTeamByTask(lEAIAct."Tray Line Task Code On Receive", lFilterTeamTrayTask, '');
            END;
            IF lTeamCode <> '' THEN
              TrayLineMgt.CreateTLFromService(
                lService,lTeamCode,lEAIAct."Tray Line Task Code On Receive",FALSE);
            //>>IMH06
          END;
        END;
      END;
    END;

    PROCEDURE CreateComments@1100281008(pSourceTableID@1100281006 : Integer;pSourceNo@1100281007 : Code[20];pSourceNo2@1100281001 : Code[20];pDARVASubscriberNo@1000000000 : Text[30]);
    VAR
      lAdvCommentLine@1100281005 : Record 50056;
      lAdvCommentLineBuffer@1100281009 : TEMPORARY Record 50056;
      lToolsMgt@1000000001 : Codeunit 8016602;
      lTextMgt@1100281012 : Codeunit 50085;
      lXmlDomNodeList@1100281003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNodeList";
      lXmlDomElement@1100281002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
      lXmlDomElement2@1100281004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
      i@1100281000 : Integer;
      lNextLineNo@1100281008 : Integer;
      lTextBuffer@1100281010 : Text[80];
    BEGIN
      lXmlDomElement := XmlDom.getElementsByTagName('SE0120102LIST').item(0);
      IF ISCLEAR(lXmlDomElement) THEN BEGIN
        EXIT;
      END;

      //<<IMH02.ACO
      DARVASetup.GET;
      //>>IMH02.ACO

      lNextLineNo := 1;
      lXmlDomNodeList := lXmlDomElement.getElementsByTagName('SE0120102');
      FOR i := 0 TO lXmlDomNodeList.length - 1 DO BEGIN
        lXmlDomElement2 := lXmlDomNodeList.item(i);

        lAdvCommentLineBuffer."Source Table ID" := pSourceTableID;
        lAdvCommentLineBuffer."Source No." := pSourceNo;
        lAdvCommentLineBuffer."Source No. 2" := pSourceNo2;
        //<<IMH02.ACO
        //lAdvCommentLineBuffer.Code := 'SDR99';
        lAdvCommentLineBuffer.Code := DARVASetup."DARVA SD99 Code";
        //>>IMH02.ACO
        lTextBuffer := lToolsMgt.FormatImport(DARVAMgt.GetNodeValue(lXmlDomElement2,'DE00080201'));
        lAdvCommentLineBuffer.Comment := lTextBuffer;
        lAdvCommentLineBuffer."Line No." := lNextLineNo;
        lNextLineNo += 1;
        lAdvCommentLineBuffer.Reception := lAdvCommentLineBuffer.Reception::Darva;
        lAdvCommentLineBuffer."Creation Date" := CURRENTDATETIME;

        lAdvCommentLineBuffer."Creation User ID" := pDARVASubscriberNo;
        lAdvCommentLineBuffer."Last Modification Date" := CURRENTDATETIME;
        lAdvCommentLineBuffer."Last Modification User ID" := pDARVASubscriberNo;
        lAdvCommentLineBuffer.INSERT;
      END;

      // Ajout d'une ligne vide
      lAdvCommentLineBuffer."Source Table ID" := pSourceTableID;
      lAdvCommentLineBuffer."Source No." := pSourceNo;
      lAdvCommentLineBuffer."Source No. 2" := pSourceNo2;
      //<<IMH02.ACO
      //lAdvCommentLineBuffer.Code := 'SDR99';
      lAdvCommentLineBuffer.Code := DARVASetup."SD99 Comment Code";
      //>>IMH02.ACO
      lAdvCommentLineBuffer.Comment := '';
      lAdvCommentLineBuffer."Line No." := lNextLineNo;
      lNextLineNo += 1;
      lAdvCommentLineBuffer.Reception := lAdvCommentLineBuffer.Reception::Darva;
      lAdvCommentLineBuffer."Creation Date" := CURRENTDATETIME;
      lAdvCommentLineBuffer."Creation User ID" := pDARVASubscriberNo;
      lAdvCommentLineBuffer."Last Modification Date" := CURRENTDATETIME;
      lAdvCommentLineBuffer."Last Modification User ID" := pDARVASubscriberNo;
      lAdvCommentLineBuffer.INSERT;

      // Sauvegarde du commentaire
      lAdvCommentLine."Source Table ID" := pSourceTableID;
      lAdvCommentLine."Source No." := pSourceNo;
      lAdvCommentLine."Source No. 2" := pSourceNo2;
      //<<IMH02.ACO
      //lAdvCommentLine.Code := 'SDR99';
      lAdvCommentLine.Code := DARVASetup."SD99 Comment Code";
      //>>IMH02.ACO
      lTextMgt.SaveTempComment(lAdvCommentLine,lAdvCommentLineBuffer,TRUE);
    END;

    PROCEDURE CreateAttachmentFile@1100281012(pXMLDom@1100281001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";pDocumentNo@1000000000 : Code[20];pServiceHeaderFound@1000000001 : Boolean;VAR pXmlNodeList@1100281009 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNodeList");
    VAR
      lAttachmentTemp@1100281005 : TEMPORARY Record 5062;
      lDocAttach@1100281008 : Record 50021;
      lSourceAttchMgt@1100281006 : Codeunit 50003;
      lXMLDOMNode@1100281000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lAdoStream@1000000002 : Automation "{2A75196C-D9EB-4129-B803-931327F72D5C} 2.8:{00000566-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.8 Library'.Stream";
      lTempFile@1100281003 : File;
      lFileName@1100281002 : Text[250];
    BEGIN

      lXMLDOMNode := pXMLDom.getElementsByTagName('ns2:formatPdf').item(0);
      IF ISCLEAR(lXMLDOMNode) THEN BEGIN
        EXIT;
      END;

      lXMLDOMNode.dataType := 'bin.base64';
      CREATE(lAdoStream);
      lAdoStream.Open;
      lAdoStream.Type := 1;
      lAdoStream.Write(lXMLDOMNode.nodeTypedValue);

      lTempFile.CREATETEMPFILE;
      lFileName := COPYSTR(lTempFile.NAME,1,STRLEN(lTempFile.NAME) - 4) + '.pdf';
      lAdoStream.SaveToFile(lFileName);
      lAdoStream.Close;

      //<<IMH02.ACO
      DARVASetup.GET;
      //>>IMH02.ACO

      WITH lDocAttach DO BEGIN
        IF pServiceHeaderFound THEN BEGIN
          SETRANGE("Service Document No.",pDocumentNo);
        END ELSE BEGIN
          SETRANGE("Service No.",pDocumentNo);
        END;
        lDocAttach."Key Integer 1" := 0;
        lDocAttach."Key Integer 2" := 0;
        lDocAttach."Key Code 1" := '';
        lDocAttach."Key Code 2" := '';
        //<<IMH02.ACO
        //Description := 'SDR99';
        Description := DARVASetup."DARVA SD99 Code";
        //>>IMH02.ACO
        "Description 2" := 'Commentaires';
      END;
      lSourceAttchMgt.CreateAttachment(lDocAttach,lFileName,lAttachmentTemp);

      CreateAttachment(pXmlNodeList,pDocumentNo,pServiceHeaderFound);
    END;

    LOCAL PROCEDURE ReferenceNoWithOutZero@1100281004(pServiceRefNo@1100281000 : Code[20]) rValue : Code[20];
    BEGIN
      rValue := '';
      rValue := DARVAMgt.ReferenceNoWithOutZero(pServiceRefNo);
    END;

    LOCAL PROCEDURE CheckAttachment@1000000002(VAR pXmlDom@1000000001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";pEAIRcvdMQBuffer@1000000003 : Record 8016721;VAR pResult@1000000005 : ' ,Quit,NoAttach,CreateMessage,ToTreat') rValue : Integer;
    VAR
      lEAIMQBufferMgt@1000000000 : Codeunit 8016708;
      lXmlNodeList@1000000013 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNodeList";
      lText001@1000000004 : TextConst 'ENU=Attachment Rec with ID %1 was error.;FRA=Le flux PJ portant l''ID %1 est en erreur.';
    BEGIN
      rValue := 0;
      pResult := pResult::" ";

      lXmlNodeList := pXmlDom.getElementsByTagName('ns2:pieceJointe');

      rValue := lXmlNodeList.length;
      IF rValue = 0 THEN BEGIN
        pResult := pResult::NoAttach;
        EXIT;
      END;

      // V‚rification de la pr‚sence du flux DARVA_PJ
      // pStep : 0 = Generate / 1 = Validation
      // pStatus : 0 = Non trait‚ / 1 = Trait‚ / 2 = Erreur / 3 = Test unitaire
      IF lEAIMQBufferMgt.CheckIfActExistsToNextAct(pEAIRcvdMQBuffer,FALSE,'','',TRUE,1,TRUE,1) THEN BEGIN
        pResult := pResult::ToTreat;
        EXIT;
      END;

      IF lEAIMQBufferMgt.CheckIfActExistsToNextAct(pEAIRcvdMQBuffer,FALSE,'','',FALSE,0,TRUE,2) THEN BEGIN
        ERROR(lText001,pEAIRcvdMQBuffer."Message ID");
      END;

      IF lEAIMQBufferMgt.CheckIfActExistsToNextAct(pEAIRcvdMQBuffer,FALSE,'','',FALSE,0,FALSE,2) THEN BEGIN
        pResult := pResult::Quit;
        EXIT;
      END ELSE BEGIN
        pResult := pResult::CreateMessage;
        EXIT;
      END;
    END;

    LOCAL PROCEDURE CreateAttachmentDemand@1000000004(pEAIRcvdMQBuffer@1000000000 : Record 8016721;pAttachNb@1100281000 : Integer);
    VAR
      lEAIRcvdMQBuffer@1000000001 : Record 8016721;
      lEAIAct@1000000002 : Record 8016706;
      lEAIMQBufferMgt@1000000003 : Codeunit 8016708;
    BEGIN
      lEAIRcvdMQBuffer := pEAIRcvdMQBuffer;
      WITH lEAIRcvdMQBuffer DO BEGIN
        lEAIAct.GET(pEAIRcvdMQBuffer."EAI Act Type Code",pEAIRcvdMQBuffer."EAI Act Code");
        lEAIAct.TESTFIELD("Next Act Type Code Af. Val.");
        lEAIAct.TESTFIELD("Next Act Code After Validation");
        "EAI Act Type Code" := lEAIAct."Next Act Type Code Af. Val.";
        "EAI Act Code" := lEAIAct."Next Act Code After Validation";
        "Entry No." := '';
        IF lEAIAct.GET("EAI Act Type Code","EAI Act Code") THEN BEGIN
          "Act Priority" := lEAIAct."Act Priority";
        END;
        "Date Creation" := WORKDATE;
        "Time Creation" := TIME;
        "User Creation" := USERID;
        Step := Step::Generation;
        Status := Status::Unprocessed;
        "Attachment Nb" := pAttachNb;
        "Origin Entry No." := pEAIRcvdMQBuffer."Entry No.";
        "Origin EAI Act Code" := pEAIRcvdMQBuffer."EAI Act Code";
        CLEAR("XML Source");
        CLEAR("Response XML Source");
        INSERT;
        lEAIMQBufferMgt.InsertReceivedBufferToMQCode("EAI MQ Code",lEAIRcvdMQBuffer);
        DELETE;
      END;
    END;

    LOCAL PROCEDURE CreateAttachment@1000000011(VAR pXmlNodeList@1100281000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNodeList";pDocumentNo@1100281003 : Code[20];pServiceHeaderFound@1100281002 : Boolean);
    VAR
      lAttachmentTemp@1000000004 : TEMPORARY Record 5062;
      lDocumentAttachmentBuffer@1000000007 : TEMPORARY Record 50021;
      lSourceAttchMgt@1000000005 : Codeunit 50003;
      lXmlDOMNode@1000000016 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lXmlDOMNode1@1000000015 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lXmlDOMNode2@1000000014 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lAdoStream@1000000012 : Automation "{2A75196C-D9EB-4129-B803-931327F72D5C} 2.8:{00000566-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.8 Library'.Stream";
      lTempFile@1000000011 : File;
      lLength@1000000002 : Integer;
      i@1000000001 : Integer;
      j@1100281001 : Integer;
      lMetadata@1000000020 : ARRAY [5] OF Text[50];
      lFileName@1000000006 : Text[1024];
    BEGIN
      IF ISCLEAR(pXmlNodeList) THEN BEGIN
        EXIT;
      END;

      lLength := pXmlNodeList.length;
      IF lLength = 0 THEN BEGIN
        EXIT;
      END;

      FOR i := 1 TO lLength DO BEGIN
        lXmlDOMNode := pXmlNodeList.item(i - 1);
        FOR j := 1 TO 5 DO BEGIN
          lMetadata[j] := '';
        END;

        // R‚cup‚artion des Metadata
        lXmlDOMNode1 := lXmlDOMNode.selectSingleNode('ns2:metadata');
        IF NOT ISCLEAR(lXmlDOMNode1) THEN BEGIN
          // ID PJ
          lXmlDOMNode2 := lXmlDOMNode1.selectSingleNode('ns2:idPJ');
          IF NOT ISCLEAR(lXmlDOMNode2) THEN BEGIN
            lMetadata[1]  := lXmlDOMNode2.text;
          END;
          // LIBELLE PJ
          lXmlDOMNode2 := lXmlDOMNode1.selectSingleNode('ns2:libellePJ');
          IF NOT ISCLEAR(lXmlDOMNode2) THEN BEGIN
            lMetadata[2]  := lXmlDOMNode2.text;
          END;
          // NATURE PJ
          lXmlDOMNode2 := lXmlDOMNode1.selectSingleNode('ns2:naturePJ');
          IF NOT ISCLEAR(lXmlDOMNode2) THEN BEGIN
            lMetadata[3]  := lXmlDOMNode2.text;
          END;
          // FORMAT PJ
          lXmlDOMNode2 := lXmlDOMNode1.selectSingleNode('ns2:formatPJ');
          IF NOT ISCLEAR(lXmlDOMNode2) THEN BEGIN
            lMetadata[4]  := lXmlDOMNode2.text;
          END;
          // VERSION PJ
          lXmlDOMNode2 := lXmlDOMNode1.selectSingleNode('ns2:versionPJ');
          IF NOT ISCLEAR(lXmlDOMNode2) THEN BEGIN
            lMetadata[5]  := lXmlDOMNode2.text;
          END;
        END;

        lXmlDOMNode1 := lXmlDOMNode.selectSingleNode('ns2:fluxPJ');
        IF NOT ISCLEAR(lXmlDOMNode1) THEN BEGIN
          lXmlDOMNode1.dataType := 'bin.base64';
          CLEAR(lAdoStream);
          CREATE(lAdoStream);
          lAdoStream.Open;
          lAdoStream.Type := 1;
          lAdoStream.Write(lXmlDOMNode1.nodeTypedValue);
          lTempFile.CREATETEMPFILE;
          lFileName := COPYSTR(lTempFile.NAME,1,STRLEN(lTempFile.NAME) - 4) + '.' + lMetadata[4];
          lTempFile.CLOSE;
          lAdoStream.SaveToFile(lFileName);
          lAdoStream.Close;
        END;

        // sauvegarde Document Attachment
        IF pServiceHeaderFound THEN BEGIN
          lDocumentAttachmentBuffer.SETRANGE("Service Document No.",pDocumentNo);
        END ELSE BEGIN
          lDocumentAttachmentBuffer.SETRANGE("Service No.",pDocumentNo);
        END;
        lDocumentAttachmentBuffer."Darva ID" := lMetadata[1];
        lDocumentAttachmentBuffer.Description := lMetadata[2];
        lDocumentAttachmentBuffer."Description 2" := lMetadata[3];
        lDocumentAttachmentBuffer."File Extension" := lMetadata[4];
        lDocumentAttachmentBuffer."Darva Attachment Version" := lMetadata[5];
        lSourceAttchMgt.CreateAttachment(lDocumentAttachmentBuffer,lFileName,lAttachmentTemp);
      END;
    END;

    PROCEDURE GetEAIRcvdPJ@1000000005(pEAIRcvdMQBuffer@1000000000 : Record 8016721;VAR pXmlNodeList@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNodeList");
    VAR
      lEAIRcvdMQBufferPJ@1000000006 : Record 8016721;
      lEAIAct@1000000005 : Record 8016706;
      lEAIMQBufferMgt@1000000007 : Codeunit 8016708;
      lXmlDom@1000000004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lLength@1000000002 : Integer;
      lInStream@1000000001 : InStream;
    BEGIN
      CLEAR(pXmlNodeList);

      // On r‚cupŠre le flux DARVA_PJ
      lEAIAct.GET(pEAIRcvdMQBuffer."EAI Act Type Code",pEAIRcvdMQBuffer."EAI Act Code");
      lEAIMQBufferMgt.GetSpecificAct(
        pEAIRcvdMQBuffer,
        lEAIAct."Next Act Type Code Af. Val.",lEAIAct."Next Act Code After Validation",
        lEAIRcvdMQBufferPJ);

      lEAIRcvdMQBufferPJ.CALCFIELDS("Response XML Source");
      lEAIRcvdMQBufferPJ."Response XML Source".CREATEINSTREAM(lInStream);
      CREATE(lXmlDom);
      lXmlDom.load(lInStream);
      lEAIRcvdMQBufferPJ.DELETE;
      pXmlNodeList := lXmlDom.getElementsByTagName('ns2:pieceJointe');
      lLength := pXmlNodeList.length;
      IF lLength = 0 THEN BEGIN
        EXIT;
      END;

      IF pEAIRcvdMQBuffer."Attachment Nb" <> lLength THEN BEGIN
        ERROR(Text013,pEAIRcvdMQBuffer."Attachment Nb",lLength);
      END;
    END;

    LOCAL PROCEDURE GetDARVAReceptionType@1000000000(pDARVASubscriberNo@1000000000 : Text[30]) : Text[30];
    VAR
      lInterfaceReference@1000000001 : Record 50164;
      lExpertType@1000000002 : TextConst 'ENU=Expert;FRA=Expert';
      lGCType@1000000003 : TextConst 'ENU=Corporate;FRA=Grand compte';
      lEAIPartnerCrossRef@1000000004 : Record 8016748;
    BEGIN
      //<<IMH07.ACO
      //<<IMH04.ACO
      {{lInterfaceReference.SETCURRENTKEY("DARVA Subscriber No.");
      lInterfaceReference.SETRANGE("DARVA Subscriber No.", pDARVASubscriberNo);
      IF lInterfaceReference.FINDFIRST THEN
        EXIT(lExpertType)
      ELSE
        EXIT(lGCType);
      }
      IF lEAIPartnerCrossRef.GetFromCrossRef(
          DATABASE::Contact,
          EAIPartnerCode,pDARVASubscriberNo,lEAIPartnerCrossRef) THEN
        EXIT(lGCType)
      ELSE
        EXIT(lExpertType);
      //>>IMH04.ACO
      }
      //Les SDR99 ne peuvent ˆtre ‚mis que par un Grand Compte
      EXIT(lGCType);
      //>>IMH07.ACO
    END;

    PROCEDURE GetCorporateRegion@1000000012(VAR pXmlDomElement@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";pCorporateNo@1000000005 : Code[20];VAR pCorporateRegionCode@1000000004 : Code[10]);
    VAR
      lXmlDomElement@1000000001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
      lXmlDomElement2@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
      lCorporateRegion@1000000008 : Record 50058;
      lManagerCode@1000000007 : Text[80];
      lPostCode@1000000006 : Text[30];
    BEGIN
      lXmlDomElement := pXmlDomElement.selectSingleNode('SE0030401');
      lManagerCode := DARVAMgt.GetNodeValue(lXmlDomElement,'DE00560101');  //Code gestionnaire

      //si code = 1, MATMUT PGS
      IF STRLEN(lManagerCode) = 1 THEN BEGIN
        lXmlDomElement2 := lXmlDomElement.selectSingleNode('DCC0500103');
        lPostCode := DARVAMgt.GetNodeValue(lXmlDomElement2,'DE05390101');  //Code postal r‚gion PGS
        lCorporateRegion.SETRANGE("Corporate No.", pCorporateNo);
        lCorporateRegion.SETRANGE("Post Code", lPostCode);
        lCorporateRegion.FINDFIRST;
        pCorporateRegionCode := lCorporateRegion."Region Code";
      END ELSE BEGIN
        //<<IMH03.ACO
        //pCorporateRegionCode := TextUGS + COPYSTR(lManagerCode, 3);
        //lCorporateRegion.GET(pCorporateNo,pCorporateRegionCode);
        pCorporateRegionCode := lManagerCode;
        IF NOT lCorporateRegion.GET(pCorporateNo,pCorporateRegionCode) THEN BEGIN
          pCorporateRegionCode := TextUGS + COPYSTR(lManagerCode, 3);
          lCorporateRegion.GET(pCorporateNo,pCorporateRegionCode);
        END;
        //>>IMH03.ACO
      END;
    END;

    EVENT XmlDom@1100281000::ondataavailable@198();
    BEGIN
    END;

    EVENT XmlDom@1100281000::onreadystatechange@-609();
    BEGIN
    END;

    BEGIN
    {
      /** @r IMH07 @d 17/04/14 @a ISAT.ACO @v IMH6.01.5060 @s Identification ‚metteur SDR99 @h 5060
          @c Modification de la fonction GetDARVAReceptionType */
      /** @r IMH06 @d 26/03/14 @a ISAT.ZW @v IMH6.01.5005 @s Reorganisation DPS @h 5005
          @c Ajout la gestion de team code par defaut */
      /** @r IMH05 @d 24/02/14 @a ISAT.ZW @v IMH6.01.4985 @s R‚organisation DPS @c Gestion de code corbeille service par d‚faut */
      /** @r IMH04 @d 26/11/13 @a ISAT.ACO @v IMH6.01.4235 @s SUPPORT @h 4235 @h 4824
          @c Modification de la condition pour d‚terminer type ‚metteur */
      /** @r IMH03 @d 06/09/13 @a ISAT.ACO @v IMH6.01.348 @s DARVA MATMUT Lot 1 @h 4708
          @c Le code de l'UGS est correspond exactement … la balise code gestionnaire (Pas de concat‚nation n‚cessaire) */
      /** @r IMH02 @d 09/09/13 @a ISAT.ACO @v IMH6.01.348 @s DARVA MATMUT Lot 1
          @c Utilisation codes SD99 de DARVA Setup  */
      /** @r IMH01 @d 02/08/13 @a ISAT.ZW @v IMH6.01.348 @s DARVA MATMUT Lot 1 @c Creation */
    }
    END.
  }
}