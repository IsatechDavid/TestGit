OBJECT Codeunit 50277 Web Service WGA Test
{
  OBJECT-PROPERTIES
  {
    Date=20/11/13;
    Time=17:11:58;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    OnRun=VAR
            lBigText@1000000000 : BigText;
          BEGIN
            TestListDocumentToDownload('\\imha.local\IMHA\Documents$\DSI\_Utilisateurs\wgaignar\tempWGA.xml','347403T','',TRUE);
            TestListDocumentToDownload('\\imha.local\IMHA\Documents$\DSI\_Utilisateurs\wgaignar\temp2WGA.xml','347403T','REN*',TRUE);
            TestListDocumentToDownload('\\imha.local\IMHA\Documents$\DSI\_Utilisateurs\wgaignar\temp3WGA.xml','347403T','',FALSE);
            //GetInterventionList('347403T',lBigText,FALSE,'');
          END;

  }
  CODE
  {
    VAR
      gCuExtranetCommonFunction@1000000000 : Codeunit 50204;

    PROCEDURE GetInterventionList@1000000001(pProviderNo@1000000000 : Code[20];VAR pInterventionList@1000000002 : BigText;pClosed@1000000003 : Boolean;pFilterOrderType@1000000006 : Text[250]) : Boolean;
    VAR
      lIntervention@1000000001 : Record 50075;
      lGUID@1000000005 : GUID;
      lProvider@1000000007 : Record 50000;
    BEGIN

      gCuExtranetCommonFunction.Initial(2,'GetInterventionList',STRSUBSTNO('%1-%2' ,pProviderNo,pClosed),lGUID)   ;

      lProvider.GET(pProviderNo);           // D‚clenche une erreur si inconnu

      lIntervention.SETCURRENTKEY("Provider No.");
      lIntervention.SETRANGE("Provider No.",pProviderNo);
      IF pFilterOrderType <> '' THEN BEGIN
          lIntervention.SETFILTER("Service Order Type",  pFilterOrderType);
      END;

      IF NOT pClosed     THEN     BEGIN
          lIntervention.SETRANGE(Closed,FALSE);
      END;


      EncodeIntervList( lIntervention,pInterventionList);

      gCuExtranetCommonFunction.Finish(lGUID);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE EncodeIntervList@1000000007(VAR pInterventonLine@1000000000 : Record 50075;VAR pResult@1000000001 : BigText);
    VAR
      lXMLDOm@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lXMLNode@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lXMLMgt@1000000004 : Codeunit 8016710;
      lProcessStatus@1000000005 : Record 50042;
      lXMLNode2@1000000006 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lToolsMgt@1000000007 : Codeunit 8016602;
      lFileName@1000000008 : Text[1024];
      lInstream@1000000009 : InStream;
      lFile@1000000010 : File;
    BEGIN

      IF NOT lXMLMgt.CreateXml(lXMLDOm,'<INTERVENTION_LIST />',lXMLNode) THEN BEGIN

          ERROR('Erreur sur cr‚ation Fichier XML');

      END;



      WITH   pInterventonLine DO BEGIN
        IF FINDSET THEN BEGIN

           REPEAT

              lXMLMgt.IsAddElement(  lXMLNode,'INTERVENTION','','',lXMLNode2);
              lXMLMgt.IsAddElement4(lXMLNode2,'SERVICE_NO' ,"Service No.",'');
              lXMLMgt.IsAddElement4(lXMLNode2,'SERVICE_HEADER_NO' ,"Service Header No.",'');
              lXMLMgt.IsAddElement4(lXMLNode2,'INTERVENTION_NO',lToolsMgt.IntegerToText("Intervention No."),'');
              lXMLMgt.IsAddElement4(lXMLNode2,'CONTACT_NO' ,"Contact No.",'');
              lXMLMgt.IsAddElement4(lXMLNode2,'ASSIGNED_DATE' ,lToolsMgt.DateToText("Assigned Date"),'');
              lXMLMgt.IsAddElement4(lXMLNode2,'SERVICE_ORDER_TYPE' ,"Service Order Type",'');
      {
              IF NOT lProcessStatus.GET("Process Code","Process Status No.") THEN
              BEGIN
                CLEAR(lProcessStatus);
              END;
              lXMLMgt.IsAddElement4(lXMLNode2,'EXTRANET_CODE' ,lProcessStatus."Extranet Code",'');
      }

              IF lProcessStatus.GET("Process Code","Process Status No.") THEN
              BEGIN
                   lXMLMgt.IsAddElement4(lXMLNode2,'EXTRANET_CODE' ,lProcessStatus."Extranet Code",'');
              END
              ELSE BEGIN
                    lXMLMgt.IsAddElement4(lXMLNode2,'EXTRANET_CODE' ,'','');
              END;

           UNTIL NEXT = 0;
        END;
      END;

      lFileName := gCuExtranetCommonFunction.GetTempFilename('xml');
      lXMLDOm.save(lFileName);
      IF  lFile.OPEN(lFileName) THEN BEGIN
           lFile.CREATEINSTREAM(lInstream);
           pResult.READ(lInstream);
           lFile.CLOSE;
           ERASE(lFileName);
      END;


      {
          pResult.ADDTEXT('<INTERVENTION_LIST>');

          REPEAT
              pResult.ADDTEXT('<INTERVENTION>');



              pResult.ADDTEXT('<SERVICE_NO>');
              pResult.ADDTEXT(pInterventonLine."Service No.");
              pResult.ADDTEXT('</SERVICE_NO>');



              pResult.ADDTEXT('</INTERVENTION>');
          UNTIL pInterventonLine.NEXT = 0;

          pResult.ADDTEXT('</INTERVENTION_LIST>');
      }
    END;

    PROCEDURE TestListDocumentToDownload@1100281000(pFileNameToExport@1000000011 : Text[1024];pProviderNo@1000000002 : Code[20];pFilterOrderType@1000000001 : Text[1024];pIncludeClose@1000000000 : Boolean);
    VAR
      lSentMQBuffer@1000000014 : Record 8016720;
      lwinHTTPService@1000000013 : Automation "{662901FC-6951-4854-9EB2-D9A2570F2B2E} 5.1:{2087C2F4-2CEF-4953-A8AB-66779B670495}:'Microsoft WinHTTP Services, version 5.1'.WinHttpRequest";
      lXmlDom@1000000012 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lInStream@1000000007 : InStream;
      lOutStream@1000000015 : OutStream;
      WebServiceAddress@1000000003 : Text[255];
    BEGIN

      WebServiceAddress := 'http://simhns07:7061/NST2009R2_Dev_IMH/WS/IMH%20-%20Dev/Codeunit/WSWGA';

      lSentMQBuffer."XML Source".CREATEOUTSTREAM(lOutStream);

      lOutStream.WRITETEXT('<?xml version="1.0"  encoding="utf-8"?>');
      lOutStream.WRITETEXT('<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" ');
      lOutStream.WRITETEXT('xmlns:xsi="http://www.w3.org/1999/XMLSchema-instance" ');
      lOutStream.WRITETEXT('xmlns:xsd="http://www.w3.org/1999/XMLSchema"> ');
      lOutStream.WRITETEXT('<soap:Body>');
      lOutStream.WRITETEXT('<GetInterventionList xmlns="urn:microsoft-dynamics-schemas/codeunit/WSWGA">');
      IF pProviderNo <> '' THEN BEGIN
        lOutStream.WRITETEXT('<pProviderNo>' + pProviderNo + '</pProviderNo>');
      END ELSE BEGIN
        lOutStream.WRITETEXT('<pProviderNo/>');
      END;
      IF pFilterOrderType <> '' THEN BEGIN
        lOutStream.WRITETEXT('<pFilterOrderType>' + pFilterOrderType + '</pFilterOrderType>');
      END ELSE BEGIN
        lOutStream.WRITETEXT('<pFilterOrderType/>');
      END;

      IF pIncludeClose  THEN BEGIN
        lOutStream.WRITETEXT('<pClosed>true</pClosed>');
      END
      ELSE BEGIN
          lOutStream.WRITETEXT('<pClosed>false</pClosed>');
      END;

      lOutStream.WRITETEXT('<pInterventionList/>');
      lOutStream.WRITETEXT('</GetInterventionList>');
      lOutStream.WRITETEXT('</soap:Body>');
      lOutStream.WRITETEXT('</soap:Envelope>');

      IF ISCLEAR(lwinHTTPService) THEN
        CREATE(lwinHTTPService);

      lwinHTTPService.Open('POST',WebServiceAddress,0);
      lwinHTTPService.SetAutoLogonPolicy(0);
      lwinHTTPService.SetRequestHeader('Content-type','text/xml; charset=UTF-8');
      lwinHTTPService.SetRequestHeader('SOAPAction','""');
      //The last parameter set to zero allows to wait till webservice finishes
      lwinHTTPService.SetTimeouts(10000,10000,10000,0);

      lSentMQBuffer.CALCFIELDS("XML Source");
      {IF EnableSendMessage THEN BEGIN
        lSentMQBuffer."XML Source".EXPORT(pFileNameToExport + 'ListDocumentToDownload_Send.xml');
      END;}
      lSentMQBuffer."XML Source".CREATEINSTREAM(lInStream);

      // Envoi de la demande au webservice
      lwinHTTPService.Send(lInStream);

      IF NOT lwinHTTPService.WaitForResponse(600) THEN ERROR('Request timed out.');

      CREATE(lXmlDom);
      lXmlDom.load(lwinHTTPService.ResponseStream);
      lXmlDom.save(pFileNameToExport + 'ListDocumentToDownload_Response.xml');
    END;

    BEGIN
    END.
  }
}