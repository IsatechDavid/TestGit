OBJECT Codeunit 50286 Track Provider Search Mgt
{
  OBJECT-PROPERTIES
  {
    Date=07/05/14;
    Time=11:51:35;
    Modified=Yes;
    Version List=IMH6.01,IMH6.01.P011;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      SearchTrackFile@1000000000 : File;
      SearchTrackFileName@1000000002 : Text[1024];
      InitializeOK@1000000001 : Boolean;
      ProvGeoAbilityTest@1000000003 : TextConst 'ENU="  Available provider in ability geo. : %1";FRA="  Nb prestataire disponible par selection geographique : %1"';
      ProvDisableText@1100281007 : TextConst 'ENU="  Provider %1 - %2 : refuse because disable";FRA="    %1 - %2 : refus car inactif"';
      ProvInvisibleOpenSpaceText@1100281006 : TextConst 'ENU="  Provider %1 - %2 : refuse because invisible open space";FRA="    %1 - %2 : refus car invisible plateau"';
      ProvExclusionText@1100281008 : TextConst 'ENU="  Provider %1 - %2 : refuse because exclude, temporary exclude or black list.";FRA="    %1 - %2 : refus car invisible exclus, exclus temporaire ou black list"';
      ProvStatusText@1100281005 : TextConst 'ENU="  Provider %1 - %2 : refuse because status outside search (Status %3)";FRA="    %1 - %2 : refus car statut hors recherche (Statut %3)"';
      ProvTotalExclText@1100281004 : TextConst 'ENU="  Provider %1 - %2 : refuse because agreement total exclusion";FRA="    %1 - %2 : refus car exclusion total agreement"';
      ProvTotalExclSpecText@1100281003 : TextConst 'ENU="  Provider %1 - %2 : refuse because agreement exclusion (corporate no. %3, specialization %4).";FRA="    %1 - %2 : refus car exclusion agrement (grand compte %3, specialite %4)"';
      ProvTotalExclServOrdTypeText@1100281002 : TextConst 'ENU="  Provider %1 - %2 : refuse because agreement exclusion (corporate no. %3, service order type %4).";FRA="    %1 - %2 : refus car exclusion agrement (grand compte %3, type produit %4)"';
      ProvCalendarText@1100281001 : TextConst 'ENU=Provider %1 - %2 : refuse because specialization %3 is unavailable - Intervalle from %4 to %5 - First available %6 - On call %7;FRA="    %1 - %2 : refus car %3 non disponible - Intervalle du %4 au %5 - 1ere disponibilit‚ %6 - Astreinte %7"';
      ProvBusinessHoursText@1100281000 : TextConst 'ENU="  Provider %1 - %2 : refuse because he is outside business hours";FRA="    %1 - %2 : refus car en dehors des heures d''ouverture"';
      ProvSelectedText@1100281011 : TextConst 'ENU="  Providers valids";FRA="  Prestataires valides pour la recherche"';
      ProvPressentTitleText@1100281014 : TextConst 'ENU="  Check pressent provider";FRA="  Verification pressenti"';
      ProvFiltersText@1100281015 : TextConst 'ENU="  Apply select criterion";FRA="  Application des criteres de selection"';
      ProvSelectedNameText@1100281012 : TextConst 'FRA="    %1 - %2 %3"';
      StartInformationText@1100281009 : TextConst 'ENU=Search done le %1 by %2;FRA=Recheche realisee le %1 par %2';
      SeparatorText@1100281010 : TextConst 'FRA=----------------------';
      SeparatorStar@1100281013 : TextConst 'FRA=***************';

    PROCEDURE AddProviderNb@1000000003(pCount@1000000000 : Integer);
    BEGIN
      IF NOT InitializeOK THEN BEGIN
        EXIT;
      END;
      AddTextToTrack(STRSUBSTNO(ProvGeoAbilityTest,pCount));
    END;

    PROCEDURE AddEnableTrack@1000000008(pProviderNo@1000000000 : Code[20]);
    VAR
      lProvider@1000000002 : Record 50000;
    BEGIN
      IF NOT InitializeOK THEN BEGIN
        EXIT;
      END;
      IF NOT lProvider.GET(pProviderNo) THEN BEGIN
        EXIT;
      END;

      AddTextToTrack(STRSUBSTNO(ProvDisableText,lProvider."No.",lProvider.Name));
    END;

    PROCEDURE AddInvisibleOpenSpaceTrack@1000000010(pProviderNo@1000000000 : Code[20]);
    VAR
      lProvider@1000000002 : Record 50000;
    BEGIN
      IF NOT InitializeOK THEN BEGIN
        EXIT;
      END;
      IF NOT lProvider.GET(pProviderNo) THEN BEGIN
        EXIT;
      END;

      AddTextToTrack(STRSUBSTNO(ProvInvisibleOpenSpaceText,lProvider."No.",lProvider.Name));
    END;

    PROCEDURE AddExclusionTrack@1100281001(pProviderNo@1000000000 : Code[20]);
    VAR
      lText001@1000000001 : TextConst 'ENU=Provider %1 - %2 : refuse because invisible open space;FRA=Prestataire %1 - %2 : refus car invisible plateau';
      lProvider@1000000002 : Record 50000;
    BEGIN
      IF NOT InitializeOK THEN BEGIN
        EXIT;
      END;
      IF NOT lProvider.GET(pProviderNo) THEN BEGIN
        EXIT;
      END;

      AddTextToTrack(STRSUBSTNO(ProvExclusionText,lProvider."No.",lProvider.Name));
    END;

    PROCEDURE AddStatusTrack@1000000001(pProviderNo@1000000000 : Code[20]);
    VAR
      lProvider@1000000002 : Record 50000;
    BEGIN
      IF NOT InitializeOK THEN BEGIN
        EXIT;
      END;
      IF NOT lProvider.GET(pProviderNo) THEN BEGIN
        EXIT;
      END;

      AddTextToTrack(STRSUBSTNO(ProvStatusText,lProvider."No.",lProvider.Name,FORMAT(lProvider.Status,1,0)));
    END;

    PROCEDURE AddAgreementTrack@1000000009(pErrorType@1000000005 : 'Total,Specialization,ServiceOrderType';pProviderNo@1000000000 : Code[20];pCorporateNo@1000000004 : Code[20];pSpecializationCode@1000000001 : Code[10];pServiceOrderType@1000000003 : Code[10]);
    VAR
      lProvider@1000000008 : Record 50000;
      lSpecialization@1000000009 : Record 50005;
    BEGIN
      IF NOT InitializeOK THEN BEGIN
        EXIT;
      END;
      IF NOT lProvider.GET(pProviderNo) THEN BEGIN
        EXIT;
      END;

      CASE pErrorType OF
        pErrorType::Total : AddTextToTrack(STRSUBSTNO(ProvTotalExclText,lProvider."No.",lProvider.Name));
        pErrorType::Specialization : BEGIN
          IF lSpecialization.GET(pSpecializationCode) THEN;
          AddTextToTrack(STRSUBSTNO(ProvTotalExclSpecText,lProvider."No.",lProvider.Name,pCorporateNo,lSpecialization.Description));
        END;
        pErrorType::ServiceOrderType : BEGIN
          AddTextToTrack(STRSUBSTNO(ProvTotalExclServOrdTypeText,lProvider."No.",lProvider.Name,pCorporateNo,pServiceOrderType));
        END;
      END;
    END;

    PROCEDURE AddCalendarTrack@1000000006(pProviderNo@1000000000 : Code[20];pSpecializationCode@1000000002 : Code[10];pFromDate@1000000003 : Date;pToDate@1000000004 : Date;pFirstAvailableDate@1000000005 : Date;pOnCall@1000000006 : Boolean);
    VAR
      lProvider@1000000008 : Record 50000;
      lSpecialization@1000000007 : Record 50005;
    BEGIN
      IF NOT InitializeOK THEN BEGIN
        EXIT;
      END;
      IF NOT lProvider.GET(pProviderNo) THEN BEGIN
        EXIT;
      END;

      IF lSpecialization.GET(pSpecializationCode) THEN;

      AddTextToTrack(
        STRSUBSTNO(
          ProvCalendarText,
          lProvider."No.",lProvider.Name,
          lSpecialization.Description,
          pFromDate,pToDate,
          pFirstAvailableDate,
          pOnCall));
    END;

    PROCEDURE AddBusinessHoursTrack@1000000002(pProviderNo@1000000000 : Code[20]);
    VAR
      lProvider@1000000008 : Record 50000;
    BEGIN
      IF NOT InitializeOK THEN BEGIN
        EXIT;
      END;
      IF NOT lProvider.GET(pProviderNo) THEN BEGIN
        EXIT;
      END;

      AddTextToTrack(STRSUBSTNO(ProvBusinessHoursText,lProvider."No.",lProvider.Name));
    END;

    PROCEDURE AddTitleSelectedProvider@1100281002();
    BEGIN
      IF NOT InitializeOK THEN BEGIN
        EXIT;
      END;
      AddTextToTrack('  ' + SeparatorText);
      AddTextToTrack(ProvSelectedText);
      AddTextToTrack('  ' + SeparatorText);
    END;

    PROCEDURE AddPressentTitle@1100281003();
    BEGIN
      IF NOT InitializeOK THEN BEGIN
        EXIT;
      END;
      AddTextToTrack('  ' + SeparatorText);
      AddTextToTrack(ProvPressentTitleText);
      AddTextToTrack('  ' + SeparatorText);
    END;

    PROCEDURE AddSelectCriterion@1100281009();
    BEGIN
      IF NOT InitializeOK THEN BEGIN
        EXIT;
      END;
      AddTextToTrack('  ' + SeparatorText);
      AddTextToTrack(ProvFiltersText);
      AddTextToTrack('  ' + SeparatorText);
    END;

    PROCEDURE AddSelectedProvider@1100281004(pProviderNo@1100281001 : Code[20];pWithInterInfo@1100281003 : Boolean);
    VAR
      lSecondProviderSearch@1100281002 : Codeunit 50285;
      lProvider@1100281000 : Record 50000;
    BEGIN
      IF NOT InitializeOK THEN BEGIN
        EXIT;
      END;
      IF NOT lProvider.GET(pProviderNo) THEN BEGIN
        EXIT;
      END;

      IF NOT pWithInterInfo THEN BEGIN
        AddTextToTrack(STRSUBSTNO(ProvSelectedNameText,lProvider."No.",lProvider.Name,''));
      END ELSE BEGIN
        AddTextToTrack(STRSUBSTNO(ProvSelectedNameText,lProvider."No.",lProvider.Name,GetLastIntervDate(lProvider."No.")));
      END;
    END;

    LOCAL PROCEDURE AddTextToTrack@1100481003(pText@1100481000 : Text[1024]);
    BEGIN
      IF NOT InitializeOK THEN BEGIN
        EXIT;
      END;
      SearchTrackFile.WRITE(pText + FORMAT(0D));
    END;

    PROCEDURE CloseTrack@1100281000();
    BEGIN
      IF NOT InitializeOK THEN BEGIN
        EXIT;
      END;
      SearchTrackFile.CLOSE;
    END;

    PROCEDURE DownloadTrack@1100281024();
    VAR
      lUserSetup@1100281002 : Record 91;
      lTraceFileName@1100281001 : Text[1024];
    BEGIN
      lUserSetup.GET(USERID);
      IF NOT lUserSetup."Search Trace Enable" THEN BEGIN
        EXIT;
      END;

      lTraceFileName := lUserSetup."Search Trace Path" + lUserSetup."Search Trace File Name";
      IF EXISTS(lTraceFileName) THEN BEGIN
        HYPERLINK(lTraceFileName);
      END;
    END;

    PROCEDURE InitializeTrack@1000000000();
    VAR
      lUserSetup@1000000002 : Record 91;
      lTraceFileName@1000000001 : Text[1024];
    BEGIN
      IF NOT ISSERVICETIER THEN BEGIN
        EXIT;
      END;

      IF NOT GUIALLOWED THEN BEGIN
        EXIT;
      END;

      lUserSetup.GET(USERID);
      IF NOT lUserSetup."Search Trace Enable" THEN BEGIN
        EXIT;
      END;
      SearchTrackFileName := lUserSetup."Search Trace Path" + lUserSetup."Search Trace File Name";

      IF NOT InitializeOK THEN BEGIN
        SearchTrackFile.WRITEMODE := TRUE;
        SearchTrackFile.TEXTMODE := TRUE;
        IF NOT EXISTS(SearchTrackFileName) THEN BEGIN
          IF NOT SearchTrackFile.CREATE(SearchTrackFileName) THEN BEGIN
            EXIT;
          END;
        END ELSE BEGIN
          //ERASE(SearchTrackFileName);
          //SearchTrackFile.CREATE(SearchTrackFileName)
          SearchTrackFile.OPEN(SearchTrackFileName);
          SearchTrackFile.SEEK(SearchTrackFile.LEN);
        END;
        InitializeOK := TRUE;

        AddTextToTrack('');
        AddTextToTrack('');
        AddTextToTrack(SeparatorStar);
        AddTextToTrack(STRSUBSTNO(StartInformationText,CURRENTDATETIME,USERID));
        AddTextToTrack(SeparatorStar);
      END;
    END;

    LOCAL PROCEDURE GetLastIntervDate@1100281029(pProviderNo@1100281000 : Code[20]) : Text[1024];
    VAR
      lInterv@1100281001 : Record 50075;
    BEGIN
      lInterv.SETCURRENTKEY("Provider No.",Claim,"Assigned Date","Service Header Claims No.");
      lInterv.SETRANGE("Provider No.", pProviderNo);
      lInterv.SETRANGE(Claim, FALSE);
      IF lInterv.FINDLAST THEN BEGIN
        EXIT(
          '- ' + lInterv."Service Header No." + ' - ' +
          FORMAT(lInterv."Intervention No.") + ' : ' +
          FORMAT(lInterv."Assigned Date"));
      END;
    END;

    BEGIN
    {
      /** @r IMH01 @d 10/04/14 @a ISAT.PC @v IMH6.01.P011 @s New Provider Search @c Creation */
    }
    END.
  }
}