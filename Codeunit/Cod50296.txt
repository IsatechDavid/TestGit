OBJECT Codeunit 50296 Test Single Front Office
{
  OBJECT-PROPERTIES
  {
    Date=12/11/13;
    Time=15:15:39;
    Modified=Yes;
    Version List=IMH6.01,FOU;
  }
  PROPERTIES
  {
    OnRun=VAR
            lFileNameToExport@1100281001 : Text[1024];
            lTextBuffer@1000000001 : Text[1024];
            lBoolean@1000000000 : Boolean;
          BEGIN
            // Dev
            WebServiceAddress := 'http://simhns07:7061/NST2009R2_Dev_IMH/WS/IMH - Dev/Codeunit/SingleFrontOfficeWS';
            // Recette
            //WebServiceAddress := 'http://simhns08:7065/NST2009R2_RECETTE_IMH/WS/IMH - Recette/Codeunit/SingleFrontOfficeWS';
            // Pr‚prod
            //WebServiceAddress := 'http://simhns08:7063/NST2009R2_PREPROD_IMH/WS/IMH - Preprod/Codeunit/FOUWS';

            // ENABLE SEND MSG
            EnableSendMessage := TRUE;

            lFileNameToExport := CommonDialogMgt.OpenFile(Text005,'Dummy',4,Text009,1);
            IF lFileNameToExport = '' THEN BEGIN
              EXIT;
            END;
            lTextBuffer := lFileNameToExport;
            WHILE COPYSTR(lTextBuffer,STRLEN(lTextBuffer)) <> '\' DO BEGIN
              lTextBuffer := COPYSTR(lTextBuffer,1,STRLEN(lTextBuffer) - 1);
            END;

            IF lFileNameToExport = '' THEN BEGIN
              ERROR(Text001);
            END;
            lBoolean := TRUE;

            // ***** SimplifiedSearchBeneficiary
            //TestSimpSearchBenefByCU('0326673737');
            //TestSimpSearchBenecificiary(lFileNameToExport,'106427',lBoolean); // nø benef ou nø tel ou nom

            // ***** SimplifiedSearchService
            //TestsimpSearchServiceByCU('630096');
            //TestSimpSearchService(lFileNameToExport,'vabf000123*',lBoolean); // nø service ou nø sinistre

            // ***** CompleteSearchBeneficiary
            {
            TestCompleteSearchBenefByCU(
              '5038671', // pBenneficiaryNo
              '', // pLastName
              '', // pCorporateNo
              '', // pFirstName
              '', // pPhoneNo
              '', // pPostcode
              '', // pCity
              lBoolean); // pSearchLimited
            }
            {
            TestCompleteSearchBeneficiary(
              lFileNameToExport,
              '', // pBenneficiaryNo
              'mondon', // pLastName
              '', // pCorporateNo
              'julie', // pFirstName
              '', // pPhoneNo
              '', // pPostcode
              '', // pCity
              lBoolean); // pSearchLimited
            }

            // ***** CompleteSearchService
            //TestCompleteSearchServiceByCU;
            TestCompleteSearchService(
              lFileNameToExport,
              '', // pServiceNo
              '125M53398M', // pEventNo
              '', // pCorporateNo
              '', // pEventType
              '', // pServiceOrderType
              '', // pPostcode
              '', // pCity
              lBoolean); // pSearchLimited

            {
            // ***** CompleteSearchIntervention
            TestCompleteSearchIntervByCU(
              '*435491', // pServiceNo
              '', // pBenneficiaryNo
              '251759T', // pProviderNo
              '', // pProviderName
              '', // pBuildingTradeNo
              '', // pEventType
              '', // pServiceOrderType
              '', // pPostcode
              '', // City
              lBoolean); // pSearchLimited
            }
            {
            TestCompleteSearchIntervention(
              lFileNameToExport,
              '*435491', // pServiceNo
              '', // pBenneficiaryNo
              '251759T', // pProviderNo
              '', // pProviderName
              '', // pBuildingTradeNo
              '', // pEventType
              '', // pServiceOrderType
              '', // pPostcode
              '', // City
              lBoolean); // pSearchLimited
            }

            // ***** CreateBeneficiary
            //TestCreateBeneficiaryByCU;
            //TestCreateBeneficiary(lFileNameToExport);

            // ***** CreateFolder
            //TestCreateFolderByCU;
            //TestCreateFolder(lFileNameToExport);

            {
            // ***** OpenNavisionCard
            TestOpenNavisionCard(
              lFileNameToExport,
              3, // Card Type
              '', // Service No.
              '', // Service Header No.
              'CT0001599806'); // Contact No.
            }

            // ***** CheckPostCode
            //TestCheckPostCode(lFileNameToExport,'56000');

            // ***** GetPostCodeCity
            //TestGetPostCodeCity(lFileNameToExport,'56000','');

            // ***** GetProduct
            //TestGetProductByCU(lFileNameToExport);
            //TestGetProduct(lFileNameToExport);

            // ***** GetCorporate
            //TestGetCorporate(lFileNameToExport);

            // ***** TestGetServiceOrderType
            //TestGetServiceOrderType(lFileNameToExport);

            // ***** GetSalutationCode
            //TestGetSalutationCode(lFileNameToExport);

            // ***** GetBuildingTrade
            //TestGetBuildingTrade(lFileNameToExport);

            // ***** GetFaultReasonCode
            //TestGetFaultReasonCodeByCU(lFileNameToExport);
            //TestGetFaultReasonCode(lFileNameToExport);

            // ***** GetOccupierNature
            //TestGetOccupierNature(lFileNameToExport);

            // ***** GetResidenceType
            //TestGetResidenceType(lFileNameToExport);

            // ***** GetHousingType
            //TestGetHousingType(lFileNameToExport);

            // ***** GetProductReason
            TestGetProductReasonByCU(lFileNameToExport);
            //TestGetProductReason(lFileNameToExport);

            // ***** GetContactAddress
            {
            TestGetContactAddress(
              lFileNameToExport,
              'CT0000274498', // Contact No.
              'S001'); // Contact Alt. Address Code
            }
          END;

  }
  CODE
  {
    VAR
      ToolsMgt@1100281006 : Codeunit 8016602;
      CommonDialogMgt@1100281000 : Codeunit 412;
      Text001@1100281003 : TextConst 'FRA=Veuilllez s‚lectionner une sortie';
      Text005@1100281002 : TextConst 'ENU=Export Attachment;FRA=Rep document';
      Text008@1100281001 : TextConst 'ENU=Files XML (*.XML)|*.XML;FRA=Fichiers XML (*.XML)|*.XML';
      SingleFrontOfficeWS@1000000000 : Codeunit 50223;
      WebServiceAddress@1100281004 : Text[1024];
      Text009@1100281005 : TextConst 'ENU=Files XML (*.XML)|*.XML;FRA=Tous Fichiers (*.*)|*.*';
      EnableSendMessage@1000000001 : Boolean;

    PROCEDURE TestSimpSearchBenecificiary@1000000019(pFileNameToExport@1000000000 : Text[1024];pValue@1000000003 : Text[50];pSearchLimited@1000000001 : Boolean);
    VAR
      lSentMQBuffer@1000000008 : Record 8016720;
      lwinHTTPService@1000000007 : Automation "{662901FC-6951-4854-9EB2-D9A2570F2B2E} 5.1:{2087C2F4-2CEF-4953-A8AB-66779B670495}:'Microsoft WinHTTP Services, version 5.1'.WinHttpRequest";
      lXmlDom@1000000006 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lInStream@1000000005 : InStream;
      lOutStream@1000000004 : OutStream;
    BEGIN
      lSentMQBuffer."XML Source".CREATEOUTSTREAM(lOutStream);

      lOutStream.WRITETEXT('<?xml version="1.0" encoding="utf-8"?>');
      lOutStream.WRITETEXT('<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" ');
      lOutStream.WRITETEXT('xmlns:xsi="http://www.w3.org/1999/XMLSchema-instance" ');
      lOutStream.WRITETEXT('xmlns:xsd="http://www.w3.org/1999/XMLSchema"> ');
      lOutStream.WRITETEXT('<soap:Body>');
      lOutStream.WRITETEXT('<SimplifiedSearchBenecificiary xmlns="urn:microsoft-dynamics-schemas/codeunit/SingleFrontOfficeWS">');
      IF pValue <> '' THEN BEGIN
        lOutStream.WRITETEXT('<pValue>' + pValue + '</pValue>');
      END ELSE BEGIN
        lOutStream.WRITETEXT('<pValue/>');
      END;
      lOutStream.WRITETEXT('<pCompleteSearchResult/>');
      lOutStream.WRITETEXT('<pSearchLimited>' + FormatBoolean(pSearchLimited) + '</pSearchLimited>');
      lOutStream.WRITETEXT('<pErrorDescription/>');
      lOutStream.WRITETEXT('</SimplifiedSearchBenecificiary>');
      lOutStream.WRITETEXT('</soap:Body>');
      lOutStream.WRITETEXT('</soap:Envelope>');

      IF ISCLEAR(lwinHTTPService) THEN
        CREATE(lwinHTTPService);

      lwinHTTPService.Open('POST',WebServiceAddress,0);
      lwinHTTPService.SetAutoLogonPolicy(0);
      lwinHTTPService.SetRequestHeader('Content-type','text/xml; charset=UTF-8');
      lwinHTTPService.SetRequestHeader('SOAPAction','""');
      //The last parameter set to zero allows to wait till webservice finishes
      lwinHTTPService.SetTimeouts(10000,10000,10000,0);

      lSentMQBuffer.CALCFIELDS("XML Source");
      IF EnableSendMessage THEN BEGIN
        lSentMQBuffer."XML Source".EXPORT(pFileNameToExport + 'SimplifiedSearchBenecificiary_Send.xml');
      END;
      lSentMQBuffer."XML Source".CREATEINSTREAM(lInStream);

      // Envoi de la demande au webservice
      lwinHTTPService.Send(lInStream);

      IF NOT lwinHTTPService.WaitForResponse(600) THEN ERROR('Request timed out.');

      CREATE(lXmlDom);
      lXmlDom.load(lwinHTTPService.ResponseStream);
      lXmlDom.save(pFileNameToExport + 'SimplifiedSearchBenecificiary_Response.xml');
    END;

    PROCEDURE TestSimpSearchBenefByCU@1000000020(pValue@1100281000 : Text[50]);
    VAR
      lBoolean@1000000002 : Boolean;
      lBigText@1000000001 : BigText;
      lErrorText@1000000000 : Text[1024];
    BEGIN
      lBoolean := TRUE;
      SingleFrontOfficeWS.SimplifiedSearchBenecificiary(
        pValue, // nø benef ou nø tel ou nom
        lBigText, // pCompleteSearchResult
        lBoolean, // pSearchLimited
        lErrorText); // pErrorDescription
    END;

    PROCEDURE TestSimpSearchService@1000000010(pFileNameToExport@1000000001 : Text[1024];pValue@1000000000 : Text[50];pSearchLimited@1000000002 : Boolean);
    VAR
      lSentMQBuffer@1000000008 : Record 8016720;
      lwinHTTPService@1000000007 : Automation "{662901FC-6951-4854-9EB2-D9A2570F2B2E} 5.1:{2087C2F4-2CEF-4953-A8AB-66779B670495}:'Microsoft WinHTTP Services, version 5.1'.WinHttpRequest";
      lXmlDom@1000000006 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lInStream@1000000005 : InStream;
      lOutStream@1000000004 : OutStream;
    BEGIN
      lSentMQBuffer."XML Source".CREATEOUTSTREAM(lOutStream);

      lOutStream.WRITETEXT('<?xml version="1.0"  encoding="utf-8"?>');
      lOutStream.WRITETEXT('<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" ');
      lOutStream.WRITETEXT('xmlns:xsi="http://www.w3.org/1999/XMLSchema-instance" ');
      lOutStream.WRITETEXT('xmlns:xsd="http://www.w3.org/1999/XMLSchema"> ');
      lOutStream.WRITETEXT('<soap:Body>');
      lOutStream.WRITETEXT('<SimplifiedSearchService xmlns="urn:microsoft-dynamics-schemas/codeunit/SingleFrontOfficeWS">');
      IF pValue <> '' THEN BEGIN
        lOutStream.WRITETEXT('<pValue>' + pValue + '</pValue>');
      END ELSE BEGIN
        lOutStream.WRITETEXT('<pValue/>');
      END;
      lOutStream.WRITETEXT('<pCompleteSearchResult/>');
      lOutStream.WRITETEXT('<pSearchLimited>' + FormatBoolean(pSearchLimited) + '</pSearchLimited>');
      lOutStream.WRITETEXT('<pErrorDescription/>');
      lOutStream.WRITETEXT('</SimplifiedSearchService>');
      lOutStream.WRITETEXT('</soap:Body>');
      lOutStream.WRITETEXT('</soap:Envelope>');

      IF ISCLEAR(lwinHTTPService) THEN
        CREATE(lwinHTTPService);

      lwinHTTPService.Open('POST',WebServiceAddress,0);
      lwinHTTPService.SetAutoLogonPolicy(0);
      lwinHTTPService.SetRequestHeader('Content-type','text/xml; charset=UTF-8');
      lwinHTTPService.SetRequestHeader('SOAPAction','""');
      //The last parameter set to zero allows to wait till webservice finishes
      lwinHTTPService.SetTimeouts(10000,10000,10000,0);

      lSentMQBuffer.CALCFIELDS("XML Source");
      IF EnableSendMessage THEN BEGIN
        lSentMQBuffer."XML Source".EXPORT(pFileNameToExport + 'SimplifiedSearchService_Send.xml');
      END;
      lSentMQBuffer."XML Source".CREATEINSTREAM(lInStream);

      // Envoi de la demande au webservice
      lwinHTTPService.Send(lInStream);

      IF NOT lwinHTTPService.WaitForResponse(600) THEN ERROR('Request timed out.');

      CREATE(lXmlDom);
      lXmlDom.load(lwinHTTPService.ResponseStream);
      lXmlDom.save(pFileNameToExport + 'SimplifiedSearchService_Response.xml');
    END;

    PROCEDURE TestSimpSearchServiceByCU@1000000021(pValue@1000000003 : Text[50];VAR pCompleteSearchResult@1000000002 : BigText;VAR pSearchLimited@1000000001 : Boolean;VAR pErrorDescription@1000000000 : Text[100]);
    VAR
      lBoolean@1000000006 : Boolean;
      lBigText@1000000005 : BigText;
      lErrorText@1000000004 : Text[1024];
    BEGIN
      lBoolean := TRUE;
      SingleFrontOfficeWS.SimplifiedSearchService(
        'rupp', // nø benef ou nø tel ou nom
        lBigText, // pCompleteSearchResult
        lBoolean, // pSearchLimited
        lErrorText); // pErrorDescription
    END;

    PROCEDURE TestCompleteSearchBeneficiary@1000000017(pFileNameToExport@1000000010 : Text[1024];pBenneficiaryNo@1000000000 : Code[20];pLastName@1000000001 : Text[30];pCorporateNo@1000000002 : Code[20];pFirstName@1000000003 : Text[30];pPhoneNo@1000000004 : Text[30];pPostcode@1000000005 : Code[30];pCity@1000000006 : Code[30];pSearchLimited@1000000008 : Boolean);
    VAR
      lSentMQBuffer@1000000014 : Record 8016720;
      lwinHTTPService@1000000013 : Automation "{662901FC-6951-4854-9EB2-D9A2570F2B2E} 5.1:{2087C2F4-2CEF-4953-A8AB-66779B670495}:'Microsoft WinHTTP Services, version 5.1'.WinHttpRequest";
      lXmlDom@1000000012 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lInStream@1000000011 : InStream;
      lOutStream@1000000015 : OutStream;
    BEGIN
      {
      pFileNameToExport
      pBenneficiaryNo
      pLastName
      pCorporateNo
      pFirstName
      pPhoneNo
      pPostcode
      pCity
      pCompleteSearchResult
      pSearchLimited
      pErrorDescription
      }
      lSentMQBuffer."XML Source".CREATEOUTSTREAM(lOutStream);

      lOutStream.WRITETEXT('<?xml version="1.0"  encoding="utf-8"?>');
      lOutStream.WRITETEXT('<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" ');
      lOutStream.WRITETEXT('xmlns:xsi="http://www.w3.org/1999/XMLSchema-instance" ');
      lOutStream.WRITETEXT('xmlns:xsd="http://www.w3.org/1999/XMLSchema"> ');
      lOutStream.WRITETEXT('<soap:Body>');
      lOutStream.WRITETEXT('<CompleteSearchBeneficiary xmlns="urn:microsoft-dynamics-schemas/codeunit/SingleFrontOfficeWS">');
      IF pBenneficiaryNo <> '' THEN BEGIN
        lOutStream.WRITETEXT('<pBenneficiaryNo>' + pBenneficiaryNo + '</pBenneficiaryNo>');
      END ELSE BEGIN
        lOutStream.WRITETEXT('<pBenneficiaryNo/>');
      END;
      IF pLastName <> '' THEN BEGIN
        lOutStream.WRITETEXT('<pLastName>' + pLastName + '</pLastName>');
      END ELSE BEGIN
        lOutStream.WRITETEXT('<pLastName/>');
      END;
      IF pCorporateNo <> '' THEN BEGIN
        lOutStream.WRITETEXT('<pCorporateNo>' + pCorporateNo + '</pCorporateNo>');
      END ELSE BEGIN
        lOutStream.WRITETEXT('<pCorporateNo/>');
      END;
      IF pFirstName <> '' THEN BEGIN
        lOutStream.WRITETEXT('<pFirstName>' + pFirstName + '</pFirstName>');
      END ELSE BEGIN
        lOutStream.WRITETEXT('<pFirstName/>');
      END;
      IF pPhoneNo <> '' THEN BEGIN
        lOutStream.WRITETEXT('<pPhoneNo>' + pPhoneNo + '</pPhoneNo>');
      END ELSE BEGIN
        lOutStream.WRITETEXT('<pPhoneNo/>');
      END;
      IF pPostcode <> '' THEN BEGIN
        lOutStream.WRITETEXT('<pPostCode>' + pPostcode + '</pPostCode>');
      END ELSE BEGIN
        lOutStream.WRITETEXT('<pPostCode/>');
      END;
      IF pCity <> '' THEN BEGIN
        lOutStream.WRITETEXT('<pCity>' + pCity + '</pCity>');
      END ELSE BEGIN
        lOutStream.WRITETEXT('<pCity/>');
      END;
      lOutStream.WRITETEXT('<pCompleteSearchResult/>');
      lOutStream.WRITETEXT('<pSearchLimited>' + FormatBoolean(pSearchLimited) + '</pSearchLimited>');
      lOutStream.WRITETEXT('<pErrorDescription/>');
      lOutStream.WRITETEXT('</CompleteSearchBeneficiary>');
      lOutStream.WRITETEXT('</soap:Body>');
      lOutStream.WRITETEXT('</soap:Envelope>');

      IF ISCLEAR(lwinHTTPService) THEN
        CREATE(lwinHTTPService);

      lwinHTTPService.Open('POST',WebServiceAddress,0);
      lwinHTTPService.SetAutoLogonPolicy(0);
      lwinHTTPService.SetRequestHeader('Content-type','text/xml; charset=UTF-8');
      lwinHTTPService.SetRequestHeader('SOAPAction','""');
      //The last parameter set to zero allows to wait till webservice finishes
      lwinHTTPService.SetTimeouts(10000,10000,10000,0);

      lSentMQBuffer.CALCFIELDS("XML Source");
      IF EnableSendMessage THEN BEGIN
        lSentMQBuffer."XML Source".EXPORT(pFileNameToExport + 'CompleteSearchBeneficiary_Send.xml');
      END;
      lSentMQBuffer."XML Source".CREATEINSTREAM(lInStream);

      // Envoi de la demande au webservice
      lwinHTTPService.Send(lInStream);

      IF NOT lwinHTTPService.WaitForResponse(600) THEN ERROR('Request timed out.');

      CREATE(lXmlDom);
      lXmlDom.load(lwinHTTPService.ResponseStream);
      lXmlDom.save(pFileNameToExport + 'CompleteSearchBeneficiary_Response.xml');
    END;

    PROCEDURE TestCompleteSearchBenefByCU@1000000000(pBenneficiaryNo@1100281007 : Code[20];pLastName@1100281006 : Text[30];pCorporateNo@1100281005 : Code[20];pFirstName@1100281004 : Text[30];pPhoneNo@1100281003 : Text[30];pPostcode@1100281002 : Code[30];pCity@1100281001 : Code[30];pSearchLimited@1100281000 : Boolean);
    VAR
      lBoolean@1000000002 : Boolean;
      lBigText@1000000000 : BigText;
      lErrorText@1000000001 : Text[1024];
    BEGIN
      // Test par CU Navision
      lBoolean := TRUE;
      SingleFrontOfficeWS.CompleteSearchBeneficiary(
        pBenneficiaryNo, // pBenneficiaryNo
        pLastName, // pLastName
        pCorporateNo, // pCorporateNo
        pFirstName, // pFirstName
        pPhoneNo, // pPhoneNo
        pPostcode, // pPostcode
        pCity, // pCity
        lBigText, // pCompleteSearchResult
        lBoolean, // pSearchLimited
        lErrorText); // pErrorDescription
    END;

    PROCEDURE TestCompleteSearchService@1000000016(pFileNameToExport@1000000011 : Text[1024];pServiceNo@1000000000 : Code[20];pEventNo@1000000001 : Text[30];pCorporateNo@1000000002 : Code[20];pEventType@1000000003 : Code[10];pServiceOrderType@1000000004 : Code[20];pPostCode@1000000005 : Code[30];pCity@1000000006 : Code[30];VAR pSearchLimited@1000000009 : Boolean);
    VAR
      lSentMQBuffer@1000000014 : Record 8016720;
      lwinHTTPService@1000000013 : Automation "{662901FC-6951-4854-9EB2-D9A2570F2B2E} 5.1:{2087C2F4-2CEF-4953-A8AB-66779B670495}:'Microsoft WinHTTP Services, version 5.1'.WinHttpRequest";
      lXmlDom@1000000012 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lInStream@1000000007 : InStream;
      lOutStream@1000000015 : OutStream;
    BEGIN
      lSentMQBuffer."XML Source".CREATEOUTSTREAM(lOutStream);

      lOutStream.WRITETEXT('<?xml version="1.0"  encoding="utf-8"?>');
      lOutStream.WRITETEXT('<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" ');
      lOutStream.WRITETEXT('xmlns:xsi="http://www.w3.org/1999/XMLSchema-instance" ');
      lOutStream.WRITETEXT('xmlns:xsd="http://www.w3.org/1999/XMLSchema"> ');
      lOutStream.WRITETEXT('<soap:Body>');
      lOutStream.WRITETEXT('<CompleteSearchService xmlns="urn:microsoft-dynamics-schemas/codeunit/SingleFrontOfficeWS">');
      IF pServiceNo <> '' THEN BEGIN
        lOutStream.WRITETEXT('<pServiceNo>' + pServiceNo + '</pServiceNo>');
      END ELSE BEGIN
        lOutStream.WRITETEXT('<pServiceNo/>');
      END;
      IF pEventNo <> '' THEN BEGIN
        lOutStream.WRITETEXT('<pEventNo>' + pEventNo + '</pEventNo>');
      END ELSE BEGIN
        lOutStream.WRITETEXT('<pEventNo/>');
      END;
      IF pCorporateNo <> '' THEN BEGIN
        lOutStream.WRITETEXT('<pCorporateNo>' + pCorporateNo + '</pCorporateNo>');
      END ELSE BEGIN
        lOutStream.WRITETEXT('<pCorporateNo/>');
      END;
      IF pEventType <> '' THEN BEGIN
        lOutStream.WRITETEXT('<pEventType>' + pEventType + '</pEventType>');
      END ELSE BEGIN
        lOutStream.WRITETEXT('<pEventType/>');
      END;
      IF pServiceOrderType <> '' THEN BEGIN
        lOutStream.WRITETEXT('<pServiceOrderType>' + pServiceOrderType + '</pServiceOrderType>');
      END ELSE BEGIN
        lOutStream.WRITETEXT('<pServiceOrderType/>');
      END;
      IF pPostCode <> '' THEN BEGIN
        lOutStream.WRITETEXT('<pPostCode>' + pPostCode + '</pPostCode>');
      END ELSE BEGIN
        lOutStream.WRITETEXT('<pPostCode/>');
      END;
      IF pCity <> '' THEN BEGIN
        lOutStream.WRITETEXT('<pCity>' + pCity + '</pCity>');
      END ELSE BEGIN
        lOutStream.WRITETEXT('<pCity/>');
      END;
      lOutStream.WRITETEXT('<pCompleteSearchResult/>');
      lOutStream.WRITETEXT('<pSearchLimited>' + FormatBoolean(pSearchLimited) + '</pSearchLimited>');
      lOutStream.WRITETEXT('<pErrorDescription/>');
      lOutStream.WRITETEXT('</CompleteSearchService>');
      lOutStream.WRITETEXT('</soap:Body>');
      lOutStream.WRITETEXT('</soap:Envelope>');

      IF ISCLEAR(lwinHTTPService) THEN
        CREATE(lwinHTTPService);

      lwinHTTPService.Open('POST',WebServiceAddress,0);
      lwinHTTPService.SetAutoLogonPolicy(0);
      lwinHTTPService.SetRequestHeader('Content-type','text/xml; charset=UTF-8');
      lwinHTTPService.SetRequestHeader('SOAPAction','""');
      //The last parameter set to zero allows to wait till webservice finishes
      lwinHTTPService.SetTimeouts(10000,10000,10000,0);

      lSentMQBuffer.CALCFIELDS("XML Source");
      IF EnableSendMessage THEN BEGIN
        lSentMQBuffer."XML Source".EXPORT(pFileNameToExport + 'CompleteSearchService.xml');
      END;
      lSentMQBuffer."XML Source".CREATEINSTREAM(lInStream);

      // Envoi de la demande au webservice
      lwinHTTPService.Send(lInStream);

      IF NOT lwinHTTPService.WaitForResponse(600) THEN ERROR('Request timed out.');

      CREATE(lXmlDom);
      lXmlDom.load(lwinHTTPService.ResponseStream);
      lXmlDom.save(pFileNameToExport + 'CompleteSearchService_Response.xml');
    END;

    PROCEDURE TestCompleteSearchServiceByCU@1000000002();
    VAR
      lBoolean@1000000002 : Boolean;
      lBigText@1000000001 : BigText;
      lErrorText@1000000000 : Text[1024];
    BEGIN
      lBoolean := TRUE;
      SingleFrontOfficeWS.CompleteSearchService(
        '63009*', // pServiceNo
        '', // pEventNo
        '', // pCorporateNo
        '', // pEventType
        '', // pServiceOrderType
        '', // pPostcode
        '', // pCity
        lBigText, // pCompleteSearchResult
        lBoolean, // pSearchLimited
        lErrorText); // pErrorDescription
    END;

    PROCEDURE TestCompleteSearchIntervention@1000000015(pFileNameToExport@1000000011 : Text[1024];pServiceNo@1100281000 : Code[20];pBenneficiaryNo@1100281002 : Code[20];pProviderNo@1000000000 : Code[20];pProviderName@1000000001 : Text[30];pBuildingTradeNo@1000000002 : Code[20];pEventType@1000000003 : Code[10];pServiceOrderType@1000000004 : Code[20];pPostCode@1000000005 : Code[30];pCity@1000000006 : Code[30];VAR pSearchLimited@1000000009 : Boolean);
    VAR
      lSentMQBuffer@1000000014 : Record 8016720;
      lwinHTTPService@1000000013 : Automation "{662901FC-6951-4854-9EB2-D9A2570F2B2E} 5.1:{2087C2F4-2CEF-4953-A8AB-66779B670495}:'Microsoft WinHTTP Services, version 5.1'.WinHttpRequest";
      lXmlDom@1000000012 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lInStream@1000000007 : InStream;
      lOutStream@1000000015 : OutStream;
    BEGIN
      lSentMQBuffer."XML Source".CREATEOUTSTREAM(lOutStream);

      lOutStream.WRITETEXT('<?xml version="1.0"  encoding="utf-8"?>');
      lOutStream.WRITETEXT('<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" ');
      lOutStream.WRITETEXT('xmlns:xsi="http://www.w3.org/1999/XMLSchema-instance" ');
      lOutStream.WRITETEXT('xmlns:xsd="http://www.w3.org/1999/XMLSchema"> ');
      lOutStream.WRITETEXT('<soap:Body>');
      lOutStream.WRITETEXT('<CompleteSearchIntervention xmlns="urn:microsoft-dynamics-schemas/codeunit/SingleFrontOfficeWS">');
      IF pServiceNo <> '' THEN BEGIN
        lOutStream.WRITETEXT('<pServiceNo>' + pServiceNo + '</pServiceNo>');
      END ELSE BEGIN
        lOutStream.WRITETEXT('<pServiceNo/>');
      END;
      IF pBenneficiaryNo <> '' THEN BEGIN
        lOutStream.WRITETEXT('<pBenneficiaryNo>' + pBenneficiaryNo + '</pBenneficiaryNo>');
      END ELSE BEGIN
        lOutStream.WRITETEXT('<pBenneficiaryNo/>');
      END;
      IF pProviderNo <> '' THEN BEGIN
        lOutStream.WRITETEXT('<pProviderNo>' + pProviderNo + '</pProviderNo>');
      END ELSE BEGIN
        lOutStream.WRITETEXT('<pProviderNo/>');
      END;
      IF pProviderName <> '' THEN BEGIN
        lOutStream.WRITETEXT('<pProviderName>' + pProviderName + '</pProviderName>');
      END ELSE BEGIN
        lOutStream.WRITETEXT('<pProviderName/>');
      END;
      IF pBuildingTradeNo <> '' THEN BEGIN
        lOutStream.WRITETEXT('<pBuildingTradeNo>' + pBuildingTradeNo + '</pBuildingTradeNo>');
      END ELSE BEGIN
        lOutStream.WRITETEXT('<pBuildingTradeNo/>');
      END;
      IF pEventType <> '' THEN BEGIN
        lOutStream.WRITETEXT('<pEventType>' + pEventType + '</pEventType>');
      END ELSE BEGIN
        lOutStream.WRITETEXT('<pEventType/>');
      END;
      IF pServiceOrderType <> '' THEN BEGIN
        lOutStream.WRITETEXT('<pServiceOrderType>' + pServiceOrderType + '</pServiceOrderType>');
      END ELSE BEGIN
        lOutStream.WRITETEXT('<pServiceOrderType/>');
      END;
      IF pPostCode <> '' THEN BEGIN
        lOutStream.WRITETEXT('<pPostCode>' + pPostCode + '</pPostCode>');
      END ELSE BEGIN
        lOutStream.WRITETEXT('<pPostCode/>');
      END;
      IF pCity <> '' THEN BEGIN
        lOutStream.WRITETEXT('<pCity>' + pCity + '</pCity>');
      END ELSE BEGIN
        lOutStream.WRITETEXT('<pCity/>');
      END;
      lOutStream.WRITETEXT('<pCompleteSearchResult/>');
      lOutStream.WRITETEXT('<pSearchLimited>' + FormatBoolean(pSearchLimited) + '</pSearchLimited>');
      lOutStream.WRITETEXT('<pErrorDescription/>');
      lOutStream.WRITETEXT('</CompleteSearchIntervention>');
      lOutStream.WRITETEXT('</soap:Body>');
      lOutStream.WRITETEXT('</soap:Envelope>');

      IF ISCLEAR(lwinHTTPService) THEN
        CREATE(lwinHTTPService);

      lwinHTTPService.Open('POST',WebServiceAddress,0);
      lwinHTTPService.SetAutoLogonPolicy(0);
      lwinHTTPService.SetRequestHeader('Content-type','text/xml; charset=UTF-8');
      lwinHTTPService.SetRequestHeader('SOAPAction','""');
      //The last parameter set to zero allows to wait till webservice finishes
      lwinHTTPService.SetTimeouts(10000,10000,10000,0);

      lSentMQBuffer.CALCFIELDS("XML Source");
      IF EnableSendMessage THEN BEGIN
        lSentMQBuffer."XML Source".EXPORT(pFileNameToExport + 'CompleteSearchIntervention_Send.xml');
      END;
      lSentMQBuffer."XML Source".CREATEINSTREAM(lInStream);

      // Envoi de la demande au webservice
      lwinHTTPService.Send(lInStream);

      IF NOT lwinHTTPService.WaitForResponse(600) THEN ERROR('Request timed out.');

      CREATE(lXmlDom);
      lXmlDom.load(lwinHTTPService.ResponseStream);
      lXmlDom.save(pFileNameToExport + 'CompleteSearchIntervention_Response.xml');
    END;

    PROCEDURE TestCompleteSearchIntervByCU@1000000005(pServiceNo@1100281009 : Code[20];pBenneficiaryNo@1100281008 : Code[20];pProviderNo@1100281007 : Code[20];pProviderName@1100281006 : Text[30];pBuildingTradeNo@1100281005 : Code[20];pEventType@1100281004 : Code[10];pServiceOrderType@1100281003 : Code[20];pPostCode@1100281002 : Code[30];pCity@1100281001 : Code[30];VAR pSearchLimited@1100281000 : Boolean);
    VAR
      lBoolean@1000000002 : Boolean;
      lBigText@1000000001 : BigText;
      lErrorText@1000000000 : Text[1024];
    BEGIN

      lBoolean := TRUE;
      SingleFrontOfficeWS.CompleteSearchIntervention(
        pServiceNo,
        pBenneficiaryNo,
        pProviderNo,
        pProviderName,
        pBuildingTradeNo,
        pEventType,
        pServiceOrderType,
        pPostCode,
        pCity,
        lBigText,
        pSearchLimited,
        lErrorText);
    END;

    PROCEDURE TestCreateBeneficiary@1000000007(pFileNameToExport@1000000006 : Text[1024]);
    VAR
      lSentMQBuffer@1000000007 : Record 8016720;
      lwinHTTPService@1000000005 : Automation "{662901FC-6951-4854-9EB2-D9A2570F2B2E} 5.1:{2087C2F4-2CEF-4953-A8AB-66779B670495}:'Microsoft WinHTTP Services, version 5.1'.WinHttpRequest";
      lXmlDom@1000000004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lInStream@1000000003 : InStream;
      lInStreamToAdd@1100281001 : InStream;
      lOutStream@1000000008 : OutStream;
      lFilePathToAdd@1100281000 : Text[1024];
      lFileToAdd@1100281002 : File;
    BEGIN
      lSentMQBuffer."XML Source".CREATEOUTSTREAM(lOutStream);

      lOutStream.WRITETEXT('<?xml version="1.0"  encoding="utf-8"?>');
      lOutStream.WRITETEXT('<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" ');
      lOutStream.WRITETEXT('xmlns:xsi="http://www.w3.org/1999/XMLSchema-instance" ');
      lOutStream.WRITETEXT('xmlns:xsd="http://www.w3.org/1999/XMLSchema"> ');
      lOutStream.WRITETEXT('<soap:Body>');
      lOutStream.WRITETEXT('<CreateBeneficiary xmlns="urn:microsoft-dynamics-schemas/codeunit/SingleFrontOfficeWS">');
      lOutStream.WRITETEXT('<pContactNo/>');
      lOutStream.WRITETEXT('<pContactData>');
      lFilePathToAdd := CommonDialogMgt.OpenFile(Text005,'',4,Text009,1);
      lFileToAdd.OPEN(lFilePathToAdd);
      lFileToAdd.CREATEINSTREAM(lInStreamToAdd);
      COPYSTREAM(lOutStream,lInStreamToAdd);
      lOutStream.WRITETEXT('</pContactData>');
      lOutStream.WRITETEXT('<pErrorDescription/>');
      lOutStream.WRITETEXT('</CreateBeneficiary>');
      lOutStream.WRITETEXT('</soap:Body>');
      lOutStream.WRITETEXT('</soap:Envelope>');

      IF ISCLEAR(lwinHTTPService) THEN
        CREATE(lwinHTTPService);

      lwinHTTPService.Open('POST',WebServiceAddress,0);
      lwinHTTPService.SetAutoLogonPolicy(0);
      lwinHTTPService.SetRequestHeader('Content-type','text/xml; charset=UTF-8');
      lwinHTTPService.SetRequestHeader('SOAPAction','""');
      //The last parameter set to zero allows to wait till webservice finishes
      lwinHTTPService.SetTimeouts(10000,10000,10000,0);

      lSentMQBuffer.CALCFIELDS("XML Source");
      IF EnableSendMessage THEN BEGIN
        lSentMQBuffer."XML Source".EXPORT(pFileNameToExport + 'CreateBeneficiary_Send.xml');
      END;
      lSentMQBuffer."XML Source".CREATEINSTREAM(lInStream);

      // Envoi de la demande au webservice
      lwinHTTPService.Send(lInStream);

      IF NOT lwinHTTPService.WaitForResponse(600) THEN ERROR('Request timed out.');

      CREATE(lXmlDom);
      lXmlDom.load(lwinHTTPService.ResponseStream);
      lXmlDom.save(pFileNameToExport + 'CreateBeneficiary_Response.xml');
    END;

    PROCEDURE TestCreateBeneficiaryByCU@1100281001();
    VAR
      lBoolean@1100281005 : Boolean;
      lBigText@1100281004 : BigText;
      lInStreamToAdd@1100281002 : InStream;
      lFilePathToAdd@1100281001 : Text[1024];
      lErrorText@1100281003 : Text[1024];
      lFileToAdd@1100281000 : File;
      lContactNo@1100281006 : Code[20];
      lTest@1100281007 : Integer;
    BEGIN
      lFilePathToAdd := CommonDialogMgt.OpenFile(Text005,'',4,Text009,1);
      lFileToAdd.OPEN(lFilePathToAdd);
      lFileToAdd.CREATEINSTREAM(lInStreamToAdd);
      lBigText.READ(lInStreamToAdd);
      lTest := lBigText.LENGTH;
      SingleFrontOfficeWS.CreateBeneficiary(lBigText,lContactNo,lErrorText)
    END;

    PROCEDURE TestGetServiceOrderType@1000000008(pFileNameToExport@1000000002 : Text[1024]);
    VAR
      lSentMQBuffer@1000000005 : Record 8016720;
      lwinHTTPService@1000000004 : Automation "{662901FC-6951-4854-9EB2-D9A2570F2B2E} 5.1:{2087C2F4-2CEF-4953-A8AB-66779B670495}:'Microsoft WinHTTP Services, version 5.1'.WinHttpRequest";
      lXmlDom@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lInStream@1000000001 : InStream;
      lOutStream@1000000006 : OutStream;
    BEGIN
      lSentMQBuffer."XML Source".CREATEOUTSTREAM(lOutStream);

      lOutStream.WRITETEXT('<?xml version="1.0"  encoding="utf-8"?>');
      lOutStream.WRITETEXT('<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" ');
      lOutStream.WRITETEXT('xmlns:xsi="http://www.w3.org/1999/XMLSchema-instance" ');
      lOutStream.WRITETEXT('xmlns:xsd="http://www.w3.org/1999/XMLSchema"> ');
      lOutStream.WRITETEXT('<soap:Body>');
      lOutStream.WRITETEXT('<GetServiceOrderType xmlns="urn:microsoft-dynamics-schemas/codeunit/SingleFrontOfficeWS">');
      lOutStream.WRITETEXT('<pServiceOrderTypeList/>');
      lOutStream.WRITETEXT('</GetServiceOrderType>');
      lOutStream.WRITETEXT('</soap:Body>');
      lOutStream.WRITETEXT('</soap:Envelope>');

      IF ISCLEAR(lwinHTTPService) THEN
        CREATE(lwinHTTPService);

      lwinHTTPService.Open('POST',WebServiceAddress,0);
      lwinHTTPService.SetAutoLogonPolicy(0);
      lwinHTTPService.SetRequestHeader('Content-type','text/xml; charset=UTF-8');
      lwinHTTPService.SetRequestHeader('SOAPAction','""');
      //The last parameter set to zero allows to wait till webservice finishes
      lwinHTTPService.SetTimeouts(10000,10000,10000,0);

      lSentMQBuffer.CALCFIELDS("XML Source");
      IF EnableSendMessage THEN BEGIN
        lSentMQBuffer."XML Source".EXPORT(pFileNameToExport + 'GetServiceOrderType_Send.xml');
      END;
      lSentMQBuffer."XML Source".CREATEINSTREAM(lInStream);

      // Envoi de la demande au webservice
      lwinHTTPService.Send(lInStream);

      IF NOT lwinHTTPService.WaitForResponse(600) THEN ERROR('Request timed out.');

      CREATE(lXmlDom);
      lXmlDom.load(lwinHTTPService.ResponseStream);
      lXmlDom.save(pFileNameToExport + 'GetServiceOrderType_Response.xml');
    END;

    PROCEDURE TestGetProduct@1000000009(pFileNameToExport@1000000007 : Text[1024]);
    VAR
      lSentMQBuffer@1000000004 : Record 8016720;
      lwinHTTPService@1000000003 : Automation "{662901FC-6951-4854-9EB2-D9A2570F2B2E} 5.1:{2087C2F4-2CEF-4953-A8AB-66779B670495}:'Microsoft WinHTTP Services, version 5.1'.WinHttpRequest";
      lXmlDom@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lInStream@1000000001 : InStream;
      lOutStream@1000000005 : OutStream;
    BEGIN
      lSentMQBuffer."XML Source".CREATEOUTSTREAM(lOutStream);

      lOutStream.WRITETEXT('<?xml version="1.0"  encoding="utf-8"?>');
      lOutStream.WRITETEXT('<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" ');
      lOutStream.WRITETEXT('xmlns:xsi="http://www.w3.org/1999/XMLSchema-instance" ');
      lOutStream.WRITETEXT('xmlns:xsd="http://www.w3.org/1999/XMLSchema"> ');
      lOutStream.WRITETEXT('<soap:Body>');
      lOutStream.WRITETEXT('<GetProduct xmlns="urn:microsoft-dynamics-schemas/codeunit/SingleFrontOfficeWS">');
      lOutStream.WRITETEXT('<pProductList>?</pProductList>');
      lOutStream.WRITETEXT('</GetProduct>');
      lOutStream.WRITETEXT('</soap:Body>');
      lOutStream.WRITETEXT('</soap:Envelope>');

      IF ISCLEAR(lwinHTTPService) THEN
        CREATE(lwinHTTPService);

      lwinHTTPService.Open('POST',WebServiceAddress,0);
      lwinHTTPService.SetAutoLogonPolicy(0);
      lwinHTTPService.SetRequestHeader('Content-type','text/xml; charset=UTF-8');
      lwinHTTPService.SetRequestHeader('SOAPAction','""');
      //The last parameter set to zero allows to wait till webservice finishes
      lwinHTTPService.SetTimeouts(10000,10000,10000,0);

      lSentMQBuffer.CALCFIELDS("XML Source");
      IF EnableSendMessage THEN BEGIN
        lSentMQBuffer."XML Source".EXPORT(pFileNameToExport + 'GetProduct_Send.xml');
      END;
      lSentMQBuffer."XML Source".CREATEINSTREAM(lInStream);

      // Envoi de la demande au webservice
      lwinHTTPService.Send(lInStream);

      IF NOT lwinHTTPService.WaitForResponse(600) THEN ERROR('Request timed out.');

      CREATE(lXmlDom);
      lXmlDom.load(lwinHTTPService.ResponseStream);
      lXmlDom.save(pFileNameToExport + 'GetProduct_Response.xml');
    END;

    PROCEDURE TestGetProductByCU@1100281003(pFileNameToExport@1000000002 : Text[1024]);
    VAR
      lBigText@1100281000 : BigText;
      lFile@1000000000 : File;
      lOutStream@1000000001 : OutStream;
    BEGIN
      SingleFrontOfficeWS.GetProduct(lBigText);
      lFile.CREATE(pFileNameToExport + 'GetProductByCU.xml');
      lFile.CREATEOUTSTREAM(lOutStream);
      lBigText.WRITE(lOutStream);
      lFile.CLOSE;
    END;

    PROCEDURE TestGetCorporate@1000000011(pFileNameToExport@1000000010 : Text[1024]);
    VAR
      lSentMQBuffer@1000000004 : Record 8016720;
      lwinHTTPService@1000000003 : Automation "{662901FC-6951-4854-9EB2-D9A2570F2B2E} 5.1:{2087C2F4-2CEF-4953-A8AB-66779B670495}:'Microsoft WinHTTP Services, version 5.1'.WinHttpRequest";
      lXmlDom@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lInStream@1000000001 : InStream;
      lOutStream@1000000005 : OutStream;
    BEGIN
      lSentMQBuffer."XML Source".CREATEOUTSTREAM(lOutStream);

      lOutStream.WRITETEXT('<?xml version="1.0"  encoding="utf-8"?>');
      lOutStream.WRITETEXT('<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" ');
      lOutStream.WRITETEXT('xmlns:xsi="http://www.w3.org/1999/XMLSchema-instance" ');
      lOutStream.WRITETEXT('xmlns:xsd="http://www.w3.org/1999/XMLSchema"> ');
      lOutStream.WRITETEXT('<soap:Body>');
      lOutStream.WRITETEXT('<GetCorporate xmlns="urn:microsoft-dynamics-schemas/codeunit/SingleFrontOfficeWS">');
      lOutStream.WRITETEXT('<pCorporateList/>');
      lOutStream.WRITETEXT('</GetCorporate>');
      lOutStream.WRITETEXT('</soap:Body>');
      lOutStream.WRITETEXT('</soap:Envelope>');

      IF ISCLEAR(lwinHTTPService) THEN
        CREATE(lwinHTTPService);

      lwinHTTPService.Open('POST',WebServiceAddress,0);
      lwinHTTPService.SetAutoLogonPolicy(0);
      lwinHTTPService.SetRequestHeader('Content-type','text/xml; charset=UTF-8');
      lwinHTTPService.SetRequestHeader('SOAPAction','""');
      //The last parameter set to zero allows to wait till webservice finishes
      lwinHTTPService.SetTimeouts(10000,10000,10000,0);

      lSentMQBuffer.CALCFIELDS("XML Source");
      IF EnableSendMessage THEN BEGIN
        lSentMQBuffer."XML Source".EXPORT(pFileNameToExport + 'GetCorporate_Send.xml');
      END;
      lSentMQBuffer."XML Source".CREATEINSTREAM(lInStream);

      // Envoi de la demande au webservice
      lwinHTTPService.Send(lInStream);

      IF NOT lwinHTTPService.WaitForResponse(600) THEN ERROR('Request timed out.');

      CREATE(lXmlDom);
      lXmlDom.load(lwinHTTPService.ResponseStream);
      lXmlDom.save(pFileNameToExport + 'GetCorporate_Response.xml');
    END;

    PROCEDURE TestCheckPostCode@1000000012(pFileNameToExport@1000000001 : Text[1024];pPostCode@1000000000 : Code[20]) rValue : Boolean;
    VAR
      lSentMQBuffer@1000000005 : Record 8016720;
      lwinHTTPService@1000000004 : Automation "{662901FC-6951-4854-9EB2-D9A2570F2B2E} 5.1:{2087C2F4-2CEF-4953-A8AB-66779B670495}:'Microsoft WinHTTP Services, version 5.1'.WinHttpRequest";
      lXmlDom@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lInStream@1000000002 : InStream;
      lOutStream@1000000006 : OutStream;
    BEGIN
      lSentMQBuffer."XML Source".CREATEOUTSTREAM(lOutStream);

      lOutStream.WRITETEXT('<?xml version="1.0"  encoding="utf-8"?>');
      lOutStream.WRITETEXT('<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" ');
      lOutStream.WRITETEXT('xmlns:xsi="http://www.w3.org/1999/XMLSchema-instance" ');
      lOutStream.WRITETEXT('xmlns:xsd="http://www.w3.org/1999/XMLSchema"> ');
      lOutStream.WRITETEXT('<soap:Body>');
      lOutStream.WRITETEXT('<CheckPostCode xmlns="urn:microsoft-dynamics-schemas/codeunit/SingleFrontOfficeWS">');
      IF pPostCode <> '' THEN BEGIN
        lOutStream.WRITETEXT('<pPostCode>' + pPostCode + '</pPostCode>');
      END ELSE BEGIN
        lOutStream.WRITETEXT('<pPostCode/>');
      END;
      lOutStream.WRITETEXT('</CheckPostCode>');
      lOutStream.WRITETEXT('</soap:Body>');
      lOutStream.WRITETEXT('</soap:Envelope>');

      IF ISCLEAR(lwinHTTPService) THEN
        CREATE(lwinHTTPService);

      lwinHTTPService.Open('POST',WebServiceAddress,0);
      lwinHTTPService.SetAutoLogonPolicy(0);
      lwinHTTPService.SetRequestHeader('Content-type','text/xml; charset=UTF-8');
      lwinHTTPService.SetRequestHeader('SOAPAction','""');
      //The last parameter set to zero allows to wait till webservice finishes
      lwinHTTPService.SetTimeouts(10000,10000,10000,0);

      lSentMQBuffer.CALCFIELDS("XML Source");
      IF EnableSendMessage THEN BEGIN
        lSentMQBuffer."XML Source".EXPORT(pFileNameToExport + 'CheckPostCode_Send.xml');
      END;
      lSentMQBuffer."XML Source".CREATEINSTREAM(lInStream);

      // Envoi de la demande au webservice
      lwinHTTPService.Send(lInStream);

      IF NOT lwinHTTPService.WaitForResponse(600) THEN ERROR('Request timed out.');

      CREATE(lXmlDom);
      lXmlDom.load(lwinHTTPService.ResponseStream);
      lXmlDom.save(pFileNameToExport + 'CheckPostCode_Response.xml');
    END;

    PROCEDURE TestCreateFolder@1000000014(pFileNameToExport@1000000002 : Text[1024]);
    VAR
      lSentMQBuffer@1000000012 : Record 8016720;
      lwinHTTPService@1000000011 : Automation "{662901FC-6951-4854-9EB2-D9A2570F2B2E} 5.1:{2087C2F4-2CEF-4953-A8AB-66779B670495}:'Microsoft WinHTTP Services, version 5.1'.WinHttpRequest";
      lXmlDom@1000000004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lInStream@1000000003 : InStream;
      lInStreamToAdd@1100281003 : InStream;
      lOutStream@1100281002 : OutStream;
      lFilePathToAdd@1100281001 : Text[1024];
      lFileToAdd@1100281000 : File;
    BEGIN
      lSentMQBuffer."XML Source".CREATEOUTSTREAM(lOutStream);

      lOutStream.WRITETEXT('<?xml version="1.0"  encoding="utf-8"?>');
      lOutStream.WRITETEXT('<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" ');
      lOutStream.WRITETEXT('xmlns:xsi="http://www.w3.org/1999/XMLSchema-instance" ');
      lOutStream.WRITETEXT('xmlns:xsd="http://www.w3.org/1999/XMLSchema"> ');
      lOutStream.WRITETEXT('<soap:Body>');
      lOutStream.WRITETEXT('<CreateFolder xmlns="urn:microsoft-dynamics-schemas/codeunit/SingleFrontOfficeWS">');
      lOutStream.WRITETEXT('<pXMLFolder>');
      lFilePathToAdd := CommonDialogMgt.OpenFile(Text005,'',4,Text009,1);
      lFileToAdd.OPEN(lFilePathToAdd);
      lFileToAdd.CREATEINSTREAM(lInStreamToAdd);
      COPYSTREAM(lOutStream,lInStreamToAdd);
      lOutStream.WRITETEXT('</pXMLFolder>');
      lOutStream.WRITETEXT('<pServiceNo/>');
      lOutStream.WRITETEXT('<pServiceHeaderNo/>');
      lOutStream.WRITETEXT('<pErrorDescription/>');
      lOutStream.WRITETEXT('</CreateFolder>');
      lOutStream.WRITETEXT('</soap:Body>');
      lOutStream.WRITETEXT('</soap:Envelope>');

      IF ISCLEAR(lwinHTTPService) THEN
        CREATE(lwinHTTPService);

      lwinHTTPService.Open('POST',WebServiceAddress,0);
      lwinHTTPService.SetAutoLogonPolicy(0);
      lwinHTTPService.SetRequestHeader('Content-type','text/xml; charset=UTF-8');
      lwinHTTPService.SetRequestHeader('SOAPAction','""');
      //The last parameter set to zero allows to wait till webservice finishes
      lwinHTTPService.SetTimeouts(10000,10000,10000,0);

      lSentMQBuffer.CALCFIELDS("XML Source");
      IF EnableSendMessage THEN BEGIN
        lSentMQBuffer."XML Source".EXPORT(pFileNameToExport + 'CreateFolder_Send.xml');
      END;
      lSentMQBuffer."XML Source".CREATEINSTREAM(lInStream);

      // Envoi de la demande au webservice
      lwinHTTPService.Send(lInStream);

      IF NOT lwinHTTPService.WaitForResponse(600) THEN ERROR('Request timed out.');

      CREATE(lXmlDom);
      lXmlDom.load(lwinHTTPService.ResponseStream);
      lXmlDom.save(pFileNameToExport + 'CreateFolder_Response.xml');
    END;

    PROCEDURE TestCreateFolderByCU@1100281006();
    VAR
      lServiceHeaderNo@1100281004 : Code[20];
      lServiceNo@1100281003 : Code[20];
      lBoolean@1100281002 : Boolean;
      lBigText@1100281001 : BigText;
      lErrorText@1100281000 : Text[1024];
      lInStream@1100281008 : InStream;
      lFilePath@1100281006 : Text[1024];
      lFile@1100281005 : File;
    BEGIN
      lFilePath := CommonDialogMgt.OpenFile(Text005,'',4,Text009,1);
      lFile.OPEN(lFilePath);
      lFile.CREATEINSTREAM(lInStream);
      lBigText.READ(lInStream);
      SingleFrontOfficeWS.CreateFolder(lBigText,lServiceNo,lServiceHeaderNo,lErrorText);
    END;

    PROCEDURE TestOpenNavisionCard@1000000001(pFileNameToExport@1000000017 : Text[1024];pCardType@1000000000 : Integer;pServiceNo@1000000001 : Code[20];pServiceHeaderNo@1000000002 : Code[20];pContactNo@1000000003 : Code[20]);
    VAR
      lSentMQBuffer@1000000009 : Record 8016720;
      lwinHTTPService@1000000008 : Automation "{662901FC-6951-4854-9EB2-D9A2570F2B2E} 5.1:{2087C2F4-2CEF-4953-A8AB-66779B670495}:'Microsoft WinHTTP Services, version 5.1'.WinHttpRequest";
      lXmlDom@1000000007 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lInStream@1000000006 : InStream;
      lOutStream@1000000010 : OutStream;
    BEGIN
      lSentMQBuffer."XML Source".CREATEOUTSTREAM(lOutStream);

      lOutStream.WRITETEXT('<?xml version="1.0"  encoding="utf-8"?>');
      lOutStream.WRITETEXT('<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" ');
      lOutStream.WRITETEXT('xmlns:xsi="http://www.w3.org/1999/XMLSchema-instance" ');
      lOutStream.WRITETEXT('xmlns:xsd="http://www.w3.org/1999/XMLSchema"> ');
      lOutStream.WRITETEXT('<soap:Body>');
      lOutStream.WRITETEXT('<OpenNavisionCard xmlns="urn:microsoft-dynamics-schemas/codeunit/SingleFrontOfficeWS">');
      lOutStream.WRITETEXT('<pCardType>' + FORMAT(pCardType) + '</pCardType>');
      IF pServiceNo <> '' THEN BEGIN
        lOutStream.WRITETEXT('<pServiceNo>' + pServiceNo + '</pServiceNo>');
      END ELSE BEGIN
        lOutStream.WRITETEXT('<pServiceNo/>');
      END;
      IF pServiceHeaderNo <> '' THEN BEGIN
        lOutStream.WRITETEXT('<pServiceHeaderNo>' + pServiceHeaderNo + '</pServiceHeaderNo>');
      END ELSE BEGIN
        lOutStream.WRITETEXT('<pServiceHeaderNo/>');
      END;
      IF pContactNo <> '' THEN BEGIN
        lOutStream.WRITETEXT('<pContactNo>' + pContactNo + '</pContactNo>');
      END ELSE BEGIN
        lOutStream.WRITETEXT('<pContactNo/>');
      END;
      lOutStream.WRITETEXT('<pURLPage/>');
      lOutStream.WRITETEXT('<pURLNo/>');
      lOutStream.WRITETEXT('<pErrorDescription/>');
      lOutStream.WRITETEXT('</OpenNavisionCard>');
      lOutStream.WRITETEXT('</soap:Body>');
      lOutStream.WRITETEXT('</soap:Envelope>');

      IF ISCLEAR(lwinHTTPService) THEN
        CREATE(lwinHTTPService);

      lwinHTTPService.Open('POST',WebServiceAddress,0);
      lwinHTTPService.SetAutoLogonPolicy(0);
      lwinHTTPService.SetRequestHeader('Content-type','text/xml; charset=UTF-8');
      lwinHTTPService.SetRequestHeader('SOAPAction','""');
      //The last parameter set to zero allows to wait till webservice finishes
      lwinHTTPService.SetTimeouts(10000,10000,10000,0);

      lSentMQBuffer.CALCFIELDS("XML Source");
      IF EnableSendMessage THEN BEGIN
        lSentMQBuffer."XML Source".EXPORT(pFileNameToExport + 'OpenNavisionCard_Send.xml');
      END;
      lSentMQBuffer."XML Source".CREATEINSTREAM(lInStream);

      // Envoi de la demande au webservice
      lwinHTTPService.Send(lInStream);

      IF NOT lwinHTTPService.WaitForResponse(600) THEN ERROR('Request timed out.');

      CREATE(lXmlDom);
      lXmlDom.load(lwinHTTPService.ResponseStream);
      lXmlDom.save(pFileNameToExport + 'OpenNavisionCard_Response.xml');
    END;

    PROCEDURE TestGetPostCodeCity@1000000003(pFileNameToExport@1000000000 : Text[1024];pPostCode@1000000001 : Code[20];pCity@1000000002 : Text[30]);
    VAR
      lSentMQBuffer@1000000007 : Record 8016720;
      lwinHTTPService@1000000006 : Automation "{662901FC-6951-4854-9EB2-D9A2570F2B2E} 5.1:{2087C2F4-2CEF-4953-A8AB-66779B670495}:'Microsoft WinHTTP Services, version 5.1'.WinHttpRequest";
      lXmlDom@1000000005 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lInStream@1000000004 : InStream;
      lOutStream@1000000003 : OutStream;
    BEGIN
      lSentMQBuffer."XML Source".CREATEOUTSTREAM(lOutStream);

      lOutStream.WRITETEXT('<?xml version="1.0"  encoding="utf-8"?>');
      lOutStream.WRITETEXT('<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" ');
      lOutStream.WRITETEXT('xmlns:xsi="http://www.w3.org/1999/XMLSchema-instance" ');
      lOutStream.WRITETEXT('xmlns:xsd="http://www.w3.org/1999/XMLSchema"> ');
      lOutStream.WRITETEXT('<soap:Body>');
      lOutStream.WRITETEXT('<GetPostCodeCity xmlns="urn:microsoft-dynamics-schemas/codeunit/SingleFrontOfficeWS">');
      IF pPostCode <> '' THEN BEGIN
        lOutStream.WRITETEXT('<pPostCode>' + pPostCode + '</pPostCode>');
      END ELSE BEGIN
        lOutStream.WRITETEXT('<pPostCode/>');
      END;
      IF pCity <> '' THEN BEGIN
        lOutStream.WRITETEXT('<pCity>' + pCity + '</pCity>');
      END ELSE BEGIN
        lOutStream.WRITETEXT('<pCity/>');
      END;
      lOutStream.WRITETEXT('<pPostCodeCityList/>');
      lOutStream.WRITETEXT('</GetPostCodeCity>');
      lOutStream.WRITETEXT('</soap:Body>');
      lOutStream.WRITETEXT('</soap:Envelope>');

      IF ISCLEAR(lwinHTTPService) THEN
        CREATE(lwinHTTPService);

      lwinHTTPService.Open('POST',WebServiceAddress,0);
      lwinHTTPService.SetAutoLogonPolicy(0);
      lwinHTTPService.SetRequestHeader('Content-type','text/xml; charset=UTF-8');
      lwinHTTPService.SetRequestHeader('SOAPAction','""');
      //The last parameter set to zero allows to wait till webservice finishes
      lwinHTTPService.SetTimeouts(10000,10000,10000,0);

      lSentMQBuffer.CALCFIELDS("XML Source");
      IF EnableSendMessage THEN BEGIN
        lSentMQBuffer."XML Source".EXPORT(pFileNameToExport + 'GetPostCodeCity_Send.xml');
      END;
      lSentMQBuffer."XML Source".CREATEINSTREAM(lInStream);

      // Envoi de la demande au webservice
      lwinHTTPService.Send(lInStream);

      IF NOT lwinHTTPService.WaitForResponse(600) THEN ERROR('Request timed out.');

      CREATE(lXmlDom);
      lXmlDom.load(lwinHTTPService.ResponseStream);
      lXmlDom.save(pFileNameToExport + 'GetPostCodeCity_Response.xml');
    END;

    PROCEDURE TestGetBuildingTrade@1000000004(pFileNameToExport@1000000000 : Text[1024]);
    VAR
      lSentMQBuffer@1000000005 : Record 8016720;
      lwinHTTPService@1000000004 : Automation "{662901FC-6951-4854-9EB2-D9A2570F2B2E} 5.1:{2087C2F4-2CEF-4953-A8AB-66779B670495}:'Microsoft WinHTTP Services, version 5.1'.WinHttpRequest";
      lXmlDom@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lInStream@1000000002 : InStream;
      lOutStream@1000000001 : OutStream;
    BEGIN
      lSentMQBuffer."XML Source".CREATEOUTSTREAM(lOutStream);

      lOutStream.WRITETEXT('<?xml version="1.0"  encoding="utf-8"?>');
      lOutStream.WRITETEXT('<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" ');
      lOutStream.WRITETEXT('xmlns:xsi="http://www.w3.org/1999/XMLSchema-instance" ');
      lOutStream.WRITETEXT('xmlns:xsd="http://www.w3.org/1999/XMLSchema"> ');
      lOutStream.WRITETEXT('<soap:Body>');
      lOutStream.WRITETEXT('<GetBuildingTrade xmlns="urn:microsoft-dynamics-schemas/codeunit/SingleFrontOfficeWS">');
      lOutStream.WRITETEXT('<pBuildingTradeList/>');
      lOutStream.WRITETEXT('</GetBuildingTrade>');
      lOutStream.WRITETEXT('</soap:Body>');
      lOutStream.WRITETEXT('</soap:Envelope>');

      IF ISCLEAR(lwinHTTPService) THEN
        CREATE(lwinHTTPService);

      lwinHTTPService.Open('POST',WebServiceAddress,0);
      lwinHTTPService.SetAutoLogonPolicy(0);
      lwinHTTPService.SetRequestHeader('Content-type','text/xml; charset=UTF-8');
      lwinHTTPService.SetRequestHeader('SOAPAction','""');
      //The last parameter set to zero allows to wait till webservice finishes
      lwinHTTPService.SetTimeouts(10000,10000,10000,0);

      lSentMQBuffer.CALCFIELDS("XML Source");
      IF EnableSendMessage THEN BEGIN
        lSentMQBuffer."XML Source".EXPORT(pFileNameToExport + 'GetBuildingTrade_Send.xml');
      END;
      lSentMQBuffer."XML Source".CREATEINSTREAM(lInStream);

      // Envoi de la demande au webservice
      lwinHTTPService.Send(lInStream);

      IF NOT lwinHTTPService.WaitForResponse(600) THEN ERROR('Request timed out.');

      CREATE(lXmlDom);
      lXmlDom.load(lwinHTTPService.ResponseStream);
      lXmlDom.save(pFileNameToExport + 'GetBuildingTrade_Response.xml');
    END;

    PROCEDURE TestGetSalutationCode@1100281002(pFileNameToExport@1000000000 : Text[1024]);
    VAR
      lSentMQBuffer@1000000005 : Record 8016720;
      lwinHTTPService@1000000004 : Automation "{662901FC-6951-4854-9EB2-D9A2570F2B2E} 5.1:{2087C2F4-2CEF-4953-A8AB-66779B670495}:'Microsoft WinHTTP Services, version 5.1'.WinHttpRequest";
      lXmlDom@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lInStream@1000000002 : InStream;
      lOutStream@1000000001 : OutStream;
    BEGIN
      lSentMQBuffer."XML Source".CREATEOUTSTREAM(lOutStream);

      lOutStream.WRITETEXT('<?xml version="1.0"  encoding="utf-8"?>');
      lOutStream.WRITETEXT('<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" ');
      lOutStream.WRITETEXT('xmlns:xsi="http://www.w3.org/1999/XMLSchema-instance" ');
      lOutStream.WRITETEXT('xmlns:xsd="http://www.w3.org/1999/XMLSchema"> ');
      lOutStream.WRITETEXT('<soap:Body>');
      lOutStream.WRITETEXT('<GetSalutationCode xmlns="urn:microsoft-dynamics-schemas/codeunit/SingleFrontOfficeWS">');
      lOutStream.WRITETEXT('<pSalutationList/>');
      lOutStream.WRITETEXT('</GetSalutationCode>');
      lOutStream.WRITETEXT('</soap:Body>');
      lOutStream.WRITETEXT('</soap:Envelope>');

      IF ISCLEAR(lwinHTTPService) THEN
        CREATE(lwinHTTPService);

      lwinHTTPService.Open('POST',WebServiceAddress,0);
      lwinHTTPService.SetAutoLogonPolicy(0);
      lwinHTTPService.SetRequestHeader('Content-type','text/xml; charset=UTF-8');
      lwinHTTPService.SetRequestHeader('SOAPAction','""');
      //The last parameter set to zero allows to wait till webservice finishes
      lwinHTTPService.SetTimeouts(10000,10000,10000,0);

      lSentMQBuffer.CALCFIELDS("XML Source");
      IF EnableSendMessage THEN BEGIN
        lSentMQBuffer."XML Source".EXPORT(pFileNameToExport + 'GetSalutation_Send.xml');
      END;
      lSentMQBuffer."XML Source".CREATEINSTREAM(lInStream);

      // Envoi de la demande au webservice
      lwinHTTPService.Send(lInStream);

      IF NOT lwinHTTPService.WaitForResponse(600) THEN ERROR('Request timed out.');

      CREATE(lXmlDom);
      lXmlDom.load(lwinHTTPService.ResponseStream);
      lXmlDom.save(pFileNameToExport + 'GetSalutation_Response.xml');
    END;

    PROCEDURE TestGetFaultReasonCodeByCU@1000000024(pFileNameToExport@1100281005 : Text[1024]);
    VAR
      lBigText@1000000002 : BigText;
      lFile@1000000001 : File;
      lOutStream@1000000000 : OutStream;
    BEGIN
      SingleFrontOfficeWS.GetFaultReasonCode(lBigText);
      lFile.CREATE(pFileNameToExport + 'GetFaultReasonCodeByCU.xml');
      lFile.CREATEOUTSTREAM(lOutStream);
      lBigText.WRITE(lOutStream);
      lFile.CLOSE;
    END;

    PROCEDURE TestGetFaultReasonCode@1100281000(pFileNameToExport@1100281005 : Text[1024]);
    VAR
      lSentMQBuffer@1100281004 : Record 8016720;
      lwinHTTPService@1100281003 : Automation "{662901FC-6951-4854-9EB2-D9A2570F2B2E} 5.1:{2087C2F4-2CEF-4953-A8AB-66779B670495}:'Microsoft WinHTTP Services, version 5.1'.WinHttpRequest";
      lXmlDom@1100281002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lInStream@1100281001 : InStream;
      lOutStream@1100281000 : OutStream;
    BEGIN
      lSentMQBuffer."XML Source".CREATEOUTSTREAM(lOutStream);

      lOutStream.WRITETEXT('<?xml version="1.0"  encoding="utf-8"?>');
      lOutStream.WRITETEXT('<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" ');
      lOutStream.WRITETEXT('xmlns:xsi="http://www.w3.org/1999/XMLSchema-instance" ');
      lOutStream.WRITETEXT('xmlns:xsd="http://www.w3.org/1999/XMLSchema"> ');
      lOutStream.WRITETEXT('<soap:Body>');
      lOutStream.WRITETEXT('<GetFaultReasonCode xmlns="urn:microsoft-dynamics-schemas/codeunit/SingleFrontOfficeWS">');
      lOutStream.WRITETEXT('<pFaultReasonCodeList/>');
      lOutStream.WRITETEXT('</GetFaultReasonCode>');
      lOutStream.WRITETEXT('</soap:Body>');
      lOutStream.WRITETEXT('</soap:Envelope>');

      IF ISCLEAR(lwinHTTPService) THEN
        CREATE(lwinHTTPService);

      lwinHTTPService.Open('POST',WebServiceAddress,0);
      lwinHTTPService.SetAutoLogonPolicy(0);
      lwinHTTPService.SetRequestHeader('Content-type','text/xml; charset=UTF-8');
      lwinHTTPService.SetRequestHeader('SOAPAction','""');
      //The last parameter set to zero allows to wait till webservice finishes
      lwinHTTPService.SetTimeouts(10000,10000,10000,0);

      lSentMQBuffer.CALCFIELDS("XML Source");
      IF EnableSendMessage THEN BEGIN
        lSentMQBuffer."XML Source".EXPORT(pFileNameToExport + 'GetFaultReasonCode_Send.xml');
      END;
      lSentMQBuffer."XML Source".CREATEINSTREAM(lInStream);

      // Envoi de la demande au webservice
      lwinHTTPService.Send(lInStream);

      IF NOT lwinHTTPService.WaitForResponse(600) THEN ERROR('Request timed out.');

      CREATE(lXmlDom);
      lXmlDom.load(lwinHTTPService.ResponseStream);
      lXmlDom.save(pFileNameToExport + 'GetFaultReasonCode_Response.xml');
    END;

    PROCEDURE TestGetOccupierNature@1000000006(pFileNameToExport@1000000000 : Text[1024]);
    VAR
      lSentMQBuffer@1000000005 : Record 8016720;
      lwinHTTPService@1000000004 : Automation "{662901FC-6951-4854-9EB2-D9A2570F2B2E} 5.1:{2087C2F4-2CEF-4953-A8AB-66779B670495}:'Microsoft WinHTTP Services, version 5.1'.WinHttpRequest";
      lXmlDom@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lInStream@1000000002 : InStream;
      lOutStream@1000000001 : OutStream;
    BEGIN
      lSentMQBuffer."XML Source".CREATEOUTSTREAM(lOutStream);

      lOutStream.WRITETEXT('<?xml version="1.0"  encoding="utf-8"?>');
      lOutStream.WRITETEXT('<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" ');
      lOutStream.WRITETEXT('xmlns:xsi="http://www.w3.org/1999/XMLSchema-instance" ');
      lOutStream.WRITETEXT('xmlns:xsd="http://www.w3.org/1999/XMLSchema"> ');
      lOutStream.WRITETEXT('<soap:Body>');
      lOutStream.WRITETEXT('<GetOccupierNature xmlns="urn:microsoft-dynamics-schemas/codeunit/SingleFrontOfficeWS">');
      lOutStream.WRITETEXT('<pOccupierNatureList/>');
      lOutStream.WRITETEXT('</GetOccupierNature>');
      lOutStream.WRITETEXT('</soap:Body>');
      lOutStream.WRITETEXT('</soap:Envelope>');

      IF ISCLEAR(lwinHTTPService) THEN
        CREATE(lwinHTTPService);

      lwinHTTPService.Open('POST',WebServiceAddress,0);
      lwinHTTPService.SetAutoLogonPolicy(0);
      lwinHTTPService.SetRequestHeader('Content-type','text/xml; charset=UTF-8');
      lwinHTTPService.SetRequestHeader('SOAPAction','""');
      //The last parameter set to zero allows to wait till webservice finishes
      lwinHTTPService.SetTimeouts(10000,10000,10000,0);

      lSentMQBuffer.CALCFIELDS("XML Source");
      IF EnableSendMessage THEN BEGIN
        lSentMQBuffer."XML Source".EXPORT(pFileNameToExport + 'GetOccupierNature_Send.xml');
      END;
      lSentMQBuffer."XML Source".CREATEINSTREAM(lInStream);

      // Envoi de la demande au webservice
      lwinHTTPService.Send(lInStream);

      IF NOT lwinHTTPService.WaitForResponse(600) THEN ERROR('Request timed out.');

      CREATE(lXmlDom);
      lXmlDom.load(lwinHTTPService.ResponseStream);
      lXmlDom.save(pFileNameToExport + 'GetOccupierNature_Response.xml');
    END;

    PROCEDURE TestGetResidenceType@1000000013(pFileNameToExport@1000000000 : Text[1024]);
    VAR
      lSentMQBuffer@1000000005 : Record 8016720;
      lwinHTTPService@1000000004 : Automation "{662901FC-6951-4854-9EB2-D9A2570F2B2E} 5.1:{2087C2F4-2CEF-4953-A8AB-66779B670495}:'Microsoft WinHTTP Services, version 5.1'.WinHttpRequest";
      lXmlDom@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lInStream@1000000002 : InStream;
      lOutStream@1000000001 : OutStream;
    BEGIN
      lSentMQBuffer."XML Source".CREATEOUTSTREAM(lOutStream);

      lOutStream.WRITETEXT('<?xml version="1.0"  encoding="utf-8"?>');
      lOutStream.WRITETEXT('<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" ');
      lOutStream.WRITETEXT('xmlns:xsi="http://www.w3.org/1999/XMLSchema-instance" ');
      lOutStream.WRITETEXT('xmlns:xsd="http://www.w3.org/1999/XMLSchema"> ');
      lOutStream.WRITETEXT('<soap:Body>');
      lOutStream.WRITETEXT('<GetResidenceType xmlns="urn:microsoft-dynamics-schemas/codeunit/SingleFrontOfficeWS">');
      lOutStream.WRITETEXT('<pResidenceTypeList/>');
      lOutStream.WRITETEXT('</GetResidenceType>');
      lOutStream.WRITETEXT('</soap:Body>');
      lOutStream.WRITETEXT('</soap:Envelope>');

      IF ISCLEAR(lwinHTTPService) THEN
        CREATE(lwinHTTPService);

      lwinHTTPService.Open('POST',WebServiceAddress,0);
      lwinHTTPService.SetAutoLogonPolicy(0);
      lwinHTTPService.SetRequestHeader('Content-type','text/xml; charset=UTF-8');
      lwinHTTPService.SetRequestHeader('SOAPAction','""');
      //The last parameter set to zero allows to wait till webservice finishes
      lwinHTTPService.SetTimeouts(10000,10000,10000,0);

      lSentMQBuffer.CALCFIELDS("XML Source");
      IF EnableSendMessage THEN BEGIN
        lSentMQBuffer."XML Source".EXPORT(pFileNameToExport + 'GetResidenceType_Send.xml');
      END;
      lSentMQBuffer."XML Source".CREATEINSTREAM(lInStream);

      // Envoi de la demande au webservice
      lwinHTTPService.Send(lInStream);

      IF NOT lwinHTTPService.WaitForResponse(600) THEN ERROR('Request timed out.');

      CREATE(lXmlDom);
      lXmlDom.load(lwinHTTPService.ResponseStream);
      lXmlDom.save(pFileNameToExport + 'GetResidenceType_Response.xml');
    END;

    PROCEDURE TestGetHousingType@1000000018(pFileNameToExport@1000000000 : Text[1024]);
    VAR
      lSentMQBuffer@1000000005 : Record 8016720;
      lwinHTTPService@1000000004 : Automation "{662901FC-6951-4854-9EB2-D9A2570F2B2E} 5.1:{2087C2F4-2CEF-4953-A8AB-66779B670495}:'Microsoft WinHTTP Services, version 5.1'.WinHttpRequest";
      lXmlDom@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lInStream@1000000002 : InStream;
      lOutStream@1000000001 : OutStream;
    BEGIN
      lSentMQBuffer."XML Source".CREATEOUTSTREAM(lOutStream);

      lOutStream.WRITETEXT('<?xml version="1.0"  encoding="utf-8"?>');
      lOutStream.WRITETEXT('<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" ');
      lOutStream.WRITETEXT('xmlns:xsi="http://www.w3.org/1999/XMLSchema-instance" ');
      lOutStream.WRITETEXT('xmlns:xsd="http://www.w3.org/1999/XMLSchema"> ');
      lOutStream.WRITETEXT('<soap:Body>');
      lOutStream.WRITETEXT('<GetHousingType xmlns="urn:microsoft-dynamics-schemas/codeunit/SingleFrontOfficeWS">');
      lOutStream.WRITETEXT('<pHousingTypeList/>');
      lOutStream.WRITETEXT('</GetHousingType>');
      lOutStream.WRITETEXT('</soap:Body>');
      lOutStream.WRITETEXT('</soap:Envelope>');

      IF ISCLEAR(lwinHTTPService) THEN
        CREATE(lwinHTTPService);

      lwinHTTPService.Open('POST',WebServiceAddress,0);
      lwinHTTPService.SetAutoLogonPolicy(0);
      lwinHTTPService.SetRequestHeader('Content-type','text/xml; charset=UTF-8');
      lwinHTTPService.SetRequestHeader('SOAPAction','""');
      //The last parameter set to zero allows to wait till webservice finishes
      lwinHTTPService.SetTimeouts(10000,10000,10000,0);

      lSentMQBuffer.CALCFIELDS("XML Source");
      IF EnableSendMessage THEN BEGIN
        lSentMQBuffer."XML Source".EXPORT(pFileNameToExport + 'GetHousingType_Send.xml');
      END;
      lSentMQBuffer."XML Source".CREATEINSTREAM(lInStream);

      // Envoi de la demande au webservice
      lwinHTTPService.Send(lInStream);

      IF NOT lwinHTTPService.WaitForResponse(600) THEN ERROR('Request timed out.');

      CREATE(lXmlDom);
      lXmlDom.load(lwinHTTPService.ResponseStream);
      lXmlDom.save(pFileNameToExport + 'GetHousingType_Response.xml');
    END;

    PROCEDURE TestGetProductReasonByCU@1000000025(pFileNameToExport@1000000008 : Text[1024]);
    VAR
      lBigText@1000000002 : BigText;
      lFile@1000000001 : File;
      lOutStream@1000000000 : OutStream;
    BEGIN
      SingleFrontOfficeWS.GetProductReason(lBigText);
      lFile.CREATE(pFileNameToExport + 'GetProductReasonByCU.xml');
      lFile.CREATEOUTSTREAM(lOutStream);
      lBigText.WRITE(lOutStream);
      lFile.CLOSE;
    END;

    PROCEDURE TestGetProductReason@1000000023(pFileNameToExport@1000000008 : Text[1024]);
    VAR
      lSentMQBuffer@1000000004 : Record 8016720;
      lwinHTTPService@1000000003 : Automation "{662901FC-6951-4854-9EB2-D9A2570F2B2E} 5.1:{2087C2F4-2CEF-4953-A8AB-66779B670495}:'Microsoft WinHTTP Services, version 5.1'.WinHttpRequest";
      lXmlDom@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lInStream@1000000001 : InStream;
      lOutStream@1000000000 : OutStream;
    BEGIN
      lSentMQBuffer."XML Source".CREATEOUTSTREAM(lOutStream);

      lOutStream.WRITETEXT('<?xml version="1.0"  encoding="utf-8"?>');
      lOutStream.WRITETEXT('<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" ');
      lOutStream.WRITETEXT('xmlns:xsi="http://www.w3.org/1999/XMLSchema-instance" ');
      lOutStream.WRITETEXT('xmlns:xsd="http://www.w3.org/1999/XMLSchema"> ');
      lOutStream.WRITETEXT('<soap:Body>');
      lOutStream.WRITETEXT('<GetProductReason xmlns="urn:microsoft-dynamics-schemas/codeunit/SingleFrontOfficeWS">');
      lOutStream.WRITETEXT('<pProductReasonList/>');
      lOutStream.WRITETEXT('</GetProductReason>');
      lOutStream.WRITETEXT('</soap:Body>');
      lOutStream.WRITETEXT('</soap:Envelope>');

      IF ISCLEAR(lwinHTTPService) THEN
        CREATE(lwinHTTPService);

      lwinHTTPService.Open('POST',WebServiceAddress,0);
      lwinHTTPService.SetAutoLogonPolicy(0);
      lwinHTTPService.SetRequestHeader('Content-type','text/xml; charset=UTF-8');
      lwinHTTPService.SetRequestHeader('SOAPAction','""');
      //The last parameter set to zero allows to wait till webservice finishes
      lwinHTTPService.SetTimeouts(10000,10000,10000,0);

      lSentMQBuffer.CALCFIELDS("XML Source");
      IF EnableSendMessage THEN BEGIN
        lSentMQBuffer."XML Source".EXPORT(pFileNameToExport + 'GetProductReason_Send.xml');
      END;
      lSentMQBuffer."XML Source".CREATEINSTREAM(lInStream);

      // Envoi de la demande au webservice
      lwinHTTPService.Send(lInStream);

      IF NOT lwinHTTPService.WaitForResponse(600) THEN ERROR('Request timed out.');

      CREATE(lXmlDom);
      lXmlDom.load(lwinHTTPService.ResponseStream);
      lXmlDom.save(pFileNameToExport + 'GetProductReason_Response.xml');
    END;

    LOCAL PROCEDURE TestGetContactAddress@1000000022(pFileNameToExport@1000000001 : Text[1024];pContactNo@1100281003 : Code[20];pContactAddressCode@1000000000 : Code[20]);
    VAR
      lSentMQBuffer@1000000006 : Record 8016720;
      lwinHTTPService@1000000005 : Automation "{662901FC-6951-4854-9EB2-D9A2570F2B2E} 5.1:{2087C2F4-2CEF-4953-A8AB-66779B670495}:'Microsoft WinHTTP Services, version 5.1'.WinHttpRequest";
      lXmlDom@1000000004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lInStream@1000000003 : InStream;
      lOutStream@1000000002 : OutStream;
    BEGIN
      lSentMQBuffer."XML Source".CREATEOUTSTREAM(lOutStream);

      lOutStream.WRITETEXT('<?xml version="1.0"  encoding="utf-8"?>');
      lOutStream.WRITETEXT('<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" ');
      lOutStream.WRITETEXT('xmlns:xsi="http://www.w3.org/1999/XMLSchema-instance" ');
      lOutStream.WRITETEXT('xmlns:xsd="http://www.w3.org/1999/XMLSchema"> ');
      lOutStream.WRITETEXT('<soap:Body>');
      lOutStream.WRITETEXT('<GetContactAddress xmlns="urn:microsoft-dynamics-schemas/codeunit/SingleFrontOfficeWS">');
      IF pContactNo <> '' THEN BEGIN
        lOutStream.WRITETEXT('<pContactNo>' + pContactNo + '</pContactNo>');
      END ELSE BEGIN
        lOutStream.WRITETEXT('<pContactNo/>');
      END;
      IF pContactAddressCode <> '' THEN BEGIN
        lOutStream.WRITETEXT('<pContactAddressCode>' + pContactAddressCode + '</pContactAddressCode>');
      END ELSE BEGIN
        lOutStream.WRITETEXT('<pContactAddressCode/>');
      END;
      lOutStream.WRITETEXT('<pContactAddressList/>');
      lOutStream.WRITETEXT('</GetContactAddress>');
      lOutStream.WRITETEXT('</soap:Body>');
      lOutStream.WRITETEXT('</soap:Envelope>');

      IF ISCLEAR(lwinHTTPService) THEN
        CREATE(lwinHTTPService);

      lwinHTTPService.Open('POST',WebServiceAddress,0);
      lwinHTTPService.SetAutoLogonPolicy(0);
      lwinHTTPService.SetRequestHeader('Content-type','text/xml; charset=UTF-8');
      lwinHTTPService.SetRequestHeader('SOAPAction','""');
      //The last parameter set to zero allows to wait till webservice finishes
      lwinHTTPService.SetTimeouts(10000,10000,10000,0);

      lSentMQBuffer.CALCFIELDS("XML Source");
      IF EnableSendMessage THEN BEGIN
        lSentMQBuffer."XML Source".EXPORT(pFileNameToExport + 'GetContactAddress_Send.xml');
      END;
      lSentMQBuffer."XML Source".CREATEINSTREAM(lInStream);

      // Envoi de la demande au webservice
      lwinHTTPService.Send(lInStream);

      IF NOT lwinHTTPService.WaitForResponse(600) THEN ERROR('Request timed out.');

      CREATE(lXmlDom);
      lXmlDom.load(lwinHTTPService.ResponseStream);
      lXmlDom.save(pFileNameToExport + 'GetContactAddress_Response.xml');
    END;

    LOCAL PROCEDURE GetTempFilename@9() FileName@1000 : Text[260];
    VAR
      I@1001 : Integer;
      DocNo@1002 : Text[30];
      TempFile@1100281000 : File;
      lText001@1100281001 : TextConst 'ENU=\Doc;FRA=\Doc';
    BEGIN
      TempFile.CREATETEMPFILE;
      FileName := TempFile.NAME + '.xml';
      TempFile.CLOSE;
      EXIT;
      REPEAT
        IF I <> 0 THEN
          DocNo := FORMAT(I);
        IF NOT ISSERVICETIER THEN BEGIN
          FileName := TEMPORARYPATH + lText001 + DocNo + '.xml';
        END ELSE BEGIN
          TempFile.CREATETEMPFILE;
          FileName := TempFile.NAME + '.' + '.xml';
          TempFile.CLOSE;
        END;

        IF NOT EXISTS(FileName) THEN
          EXIT;
        I := I +1;
      UNTIL I=999;
    END;

    LOCAL PROCEDURE FormatBoolean@1100281020(pBoolean@1100281000 : Boolean) : Text[30];
    BEGIN
      IF pBoolean THEN BEGIN
        EXIT('true');
      END ELSE BEGIN
        EXIT('false');
      END;
    END;

    BEGIN
    {
      /** @r IMH02 @d 26/09/12 @a ISAT.PC @v IMH6.01.210 @s Interface F.O.U @h 3957
          @c ajout paramŠtre pServiceNo et pBeneficiaryNo dans la fonction CompleteSearchIntervention */
      /** @r IMH01 @d 06/09/12 @a ISAT.PC @v IMH6.01.210 @s Interface F.O.U @c cr‚ation */
    }
    END.
  }
}