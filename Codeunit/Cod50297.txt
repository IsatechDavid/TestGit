OBJECT Codeunit 50297 Test Quality Extranet
{
  OBJECT-PROPERTIES
  {
    Date=20/11/13;
    Time=16:42:15;
    Modified=Yes;
    Version List=IMH6.01;
  }
  PROPERTIES
  {
    OnRun=VAR
            lText001@1100281004 : TextConst 'FRA=Veuilllez s‚lectionner une sortie';
            lText005@1100281003 : TextConst 'ENU=Export Attachment;FRA=Rep document';
            lText008@1100281002 : TextConst 'ENU=Files XML (*.XML)|*.XML;FRA=Fichiers XML (*.XML)|*.XML';
            lText009@1100281000 : TextConst 'ENU=Files XML (*.XML)|*.XML;FRA=Tous Fichiers (*.*)|*.*';
            lFileNameToExport@1000000005 : Text[1024];
            lTextBuffer@1000000004 : Text[1024];
          BEGIN
            // Dev
            // WebServiceAddress := 'http://simhns07:7061/NST2009R2_Dev_IMH/WS/IMH - Dev/Codeunit/ExtranetQuality';
            // Recette
            // WebServiceAddress := 'http://simhns08:7065/NST2009R2_RECETTE_IMH/WS/IMH - Recette/Codeunit/ExtranetQuality';
            // Pr‚prod
            WebServiceAddress := 'http://simhns09.imha.local:7063/NST2009R2_PREPROD_IMH/WS/IMH - Preprod/Codeunit/ExtranetQuality';
            // Prod
            //WebServiceAddress := 'http://simhns07:7059/NST2009R2_EXP_IMH/WS/IMH/Codeunit/ExtranetQuality';

            //DecodeFileBase64;
            //EXIT;

            EnableSendMessage := TRUE;

            lFileNameToExport := CommonDialogMgt.OpenFile(Text005,'Dummy',4,Text009,1);
            IF lFileNameToExport = '' THEN BEGIN
              EXIT;
            END;
            lTextBuffer := lFileNameToExport;
            WHILE COPYSTR(lTextBuffer,STRLEN(lTextBuffer)) <> '\' DO BEGIN
              lTextBuffer := COPYSTR(lTextBuffer,1,STRLEN(lTextBuffer) - 1);
            END;

            IF lFileNameToExport = '' THEN BEGIN
              ERROR(Text001);
            END;


            // ***** GetDocumentBinary
            TestGetDocumentBinary(lFileNameToExport,'503378',5065,5749905,0,'','',1);

            // ***** ListDocumentToDownload
            TestListDocumentToDownload(
              lFileNameToExport,
              '668397-REXP1 ',
              '722533-QLT3',
              70000);

            // ***** CreateQualityControlLine
            {
            TestCreateQualityControlLinebyN(
              '', // pExpertNo
              'guillon', // pServiceHeaderNo
              ''); // pInterventionLineNo
            }
            {
            TestCreateQualityControlLine(
              lFileNameToExport,
              '', // pExpertNo
              'guillon', // pServiceHeaderNo
              ''); // pInterventionLineNo
            }

            // ***** SetAllReportResponse
            {
            TestSetAllReportResponse(
              lFileNameToExport,
              'Dede','CONT01',10000,10000,
              TRUE,'rep 1',
              TRUE,'rep 2',
              TRUE,'rep 3',
              TRUE,'rep 4',
              TRUE,'rep 5');
            }
          END;

  }
  CODE
  {
    VAR
      ToolsMgt@1000000004 : Codeunit 8016602;
      CommonDialogMgt@1000000003 : Codeunit 412;
      ExtranetQualWebServ@1000000002 : Codeunit 50202;
      WebServiceAddress@1000000001 : Text[1024];
      EnableSendMessage@1000000000 : Boolean;
      Text001@1000000008 : TextConst 'FRA=Veuilllez s‚lectionner une sortie';
      Text005@1000000007 : TextConst 'ENU=Export Attachment;FRA=Rep document';
      Text008@1000000006 : TextConst 'ENU=Files XML (*.XML)|*.XML;FRA=Fichiers XML (*.XML)|*.XML';
      Text009@1000000005 : TextConst 'ENU=Files XML (*.XML)|*.XML;FRA=Tous Fichiers (*.*)|*.*';

    PROCEDURE TestGetDocumentBinary@1100281001(pFileNameToExport@1000000011 : Text[1024];pExpertNo@1000000002 : Code[20];pTableID@1100281005 : Integer;pKeyInteger1@1100281004 : Integer;pKeyInteger2@1100281003 : Integer;pKeyCode1@1100281002 : Code[20];pKeyCode2@1100281001 : Code[20];pKeyEntryNo@1100281000 : Integer);
    VAR
      lSentMQBuffer@1000000014 : Record 8016720;
      lwinHTTPService@1000000013 : Automation "{662901FC-6951-4854-9EB2-D9A2570F2B2E} 5.1:{2087C2F4-2CEF-4953-A8AB-66779B670495}:'Microsoft WinHTTP Services, version 5.1'.WinHttpRequest";
      lXmlDom@1000000012 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lInStream@1000000007 : InStream;
      lOutStream@1000000015 : OutStream;
    BEGIN
      lSentMQBuffer."XML Source".CREATEOUTSTREAM(lOutStream);
      {
             <ext:pExpertNo>?</ext:pExpertNo>
               <ext:pTableID>?</ext:pTableID>
               <ext:pKeyInteger1>?</ext:pKeyInteger1>
               <ext:pKeyInteger2>?</ext:pKeyInteger2>
               <ext:pKeyCode1>?</ext:pKeyCode1>
               <ext:pKeyCode2>?</ext:pKeyCode2>
               <ext:pKeyEntryNo>?</ext:pKeyEntryNo>
               <ext:pDocBinaryContent>?</ext:pDocBinaryContent>
               <ext:pFileExtension>?</ext:pFileExtension>
               <ext:pErrorDescription>?</ext:pErrorDescription>
      }
      lOutStream.WRITETEXT('<?xml version="1.0"  encoding="utf-8"?>');
      lOutStream.WRITETEXT('<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" ');
      lOutStream.WRITETEXT('xmlns:xsi="http://www.w3.org/1999/XMLSchema-instance" ');
      lOutStream.WRITETEXT('xmlns:xsd="http://www.w3.org/1999/XMLSchema"> ');
      lOutStream.WRITETEXT('<soap:Body>');
      lOutStream.WRITETEXT('<GetDocumentBinary xmlns="urn:microsoft-dynamics-schemas/codeunit/ExtranetQuality">');
      IF pExpertNo <> '' THEN BEGIN
        lOutStream.WRITETEXT('<pExpertNo>' + pExpertNo + '</pExpertNo>');
      END ELSE BEGIN
        lOutStream.WRITETEXT('<pExpertNo/>');
      END;
      lOutStream.WRITETEXT('<pTableID>' + FORMAT(pTableID) + '</pTableID>');
      lOutStream.WRITETEXT('<pKeyInteger1>' + FORMAT(pKeyInteger1) + '</pKeyInteger1>');
      lOutStream.WRITETEXT('<pKeyInteger2>' + FORMAT(pKeyInteger2) + '</pKeyInteger2>');
      IF pKeyCode1 <> '' THEN BEGIN
        lOutStream.WRITETEXT('<pKeyCode1>' + pKeyCode1 + '</pKeyCode1>');
      END ELSE BEGIN
        lOutStream.WRITETEXT('<pKeyCode1/>');
      END;
      IF pKeyCode2 <> '' THEN BEGIN
        lOutStream.WRITETEXT('<pKeyCode2>' + pKeyCode2 + '</pKeyCode2>');
      END ELSE BEGIN
        lOutStream.WRITETEXT('<pKeyCode2/>');
      END;
      lOutStream.WRITETEXT('<pKeyEntryNo>' + FORMAT(pKeyEntryNo) + '</pKeyEntryNo>');
      lOutStream.WRITETEXT('<pDocBinaryContent/>');
      lOutStream.WRITETEXT('<pFileExtension/>');
      lOutStream.WRITETEXT('<pErrorDescription/>');
      lOutStream.WRITETEXT('</GetDocumentBinary>');
      lOutStream.WRITETEXT('</soap:Body>');
      lOutStream.WRITETEXT('</soap:Envelope>');

      IF ISCLEAR(lwinHTTPService) THEN
        CREATE(lwinHTTPService);

      lwinHTTPService.Open('POST',WebServiceAddress,0);
      lwinHTTPService.SetAutoLogonPolicy(0);
      lwinHTTPService.SetRequestHeader('Content-type','text/xml; charset=UTF-8');
      lwinHTTPService.SetRequestHeader('SOAPAction','""');
      //The last parameter set to zero allows to wait till webservice finishes
      lwinHTTPService.SetTimeouts(10000,10000,10000,0);

      lSentMQBuffer.CALCFIELDS("XML Source");
      IF EnableSendMessage THEN BEGIN
        lSentMQBuffer."XML Source".EXPORT(pFileNameToExport + 'GetDocumentBinary_Send.xml');
      END;
      lSentMQBuffer."XML Source".CREATEINSTREAM(lInStream);

      // Envoi de la demande au webservice
      lwinHTTPService.Send(lInStream);

      IF NOT lwinHTTPService.WaitForResponse(600) THEN ERROR('Request timed out.');

      CREATE(lXmlDom);
      lXmlDom.load(lwinHTTPService.ResponseStream);
      lXmlDom.save(pFileNameToExport + 'GetDocumentBinary_Response.xml');
    END;

    PROCEDURE TestListDocumentToDownload@1100281000(pFileNameToExport@1000000011 : Text[1024];pExpertNo@1000000002 : Code[20];pServiceHeaderNo@1000000001 : Code[20];pInterventionNo@1000000000 : Integer);
    VAR
      lSentMQBuffer@1000000014 : Record 8016720;
      lwinHTTPService@1000000013 : Automation "{662901FC-6951-4854-9EB2-D9A2570F2B2E} 5.1:{2087C2F4-2CEF-4953-A8AB-66779B670495}:'Microsoft WinHTTP Services, version 5.1'.WinHttpRequest";
      lXmlDom@1000000012 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lInStream@1000000007 : InStream;
      lOutStream@1000000015 : OutStream;
    BEGIN
      lSentMQBuffer."XML Source".CREATEOUTSTREAM(lOutStream);

      lOutStream.WRITETEXT('<?xml version="1.0"  encoding="utf-8"?>');
      lOutStream.WRITETEXT('<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" ');
      lOutStream.WRITETEXT('xmlns:xsi="http://www.w3.org/1999/XMLSchema-instance" ');
      lOutStream.WRITETEXT('xmlns:xsd="http://www.w3.org/1999/XMLSchema"> ');
      lOutStream.WRITETEXT('<soap:Body>');
      lOutStream.WRITETEXT('<ListDocumentToDownload xmlns="urn:microsoft-dynamics-schemas/codeunit/ExtranetQuality">');
      IF pExpertNo <> '' THEN BEGIN
        lOutStream.WRITETEXT('<pExpertNo>' + pExpertNo + '</pExpertNo>');
      END ELSE BEGIN
        lOutStream.WRITETEXT('<pExpertNo/>');
      END;
      IF pServiceHeaderNo <> '' THEN BEGIN
        lOutStream.WRITETEXT('<pControlNo>' + pServiceHeaderNo + '</pControlNo>');
      END ELSE BEGIN
        lOutStream.WRITETEXT('<pControlNo/>');
      END;
      lOutStream.WRITETEXT('<pControlLineNo>' + FORMAT(pInterventionNo,1,9) + '</pControlLineNo>');
      lOutStream.WRITETEXT('<pDocumentList/>');
      lOutStream.WRITETEXT('</ListDocumentToDownload>');
      lOutStream.WRITETEXT('</soap:Body>');
      lOutStream.WRITETEXT('</soap:Envelope>');

      IF ISCLEAR(lwinHTTPService) THEN
        CREATE(lwinHTTPService);

      lwinHTTPService.Open('POST',WebServiceAddress,0);
      lwinHTTPService.SetAutoLogonPolicy(0);
      lwinHTTPService.SetRequestHeader('Content-type','text/xml; charset=UTF-8');
      lwinHTTPService.SetRequestHeader('SOAPAction','""');
      //The last parameter set to zero allows to wait till webservice finishes
      lwinHTTPService.SetTimeouts(10000,10000,10000,0);

      lSentMQBuffer.CALCFIELDS("XML Source");
      IF EnableSendMessage THEN BEGIN
        lSentMQBuffer."XML Source".EXPORT(pFileNameToExport + 'ListDocumentToDownload_Send.xml');
      END;
      lSentMQBuffer."XML Source".CREATEINSTREAM(lInStream);

      // Envoi de la demande au webservice
      lwinHTTPService.Send(lInStream);

      IF NOT lwinHTTPService.WaitForResponse(600) THEN ERROR('Request timed out.');

      CREATE(lXmlDom);
      lXmlDom.load(lwinHTTPService.ResponseStream);
      lXmlDom.save(pFileNameToExport + 'ListDocumentToDownload_Response.xml');
    END;

    PROCEDURE TestCreateQualityControlLine@1000000015(pFileNameToExport@1000000011 : Text[1024];pExpertNo@1000000002 : Code[20];pServiceHeaderNo@1000000001 : Code[20];pInterventionNo@1000000000 : Integer);
    VAR
      lSentMQBuffer@1000000014 : Record 8016720;
      lwinHTTPService@1000000013 : Automation "{662901FC-6951-4854-9EB2-D9A2570F2B2E} 5.1:{2087C2F4-2CEF-4953-A8AB-66779B670495}:'Microsoft WinHTTP Services, version 5.1'.WinHttpRequest";
      lXmlDom@1000000012 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lInStream@1000000007 : InStream;
      lOutStream@1000000015 : OutStream;
    BEGIN
      lSentMQBuffer."XML Source".CREATEOUTSTREAM(lOutStream);

      lOutStream.WRITETEXT('<?xml version="1.0"  encoding="utf-8"?>');
      lOutStream.WRITETEXT('<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" ');
      lOutStream.WRITETEXT('xmlns:xsi="http://www.w3.org/1999/XMLSchema-instance" ');
      lOutStream.WRITETEXT('xmlns:xsd="http://www.w3.org/1999/XMLSchema"> ');
      lOutStream.WRITETEXT('<soap:Body>');
      lOutStream.WRITETEXT('<CreateQualityControlLine xmlns="urn:microsoft-dynamics-schemas/codeunit/ExtranetQuality">');
      IF pExpertNo <> '' THEN BEGIN
        lOutStream.WRITETEXT('<pExpertNo>' + pExpertNo + '</pExpertNo>');
      END ELSE BEGIN
        lOutStream.WRITETEXT('<pExpertNo/>');
      END;
      IF pServiceHeaderNo <> '' THEN BEGIN
        lOutStream.WRITETEXT('<pServiceHeaderNo>' + pServiceHeaderNo + '</pServiceHeaderNo>');
      END ELSE BEGIN
        lOutStream.WRITETEXT('<pServiceHeaderNo/>');
      END;
      lOutStream.WRITETEXT('<pInterventionNo>' + FORMAT(pInterventionNo,1,9) + '</pInterventionNo>');
      lOutStream.WRITETEXT('<pControlNo/>');
      lOutStream.WRITETEXT('<pControlLineNo/>');
      lOutStream.WRITETEXT('</CreateQualityControlLine>');
      lOutStream.WRITETEXT('</soap:Body>');
      lOutStream.WRITETEXT('</soap:Envelope>');

      IF ISCLEAR(lwinHTTPService) THEN
        CREATE(lwinHTTPService);

      lwinHTTPService.Open('POST',WebServiceAddress,0);
      lwinHTTPService.SetAutoLogonPolicy(0);
      lwinHTTPService.SetRequestHeader('Content-type','text/xml; charset=UTF-8');
      lwinHTTPService.SetRequestHeader('SOAPAction','""');
      //The last parameter set to zero allows to wait till webservice finishes
      lwinHTTPService.SetTimeouts(10000,10000,10000,0);

      lSentMQBuffer.CALCFIELDS("XML Source");
      IF EnableSendMessage THEN BEGIN
        lSentMQBuffer."XML Source".EXPORT(pFileNameToExport + 'CreateQualityControlLine_Send.xml');
      END;
      lSentMQBuffer."XML Source".CREATEINSTREAM(lInStream);

      // Envoi de la demande au webservice
      lwinHTTPService.Send(lInStream);

      IF NOT lwinHTTPService.WaitForResponse(600) THEN ERROR('Request timed out.');

      CREATE(lXmlDom);
      lXmlDom.load(lwinHTTPService.ResponseStream);
      lXmlDom.save(pFileNameToExport + 'CreateQualityControlLine_Response.xml');
    END;

    PROCEDURE TestCreateQualityControlLineN@1000000005(pExpertNo@1000000007 : Code[20];pServiceHeaderNo@1000000006 : Code[20];pInterventionNo@1000000005 : Integer);
    VAR
      lControlNo@1000000004 : Code[20];
      lControlLineNo@1000000003 : Integer;
    BEGIN
      // Test CreateQualityControlLine par Navision
      ExtranetQualWebServ.CreateQualityControlLine(
        pExpertNo,
        pServiceHeaderNo,
        pInterventionNo,
        lControlNo,
        lControlLineNo);
    END;

    PROCEDURE TestSetAllReportResponse@1100281013(pFileNameToExport@1100281004 : Text[1024];pExpertNo@1100281002 : Code[20];pControlNo@1100281001 : Code[20];pControlLineNo@1100281000 : Integer;pReportLineNo@1100281003 : Integer;pResponseValue1@1100281016 : Boolean;pComment1@1100281015 : Text[250];pResponseValue2@1100281014 : Boolean;pComment2@1100281013 : Text[250];pResponseValue3@1100281012 : Boolean;pComment3@1100281011 : Text[250];pResponseValue4@1100281010 : Boolean;pComment4@1100281009 : Text[250];pResponseValue5@1100281008 : Boolean;pComment5@1100281007 : Text[250]) : Boolean;
    VAR
      lSentMQBuffer@1100281023 : Record 8016720;
      lwinHTTPService@1100281022 : Automation "{662901FC-6951-4854-9EB2-D9A2570F2B2E} 5.1:{2087C2F4-2CEF-4953-A8AB-66779B670495}:'Microsoft WinHTTP Services, version 5.1'.WinHttpRequest";
      lXmlDom@1100281021 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lFileToAdd@1100281020 : File;
      lOutStream@1100281019 : OutStream;
      lInStream@1100281018 : InStream;
      lInStreamToAdd@1100281017 : InStream;
      lFilePathToAdd@1100281006 : Text[1024];
      lTempText@1100281005 : Text[1024];
    BEGIN
      lSentMQBuffer."XML Source".CREATEOUTSTREAM(lOutStream);

      lOutStream.WRITETEXT('<?xml version="1.0"  encoding="utf-8"?>');
      lOutStream.WRITETEXT('<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" ');
      lOutStream.WRITETEXT('xmlns:xsi="http://www.w3.org/1999/XMLSchema-instance" ');
      lOutStream.WRITETEXT('xmlns:xsd="http://www.w3.org/1999/XMLSchema"> ');
      lOutStream.WRITETEXT('<soap:Body>');
      lOutStream.WRITETEXT('<SetAllReportResponse xmlns="urn:microsoft-dynamics-schemas/codeunit/ExtranetQuality">');

      // ParamŠtre de fonction
      IF pExpertNo <> '' THEN BEGIN
        lOutStream.WRITETEXT('<pExpertNo>' + pExpertNo + '</pExpertNo>');
      END ELSE BEGIN
        lOutStream.WRITETEXT('<pExpertNo/>');
      END;
      IF pControlNo <> '' THEN BEGIN
        lOutStream.WRITETEXT('<pControlNo>' + pControlNo + '</pControlNo>');
      END ELSE BEGIN
        lOutStream.WRITETEXT('<pControlNo/>');
      END;
      lOutStream.WRITETEXT('<pControlLineNo>' + FORMAT(pControlLineNo) + '</pControlLineNo>');
      lOutStream.WRITETEXT('<pReportLineNo>' + FORMAT(pReportLineNo) + '</pReportLineNo>');
      lOutStream.WRITETEXT('<pResponseValue1>' + FormatBoolean(pResponseValue1) + '</pResponseValue1>');
      IF pComment1 <> '' THEN BEGIN
        lOutStream.WRITETEXT('<pComment1>' + pComment1 + '</pComment1>');
      END ELSE BEGIN
        lOutStream.WRITETEXT('<pComment1/>');
      END;
      lOutStream.WRITETEXT('<pResponseValue2>' + FormatBoolean(pResponseValue2) + '</pResponseValue2>');
      IF pComment1 <> '' THEN BEGIN
        lOutStream.WRITETEXT('<pComment2>' + pComment2 + '</pComment2>');
      END ELSE BEGIN
        lOutStream.WRITETEXT('<pComment2/>');
      END;
      lOutStream.WRITETEXT('<pResponseValue3>' + FormatBoolean(pResponseValue3) + '</pResponseValue3>');
      IF pComment1 <> '' THEN BEGIN
        lOutStream.WRITETEXT('<pComment3>' + pComment3 + '</pComment3>');
      END ELSE BEGIN
        lOutStream.WRITETEXT('<pComment3/>');
      END;
      lOutStream.WRITETEXT('<pResponseValue4>' + FormatBoolean(pResponseValue4) + '</pResponseValue4>');
      IF pComment1 <> '' THEN BEGIN
        lOutStream.WRITETEXT('<pComment4>' + pComment4 + '</pComment4>');
      END ELSE BEGIN
        lOutStream.WRITETEXT('<pComment4/>');
      END;
      lOutStream.WRITETEXT('<pResponseValue5>' + FormatBoolean(pResponseValue5) + '</pResponseValue5>');
      IF pComment1 <> '' THEN BEGIN
        lOutStream.WRITETEXT('<pComment5>' + pComment5 + '</pComment5>');
      END ELSE BEGIN
        lOutStream.WRITETEXT('<pComment5/>');
      END;

      lOutStream.WRITETEXT('</SetAllReportResponse>');
      lOutStream.WRITETEXT('</soap:Body>');
      lOutStream.WRITETEXT('</soap:Envelope>');

      IF ISCLEAR(lwinHTTPService) THEN
        CREATE(lwinHTTPService);

      lwinHTTPService.Open('POST',WebServiceAddress,0);
      lwinHTTPService.SetAutoLogonPolicy(0);
      lwinHTTPService.SetRequestHeader('Content-type','text/xml; charset=UTF-8');
      lwinHTTPService.SetRequestHeader('SOAPAction','""');
      //The last parameter set to zero allows to wait till webservice finishes
      lwinHTTPService.SetTimeouts(10000,10000,10000,0);

      lSentMQBuffer.CALCFIELDS("XML Source");
      lSentMQBuffer."XML Source".EXPORT(pFileNameToExport + 'SetAllReportResponse_Send.xml');
      lSentMQBuffer."XML Source".CREATEINSTREAM(lInStream);

      // Envoi de la demande au webservice
      lwinHTTPService.Send(lInStream);

      IF NOT lwinHTTPService.WaitForResponse(600) THEN ERROR('Request timed out.');

      CREATE(lXmlDom);
      lXmlDom.load(lwinHTTPService.ResponseStream);
      lXmlDom.save(pFileNameToExport + 'SetAllReportResponse_Response.xml');
      //HYPERLINK(pFileNameToExport + 'SetAllReportResponse_Response.xml');
    END;

    LOCAL PROCEDURE GetTempFilename@9() FileName@1000 : Text[260];
    VAR
      I@1001 : Integer;
      DocNo@1002 : Text[30];
      TempFile@1100281000 : File;
      lText001@1100281001 : TextConst 'ENU=\Doc;FRA=\Doc';
    BEGIN
      TempFile.CREATETEMPFILE;
      FileName := TempFile.NAME + '.xml';
      TempFile.CLOSE;
      EXIT;
      REPEAT
        IF I <> 0 THEN
          DocNo := FORMAT(I);
        IF NOT ISSERVICETIER THEN BEGIN
          FileName := TEMPORARYPATH + lText001 + DocNo + '.xml';
        END ELSE BEGIN
          TempFile.CREATETEMPFILE;
          FileName := TempFile.NAME + '.' + '.xml';
          TempFile.CLOSE;
        END;

        IF NOT EXISTS(FileName) THEN
          EXIT;
        I := I +1;
      UNTIL I=999;
    END;

    LOCAL PROCEDURE FormatBoolean@1000000000(pBoolean@1100281000 : Boolean) : Text[30];
    BEGIN
      IF pBoolean THEN BEGIN
        EXIT('true');
      END ELSE BEGIN
        EXIT('false');
      END;
    END;

    PROCEDURE DecodeFileBase64@1000000001();
    VAR
      lToolsManagement@1000000000 : Codeunit 8016602;
      lInStream@1000000004 : InStream;
      lOutStream@1000000005 : OutStream;
      lFile@1000000001 : File;
      lFile2@1000000006 : File;
      lTextBuffer@1000000002 : Text[1024];
      lFileNameToExport@1000000003 : Text[1024];
    BEGIN
      lFileNameToExport := CommonDialogMgt.OpenFile('','',4,Text009,1);
      lFile.OPEN(lFileNameToExport);
      lFile.CREATEINSTREAM(lInStream);

      lTextBuffer := lFileNameToExport;
      WHILE COPYSTR(lTextBuffer,STRLEN(lTextBuffer)) <> '\' DO BEGIN
        lTextBuffer := COPYSTR(lTextBuffer,1,STRLEN(lTextBuffer) - 1);
      END;
      lTextBuffer := lTextBuffer + 'FichierDecod‚';
      lFile2.CREATE(lTextBuffer);
      lFile2.CREATEOUTSTREAM(lOutStream);

      lToolsManagement.DecodeBase64(lInStream,lOutStream);
      lFile.CLOSE;
      lFile2.CLOSE;
    END;

    BEGIN
    {
      /** @r IMH01 @d 20/03/12 @a ISAT.ST @v IMH6.01.105 @s Extranet qualit‚ @c Cr‚ation objet */
    }
    END.
  }
}