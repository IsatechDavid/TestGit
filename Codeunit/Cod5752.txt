OBJECT Codeunit 5752 Get Source Doc. Outbound
{
  OBJECT-PROPERTIES
  {
    Date=03/08/10;
    Time=16:56:54;
    Version List=NAVW16.00.01,ISA6.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1000 : TextConst 'ENU=If %1 is %2 in %3 no. %4, then all associated lines where type is %5 must use the same location.';
      Text002@1001 : TextConst 'ENU=The warehouse shipment was not created because the Shipping Advice field is set to Complete, and item no. %1 is not available in location code %2.\\You can create the warehouse shipment by either changing the Shipping Advice field to Partial in %3 no. %4, or filling in the warehouse shipment document manually.';

    PROCEDURE GetOutboundDocs@1(VAR WhseShptHeader@1003 : Record 7320);
    VAR
      WhseGetSourceFilterRec@1001 : Record 5771;
      WhseSourceFilterSelection@1002 : Form 5784;
    BEGIN
      WhseShptHeader.FIND;
      WhseSourceFilterSelection.SetOneCreatedShptHeader(WhseShptHeader);
      WhseGetSourceFilterRec.FILTERGROUP(2);
      WhseGetSourceFilterRec.SETRANGE(Type,WhseGetSourceFilterRec.Type::Outbound);
      WhseGetSourceFilterRec.FILTERGROUP(0);
      WhseSourceFilterSelection.SETTABLEVIEW(WhseGetSourceFilterRec);
      WhseSourceFilterSelection.RUNMODAL;

      WhseShptHeader."Document Status" := WhseShptHeader.GetDocumentStatus(0);
      WhseShptHeader.MODIFY;
    END;

    PROCEDURE GetSingleOutboundDoc@2(VAR WhseShptHeader@1000 : Record 7320);
    VAR
      WhseRqst@1001 : Record 5765;
      SourceDocSelection@1003 : Form 5793;
      GetSourceDocuments@1004 : Report 5753;
    BEGIN
      WhseShptHeader.FIND;

      WhseRqst.FILTERGROUP(2);
      WhseRqst.SETRANGE(Type,WhseRqst.Type::Outbound);
      WhseRqst.SETRANGE("Location Code",WhseShptHeader."Location Code");
      WhseRqst.FILTERGROUP(0);
      WhseRqst.SETRANGE("Document Status",WhseRqst."Document Status"::Released);
      WhseRqst.SETRANGE("Completely Handled",FALSE);

      SourceDocSelection.LOOKUPMODE(TRUE);
      SourceDocSelection.SETTABLEVIEW(WhseRqst);
      IF SourceDocSelection.RUNMODAL <> ACTION::LookupOK THEN
        EXIT;
      SourceDocSelection.GetResult(WhseRqst);

      GetSourceDocuments.SetOneCreatedShptHeader(WhseShptHeader);
      WhseRqst.MARKEDONLY(TRUE);
      IF NOT WhseRqst.FIND('-') THEN BEGIN
        WhseRqst.MARKEDONLY(FALSE);
        WhseRqst.SETRECFILTER;
      END;

      GetSourceDocuments.SetSkipBlocked(TRUE);
      GetSourceDocuments.USEREQUESTFORM(FALSE);
      GetSourceDocuments.SETTABLEVIEW(WhseRqst);
      GetSourceDocuments.RUNMODAL;

      WhseShptHeader."Document Status" :=
        WhseShptHeader.GetDocumentStatus(0);
      WhseShptHeader.MODIFY;
    END;

    PROCEDURE CreateFromSalesOrder@3(SalesHeader@1000 : Record 36);
    VAR
      WhseRqst@1001 : Record 5765;
      WhseShptHeader@1002 : Record 7320;
      GetSourceDocuments@1003 : Report 5753;
    BEGIN
      WITH SalesHeader DO BEGIN
        TESTFIELD(Status,Status::Released);
      //<<ISA01.ST
        CheckLocation(TRUE);
        CheckSalesHeader(SalesHeader,TRUE);
      //>>ISA01.ST
        WhseRqst.SETRANGE(Type,WhseRqst.Type::Outbound);
        WhseRqst.SETRANGE("Source Type",DATABASE::"Sales Line");
        WhseRqst.SETRANGE("Source Subtype","Document Type");
        WhseRqst.SETRANGE("Source No.","No.");
        WhseRqst.SETRANGE("Document Status",WhseRqst."Document Status"::Released);

        IF WhseRqst.FIND('-') THEN BEGIN
          GetSourceDocuments.USEREQUESTFORM(FALSE);
          GetSourceDocuments.SETTABLEVIEW(WhseRqst);
          GetSourceDocuments.RUNMODAL;
          GetSourceDocuments.GetLastShptHeader(WhseShptHeader);
          FORM.RUN(FORM::"Warehouse Shipment",WhseShptHeader);
        END;
      END;
    END;

    PROCEDURE CreateFromPurchaseReturnOrder@6(PurchHeader@1000 : Record 38);
    VAR
      WhseRqst@1001 : Record 5765;
      WhseShptHeader@1002 : Record 7320;
      GetSourceDocuments@1003 : Report 5753;
    BEGIN
      WITH PurchHeader DO BEGIN
        TESTFIELD(Status,Status::Released);
        WhseRqst.SETRANGE(Type,WhseRqst.Type::Outbound);
        WhseRqst.SETRANGE("Source Type",DATABASE::"Purchase Line");
        WhseRqst.SETRANGE("Source Subtype","Document Type");
        WhseRqst.SETRANGE("Source No.","No.");
        WhseRqst.SETRANGE("Document Status",WhseRqst."Document Status"::Released);

        IF WhseRqst.FIND('-') THEN BEGIN
          GetSourceDocuments.USEREQUESTFORM(FALSE);
          GetSourceDocuments.SETTABLEVIEW(WhseRqst);
          GetSourceDocuments.RUNMODAL;
          GetSourceDocuments.GetLastShptHeader(WhseShptHeader);
          FORM.RUN(FORM::"Warehouse Shipment",WhseShptHeader);
        END;
      END;
    END;

    PROCEDURE CreateFromOutbndTransferOrder@4(TransHeader@1000 : Record 5740);
    VAR
      WhseRqst@1001 : Record 5765;
      WhseShptHeader@1002 : Record 7320;
      GetSourceDocuments@1003 : Report 5753;
    BEGIN
      WITH TransHeader DO BEGIN
        TESTFIELD(Status,Status::Released);
        CheckTransferHeader(TransHeader,TRUE); //ISA01.ST
        WhseRqst.SETRANGE(Type,WhseRqst.Type::Outbound);
        WhseRqst.SETRANGE("Source Type",DATABASE::"Transfer Line");
        WhseRqst.SETRANGE("Source Subtype",0);
        WhseRqst.SETRANGE("Source No.","No.");
        WhseRqst.SETRANGE("Document Status",WhseRqst."Document Status"::Released);

        IF WhseRqst.FIND('-') THEN BEGIN
          GetSourceDocuments.USEREQUESTFORM(FALSE);
          GetSourceDocuments.SETTABLEVIEW(WhseRqst);
          GetSourceDocuments.RUNMODAL;
          GetSourceDocuments.GetLastShptHeader(WhseShptHeader);
          FORM.RUN(FORM::"Warehouse Shipment",WhseShptHeader);
        END;
      END;
    END;

    PROCEDURE GetSingleWhsePickDoc@5(CurrentWhseWkshTemplate@1008 : Code[10];CurrentWhseWkshName@1004 : Code[10];LocationCode@1000 : Code[10]);
    VAR
      PickWkshName@1005 : Record 7327;
      WhsePickRqst@1001 : Record 7325;
      WhsePickDocSelection@1003 : Form 7343;
      GetWhseSourceDocuments@1007 : Report 7304;
    BEGIN
      PickWkshName.GET(CurrentWhseWkshTemplate,CurrentWhseWkshName,LocationCode);

      WhsePickRqst.FILTERGROUP(2);
      WhsePickRqst.SETRANGE(Status,WhsePickRqst.Status::Released);
      WhsePickRqst.SETRANGE("Completely Picked",FALSE);
      WhsePickRqst.SETRANGE("Location Code",LocationCode);
      WhsePickRqst.FILTERGROUP(0);

      WhsePickDocSelection.LOOKUPMODE(TRUE);
      WhsePickDocSelection.SETTABLEVIEW(WhsePickRqst);
      IF WhsePickDocSelection.RUNMODAL <> ACTION::LookupOK THEN
        EXIT;
      WhsePickDocSelection.GetResult(WhsePickRqst);

      GetWhseSourceDocuments.SetPickWkshName(
        CurrentWhseWkshTemplate,CurrentWhseWkshName,LocationCode);
      WhsePickRqst.MARKEDONLY(TRUE);
      IF NOT WhsePickRqst.FIND('-') THEN BEGIN
        WhsePickRqst.MARKEDONLY(FALSE);
        WhsePickRqst.SETRECFILTER;
      END;

      GetWhseSourceDocuments.USEREQUESTFORM(FALSE);
      GetWhseSourceDocuments.SETTABLEVIEW(WhsePickRqst);
      GetWhseSourceDocuments.RUNMODAL;
    END;

    PROCEDURE CheckSalesHeader@7(SalesHeader@1000 : Record 36;ShowError@1001 : Boolean) : Boolean;
    VAR
      SalesLine@1002 : Record 37;
      SalesLine2@1003 : Record 37;
      SalesOrder@1004 : Form 42;
      CurrItemNo@1005 : Code[20];
      QtyOutstandingBase@1006 : Decimal;
      RecordNo@1007 : Integer;
      TotalNoOfRecords@1008 : Integer;
    BEGIN
      //ISA01.ST
      WITH SalesHeader DO BEGIN
        IF NOT ("Shipping Advice" = "Shipping Advice"::Complete) THEN
          EXIT(FALSE);

        SalesLine.SETCURRENTKEY("Document Type",Type,"No.");
        SalesLine.SETRANGE("Document Type","Document Type");
        SalesLine.SETRANGE("Document No.","No.");
        SalesLine.SETRANGE(Type,SalesLine.Type::Item);
        IF SalesLine.FINDSET THEN BEGIN
          SalesLine2.COPYFILTERS(SalesLine);
          SalesLine2.SETCURRENTKEY("Document Type","Document No.","Location Code");
          SalesLine2.SETFILTER("Location Code",'<> %1',SalesLine."Location Code");
          IF NOT SalesLine2.ISEMPTY THEN BEGIN
            IF ShowError THEN
              ERROR(Text001,FIELDCAPTION("Shipping Advice"),"Shipping Advice",
                SalesOrder.CAPTION,"No.",SalesLine.Type);
            EXIT(TRUE);
          END;

          CurrItemNo := SalesLine."No.";
          TotalNoOfRecords := SalesLine.COUNT;
          REPEAT
            RecordNo := 1;
            IF SalesLine."No." = CurrItemNo THEN
              QtyOutstandingBase := SalesLine."Outstanding Qty. (Base)"
            ELSE BEGIN
              IF CheckAvailability(CurrItemNo,QtyOutstandingBase,SalesLine."Location Code",
                   SalesOrder.CAPTION,DATABASE::"Sales Line","Document Type","No.",ShowError) THEN
                EXIT(TRUE);
              CurrItemNo := SalesLine."No.";
              QtyOutstandingBase := SalesLine."Outstanding Qty. (Base)";
            END;
            IF RecordNo = TotalNoOfRecords THEN BEGIN // last record
              IF CheckAvailability(CurrItemNo,QtyOutstandingBase,SalesLine."Location Code",
                   SalesOrder.CAPTION,DATABASE::"Sales Line","Document Type","No.",ShowError) THEN
                EXIT(TRUE);
            END;
          UNTIL SalesLine.NEXT = 0; // sorted by item
        END;
      END;
    END;

    PROCEDURE CheckTransferHeader@8(TransferHeader@1000 : Record 5740;ShowError@1001 : Boolean) : Boolean;
    VAR
      TransferLine@1002 : Record 5741;
      TransferLine2@1003 : Record 5741;
      TransferOrder@8016602 : Form 5740;
      CurrItemNo@1004 : Code[20];
      QtyOutstandingBase@1005 : Decimal;
      RecordNo@1006 : Integer;
      TotalNoOfRecords@1007 : Integer;
    BEGIN
      //ISA01.ST
      WITH TransferHeader DO BEGIN
        IF NOT ("Shipping Advice" = "Shipping Advice"::Complete) THEN
          EXIT(FALSE);

        TransferLine.SETCURRENTKEY("Item No.");
        TransferLine.SETRANGE("Document No.","No.");
        IF TransferLine.FINDSET THEN BEGIN
          CurrItemNo := TransferLine."Item No.";
          TotalNoOfRecords := TransferLine.COUNT;
          REPEAT
            RecordNo := 1;
            IF TransferLine."Item No." = CurrItemNo THEN
              QtyOutstandingBase := TransferLine."Outstanding Qty. (Base)"
            ELSE BEGIN
              IF CheckAvailability(CurrItemNo,QtyOutstandingBase,TransferLine."Transfer-from Code",
                   TransferOrder.CAPTION,DATABASE::"Transfer Line",0,"No.",ShowError) THEN // outbound
                EXIT(TRUE);
              CurrItemNo := TransferLine."Item No.";
              QtyOutstandingBase := TransferLine."Outstanding Qty. (Base)";
            END;
            IF RecordNo = TotalNoOfRecords THEN BEGIN // last record
              IF CheckAvailability(CurrItemNo,QtyOutstandingBase,TransferLine."Transfer-from Code",
                   TransferOrder.CAPTION,DATABASE::"Transfer Line",0,"No.",ShowError) THEN // outbound
                EXIT(TRUE);
            END;
          UNTIL TransferLine.NEXT = 0; // sorted by item
        END;
      END;
    END;

    PROCEDURE CheckAvailability@9(ItemNo@1000 : Code[20];QtyBaseNeeded@1001 : Decimal;LocationCode@1002 : Code[10];FormCaption@1003 : Text[1024];SourceType@1004 : Integer;SourceSubType@1005 : Integer;SourceID@1006 : Code[20];ShowError@1007 : Boolean) : Boolean;
    VAR
      Item@1008 : Record 27;
      ReservEntry@1009 : Record 337;
      ReservEntry2@1010 : Record 337;
      QtyReservedForOrder@1011 : Decimal;
    BEGIN
      //ISA01.ST
      WITH Item DO BEGIN
        GET(ItemNo);
        SETRANGE("Location Filter",LocationCode);
        CALCFIELDS(Inventory,"Reserved Qty. on Inventory");

        // find qty reserved for this order
        ReservEntry.SETCURRENTKEY("Source ID","Source Ref. No.","Source Type","Source Subtype");
        ReservEntry.SETRANGE("Item No.",ItemNo);
        ReservEntry.SETRANGE("Location Code",LocationCode);
        ReservEntry.SETRANGE("Reservation Status",ReservEntry."Reservation Status"::Reservation);
        ReservEntry.SETRANGE("Source Type",SourceType);
        ReservEntry.SETRANGE("Source Subtype",SourceSubType);
        ReservEntry.SETRANGE("Source ID",SourceID);
        IF ReservEntry.FINDSET THEN
          REPEAT
            ReservEntry2.GET(ReservEntry."Entry No.",NOT ReservEntry.Positive);
            QtyReservedForOrder := ReservEntry2."Quantity (Base)";
          UNTIL ReservEntry.NEXT = 0;

        IF Inventory - ("Reserved Qty. on Inventory" - QtyReservedForOrder) < QtyBaseNeeded THEN BEGIN
          IF ShowError THEN
            ERROR(Text002,ItemNo,LocationCode,FormCaption,SourceID);
          EXIT(TRUE);
        END;
      END;
    END;

    BEGIN
    {
      /**@r ISA01 @d 03/08/10 @a ISAT.ST @v ISA6.00.00.09 @s Correctif MS
         @c KB979254 */
    }
    END.
  }
}