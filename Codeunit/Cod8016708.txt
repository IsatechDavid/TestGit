OBJECT Codeunit 8016708 EAI MQ Buffer Management
{
  OBJECT-PROPERTIES
  {
    Date=13/11/13;
    Time=10:51:10;
    Modified=Yes;
    Version List=ISAEAI1.00,DARVA1.3;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE _GetSentBufferFromMQ@1100281000(FromMQ@1100281000 : Record 8016704;VAR ToBuffer@1100281001 : Record 8016720);
    VAR
      lEAITools@1100281004 : Codeunit 8016700;
      lFromRecRef@1100281002 : RecordRef;
      lToRecRef@1100281003 : RecordRef;
    BEGIN
      // On r‚cup‚re un buffer rempli par la liste de message correspondant … une file de message
      lToRecRef.GETTABLE(ToBuffer);

      lFromRecRef.OPEN(FromMQ."Table No.");
      IF lFromRecRef.FINDSET(TRUE,FALSE) THEN
        REPEAT
          TransferFieldsRecRef(lFromRecRef,lToRecRef);
          lToRecRef.INSERT;
        UNTIL lFromRecRef.NEXT = 0;
    END;

    PROCEDURE _GetSentBufferFromMQCode@1100281008(FromMQCode@1100281000 : Code[20];VAR ToBuffer@1100281001 : Record 8016720);
    VAR
      lEAIMQ@1100281005 : Record 8016704;
    BEGIN
      // On r‚cup‚re un buffer rempli par la liste de message correspondant … une file de message
      lEAIMQ.GET(FromMQCode);
      _GetSentBufferFromMQ(lEAIMQ,ToBuffer);
    END;

    PROCEDURE _GetReceivedBufferFromMQ@1100281001(FromMQ@1100281000 : Record 8016704;VAR ToBuffer@1100281001 : Record 8016721);
    VAR
      lEAITools@1100281004 : Codeunit 8016700;
      lFromRecRef@1100281002 : RecordRef;
      lToRecRef@1100281003 : RecordRef;
    BEGIN
      // On r‚cup‚re un buffer rempli par la liste de message correspondant … une file de message
      lToRecRef.GETTABLE(ToBuffer);

      lFromRecRef.OPEN(FromMQ."Table No.");
      IF lFromRecRef.FINDSET(TRUE,FALSE) THEN
        REPEAT
          TransferFieldsRecRef(lFromRecRef,lToRecRef);
          lToRecRef.INSERT;
        UNTIL lFromRecRef.NEXT=0;
    END;

    PROCEDURE _GetReceivedBufferFromMQCode@1100281014(FromMQCode@1100281000 : Code[20];VAR ToBuffer@1100281001 : Record 8016721);
    VAR
      lEAIMQ@1100281005 : Record 8016704;
    BEGIN
      // On r‚cup‚re un buffer rempli par la liste de message correspondant … une file de message
      lEAIMQ.GET(FromMQCode);
      _GetReceivedBufferFromMQ(lEAIMQ,ToBuffer);
    END;

    PROCEDURE InsertSentBufferToMQ@1100281005(VAR ToMQ@1100281000 : Record 8016704;VAR FromBuffer@1100281001 : Record 8016720);
    VAR
      lEAITools@1100281004 : Codeunit 8016700;
      lFromRecRef@1100281002 : RecordRef;
      lToRecRef@1100281003 : RecordRef;
    BEGIN
      // On vide le buffer pour mettre … jour la liste de message correspondant … une file de message
      lToRecRef.OPEN(ToMQ."Table No.");

      FromBuffer.RESET;
      IF FromBuffer.FINDSET(FALSE,FALSE) THEN
        REPEAT
          lFromRecRef.GETTABLE(FromBuffer);
          TransferFieldsRecRef(lFromRecRef,lToRecRef);
          lToRecRef.INSERT(TRUE)
        //IF NOT lToRecRef.INSERT(TRUE) THEN
        //  lToRecRef.MODIFY(TRUE);
        UNTIL FromBuffer.NEXT = 0;
    END;

    PROCEDURE InsertSentBufferToMQCode@1100281011(ToMQCode@1100281000 : Code[20];VAR FromBuffer@1100281001 : Record 8016720);
    VAR
      lEAIMQ@1100281005 : Record 8016704;
    BEGIN
      // On r‚cup‚re un buffer rempli par la liste de message correspondant … une file de message
      lEAIMQ.GET(ToMQCode);
      InsertSentBufferToMQ(lEAIMQ,FromBuffer);
    END;

    PROCEDURE InsertReceivedBufferToMQ@1100281004(VAR ToMQ@1100281001 : Record 8016704;VAR FromBuffer@1100281000 : Record 8016721);
    VAR
      lEAITools@1100281004 : Codeunit 8016700;
      lFromRecRef@1100281002 : RecordRef;
      lToRecRef@1100281003 : RecordRef;
    BEGIN
      // On vide le buffer pour mettre … jour la liste de message correspondant … une file de message
      lToRecRef.OPEN(ToMQ."Table No.");

      FromBuffer.RESET;
      IF FromBuffer.FINDSET(FALSE,FALSE) THEN
        REPEAT
          lFromRecRef.GETTABLE(FromBuffer);
          TransferFieldsRecRef(lFromRecRef,lToRecRef);
          lToRecRef.INSERT(TRUE);
        UNTIL FromBuffer.NEXT = 0;
    END;

    PROCEDURE InsertReceivedBufferToMQCode@1100281010(ToMQCode@1100281000 : Code[20];VAR FromBuffer@1100281001 : Record 8016721);
    VAR
      lEAIMQ@1100281005 : Record 8016704;
    BEGIN
      // On r‚cup‚re un buffer rempli par la liste de message correspondant … une file de message
      lEAIMQ.GET(ToMQCode);
      InsertReceivedBufferToMQ(lEAIMQ,FromBuffer);
    END;

    PROCEDURE _SetSentBufferToPostedMQ@1100281003(VAR ToMQ@1100281000 : Record 8016704;VAR FromBuffer@1100281001 : Record 8016720);
    VAR
      lEAITools@1100281004 : Codeunit 8016700;
      lFromRecRef@1100281002 : RecordRef;
      lToMQRecRef@1100281003 : RecordRef;
      lToHistoMQRecRef@1100281005 : RecordRef;
    BEGIN
      // On vide le buffer pour mettre … jour la liste de message historique correspondant … une file de message
      lToMQRecRef.OPEN(ToMQ."Table No.");
      lToHistoMQRecRef.OPEN(ToMQ."Posted Table No.");

      FromBuffer.RESET;
      FromBuffer.SETRANGE(Status,FromBuffer.Status::Unprocessed);
      IF FromBuffer.FINDSET(FALSE,FALSE) THEN
        REPEAT
          lFromRecRef.GETTABLE(FromBuffer);
          //Sauvegarde dans l'historique
          IF ToMQ."Posted Table No."<>0 THEN
          BEGIN
            TransferFieldsRecRef(lFromRecRef,lToHistoMQRecRef);
            lToHistoMQRecRef.INSERT(TRUE);
          END;
          //Suppression de la liste des messages
          TransferFieldsRecRef(lFromRecRef,lToMQRecRef);
          lToMQRecRef.DELETE(TRUE);
        UNTIL FromBuffer.NEXT = 0;
    END;

    PROCEDURE _SetSentBufferToPostedMQCode@1100281007(ToMQCode@1100281000 : Code[20];VAR FromBuffer@1100281001 : Record 8016720);
    VAR
      lEAIMQ@1100281005 : Record 8016704;
    BEGIN
      // On r‚cup‚re un buffer rempli par la liste de message correspondant … une file de message
      lEAIMQ.GET(ToMQCode);
      _SetSentBufferToPostedMQ(lEAIMQ,FromBuffer);
    END;

    PROCEDURE _SetRcvdBufferToPostedMQ@1100281006(VAR ToMQ@1100281001 : Record 8016704;VAR FromBuffer@1100281000 : Record 8016721);
    VAR
      lEAITools@1100281004 : Codeunit 8016700;
      lFromRecRef@1100281002 : RecordRef;
      lToMQRecRef@1100281003 : RecordRef;
      lToHistoMQRecRef@1100281005 : RecordRef;
    BEGIN
      // On vide le buffer pour mettre … jour la liste de message historique correspondant … une file de message
      lToMQRecRef.OPEN(ToMQ."Table No.");
      lToHistoMQRecRef.OPEN(ToMQ."Posted Table No.");

      //FromBuffer.RESET;
      //FromBuffer.SETRANGE(Status,FromBuffer.Status::Unprocessed);
      //IF FromBuffer.FINDSET(FALSE,FALSE) THEN
      //  REPEAT
          lFromRecRef.GETTABLE(FromBuffer);
          //Sauvegarde dans l'historique
          IF ToMQ."Posted Table No."<>0 THEN
          BEGIN
            TransferFieldsRecRef(lFromRecRef,lToHistoMQRecRef);
            lToHistoMQRecRef.INSERT(TRUE);
          END;
          //Suppression de la liste des messages
          TransferFieldsRecRef(lFromRecRef,lToMQRecRef);
          lToMQRecRef.DELETE(TRUE);
      //  UNTIL FromBuffer.NEXT = 0;
    END;

    PROCEDURE _SetRcvdBufferToPostedMQCode@1100281009(ToMQCode@1100281000 : Code[20];VAR FromBuffer@1100281001 : Record 8016721);
    VAR
      lEAIMQ@1100281005 : Record 8016704;
    BEGIN
      // On r‚cup‚re un buffer rempli par la liste de message correspondant … une file de message
      lEAIMQ.GET(ToMQCode);
      _SetRcvdBufferToPostedMQ(lEAIMQ,FromBuffer);
    END;

    LOCAL PROCEDURE TransferFieldsRecRef@1100281002(pFromRecRef@1100281000 : RecordRef;VAR pToRecRef@1100281001 : RecordRef);
    VAR
      lFieldRec@1100281006 : Record 2000000041;
      lFromFieldRef@1100281004 : FieldRef;
      lToFieldRef@1100281005 : FieldRef;
      lNbFields@1100281002 : Integer;
      I@1100281003 : Integer;
      lFieldNo@1100281007 : Integer;
    BEGIN
      //TRANSFERFIELDS manuel car fonction inutilisable sur RECORDREF
      pToRecRef.INIT;
      lNbFields := pFromRecRef.FIELDCOUNT;
      FOR I := 1 TO lNbFields DO BEGIN
        lFromFieldRef := pFromRecRef.FIELDINDEX(I);
        lFieldNo := lFromFieldRef.NUMBER;
        IF pToRecRef.FIELDEXIST(lFieldNo) THEN BEGIN
          lFieldRec.GET(pFromRecRef.NUMBER,lFromFieldRef.NUMBER);
          IF lFieldRec.Class = lFieldRec.Class::Normal THEN BEGIN
            lToFieldRef := pToRecRef.FIELD(lFieldRec."No.");
            IF lFieldRec.Type = lFieldRec.Type::BLOB THEN
              lFromFieldRef.CALCFIELD;
            lToFieldRef.VALUE := lFromFieldRef.VALUE;
          END;
        END;
      END;
    END;

    PROCEDURE SetFilterAndKeyOnSendMQ@1100481000(VAR pRecRef@1100481000 : RecordRef;pMessageQueue@1100481001 : Record 8016704;pStep@1100481004 : Integer;pStatus@1100481005 : Integer);
    VAR
      lFieldRef@1100481002 : FieldRef;
      lSentMq1@1100481006 : Record 8016722;
      lSentMq2@1100481007 : Record 8016723;
      lSentMq3@1100481008 : Record 8016724;
      lSentMq4@1100481009 : Record 8016725;
      lSentMq5@1100481010 : Record 8016726;
    BEGIN
      CASE pMessageQueue."Table No." OF
        DATABASE::"EAI Sent MQ 1":
          BEGIN
            lSentMq1.SETCURRENTKEY(Step,Status);
            lSentMq1.SETRANGE(Step,pStep);
            lSentMq1.SETRANGE(Status,pStatus);
            pRecRef.GETTABLE(lSentMq1);
          END;
        DATABASE::"EAI Sent MQ 2":
          BEGIN
            lSentMq2.SETCURRENTKEY(Step,Status);
            lSentMq2.SETRANGE(Step,pStep);
            lSentMq2.SETRANGE(Status,pStatus);
            pRecRef.GETTABLE(lSentMq2);
          END;
        DATABASE::"EAI Sent MQ 3":
          BEGIN
            lSentMq3.SETCURRENTKEY(Step,Status);
            lSentMq3.SETRANGE(Step,pStep);
            lSentMq3.SETRANGE(Status,pStatus);
            pRecRef.GETTABLE(lSentMq3);
          END;
        DATABASE::"EAI Sent MQ 4":
          BEGIN
            lSentMq4.SETCURRENTKEY(Step,Status);
            lSentMq4.SETRANGE(Step,pStep);
            lSentMq4.SETRANGE(Status,pStatus);
            pRecRef.GETTABLE(lSentMq4);
          END;
        DATABASE::"EAI Sent MQ 5":
          BEGIN
            lSentMq5.SETCURRENTKEY(Step,Status);
            lSentMq5.SETRANGE(Step,pStep);
            lSentMq5.SETRANGE(Status,pStatus);
            pRecRef.GETTABLE(lSentMq5);
          END;
      END;
    END;

    PROCEDURE SetFilterAndKeyOnRcvdMQ@1100481007(VAR pRecRef@1100481005 : RecordRef;pMessageQueue@1100481004 : Record 8016704;pStep@1100481001 : Integer;pStatus@1100481000 : Integer);
    VAR
      lFieldRef@1100481002 : FieldRef;
      lRcvdMq1@1100481009 : Record 8016727;
      lRcvdMq2@1100481008 : Record 8016728;
      lRcvdMq3@1100481007 : Record 8016729;
      lRcvdMq4@1100481006 : Record 8016730;
      lRcvdMq5@1100481003 : Record 8016731;
    BEGIN
      CASE pMessageQueue."Table No." OF
        DATABASE::"EAI Rcvd MQ 1":
          BEGIN
            lRcvdMq1.SETCURRENTKEY(Step,Status);
            lRcvdMq1.SETRANGE(Step,pStep);
            lRcvdMq1.SETRANGE(Status,pStatus);
            pRecRef.GETTABLE(lRcvdMq1);
          END;
        DATABASE::"EAI Rcvd MQ 2":
          BEGIN
            lRcvdMq2.SETCURRENTKEY(Step,Status);
            lRcvdMq2.SETRANGE(Step,pStep);
            lRcvdMq2.SETRANGE(Status,pStatus);
            pRecRef.GETTABLE(lRcvdMq2);
          END;
        DATABASE::"EAI Rcvd MQ 3":
          BEGIN
            lRcvdMq3.SETCURRENTKEY(Step,Status);
            lRcvdMq3.SETRANGE(Step,pStep);
            lRcvdMq3.SETRANGE(Status,pStatus);
            pRecRef.GETTABLE(lRcvdMq3);
          END;
        DATABASE::"EAI Rcvd MQ 4":
          BEGIN
            lRcvdMq4.SETCURRENTKEY(Step,Status);
            lRcvdMq4.SETRANGE(Step,pStep);
            lRcvdMq4.SETRANGE(Status,pStatus);
            pRecRef.GETTABLE(lRcvdMq4);
          END;
        DATABASE::"EAI Rcvd MQ 5":
          BEGIN
            lRcvdMq5.SETCURRENTKEY(Step,Status);
            lRcvdMq5.SETRANGE(Step,pStep);
            lRcvdMq5.SETRANGE(Status,pStatus);
            pRecRef.GETTABLE(lRcvdMq5);
          END;
      END;
    END;

    PROCEDURE LockCurrentSendMQ@1100481003(pSendMqBuffer@1100481000 : Record 8016720);
    VAR
      lMessageQueue@1100481001 : Record 8016704;
      lSentMq1@1100481006 : Record 8016722;
      lSentMq2@1100481005 : Record 8016723;
      lSentMq3@1100481004 : Record 8016724;
      lSentMq4@1100481003 : Record 8016725;
      lSentMq5@1100481002 : Record 8016726;
    BEGIN
      lMessageQueue.GET(pSendMqBuffer."EAI MQ Code");
      CASE lMessageQueue."Table No." OF
        DATABASE::"EAI Sent MQ 1":
          BEGIN
            lSentMq1.LOCKTABLE;
            lSentMq1.GET(pSendMqBuffer."Entry No.");
          END;
        DATABASE::"EAI Sent MQ 2":
          BEGIN
            lSentMq2.LOCKTABLE;
            lSentMq2.GET(pSendMqBuffer."Entry No.");
          END;
        DATABASE::"EAI Sent MQ 3":
          BEGIN
            lSentMq3.LOCKTABLE;
            lSentMq3.GET(pSendMqBuffer."Entry No.");
          END;
        DATABASE::"EAI Sent MQ 4":
          BEGIN
            lSentMq4.LOCKTABLE;
            lSentMq4.GET(pSendMqBuffer."Entry No.");
          END;
        DATABASE::"EAI Sent MQ 5":
          BEGIN
            lSentMq5.LOCKTABLE;
            lSentMq5.GET(pSendMqBuffer."Entry No.");
          END;
      END;
    END;

    PROCEDURE LockCurrentRcvdMQ@1100481005(pRcvdMqBuffer@1100481000 : Record 8016721);
    VAR
      lMessageQueue@1100481001 : Record 8016704;
      lRcvdMq1@1100481006 : Record 8016727;
      lRcvdMq2@1100481005 : Record 8016728;
      lRcvdMq3@1100481004 : Record 8016729;
      lRcvdMq4@1100481003 : Record 8016730;
      lRcvdMq5@1100481002 : Record 8016731;
    BEGIN
      lMessageQueue.GET(pRcvdMqBuffer."EAI MQ Code");
      CASE lMessageQueue."Table No." OF
        DATABASE::"EAI Rcvd MQ 1":
          BEGIN
            lRcvdMq1.LOCKTABLE;
            lRcvdMq1.GET(pRcvdMqBuffer."Entry No.");
          END;
        DATABASE::"EAI Rcvd MQ 2":
          BEGIN
            lRcvdMq2.LOCKTABLE;
            lRcvdMq2.GET(pRcvdMqBuffer."Entry No.");
          END;
        DATABASE::"EAI Rcvd MQ 3":
          BEGIN
            lRcvdMq3.LOCKTABLE;
            lRcvdMq3.GET(pRcvdMqBuffer."Entry No.");
          END;
        DATABASE::"EAI Rcvd MQ 4":
          BEGIN
            lRcvdMq4.LOCKTABLE;
            lRcvdMq4.GET(pRcvdMqBuffer."Entry No.");
          END;
        DATABASE::"EAI Rcvd MQ 5":
          BEGIN
            lRcvdMq5.LOCKTABLE;
            lRcvdMq5.GET(pRcvdMqBuffer."Entry No.");
          END;
      END;
    END;

    PROCEDURE TransferRecRefToSendMQBuffer@1100481001(pFromRecRef@1100481000 : RecordRef;VAR pSentMQBuffer@1100481001 : Record 8016720);
    VAR
      lToRecRef@1100481002 : RecordRef;
    BEGIN
      // On transfŠre le RecRef vers un enregistrement Buffer
      lToRecRef.GETTABLE(pSentMQBuffer);

      TransferFieldsRecRef(pFromRecRef,lToRecRef);

      lToRecRef.INSERT;
      lToRecRef.SETTABLE(pSentMQBuffer);
    END;

    PROCEDURE TransferRecRefToRcvdMQBuffer@1100481012(pFromRecRef@1100481000 : RecordRef;VAR pRcvdMQBuffer@1100481001 : Record 8016721);
    VAR
      lToRecRef@1100481002 : RecordRef;
    BEGIN
      // On transfŠre le RecRef vers un enregistrement Buffer
      lToRecRef.GETTABLE(pRcvdMQBuffer);

      TransferFieldsRecRef(pFromRecRef,lToRecRef);

      lToRecRef.INSERT;
      lToRecRef.SETTABLE(pRcvdMQBuffer);
      pRcvdMQBuffer."Source MQ" := pFromRecRef.NUMBER; //IMH03.ST
    END;

    PROCEDURE TransferSendMQBufferToSendMQ@1100281020(VAR pSendMqBuffer@1100481001 : Record 8016720);
    VAR
      lMessageQueue@1100481006 : Record 8016704;
      lSentMq1@1100481005 : Record 8016722;
      lSentMq2@1100481004 : Record 8016723;
      lSentMq3@1100481003 : Record 8016724;
      lSentMq4@1100481002 : Record 8016725;
      lSentMq5@1100481000 : Record 8016726;
    BEGIN
      // On vide le buffer pour mettre … jour le message correspondant … une file de message
      pSendMqBuffer.CALCFIELDS("XML Source","Response XML Source");

      lMessageQueue.GET(pSendMqBuffer."EAI MQ Code");
      CASE lMessageQueue."Table No." OF
        DATABASE::"EAI Sent MQ 1" : BEGIN
          lSentMq1.TRANSFERFIELDS(pSendMqBuffer);
          lSentMq1."XML Source" := pSendMqBuffer."XML Source";
          lSentMq1.MODIFY(TRUE);
        END;
        DATABASE::"EAI Sent MQ 2" : BEGIN
          lSentMq2.GET(pSendMqBuffer."Entry No.");
          lSentMq2.TRANSFERFIELDS(pSendMqBuffer);
          lSentMq2."XML Source" := pSendMqBuffer."XML Source";
          lSentMq2.MODIFY(TRUE);
        END;
        DATABASE::"EAI Sent MQ 3" : BEGIN
          lSentMq3.GET(pSendMqBuffer."Entry No.");
          lSentMq3.TRANSFERFIELDS(pSendMqBuffer);
          lSentMq3."XML Source" := pSendMqBuffer."XML Source";
          lSentMq3.MODIFY(TRUE);
        END;
        DATABASE::"EAI Sent MQ 4" : BEGIN
          lSentMq4.GET(pSendMqBuffer."Entry No.");
          lSentMq4.TRANSFERFIELDS(pSendMqBuffer);
          lSentMq4."XML Source" := pSendMqBuffer."XML Source";
          lSentMq4.MODIFY(TRUE);
        END;
        DATABASE::"EAI Sent MQ 5" : BEGIN
          lSentMq5.GET(pSendMqBuffer."Entry No.");
          lSentMq5.TRANSFERFIELDS(pSendMqBuffer);
          lSentMq5."XML Source" := pSendMqBuffer."XML Source";
          lSentMq5.MODIFY(TRUE);
        END;
      END;
    END;

    PROCEDURE TransferRcvdMQBufferToRcvdMQ@1100481015(VAR pRcvdMqBuffer@1100481001 : Record 8016721);
    VAR
      lMessageQueue@1100481006 : Record 8016704;
      lRcvdMq1@1100481005 : Record 8016727;
      lRcvdMq2@1100481004 : Record 8016728;
      lRcvdMq3@1100481003 : Record 8016729;
      lRcvdMq4@1100481002 : Record 8016730;
      lRcvdMq5@1100481000 : Record 8016731;
    BEGIN
      // On vide le buffer pour mettre … jour le message correspondant … une file de message
      pRcvdMqBuffer.CALCFIELDS("XML Source","Response XML Source");

      lMessageQueue.GET(pRcvdMqBuffer."EAI MQ Code");
      CASE lMessageQueue."Table No." OF
        DATABASE::"EAI Rcvd MQ 1":
          BEGIN
            lRcvdMq1.GET(pRcvdMqBuffer."Entry No.");
            lRcvdMq1.TRANSFERFIELDS(pRcvdMqBuffer);
            lRcvdMq1."XML Source" := pRcvdMqBuffer."XML Source";
            lRcvdMq1."Response XML Source" := pRcvdMqBuffer."Response XML Source";
            lRcvdMq1.MODIFY(TRUE);
          END;
        DATABASE::"EAI Rcvd MQ 2":
          BEGIN
            lRcvdMq2.GET(pRcvdMqBuffer."Entry No.");
            lRcvdMq2.TRANSFERFIELDS(pRcvdMqBuffer);
            lRcvdMq2."XML Source" := pRcvdMqBuffer."XML Source";
            lRcvdMq2."Response XML Source" := pRcvdMqBuffer."Response XML Source";
            lRcvdMq2.MODIFY(TRUE);
          END;
        DATABASE::"EAI Rcvd MQ 3":
          BEGIN
            lRcvdMq3.GET(pRcvdMqBuffer."Entry No.");
            lRcvdMq3.TRANSFERFIELDS(pRcvdMqBuffer);
            lRcvdMq3."XML Source" := pRcvdMqBuffer."XML Source";
            lRcvdMq3."Response XML Source" := pRcvdMqBuffer."Response XML Source";
            lRcvdMq3.MODIFY(TRUE);
          END;
        DATABASE::"EAI Rcvd MQ 4":
          BEGIN
            lRcvdMq4.GET(pRcvdMqBuffer."Entry No.");
            lRcvdMq4.TRANSFERFIELDS(pRcvdMqBuffer);
            lRcvdMq4."XML Source" := pRcvdMqBuffer."XML Source";
            lRcvdMq4."Response XML Source" := pRcvdMqBuffer."Response XML Source";
            lRcvdMq4.MODIFY(TRUE);
          END;
        DATABASE::"EAI Rcvd MQ 5":
          BEGIN
            lRcvdMq5.GET(pRcvdMqBuffer."Entry No.");
            lRcvdMq5.TRANSFERFIELDS(pRcvdMqBuffer);
            lRcvdMq5."XML Source" := pRcvdMqBuffer."XML Source";
            lRcvdMq5."Response XML Source" := pRcvdMqBuffer."Response XML Source";
            lRcvdMq5.MODIFY(TRUE);
          END;
      END;
    END;

    PROCEDURE CreateRcvdMQBufferToRcvdMQ@1100281012(VAR pRcvdMqBuffer@1100481001 : Record 8016721);
    VAR
      lMessageQueue@1100481006 : Record 8016704;
      lRcvdMq1@1100481005 : Record 8016727;
      lRcvdMq2@1100481004 : Record 8016728;
      lRcvdMq3@1100481003 : Record 8016729;
      lRcvdMq4@1100481002 : Record 8016730;
      lRcvdMq5@1100481000 : Record 8016731;
    BEGIN
      //IMH01
      // On vide le buffer pour cr‚er le message correspondant … une file de message
      pRcvdMqBuffer.CALCFIELDS("XML Source","Response XML Source");

      lMessageQueue.GET(pRcvdMqBuffer."EAI MQ Code");
      CASE lMessageQueue."Table No." OF
        DATABASE::"EAI Rcvd MQ 1":
          BEGIN
            lRcvdMq1.INIT;
            lRcvdMq1.TRANSFERFIELDS(pRcvdMqBuffer);
            lRcvdMq1."Entry No." := '';
            lRcvdMq1."XML Source" := pRcvdMqBuffer."XML Source";
            lRcvdMq1."Response XML Source" := pRcvdMqBuffer."Response XML Source";
            lRcvdMq1.INSERT(TRUE);
            pRcvdMqBuffer.DELETE;
            pRcvdMqBuffer."Entry No." := lRcvdMq1."Entry No.";
            pRcvdMqBuffer.INSERT;
          END;
        DATABASE::"EAI Rcvd MQ 2":
          BEGIN
            lRcvdMq2.INIT;
            lRcvdMq2.TRANSFERFIELDS(pRcvdMqBuffer);
            lRcvdMq2."Entry No." := '';
            lRcvdMq2."XML Source" := pRcvdMqBuffer."XML Source";
            lRcvdMq2."Response XML Source" := pRcvdMqBuffer."Response XML Source";
            lRcvdMq2.INSERT(TRUE);
            pRcvdMqBuffer.DELETE;
            pRcvdMqBuffer."Entry No." := lRcvdMq2."Entry No.";
            pRcvdMqBuffer.INSERT;
          END;
        DATABASE::"EAI Rcvd MQ 3":
          BEGIN
            lRcvdMq3.INIT;
            lRcvdMq3.TRANSFERFIELDS(pRcvdMqBuffer);
            lRcvdMq3."Entry No." := '';
            lRcvdMq3."XML Source" := pRcvdMqBuffer."XML Source";
            lRcvdMq3."Response XML Source" := pRcvdMqBuffer."Response XML Source";
            lRcvdMq3.INSERT(TRUE);
            pRcvdMqBuffer.DELETE;
            pRcvdMqBuffer."Entry No." := lRcvdMq3."Entry No.";
            pRcvdMqBuffer.INSERT;
          END;
        DATABASE::"EAI Rcvd MQ 4":
          BEGIN
            lRcvdMq4.INIT;
            lRcvdMq4.TRANSFERFIELDS(pRcvdMqBuffer);
            lRcvdMq4."Entry No." := '';
            lRcvdMq4."XML Source" := pRcvdMqBuffer."XML Source";
            lRcvdMq4."Response XML Source" := pRcvdMqBuffer."Response XML Source";
            lRcvdMq4.INSERT(TRUE);
            pRcvdMqBuffer.DELETE;
            pRcvdMqBuffer."Entry No." := lRcvdMq4."Entry No.";
            pRcvdMqBuffer.INSERT;
          END;
        DATABASE::"EAI Rcvd MQ 5":
          BEGIN
            lRcvdMq5.INIT;
            lRcvdMq5.TRANSFERFIELDS(pRcvdMqBuffer);
            lRcvdMq5."Entry No." := '';
            lRcvdMq5."XML Source" := pRcvdMqBuffer."XML Source";
            lRcvdMq5."Response XML Source" := pRcvdMqBuffer."Response XML Source";
            lRcvdMq5.INSERT(TRUE);
            pRcvdMqBuffer.DELETE;
            pRcvdMqBuffer."Entry No." := lRcvdMq5."Entry No.";
            pRcvdMqBuffer.INSERT;
          END;
      END;
    END;

    PROCEDURE CreateSentMQBufferToSentMQ@1100281015(VAR pSendMqBuffer@1100281000 : Record 8016720);
    VAR
      lMessageQueue@1100281006 : Record 8016704;
      lSentMq1@1100281005 : Record 8016722;
      lSentMq2@1100281004 : Record 8016723;
      lSentMq3@1100281003 : Record 8016724;
      lSentMq4@1100281002 : Record 8016725;
      lSentMq5@1100281001 : Record 8016726;
    BEGIN
      //IMH02
      // On vide le buffer pour cr‚er le message correspondant … une file de message

      IF NOT lMessageQueue.GET(pSendMqBuffer."EAI MQ Code") THEN
        EXIT;

      pSendMqBuffer.CALCFIELDS("XML Source", "Response XML Source");

      CASE lMessageQueue."Table No." OF
        DATABASE::"EAI Sent MQ 1":
          BEGIN
            lSentMq1.INIT;
            lSentMq1.TRANSFERFIELDS(pSendMqBuffer);
            lSentMq1."Entry No." := '';
            lSentMq1."XML Source" := pSendMqBuffer."XML Source";
            lSentMq1."Response XML Source" := pSendMqBuffer."Response XML Source"; //IMH05.ST
            lSentMq1.INSERT(TRUE);
            IF pSendMqBuffer.DELETE THEN;
            pSendMqBuffer.TRANSFERFIELDS(lSentMq1);
      //      pSendMqBuffer."Entry No." := lSentMq1."Entry No.";
            pSendMqBuffer.INSERT;
          END;
        DATABASE::"EAI Sent MQ 2":
          BEGIN
            lSentMq2.INIT;
            lSentMq2.TRANSFERFIELDS(pSendMqBuffer);
            lSentMq2."Entry No." := '';
            lSentMq2."XML Source" := pSendMqBuffer."XML Source";
            lSentMq2."Response XML Source" := pSendMqBuffer."Response XML Source"; //IMH05.ST
            lSentMq2.INSERT(TRUE);
            IF pSendMqBuffer.DELETE THEN;
            pSendMqBuffer.TRANSFERFIELDS(lSentMq2);
      //      pSendMqBuffer."Entry No." := lSentMq2."Entry No.";
            pSendMqBuffer.INSERT;
          END;
        DATABASE::"EAI Sent MQ 3":
          BEGIN
            lSentMq3.INIT;
            lSentMq3.TRANSFERFIELDS(pSendMqBuffer);
            lSentMq3."Entry No." := '';
            lSentMq3."XML Source" := pSendMqBuffer."XML Source";
            lSentMq3."Response XML Source" := pSendMqBuffer."Response XML Source"; //IMH05.ST
            lSentMq3.INSERT(TRUE);
            IF pSendMqBuffer.DELETE THEN;
            pSendMqBuffer.TRANSFERFIELDS(lSentMq3);
      //      pSendMqBuffer."Entry No." := lSentMq3."Entry No.";
            pSendMqBuffer.INSERT;
          END;
        DATABASE::"EAI Sent MQ 4":
          BEGIN
            lSentMq4.INIT;
            lSentMq4.TRANSFERFIELDS(pSendMqBuffer);
            lSentMq4."Entry No." := '';
            lSentMq4."XML Source" := pSendMqBuffer."XML Source";
            lSentMq4."Response XML Source" := pSendMqBuffer."Response XML Source"; //IMH05.ST
            lSentMq4.INSERT(TRUE);
            IF pSendMqBuffer.DELETE THEN;
            pSendMqBuffer.TRANSFERFIELDS(lSentMq4);
      //      pSendMqBuffer."Entry No." := lSentMq4."Entry No.";
            pSendMqBuffer.INSERT;
          END;
        DATABASE::"EAI Sent MQ 5":
          BEGIN
            lSentMq5.INIT;
            lSentMq5.TRANSFERFIELDS(pSendMqBuffer);
            lSentMq5."Entry No." := '';
            lSentMq5."XML Source" := pSendMqBuffer."XML Source";
            lSentMq5."Response XML Source" := pSendMqBuffer."Response XML Source"; //IMH05.ST
            lSentMq5.INSERT(TRUE);
            IF pSendMqBuffer.DELETE THEN;
            pSendMqBuffer.TRANSFERFIELDS(lSentMq5);
      //      pSendMqBuffer."Entry No." := lSentMq5."Entry No.";
            pSendMqBuffer.INSERT;
          END;
      END;
    END;

    PROCEDURE TransferSendMQBufferToHistoMQ@1100481004(VAR pSendMqBuffer@1100481001 : Record 8016720);
    VAR
      lMessageQueue@1100481006 : Record 8016704;
      lSentMq1@1100481011 : Record 8016722;
      lSentMq2@1100481010 : Record 8016723;
      lSentMq3@1100481009 : Record 8016724;
      lSentMq4@1100481008 : Record 8016725;
      lSentMq5@1100481007 : Record 8016726;
      lPostedSentMq1@1100481005 : Record 8016732;
      lPostedSentMq2@1100481004 : Record 8016733;
      lPostedSentMq3@1100481003 : Record 8016734;
      lPostedSentMq4@1100481002 : Record 8016735;
      lPostedSentMq5@1100481000 : Record 8016736;
    BEGIN
      // On vide le buffer pour mettre … jour le message correspondant … une file de message
      pSendMqBuffer.CALCFIELDS("XML Source", "Response XML Source");

      lMessageQueue.GET(pSendMqBuffer."EAI MQ Code");
      CASE lMessageQueue."Posted Table No." OF
        DATABASE::"EAI Posted Sent MQ 1":
          BEGIN
            lPostedSentMq1.TRANSFERFIELDS(pSendMqBuffer);
            lPostedSentMq1."XML Source" := pSendMqBuffer."XML Source";
            lPostedSentMq1."Response XML Source" := pSendMqBuffer."Response XML Source"; //IMH05.ST
            lPostedSentMq1.INSERT(TRUE);
          END;
        DATABASE::"EAI Posted Sent MQ 2":
          BEGIN
            lPostedSentMq2.TRANSFERFIELDS(pSendMqBuffer);
            lPostedSentMq2."XML Source" := pSendMqBuffer."XML Source";
            lPostedSentMq2."Response XML Source" := pSendMqBuffer."Response XML Source"; //IMH05.ST
            lPostedSentMq2.INSERT(TRUE);
          END;
        DATABASE::"EAI Posted Sent MQ 3":
          BEGIN
            lPostedSentMq3.TRANSFERFIELDS(pSendMqBuffer);
            lPostedSentMq3."XML Source" := pSendMqBuffer."XML Source";
            lPostedSentMq3."Response XML Source" := pSendMqBuffer."Response XML Source"; //IMH05.ST
            lPostedSentMq3.INSERT(TRUE);
          END;
        DATABASE::"EAI Posted Sent MQ 4":
          BEGIN
            lPostedSentMq4.TRANSFERFIELDS(pSendMqBuffer);
            lPostedSentMq4."XML Source" := pSendMqBuffer."XML Source";
            lPostedSentMq4."Response XML Source" := pSendMqBuffer."Response XML Source"; //IMH05.ST
            lPostedSentMq4.INSERT(TRUE);
          END;
        DATABASE::"EAI Posted Sent MQ 5":
          BEGIN
            lPostedSentMq5.TRANSFERFIELDS(pSendMqBuffer);
            lPostedSentMq5."XML Source" := pSendMqBuffer."XML Source";
            lPostedSentMq5."Response XML Source" := pSendMqBuffer."Response XML Source"; //IMH05.ST
            lPostedSentMq5.INSERT(TRUE);
          END;
      END;

      CASE lMessageQueue."Table No." OF
        DATABASE::"EAI Sent MQ 1":
          BEGIN
            lSentMq1.GET(pSendMqBuffer."Entry No.");
            lSentMq1.DELETE(TRUE);
          END;
        DATABASE::"EAI Sent MQ 2":
          BEGIN
            lSentMq2.GET(pSendMqBuffer."Entry No.");
            lSentMq2.DELETE(TRUE);
          END;
        DATABASE::"EAI Sent MQ 3":
          BEGIN
            lSentMq3.GET(pSendMqBuffer."Entry No.");
            lSentMq3.DELETE(TRUE);
          END;
        DATABASE::"EAI Sent MQ 4":
          BEGIN
            lSentMq4.GET(pSendMqBuffer."Entry No.");
            lSentMq4.DELETE(TRUE);
          END;
        DATABASE::"EAI Sent MQ 5":
          BEGIN
            lSentMq5.GET(pSendMqBuffer."Entry No.");
            lSentMq5.DELETE(TRUE);
          END;
      END;

      //Suppression du Buffer
      pSendMqBuffer.DELETE;
    END;

    PROCEDURE TransferRcvdMQBufferToHistoMQ@1100481017(VAR pRcvdMqBuffer@1100481001 : Record 8016721);
    VAR
      lMessageQueue@1100481006 : Record 8016704;
      lRcvdMq1@1100481011 : Record 8016727;
      lRcvdMq2@1100481010 : Record 8016728;
      lRcvdMq3@1100481009 : Record 8016729;
      lRcvdMq4@1100481008 : Record 8016730;
      lRcvdMq5@1100481007 : Record 8016731;
      lPostedRcvdMq1@1100481005 : Record 8016737;
      lPostedRcvdMq2@1100481004 : Record 8016738;
      lPostedRcvdMq3@1100481003 : Record 8016739;
      lPostedRcvdMq4@1100481002 : Record 8016740;
      lPostedRcvdMq5@1100481000 : Record 8016741;
    BEGIN
      // On vide le buffer pour mettre … jour le message correspondant … une file de message
      pRcvdMqBuffer.CALCFIELDS("XML Source","Response XML Source");

      lMessageQueue.GET(pRcvdMqBuffer."EAI MQ Code");
      CASE lMessageQueue."Posted Table No." OF
        DATABASE::"EAI Posted Rcvd MQ 1":
          BEGIN
            lPostedRcvdMq1.TRANSFERFIELDS(pRcvdMqBuffer);
            lPostedRcvdMq1."XML Source" := pRcvdMqBuffer."XML Source";
            lPostedRcvdMq1."Response XML Source" := pRcvdMqBuffer."Response XML Source";
            lPostedRcvdMq1.INSERT(TRUE);
          END;
        DATABASE::"EAI Posted Rcvd MQ 2":
          BEGIN
            lPostedRcvdMq2.TRANSFERFIELDS(pRcvdMqBuffer);
            lPostedRcvdMq2."XML Source" := pRcvdMqBuffer."XML Source";
            lPostedRcvdMq2."Response XML Source" := pRcvdMqBuffer."Response XML Source";
            lPostedRcvdMq2.INSERT(TRUE);
          END;
        DATABASE::"EAI Posted Rcvd MQ 3":
          BEGIN
            lPostedRcvdMq3.TRANSFERFIELDS(pRcvdMqBuffer);
            lPostedRcvdMq3."XML Source" := pRcvdMqBuffer."XML Source";
            lPostedRcvdMq3."Response XML Source" := pRcvdMqBuffer."Response XML Source";
            lPostedRcvdMq3.INSERT(TRUE);
          END;
        DATABASE::"EAI Posted Rcvd MQ 4":
          BEGIN
            lPostedRcvdMq4.TRANSFERFIELDS(pRcvdMqBuffer);
            lPostedRcvdMq4."XML Source" := pRcvdMqBuffer."XML Source";
            lPostedRcvdMq4."Response XML Source" := pRcvdMqBuffer."Response XML Source";
            lPostedRcvdMq4.INSERT(TRUE);
          END;
        DATABASE::"EAI Posted Rcvd MQ 5":
          BEGIN
            lPostedRcvdMq5.TRANSFERFIELDS(pRcvdMqBuffer);
            lPostedRcvdMq5."XML Source" := pRcvdMqBuffer."XML Source";
            lPostedRcvdMq5."Response XML Source" := pRcvdMqBuffer."Response XML Source";
            lPostedRcvdMq5.INSERT(TRUE);
          END;
      END;

      CASE lMessageQueue."Table No." OF
        DATABASE::"EAI Rcvd MQ 1":
          BEGIN
            lRcvdMq1.GET(pRcvdMqBuffer."Entry No.");
            lRcvdMq1.DELETE(TRUE);
          END;
        DATABASE::"EAI Rcvd MQ 2":
          BEGIN
            lRcvdMq2.GET(pRcvdMqBuffer."Entry No.");
            lRcvdMq2.DELETE(TRUE);
          END;
        DATABASE::"EAI Rcvd MQ 3":
          BEGIN
            lRcvdMq3.GET(pRcvdMqBuffer."Entry No.");
            lRcvdMq3.DELETE(TRUE);
          END;
        DATABASE::"EAI Rcvd MQ 4":
          BEGIN
            lRcvdMq4.GET(pRcvdMqBuffer."Entry No.");
            lRcvdMq4.DELETE(TRUE);
          END;
        DATABASE::"EAI Rcvd MQ 5":
          BEGIN
            lRcvdMq5.GET(pRcvdMqBuffer."Entry No.");
            lRcvdMq5.DELETE(TRUE);
          END;
      END;

      //Suppression du Buffer
      pRcvdMqBuffer.DELETE;
    END;

    PROCEDURE ShowMQFromEAIDocumentEntry@1100481006(pEAIDocumentEntry@1100481001 : Record 8016753);
    VAR
      lSentMq1@1100481020 : Record 8016722;
      lSentMq2@1100481019 : Record 8016723;
      lSentMq3@1100481018 : Record 8016724;
      lSentMq4@1100481017 : Record 8016725;
      lSentMq5@1100481016 : Record 8016726;
      lRcvdMq1@1100481011 : Record 8016727;
      lRcvdMq2@1100481010 : Record 8016728;
      lRcvdMq3@1100481009 : Record 8016729;
      lRcvdMq4@1100481008 : Record 8016730;
      lRcvdMq5@1100481007 : Record 8016731;
      lPostedSentMq1@1100481015 : Record 8016732;
      lPostedSentMq2@1100481014 : Record 8016733;
      lPostedSentMq3@1100481013 : Record 8016734;
      lPostedSentMq4@1100481012 : Record 8016735;
      lPostedSentMq5@1100481006 : Record 8016736;
      lPostedRcvdMq1@1100481005 : Record 8016737;
      lPostedRcvdMq2@1100481004 : Record 8016738;
      lPostedRcvdMq3@1100481003 : Record 8016739;
      lPostedRcvdMq4@1100481002 : Record 8016740;
      lPostedRcvdMq5@1100481000 : Record 8016741;
    BEGIN
      // On affiche le message correspondant … l'‚criture document EAI
      CASE pEAIDocumentEntry."Posted MQ Table No." OF
        DATABASE::"EAI Posted Sent MQ 1":
          IF lPostedSentMq1.GET(pEAIDocumentEntry."MQ Entry No.") THEN
          BEGIN
            FORM.RUN(0,lPostedSentMq1);
            EXIT;
          END;
        DATABASE::"EAI Posted Sent MQ 2":
          IF lPostedSentMq2.GET(pEAIDocumentEntry."MQ Entry No.") THEN
          BEGIN
            FORM.RUN(0,lPostedSentMq2);
            EXIT;
          END;
        DATABASE::"EAI Posted Sent MQ 3":
          IF lPostedSentMq3.GET(pEAIDocumentEntry."MQ Entry No.") THEN
          BEGIN
            FORM.RUN(0,lPostedSentMq3);
            EXIT;
          END;
        DATABASE::"EAI Posted Sent MQ 4":
          IF lPostedSentMq4.GET(pEAIDocumentEntry."MQ Entry No.") THEN
          BEGIN
            FORM.RUN(0,lPostedSentMq4);
            EXIT;
          END;
        DATABASE::"EAI Posted Sent MQ 5":
          IF lPostedSentMq5.GET(pEAIDocumentEntry."MQ Entry No.") THEN
          BEGIN
            FORM.RUN(0,lPostedSentMq5);
            EXIT;
          END;
        DATABASE::"EAI Posted Rcvd MQ 1":
          IF lPostedRcvdMq1.GET(pEAIDocumentEntry."MQ Entry No.") THEN
          BEGIN
            FORM.RUN(0,lPostedRcvdMq1);
            EXIT;
          END;
        DATABASE::"EAI Posted Rcvd MQ 2":
          IF lPostedRcvdMq2.GET(pEAIDocumentEntry."MQ Entry No.") THEN
          BEGIN
            FORM.RUN(0,lPostedRcvdMq2);
            EXIT;
          END;
        DATABASE::"EAI Posted Rcvd MQ 3":
          IF lPostedRcvdMq3.GET(pEAIDocumentEntry."MQ Entry No.") THEN
          BEGIN
            FORM.RUN(0,lPostedRcvdMq3);
            EXIT;
          END;
        DATABASE::"EAI Posted Rcvd MQ 4":
          IF lPostedRcvdMq4.GET(pEAIDocumentEntry."MQ Entry No.") THEN
          BEGIN
            FORM.RUN(0,lPostedRcvdMq4);
            EXIT;
          END;
        DATABASE::"EAI Posted Rcvd MQ 5":
          IF lPostedRcvdMq5.GET(pEAIDocumentEntry."MQ Entry No.") THEN
          BEGIN
            FORM.RUN(0,lPostedRcvdMq5);
            EXIT;
          END;
      END;

      CASE pEAIDocumentEntry."MQ Table No." OF
        DATABASE::"EAI Sent MQ 1":
          IF lSentMq1.GET(pEAIDocumentEntry."MQ Entry No.") THEN
          BEGIN
            FORM.RUN(0,lSentMq1);
            EXIT;
          END;
        DATABASE::"EAI Sent MQ 2":
          IF lSentMq2.GET(pEAIDocumentEntry."MQ Entry No.") THEN
          BEGIN
            FORM.RUN(0,lSentMq2);
            EXIT;
         END;
        DATABASE::"EAI Sent MQ 3":
          IF lSentMq3.GET(pEAIDocumentEntry."MQ Entry No.") THEN
          BEGIN
            FORM.RUN(0,lSentMq3);
            EXIT;
          END;
        DATABASE::"EAI Sent MQ 4":
          IF lSentMq4.GET(pEAIDocumentEntry."MQ Entry No.") THEN
          BEGIN
            FORM.RUN(0,lSentMq4);
            EXIT;
          END;
        DATABASE::"EAI Sent MQ 5":
          IF lSentMq5.GET(pEAIDocumentEntry."MQ Entry No.") THEN
          BEGIN
            FORM.RUN(0,lSentMq5);
            EXIT;
          END;
        DATABASE::"EAI Rcvd MQ 1":
          IF lRcvdMq1.GET(pEAIDocumentEntry."MQ Entry No.") THEN
          BEGIN
            FORM.RUN(0,lRcvdMq1);
            EXIT;
          END;
        DATABASE::"EAI Rcvd MQ 2":
          IF lRcvdMq2.GET(pEAIDocumentEntry."MQ Entry No.") THEN
          BEGIN
            FORM.RUN(0,lRcvdMq2);
            EXIT;
         END;
        DATABASE::"EAI Rcvd MQ 3":
          IF lRcvdMq3.GET(pEAIDocumentEntry."MQ Entry No.") THEN
          BEGIN
            FORM.RUN(0,lRcvdMq3);
            EXIT;
          END;
        DATABASE::"EAI Rcvd MQ 4":
          IF lRcvdMq4.GET(pEAIDocumentEntry."MQ Entry No.") THEN
          BEGIN
            FORM.RUN(0,lRcvdMq4);
            EXIT;
          END;
        DATABASE::"EAI Rcvd MQ 5":
          IF lRcvdMq5.GET(pEAIDocumentEntry."MQ Entry No.") THEN
          BEGIN
            FORM.RUN(0,lRcvdMq5);
            EXIT;
          END;
      END;
    END;

    PROCEDURE CheckFusionInsert@1100281013(VAR pSendMqBuffer@1100281000 : Record 8016720) : Boolean;
    VAR
      lMessageQueue@1100281006 : Record 8016704;
      lSentMq1@1100281005 : Record 8016722;
      lSentMq2@1100281004 : Record 8016723;
      lSentMq3@1100281003 : Record 8016724;
      lSentMq4@1100281002 : Record 8016725;
      lSentMq5@1100281001 : Record 8016726;
    BEGIN
      //IMH02
      IF NOT lMessageQueue.GET(pSendMqBuffer."EAI MQ Code") THEN
        EXIT;
      CASE lMessageQueue."Table No." OF
        DATABASE::"EAI Sent MQ 1":
          BEGIN
            lSentMq1.SETCURRENTKEY(Status, "Document Type", "Service Header No.");
            lSentMq1.SETRANGE(lSentMq1.Status, lSentMq1.Status::Unprocessed);
            lSentMq1.SETRANGE("Document Type", pSendMqBuffer."Document Type");
            lSentMq1.SETRANGE("Service Header No.", pSendMqBuffer."Service Header No.");
            EXIT(lSentMq1.ISEMPTY);
          END;
        DATABASE::"EAI Sent MQ 2":
          BEGIN
            lSentMq2.SETCURRENTKEY(Status, "Document Type", "Service Header No.");
            lSentMq2.SETRANGE(Status, lSentMq2.Status::Unprocessed);
            lSentMq2.SETRANGE("Document Type", pSendMqBuffer."Document Type");
            lSentMq2.SETRANGE("Service Header No.", pSendMqBuffer."Service Header No.");
            EXIT(lSentMq2.ISEMPTY);
          END;
        DATABASE::"EAI Sent MQ 3":
          BEGIN
            lSentMq3.SETCURRENTKEY(Status, "Document Type", "Service Header No.");
            lSentMq3.SETRANGE(Status, lSentMq3.Status::Unprocessed);
            lSentMq3.SETRANGE("Document Type", pSendMqBuffer."Document Type");
            lSentMq3.SETRANGE("Service Header No.", pSendMqBuffer."Service Header No.");
            EXIT(lSentMq3.ISEMPTY);
          END;
        DATABASE::"EAI Sent MQ 4":
          BEGIN
            lSentMq4.SETCURRENTKEY(Status, "Document Type", "Service Header No.");
            lSentMq4.SETRANGE(Status, lSentMq4.Status::Unprocessed);
            lSentMq4.SETRANGE("Document Type", pSendMqBuffer."Document Type");
            lSentMq4.SETRANGE("Service Header No.", pSendMqBuffer."Service Header No.");
            EXIT(lSentMq4.ISEMPTY);
          END;
        DATABASE::"EAI Sent MQ 5":
          BEGIN
            lSentMq5.SETCURRENTKEY(Status, "Document Type", "Service Header No.");
            lSentMq5.SETRANGE(Status, lSentMq5.Status::Unprocessed);
            lSentMq5.SETRANGE("Document Type", pSendMqBuffer."Document Type");
            lSentMq5.SETRANGE("Service Header No.", pSendMqBuffer."Service Header No.");
            EXIT(lSentMq5.ISEMPTY);
          END;
      END;
    END;

    PROCEDURE LoadFusionSendMQToBuffer@1100281016(pTableNo@1100281012 : Integer;VAR pSentMqBuffer@1100281000 : Record 8016720);
    VAR
      lMessageQueue@1100281006 : Record 8016704;
      lSentMq1@1100281005 : Record 8016722;
      lSentMq2@1100281004 : Record 8016723;
      lSentMq3@1100281003 : Record 8016724;
      lSentMq4@1100281002 : Record 8016725;
      lSentMq5@1100281001 : Record 8016726;
      lSentMq1B@1100281011 : Record 8016722;
      lSentMq2B@1100281010 : Record 8016723;
      lSentMq3B@1100281009 : Record 8016724;
      lSentMq4B@1100281008 : Record 8016725;
      lSentMq5B@1100281007 : Record 8016726;
      lRecId@1100281013 : RecordID;
    BEGIN
      //IMH02
      IF NOT lMessageQueue.GET(pSentMqBuffer."EAI MQ Code") THEN
        EXIT;
      CASE lMessageQueue."Table No." OF
        DATABASE::"EAI Sent MQ 1":
          BEGIN
            lSentMq1.SETCURRENTKEY(Status, "Document Type", "Service Header No.");
            lSentMq1.SETRANGE(lSentMq1.Status, lSentMq1.Status::Unprocessed);
            IF lSentMq1.FINDFIRST THEN BEGIN
              REPEAT
                lRecId := lSentMq1.RecordId;
                IF (pTableNo = 0) OR (pTableNo = lRecId.TABLENO) THEN BEGIN
                  pSentMqBuffer.TRANSFERFIELDS(lSentMq1);
                  lSentMq1.CALCFIELDS("XML Source", "Response XML Source");
                  pSentMqBuffer."XML Source" := lSentMq1."XML Source";
                  pSentMqBuffer."Response XML Source" := lSentMq1."Response XML Source"; //IMH05.ST
                  pSentMqBuffer.INSERT;
                  lSentMq1B := lSentMq1;
                  lSentMq1B.Status := lSentMq1B.Status::Sent;
                  lSentMq1B.MODIFY(TRUE);
                END;
              UNTIL lSentMq1.NEXT = 0;
            END;
          END;
        DATABASE::"EAI Sent MQ 2":
          BEGIN
            lSentMq2.SETCURRENTKEY(Status, "Document Type", "Service Header No.");
            lSentMq2.SETRANGE(Status, lSentMq2.Status::Unprocessed);
            IF lSentMq2.FINDFIRST THEN BEGIN
              REPEAT
                lRecId := lSentMq2.RecordId;
                IF (pTableNo = 0) OR (pTableNo = lRecId.TABLENO) THEN BEGIN
                  pSentMqBuffer.TRANSFERFIELDS(lSentMq2);
                  lSentMq2.CALCFIELDS("XML Source", "Response XML Source");
                  pSentMqBuffer."XML Source" := lSentMq2."XML Source";
                  pSentMqBuffer."Response XML Source" := lSentMq2."Response XML Source"; //IMH05.ST
                  pSentMqBuffer.INSERT;
                  lSentMq2B := lSentMq2;
                  lSentMq2B.Status := lSentMq2B.Status::Sent;
                  lSentMq2B.MODIFY(TRUE);
                END;
              UNTIL lSentMq2.NEXT = 0;
            END;
          END;
        DATABASE::"EAI Sent MQ 3":
          BEGIN
            lSentMq3.SETCURRENTKEY(Status, "Document Type", "Service Header No.");
            lSentMq3.SETRANGE(Status, lSentMq2.Status::Unprocessed);
            IF lSentMq3.FINDFIRST THEN BEGIN
              REPEAT
                lRecId := lSentMq3.RecordId;
                IF (pTableNo = 0) OR (pTableNo = lRecId.TABLENO) THEN BEGIN
                  pSentMqBuffer.TRANSFERFIELDS(lSentMq3);
                  lSentMq3.CALCFIELDS("XML Source", "Response XML Source");
                  pSentMqBuffer."XML Source" := lSentMq3."XML Source";
                  pSentMqBuffer."Response XML Source" := lSentMq3."Response XML Source"; //IMH05.ST
                  pSentMqBuffer.INSERT;
                  lSentMq3B := lSentMq3;
                  lSentMq3B.Status := lSentMq3B.Status::Sent;
                  lSentMq3B.MODIFY(TRUE);
                END;
              UNTIL lSentMq3.NEXT = 0;
            END;
          END;
        DATABASE::"EAI Sent MQ 4":
          BEGIN
            lSentMq4.SETCURRENTKEY(Status, "Document Type", "Service Header No.");
            lSentMq4.SETRANGE(Status, lSentMq2.Status::Unprocessed);
            IF lSentMq4.FINDFIRST THEN BEGIN
              REPEAT
                lRecId := lSentMq4.RecordId;
                IF (pTableNo = 0) OR (pTableNo = lRecId.TABLENO) THEN BEGIN
                  pSentMqBuffer.TRANSFERFIELDS(lSentMq4);
                  lSentMq4.CALCFIELDS("XML Source", "Response XML Source");
                  pSentMqBuffer."XML Source" := lSentMq4."XML Source";
                  pSentMqBuffer."Response XML Source" := lSentMq4."Response XML Source"; //IMH05.ST
                  pSentMqBuffer.INSERT;
                  lSentMq4B := lSentMq4;
                  lSentMq4B.Status := lSentMq4B.Status::Sent;
                  lSentMq4B.MODIFY(TRUE);
                END;
              UNTIL lSentMq4.NEXT = 0;
            END;
          END;
        DATABASE::"EAI Sent MQ 5":
          BEGIN
            lSentMq5.SETCURRENTKEY(Status, "Document Type", "Service Header No.");
            lSentMq5.SETRANGE(Status, lSentMq5.Status::Unprocessed);
            IF lSentMq5.FINDFIRST THEN BEGIN
              REPEAT
                lRecId := lSentMq5.RecordId;
                IF (pTableNo = 0) OR (pTableNo = lRecId.TABLENO) THEN BEGIN
                  pSentMqBuffer.TRANSFERFIELDS(lSentMq1);
                  lSentMq5.CALCFIELDS("XML Source", "Response XML Source");
                  pSentMqBuffer."XML Source" := lSentMq5."XML Source";
                  pSentMqBuffer."Response XML Source" := lSentMq5."Response XML Source"; //IMH05.ST
                  pSentMqBuffer.INSERT;
                  lSentMq5B := lSentMq5;
                  lSentMq5B.Status := lSentMq5B.Status::Sent;
                  lSentMq5B.MODIFY(TRUE);
                END;
              UNTIL lSentMq5.NEXT = 0;
            END;
          END;
      END;
    END;

    PROCEDURE LoadFusionSendMQBufferByIdent@1100281017(pSentMQEntryNo@1100281012 : Code[20];VAR pSentMQBuffer@1100281000 : Record 8016720) : Boolean;
    VAR
      lMessageQueue@1100281006 : Record 8016704;
      lSentMq1@1100281005 : Record 8016722;
      lSentMq2@1100281004 : Record 8016723;
      lSentMq3@1100281003 : Record 8016724;
      lSentMq4@1100281002 : Record 8016725;
      lSentMq5@1100281001 : Record 8016726;
      lSentMq1B@1100281011 : Record 8016722;
      lSentMq2B@1100281010 : Record 8016723;
      lSentMq3B@1100281009 : Record 8016724;
      lSentMq4B@1100281008 : Record 8016725;
      lSentMq5B@1100281007 : Record 8016726;
    BEGIN
      //IMH02
      IF NOT lMessageQueue.GET(pSentMQBuffer."EAI MQ Code") THEN
        EXIT;

      CASE lMessageQueue."Table No." OF
        DATABASE::"EAI Sent MQ 1":
          BEGIN
            IF lSentMq1.GET(pSentMQEntryNo) THEN BEGIN
              pSentMQBuffer.TRANSFERFIELDS(lSentMq1);
      //<<IMH05.ST
              lSentMq1.CALCFIELDS("XML Source", "Response XML Source");
              pSentMQBuffer."XML Source" := lSentMq1."XML Source";
              pSentMQBuffer."Response XML Source" := lSentMq1."Response XML Source";
      //>>IMH05.ST
              pSentMQBuffer.INSERT;
              EXIT(TRUE);
            END ELSE
              EXIT(FALSE);
          END;
        DATABASE::"EAI Sent MQ 2":
          BEGIN
            IF lSentMq2.GET(pSentMQEntryNo) THEN BEGIN
              pSentMQBuffer.TRANSFERFIELDS(lSentMq2);
      //<<IMH05.ST
              lSentMq2.CALCFIELDS("XML Source", "Response XML Source");
              pSentMQBuffer."XML Source" := lSentMq2."XML Source";
              pSentMQBuffer."Response XML Source" := lSentMq2."Response XML Source";
      //>>IMH05.ST
              pSentMQBuffer.INSERT;
              EXIT(TRUE);
            END ELSE
              EXIT(FALSE);
          END;
        DATABASE::"EAI Sent MQ 3":
          BEGIN
            IF lSentMq3.GET(pSentMQEntryNo) THEN BEGIN
              pSentMQBuffer.TRANSFERFIELDS(lSentMq3);
      //<<IMH05.ST
              lSentMq3.CALCFIELDS("XML Source", "Response XML Source");
              pSentMQBuffer."XML Source" := lSentMq3."XML Source";
              pSentMQBuffer."Response XML Source" := lSentMq3."Response XML Source";
      //>>IMH05.ST
              pSentMQBuffer.INSERT;
              EXIT(TRUE);
            END ELSE
              EXIT(FALSE);
          END;
        DATABASE::"EAI Sent MQ 4":
          BEGIN
            IF lSentMq4.GET(pSentMQEntryNo) THEN BEGIN
              pSentMQBuffer.TRANSFERFIELDS(lSentMq4);
      //<<IMH05.ST
              lSentMq4.CALCFIELDS("XML Source", "Response XML Source");
              pSentMQBuffer."XML Source" := lSentMq4."XML Source";
              pSentMQBuffer."Response XML Source" := lSentMq4."Response XML Source";
      //>>IMH05.ST
              pSentMQBuffer.INSERT;
              EXIT(TRUE);
            END ELSE
              EXIT(FALSE);
          END;
        DATABASE::"EAI Sent MQ 5":
          BEGIN
            IF lSentMq5.GET(pSentMQEntryNo) THEN BEGIN
              pSentMQBuffer.TRANSFERFIELDS(lSentMq5);
      //<<IMH05.ST
              lSentMq5.CALCFIELDS("XML Source", "Response XML Source");
              pSentMQBuffer."XML Source" := lSentMq5."XML Source";
              pSentMQBuffer."Response XML Source" := lSentMq5."Response XML Source";
      //>>IMH05.ST
              pSentMQBuffer.INSERT;
              EXIT(TRUE);
            END ELSE
              EXIT(FALSE);
          END;
      END;
    END;

    PROCEDURE RcvdMessageExists@1100281018(pEAIRcvdMQBuffer@1100281000 : Record 8016721;pWithActCheck@1100281001 : Boolean) : Boolean;
    VAR
      lEAIMessageQueue@1100281015 : Record 8016704;
      lEAIRcvdMQ1@1100281006 : Record 8016727;
      lEAIRcvdMQ2@1100281005 : Record 8016728;
      lEAIRcvdMQ3@1100281004 : Record 8016729;
      lEAIRcvdMQ4@1100281003 : Record 8016730;
      lEAIRcvdMQ5@1100281002 : Record 8016731;
    BEGIN
      IF pEAIRcvdMQBuffer."Message ID" = '' THEN BEGIN
        EXIT;
      END;

      lEAIMessageQueue.GET(pEAIRcvdMQBuffer."EAI MQ Code");
      CASE lEAIMessageQueue."Table No." OF
        DATABASE::"EAI Rcvd MQ 1" : BEGIN
          WITH lEAIRcvdMQ1 DO BEGIN
            SETCURRENTKEY("EAI Exchange Type Code", "Message ID");
            SETRANGE("EAI Exchange Type Code", pEAIRcvdMQBuffer."EAI Exchange Type Code");
            SETRANGE("Message ID", pEAIRcvdMQBuffer."Message ID");
            //<<IMH08.PC
            IF pWithActCheck THEN BEGIN
              SETRANGE("EAI Act Type Code",pEAIRcvdMQBuffer."EAI Act Type Code");
              SETRANGE("EAI Act Code",pEAIRcvdMQBuffer."EAI Act Code");
            END;
            //>>IMH08.PC
            IF NOT ISEMPTY THEN BEGIN
              EXIT(TRUE);
            END;
          END;
        END;
        DATABASE::"EAI Rcvd MQ 2" : BEGIN
          WITH lEAIRcvdMQ2 DO BEGIN
            SETCURRENTKEY("EAI Exchange Type Code", "Message ID");
            SETRANGE("EAI Exchange Type Code", pEAIRcvdMQBuffer."EAI Exchange Type Code");
            SETRANGE("Message ID", pEAIRcvdMQBuffer."Message ID");
            //<<IMH08.PC
            IF pWithActCheck THEN BEGIN
              SETRANGE("EAI Act Type Code",pEAIRcvdMQBuffer."EAI Act Type Code");
              SETRANGE("EAI Act Code",pEAIRcvdMQBuffer."EAI Act Code");
            END;
            //>>IMH08.PC
            IF NOT ISEMPTY THEN BEGIN
              EXIT(TRUE);
            END;
          END;
        END;
        DATABASE::"EAI Rcvd MQ 3" : BEGIN
          WITH lEAIRcvdMQ3 DO BEGIN
            SETCURRENTKEY("EAI Exchange Type Code", "Message ID");
            SETRANGE("EAI Exchange Type Code", pEAIRcvdMQBuffer."EAI Exchange Type Code");
            SETRANGE("Message ID", pEAIRcvdMQBuffer."Message ID");
            //<<IMH08.PC
            IF pWithActCheck THEN BEGIN
              SETRANGE("EAI Act Type Code",pEAIRcvdMQBuffer."EAI Act Type Code");
              SETRANGE("EAI Act Code",pEAIRcvdMQBuffer."EAI Act Code");
            END;
            //>>IMH08.PC
            IF NOT ISEMPTY THEN BEGIN
              EXIT(TRUE);
            END;
          END;
        END;
        DATABASE::"EAI Rcvd MQ 4" : BEGIN
          WITH lEAIRcvdMQ4 DO BEGIN
            SETCURRENTKEY("EAI Exchange Type Code", "Message ID");
            SETRANGE("EAI Exchange Type Code", pEAIRcvdMQBuffer."EAI Exchange Type Code");
            SETRANGE("Message ID", pEAIRcvdMQBuffer."Message ID");
            //<<IMH08.PC
            IF pWithActCheck THEN BEGIN
              SETRANGE("EAI Act Type Code",pEAIRcvdMQBuffer."EAI Act Type Code");
              SETRANGE("EAI Act Code",pEAIRcvdMQBuffer."EAI Act Code");
            END;
            //>>IMH08.PC
            IF NOT ISEMPTY THEN BEGIN
              EXIT(TRUE);
            END;
          END;
        END;
        DATABASE::"EAI Rcvd MQ 5" : BEGIN
          WITH lEAIRcvdMQ5 DO BEGIN
            SETCURRENTKEY("EAI Exchange Type Code", "Message ID");
            SETRANGE("EAI Exchange Type Code", pEAIRcvdMQBuffer."EAI Exchange Type Code");
            SETRANGE("Message ID", pEAIRcvdMQBuffer."Message ID");
            //<<IMH08.PC
            IF pWithActCheck THEN BEGIN
              SETRANGE("EAI Act Type Code",pEAIRcvdMQBuffer."EAI Act Type Code");
              SETRANGE("EAI Act Code",pEAIRcvdMQBuffer."EAI Act Code");
            END;
            //>>IMH08.PC
            IF NOT ISEMPTY THEN BEGIN
              EXIT(TRUE);
            END;
          END;
        END;
      END;
    END;

    PROCEDURE SentMessageExists@1100281022(pEAISentMQBuffer@1100281000 : Record 8016720;pWithActCheck@1100281001 : Boolean) : Boolean;
    VAR
      lEAIMessageQueue@1100281015 : Record 8016704;
      lEAISentMQ1@1100281006 : Record 8016722;
      lEAISentMQ2@1100281005 : Record 8016728;
      lEAISentMQ3@1100281004 : Record 8016729;
      lEAISentMQ4@1100281003 : Record 8016730;
      lEAISentMQ5@1100281002 : Record 8016731;
    BEGIN
      // IMH09.PC

      IF pEAISentMQBuffer."Message ID" = '' THEN BEGIN
        EXIT;
      END;

      lEAIMessageQueue.GET(pEAISentMQBuffer."EAI MQ Code");
      CASE lEAIMessageQueue."Table No." OF
        DATABASE::"EAI Sent MQ 1" : BEGIN
          WITH lEAISentMQ1 DO BEGIN
            SETCURRENTKEY("EAI Exchange Type Code", "Message ID");
            SETRANGE("EAI Exchange Type Code", pEAISentMQBuffer."EAI Exchange Type Code");
            SETRANGE("Message ID", pEAISentMQBuffer."Message ID");
            IF pWithActCheck THEN BEGIN
              SETRANGE("EAI Act Type Code",pEAISentMQBuffer."EAI Act Type Code");
              SETRANGE("EAI Act Code",pEAISentMQBuffer."EAI Act Code");
            END;
            EXIT(NOT ISEMPTY);
          END;
        END;
        DATABASE::"EAI Sent MQ 2" : BEGIN
          WITH lEAISentMQ2 DO BEGIN
            SETCURRENTKEY("EAI Exchange Type Code", "Message ID");
            SETRANGE("EAI Exchange Type Code", pEAISentMQBuffer."EAI Exchange Type Code");
            SETRANGE("Message ID", pEAISentMQBuffer."Message ID");
            IF pWithActCheck THEN BEGIN
              SETRANGE("EAI Act Type Code",pEAISentMQBuffer."EAI Act Type Code");
              SETRANGE("EAI Act Code",pEAISentMQBuffer."EAI Act Code");
            END;
            EXIT(NOT ISEMPTY);
          END;
        END;
        DATABASE::"EAI Sent MQ 3" : BEGIN
          WITH lEAISentMQ3 DO BEGIN
            SETCURRENTKEY("EAI Exchange Type Code", "Message ID");
            SETRANGE("EAI Exchange Type Code", pEAISentMQBuffer."EAI Exchange Type Code");
            SETRANGE("Message ID", pEAISentMQBuffer."Message ID");
            IF pWithActCheck THEN BEGIN
              SETRANGE("EAI Act Type Code",pEAISentMQBuffer."EAI Act Type Code");
              SETRANGE("EAI Act Code",pEAISentMQBuffer."EAI Act Code");
            END;
            EXIT(NOT ISEMPTY);
          END;
        END;
        DATABASE::"EAI Sent MQ 4" : BEGIN
          WITH lEAISentMQ4 DO BEGIN
            SETCURRENTKEY("EAI Exchange Type Code", "Message ID");
            SETRANGE("EAI Exchange Type Code", pEAISentMQBuffer."EAI Exchange Type Code");
            SETRANGE("Message ID", pEAISentMQBuffer."Message ID");
            IF pWithActCheck THEN BEGIN
              SETRANGE("EAI Act Type Code",pEAISentMQBuffer."EAI Act Type Code");
              SETRANGE("EAI Act Code",pEAISentMQBuffer."EAI Act Code");
            END;
            EXIT(NOT ISEMPTY);
          END;
        END;
        DATABASE::"EAI Sent MQ 5" : BEGIN
          WITH lEAISentMQ5 DO BEGIN
            SETCURRENTKEY("EAI Exchange Type Code", "Message ID");
            SETRANGE("EAI Exchange Type Code", pEAISentMQBuffer."EAI Exchange Type Code");
            SETRANGE("Message ID", pEAISentMQBuffer."Message ID");
            IF pWithActCheck THEN BEGIN
              SETRANGE("EAI Act Type Code",pEAISentMQBuffer."EAI Act Type Code");
              SETRANGE("EAI Act Code",pEAISentMQBuffer."EAI Act Code");
            END;
            EXIT(NOT ISEMPTY);
          END;
        END;
      END;
    END;

    PROCEDURE CheckIfActExistsToNextAct@1000000000(pEAIRcvdMQBuffer@1100281000 : Record 8016721;pWithSpecificActCode@1000000005 : Boolean;pActTypeCode@1000000006 : Code[20];pActCode@1000000007 : Code[20];pWithStep@1000000003 : Boolean;pStep@1000000002 : Integer;pWithStatus@1000000004 : Boolean;pStatus@1000000001 : Integer) : Boolean;
    VAR
      lEAIMessageQueue@1100281015 : Record 8016704;
      lEAIAct@1000000000 : Record 8016706;
      lEAIRcvdMQ1@1100281006 : Record 8016727;
      lEAIRcvdMQ2@1100281005 : Record 8016728;
      lEAIRcvdMQ3@1100281004 : Record 8016729;
      lEAIRcvdMQ4@1100281003 : Record 8016730;
      lEAIRcvdMQ5@1100281002 : Record 8016731;
    BEGIN
      // IMH10.PC
      IF pEAIRcvdMQBuffer."Message ID" = '' THEN BEGIN
        EXIT;
      END;

      lEAIMessageQueue.GET(pEAIRcvdMQBuffer."EAI MQ Code");
      lEAIAct.GET(pEAIRcvdMQBuffer."EAI Act Type Code",pEAIRcvdMQBuffer."EAI Act Code");
      CASE lEAIMessageQueue."Table No." OF
        DATABASE::"EAI Rcvd MQ 1" : BEGIN
          WITH lEAIRcvdMQ1 DO BEGIN
            SETCURRENTKEY("EAI Exchange Type Code", "Message ID");
            SETRANGE("EAI Exchange Type Code", pEAIRcvdMQBuffer."EAI Exchange Type Code");
            SETRANGE("Message ID", pEAIRcvdMQBuffer."Message ID");
            IF pWithSpecificActCode THEN BEGIN
              SETRANGE("EAI Act Type Code",pActTypeCode);
              SETRANGE("EAI Act Code",pActCode);
            END ELSE BEGIN
              SETRANGE("EAI Act Type Code",lEAIAct."Next Act Type Code Af. Val.");
              SETRANGE("EAI Act Code",lEAIAct."Next Act Code After Validation");
            END;
            IF pWithStep THEN BEGIN
              SETRANGE(Step,pStep);
            END;
            IF pWithStatus THEN BEGIN
              SETRANGE(Status,pStatus);
            END;
            EXIT(NOT ISEMPTY);
          END;
        END;
        DATABASE::"EAI Rcvd MQ 2" : BEGIN
          WITH lEAIRcvdMQ2 DO BEGIN
            SETCURRENTKEY("EAI Exchange Type Code", "Message ID");
            SETRANGE("EAI Exchange Type Code", pEAIRcvdMQBuffer."EAI Exchange Type Code");
            SETRANGE("Message ID", pEAIRcvdMQBuffer."Message ID");
            IF pWithSpecificActCode THEN BEGIN
              SETRANGE("EAI Act Type Code",pActTypeCode);
              SETRANGE("EAI Act Code",pActCode);
            END ELSE BEGIN
              SETRANGE("EAI Act Type Code",lEAIAct."Next Act Type Code Af. Val.");
              SETRANGE("EAI Act Code",lEAIAct."Next Act Code After Validation");
            END;
            IF pWithStep THEN BEGIN
              SETRANGE(Step,pStep);
            END;
            IF pWithStatus THEN BEGIN
              SETRANGE(Status,pStatus);
            END;
            EXIT(NOT ISEMPTY);
          END;
        END;
        DATABASE::"EAI Rcvd MQ 3" : BEGIN
          WITH lEAIRcvdMQ3 DO BEGIN
            SETCURRENTKEY("EAI Exchange Type Code", "Message ID");
            SETRANGE("EAI Exchange Type Code", pEAIRcvdMQBuffer."EAI Exchange Type Code");
            SETRANGE("Message ID", pEAIRcvdMQBuffer."Message ID");
            IF pWithSpecificActCode THEN BEGIN
              SETRANGE("EAI Act Type Code",pActTypeCode);
              SETRANGE("EAI Act Code",pActCode);
            END ELSE BEGIN
              SETRANGE("EAI Act Type Code",lEAIAct."Next Act Type Code Af. Val.");
              SETRANGE("EAI Act Code",lEAIAct."Next Act Code After Validation");
            END;
            IF pWithStep THEN BEGIN
              SETRANGE(Step,pStep);
            END;
            IF pWithStatus THEN BEGIN
              SETRANGE(Status,pStatus);
            END;
            EXIT(NOT ISEMPTY);
          END;
        END;
        DATABASE::"EAI Rcvd MQ 4" : BEGIN
          WITH lEAIRcvdMQ4 DO BEGIN
            SETCURRENTKEY("EAI Exchange Type Code", "Message ID");
            SETRANGE("EAI Exchange Type Code", pEAIRcvdMQBuffer."EAI Exchange Type Code");
            SETRANGE("Message ID", pEAIRcvdMQBuffer."Message ID");
            IF pWithSpecificActCode THEN BEGIN
              SETRANGE("EAI Act Type Code",pActTypeCode);
              SETRANGE("EAI Act Code",pActCode);
            END ELSE BEGIN
              SETRANGE("EAI Act Type Code",lEAIAct."Next Act Type Code Af. Val.");
              SETRANGE("EAI Act Code",lEAIAct."Next Act Code After Validation");
            END;
            IF pWithStep THEN BEGIN
              SETRANGE(Step,pStep);
            END;
            IF pWithStatus THEN BEGIN
              SETRANGE(Status,pStatus);
            END;
            EXIT(NOT ISEMPTY);
          END;
        END;
        DATABASE::"EAI Rcvd MQ 5" : BEGIN
          WITH lEAIRcvdMQ5 DO BEGIN
            SETCURRENTKEY("EAI Exchange Type Code", "Message ID");
            SETRANGE("EAI Exchange Type Code", pEAIRcvdMQBuffer."EAI Exchange Type Code");
            SETRANGE("Message ID", pEAIRcvdMQBuffer."Message ID");
            IF pWithSpecificActCode THEN BEGIN
              SETRANGE("EAI Act Type Code",pActTypeCode);
              SETRANGE("EAI Act Code",pActCode);
            END ELSE BEGIN
              SETRANGE("EAI Act Type Code",lEAIAct."Next Act Type Code Af. Val.");
              SETRANGE("EAI Act Code",lEAIAct."Next Act Code After Validation");
            END;
            IF pWithStep THEN BEGIN
              SETRANGE(Step,pStep);
            END;
            IF pWithStatus THEN BEGIN
              SETRANGE(Status,pStatus);
            END;
            EXIT(NOT ISEMPTY);
          END;
        END;
      END;
    END;

    PROCEDURE GetSpecificAct@1000000001(pEAIRcvdMQBuffer@1100281000 : Record 8016721;pActTypeCode@1000000006 : Code[20];pActCode@1000000007 : Code[20];VAR pEAIRcvdMQBufferFound@1000000002 : Record 8016721);
    VAR
      lEAIMessageQueue@1100281015 : Record 8016704;
      lEAIAct@1000000000 : Record 8016706;
      lEAIRcvdMQ1@1100281006 : Record 8016727;
      lEAIRcvdMQ2@1100281005 : Record 8016728;
      lEAIRcvdMQ3@1100281004 : Record 8016729;
      lEAIRcvdMQ4@1100281003 : Record 8016730;
      lEAIRcvdMQ5@1100281002 : Record 8016731;
      lEAIMQBufferMgt@1000000003 : Codeunit 8016708;
      lRecRef@1000000001 : RecordRef;
    BEGIN
      // IMH10.PC

      pEAIRcvdMQBufferFound.RESET;
      CLEAR(pEAIRcvdMQBufferFound);

      IF pEAIRcvdMQBuffer."Message ID" = '' THEN BEGIN
        EXIT;
      END;

      lEAIMessageQueue.GET(pEAIRcvdMQBuffer."EAI MQ Code");
      lEAIAct.GET(pEAIRcvdMQBuffer."EAI Act Type Code",pEAIRcvdMQBuffer."EAI Act Code");
      CASE lEAIMessageQueue."Table No." OF
        DATABASE::"EAI Rcvd MQ 1" : BEGIN
          WITH lEAIRcvdMQ1 DO BEGIN
            SETCURRENTKEY("EAI Exchange Type Code", "Message ID");
            SETRANGE("EAI Exchange Type Code", pEAIRcvdMQBuffer."EAI Exchange Type Code");
            SETRANGE("Message ID", pEAIRcvdMQBuffer."Message ID");
            SETRANGE("EAI Act Type Code",pActTypeCode);
            SETRANGE("EAI Act Code",pActCode);
            SETRANGE(Step,Step::Validation);
            SETRANGE(Status,Status::Processing);
            IF FINDFIRST THEN BEGIN
              lRecRef.GETTABLE(lEAIRcvdMQ1);
              lEAIMQBufferMgt.TransferRecRefToRcvdMQBuffer(lRecRef,pEAIRcvdMQBufferFound);
            END;
          END;
        END;
        DATABASE::"EAI Rcvd MQ 2" : BEGIN
          WITH lEAIRcvdMQ2 DO BEGIN
            SETCURRENTKEY("EAI Exchange Type Code", "Message ID");
            SETRANGE("EAI Exchange Type Code", pEAIRcvdMQBuffer."EAI Exchange Type Code");
            SETRANGE("Message ID", pEAIRcvdMQBuffer."Message ID");
            SETRANGE("EAI Act Type Code",pActTypeCode);
            SETRANGE("EAI Act Code",pActCode);
            SETRANGE(Step,Step::Validation);
            SETRANGE(Status,Status::Processing);
            IF FINDFIRST THEN BEGIN
              lRecRef.GETTABLE(lEAIRcvdMQ2);
              lEAIMQBufferMgt.TransferRecRefToRcvdMQBuffer(lRecRef,pEAIRcvdMQBufferFound);
            END;
          END;
        END;
        DATABASE::"EAI Rcvd MQ 3" : BEGIN
          WITH lEAIRcvdMQ3 DO BEGIN
            SETCURRENTKEY("EAI Exchange Type Code", "Message ID");
            SETRANGE("EAI Exchange Type Code", pEAIRcvdMQBuffer."EAI Exchange Type Code");
            SETRANGE("Message ID", pEAIRcvdMQBuffer."Message ID");
            SETRANGE("EAI Act Type Code",pActTypeCode);
            SETRANGE("EAI Act Code",pActCode);
            SETRANGE(Step,Step::Validation);
            SETRANGE(Status,Status::Processing);
            IF FINDFIRST THEN BEGIN
              lRecRef.GETTABLE(lEAIRcvdMQ3);
              lEAIMQBufferMgt.TransferRecRefToRcvdMQBuffer(lRecRef,pEAIRcvdMQBufferFound);
            END;
          END;
        END;
        DATABASE::"EAI Rcvd MQ 4" : BEGIN
          WITH lEAIRcvdMQ4 DO BEGIN
            SETCURRENTKEY("EAI Exchange Type Code", "Message ID");
            SETRANGE("EAI Exchange Type Code", pEAIRcvdMQBuffer."EAI Exchange Type Code");
            SETRANGE("Message ID", pEAIRcvdMQBuffer."Message ID");
            SETRANGE("EAI Act Type Code",pActTypeCode);
            SETRANGE("EAI Act Code",pActCode);
            SETRANGE(Step,Step::Validation);
            SETRANGE(Status,Status::Processing);
            IF FINDFIRST THEN BEGIN
              lRecRef.GETTABLE(lEAIRcvdMQ4);
              lEAIMQBufferMgt.TransferRecRefToRcvdMQBuffer(lRecRef,pEAIRcvdMQBufferFound);
            END;
          END;
        END;
        DATABASE::"EAI Rcvd MQ 5" : BEGIN
          WITH lEAIRcvdMQ5 DO BEGIN
            SETCURRENTKEY("EAI Exchange Type Code", "Message ID");
            SETRANGE("EAI Exchange Type Code", pEAIRcvdMQBuffer."EAI Exchange Type Code");
            SETRANGE("Message ID", pEAIRcvdMQBuffer."Message ID");
            SETRANGE("EAI Act Type Code",pActTypeCode);
            SETRANGE("EAI Act Code",pActCode);
            SETRANGE(Step,Step::Validation);
            SETRANGE(Status,Status::Processing);
            IF FINDFIRST THEN BEGIN
              lRecRef.GETTABLE(lEAIRcvdMQ5);
              lEAIMQBufferMgt.TransferRecRefToRcvdMQBuffer(lRecRef,pEAIRcvdMQBufferFound);
            END;
          END;
        END;
      END;
    END;

    PROCEDURE TransferRcvdMQToRcvdMQ@1100281019(VAR pFromRecRef@1100281001 : RecordRef;pToMQCode@1100281002 : Code[20]) rValue : Boolean;
    VAR
      lEAIRcvdMQBuffer@1100281006 : TEMPORARY Record 8016721;
      lEAIMessageQueue@1100281007 : Record 8016704;
      lEAIMQBufferMgt@1100281000 : Codeunit 8016708;
    BEGIN
      // Transfert d'une file de r‚ception … une autre
      rValue := FALSE;
      IF NOT lEAIMessageQueue.GET(pToMQCode) THEN BEGIN
        EXIT;
      END;

      IF pFromRecRef.ISEMPTY THEN BEGIN
        EXIT;
      END;

      lEAIMQBufferMgt.TransferRecRefToRcvdMQBuffer(pFromRecRef,lEAIRcvdMQBuffer);
      lEAIRcvdMQBuffer."EAI MQ Code" := pToMQCode;
      lEAIMQBufferMgt.CreateRcvdMQBufferToRcvdMQ(lEAIRcvdMQBuffer);
      pFromRecRef.DELETE;

      rValue := TRUE;
    END;

    PROCEDURE CheckModifSendMQBuffFromSendMQ@1100281021(VAR pSendMqBuffer@1100481001 : Record 8016720);
    VAR
      lMessageQueue@1100481006 : Record 8016704;
      lSentMq1@1100481005 : Record 8016722;
      lSentMq2@1100481004 : Record 8016723;
      lSentMq3@1100481003 : Record 8016724;
      lSentMq4@1100481002 : Record 8016725;
      lSentMq5@1100481000 : Record 8016726;
    BEGIN
      // IMH06.PC
      // On regarde si l'enregistrement … changer
      pSendMqBuffer.CALCFIELDS("XML Source","Response XML Source");

      lMessageQueue.GET(pSendMqBuffer."EAI MQ Code");
      CASE lMessageQueue."Table No." OF
        DATABASE::"EAI Sent MQ 1" : BEGIN
          lSentMq1.GET(pSendMqBuffer."Entry No.");
          lSentMq1.CALCFIELDS("Response XML Source");
          IF lSentMq1."Response XML Source".HASVALUE THEN BEGIN
            pSendMqBuffer."Response XML Source" := lSentMq1."Response XML Source";
          END;
          IF lSentMq1."Set To Sleep" <> pSendMqBuffer."Set To Sleep" THEN BEGIN
            pSendMqBuffer."Set To Sleep" := lSentMq1."Set To Sleep";
          END;
          IF lSentMq1."Sleep Time" <> pSendMqBuffer."Sleep Time" THEN BEGIN
            pSendMqBuffer."Sleep Time" := lSentMq1."Sleep Time";
          END;
          IF lSentMq1."Set To Sleep" = lSentMq1."Set To Sleep"::Yes THEN BEGIN
            IF lSentMq1.Status <> pSendMqBuffer.Status THEN BEGIN
              pSendMqBuffer.Status := lSentMq1.Status;
            END;
          END;
          //<<IMH07
          IF lSentMq1.Status = lSentMq1.Status::Warning THEN
            pSendMqBuffer.Status := lSentMq1.Status;
          //>>IMH07
        END;
      END;
    END;

    BEGIN
    {
      /** @r IMH10 @d 14/05/13 @a ISAT.PC @v IMH6.01.222 @s Uniformisation Darva
          @c Ajout fonction CheckIfActExistsToNextAct
          @c Ajout fonction GetSpecificAct */
      /** @r IMH09 @d 07/05/13 @a ISAT.PC @v IMH6.01.222 @s Uniformisation Darva @c Ajout de la fonction SentMessageExists */
      /** @r IMH08 @d 29/04/13 @a ISAT.PC @v IMH6.01.222 @s Uniformisation Darva
          @c Modification de la fonction RcvdMessageExists pour la gestion du code acte */
      /** @r IHM07 @d 12/03/12 @a ISAT.ZW @v IMH6.01.132 @s DARVA @h 2543 @c gestion de Statut warning */
      /** @r IMH06 @d 20/09/11 @a ISAT.PC @v IMH6.01.132 @s DARVA @c Gestion de la mise en attente */
      /** @r IMH05 @d 26/08/11 @a ISAT.ST @v IMH6.01.131 @s Interface EAI @c Ajout XML de r‚ponse */
      /** @r IHM04 @d 19/07/11 @a ISAT.PC @v IMH6.01.131 @s Interface EAI @c Transfer d'une file … l'autre */
      /** @r IHM03 @d 19/07/11 @a ISAT.ST @v IMH6.01.131 @s Interface EAI @c Suivi nø file en cours en r‚ception */
      /** @r IHM02 @d 28/03/11 @a ISAT.ZW @v IMH6.01.136 @s Interface EAI @c Ajout fonction CheckFusionInsert */
      /** @r IHM01 @d 04/01/11 @a ISAT.ZW @v IMH6.01.131 @s Interface EAI @c Ajout fonction CreateRcvdMQBufferToRcvdMQ */
      /** @r EAI00 @d 20/03/09 @a ISAT.JR @v ISAEAI5.01.00.00 @s cr‚ation
          @c CodeUnit de gestion de la table Buffer permettant de g‚rer les files de messages comme des interfaces*/
    }
    END.
  }
}