OBJECT Codeunit 8016710 EAI XML Management
{
  OBJECT-PROPERTIES
  {
    Date=24/02/14;
    Time=11:56:50;
    Modified=Yes;
    Version List=ISAEAI1.00,MATMUT01;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text100@1100481002 : TextConst 'ENU=Error during creating %1 tag.;FRA=Erreur lors de la cr‚ation de la balise %1.';
      Text050@1100481001 : TextConst 'ENU=FieldNo;FRA=FieldNo';
      Text051@1100481000 : TextConst 'ENU=TableNo;FRA=TableNo';
      ToolsMgt@1180044000 : Codeunit 8016602;
      Text200@1100281000 : TextConst 'ENU=XML Node %1 unfound.;FRA=Noeud XML %1 non trouv‚.';
      NormalCaseMode@1100281001 : Boolean;

    PROCEDURE CreateXml@1(VAR ParXmlDoc@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";ParSource@1000000001 : Text[250];VAR ParXmlNode@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode") : Boolean;
    BEGIN
      //CreateRootNode
      //Permet de charger le texte ParSource dans le flux Xml ParXmlDoc
      //Met dans ParXmlNode le noeud root
      //Rend vrai si aucun problŠme, faux sinon

      IF ISCLEAR(ParXmlDoc) THEN BEGIN
        CREATE(ParXmlDoc);
      END;

      IF ParXmlDoc.loadXML(ParSource) THEN BEGIN
        ParXmlNode := ParXmlDoc.documentElement;
        EXIT(TRUE);
      END ELSE BEGIN
        EXIT(FALSE);
      END;
    END;

    PROCEDURE IsAddElement@1100481000(VAR ParXMLNode@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";ParNodeName@1000000001 : Text[250];ParNodeText@1000000002 : Text[1024];ParNameSpace@1000000003 : Text[250];VAR ParXMLNewNode@1000000005 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode") ExitStatus : Boolean;
    BEGIN
      // Fonction raccourci : appel de AddElement() et gŠre l'erreur

      IF AddElement2(ParXMLNode,ParNodeName,ParNodeText,ParNameSpace,ParXMLNewNode) > 0 THEN
        ERROR(Text100,ParNodeName)
      ELSE
        EXIT(TRUE);
    END;

    PROCEDURE IsAddElement4@1100281010(VAR ParXMLNode@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";ParNodeName@1000000001 : Text[250];ParNodeText@1000000002 : Text[1024];ParNameSpace@1000000003 : Text[250]) ExitStatus : Boolean;
    BEGIN
      //IMH06.ST
      IF AddElement4(ParXMLNode,ParNodeName,ParNodeText,ParNameSpace) > 0 THEN
        ERROR(Text100,ParNodeName)
      ELSE
        EXIT(TRUE);
    END;

    PROCEDURE AddElement@2(VAR ParXMLNode@1000000004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";ParNodeName@1000000003 : Text[250];ParNodeText@1000000002 : Text[1024];ParNameSpace@1000000001 : Text[250];VAR ParXMLNewNode@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode") ExitStatus@1000000006 : Integer;
    VAR
      LocXMLNewNode@1000000005 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
    BEGIN
      // test ma

      LocXMLNewNode := ParXMLNode.ownerDocument.createNode('element', ParNodeName, ParNameSpace);


      IF ISCLEAR(LocXMLNewNode) THEN BEGIN
        ExitStatus := 50;
        EXIT;
      END;

      IF (ParNodeText <> '') THEN BEGIN
        LocXMLNewNode.text := ParNodeText;
      END;

      ParXMLNode.appendChild(LocXMLNewNode);
      ParXMLNewNode := LocXMLNewNode;

      ExitStatus := 0;
    END;

    PROCEDURE AddElement2@1100281000(VAR ParXMLNode@1000000004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";ParNodeName@1000000003 : Text[250];ParNodeText@1000000002 : Text[1024];ParNameSpace@1000000001 : Text[250];VAR ParXMLNewNode@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode") ExitStatus@1000000006 : Integer;
    VAR
      LocXMLNewNode@1000000005 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
    BEGIN
      //AddElement (reprise du code navision)
      //Permet d'ajouter un noeud fille de nom ParNodeName d'espace de nom ParNameSpace de valeur texte ParNodeText au noeud ParXmlNode
      //Met dans ParXMLNewNode le noeud cr‚‚
      //Retourne  0 si aucun problŠme
      //         50 si le noeud fille n'a pas ‚t‚ cr‚‚

      LocXMLNewNode := ParXMLNode.ownerDocument.createNode('element', ParNodeName, ParNameSpace);

      IF ISCLEAR(LocXMLNewNode) THEN BEGIN
        ExitStatus := 50;
        EXIT;
      END;

      IF (ParNodeText <> '') THEN BEGIN
        LocXMLNewNode.text := ParNodeText;
      END;

      ParXMLNode.appendChild(LocXMLNewNode);
      ParXMLNewNode := LocXMLNewNode;

      ExitStatus := 0;
    END;

    PROCEDURE AddElement3@1100281006(VAR XMLNode@1001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v3.0'.DOMDocument";NodeName@1002 : Text[250];NodeText@1003 : Text[250];NameSpace@1004 : Text[250];VAR CreatedXMLNode@1005 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode") ExitStatus@1000 : Integer;
    VAR
      NewChildNode@1006 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMNode";
    BEGIN
      //IMH01.NFO
      IF NOT NormalCaseMode THEN
        NodeName := UPPERCASE(NodeName);
      NewChildNode := XMLNode.ownerDocument.createElement(NodeName);

      IF ISCLEAR(NewChildNode) THEN BEGIN
        ExitStatus := 50;
        EXIT;
      END;

      IF NodeText <> '' THEN
        NewChildNode.text := NodeText;

      XMLNode.appendChild(NewChildNode);
      CreatedXMLNode := NewChildNode;

      ExitStatus := 0;
    END;

    PROCEDURE AddElement4@1100281008(VAR ParXMLNode@1000000004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";ParNodeName@1000000003 : Text[250];ParNodeText@1000000002 : Text[1024];ParNameSpace@1000000001 : Text[250]) ExitStatus@1000000006 : Integer;
    VAR
      LocXMLNewNode@1000000005 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
    BEGIN
      //IMH06.ST
      // Ajout rapide de noeuds sans valeur de retour
      LocXMLNewNode := ParXMLNode.ownerDocument.createNode('element', ParNodeName, ParNameSpace);

      IF ISCLEAR(LocXMLNewNode) THEN BEGIN
        ExitStatus := 50;
        EXIT;
      END;
      IF (ParNodeText <> '') THEN
        LocXMLNewNode.text := ParNodeText;

      ParXMLNode.appendChild(LocXMLNewNode);
      ExitStatus := 0;
    END;

    PROCEDURE AddBigTextElement@1100281001(VAR ParXMLNode@1000000004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";ParNodeName@1000000003 : Text[250];ParNodeBigText@1000000002 : BigText;ParNameSpace@1000000001 : Text[250];VAR ParXMLNewNode@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode") ExitStatus@1000000006 : Integer;
    VAR
      LocXMLNewNode@1000000005 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lPos@1100281002 : Integer;
      lLength@1100281000 : Integer;
      lText@1100281003 : Text[1024];
    BEGIN
      //IMH01 isat.zw
      //AddElement (reprise du code navision)
      //Permet d'ajouter un noeud fille de nom ParNodeName d'espace de nom ParNameSpace de valeur texte ParNodeText au noeud ParXmlNode
      //Met dans ParXMLNewNode le noeud cr‚‚
      //Retourne  0 si aucun problŠme
      //         50 si le noeud fille n'a pas ‚t‚ cr‚‚

      LocXMLNewNode := ParXMLNode.ownerDocument.createNode('element', ParNodeName, ParNameSpace);

      IF ISCLEAR(LocXMLNewNode) THEN BEGIN
        ExitStatus := 50;
        EXIT;
      END;

      lLength := ParNodeBigText.LENGTH;
      lPos := 1;
      IF (lLength <> 0) THEN BEGIN
        WHILE lPos < lLength DO BEGIN
          IF lLength - lPos > 1024 THEN BEGIN
            ParNodeBigText.GETSUBTEXT(lText, lPos, 1024);
            lPos := lPos + 1024;
          END ELSE BEGIN
            ParNodeBigText.GETSUBTEXT(lText, lPos, lLength-lPos+1);
            lPos := lLength;
          END;
          LocXMLNewNode.text := LocXMLNewNode.text + lText;
        END;
      END;

      ParXMLNode.appendChild(LocXMLNewNode);
      ParXMLNewNode := LocXMLNewNode;

      ExitStatus := 0;
    END;

    PROCEDURE AddCDATATextElement@1100281009(VAR pXMLNode@1000000004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";pNodeName@1000000003 : Text[250];pBigtext@1000000002 : BigText;pNameSpace@1000000001 : Text[250]) rValue@1000000006 : Integer;
    VAR
      lXMLCDATASection@1100281004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF8A-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMCDATASection";
      lPos@1100281002 : Integer;
      lLength@1100281000 : Integer;
      lText@1100281003 : Text[1024];
    BEGIN
      // IMH08.PC
      // Permet d'ajouter un noeud fille de nom pNodeName d'espace de nom pNameSpace de valeur texte issue de pBigText au noeud pXmlNode
      // Met dans pXMLNewNode le noeud cr‚‚
      // Retourne  0 si aucun problŠme
      //           50 si le noeud fille n'a pas ‚t‚ cr‚‚

      rValue := 0;

      lLength := pBigtext.LENGTH;
      lPos := 1;
      IF (lLength <> 0) THEN BEGIN
        lXMLCDATASection := pXMLNode.ownerDocument.createCDATASection('');
        WHILE lPos < lLength DO BEGIN
          IF lLength - lPos > 1024 THEN BEGIN
            pBigtext.GETSUBTEXT(lText, lPos, 1024);
            lPos := lPos + 1024;
          END ELSE BEGIN
            pBigtext.GETSUBTEXT(lText, lPos, lLength-lPos+1);
            lPos := lLength;
          END;
          //<<Temp
          //lXMLCDATASection.appendData(lText);
          lXMLCDATASection.appendData(ToolsMgt.FormatExport(lText));
          //>>Temp
        END;
        pXMLNode.appendChild(lXMLCDATASection);
      END;
    END;

    PROCEDURE AddInStreamTextElement@1100281007(VAR pXMLNode@1000000004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";pNodeName@1000000003 : Text[250];pInStream@1000000002 : InStream;pNameSpace@1000000001 : Text[250];VAR pXMLNewNode@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode") ExitStatus@1000000006 : Integer;
    VAR
      lXMLNewNode@1000000005 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lText@1100281003 : Text[1024];
    BEGIN
      // IMH05.PC
      // Permet d'ajouter un noeud fille (pNodeName) d'espace de nom pNameSpace
      // La valeur du texte est extraite d'un instream pInStream. celui-ci sera lu en mode texte
      // Met dans pXMLNewNode le noeud cr‚‚
      // Retourne  0 si aucun problŠme
      //          50 si le noeud fille n'a pas ‚t‚ cr‚‚

      lXMLNewNode := pXMLNode.ownerDocument.createNode('element', pNodeName, pNameSpace);

      IF ISCLEAR(lXMLNewNode) THEN BEGIN
        ExitStatus := 50;
        EXIT;
      END;

      WHILE NOT pInStream.EOS DO BEGIN
        IF pInStream.READTEXT(lText) <> 0 THEN BEGIN
          lXMLNewNode.text := lXMLNewNode.text + lText;
        END;
      END;

      pXMLNode.appendChild(lXMLNewNode);
      pXMLNewNode := lXMLNewNode;

      ExitStatus := 0;
    END;

    PROCEDURE AddFileElement@1100281002(VAR ParXMLNode@1100281007 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";ParNodeName@1100281006 : Text[250];ParNodeFilePath@1100281005 : Text[1024];ParNameSpace@1100281004 : Text[250];VAR ParXMLNewNode@1100281001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode") ExitStatus@1000000006 : Integer;
    VAR
      LocXMLNewNode@1000000005 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      LocXMLCDATASection@1100281008 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF8A-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMCDATASection";
      lAdoStream@1100281009 : Automation "{2A75196C-D9EB-4129-B803-931327F72D5C} 2.8:{00000566-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.8 Library'.Stream";
      lRBAutoMgt@1100281011 : Codeunit 419;
      lFolderMgt@1100281013 : Codeunit 50004;
      lPos@1100281002 : Integer;
      lLength@1100281000 : Integer;
      lText@1100281003 : Text[1024];
      lFileCompletNameBuffer@1100281010 : Text[1024];
      CGBase64@1000000000 : Automation "{244B7B21-2FBE-4189-A6A8-B8E90E6F83B5} 6.0:{9CD92F3E-9F7C-4EE3-A5D0-724296F8790F}:'CG Request Client'.Base64";
    BEGIN
      //IMH02 isat.zw
      LocXMLNewNode := ParXMLNode.ownerDocument.createNode('element', ParNodeName, ParNameSpace);

      IF ISCLEAR(LocXMLNewNode) THEN BEGIN
        ExitStatus := 50;
        EXIT;
      END;

      IF ISCLEAR(lAdoStream) THEN
        CREATE(lAdoStream);

      //lFileCompletNameBuffer := lRBAutoMgt.ServerTempFileName('.',lFolderMgt.GetFileExtension(ParNodeFilePath));
      //IF ISSERVICETIER THEN BEGIN
      //  DOWNLOAD(ParNodeFilePath,'','<TEMP>','',lFileCompletNameBuffer);
      //END
      //ELSE BEGIN
      //  FILE.COPY(ParNodeFilePath,lFileCompletNameBuffer);
      //END;
      //Error(format(Exists(ParNodeFilePath)));

      lFileCompletNameBuffer := lFolderMgt.CreateCompanyTmpFileName(lFolderMgt.GetFileExtension(ParNodeFilePath));

      //lFolderMgt.CopyFile2(ParNodeFilePath,lFileCompletNameBuffer);
      //FILE.COPY(ParNodeFilePath,lFileCompletNameBuffer);
        lFileCompletNameBuffer := ParNodeFilePath;

      lAdoStream.Type := 1; // 1=adTypeBinary
      lAdoStream.Open;
      lAdoStream.LoadFromFile(lFileCompletNameBuffer);
      //LocXMLCDATASection := ParXMLNode.ownerDocument.createCDATASection('test');
      //LocXMLCDATASection.nodeTypedValue := lAdoStream.Read(-1); // -1=adReadAll
      LocXMLNewNode.dataType := 'bin.base64';
      LocXMLNewNode.nodeTypedValue := lAdoStream.Read(-1); // -1=adReadAll
      //ParXMLNode.appendChild(LocXMLCDATASection);
      ParXMLNode.appendChild(LocXMLNewNode);
      ParXMLNewNode := LocXMLNewNode;
      lAdoStream.Close;
      CLEAR(lAdoStream);
      //lFolderMgt.EraseTempFile(lFileCompletNameBuffer);
      ExitStatus := 0;
    END;

    PROCEDURE AddAttribute@3(VAR ParXMLNode@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";ParName@1000000001 : Text[260];ParNodeValue@1000000000 : Text[260]) ExitStatus@1000000004 : Integer;
    VAR
      LocXMLNewAttributeNode@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
    BEGIN
      //AddAttribute (reprise du code navision)
      //Permet d'ajouter un noeud fille de nom ParNodeName d'espace de nom ParNameSpace de valeur texte ParNodeText au noeud ParXmlNode
      //Met dans ParXMLNewNode le noeud cr‚‚
      //Retourne  0 si aucun problŠme
      //         60 si l'attribut n'a pas ‚t‚ cr‚‚

      LocXMLNewAttributeNode := ParXMLNode.ownerDocument.createAttribute(ParName);

      IF ISCLEAR(LocXMLNewAttributeNode) THEN BEGIN
        ExitStatus := 60;
        EXIT(ExitStatus)
      END;

      IF (ParNodeValue <> '') THEN BEGIN
        LocXMLNewAttributeNode.nodeValue := ParNodeValue;
      END;
      ParXMLNode.attributes.setNamedItem(LocXMLNewAttributeNode);
    END;

    PROCEDURE GetBigTextNodeValue@1100281003(pXmlNode@1100281000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";VAR pBigText@1100281001 : BigText);
    VAR
      lText@1100281003 : Text[1024];
      lTextNode@1100281005 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF87-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMText";
      lNewNode@1100281008 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lLength@1100281006 : Integer;
      i@1100281009 : Integer;
    BEGIN
      //IMH02 isat.zw
      //Permet obtenir le valeur text +1024 caractŠres d'un node dans un bigtext
      lNewNode := pXmlNode.ownerDocument.createNode('text', pXmlNode.nodeName, '');

      lNewNode.nodeTypedValue := pXmlNode.nodeTypedValue;

      pXmlNode.appendChild(lNewNode);
      lTextNode := lNewNode;
      lLength := lTextNode.length;
      i := 0;
      WHILE i < lLength DO BEGIN
        IF i + 1024 < lLength THEN
          lText := lTextNode.substringData(i, 1024)
        ELSE
          lText := lTextNode.substringData(i, lLength - i);
        i += 1024;
        pBigText.ADDTEXT(lText);
      END;
    END;

    PROCEDURE FindRootNode@101(ParXmlDoc@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";VAR ParXmlNode@1000000001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode") : Boolean;
    BEGIN
      //FindRootNode
      //  Met dans ParXmlNode le noeud root du flux Xml ParXmlDoc
      //  Retourne vrai si pas d'erreur, faux sinon

      ParXmlNode := ParXmlDoc.documentElement;

      IF ISCLEAR(ParXmlNode) THEN
        EXIT(FALSE)
      ELSE
        EXIT(TRUE);
    END;

    PROCEDURE FindNodeAttribute@102(ParXmlNode@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";ParAttributPath@1000000001 : Text[250]) : Text[250];
    VAR
      LocXMLAttribute@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF85-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMAttribute";
      "-"@1000000004 : Integer;
      LocText@1000000002 : Text[250];
      NbAttributes@1000000006 : Integer;
      i@1000000005 : Integer;
    BEGIN
      //FindNodeAttribute
      //  Retourne la valeur de l'attribut ParAttributPath du noeud ParXmlNode

      LocText := '';

      NbAttributes := ParXmlNode.attributes.length;

      IF (NbAttributes > 0) THEN BEGIN
        FOR i := 0 TO (NbAttributes-1) DO BEGIN
          LocXMLAttribute := ParXmlNode.attributes.item(i);

          IF (LocXMLAttribute.nodeName = ParAttributPath) THEN BEGIN
            LocText := LocXMLAttribute.nodeValue;
          END;
        END;
      END;

      EXIT(LocText);
    END;

    PROCEDURE FindNodeAttributes@103(ParXmlNode@1000000001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";VAR ParXmlNodeAttributes@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF83-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNamedNodeMap") : Boolean;
    VAR
      NbAttributes@1000000002 : Integer;
    BEGIN
      //FindNodeAttributes
      //  Met dans ParXmlNodesAttributes la collection d'attribut du noeud ParXmlNode
      //  Retourne vrai si au moins un ‚l‚ment dans la collection, faux sinon

      NbAttributes := ParXmlNode.attributes.length;

      IF (NbAttributes > 0) THEN BEGIN
        ParXmlNodeAttributes := ParXmlNode.attributes;
      END ELSE BEGIN
      END;

      EXIT (NbAttributes > 0);
    END;

    PROCEDURE FindNodeText@104(ParXmlNode@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode") : Text[250];
    VAR
      LocText@1000000001 : Text[250];
    BEGIN
      //FindNodeText
      //  Retourne la valeur texte associ‚ au noeud ParXmlNode

      LocText := ParXmlNode.text;

      EXIT(LocText);
    END;

    PROCEDURE FindAllNodes@105(ParXmlNode@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";VAR ParXmlNodeList@1000000001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNodeList") : Boolean;
    BEGIN
      //FindAllNodes
      //  Met dans ParXmlNodes toute la collection de noeud fille du noeud ParXmlNode
      //  Retourne vrai si au moins un noeud fille, faux sinon

      IF ParXmlNode.hasChildNodes THEN BEGIN
        ParXmlNodeList := ParXmlNode.childNodes;
      END ELSE BEGIN
      END;

      EXIT (ParXmlNode.hasChildNodes);
    END;

    PROCEDURE FindNodes@106(ParXmlNode@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";ParNodePath@1000000002 : Text[250];VAR ParXmlNodes@1000000001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNodeList") : Boolean;
    BEGIN
      //FindNodes
      //  Met dans ParXmlNodes la collection de noeud fille de nom ParNodePath du noeud ParXmlNode
      //  Retourne vrai si au moins un noeud fille, faux sinon

      IF (ParXmlNode.selectNodes(ParNodePath).length > 0) THEN BEGIN
        ParXmlNodes := ParXmlNode.selectNodes(ParNodePath);
        EXIT(TRUE);
      END ELSE BEGIN
        EXIT(FALSE);
      END;
    END;

    PROCEDURE FindFirstNode@107(ParXmlNode@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";ParNodePath@1000000002 : Text[250];VAR ParXmlNode2@1000000001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode") : Boolean;
    BEGIN
      //FindFirstNode
      //  Met dans ParXmlNode2 le premier noeud de la collection de noeud fille de nom ParNodePath du noeud ParXmlNode
      //  Retourne vrai si au moins un noeud fille, faux sinon

      IF (ParXmlNode.selectNodes(ParNodePath).length > 0) THEN BEGIN
        ParXmlNode2 := ParXmlNode.selectSingleNode(ParNodePath);
        EXIT(TRUE);
      END ELSE
        EXIT(FALSE);
    END;

    PROCEDURE FormatValue@1000000007(Value@1000000001 : Variant) : Text[250];
    BEGIN
      CASE TRUE OF
        Value.ISBOOLEAN :
          EXIT(ToolsMgt.BooleanToText(Value));
        Value.ISINTEGER :
          EXIT(ToolsMgt.IntegerToText(Value));
        Value.ISDECIMAL :
          EXIT(ToolsMgt.SQLDecimalToText(Value));
        Value.ISDATE :
          EXIT(ToolsMgt.DateToText(Value));
        Value.ISTIME :
          EXIT(ToolsMgt.TimeToText(Value));
        Value.ISBINARY :
          EXIT(FORMAT(Value));
        Value.ISOPTION,
        Value.ISDATEFORMULA,
        Value.ISCHAR,
        Value.ISTEXT,
        Value.ISCODE:
          EXIT(FORMAT(Value));
        ELSE
          EXIT(ToolsMgt.DateTimeToText(Value));
      END;
    END;

    PROCEDURE FormatNodeName@1000000000(NodeName@1000000000 : Text[250]) : Text[250];
    BEGIN
      NodeName := CONVERTSTR(NodeName,' ','_');
      NodeName := CONVERTSTR(NodeName,'(','_');
      NodeName := CONVERTSTR(NodeName,')','_');
      NodeName := CONVERTSTR(NodeName,':','_');
      NodeName := CONVERTSTR(NodeName,',','_');
      NodeName := CONVERTSTR(NodeName,'\','_');
      NodeName := CONVERTSTR(NodeName,'/','_');
      NodeName := CONVERTSTR(NodeName,'"','_');
      NodeName := CONVERTSTR(NodeName,'.','_');
      NodeName := CONVERTSTR(NodeName,'-','_');
      NodeName := CONVERTSTR(NodeName,'%','_');
      NodeName := CONVERTSTR(NodeName,'>','_');
      NodeName := CONVERTSTR(NodeName,'<','_');
      NodeName := CONVERTSTR(NodeName,'æ','_');
      NodeName := CONVERTSTR(NodeName,'ø','_');
      EXIT(UPPERCASE(NodeName));
    END;

    PROCEDURE EvaluateValue@1000000001(Value@1000000004 : Variant;TxtValue@1000000000 : Text[250];VAR ReturnValue@1000000002 : Variant);
    VAR
      VarDateFor@1000000001 : DateFormula;
    BEGIN
      CASE TRUE OF
        Value.ISBOOLEAN :
          ReturnValue := ToolsMgt.TextToBoolean(TxtValue);
        Value.ISOPTION :
          ReturnValue := ToolsMgt.TextToInteger(TxtValue);
        Value.ISINTEGER :
          ReturnValue := ToolsMgt.TextToInteger(TxtValue);
        Value.ISDECIMAL :
          ReturnValue := ToolsMgt.TextToDecimal(TxtValue);
        Value.ISDATE :
          ReturnValue := ToolsMgt.TextToDate(TxtValue);
        Value.ISTIME :
          ReturnValue := ToolsMgt.TextToTime(TxtValue);
        Value.ISBINARY :
          ReturnValue := ToolsMgt.TextToInteger(TxtValue);
        Value.ISDATEFORMULA :
          BEGIN
           IF EVALUATE(VarDateFor,TxtValue) THEN
             ReturnValue := VarDateFor
           ELSE
            ReturnValue := FORMAT(TxtValue);
          END;
        Value.ISTEXT, Value.ISCODE, Value.ISCHAR :
          ReturnValue := FORMAT(TxtValue);
        ELSE
          //<<IMH03.ISAT.EBA
          //ReturnValue := FORMAT(TxtValue);
          ReturnValue := ToolsMgt.TextToDateTime(TxtValue);
          //>>IMH03.ISAT.EBA
      END;
    END;

    PROCEDURE ConcatXMLDoc@210(VAR ParXmlDoc1@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";ParXmlDoc2@1000000001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";ParTableID@1000000002 : Integer) ReturnStatus@1000000008 : Boolean;
    VAR
      LocXMLRootNode1@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      LocXMLRootNode2@1000000009 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      LocXMLNode2@1000000004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      LocXMLNodes2@1000000005 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF82-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNodeList";
      "-"@1000000006 : Integer;
      iNodes2@1000000007 : Integer;
    BEGIN
      //ConcatXMLDoc
      ReturnStatus := FALSE;

      CASE ParTableID OF
        DATABASE::"Sales Header" :
        BEGIN
          IF ISCLEAR(ParXmlDoc1) THEN BEGIN
            CLEAR(ParXmlDoc1);
            CREATE(ParXmlDoc1);
            CreateXml(ParXmlDoc1,'<SALES_EDI_MANAGEMENT/>',LocXMLRootNode1);
          END;

          IF NOT FindRootNode(ParXmlDoc1,LocXMLRootNode1) THEN BEGIN
            CLEAR(ParXmlDoc1);
            CREATE(ParXmlDoc1);
            CreateXml(ParXmlDoc1,'<SALES_EDI_MANAGEMENT/>',LocXMLRootNode1);
          END;

          IF FindRootNode(ParXmlDoc1,LocXMLRootNode1) THEN BEGIN
            IF FindRootNode(ParXmlDoc2,LocXMLRootNode2) THEN BEGIN
              IF FindNodes(LocXMLRootNode2,'SALES_CUSTOMER',LocXMLNodes2) THEN BEGIN
                FOR iNodes2 := 0 TO (LocXMLNodes2.length - 1) DO BEGIN
                  LocXMLNode2 := LocXMLNodes2.item(iNodes2);

                  LocXMLRootNode1.appendChild(LocXMLNode2);
                END;
              END;

            END ELSE BEGIN
              EXIT;
            END;

          END ELSE BEGIN
            EXIT;
          END;
        END;

        ELSE
        BEGIN
          EXIT;
        END;
      END;

      ReturnStatus := TRUE;
    END;

    PROCEDURE GetADOStreamNodeValue@1100281004(VAR pXmlNode@1100281000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";VAR pADOStream@1100281001 : Automation "{2A75196C-D9EB-4129-B803-931327F72D5C} 2.8:{00000566-0000-0010-8000-00AA006D2EA4}:'Microsoft ActiveX Data Objects 2.8 Library'.Stream");
    VAR
      lText@1100281003 : Text[1024];
      lTextNode@1100281005 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 3.0:{2933BF87-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v3.0'.IXMLDOMText";
      lNewNode@1100281008 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lLength@1100281006 : Integer;
      i@1100281009 : Integer;
    BEGIN
      //IMH02 isat.MA
      //Permet obtenir le valeur text +1024 caractŠres d'un node dans un ADOStream
      lNewNode := pXmlNode.ownerDocument.createNode('text', pXmlNode.nodeName, '');

      lNewNode.nodeTypedValue := pXmlNode.nodeTypedValue;

      pXmlNode.appendChild(lNewNode);
      lTextNode := lNewNode;
      lLength := lTextNode.length;
      i := 0;
      WHILE i < lLength DO BEGIN
        IF i + 1024 < lLength THEN
          lText := lTextNode.substringData(i, 1024)
        ELSE
          lText := lTextNode.substringData(i, lLength - i);
        i += 1024;
        //pBigText.ADDTEXT(lText);
        pADOStream.WriteText(lText);
      END;
    END;

    PROCEDURE FindFirstNode2@1100281005(ParXmlNode@1000000000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";ParNodePath@1000000002 : Text[250];VAR ParXmlNode2@1000000001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode") : Boolean;
    BEGIN
      //FindFirstNode
      //  Met dans ParXmlNode2 le premier noeud de la collection de noeud fille de nom ParNodePath du noeud ParXmlNode
      //  Retourne vrai si au moins un noeud fille, faux sinon
      IF (ParXmlNode.selectNodes(ParNodePath).length > 0) THEN BEGIN
        ParXmlNode2 := ParXmlNode.selectSingleNode(ParNodePath);
        EXIT(TRUE);
      END ELSE BEGIN
        ERROR(STRSUBSTNO(Text200, ParNodePath));
      END;
    END;

    PROCEDURE SetNormalCase@6();
    BEGIN
      NormalCaseMode := TRUE;
    END;

    PROCEDURE AddFileElementWithoutAttribute@1000000002(VAR pXMLNode@1100281007 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";pNodeName@1100281006 : Text[250];pNodeFilePath@1100281005 : Text[1024];pNameSpace@1100281004 : Text[250];VAR pXMLNewNode@1100281001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode") ExitStatus@1000000006 : Integer;
    VAR
      lXMLNewNode@1000000005 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lCGBase64@1000000000 : Automation "{244B7B21-2FBE-4189-A6A8-B8E90E6F83B5} 6.0:{9CD92F3E-9F7C-4EE3-A5D0-724296F8790F}:'CG Request Client'.Base64";
    BEGIN
      //IMH08.ACO
      lXMLNewNode := pXMLNode.ownerDocument.createNode('element',pNodeName,pNameSpace);

      IF ISCLEAR(lXMLNewNode) THEN BEGIN
        ExitStatus := 50;
        EXIT;
      END;

      CREATE(lCGBase64);
      lCGBase64.Encode(pNodeFilePath,lXMLNewNode);
      pXMLNode.appendChild(lXMLNewNode);
      pXMLNewNode := lXMLNewNode;
      ExitStatus := 0;
    END;

    BEGIN
    {
      /** @r IMH08 @d 18/10/13 @a ISAT.PC @v IMH6.01.348 @s DARVA MATMUT Lot 1 @s Add AddCDATATextElement function */
      /** @r IMH07 @d 11/10/13 @a ISAT.ACO @v IMH6.01.348 @s DARVA MATMUT Lot 1 @h 4789
          @c Cr‚ation fonction AddFileElementWithoutAttribute*/
      /** @r IMH06 @d 23/03/12 @a ISAT.ST*/
      /** @r IMH05 @d 04/11/11 @a ISAT.PC @v IMH6.01.131 @s EAI @c Ajout AddInStreamTextElement
          @c Ajout d'un flux instream dans un noeud */
      /** @r IMH04 @d 27/07/11 @a ISAT.ST @v IMH6.01.131 @s EAI @c Ajout FindFirstNode2 */
          @c Gestion type DateTime */
      /** @r IMH03 @d 16/05/11 @a ISAT.EBA @v IMH6.01.159 @s Comptabilit‚ - IMA Service
          @c Gestion type DateTime */
      /** @r IMH02 @d 29/04/11 @a ISAT.ZW @v IMH6.01.131 @s Interface EAI @c Ajour AddBigTextElement*/
      /** @r IMH01 @d 11/01/11 @a ISAT.ZW @v IMH6.01.131 @s Interface EAI @c Ajour AddBigTextElement*/
      /** @r EAI00 @d 31/12/08 @a ISAT.MGI @v ISAEAI5.01.01.00 @s Cr‚ation de l'objet
          @c Fonctions de g‚n‚r‚ration d'un fichier XML */
    }
    END.
  }
}