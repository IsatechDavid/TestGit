OBJECT Codeunit 8016725 EAI Rcvd Generation Act
{
  OBJECT-PROPERTIES
  {
    Date=02/12/13;
    Time=14:01:22;
    Modified=Yes;
    Version List=ISAEAI1.00,IMH6.01,GED,M4637;
  }
  PROPERTIES
  {
    TableNo=8016721;
    OnRun=VAR
            lEAIRcvdMQBuffer@1100281000 : TEMPORARY Record 8016721;
          BEGIN
            lEAIRcvdMQBuffer := Rec;
            Code(lEAIRcvdMQBuffer);
            Rec := lEAIRcvdMQBuffer;
          END;

  }
  CODE
  {
    VAR
      Error001@1100281000 : TextConst 'FRA=Aucun CodeUnit de g‚n‚ration pour l''act %1, de type %2.';
      Error002@1100481001 : TextConst 'FRA=Le fichier "%1" est mal format‚.';

    LOCAL PROCEDURE Code@1100281000(VAR pRcvdMQBuffer@1100281000 : Record 8016721);
    VAR
      lEAIMQExchangeType@1100281004 : Record 8016719;
      lEAIExchangeType@1100281003 : Record 8016717;
      lEAIRcvdMQBuffer@1100481000 : TEMPORARY Record 8016721;
      lToCommit@1100281001 : Boolean;
    BEGIN
      //on r‚cupŠre les types d'‚changes

      //<<IMH03.PC
      // Mise … jour des files pour execution
      lToCommit := FALSE;
      WITH lEAIExchangeType DO BEGIN
        IF FINDSET THEN BEGIN
          REPEAT
            IF "Execution Modulo Loop" <> 0 THEN BEGIN
              "Current Execution Modulo Loop" += 1;
              IF "Execution Modulo Loop" = "Current Execution Modulo Loop" THEN BEGIN
                "Current Execution Modulo Loop" := 0;
              END;
              MODIFY;
              lToCommit := TRUE
            END;
          UNTIL NEXT = 0;
          IF lToCommit THEN BEGIN
            COMMIT;
          END;
        END;
      END;
      //>>IMH03.PC

      WITH lEAIMQExchangeType DO BEGIN
        SETRANGE("EAI MQ Code",pRcvdMQBuffer."EAI MQ Code");
        IF FINDSET(FALSE,FALSE) THEN BEGIN
          REPEAT
            lEAIRcvdMQBuffer := pRcvdMQBuffer;

            lEAIRcvdMQBuffer."EAI Partner Code" := lEAIMQExchangeType."EAI Partner Code";
            lEAIRcvdMQBuffer."EAI Act Type Code" := lEAIMQExchangeType."EAI Act Type Code";
            lEAIRcvdMQBuffer."EAI Act Code" := lEAIMQExchangeType."EAI Act Code";
            lEAIRcvdMQBuffer."EAI Process Code" := lEAIMQExchangeType."EAI Process Code";
            lEAIRcvdMQBuffer."EAI Exchange Type Code" := "EAI Exchange Type Code";

            lEAIExchangeType.GET(lEAIExchangeType.Type::Inbound,"EAI Exchange Type Code");
            //<<IMH03.PC
            IF lEAIExchangeType.Enable AND (lEAIExchangeType."Current Execution Modulo Loop" = 0) THEN BEGIN
            //>>IMH03.PC
              CASE lEAIExchangeType."Bus Type" OF
                lEAIExchangeType."Bus Type"::File : BEGIN
                  ReceiveXMLFile(lEAIMQExchangeType,pRcvdMQBuffer);
                END;
                lEAIExchangeType."Bus Type"::Database : BEGIN
                  ReceiveDataBaseRecord(lEAIMQExchangeType,pRcvdMQBuffer);
                END;
                lEAIExchangeType."Bus Type"::"Web service" : BEGIN
                  ReceiveFromWebService(lEAIRcvdMQBuffer);  // IMH01.ISAT.MA
                END;
              END;
            END;
          UNTIL lEAIMQExchangeType.NEXT = 0;
        END;
      END;

      //EAI02 : On traite les messages Step=Generated AND
    END;

    LOCAL PROCEDURE MQSynchroReception@1100281003();
    BEGIN
    END;

    LOCAL PROCEDURE ReceiveXMLFile@1100281011(pMQExchangeType@1100281000 : Record 8016719;pRcvdMQBuffer@1100281005 : Record 8016721);
    VAR
      lEAILogMgt@1100481000 : Codeunit 8016711;
      lExchangeType@1100281001 : Record 8016717;
      lFileRecord@1100281002 : Record 2000000022;
      lCurrentFile@1100281003 : File;
      lXMLDocIn@1100281004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{88D96A05-F192-11D4-A65F-0040963251E5}:'Microsoft XML, v6.0'.DOMDocument60";
      lFileName@1100481004 : Text[1024];
      lFileNameError@1100481002 : Text[1024];
      lFileNameHisto@1100481003 : Text[1024];
    BEGIN
      SELECTLATESTVERSION;

      lExchangeType.GET(lExchangeType.Type::Inbound,pMQExchangeType."EAI Exchange Type Code");
      lExchangeType.TESTFIELD("Bus Type",lExchangeType."Bus Type"::File);
      //<<IMH03.PC
      IF NOT lExchangeType.Enable THEN BEGIN
        EXIT;
      END;
      IF (lExchangeType."Current Execution Modulo Loop" <> 0) THEN BEGIN
        EXIT;
      END;
      //>>IMH03.PC
      WITH lFileRecord DO BEGIN
        CLEAR(lFileRecord);
        RESET;
        SETRANGE(Path,lExchangeType."Ingoing Queue Label");
        IF lExchangeType."Ingoing File Extension" <> '' THEN BEGIN
          SETFILTER(Name,STRSUBSTNO('*.%1',lExchangeType."Ingoing File Extension"));
        END ELSE BEGIN
          SETRANGE(Name);
        END;
        SETRANGE("Is a file",TRUE);

        IF FINDSET(FALSE,FALSE) THEN BEGIN
          REPEAT
            CLEAR(lXMLDocIn);
            CREATE(lXMLDocIn);
            lXMLDocIn.async := FALSE;

            lFileName := Path +'\'+ Name;
            IF lExchangeType."Error Folder" <> '' THEN BEGIN
              lFileNameError := lExchangeType."Error Folder" + '\' + lFileRecord.Name;
            END ELSE BEGIN
              lFileNameError := '';
            END;
            IF lExchangeType."Histo Folder" <> '' THEN BEGIN
              lFileNameHisto := lExchangeType."Histo Folder" + '\' + lFileRecord.Name;
            END ELSE BEGIN
              lExchangeType."Histo Folder" := '';
            END;

            CLEAR(lCurrentFile);
            lCurrentFile.WRITEMODE(TRUE);
            IF lCurrentFile.OPEN(lFileName) THEN BEGIN
              lCurrentFile.CLOSE;
              CLEAR(lCurrentFile);

              IF lXMLDocIn.load(lFileName) THEN BEGIN
                pRcvdMQBuffer."File Name" := Name;
                InsertXMLReceivedMQ(lXMLDocIn,pMQExchangeType,pRcvdMQBuffer);
                IF lFileNameHisto <> '' THEN
                BEGIN
                  IF FILE.EXISTS(lFileNameHisto) THEN
                    FILE.ERASE(lFileNameHisto);
                  FILE.COPY(lFileName,lFileNameHisto);
                END;
                FILE.ERASE(lFileName);
                COMMIT; //JR : COMMIT aprŠs chaque fichier int‚gr‚
              END ELSE BEGIN
                IF lFileNameError <> '' THEN BEGIN
                  IF FILE.EXISTS(lFileNameError) THEN
                    FILE.ERASE(lFileNameError);
                  FILE.COPY(lFileName,lFileNameError);
                  FILE.ERASE(lFileName);
                END;
                lEAILogMgt.AddErrorToRcvdLog(
                  pRcvdMQBuffer."EAI MQ Code",pRcvdMQBuffer."EAI Process Code",'','','',STRSUBSTNO(Error002,lFileName))
              END;
            END;
          UNTIL NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE ReceiveDataBaseRecord@1100281012(pEAIMQExchangeType@1100281000 : Record 8016719;pRcvdMQBuffer@1100281001 : Record 8016721);
    BEGIN
      {
      LocI56Blob.SETCURRENTKEY("Company dest ID",Status);
      LocI56Blob.SETRANGE(LocI56Blob."Company dest ID",COMPANYNAME);
      LocI56Blob.SETRANGE(LocI56Blob.Status, LocI56Blob.Status::Waiting);
      LocI56Blob.LOCKTABLE;  // XML.02.ISAT.ST
      IF LocI56Blob.FIND('-') THEN BEGIN
        REPEAT
          LocI56Blob.CALCFIELDS(LocI56Blob."XML Source");
          LocI56Blob."XML Source".CREATEOUTSTREAM(LocOutStream);
          IF LocXMLDocIn.load(LocOutStream) THEN BEGIN
            CLEAR(I56XMLDecode);
            IF I56XMLDecode.Receive(LocXMLDocIn) THEN BEGIN
            // Enregistr‚
              LocI56Blob.DELETE;
            END ELSE BEGIN
              LocI56Blob.Status := LocI56Blob.Status::"On error";
              LocI56Blob.MODIFY;
            END;
          END;
        UNTIL LocI56Blob.NEXT = 0;
      END;
      }
    END;

    LOCAL PROCEDURE ReceiveFromWebService@1100281002(VAR pRcvdMQBuffer@1100281000 : Record 8016721);
    VAR
      lEAIAct@1100281003 : Record 8016706;
      lEAIRcvdMQBuffer@1100281013 : TEMPORARY Record 8016721;
      lEAIRcvdMQBuffer2@1100281004 : TEMPORARY Record 8016721;
      lXMLDocIn@1100281005 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{88D96A05-F192-11D4-A65F-0040963251E5}:'Microsoft XML, v6.0'.DOMDocument60";
      lEAILogMgt@1100281006 : Codeunit 8016711;
      lText000@1100281007 : TextConst 'ENU=This message is for C/AL programmers:;FRA=Ce message s''adresse aux d‚veloppeurs C/AL:';
      lErrorText@1100281008 : Text[250];
      lPos@1100281009 : Integer;
      lText001@1100281010 : TextConst 'ENU=This message is for C/AL programmers:;FRA=Ce message est destin‚ aux d‚veloppeurs C/AL:';
      lInstream@1100281011 : InStream;
      lLength@1100281012 : Integer;
      i@1100281014 : Integer;
      lEAIMQBufferMgt@1000000004 : Codeunit 8016708;
    BEGIN
      // IMH01.ISAT.MA

      SELECTLATESTVERSION;
      CLEARLASTERROR;
      //<<IMH05.PC
      lEAIRcvdMQBuffer := pRcvdMQBuffer;
      WITH lEAIRcvdMQBuffer DO BEGIN
        "Entry No." := '';
        "Date Creation" := WORKDATE;
        "Time Creation" := TIME;
        "User Creation" := USERID;
        Step := Step::Generation;
        Status := Status::Unprocessed;
        INSERT;
        lEAIMQBufferMgt.InsertReceivedBufferToMQCode("EAI MQ Code",lEAIRcvdMQBuffer);
      END;

      //***** Ancien Code ******
      {
      lEAIRcvdMQBuffer.COPY(pRcvdMQBuffer,TRUE);
      pRcvdMQBuffer.CALCFIELDS("XML Source");
      lEAIRcvdMQBuffer."XML Source" := pRcvdMQBuffer."XML Source";
      lEAIRcvdMQBuffer.INSERT;

      // --- Liste Document ---
      IF lExchangeType."Document Global Act Code" = '' THEN BEGIN
        //<<IMH04.RC
        //lEAILogMgt.AddErrorToRcvdLog(
        //  lEAIRcvdMQBuffer."EAI MQ Code",lEAIRcvdMQBuffer."EAI Process Code",'','','','Code acte liste document vide');
        //>> IMH04.RC
        EXIT;
      END;
      lEAIAct.SETRANGE(Code,lExchangeType."Document Global Act Code");
      lEAIAct.FINDFIRST;
      // G‚neration demande liste de document
      IF NOT CODEUNIT.RUN(lEAIAct."Creating Codeunit No.",lEAIRcvdMQBuffer) THEN BEGIN
        lErrorText := GETLASTERRORTEXT;
        lPos := STRPOS(lErrorText,lText001);
        IF lPos > 0 THEN
          lErrorText := DELSTR(lErrorText,lPos,STRLEN(lText000));
        lEAILogMgt.AddErrorToRcvdLog(
          lEAIRcvdMQBuffer."EAI MQ Code",lEAIRcvdMQBuffer."EAI Process Code",'','','',lErrorText);
        lEAIRcvdMQBuffer.DELETEALL;
        EXIT;
      END;
      // Validation demande liste de document
      IF NOT CODEUNIT.RUN(lEAIAct."Posting Codeunit No.",lEAIRcvdMQBuffer) THEN BEGIN
        lErrorText := GETLASTERRORTEXT;
        lPos := STRPOS(lErrorText,lText000);
        IF lPos > 0 THEN
          lErrorText := DELSTR(lErrorText,lPos,STRLEN(lText000));
        lEAILogMgt.AddErrorToRcvdLog(
          lEAIRcvdMQBuffer."EAI MQ Code",lEAIRcvdMQBuffer."EAI Process Code",'','','',lErrorText);
        lEAIRcvdMQBuffer.DELETEALL;
        EXIT;
      END;
      // ---
      // --- R‚cup‚ration document ---
      IF lExchangeType."Document Unitary Act Code" = '' THEN BEGIN
        //<<IMH04.RC
        //lEAILogMgt.AddErrorToRcvdLog(
        //  lEAIRcvdMQBuffer."EAI MQ Code",lEAIRcvdMQBuffer."EAI Process Code",'','','','Code acte r‚cup. doc vide');
        //>>IMH04.RC
        EXIT;
      END;
      lEAIAct.SETRANGE(Code,lExchangeType."Document Unitary Act Code");
      lEAIAct.FINDFIRST;

      IF lEAIRcvdMQBuffer.ISEMPTY THEN
        EXIT;
      lLength := lEAIRcvdMQBuffer.COUNT;
      lEAIRcvdMQBuffer.FINDFIRST;
      REPEAT
        i += 1;
        lEAIRcvdMQBuffer2.INIT;
        lEAIRcvdMQBuffer2 := lEAIRcvdMQBuffer;
        lEAIRcvdMQBuffer.CALCFIELDS("XML Source");
        lEAIRcvdMQBuffer2."XML Source" := lEAIRcvdMQBuffer."XML Source";
        lEAIRcvdMQBuffer2.INSERT;
        // G‚n‚ration demande document
        lEAIRcvdMQBuffer2.Step := lEAIRcvdMQBuffer2.Step::Generation;
        IF NOT CODEUNIT.RUN(lEAIAct."Creating Codeunit No.",lEAIRcvdMQBuffer2) THEN BEGIN
          lErrorText := GETLASTERRORTEXT;
          lPos := STRPOS(lErrorText,lText000);
          IF lPos > 0 THEN
            lErrorText := DELSTR(lErrorText,lPos,STRLEN(lText000));
          lEAILogMgt.AddErrorToRcvdLog(
            lEAIRcvdMQBuffer2."EAI MQ Code",lEAIRcvdMQBuffer2."EAI Process Code",'','','',lErrorText);
        END ELSE
          lEAIRcvdMQBuffer2.Status := lEAIRcvdMQBuffer2.Status::Processing;
        // Validation demande document
        IF  lEAIRcvdMQBuffer2.Status = lEAIRcvdMQBuffer2.Status::Processing THEN BEGIN
          IF NOT CODEUNIT.RUN(lEAIAct."Posting Codeunit No.",lEAIRcvdMQBuffer2) THEN BEGIN
            lErrorText := GETLASTERRORTEXT;
            lPos := STRPOS(lErrorText,lText000);
            IF lPos > 0 THEN
              lErrorText := DELSTR(lErrorText,lPos,STRLEN(lText000));
            lEAILogMgt.AddErrorToRcvdLog(
              lEAIRcvdMQBuffer2."EAI MQ Code",lEAIRcvdMQBuffer2."EAI Process Code",'','','',lErrorText);
            lEAIRcvdMQBuffer2.Status := lEAIRcvdMQBuffer2.Status::Error;
          END;
        END;

        lEAIRcvdMQBuffer2.CALCFIELDS("XML Source");
        CLEAR(lXMLDocIn);
        CREATE(lXMLDocIn);
        IF lEAIRcvdMQBuffer2."XML Source".HASVALUE THEN BEGIN
          lEAIRcvdMQBuffer2."XML Source".CREATEINSTREAM(lInstream);
          lXMLDocIn.load(lInstream);
        END;
        InsertXMLReceivedMQ(lXMLDocIn,pEAIMQExchangeType,lEAIRcvdMQBuffer2);
        COMMIT;  //IMH02 isat.zw
      // ---
      UNTIL lEAIRcvdMQBuffer.NEXT = 0;
      lEAIRcvdMQBuffer.DELETEALL;
      }
      //>>IMH05.PC
    END;

    LOCAL PROCEDURE InsertXMLReceivedMQ@1100281013(pXMLDocIn@1100281000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{88D96A05-F192-11D4-A65F-0040963251E5}:'Microsoft XML, v6.0'.DOMDocument60";pEAIMQExchangeType@1100281001 : Record 8016719;pRcvdMQBuffer@1100281013 : Record 8016721);
    VAR
      lEAIMQBufferMgt@1100281012 : Codeunit 8016708;
      lEAIActMgt@1100281015 : Codeunit 8016703;
      lEAIXMLDocMgt@1100281002 : Codeunit 8016713;
      lNewRcvdMQBuffer@1100281005 : TEMPORARY Record 8016721;
      lEAIAct@1100281003 : Record 8016706;
      lInStream@1100281011 : InStream;
      lGenerationCodeUnitNo@1100281014 : Integer;
      lOutStream@1100281004 : OutStream;
      lEAIExchangeType@1100281006 : Record 8016717;
      lDARVAMgt@1100281007 : Codeunit 50150;
    BEGIN
      lNewRcvdMQBuffer.INIT;

      //Lecture de l'acte en fonction du flux XML
      lEAIXMLDocMgt.GetInfoFromMessageHeader(pXMLDocIn,pRcvdMQBuffer);

      //Remplissage des infos du message
      WITH lNewRcvdMQBuffer DO BEGIN
        lNewRcvdMQBuffer := pRcvdMQBuffer;
        "Entry No." := '';
      // <<IMH02.ISAT.MA
        lEAIExchangeType.GET(lEAIExchangeType.Type::Inbound,pEAIMQExchangeType."EAI Exchange Type Code");
        IF lEAIExchangeType."Bus Type" <> lEAIExchangeType."Bus Type"::"Web service" THEN BEGIN
      // >>IMH02.ISAT.MA
          "XML Source".CREATEINSTREAM(lInStream);
          pXMLDocIn.save(lInStream);
        END; // IMH02.ISAT.MA
        "EAI Partner Code"  := pEAIMQExchangeType."EAI Partner Code";
        "EAI MQ Code" := pEAIMQExchangeType."EAI MQ Code";
        "EAI Process Code" := pEAIMQExchangeType."EAI Process Code";
        "EAI NAS Code" := pRcvdMQBuffer."EAI NAS Code";
        "Date Creation" := WORKDATE;
        "Time Creation" := TIME;
        "User Creation" := USERID;
        Step := Step::Validation;
        Status := Status::Unprocessed;
        INSERT;
      END;

      //on sauvegarde dans la file de message
      lEAIMQBufferMgt.InsertReceivedBufferToMQCode(lNewRcvdMQBuffer."EAI MQ Code",lNewRcvdMQBuffer);

      // Gestion de l'acquittement
      AcknowledgementAct(lNewRcvdMQBuffer);
    END;

    LOCAL PROCEDURE AcknowledgementAct@1100281001(VAR pEAIRcvdMQBuffer@1100281000 : Record 8016721);
    VAR
      lEAIMessageQueue@1000000000 : Record 8016704;
      lEAISentMQBuffer@1000000001 : TEMPORARY Record 8016720;
      lEAIAct@1100281002 : Record 8016706;
      lEAIAckAct@1100281003 : Record 8016706;
      lEAIMQExchangeType@1100281004 : Record 8016719;
      lEAIMQBufferMgt@1100281001 : Codeunit 8016708;
    BEGIN
      // IMH06.PC
      lEAIMessageQueue.GET(pEAIRcvdMQBuffer."EAI MQ Code");
      //<<IMH07.PC
      //lEAIMessageQueue.testfield("Acknowledge Message Queue");
      IF lEAIMessageQueue."Acknowledge Message Queue" = '' THEN BEGIN
        EXIT;
      END;
      //>>IMH07.PC

      lEAIAct.GET(pEAIRcvdMQBuffer."EAI Act Type Code", pEAIRcvdMQBuffer."EAI Act Code");
      IF NOT lEAIAct."Acknowledge Enable" THEN BEGIN
        EXIT;
      END;

      IF lEAIAct."Acknowledgment Status" <> lEAIAct."Acknowledgment Status"::Receive THEN BEGIN
        EXIT;
      END;

      lEAIAckAct.GET(lEAIAct."Ack. Act Type Code",lEAIAct."Ack. Act Code");
      WITH lEAISentMQBuffer DO BEGIN
        "Entry No." := '';
        "EAI Partner Code" := pEAIRcvdMQBuffer."EAI Partner Code";
        "EAI Act Type Code":= lEAIAckAct."EAI Act Type Code";
        "EAI Act Code" := lEAIAckAct.Code;
        "Act Priority" := lEAIAckAct."Act Priority";
        "EAI MQ Code" := lEAIMessageQueue."Acknowledge Message Queue";
        "EAI NAS Code" := pEAIRcvdMQBuffer."EAI NAS Code";
        "Message ID" := pEAIRcvdMQBuffer."Message ID";
        "Message Code" := pEAIRcvdMQBuffer."Message Code";
        "Message Version" := pEAIRcvdMQBuffer."Message Version";
        "Message Release" := pEAIRcvdMQBuffer."Message Release";
        "Message Sub-type" := pEAIRcvdMQBuffer."Message Sub-type";
        "Service Header No." := pEAIRcvdMQBuffer."Service Header No.";
        "Service No." := pEAIRcvdMQBuffer."Service No.";
        lEAIMQExchangeType.SETRANGE("EAI MQ Code","EAI MQ Code");
        lEAIMQExchangeType.SETRANGE("EAI Act Type Code","EAI Act Type Code");
        lEAIMQExchangeType.SETRANGE("EAI Act Code","EAI Act Code");
        lEAIMQExchangeType.SETRANGE("EAI Partner Code","EAI Partner Code");
        lEAIMQExchangeType.FINDFIRST;
        "EAI Exchange Type Code" := lEAIMQExchangeType."EAI Exchange Type Code";
        "EAI Process Code" := lEAIMQExchangeType."EAI Process Code";
        Step := Step::Generation;
        "Date Creation" := TODAY;
        "Time Creation" := TIME;
        "User Creation" := USERID;
        RecordId := pEAIRcvdMQBuffer.RecordId;
        xRecordId := pEAIRcvdMQBuffer.xRecordId;
      END;
      IF NOT lEAIMQBufferMgt.SentMessageExists(lEAISentMQBuffer,TRUE) THEN BEGIN
        lEAIMQBufferMgt.CreateSentMQBufferToSentMQ(lEAISentMQBuffer);
      END;
    END;

    BEGIN
    {
      /** @r IMH07 @d 17/07/13 @a ISAT.PC @v IMH6.01.4637 @h 4637 @s Mantis hors version @c Correction */
      /** @r IMH06 @d 06/05/13 @a ISAT.PC @v IMH6.01.222 @s Uniformisation Darva
          @c Ajout fonction AcknowledgementAct issu de la fonction DischargeDocument du codeunit 50150 DARVA Management*/
      /** @r IMH05 @d 29/04/13 @a ISAT.PC @v IMH6.01.222 @s Uniformisation Darva
          @c Gestion des lister document classiquement dans la file de message */
      /** @r IMH04 @d 18/07/12 @a ISAT.RC @v IMH6.01.P006 @s Interface GED */
      /** @r IMH03 @d 25/11/11 @a ISAT.PC @v IMH6.01.136 @s Interface @c Gestion de l'activation des types d'‚change */
      /** @r IMH02 @d 20/04/11 @a ISAT.ZW @v IMH6.01.136 @s Fusion - Interface EDI @c Gestion des types d'‚change Web Service */
      /** @r IMH01 @d 17/03/11 @a ISAT.MA @v IMH6.01.131 @s DARVA - Interface EDI
          @c Gestion des types d'‚change Web Service                              */
      /** @r EAI02 @d 10/08/09 @a ISAT.JR @v ISAEAI5.01.00.00 @s Cr‚ation des messages
          @c On cr‚e en enregistrement dans la table au plus t“t */
      /** @r EAI01 @d 14/02/09 @a ISAT.EB @v ISAEAI5.01.00.00 @s Gestion des r‚pertoires
          @c R‚pertoire histo et erreur */
      /** @r EAI00 @d 01/02/09 @a ISAT.JR @v ISAEAI5.01.00.00 @s Cr‚ation de l'objet */
    }
    END.
  }
}