OBJECT Codeunit 8016727 EAI Rcvd Validation Post Line
{
  OBJECT-PROPERTIES
  {
    Date=02/12/13;
    Time=14:01:32;
    Modified=Yes;
    Version List=ISAEAI1.01,GED,DARVA1.3,SysAgDarva,M4637;
  }
  PROPERTIES
  {
    TableNo=8016721;
    OnRun=VAR
            lEAIRegisterMgt@1100481000 : Codeunit 8016711;
            lRcvdMQBuffer@1100281000 : TEMPORARY Record 8016721;
          BEGIN
            lRcvdMQBuffer := Rec;
            Code(lRcvdMQBuffer);
            Rec := lRcvdMQBuffer;

            lEAIRegisterMgt.UpdateRcvdActRegister("EAI Act Type Code","EAI Act Code",WORKDATE)
          END;

  }
  CODE
  {
    VAR
      Error001@1100281000 : TextConst 'FRA=Aucun CodeUnit de validation pour l''act %1, de type %2.';
      Error002@1180044000 : TextConst 'ENU=EAI Act %1 is not set up to post message.;FRA=L''acte EAI %1 ne se valide pas automatiquement.';
      DARVAMgt@1100281001 : Codeunit 50150;
      Error003@1100281002 : TextConst 'ENU=No EAI Act on flow. Please, check your setup.;FRA=Aucun acte EAI n''est pr‚sent sur le flux. Merci de v‚rifier le param‚trage';

    LOCAL PROCEDURE Code@1100281000(VAR pRcvdMQBuffer@1100281000 : Record 8016721);
    VAR
      lEAIActMgt@1100281002 : Codeunit 8016703;
      lEAIMQBufferMgt@1100481000 : Codeunit 8016708;
      lEAIAct@1180044000 : Record 8016706;
      lEAIActVersion@1180044001 : Record 8016713;
      lEAIExchangeType@1100281003 : Record 8016717;
      lValidationCodeUnitNo@1100281001 : Integer;
    BEGIN
      //On r‚cup‚re le codeunit de g‚n‚ration de l'acte
      IF pRcvdMQBuffer."EAI Act Code" = '' THEN
        pRcvdMQBuffer.FIELDERROR("EAI Act Code",Error003);

      //<<EAI02
      CASE pRcvdMQBuffer.Status OF
        pRcvdMQBuffer.Status::Unprocessed:
          IF (NOT lEAIActMgt.AutoValidate(pRcvdMQBuffer."EAI Act Type Code",pRcvdMQBuffer."EAI Act Code"))
          THEN
            ERROR(Error002,pRcvdMQBuffer."EAI Act Code"); //il faut g‚n‚rer une erreur, sinon le traitement semble avoir r‚ussi...
        pRcvdMQBuffer.Status::Processing,
        pRcvdMQBuffer.Status::Error:
          EXIT;
        pRcvdMQBuffer.Status::"Unit Test":;
      END;
      //>>EAI02

      //<<EAI01
      lEAIActMgt.GetTestActiveEAIActVersion(
         lEAIAct,lEAIActVersion,pRcvdMQBuffer."EAI Act Type Code",pRcvdMQBuffer."EAI Act Code",WORKDATE);
      //>>EAI01

      lValidationCodeUnitNo :=
         lEAIActMgt.GetValidationCodeUnitNo(pRcvdMQBuffer."EAI Act Type Code",pRcvdMQBuffer."EAI Act Code",WORKDATE);

      IF lValidationCodeUnitNo = 0 THEN
        ERROR(Error001,pRcvdMQBuffer."EAI Act Code",pRcvdMQBuffer."EAI Act Type Code");

      lEAIMQBufferMgt.LockCurrentRcvdMQ(pRcvdMQBuffer);
      CODEUNIT.RUN(lValidationCodeUnitNo,pRcvdMQBuffer);

      // <<IMH02.ISAT.MA
      //IF lEAIExchangeType.GET(lEAIExchangeType.Type::Inbound,pRcvdMQBuffer."EAI Exchange Type Code") THEN
      //  IF lEAIExchangeType."Bus Type" = lEAIExchangeType."Bus Type"::"Web service" THEN
      //    DARVAMgt.DischargeDocument(pRcvdMQBuffer,1);
      // >>IMH02.ISAT.MA
    END;

    PROCEDURE ValidateRcvdMQLine@1100281001(VAR pRcvdMQBuffer@1100281000 : Record 8016721);
    VAR
      lEAIMQBufferMgt@1100281002 : Codeunit 8016708;
      lStepAcq@1100281001 : Integer;
      lEAIExchangeType@1100281003 : Record 8016717;
    BEGIN
      //IMH01 isat.zw centraliser code pour fonction PostUnit de talbes RcvdEQ
      //Traitement du message
      COMMIT; //n‚cessaire afin de r‚cuperer la valeur de retour de CodeUnit.RUN
      //<<GMS01
      CASE pRcvdMQBuffer.Step OF
        pRcvdMQBuffer.Step::Generation :
          IF CODEUNIT.RUN(CODEUNIT::"EAI Rcvd Generation Post Line",pRcvdMQBuffer) THEN BEGIN
            //<<IMH02.PC
            //pRcvdMQBuffer.Step := pRcvdMQBuffer.Step::g;
            //pRcvdMQBuffer.Status := pRcvdMQBuffer.Status::pro;
            pRcvdMQBuffer.Step := pRcvdMQBuffer.Step::Validation;
            pRcvdMQBuffer.Status := pRcvdMQBuffer.Status::Unprocessed;
            //>>IMH02.PC
            pRcvdMQBuffer.MODIFY;
          END ELSE BEGIN
            pRcvdMQBuffer."Comment Status" := COPYSTR(GETLASTERRORTEXT,1,250);
            pRcvdMQBuffer.Status := pRcvdMQBuffer.Status::Error;
            pRcvdMQBuffer.MODIFY;
            CLEARLASTERROR;
          END;
        pRcvdMQBuffer.Step::Validation :
      //>>GMS01
          IF CODEUNIT.RUN(CODEUNIT::"EAI Rcvd Validation Post Line",pRcvdMQBuffer) THEN BEGIN
            //<<IMH02.PC
            //pRcvdMQBuffer.Step := pRcvdMQBuffer.Step::Validation;
            //>>IMH02.PC
            //<<IMH04.PC
            //pRcvdMQBuffer.Status := pRcvdMQBuffer.Status::Processing;
            IF pRcvdMQBuffer."Not Change Status" THEN BEGIN
              pRcvdMQBuffer."Not Change Status" := FALSE;
            END ELSE BEGIN
              pRcvdMQBuffer.Status := pRcvdMQBuffer.Status::Processing;
            END;
            //>>IMH04.PC
            pRcvdMQBuffer.MODIFY;
            lStepAcq := 1;
            //<<IMH03.PC
            IF pRcvdMQBuffer.Status = pRcvdMQBuffer.Status::Processing THEN BEGIN
              AcknowledgementAct(pRcvdMQBuffer);
            END;
            //>>IMH03.PC
          END ELSE BEGIN
            //<<IMH04.PC
            pRcvdMQBuffer."Not Change Status" := FALSE;
            //>>IMH04.PC
            pRcvdMQBuffer."Comment Status" := COPYSTR(GETLASTERRORTEXT,1,250);
            pRcvdMQBuffer.Status := pRcvdMQBuffer.Status::Error;
            pRcvdMQBuffer.MODIFY;
            CLEARLASTERROR;
          END;
      //<<GMS01
      END;
      //>>GMS01

      //<<IMH03.PC
      // <<IMH02.ISAT.MA
      //IF lEAIExchangeType.GET(lEAIExchangeType.Type::Inbound,pRcvdMQBuffer."EAI Exchange Type Code") THEN
      //  IF lEAIExchangeType."Bus Type" = lEAIExchangeType."Bus Type"::"Web service" THEN
      //    DARVAMgt.AcknowledgementAct(pRcvdMQBuffer,1);
      //>>IMH02.ISAT.MA
      //>>IMH03.PC

      //On enregistre le Buffer
      lEAIMQBufferMgt.TransferRcvdMQBufferToRcvdMQ(pRcvdMQBuffer);
    END;

    LOCAL PROCEDURE AcknowledgementAct@1100281002(VAR pEAIRcvdMQBuffer@1100281000 : Record 8016721);
    VAR
      lEAIMessageQueue@1000000000 : Record 8016704;
      lEAISentMQBuffer@1000000001 : TEMPORARY Record 8016720;
      lEAIAct@1100281002 : Record 8016706;
      lEAIAckAct@1100281003 : Record 8016706;
      lEAIMQExchangeType@1100281004 : Record 8016719;
      lEAIMQBufferMgt@1100281001 : Codeunit 8016708;
    BEGIN
      // IMH03.PC
      lEAIMessageQueue.GET(pEAIRcvdMQBuffer."EAI MQ Code");
      //<<IMH06.PC
      //lEAIMessageQueue.testfield("Acknowledge Message Queue");
      IF lEAIMessageQueue."Acknowledge Message Queue" = '' THEN BEGIN
        EXIT;
      END;
      //>>IMH06.PC

      lEAIAct.GET(pEAIRcvdMQBuffer."EAI Act Type Code", pEAIRcvdMQBuffer."EAI Act Code");
      IF NOT lEAIAct."Acknowledge Enable" THEN BEGIN
        EXIT;
      END;

      IF lEAIAct."Acknowledgment Status" <> lEAIAct."Acknowledgment Status"::Posting THEN BEGIN
        EXIT;
      END;

      lEAIAckAct.GET(lEAIAct."Ack. Act Type Code",lEAIAct."Ack. Act Code");
      WITH lEAISentMQBuffer DO BEGIN
        "Entry No." := '';
        "EAI Partner Code" := pEAIRcvdMQBuffer."EAI Partner Code";
        "EAI Act Type Code":= lEAIAckAct."EAI Act Type Code";
        "EAI Act Code" := lEAIAckAct.Code;
        "Act Priority" := lEAIAckAct."Act Priority";
        "EAI MQ Code" := lEAIMessageQueue."Acknowledge Message Queue";
        "EAI NAS Code" := pEAIRcvdMQBuffer."EAI NAS Code";
        "Message ID" := pEAIRcvdMQBuffer."Message ID";
        "Message Code" := pEAIRcvdMQBuffer."Message Code";
        "Message Version" := pEAIRcvdMQBuffer."Message Version";
        "Message Release" := pEAIRcvdMQBuffer."Message Release";
        "Message Sub-type" := pEAIRcvdMQBuffer."Message Sub-type";
        "Service Header No." := pEAIRcvdMQBuffer."Service Header No.";
        "Service No." := pEAIRcvdMQBuffer."Service No.";
        lEAIMQExchangeType.SETRANGE("EAI MQ Code","EAI MQ Code");
        lEAIMQExchangeType.SETRANGE("EAI Act Type Code","EAI Act Type Code");
        lEAIMQExchangeType.SETRANGE("EAI Act Code","EAI Act Code");
        lEAIMQExchangeType.SETRANGE("EAI Partner Code","EAI Partner Code");
        lEAIMQExchangeType.FINDFIRST;
        "EAI Exchange Type Code" := lEAIMQExchangeType."EAI Exchange Type Code";
        "EAI Process Code" := lEAIMQExchangeType."EAI Process Code";
        Step := Step::Generation;
        "Date Creation" := TODAY;
        "Time Creation" := TIME;
        "User Creation" := USERID;
        RecordId := pEAIRcvdMQBuffer.RecordId;
        xRecordId := pEAIRcvdMQBuffer.xRecordId;
      END;
      IF NOT lEAIMQBufferMgt.SentMessageExists(lEAISentMQBuffer,TRUE) THEN BEGIN
        lEAIMQBufferMgt.CreateSentMQBufferToSentMQ(lEAISentMQBuffer);
      END;
    END;

    BEGIN
    {
      /** @r IMH06 @d 17/07/13 @a ISAT.PC @v IMH6.01.4637 @h 4637 @s Mantis hors version @c Correction */
      /** @r IMH05 @d 11/07/13 @a ISAT.PC @v IMH6.01.350 @s Aiguillage Darva @c Ajout de Error003 */
      /** @r IMH04 @d 22/05/13 @a ISAT.PC @v IMH6.01.222 @s Uniformisation Darva @c Gestion pour laisser le flux en non trait‚ */
      /** @r IMH03 @d 06/05/13 @a ISAT.PC @v IMH6.01.222 @s Uniformisation Darva
          @c Ajout fonction AcknowledgementAct issu de la fonction DischargeDocument du codeunit 50150 DARVA Management*/
      /** @r IMH02 @d 05/09/12 @a ISAT.PC @v IMH6.01.P006 @s Interface GED @c Correction */
      /** @r IHM01 @d 06/01/11 @a ISAT.ZW @v IMH6.01.131 @s Interface EAI @c Ajout fonction ValidateRcvdMQLine */
      /** @r EAI01 @d 24/10/09 @a ISAT.JR @v ISAEAI5.01.00.00 @s Test sur status=active */
      /** @r EAI00 @d 01/02/09 @a ISAT.JR @v ISAEAI5.01.00.00 @s Cr‚ation de l'objet */
    }
    END.
  }
}