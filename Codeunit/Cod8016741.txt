OBJECT Codeunit 8016741 EAI Sent EDI Generation Post
{
  OBJECT-PROPERTIES
  {
    Date=23/10/13;
    Time=15:08:38;
    Modified=Yes;
    Version List=ISAEAI1.00,MATMUT01;
  }
  PROPERTIES
  {
    TableNo=8016704;
    SingleInstance=Yes;
    OnRun=VAR
            lText000@1100481000 : TextConst 'ENU=%1 - %2 : Sending Message Queue Generating Handler started;FRA=%1 - %2 : D‚marrage du handler de g‚n‚ration de la file d''‚mission';
          BEGIN
            IF "Table No." = 0 THEN
              EXIT;
            IF Type <> Type::Sending THEN
              EXIT;

            CurrentMessageQueue := Rec;
            RunTimer;

            MESSAGE(lText000,CurrentMessageQueue."EAI NAS Code",CurrentMessageQueue.Code);
          END;

  }
  CODE
  {
    VAR
      EAILogMgt@1100281004 : Codeunit 8016711;
      EAIMQMgt@1100281003 : Codeunit 8016704;
      CurrentMessageQueue@1100281001 : Record 8016704;
      GenerationTimer@1100281002 : Automation "{3B311C81-140E-11D5-8B18-00D0590B4EC5} 1.0:{3B311C92-140E-11D5-8B18-00D0590B4EC5}:'Navision Timer 1.0'.Timer" WITHEVENTS;
      IsRunning@1100281000 : Boolean;
      Text001@1100481000 : TextConst 'ENU=%1 messages have been hanlded.;FRA=%1 messages ont ‚t‚ int‚gr‚s.';

    PROCEDURE MessageQueueLoop@1100281001();
    VAR
      lEAIMQBufferMgt@1100281002 : Codeunit 8016708;
      lSentMQPostLine@1100281000 : Codeunit 8016732;
      lSentMQBuffer@1100281001 : TEMPORARY Record 8016720;
      lRecRef@1100481000 : RecordRef;
      lNbMsg@1100281003 : Integer;
      lCountMsg@1100281004 : Integer;
    BEGIN
      lEAIMQBufferMgt.SetFilterAndKeyOnSendMQ(
         lRecRef,CurrentMessageQueue,lSentMQBuffer.Step::Generation,lSentMQBuffer.Status::Unprocessed);

      //On limite le nombre de message trait‚ en mˆme temps
      lNbMsg := CurrentMessageQueue."Max MQ Number per Loop";
      IF lNbMsg = 0 THEN
        lNbMsg := 50;

      //EAI02 lRecRef.LOCKTABLE;
      IF lRecRef.FINDSET(FALSE,FALSE) THEN BEGIN
        REPEAT
          //On passe par un Buffer
          lEAIMQBufferMgt.TransferRecRefToSendMQBuffer(lRecRef,lSentMQBuffer);

          //Traitement du message
          MessageQueuePost(lSentMQBuffer);

          //On enregistre le Buffer
          lEAIMQBufferMgt.TransferSendMQBufferToSendMQ(lSentMQBuffer);

          COMMIT;

          lCountMsg += 1;

        UNTIL (lRecRef.NEXT=0) OR (lCountMsg=lNbMsg);

        EAILogMgt.AddInfoToSentLog(CurrentMessageQueue.Code,'','','','',STRSUBSTNO(Text001,FORMAT(lCountMsg)));

      END;
    END;

    PROCEDURE MessageQueuePost@1100481000(VAR pSendMQBuffer@1100281001 : Record 8016720);
    VAR
      lDARVASetup@1000000000 : Record 50126;
      lSDR64Managment@1000000001 : Codeunit 50210;
      lInterfaceReference@1000000002 : Record 50164;
      lServiceInterventionLine@1000000004 : Record 50075;
      lRecRef@1000000003 : RecordRef;
      lDARVAMgt@1000000005 : Codeunit 50150;
      lType@1000000006 : ' ,SD64,SD99';
    BEGIN
      COMMIT; //N‚cessaire pour lancer le CodeUnit.Run avec valeur de retour (gestion des erreurs)
      IF CODEUNIT.RUN(CODEUNIT::"EAI Sent Generation Post Line",pSendMQBuffer) THEN BEGIN
        pSendMQBuffer.Step := pSendMQBuffer.Step::Validation;
        pSendMQBuffer.Status := pSendMQBuffer.Status::Unprocessed;
        pSendMQBuffer.MODIFY;
        //<<IMH01.ACO
        //<<IMH02.ACO
        //lDARVAMgt.GetEAIActSendDARVAType(pSendMQBuffer,lType,lRecRef);
        lDARVAMgt.GetEAIActSendDARVAType(pSendMQBuffer,lType);
        //>>IMH02.ACO
        IF lType = lType::SD64 THEN BEGIN
          //<<IMH02.ACO
          //lSDR64Managment.ChangeSendStatusIntervention(lRecRef,lInterfaceReference."Send Status"::Generated);
          lSDR64Managment.ChangeSendStatusIntervention(lInterfaceReference."Send Status"::Generated,pSendMQBuffer);
          //>>IMH02.ACO
        END;
        //>>IMH01.ACO
      END ELSE BEGIN
        pSendMQBuffer."Comment Status" := COPYSTR(GETLASTERRORTEXT,1,250);
        pSendMQBuffer.Status := pSendMQBuffer.Status::Error;
        pSendMQBuffer.MODIFY;

        //<<IMH01.ACO
        //<<IMH02.ACO
        //lDARVAMgt.GetEAIActSendDARVAType(pSendMQBuffer,lType,lRecRef);
        lDARVAMgt.GetEAIActSendDARVAType(pSendMQBuffer,lType);
        //>>IMH02.ACO
        IF lType = lType::SD64 THEN BEGIN
          //<<IMH02.ACO
          //lSDR64Managment.ChangeSendStatusIntervention(lRecRef,lInterfaceReference."Send Status"::"Generation Error");
          lSDR64Managment.ChangeSendStatusIntervention(lInterfaceReference."Send Status"::"Generation Error", pSendMQBuffer);
          //>>IMH02.ACO
          END;
        //>>IMH01.ACO
        CLEARLASTERROR;
      END;
    END;

    PROCEDURE RunTimer@1100281003();
    BEGIN
      IF CurrentMessageQueue."Timer Interval"=0 THEN
        CurrentMessageQueue."Timer Interval" := 60;

      IF ISCLEAR(GenerationTimer) THEN
        CREATE(GenerationTimer);

      GenerationTimer.Interval(CurrentMessageQueue."Timer Interval" * 1000);
      GenerationTimer.Enabled(TRUE);
    END;

    EVENT GenerationTimer@1100281002::Timer@1(Milliseconds@1100281000 : Integer);
    BEGIN
      IF NOT IsRunning THEN BEGIN
        IsRunning := TRUE;
        SELECTLATESTVERSION;
        MessageQueueLoop;
        IsRunning := FALSE;
        COMMIT;
      END;
    END;

    EVENT GenerationTimer@1100281002::TimerError@2(ErrorString@1100281000 : Text[1024]);
    BEGIN
      //ERROR HANDLING : TODO

      EAILogMgt.AddErrorToSentLog(CurrentMessageQueue.Code,'','','','',COPYSTR(ErrorString,1,250));

      IsRunning := FALSE;
      RunTimer;
    END;

    BEGIN
    {
      /** @r IMH02 @d 23/10/13 @a ISAT.ACO @v IMH6.01.348 @h 4804 @s DARVA MATMUT Lot 1
          @c Modification test sur type flux */
      /** @r IMH01 @d 22/10/13 @a ISAT.ACO @v IMH6.01.348 @h 4804 @s DARVA MATMUT Lot 1
          @c Ajout Mise … jour statut ‚mission SDR64 */
      /** @r EAI02 @d 09/09/10 @a ISAT.JR @v ISAEAI5.01.00.00 @s Moteur EAI @c plus de verrou pour limiter les deadlock */
      /** @r EAI01 @d 14/02/09 @a ISAT.EB @v ISAEAI5.01.00.00 @s Lancement des handlers
          @c Handlers non single instance
          @c Ajout message de lancement pour l'observateur d'‚vŠnements */
      /** @r EAI00 @d 01/02/09 @a ISAT.JR @v ISAEAI5.01.00.00 @s Cr‚ation de l'objet */
    }
    END.
  }
}