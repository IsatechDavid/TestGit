OBJECT Codeunit 8016744 EAI Rcvd EDI Validation Post
{
  OBJECT-PROPERTIES
  {
    Date=02/12/13;
    Time=14:01:47;
    Modified=Yes;
    Version List=ISAEAI1.01,DARVA1.3,SysAgDarva,M4637;
  }
  PROPERTIES
  {
    TableNo=8016704;
    SingleInstance=Yes;
    OnRun=VAR
            lText000@1100481000 : TextConst 'ENU=%1 - %2 : Receiving Message Queue %1 Posting Handler started;FRA=%1 - %2 : D‚marrage du handler de validation de la file de r‚ception';
          BEGIN
            IF "Table No." = 0 THEN
              EXIT;
            IF Type <> Type::Receiving THEN
              EXIT;

            CurrentMessageQueue := Rec;
            RunTimer;

            MESSAGE(lText000,CurrentMessageQueue."EAI NAS Code",CurrentMessageQueue.Code);
          END;

  }
  CODE
  {
    VAR
      EAILogMgt@1100281004 : Codeunit 8016711;
      EAIMQMgt@1100281003 : Codeunit 8016704;
      CurrentMessageQueue@1100281001 : Record 8016704;
      ValidationTimer@1100281002 : Automation "{3B311C81-140E-11D5-8B18-00D0590B4EC5} 1.0:{3B311C92-140E-11D5-8B18-00D0590B4EC5}:'Navision Timer 1.0'.Timer" WITHEVENTS;
      IsRunning@1100281000 : Boolean;
      Text001@1100481000 : TextConst 'ENU=%1 messages have been hanlded.;FRA=%1 messages ont ‚t‚ int‚gr‚s.';
      DARVAMgt@1100281005 : Codeunit 50150;
      Error002@1100281007 : TextConst 'ENU=EAI Act %1 is not set up to post message or no generate/validate codeunit filled;FRA=L''acte EAI %1 ne se valide pas automatiquement ou pas de codeunit (g‚n‚ration ou validation) de d‚finit';
      Error003@1100281006 : TextConst 'ENU=No EAI Act on flow. Please, check your setup.;FRA=Aucun acte EAI n''est pr‚sent sur le flux. Merci de v‚rifier le param‚trage';

    PROCEDURE MessageQueueLoop@1100281001();
    VAR
      lEAIMQBufferMgt@1100481002 : Codeunit 8016708;
      lEAIActMgt@1180044000 : Codeunit 8016703;
      lRcvdMQBuffer@1100481001 : TEMPORARY Record 8016721;
      lRecRef@1100481000 : RecordRef;
      lNbMsg@1100281000 : Integer;
      lCountMsg@1100281001 : Integer;
    BEGIN
      //Traitement des messages

      lEAIMQBufferMgt.SetFilterAndKeyOnRcvdMQ(
        lRecRef,CurrentMessageQueue,lRcvdMQBuffer.Step::Validation,lRcvdMQBuffer.Status::Unprocessed);

      //On limite le nombre de message trait‚ en mˆme temps
      lNbMsg := CurrentMessageQueue."Max MQ Number per Loop";
      IF lNbMsg = 0 THEN
        lNbMsg := 50;

      //EAI02 lRecRef.LOCKTABLE;
      IF lRecRef.FINDSET(FALSE,FALSE) THEN BEGIN
        REPEAT
          //On passe par un Buffer
          lEAIMQBufferMgt.TransferRecRefToRcvdMQBuffer(lRecRef,lRcvdMQBuffer);

          //Traitement unitaire
          IF lEAIActMgt.AutoValidate(lRcvdMQBuffer."EAI Act Type Code",lRcvdMQBuffer."EAI Act Code") THEN BEGIN
            MessageQueuePost(lRcvdMQBuffer);
          //<<IMH05.PC
          END ELSE BEGIN
            IF lRcvdMQBuffer."EAI Act Code" = '' THEN BEGIN
              lRcvdMQBuffer."Comment Status" := COPYSTR(Error003,1,250);
            END ELSE BEGIN
              lRcvdMQBuffer."Comment Status" := COPYSTR(Error002,1,250);
            END;
            lRcvdMQBuffer.Status := lRcvdMQBuffer.Status::Error;
            lRcvdMQBuffer.MODIFY;
          END;
          //>>IMH05.PC

          //On enregistre le Buffer
          lEAIMQBufferMgt.TransferRcvdMQBufferToRcvdMQ(lRcvdMQBuffer);

          COMMIT;

          lCountMsg += 1;

        UNTIL (lRecRef.NEXT=0) OR (lCountMsg=lNbMsg);

        EAILogMgt.AddInfoToRcvdLog(CurrentMessageQueue.Code,'','','','',STRSUBSTNO(Text001,FORMAT(lCountMsg)));

      END;
    END;

    PROCEDURE MessageQueuePost@1100281002(VAR pRcvdMQBuffer@1100281001 : Record 8016721);
    VAR
      lEAIExchangeType@1100281000 : Record 8016717;
      lStepAcq@1100281002 : Integer;
    BEGIN
      COMMIT; //N‚cessaire pour lancer le CodeUnit.Run avec valeur de retour (gestion des erreurs)
      IF CODEUNIT.RUN(CODEUNIT::"EAI Rcvd Validation Post Line",pRcvdMQBuffer) THEN BEGIN
        pRcvdMQBuffer.Step := pRcvdMQBuffer.Step::Validation;
        //<<IMH03.PC
        //pRcvdMQBuffer.Status := pRcvdMQBuffer.Status::Processing;
        IF pRcvdMQBuffer."Not Change Status" THEN BEGIN
          pRcvdMQBuffer."Not Change Status" := FALSE;
        END ELSE BEGIN
          pRcvdMQBuffer.Status := pRcvdMQBuffer.Status::Processing;
        END;
        //>>IMH03.PC
        pRcvdMQBuffer.MODIFY;
        //<<IMH03.PC
        IF pRcvdMQBuffer.Status = pRcvdMQBuffer.Status::Processing THEN BEGIN
          AcknowledgementAct(pRcvdMQBuffer);
        END;
        //>>IMH03.PC
      END ELSE BEGIN
        //<<IMH03.PC
        IF pRcvdMQBuffer."Not Change Status" THEN BEGIN
          pRcvdMQBuffer."Not Change Status" := FALSE;
        END;
        //>>IMH03.PC
        pRcvdMQBuffer."Comment Status" := COPYSTR(GETLASTERRORTEXT,1,250);
        pRcvdMQBuffer.Status := pRcvdMQBuffer.Status::Error;
        pRcvdMQBuffer.MODIFY;
        CLEARLASTERROR;
      END;

      //<<IMH01.PC
      // <<IMH02.ISAT.MA
      //IF lEAIExchangeType.GET(lEAIExchangeType.Type::Inbound,pRcvdMQBuffer."EAI Exchange Type Code") THEN
      //  IF lEAIExchangeType."Bus Type" = lEAIExchangeType."Bus Type"::"Web service" THEN
      //    DARVAMgt.AcknowledgeAct(pRcvdMQBuffer,1);
      // >>IMH02.ISAT.MA
      //>>IMH01.PC
    END;

    PROCEDURE MessageQueueDelete@1100481009();
    VAR
      lEAIRcvdMQBuffer@1000000003 : TEMPORARY Record 8016721;
      lEAIAct@1000000001 : Record 8016706;
      lEAIActMgt@1000000000 : Codeunit 8016703;
      lEAIMQBufferMgt@1100281002 : Codeunit 8016708;
      lRecRef@1100481000 : RecordRef;
      lArchiveOK@1000000002 : Boolean;
      lEAIActToCheck@1000000004 : Code[20];
    BEGIN
      //Suppression / Archivage des messages

      lEAIMQBufferMgt.SetFilterAndKeyOnRcvdMQ(
        lRecRef,CurrentMessageQueue,lEAIRcvdMQBuffer.Step::Validation,lEAIRcvdMQBuffer.Status::Processing);

      lRecRef.LOCKTABLE;
      IF lRecRef.FINDSET(FALSE,FALSE) THEN BEGIN
        REPEAT
          //On passe par un Buffer
          lEAIMQBufferMgt.TransferRecRefToRcvdMQBuffer(lRecRef,lEAIRcvdMQBuffer);

          //<<IMH02.PC
          //Traitement unitaire
          //lEAIMQBufferMgt.TransferRcvdMQBufferToHistoMQ(lRcvdMQBuffer);
          lArchiveOK := FALSE;
          lEAIActToCheck := '';
          lEAIAct.GET(lEAIRcvdMQBuffer."EAI Act Type Code",lEAIRcvdMQBuffer."EAI Act Code");
          IF lEAIAct."Wait Initial Act To Archive" THEN BEGIN
            //<<IMH04.ACO
            //lEAIActToCheck :=
            //  lEAIActMgt.GetEAIActCode(
            //    lEAIRcvdMQBuffer."EAI Act Type Code",'',
            //    lEAIRcvdMQBuffer."Message Code" + lEAIRcvdMQBuffer."Message Version" + lEAIRcvdMQBuffer."Message Release",
            //    lEAIRcvdMQBuffer."Message Sub-type");
            lEAIActToCheck := lEAIRcvdMQBuffer."Origin EAI Act Code";
            //>>IMH04.ACO
            IF lEAIActToCheck = '' THEN BEGIN
              lArchiveOK := TRUE;
            END ELSE BEGIN
              // pStep : 0 = Generate / 1 = Validation
              // pStatus : 0 = Non trait‚ / 1 = Trait‚ / 2 = Erreur / 3 = Test unitaire
              IF NOT lEAIMQBufferMgt.CheckIfActExistsToNextAct(
                   lEAIRcvdMQBuffer,
                   TRUE,lEAIRcvdMQBuffer."EAI Act Type Code",lEAIActToCheck,
                   FALSE,0,FALSE,0)
              THEN BEGIN
                lArchiveOK := TRUE;
              END ELSE BEGIN
                IF lEAIMQBufferMgt.CheckIfActExistsToNextAct(
                     lEAIRcvdMQBuffer,
                     TRUE,lEAIRcvdMQBuffer."EAI Act Type Code",lEAIActToCheck,
                     TRUE,1,TRUE,1)
                THEN BEGIN
                  lArchiveOK := TRUE;
                END;
              END;
            END;
          END ELSE BEGIN
            lArchiveOK := TRUE;
          END;
          IF lArchiveOK THEN BEGIN
          //>>IMH02.PC
            //Traitement unitaire
            lEAIMQBufferMgt.TransferRcvdMQBufferToHistoMQ(lEAIRcvdMQBuffer);
          END;
        UNTIL lRecRef.NEXT=0;
      END;
    END;

    PROCEDURE RunTimer@1100281003();
    BEGIN
      IF CurrentMessageQueue."Timer Interval"=0 THEN
        CurrentMessageQueue."Timer Interval" := 60;

      IF ISCLEAR(ValidationTimer) THEN
        CREATE(ValidationTimer);

      ValidationTimer.Interval(CurrentMessageQueue."Timer Interval" * 1000);
      ValidationTimer.Enabled(TRUE);
    END;

    LOCAL PROCEDURE AcknowledgementAct@1100281000(VAR pEAIRcvdMQBuffer@1100281000 : Record 8016721);
    VAR
      lEAIMessageQueue@1000000000 : Record 8016704;
      lEAISentMQBuffer@1000000001 : TEMPORARY Record 8016720;
      lEAIAct@1100281002 : Record 8016706;
      lEAIAckAct@1100281003 : Record 8016706;
      lEAIMQExchangeType@1100281004 : Record 8016719;
      lEAIMQBufferMgt@1100281001 : Codeunit 8016708;
    BEGIN
      // IMH03.PC
      lEAIMessageQueue.GET(pEAIRcvdMQBuffer."EAI MQ Code");
      //<<IMH06.PC
      //lEAIMessageQueue.testfield("Acknowledge Message Queue");
      IF lEAIMessageQueue."Acknowledge Message Queue" = '' THEN BEGIN
        EXIT;
      END;
      //>>IMH06.PC

      lEAIAct.GET(pEAIRcvdMQBuffer."EAI Act Type Code", pEAIRcvdMQBuffer."EAI Act Code");
      IF NOT lEAIAct."Acknowledge Enable" THEN BEGIN
        EXIT;
      END;

      IF lEAIAct."Acknowledgment Status" <> lEAIAct."Acknowledgment Status"::Posting THEN BEGIN
        EXIT;
      END;

      lEAIAckAct.GET(lEAIAct."Ack. Act Type Code",lEAIAct."Ack. Act Code");
      WITH lEAISentMQBuffer DO BEGIN
        "Entry No." := '';
        "EAI Partner Code" := pEAIRcvdMQBuffer."EAI Partner Code";
        "EAI Act Type Code":= lEAIAckAct."EAI Act Type Code";
        "EAI Act Code" := lEAIAckAct.Code;
        "Act Priority" := lEAIAckAct."Act Priority";
        "EAI MQ Code" := lEAIMessageQueue."Acknowledge Message Queue";
        "EAI NAS Code" := pEAIRcvdMQBuffer."EAI NAS Code";
        "Message ID" := pEAIRcvdMQBuffer."Message ID";
        "Message Code" := pEAIRcvdMQBuffer."Message Code";
        "Message Version" := pEAIRcvdMQBuffer."Message Version";
        "Message Release" := pEAIRcvdMQBuffer."Message Release";
        "Message Sub-type" := pEAIRcvdMQBuffer."Message Sub-type";
        "Service Header No." := pEAIRcvdMQBuffer."Service Header No.";
        "Service No." := pEAIRcvdMQBuffer."Service No.";
        lEAIMQExchangeType.SETRANGE("EAI MQ Code","EAI MQ Code");
        lEAIMQExchangeType.SETRANGE("EAI Act Type Code","EAI Act Type Code");
        lEAIMQExchangeType.SETRANGE("EAI Act Code","EAI Act Code");
        lEAIMQExchangeType.SETRANGE("EAI Partner Code","EAI Partner Code");
        lEAIMQExchangeType.FINDFIRST;
        "EAI Exchange Type Code" := lEAIMQExchangeType."EAI Exchange Type Code";
        "EAI Process Code" := lEAIMQExchangeType."EAI Process Code";
        Step := Step::Generation;
        "Date Creation" := TODAY;
        "Time Creation" := TIME;
        "User Creation" := USERID;
        RecordId := pEAIRcvdMQBuffer.RecordId;
        xRecordId := pEAIRcvdMQBuffer.xRecordId;
      END;
      IF NOT lEAIMQBufferMgt.SentMessageExists(lEAISentMQBuffer,TRUE) THEN BEGIN
        lEAIMQBufferMgt.CreateSentMQBufferToSentMQ(lEAISentMQBuffer);
      END;
    END;

    EVENT ValidationTimer@1100281002::Timer@1(Milliseconds@1100281000 : Integer);
    BEGIN
      IF NOT IsRunning THEN BEGIN
        IsRunning := TRUE;
        SELECTLATESTVERSION;
        MessageQueueLoop;
        MessageQueueDelete;
        IsRunning := FALSE;
        COMMIT;
      END;
    END;

    EVENT ValidationTimer@1100281002::TimerError@2(ErrorString@1100281000 : Text[1024]);
    BEGIN
      //ERROR HANDLING : TODO

      EAILogMgt.AddErrorToRcvdLog(CurrentMessageQueue.Code,'','','','',COPYSTR(ErrorString,1,250));

      IsRunning := FALSE;
      RunTimer;
    END;

    BEGIN
    {
      /** @r IMH06 @d 17/07/13 @a ISAT.PC @v IMH6.01.4637 @h 4637 @s Mantis hors version @c Correction */
      /** @r IMH05 @d 11/07/13 @a ISAT.PC @v IMH6.01.350 @s Aiguillage Darva @c Ajout des erreurs sur le non post Error002 & Error003 */
      /** @r IMH04 @d 25/06/13 @a ISAT.ACO @v IMH6.01.350 @s SystŠme d'aiguillage @c R‚cup‚ration du code acte EAI du flux d'origine */
      /** @r IMH03 @d 22/05/13 @a ISAT.PC @v IMH6.01.222 @s Uniformisation Darva @c Gestion pour laisser le flux en non trait‚ */
      /** @r IMH02 @d 15/05/13 @a ISAT.PC @v IMH6.01.222 @s Uniformisation Darva
          @c Gestion du non archivage tant que le flux originel n'a pas ‚t‚ valid‚ */
      /** @r IMH01 @d 29/04/13 @a ISAT.PC @v IMH6.01.222 @s Uniformisation Darva @c D‚sactivation gestion de l'acquittement */
      /** @r EAI02 @d 09/09/10 @a ISAT.JR @v ISAEAI5.01.00.00 @s Moteur EAI @c plus de verrou pour limiter les deadlock */
      /** @r EAI01 @d 14/02/09 @a ISAT.EB @v ISAEAI5.01.00.00 @s Lancement des handlers
          @c Handlers non single instance
          @c Ajout message de lancement pour l'observateur d'‚vŠnements */
      /** @r EAI00 @d 01/02/09 @a ISAT.JR @v ISAEAI5.01.00.00 @s Cr‚ation de l'objet */
    }
    END.
  }
}