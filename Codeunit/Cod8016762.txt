OBJECT Codeunit 8016762 EAI Rcvd EDM Generation Post
{
  OBJECT-PROPERTIES
  {
    Date=02/12/13;
    Time=14:00:00;
    Modified=Yes;
    Version List=IMH6.01,GED,M4637;
  }
  PROPERTIES
  {
    TableNo=8016704;
    SingleInstance=Yes;
    OnRun=VAR
            lText000@1100481000 : TextConst 'ENU=%1 - %2 : Receiving Message Queue Generating Handler started;FRA=%1 - %2 : D‚marrage du handler de g‚n‚ration de la file de r‚ception';
          BEGIN
            IF "Table No." = 0 THEN
              EXIT;
            IF Type <> Type::Receiving THEN
              EXIT;

            CurrentMessageQueue := Rec;
            RunTimer;

            MESSAGE(lText000,CurrentMessageQueue."EAI NAS Code",CurrentMessageQueue.Code);
          END;

  }
  CODE
  {
    VAR
      EAILogMgt@1100281004 : Codeunit 8016711;
      CurrentMessageQueue@1100281001 : Record 8016704;
      GenerationTimer@1100281002 : Automation "{3B311C81-140E-11D5-8B18-00D0590B4EC5} 1.0:{3B311C92-140E-11D5-8B18-00D0590B4EC5}:'Navision Timer 1.0'.Timer" WITHEVENTS;
      IsRunning@1100281000 : Boolean;
      i@1100481000 : Integer;
      Text001@1100481001 : TextConst 'ENU=%1 messages have been hanlded.;FRA=%1 messages ont ‚t‚ int‚gr‚s.';

    PROCEDURE ExchangeTypeLoop@1100281001();
    VAR
      lEAIMQExchangeType@1100281000 : Record 8016719;
    BEGIN
      lEAIMQExchangeType.SETCURRENTKEY("EAI MQ Code");
      lEAIMQExchangeType.SETRANGE("EAI MQ Code",CurrentMessageQueue.Code);
      IF lEAIMQExchangeType.FINDSET(FALSE,FALSE) THEN BEGIN
       ExchangeTypePostLine(lEAIMQExchangeType);
      END;
    END;

    PROCEDURE ExchangeTypePostLine@1100281002(VAR pEAIMQExchangeType@1100281001 : Record 8016719);
    VAR
      lNewRcvdMQBuffer@1100281002 : TEMPORARY Record 8016721;
      lText000@1100481000 : TextConst 'ENU=%1 error CU %2 : %3.;FRA=%1 erreur CU %2 : %3.';
    BEGIN
      lNewRcvdMQBuffer."EAI MQ Code"  := CurrentMessageQueue.Code;
      lNewRcvdMQBuffer."EAI NAS Code" := CurrentMessageQueue."EAI NAS Code";
      lNewRcvdMQBuffer."EAI Exchange Type Code" := pEAIMQExchangeType."EAI Exchange Type Code";
      lNewRcvdMQBuffer."EAI MQ Code" := pEAIMQExchangeType."EAI MQ Code";
      IF NOT CODEUNIT.RUN(CODEUNIT::"EAI Rcvd Generation Act",lNewRcvdMQBuffer) THEN BEGIN
        //Message erreur
        EAILogMgt.AddErrorToRcvdLog(CurrentMessageQueue.Code,'','','','',COPYSTR(GETLASTERRORTEXT,1,250));
      END;
    END;

    PROCEDURE MessageQueueLoop@1100481003();
    VAR
      lEAIMQBufferMgt@1100481002 : Codeunit 8016708;
      lRcvdMQBuffer@1100481001 : TEMPORARY Record 8016721;
      lRecRef@1100481000 : RecordRef;
      lNbMsg@1100281000 : Integer;
      lCountMsg@1100281001 : Integer;
      lEAIActMgt@1100281002 : Codeunit 8016703;
    BEGIN
      lEAIMQBufferMgt.SetFilterAndKeyOnRcvdMQ(
        lRecRef,CurrentMessageQueue,lRcvdMQBuffer.Step::Generation,lRcvdMQBuffer.Status::Unprocessed);

      //On limite le nombre de message trait‚ en mˆme temps
      lNbMsg := CurrentMessageQueue."Max MQ Number per Loop";
      IF lNbMsg = 0 THEN
        lNbMsg := 50;

      IF lRecRef.FINDSET(FALSE,FALSE) THEN BEGIN
        REPEAT
          //On passe par un Buffer
          lEAIMQBufferMgt.TransferRecRefToRcvdMQBuffer(lRecRef,lRcvdMQBuffer);

          //Traitement unitaire
          IF lEAIActMgt.AutoValidate(lRcvdMQBuffer."EAI Act Type Code",lRcvdMQBuffer."EAI Act Code") THEN
            MessageQueuePost(lRcvdMQBuffer);

          //On enregistre le Buffer
          lEAIMQBufferMgt.TransferRcvdMQBufferToRcvdMQ(lRcvdMQBuffer);

          COMMIT;

          lCountMsg += 1;

        UNTIL (lRecRef.NEXT=0) OR (lCountMsg=lNbMsg);

        EAILogMgt.AddInfoToRcvdLog(CurrentMessageQueue.Code,'','','','',STRSUBSTNO(Text001,FORMAT(lCountMsg)));

      END;
    END;

    PROCEDURE MessageQueuePost@1100481002(VAR pRcvdMQBuffer@1100281001 : Record 8016721);
    BEGIN
      COMMIT; //N‚cessaire pour lancer le CodeUnit.Run avec valeur de retour (gestion des erreurs)
      IF CODEUNIT.RUN(CODEUNIT::"EAI Rcvd Generation Post Line",pRcvdMQBuffer) THEN BEGIN
        pRcvdMQBuffer.Step := pRcvdMQBuffer.Step::Validation;
        pRcvdMQBuffer.Status := pRcvdMQBuffer.Status::Unprocessed;
        pRcvdMQBuffer.MODIFY;
        //<<IMH02.PC
        AcknowledgementAct(pRcvdMQBuffer);
        //>>IMH02.PC
      END ELSE BEGIN
        pRcvdMQBuffer.Step := pRcvdMQBuffer.Step::Validation; // IMH02.ISAT.MA
        pRcvdMQBuffer."Comment Status" := COPYSTR(GETLASTERRORTEXT,1,250);
        pRcvdMQBuffer.Status := pRcvdMQBuffer.Status::Error;
        pRcvdMQBuffer.MODIFY;
        CLEARLASTERROR;
      END;
    END;

    PROCEDURE RunTimer@1100281003();
    BEGIN
      IF CurrentMessageQueue."Timer Interval" = 0 THEN
        CurrentMessageQueue."Timer Interval" := 60;

      IF ISCLEAR(GenerationTimer) THEN
        CREATE(GenerationTimer);

      GenerationTimer.Interval(CurrentMessageQueue."Timer Interval" * 1000);
      GenerationTimer.Enabled(TRUE);
    END;

    LOCAL PROCEDURE AcknowledgementAct@1100281000(VAR pEAIRcvdMQBuffer@1100281000 : Record 8016721);
    VAR
      lEAIMessageQueue@1000000000 : Record 8016704;
      lEAISentMQBuffer@1000000001 : TEMPORARY Record 8016720;
      lEAIAct@1100281002 : Record 8016706;
      lEAIAckAct@1100281003 : Record 8016706;
      lEAIMQBufferMgt@1100281001 : Codeunit 8016708;
    BEGIN
      // IMH02.PC
      lEAIMessageQueue.GET(pEAIRcvdMQBuffer."EAI MQ Code");
      //<<IMH03.PC
      //lEAIMessageQueue.testfield("Acknowledge Message Queue");
      IF lEAIMessageQueue."Acknowledge Message Queue" = '' THEN BEGIN
        EXIT;
      END;
      //>>IMH03.PC

      lEAIAct.GET(pEAIRcvdMQBuffer."EAI Act Type Code", pEAIRcvdMQBuffer."EAI Act Code");
      IF NOT lEAIAct."Acknowledge Enable" THEN BEGIN
        EXIT;
      END;

      IF lEAIAct."Acknowledgment Status" <> lEAIAct."Acknowledgment Status"::Receive THEN BEGIN
        EXIT;
      END;

      lEAIAckAct.GET(lEAIAct."Ack. Act Type Code",lEAIAct."Ack. Act Code");
      WITH lEAISentMQBuffer DO BEGIN
        "Entry No." := '';
        "EAI Partner Code" := pEAIRcvdMQBuffer."EAI Partner Code";
        "EAI Act Type Code":= lEAIAckAct."EAI Act Type Code";
        "EAI Act Code" := lEAIAckAct.Code;
        "Act Priority" := lEAIAckAct."Act Priority";
        "EAI MQ Code" := lEAIMessageQueue."Acknowledge Message Queue";
        "EAI Process Code" := pEAIRcvdMQBuffer."EAI Process Code";
        "EAI NAS Code" := pEAIRcvdMQBuffer."EAI NAS Code";
        "Message ID" := pEAIRcvdMQBuffer."Message ID";
        "Message Code" := pEAIRcvdMQBuffer."Message Code";
        "Message Version" := pEAIRcvdMQBuffer."Message Version";
        "Message Release" := pEAIRcvdMQBuffer."Message Release";
        "Message Sub-type" := pEAIRcvdMQBuffer."Message Sub-type";
        "Service Header No." := pEAIRcvdMQBuffer."Service Header No.";
        "Service No." := pEAIRcvdMQBuffer."Service No.";
        "EAI Exchange Type Code" := pEAIRcvdMQBuffer."EAI Exchange Type Code";
        Step := Step::Generation;
        "Date Creation" := TODAY;
        "Time Creation" := TIME;
        "User Creation" := USERID;
        RecordId := pEAIRcvdMQBuffer.RecordId;
        xRecordId := pEAIRcvdMQBuffer.xRecordId;
      END;
      IF NOT lEAIMQBufferMgt.SentMessageExists(lEAISentMQBuffer,TRUE) THEN BEGIN
        lEAIMQBufferMgt.CreateSentMQBufferToSentMQ(lEAISentMQBuffer);
      END;
    END;

    EVENT GenerationTimer@1100281002::Timer@1(Milliseconds@1100281000 : Integer);
    BEGIN
      IF NOT IsRunning THEN BEGIN
        IsRunning := TRUE;
        SELECTLATESTVERSION;
        ExchangeTypeLoop();
        COMMIT;
        MessageQueueLoop;
        IsRunning := FALSE;
        COMMIT;
      END;
    END;

    EVENT GenerationTimer@1100281002::TimerError@2(ErrorString@1100281000 : Text[1024]);
    BEGIN
      EAILogMgt.AddErrorToRcvdLog(CurrentMessageQueue.Code,'','','','',COPYSTR(ErrorString,1,250));

      IsRunning := FALSE;
      RunTimer;
    END;

    BEGIN
    {
      /** @r IMH03 @d 17/07/13 @a ISAT.PC @v IMH6.01.4637 @h 4637 @s Mantis hors version @c Correction */
      /** @r IMH02 @d 06/05/13 @a ISAT.PC @v IMH6.01.222 @s Uniformisation Darva
          @c Ajout fonction AcknowledgementAct issu de la fonction DischargeDocument du codeunit 50150 DARVA Management*/
      /** @r IMH01 @d 16/07/12 @a ISAT.PC @v IMH6.01.P006 @s Interface GED @c cr‚ation */
    }
    END.
  }
}