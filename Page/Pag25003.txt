OBJECT Page 25003 Check Kit Item Availability
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=KITNA5.00,NAVNA6.00.01;
  }
  PROPERTIES
  {
    Editable=No;
    CaptionML=[ENU=Check Kit Item Availability;
               FRA=V‚rifier la disponibilit‚ de l'article de kit];
    SourceTable=Table25002;
    PageType=ConfirmationDialog;
    OnFindRecord=BEGIN
                   KitComp := Rec;
                   IF NOT KitComp.FIND(Which) THEN
                     EXIT(FALSE);
                   Rec := KitComp;
                   EXIT(TRUE);
                 END;

    OnNextRecord=BEGIN
                   KitComp := Rec;
                   CurrentSteps := KitComp.NEXT(Steps);
                   IF CurrentSteps <> 0 THEN
                     Rec := KitComp;
                   EXIT(CurrentSteps);
                 END;

  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 2   ;1   ;Group     ;
                CaptionML=[ENU=Details;
                           FRA=Sp‚cification] }

    { 1480001;2;Group     ;
                CaptionML=[ENU=Kitting;
                           FRA=Montage] }

    { 1480006;3;Field     ;
                CaptionML=[ENU=Qty. Available to Make;
                           FRA=Qt‚ disponible pour ‚tablissement];
                DecimalPlaces=0:5;
                SourceExpr=KitComp2."Able to Make Qty.";
                Editable=FALSE }

    { 1480004;3;Field     ;
                CaptionML=[ENU=Earliest Availability Date;
                           FRA=Date dispo. au plus t“t];
                DecimalPlaces=0:5;
                SourceExpr=KitComp2."Earliest Available Date";
                Editable=FALSE }

    { 1480029;2;Field     ;
                CaptionML=[ENU=No.;
                           FRA=Nø];
                SourceExpr=KitComp2."Item No.";
                Editable=FALSE }

    { 1480030;2;Field     ;
                CaptionML=[ENU=Description;
                           FRA=D‚signation];
                SourceExpr=KitComp2.Description;
                Editable=FALSE }

    { 1480032;2;Field     ;
                Name=InventoryQty;
                CaptionML=[ENU=Inventory;
                           FRA=Stocks];
                DecimalPlaces=0:5;
                SourceExpr=KitComp2.Inventory;
                Editable=FALSE }

    { 1480034;2;Field     ;
                Name=GrossReq;
                CaptionML=[ENU=Gross Requirement;
                           FRA=Besoin brut];
                DecimalPlaces=0:5;
                SourceExpr=KitComp2."Gross Requirement";
                Editable=FALSE }

    { 1480036;2;Field     ;
                CaptionML=[ENU=Scheduled Receipt;
                           FRA=R‚ception planifi‚e];
                DecimalPlaces=0:5;
                SourceExpr=KitComp2."Scheduled Receipt";
                Editable=FALSE }

    { 1480038;2;Field     ;
                CaptionML=[ENU=Current Quantity;
                           FRA=Quantit‚ actuelle];
                DecimalPlaces=0:5;
                SourceExpr=-KitComp2."Current Quantity";
                Editable=FALSE }

    { 1480040;2;Field     ;
                CaptionML=[ENU=Total Quantity;
                           FRA=Quantit‚ totale];
                DecimalPlaces=0:5;
                SourceExpr=KitComp2."Total Quantity";
                Editable=FALSE }

    { 1480044;2;Field     ;
                CaptionML=[ENU=Substitutes Exist;
                           FRA=Article de substitution];
                SourceExpr=Item."Substitutes Exist" }

    { 1   ;1   ;Group      }

    { 1480008;2;Group     ;
                GroupType=Repeater }

    { 1480009;3;Field     ;
                SourceExpr="Item No." }

    { 1480011;3;Field     ;
                SourceExpr=Description }

    { 1480007;3;Field     ;
                SourceExpr=Inventory }

    { 1480016;3;Field     ;
                SourceExpr="Gross Requirement" }

    { 1480024;3;Field     ;
                SourceExpr="Scheduled Receipt" }

    { 1480018;3;Field     ;
                SourceExpr="Current Quantity" }

    { 1480020;3;Field     ;
                SourceExpr="Total Quantity" }

    { 1480022;3;Field     ;
                SourceExpr="Earliest Available Date" }

    { 1480046;3;Field     ;
                SourceExpr="Quantity per" }

    { 1480048;3;Field     ;
                SourceExpr="Able to Make Qty." }

    { 1480027;1;Field     ;
                CaptionClass=Text19035558;
                MultiLine=Yes }

  }
  CODE
  {
    VAR
      Item@1480010 : Record 27;
      KitComp@1480000 : TEMPORARY Record 25002;
      KitComp2@1480011 : Record 25002;
      CheckItemAvail@1480024 : Form 342;
      KitManagement@1480025 : Codeunit 25000;
      CurrentSteps@1480009 : Integer;
      StockOut@1480023 : Boolean;
      Text19035558@19049294 : TextConst 'ENU=The quantity on inventory is not sufficient to cover the net change in inventory. Do you still want to record the quantity?;FRA=La quantit‚ disponible en stock n''est pas suffisante pour couvrir votre demande. Souhaitez-vous n‚anmoins enregistrer cette quantit‚ ?';

    PROCEDURE SalesLineShowWarning@1480008(SalesLine@1480000 : Record 37;VAR TempKitSalesLine@1480001 : TEMPORARY Record 25000) : Boolean;
    BEGIN
      StockOut := FALSE;
      KitComp.DELETEALL;
      CLEAR(CheckItemAvail);
      CheckItemAvail.SalesLineShowWarning(SalesLine);
      Item.GET(SalesLine."No.");
      Item.CALCFIELDS("Substitutes Exist");
      WITH KitComp2 DO BEGIN
        INIT;
        "Item No." := Item."No.";
        Description := Item.Description;
        CheckItemAvail.GetParam(
          Inventory,"Gross Requirement","Scheduled Receipt","Current Quantity",
          "Total Quantity","Earliest Available Date");
        "Total Quantity" := "Total Quantity" + "Current Quantity";
      END;

      TempKitSalesLine.RESET;
      IF TempKitSalesLine.ISEMPTY THEN
        KitManagement.GetKitSales(SalesLine,TempKitSalesLine);
      TempKitSalesLine.SETRANGE(Type,TempKitSalesLine.Type::Item);
      TempKitSalesLine.SETFILTER("No.",'<>%1','');
      TempKitSalesLine.SETFILTER("Extended Quantity",'<>0');
      IF TempKitSalesLine.FINDSET THEN
        REPEAT
          CLEAR(CheckItemAvail);
          StockOut := StockOut OR CheckItemAvail.KitSalesLineShowWarning(TempKitSalesLine);
          WITH KitComp DO BEGIN
            INIT;
            "Line No." := TempKitSalesLine."Line No.";
            "Item No." := TempKitSalesLine."No.";
            Description := TempKitSalesLine.Description;
            "Quantity per" := TempKitSalesLine."Quantity per";
            CheckItemAvail.GetParam(
              Inventory,"Gross Requirement","Scheduled Receipt","Current Quantity",
              "Total Quantity","Earliest Available Date");
            "Total Quantity" := "Total Quantity" + "Current Quantity";
            "Current Quantity" := -"Current Quantity";
            IF (("Total Quantity" + "Current Quantity") > 0) AND ("Quantity per" <> 0) THEN
              "Able to Make Qty." := ROUND(("Total Quantity" + "Current Quantity") / "Quantity per",1,'<')
            ELSE
              "Able to Make Qty." := 0;
            INSERT;
          END;
        UNTIL TempKitSalesLine.NEXT = 0;
      IF KitComp.FINDSET THEN BEGIN
        KitComp2."Able to Make Qty." := KitComp."Able to Make Qty.";
        KitComp2."Earliest Available Date" := KitComp."Earliest Available Date";
        REPEAT
          IF KitComp2."Able to Make Qty." > KitComp."Able to Make Qty." THEN
            KitComp2."Able to Make Qty." := KitComp."Able to Make Qty.";
          IF KitComp2."Earliest Available Date" < KitComp."Earliest Available Date" THEN
            KitComp2."Earliest Available Date" := KitComp."Earliest Available Date"
        UNTIL KitComp.NEXT = 0;
      END;
      EXIT(StockOut);
    END;

    BEGIN
    END.
  }
}