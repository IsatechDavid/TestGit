OBJECT Page 342 Check Availability
{
  OBJECT-PROPERTIES
  {
    Date=05/11/08;
    Time=12:00:00;
    Version List=NAVW16.00,KITNA6.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Check Availability;
               FRA=V‚rifier disponibilit‚];
    InsertAllowed=No;
    DeleteAllowed=No;
    ModifyAllowed=No;
    LinksAllowed=No;
    SourceTable=Table27;
    DataCaptionExpr='';
    PageType=ConfirmationDialog;
    InstructionalTextML=[ENU=The quantity on inventory is not sufficient to cover the net change in inventory. Do you still want to record the quantity?;
                         FRA=La quantit‚ disponible en stock n'est pas suffisante pour couvrir votre demande. Souhaitez-vous n‚anmoins enregistrer cette quantit‚ ?];
    OnOpenPage=BEGIN
                 COPY(Item2);
               END;

  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                CaptionML=[ENU=Details;
                           FRA=D‚tails] }

    { 9   ;2   ;Field     ;
                SourceExpr="No.";
                Editable=FALSE }

    { 10  ;2   ;Field     ;
                SourceExpr=Description;
                Editable=FALSE }

    { 11  ;2   ;Field     ;
                Name=InventoryQty;
                CaptionML=[ENU=Inventory;
                           FRA=Stocks];
                DecimalPlaces=0:5;
                SourceExpr=InventoryQty;
                Editable=FALSE }

    { 12  ;2   ;Field     ;
                Name=GrossReq;
                CaptionML=[ENU=Gross Requirement;
                           FRA=Besoin brut];
                DecimalPlaces=0:5;
                SourceExpr=GrossReq;
                Editable=FALSE }

    { 13  ;2   ;Field     ;
                CaptionML=[ENU=Scheduled Receipt;
                           FRA=R‚ception planifi‚e];
                DecimalPlaces=0:5;
                SourceExpr=SchedRcpt;
                Editable=FALSE }

    { 14  ;2   ;Field     ;
                CaptionML=[ENU=Current Quantity;
                           FRA=Quantit‚ actuelle];
                DecimalPlaces=0:5;
                SourceExpr=-ItemNetChange;
                Editable=FALSE }

    { 16  ;2   ;Field     ;
                CaptionML=[ENU=Total Quantity;
                           FRA=Quantit‚ totale];
                DecimalPlaces=0:5;
                SourceExpr=InitialQtyAvailable+ItemNetChange;
                Editable=FALSE }

    { 20  ;2   ;Field     ;
                CaptionML=[ENU=Earliest Availability Date;
                           FRA=Date dispo. au plus t“t];
                DecimalPlaces=0:5;
                SourceExpr=EarliestAvailDate;
                Editable=FALSE }

    { 22  ;2   ;Field     ;
                SourceExpr="Substitutes Exist" }

    { 29  ;2   ;Field     ;
                Lookup=No;
                CaptionML=[ENU=Unit of Measure Code;
                           FRA=Code unit‚];
                SourceExpr=UnitOfMeasureCode;
                Editable=FALSE }

  }
  CODE
  {
    VAR
      SalesSetup@1000 : Record 311;
      OldSalesLine@1001 : Record 37;
      OldTransLine@1002 : Record 5741;
      OldKitSalesLine@1462000 : Record 25000;
      CompanyInfo@1003 : Record 79;
      Item2@1004 : Record 27;
      OldServiceInvLine@1012 : Record 5902;
      AvailToPromise@1015 : Codeunit 5790;
      ItemNo@1005 : Code[20];
      UnitOfMeasureCode@1006 : Code[10];
      NewItemNetChange@1007 : Decimal;
      OldItemNetChange@1008 : Decimal;
      ItemNetChange@1009 : Decimal;
      QtyPerUnitOfMeasure@1010 : Decimal;
      InitialQtyAvailable@1011 : Decimal;
      OldServItemNetChange@1013 : Decimal;
      UseOrderPromise@1014 : Boolean;
      GrossReq@1016 : Decimal;
      SchedRcpt@1017 : Decimal;
      SetupDataIsPresent@1019 : Boolean;
      AvailableQty@1020 : Decimal;
      EarliestAvailDate@1021 : Date;
      InventoryQty@1022 : Decimal;
      OldItemShipmentDate@1023 : Date;

    PROCEDURE ItemJnlLineShowWarning@1(ItemJnlLine@1000 : Record 83) : Boolean;
    BEGIN
      SalesSetup.GET;
      IF NOT SalesSetup."Stockout Warning" THEN
        EXIT(FALSE);
      CASE ItemJnlLine."Entry Type" OF
        ItemJnlLine."Entry Type"::Purchase,ItemJnlLine."Entry Type"::"Positive Adjmt.":
          ItemNetChange := ItemJnlLine.Quantity;
        ItemJnlLine."Entry Type"::Sale,ItemJnlLine."Entry Type"::"Negative Adjmt.",ItemJnlLine."Entry Type"::Transfer:
          ItemNetChange := -ItemJnlLine.Quantity;
      END;
      EXIT(
        ShowWarning(
          ItemJnlLine."Item No.",
          ItemJnlLine."Variant Code",
          ItemJnlLine."Location Code",
          ItemJnlLine."Unit of Measure Code",
          ItemJnlLine."Qty. per Unit of Measure",
          ItemNetChange,
          0,
          0D,
          0D));
    END;

    PROCEDURE SalesLineShowWarning@2(SalesLine@1000 : Record 37) : Boolean;
    BEGIN
      IF SalesLine."Drop Shipment" THEN
        EXIT(FALSE);
      SalesSetup.GET;
      IF NOT SalesSetup."Stockout Warning" THEN
        EXIT(FALSE);
      OldItemNetChange := 0;
      OldSalesLine := SalesLine;
      IF OldSalesLine.FIND THEN // Find previous quantity
        IF (OldSalesLine."Document Type" = OldSalesLine."Document Type"::Order) AND
           (OldSalesLine."No." = SalesLine."No.") AND
           (OldSalesLine."Variant Code" = SalesLine."Variant Code") AND
           (OldSalesLine."Location Code" = SalesLine."Location Code") AND
           (OldSalesLine."Bin Code" = SalesLine."Bin Code") AND
           NOT OldSalesLine."Drop Shipment" AND
           NOT OldSalesLine."Build Kit"
        THEN
          OldItemNetChange := -OldSalesLine."Outstanding Qty. (Base)";

      IF SalesLine."Document Type" = SalesLine."Document Type"::Order THEN
        UseOrderPromise := TRUE;
      EXIT(
        ShowWarning(
          SalesLine."No.",
          SalesLine."Variant Code",
          SalesLine."Location Code",
          SalesLine."Unit of Measure Code",
          SalesLine."Qty. per Unit of Measure",
          -SalesLine."Outstanding Quantity",
          OldItemNetChange,
          SalesLine."Shipment Date",
          OldSalesLine."Shipment Date"));
    END;

    LOCAL PROCEDURE ShowWarning@3(ItemNo2@1000 : Code[20];ItemVariantCode@1001 : Code[10];ItemLocationCode@1002 : Code[10];UnitOfMeasureCode2@1004 : Code[10];QtyPerUnitOfMeasure2@1005 : Decimal;NewItemNetChange2@1006 : Decimal;OldItemNetChange2@1007 : Decimal;ShipmentDate@1008 : Date;OldShipmentDate@1009 : Date) : Boolean;
    BEGIN
      ItemNo := ItemNo2;
      UnitOfMeasureCode := UnitOfMeasureCode2;
      QtyPerUnitOfMeasure := QtyPerUnitOfMeasure2;
      NewItemNetChange := NewItemNetChange2;
      OldItemNetChange := ConvertQty(OldItemNetChange2);
      OldItemShipmentDate := OldShipmentDate;

      IF NewItemNetChange >= 0 THEN
        EXIT(FALSE);

      GET(ItemNo);
      SETRANGE("No.","No.");
      SETRANGE("Variant Filter",ItemVariantCode);
      SETRANGE("Location Filter",ItemLocationCode);
      SETRANGE("Drop Shipment Filter",FALSE);

      IF UseOrderPromise THEN
        SETRANGE("Date Filter",0D,ShipmentDate)
      ELSE
        SETRANGE("Date Filter",0D,WORKDATE);

      Item2.COPY(Rec);

      Calculate;
      EXIT(InitialQtyAvailable + ItemNetChange < 0);
    END;

    LOCAL PROCEDURE Calculate@4();
    BEGIN
      IF NOT SetupDataIsPresent THEN
        GetSetupData;

      AvailToPromise.QtyAvailabletoPromise(
        Rec,GrossReq,SchedRcpt,GETRANGEMAX("Date Filter"),
        CompanyInfo."Check-Avail. Time Bucket",CompanyInfo."Check-Avail. Period Calc.");

      EarliestAvailDate :=
        AvailToPromise.EarliestAvailabilityDate(
          Rec,-NewItemNetChange,GETRANGEMAX("Date Filter"),-OldItemNetChange,OldItemShipmentDate,AvailableQty,
          CompanyInfo."Check-Avail. Time Bucket",CompanyInfo."Check-Avail. Period Calc.");

      IF NOT UseOrderPromise THEN
        SchedRcpt := 0;

      CALCFIELDS(Inventory,"Reserved Qty. on Inventory");
      InventoryQty := ConvertQty(Inventory - "Reserved Qty. on Inventory");
      GrossReq :=  ConvertQty(GrossReq);
      SchedRcpt := ConvertQty(SchedRcpt);

      ItemNetChange := 0;
      IF "No." = ItemNo THEN BEGIN
        ItemNetChange := NewItemNetChange;
        GrossReq := GrossReq + OldItemNetChange;
      END;

      InitialQtyAvailable := InventoryQty + SchedRcpt - GrossReq;
    END;

    LOCAL PROCEDURE ConvertQty@31(Qty@1000 : Decimal) : Decimal;
    BEGIN
      IF QtyPerUnitOfMeasure = 0 THEN
        QtyPerUnitOfMeasure := 1;
      EXIT(ROUND(Qty / QtyPerUnitOfMeasure,0.00001));
    END;

    PROCEDURE TransferLineShowWarning@5(TransLine@1000 : Record 5741) : Boolean;
    BEGIN
      SalesSetup.GET;
      IF NOT SalesSetup."Stockout Warning" THEN
        EXIT(FALSE);

      UseOrderPromise := TRUE;

      OldTransLine := TransLine;
      IF OldTransLine.FIND THEN // Find previous quantity
        IF (OldTransLine."Item No." = TransLine."Item No.") AND
           (OldTransLine."Variant Code" = TransLine."Variant Code") AND
           (OldTransLine."Transfer-from Code" = TransLine."Transfer-from Code")
        THEN
          OldItemNetChange := -OldTransLine."Outstanding Qty. (Base)";

      EXIT(
        ShowWarning(
          TransLine."Item No.",
          TransLine."Variant Code",
          TransLine."Transfer-from Code",
          TransLine."Unit of Measure Code",
          TransLine."Qty. per Unit of Measure",
          -TransLine.Quantity,
          OldItemNetChange,
          TransLine."Shipment Date",
          OldTransLine."Shipment Date"));
    END;

    PROCEDURE ServiceInvLineShowWarning@6(ServInvLine@1000 : Record 5902) : Boolean;
    BEGIN
      SalesSetup.GET;
      IF NOT SalesSetup."Stockout Warning" THEN
        EXIT(FALSE);

      OldServItemNetChange := 0;

      OldServiceInvLine := ServInvLine;

      IF OldServiceInvLine.FIND THEN // Find previous quantity
        IF (OldServiceInvLine."No." = ServInvLine."No.") AND
           (OldServiceInvLine."Variant Code" = ServInvLine."Variant Code") AND
           (OldServiceInvLine."Location Code" = ServInvLine."Location Code") AND
           (OldServiceInvLine."Bin Code" = ServInvLine."Bin Code")
        THEN
          OldServItemNetChange := -OldServiceInvLine."Quantity (Base)";

      UseOrderPromise := TRUE;
      EXIT(
        ShowWarning(
          ServInvLine."No.",
          ServInvLine."Variant Code",
          ServInvLine."Location Code",
          ServInvLine."Unit of Measure Code",
          ServInvLine."Qty. per Unit of Measure",
          -ServInvLine.Quantity,
          OldServItemNetChange,
          ServInvLine."Posting Date",
          OldServiceInvLine."Posting Date"));
    END;

    PROCEDURE GetSetupData@7();
    BEGIN
      CompanyInfo.GET;
      SetupDataIsPresent := TRUE;
    END;

    PROCEDURE KitSalesLineShowWarning@1462000(KitSalesLine@1462000 : Record 25000) : Boolean;
    BEGIN
      SalesSetup.GET;
      IF NOT SalesSetup."Stockout Warning" THEN
        EXIT(FALSE);
      OldItemNetChange := 0;
      OldKitSalesLine := KitSalesLine;
      IF OldKitSalesLine.FIND THEN // Find previous quantity
        IF (OldKitSalesLine."Document Type" = OldKitSalesLine."Document Type"::Order) AND
           (OldKitSalesLine."No." = KitSalesLine."No.") AND
           (OldKitSalesLine."Variant Code" = KitSalesLine."Variant Code") AND
           (OldKitSalesLine."Location Code" = KitSalesLine."Location Code") AND
           (OldKitSalesLine."Bin Code" = KitSalesLine."Bin Code")
        THEN
          OldItemNetChange := -OldKitSalesLine."Outstanding Qty. (Base)";

      IF KitSalesLine."Document Type" = KitSalesLine."Document Type"::Order THEN
        UseOrderPromise := TRUE;
      EXIT(
        ShowWarning(
          KitSalesLine."No.",
          KitSalesLine."Variant Code",
          KitSalesLine."Location Code",
          KitSalesLine."Unit of Measure Code",
          KitSalesLine."Qty. per Unit of Measure",
          -KitSalesLine."Outstanding Quantity",
          OldItemNetChange,
          KitSalesLine."Shipment Date",
          OldKitSalesLine."Shipment Date"));
    END;

    PROCEDURE GetParam@1462001(VAR InventoryQty2@1462000 : Decimal;VAR GrossReq2@1462001 : Decimal;VAR SchedRcpt2@1462002 : Decimal;VAR ItemNetChange2@1462003 : Decimal;VAR InitialQtyAvailable2@1462004 : Decimal;VAR EarliestAvailDate2@1462005 : Date);
    BEGIN
      InventoryQty2 := InventoryQty;
      GrossReq2 := GrossReq;
      SchedRcpt2 := SchedRcpt;
      ItemNetChange2 := ItemNetChange;
      InitialQtyAvailable2 := InitialQtyAvailable;
      EarliestAvailDate2 := EarliestAvailDate;
    END;

    BEGIN
    END.
  }
}