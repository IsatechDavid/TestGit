OBJECT Page 50036 Salesperson Tray lines Board
{
  OBJECT-PROPERTIES
  {
    Date=03/08/11;
    Time=18:09:04;
    Modified=Yes;
    Version List=IMH6.01;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Salesperson Tray lines Board;
               FRA=Tableau des lignes corbeille];
    InsertAllowed=No;
    DeleteAllowed=No;
    ModifyAllowed=No;
    SourceTable=Table50048;
    PageType=List;
    CardFormID=Page50160;
    OnOpenPage=VAR
                 lTeamSalesperson@1100281000 : Record 5084;
               BEGIN
                 InitFilter;
                 //SalespersonCodeFilter := AppMgt.GetUserCode(1);
                 IF TeamCodeFilter = '' THEN
                   TeamCodeFilter := lTeamSalesperson.GetSalespersonDefaultTeam(AppMgt.GetUserCode(1));

                 NoClosedFilter := TRUE;
                 SetFilters;
               END;

    OnAfterGetRecord=BEGIN
                       OnAfterGetCurrRecord;
                     END;

    OnNewRecord=BEGIN
                  OnAfterGetCurrRecord;
                END;

  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1100281010;1;Group  ;
                CaptionML=[ENU=General;
                           FRA=G‚n‚ral] }

    { 1100281012;2;Field  ;
                CaptionML=[ENU=Salesperson Filter;
                           FRA=Filtre vendeur];
                SourceExpr=SalespersonCodeFilter;
                TableRelation=Salesperson/Purchaser.Code;
                OnValidate=VAR
                             lTeamSalesperson@1100281000 : Record 5084;
                           BEGIN
                             TeamCodeFilter := lTeamSalesperson.GetSalespersonDefaultTeam(SalespersonCodeFilter);
                               SalespersonCodeFilterOnAfterVa;
                           END;
                            }

    { 1100281011;2;Field  ;
                CaptionML=[ENU=Team Code;
                           FRA=Filtre ‚quipe];
                SourceExpr=TeamCodeFilter;
                OnValidate=BEGIN
                             TeamCodeFilterOnAfterValidate;
                           END;

                OnLookup=VAR
                           lTeamSalesperson@1100281000 : Record 5084;
                         BEGIN
                           lTeamSalesperson.FILTERGROUP(2);
                           lTeamSalesperson.SETCURRENTKEY("Salesperson Code");
                           IF SalespersonCodeFilter = '' THEN
                             lTeamSalesperson.SETRANGE("Salesperson Code", AppMgt.GetUserCode(1))
                           ELSE
                             lTeamSalesperson.SETRANGE("Salesperson Code", SalespersonCodeFilter);
                           lTeamSalesperson.FILTERGROUP(0);

                           IF FORM.RUNMODAL(0, lTeamSalesperson) = ACTION::LookupOK THEN BEGIN
                             Text := lTeamSalesperson."Team Code";
                             EXIT(TRUE);
                           END;
                         END;

                OnAssistEdit=BEGIN
                               GetFilterSalespersonTeam;
                               SetFilters;
                               CurrPage.UPDATE(FALSE);
                             END;
                              }

    { 1100281027;2;Field  ;
                CaptionML=[ENU=Status;
                           FRA=Filtre Statut];
                OptionCaptionML=[ENU=" ,Not Started,In Progress,Completed";
                                 FRA=" ,Non d‚marr‚,En cours,Termin‚"];
                SourceExpr=StatusFilter;
                OnValidate=BEGIN
                             StatusFilterOnAfterValidate;
                           END;
                            }

    { 1100281017;2;Field  ;
                CaptionML=[ENU=Urgent;
                           FRA=Urgent];
                SourceExpr=UrgentFilter;
                OnValidate=BEGIN
                             UrgentFilterOnAfterValidate;
                           END;
                            }

    { 1100281029;2;Field  ;
                CaptionML=[ENU=No Closed;
                           FRA=Non termin‚e];
                SourceExpr=NoClosedFilter;
                OnValidate=BEGIN
                             NoClosedFilterOnAfterValidate;
                           END;
                            }

    { 1100281019;2;Field  ;
                CaptionML=[ENU=Corporate No. Filter;
                           FRA=Filtre nø grand compte];
                SourceExpr=CorporateNoFilter;
                TableRelation=Customer.No. WHERE (Service Contact=CONST(Corporate Customer));
                OnValidate=BEGIN
                             CorporateNoFilterOnAfterValida;
                           END;
                            }

    { 1100281021;2;Field  ;
                CaptionML=[ENU=Service No. Filter;
                           FRA=Filtre nø service];
                SourceExpr=ServiceNoFilter;
                OnValidate=BEGIN
                             ServiceNoFilterOnAfterValidate;
                           END;

                OnLookup=VAR
                           lService@1100281000 : Record 50066;
                         BEGIN
                           IF FORM.RUNMODAL(FORM::"Services List", lService) = ACTION::LookupOK THEN BEGIN
                             Text := FORMAT(lService."Service No.");
                             EXIT(TRUE);
                           END;
                         END;
                          }

    { 1100281023;2;Field  ;
                CaptionML=[ENU=Service Header No. Filter;
                           FRA=Filtre nø ligne produit];
                SourceExpr=ServiceHeaderNoFilter;
                TableRelation="Service Header".No.;
                OnValidate=BEGIN
                             ServiceHeaderNoFilterOnAfterVa;
                           END;
                            }

    { 1100281025;2;Field  ;
                CaptionML=[ENU=Intervention No. Filter;
                           FRA=Filtre nø intervention];
                BlankZero=Yes;
                SourceExpr=InterventionNoFilter;
                OnValidate=BEGIN
                             InterventionNoFilterOnAfterVal;
                           END;

                OnLookup=VAR
                           lServiceInterventionLine@1100281000 : Record 50075;
                         BEGIN
                           lServiceInterventionLine.SETRANGE("Service Header No.", ServiceHeaderNoFilter);
                           IF FORM.RUNMODAL(0, lServiceInterventionLine) = ACTION::LookupOK THEN BEGIN
                             Text := FORMAT(lServiceInterventionLine."Intervention No.");
                             EXIT(TRUE);
                           END;
                         END;
                          }

    { 1100281015;2;Field  ;
                CaptionML=[ENU=Expected End Date Filter;
                           FRA=Filtre date de fin th‚orique];
                SourceExpr=ExpectedEndDateFilter;
                OnValidate=VAR
                             lDate@1100281000 : Record 2000000007;
                           BEGIN
                             IF AppMgt.MakeDateFilter(ExpectedEndDateFilter) = 0 THEN;
                             lDate.SETFILTER("Period Start",ExpectedEndDateFilter);
                             ExpectedEndDateFilter := lDate.GETFILTER("Period Start");
                               ExpectedEndDateFilterOnAfterVa;
                           END;
                            }

    { 1   ;1   ;Group     ;
                Editable=FALSE;
                GroupType=Repeater }

    { 22  ;2   ;Field     ;
                SourceExpr="Team Code";
                TableRelation=Team;
                Visible=TRUE }

    { 1100281031;2;Field  ;
                SourceExpr="Entry No.";
                Visible=False;
                Editable=FALSE }

    { 1100281035;2;Field  ;
                SourceExpr="Task Code" }

    { 2   ;2   ;Field     ;
                SourceExpr=Closed }

    { 8   ;2   ;Field     ;
                SourceExpr=Description }

    { 1100281008;2;Field  ;
                SourceExpr=Urgent }

    { 12  ;2   ;Field     ;
                SourceExpr=Status }

    { 1100281037;2;Field  ;
                SourceExpr="Closed By Salesperson" }

    { 16  ;2   ;Field     ;
                SourceExpr="Date Closed" }

    { 1100281039;2;Field  ;
                SourceExpr="Assigned Salesperson Code" }

    { 1100281041;2;Field  ;
                SourceExpr="Assigned Datetime" }

    { 20  ;2   ;Field     ;
                SourceExpr="Contact No." }

    { 26  ;2   ;Field     ;
                SourceExpr="Campaign No.";
                Visible=TRUE }

    { 1100281000;2;Field  ;
                SourceExpr="Corporate No." }

    { 1100281002;2;Field  ;
                SourceExpr="Service No." }

    { 1100281004;2;Field  ;
                SourceExpr="Service Header No." }

    { 1100281006;2;Field  ;
                SourceExpr="Intervention Line No." }

    { 1100281009;2;Field  ;
                SourceExpr="Expected End Date";
                Style=Unfavorable;
                StyleExpr=StyleUnfavorable }

    { 1100281007;2;Field  ;
                SourceExpr="Expected End Time";
                AutoFormatType=11;
                AutoFormatExpr='<Hours24,2>:<Minutes,2>';
                Style=Unfavorable;
                StyleExpr=StyleUnfavorable }

  }
  CODE
  {
    VAR
      AppMgt@1100281001 : Codeunit 1;
      Contact@1100281010 : Record 5050;
      Text000@1007 : TextConst 'ENU=(Multiple);FRA=(Multiple)';
      Text001@1006 : TextConst 'ENU=untitled;FRA=sans-titre';
      Text002@1009 : TextConst 'ENU=You cannot select attendees for a to-do of the ''%1'' type.;FRA=Vous ne pouvez pas s‚lectionner de participants pour une action de type ® %1 ¯.';
      Text004@1010 : TextConst 'ENU=The Make Phone Call function for this to-do is available only on the Attendee Scheduling window.;FRA=La fonction T‚l‚phoner pour cette action est uniquement disponible dans la fenˆtre Planification de la participation.';
      Text005@1011 : TextConst 'ENU=You must select a to-do with a contact assigned to it before you can use the Make Phone Call function.;FRA=Vous devez s‚lectionner une action … laquelle un contact a ‚t‚ affect‚ avant de pouvoir utiliser la fonction T‚l‚phoner.';
      SalespersonCodeFilter@1100281000 : Code[250];
      TeamCodeFilter@1100281002 : Code[250];
      StatusFilter@1100281003 : ' ,Not Started,In Progress,Completed';
      UrgentFilter@1100281004 : Boolean;
      NoClosedFilter@1100281009 : Boolean;
      CorporateNoFilter@1100281005 : Code[250];
      ServiceNoFilter@1100281006 : Code[250];
      ServiceHeaderNoFilter@1100281007 : Code[250];
      InterventionNoFilter@1100281008 : Code[250];
      ExpectedEndDateFilter@1100281011 : Text[250];
      TrayLineMgt@1100281012 : Codeunit 50050;
      StyleUnfavorable@1100281013 : Boolean INDATASET;

    PROCEDURE InitFilter@1100281000();
    BEGIN
      FILTERGROUP(4);
      IF (GETFILTERS = '') THEN BEGIN
        FILTERGROUP(3);
      END;
      IF (GETFILTERS = '') THEN BEGIN
        FILTERGROUP(2);
      END;
      IF (GETFILTERS = '') THEN BEGIN
        FILTERGROUP(0);
      END;

      SalespersonCodeFilter := GETFILTER("Assigned Salesperson Code");
      TeamCodeFilter := GETFILTER("Team Code");
      IF GETFILTER(Status) <> '' THEN
        EVALUATE(StatusFilter, GETFILTER(Status));
      //StatusFilter := GETFILTER(Status);
      IF GETFILTER(Urgent) <> '' THEN
        EVALUATE(UrgentFilter, GETFILTER(Urgent));
      CorporateNoFilter := GETFILTER("Corporate No.");
      ServiceNoFilter := GETFILTER("Service No.");
      ServiceHeaderNoFilter := GETFILTER("Service Header No.");
      InterventionNoFilter := GETFILTER("Intervention Line No.");
      ExpectedEndDateFilter := GETFILTER("Expected End Date");
    END;

    PROCEDURE SetFilters@1100281008();
    BEGIN
      IF TeamCodeFilter <> '' THEN BEGIN
        SETCURRENTKEY("Team Code",Closed);
        SETFILTER("Team Code", TeamCodeFilter);
      END ELSE
        SETRANGE("Team Code");

      IF SalespersonCodeFilter <> '' THEN BEGIN
        SETCURRENTKEY("Assigned Salesperson Code",Closed);
        SETFILTER("Assigned Salesperson Code", SalespersonCodeFilter);
      END ELSE
        SETRANGE("Assigned Salesperson Code");

      IF StatusFilter <> StatusFilter::" " THEN BEGIN
        SETRANGE(Status, StatusFilter -1);
      END ELSE
        SETRANGE(Status);

      IF UrgentFilter THEN BEGIN
        SETRANGE(Urgent, TRUE);
      END ELSE
        SETRANGE(Urgent);

      IF NoClosedFilter THEN BEGIN
        SETRANGE(Closed, FALSE);
      END ELSE
        SETRANGE(Closed);

      IF ExpectedEndDateFilter <> '' THEN BEGIN
        SETFILTER("Expected End Date", ExpectedEndDateFilter);
      END ELSE
        SETRANGE("Expected End Date");

      IF CorporateNoFilter <> '' THEN BEGIN
        SETFILTER("Corporate No.", CorporateNoFilter);
      END ELSE
        SETRANGE("Corporate No.");

      IF ServiceNoFilter <> '' THEN BEGIN
        SETFILTER("Service No.", ServiceNoFilter);
      END ELSE
        SETRANGE("Service No.");

      IF ServiceHeaderNoFilter <> '' THEN BEGIN
        SETFILTER("Service Header No.", ServiceHeaderNoFilter);
      END ELSE
        SETRANGE("Service Header No.");

      IF InterventionNoFilter <> '' THEN BEGIN
        SETFILTER("Intervention No.", InterventionNoFilter);
      END ELSE
        SETRANGE("Intervention No.");
      CurrPage.UPDATE(FALSE);
    END;

    PROCEDURE GetFilterSalespersonTeam@1100281007();
    VAR
      lTeamSalesperson@1100281000 : Record 5084;
    BEGIN
      IF SalespersonCodeFilter = '' THEN
        EXIT;

      lTeamSalesperson.SETCURRENTKEY("Salesperson Code");
      lTeamSalesperson.SETFILTER("Salesperson Code", SalespersonCodeFilter);
      IF lTeamSalesperson.FINDFIRST THEN BEGIN
        TeamCodeFilter := '';
        REPEAT
          IF TeamCodeFilter = '' THEN
            TeamCodeFilter := lTeamSalesperson."Team Code"
          ELSE
            TeamCodeFilter := TeamCodeFilter + '|' + lTeamSalesperson."Team Code";
        UNTIL lTeamSalesperson.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE SalespersonCodeFilterOnAfterVa@19014849();
    BEGIN
      SetFilters;
    END;

    LOCAL PROCEDURE TeamCodeFilterOnAfterValidate@19051079();
    BEGIN
      SetFilters;
    END;

    LOCAL PROCEDURE UrgentFilterOnAfterValidate@19008727();
    BEGIN
      SetFilters;
    END;

    LOCAL PROCEDURE CorporateNoFilterOnAfterValida@19073699();
    BEGIN
      SetFilters;
    END;

    LOCAL PROCEDURE ServiceNoFilterOnAfterValidate@19057618();
    BEGIN
      SetFilters;
    END;

    LOCAL PROCEDURE ServiceHeaderNoFilterOnAfterVa@19060941();
    BEGIN
      SetFilters;
    END;

    LOCAL PROCEDURE InterventionNoFilterOnAfterVal@19072630();
    BEGIN
      SetFilters;
    END;

    LOCAL PROCEDURE StatusFilterOnAfterValidate@19021475();
    BEGIN
      SetFilters;
    END;

    LOCAL PROCEDURE NoClosedFilterOnAfterValidate@19037257();
    BEGIN
      SetFilters;
    END;

    LOCAL PROCEDURE ExpectedEndDateFilterOnAfterVa@19007040();
    BEGIN
      SetFilters;
    END;

    LOCAL PROCEDURE OnAfterGetCurrRecord@19077479();
    BEGIN
      xRec := Rec;
      IF NOT Contact.GET("Contact No.") THEN
        CLEAR(Contact);
      CALCFIELDS("Contact Name");
      StyleUnfavorable := GetExpectedEndAlert;
    END;

    BEGIN
    {
      /** @r IMH02 @d 22/10/2010 @a ISAT.ZW @v IMH6.01.013 @s Gestion des corbeilles @c Ajout fonction Creer service*/
      /** @r IMH01 @d 07/10/2010 @a ISAT.ZW @v IMH6.01.013 @s Gestion des corbeilles @c Cr‚ation Objet*/
    }
    END.
  }
}