OBJECT Page 50050 Contact Search Page
{
  OBJECT-PROPERTIES
  {
    Date=03/05/12;
    Time=17:13:53;
    Modified=Yes;
    Version List=IMH6.01;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Contact Search Card;
               FRA=Recherche de contact];
    SaveValues=No;
    InsertAllowed=No;
    DeleteAllowed=No;
    LinksAllowed=No;
    SourceTable=Table5050;
    PageType=Worksheet;
    SourceTableTemporary=Yes;
    OnOpenPage=BEGIN
                 "No." := '';
                 "Service Contact" := "Service Contact"::Beneficiary; //IMH05.ST
                 INSERT(FALSE);
                 IF NOT ContactFilterSet THEN
                   ServiceContact := ServiceContact::Beneficiary;
                 EnableFields;
                 FormSearchContact(FALSE);
               END;

    OnModifyRecord=BEGIN
                     MODIFY;
                     EXIT(FALSE);
                   END;

    OnQueryClosePage=VAR
                       lContact@1100281000 : Record 5050;
                     BEGIN
                       {
                       //<<IMH10
                       IF CloseAction IN [ACTION::LookupOK,ACTION::OK] THEN BEGIN
                         IF CurrPage.ContactList.FORM.GetContactNo <> '' THEN BEGIN
                           IF lContact.GET(CurrPage.ContactList.FORM.GetContactNo) THEN;
                             PAGE.RUNMODAL(PAGE::"Contact Card",lContact);
                         END;
                       END;
                       //>>IMH10
                        }
                     END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1100281006;1 ;Action    ;
                      Name=SearchButton;
                      CaptionML=[ENU=Sea&rch;
                                 FRA=&Recherche];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Start;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 FormSearchContact(TRUE);
                               END;
                                }
      { 1100281002;1 ;Action    ;
                      Name=ResetButton;
                      CaptionML=[ENU=Re&set;
                                 FRA=Remi&se … vide];
                      Promoted=Yes;
                      Image=ClearFilter;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 //IMH01
                                 ResetFields;
                               END;
                                }
      { 1100281009;1 ;Action    ;
                      Name=CreateButton;
                      CaptionML=[ENU=&Create contact;
                                 FRA=&Cr‚er contact];
                      Promoted=Yes;
                      Image=NewDocument;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 //IMH01
                                 CreateContact(TRUE);
                               END;
                                }
      { 1100281015;1 ;Action    ;
                      Name=ProviderCreateButton;
                      CaptionML=[ENU=Create &Provider;
                                 FRA=Cr‚er &prestataire];
                      Promoted=Yes;
                      Visible=SearchProvider;
                      Image=NewDocument;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 // IMH07.ISAT.MA
                                 CreateProvider(TRUE);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1100281000;1;Group  ;
                Name=<GroupGeneral>;
                CaptionML=[ENU=General;
                           FRA=G‚n‚ral];
                GroupType=Group }

    { 1100281026;2;Field  ;
                CaptionML=[ENU=Contact Service;
                           FRA=Type contact];
                OptionCaptionML=[ENU=Corporate Customer,Provider,Adjuster,Beneficiary,All;
                                 FRA=Grand compte,Prestataire,Expert,B‚n‚ficiaire,Tous];
                SourceExpr=ServiceContact;
                OnValidate=BEGIN
                             EnableFields;
                             FormSearchContact(FALSE);
                           END;
                            }

    { 1100281013;2;Group  ;
                Visible=NotSearchBenef;
                GroupType=Group }

    { 1100281028;3;Field  ;
                SourceExpr=Name;
                Importance=Promoted;
                OnValidate=BEGIN
                             FormSearchContact(FALSE);
                           END;
                            }

    { 1000000002;2;Group  ;
                Visible=SearchProvider;
                GroupType=Group }

    { 1000000000;3;Field  ;
                CaptionML=[ENU=No.;
                           FRA=Nø prestataire];
                SourceExpr=NoFilter;
                OnValidate=BEGIN
                             FormSearchContact(FALSE); //IMH05.ST
                           END;
                            }

    { 1100281008;2;Group  ;
                Visible=SearchBenef;
                GroupType=Group }

    { 1100281016;3;Field  ;
                CaptionML=[ENU=Corporate Customer;
                           FRA=Grand compte];
                SourceExpr=CorporateName;
                OnValidate=BEGIN
                             ServFormMgt.Corporate_Validate(CorporateName, "Corporate No.");
                           END;

                OnLookup=BEGIN
                           ServFormMgt.Corporate_Lookup(CorporateName, "Corporate No.");
                           //EXIT(ServFormMgt.Corporate_Lookup(CorporateName, "Corporate No."));
                         END;
                          }

    { 1100281004;3;Field  ;
                SourceExpr="Corporate No.";
                Visible=FALSE;
                OnValidate=BEGIN
                             IF ("Corporate No." <> '') AND NOT (ServiceContact IN [ServiceContact::Beneficiary,ServiceContact::All]) THEN
                               ServiceContact := ServiceContact::Beneficiary;

                             FormSearchContact(FALSE);
                           END;
                            }

    { 1100281005;3;Field  ;
                CaptionML=[ENU=Corporate Region Code;
                           FRA=R‚gion grand compte];
                SourceExpr=CorporateRegionCode;
                TableRelation="Corporate Region"."Region Code" WHERE (Corporate No.=FIELD(Corporate No.));
                OnValidate=BEGIN
                             "Corporate Region Code" := CorporateRegionCode;
                             IF ("Corporate Region Code" <> '') AND NOT (ServiceContact IN [ServiceContact::Beneficiary,ServiceContact::All]) THEN
                               ServiceContact := ServiceContact::Beneficiary;
                             FormSearchContact(FALSE);
                           END;
                            }

    { 1100281007;3;Field  ;
                Name=Member No.;
                CaptionML=[ENU=Member No.;
                           FRA=Nø b‚n‚ficiaire];
                SourceExpr=MemberNo;
                Importance=Promoted;
                OnValidate=BEGIN
                             FormSearchContact(FALSE);
                           END;
                            }

    { 1100281021;3;Field  ;
                Name=ContactPostCode;
                CaptionML=[ENU=Post Code;
                           FRA=Code postal];
                SourceExpr=ContactPostCode;
                OnValidate=VAR
                             lPostCodeRec@1100281001 : Record 225;
                           BEGIN
                             //IMH09
                             IF NOT PostCode.ValidatePostCode3(ContactCity,ContactPostCode, "Country/Region Code") THEN BEGIN  //IMH24 Ajout Code pays
                               IF GUIALLOWED THEN BEGIN
                                 lPostCodeRec.SETCURRENTKEY(Code,City);
                                 IF ContactPostCode <> '' THEN
                                   lPostCodeRec.SETFILTER(Code,'%1',ContactPostCode+'*');
                                 lPostCodeRec.Code := ContactPostCode;
                                 lPostCodeRec.City := ContactCity;

                                 IF FORM.RUNMODAL(FORM::"Post Codes",lPostCodeRec) = ACTION::LookupOK THEN BEGIN
                                   ContactPostCode := lPostCodeRec.Code;
                                   ContactCity := lPostCodeRec.City;
                                   IF lPostCodeRec."Country/Region Code" <> '' THEN
                                     "Country/Region Code" := lPostCodeRec."Country/Region Code";
                                 END;
                               END;
                             END;

                             "Post Code" := ContactPostCode;
                             City := ContactCity;
                             "Geo. Reference Code" := PostCode.GetReferenceGeoCode("Post Code",City);  //IMH11 isat.zw
                             FormSearchContact(FALSE);
                           END;

                OnLookup=VAR
                           lPostCodeRec@1100281000 : Record 225;
                         BEGIN
                           //IMH09
                           IF NOT GUIALLOWED THEN
                             EXIT;
                           lPostCodeRec.SETCURRENTKEY(Code,City);
                           IF ContactPostCode <> '' THEN
                             lPostCodeRec.SETFILTER(Code,'%1',ContactPostCode+'*');
                           lPostCodeRec.Code := ContactPostCode;
                           lPostCodeRec.City := ContactCity;

                           IF FORM.RUNMODAL(FORM::"Post Codes",lPostCodeRec) = ACTION::LookupOK THEN BEGIN
                             ContactPostCode := lPostCodeRec.Code;
                             "Post Code" := ContactPostCode;
                             ContactCity := lPostCodeRec.City;
                              City := lPostCodeRec.City;
                             IF lPostCodeRec."Country/Region Code" <> '' THEN
                               "Country/Region Code" := lPostCodeRec."Country/Region Code";
                           END;
                         END;
                          }

    { 1100281023;3;Field  ;
                Name=ContactCity;
                CaptionML=[ENU=City;
                           FRA=Ville];
                SourceExpr=ContactCity;
                OnValidate=BEGIN
                             //IMH09
                             IF ContactCity <> '' THEN BEGIN
                               PostCode.ValidateCity3(ContactCity,ContactPostCode, "Country/Region Code");
                               //PostCode.ValidatePostCode(ContactCity,"Post Code", "Country/Region Code");
                               "Geo. Reference Code" := PostCode.GetReferenceGeoCode("Post Code",City);
                               "Post Code" := ContactPostCode;
                             END;
                             City := ContactCity;
                             FormSearchContact(FALSE);
                           END;

                OnLookup=VAR
                           lPostCodeRec@1100281000 : Record 225;
                         BEGIN
                           //IMH09
                           IF "Post Code" <> '' THEN
                             lPostCodeRec.SETFILTER(Code,'%1',"Post Code"+'*');
                           IF ContactCity <> '' THEN
                             lPostCodeRec.SETFILTER(City,'%1',ContactCity+'*');
                           IF FORM.RUNMODAL(FORM::"Post Codes",lPostCodeRec) = ACTION::LookupOK THEN BEGIN
                             ContactPostCode := lPostCodeRec.Code;
                             ContactCity := lPostCodeRec.City;
                             "Post Code" := ContactPostCode;
                             City := ContactCity;
                           END;
                         END;
                          }

    { 1100281001;3;Field  ;
                SourceExpr=Surname;
                OnValidate=BEGIN
                             FormSearchContact(FALSE);
                           END;
                            }

    { 1100281003;3;Field  ;
                SourceExpr="First Name";
                OnValidate=BEGIN
                             FormSearchContact(FALSE);
                           END;
                            }

    { 1100281042;2;Field  ;
                SourceExpr="Phone No.";
                Importance=Promoted;
                OnValidate=BEGIN
                             FormSearchContact(FALSE);
                           END;
                            }

    { 1100281044;2;Field  ;
                ExtendedDatatype=None;
                SourceExpr="E-Mail";
                Importance=Promoted;
                OnValidate=BEGIN
                             FormSearchContact(FALSE);
                           END;
                            }

    { 1100281040;2;Field  ;
                SourceExpr="Country/Region Code";
                TableRelation=Country/Region;
                OnValidate=BEGIN
                             FormSearchContact(FALSE);
                           END;
                            }

    { 1100281024;2;Group  ;
                Visible=NotSearchBenef;
                GroupType=Group }

    { 1100281019;3;Field  ;
                Name=ContactCity;
                CaptionML=[ENU=City;
                           FRA=Ville];
                SourceExpr=ContactCity;
                OnValidate=BEGIN
                             //IMH09
                             IF ContactCity <> '' THEN BEGIN
                               PostCode.ValidateCity3(ContactCity,ContactPostCode, "Country/Region Code");
                               //PostCode.ValidatePostCode(ContactCity,"Post Code", "Country/Region Code");
                               "Geo. Reference Code" := PostCode.GetReferenceGeoCode("Post Code",City);
                               "Post Code" := ContactPostCode;
                             END;
                             City := ContactCity;
                             FormSearchContact(FALSE);
                           END;

                OnLookup=VAR
                           lPostCodeRec@1100281000 : Record 225;
                         BEGIN
                           //IMH09
                           IF "Post Code" <> '' THEN
                             lPostCodeRec.SETFILTER(Code,'%1',"Post Code"+'*');
                           IF ContactCity <> '' THEN
                             lPostCodeRec.SETFILTER(City,'%1',ContactCity+'*');
                           IF FORM.RUNMODAL(FORM::"Post Codes",lPostCodeRec) = ACTION::LookupOK THEN BEGIN
                             ContactPostCode := lPostCodeRec.Code;
                             ContactCity := lPostCodeRec.City;
                             "Post Code" := ContactPostCode;
                             City := ContactCity;
                           END;
                         END;
                          }

    { 1100281032;2;Field  ;
                SourceExpr=Address;
                Importance=Additional;
                OnValidate=BEGIN
                             FormSearchContact(FALSE);
                           END;
                            }

    { 1100281034;2;Field  ;
                SourceExpr="Address 2";
                Importance=Additional;
                OnValidate=BEGIN
                             FormSearchContact(FALSE);
                           END;
                            }

    { 1100281012;2;Group  ;
                Visible=SearchProvider;
                GroupType=Group }

    { 1100281025;3;Field  ;
                Name=ContactPostCode;
                CaptionML=[ENU=Post Code;
                           FRA=Code postal];
                SourceExpr=ContactPostCode;
                OnValidate=VAR
                             lPostCodeRec@1100281001 : Record 225;
                           BEGIN
                             //IMH09
                             IF NOT PostCode.ValidatePostCode3(ContactCity,ContactPostCode, "Country/Region Code") THEN BEGIN  //IMH24 Ajout Code pays
                               IF GUIALLOWED THEN BEGIN
                                 lPostCodeRec.SETCURRENTKEY(Code,City);
                                 IF ContactPostCode <> '' THEN
                                   lPostCodeRec.SETFILTER(Code,'%1',ContactPostCode+'*');
                                 lPostCodeRec.Code := ContactPostCode;
                                 lPostCodeRec.City := ContactCity;

                                 IF FORM.RUNMODAL(FORM::"Post Codes",lPostCodeRec) = ACTION::LookupOK THEN BEGIN
                                   ContactPostCode := lPostCodeRec.Code;
                                   ContactCity := lPostCodeRec.City;
                                   IF lPostCodeRec."Country/Region Code" <> '' THEN
                                     "Country/Region Code" := lPostCodeRec."Country/Region Code";
                                 END;
                               END;
                             END;

                             "Post Code" := ContactPostCode;
                             City := ContactCity;
                             "Geo. Reference Code" := PostCode.GetReferenceGeoCode("Post Code",City);  //IMH11 isat.zw
                             FormSearchContact(FALSE);
                           END;

                OnLookup=VAR
                           lPostCodeRec@1100281000 : Record 225;
                         BEGIN
                           //IMH09
                           IF NOT GUIALLOWED THEN
                             EXIT;
                           lPostCodeRec.SETCURRENTKEY(Code,City);
                           IF ContactPostCode <> '' THEN
                             lPostCodeRec.SETFILTER(Code,'%1',ContactPostCode+'*');
                           lPostCodeRec.Code := ContactPostCode;
                           lPostCodeRec.City := ContactCity;

                           IF FORM.RUNMODAL(FORM::"Post Codes",lPostCodeRec) = ACTION::LookupOK THEN BEGIN
                             ContactPostCode := lPostCodeRec.Code;
                             "Post Code" := ContactPostCode;
                             ContactCity := lPostCodeRec.City;
                              City := lPostCodeRec.City;
                             IF lPostCodeRec."Country/Region Code" <> '' THEN
                               "Country/Region Code" := lPostCodeRec."Country/Region Code";
                           END;
                         END;
                          }

    { 1100281014;3;Field  ;
                CaptionML=[ENU=No.;
                           FRA=Nø];
                SourceExpr=NoFilter2;
                Visible=false;
                OnValidate=BEGIN
                             FormSearchContact(FALSE); //IMH05.ST
                           END;
                            }

    { 1100281010;3;Field  ;
                CaptionML=[ENU=Registration No.;
                           FRA=Nø SIRET];
                SourceExpr=RegistrationNo;
                OnValidate=BEGIN
                             FormSearchContact(FALSE); //IMH05.ST
                           END;
                            }

    { 1100281011;3;Field  ;
                CaptionML=[ENU=VAT Registration No.;
                           FRA=Nø TVA intracomm.];
                SourceExpr=VATRegistrationNo;
                OnValidate=BEGIN
                             FormSearchContact(FALSE); //IMH05.ST
                           END;
                            }

    { 1100281017;2;Group  ;
                Visible=SearchBenef;
                GroupType=Group }

    { 1100281018;3;Field  ;
                CaptionML=[ENU=Include rayed;
                           FRA=Inclure radi‚s];
                SourceExpr=IncludeRayed }

    { 1100281020;1;Part   ;
                Name=ContactList;
                PagePartID=Page50051 }

  }
  CODE
  {
    VAR
      ServFormMgt@1100281007 : Codeunit 50086;
      PostCode@1100281018 : Record 225;
      TempContactFilter@1100281000 : Record 5050;
      DialBox@1100281019 : Dialog;
      ServiceContact@1100281001 : 'Corporate Customer,Provider,Adjuster,Beneficiary,All';
      Search@1100281013 : Boolean;
      ResultContact@1100281011 : Code[20];
      CloseFromCreate@1100281014 : Boolean;
      ButtonCreateEnable@19005106 : Boolean INDATASET;
      Text003@1100281020 : TextConst 'ENU=Search in progress;FRA=Recherche en cours ...';
      ContactFilterSet@1100281022 : Boolean;
      SearchBenef@1100281002 : Boolean INDATASET;
      SearchProvider@1100281003 : Boolean INDATASET;
      NotSearchBenef@1100281006 : Boolean INDATASET;
      NoFilter@1100281004 : Text[1024] INDATASET;
      NoFilter2@1100281021 : Text[1024];
      MemberNo@1100281005 : Code[20];
      CorporateName@1100281008 : Text[80] INDATASET;
      CorporateRegionCode@1100281009 : Code[10];
      IncludeRayed@1100281010 : Boolean INDATASET;
      ContactPostCode@1100281015 : Code[10];
      ContactCity@1100281012 : Text[50];
      RegistrationNo@1100281016 : Code[20];
      VATRegistrationNo@1100281017 : Text[20];

    PROCEDURE SetContactFilter@1100281005(VAR pContact@1100281000 : Record 5050);
    BEGIN
      //IMH02.ST fonction revue, record en paramŠtre
      IF pContact.GETFILTER("Service Contact") <> '' THEN
        ServiceContact := pContact.GETRANGEMIN("Service Contact")
      ELSE
        ServiceContact := ServiceContact::All;

      "Corporate No." := pContact.GETFILTER("Corporate No.");
      "Corporate Region Code" := pContact.GETFILTER("Corporate Region Code");
      IF pContact.GETFILTER(Name) = '' THEN
        Name := pContact.GETFILTER("Search Name")
      ELSE
        Name := pContact.GETFILTER(Name);
      Surname := pContact.GETFILTER(Surname);
      "First Name" := pContact.GETFILTER("First Name");
      Address := pContact.GETFILTER(Address);
      "Address 2" := pContact.GETFILTER("Address 2");
      "Post Code" := pContact.GETFILTER("Post Code");
      City := pContact.GETFILTER(City);
      "Country/Region Code" := pContact.GETFILTER("Country/Region Code");
      "Phone No." := pContact.GETFILTER("Phone No.");
      "E-Mail" := pContact.GETFILTER("E-Mail");
      "Member No." := pContact.GETFILTER("Member No."); //IMH02.ST
      NoFilter := pContact.GETFILTER("No."); //IMH04.ST
      ContactFilterSet := TRUE;
    END;

    LOCAL PROCEDURE SetFiltersToContact@1100481000(VAR pContact@1100481000 : Record 5050);
    BEGIN
      //Initialise la variable contact contenant les filtres
      pContact.RESET;
      IF ServiceContact <> ServiceContact::All THEN
        pContact.SETRANGE("Service Contact", ServiceContact);
      IF "Corporate No." <> '' THEN
        pContact.SETFILTER("Corporate No.","Corporate No.");
      IF "Corporate Region Code" <> '' THEN
        pContact.SETFILTER("Corporate Region Code","Corporate Region Code");
      IF Name <> '' THEN
        pContact.SETFILTER(Name,Name);
      IF Surname <> '' THEN
        pContact.SETFILTER(Surname,Surname);
      IF "First Name" <> '' THEN
        pContact.SETFILTER("First Name","First Name");
      IF Address <> '' THEN
        pContact.SETFILTER(Address,Address);
      IF "Address 2" <> '' THEN
        pContact.SETFILTER("Address 2","Address 2");
      IF "Post Code" <> '' THEN
        pContact.SETFILTER("Post Code","Post Code");
      IF City <> '' THEN
        pContact.SETFILTER(City,City);
      IF "Country/Region Code" <> '' THEN
        pContact.SETFILTER("Country/Region Code","Country/Region Code");
      IF "E-Mail" <> '' THEN
        pContact.SETFILTER("E-Mail","E-Mail");
      IF "Phone No." <> '' THEN
        pContact.SETFILTER("Phone No.","Phone No.");
      IF "Member No." <> '' THEN
        pContact.SETFILTER("Member No.", "Member No."); //IMH02.ST
      //<<IMH04.ST
      IF NoFilter <> '' THEN
        pContact.SETFILTER("No.", NoFilter);
      //>>IMH04.ST
      IF NOT IncludeRayed THEN
        pContact.SETRANGE(Rayed, FALSE);
      //<<IMH12
      IF VATRegistrationNo <> '' THEN
        pContact.SETRANGE("VAT Registration No.", VATRegistrationNo);
      IF RegistrationNo <> '' THEN
        pContact.SETRANGE("Registration No.", RegistrationNo);
      //>>IMH12
    END;

    PROCEDURE CreateContact@1100281000(pOpenCard@1100281002 : Boolean);
    VAR
      lContactSearchMgt@1100281000 : Codeunit 50097;
      lContact@1100281001 : Record 5050;
    BEGIN
      //Lance la cr‚ation d'un contact … partir des donn‚es de recherche
      SetFiltersToContact(TempContactFilter);
      lContactSearchMgt.CreateContact(TempContactFilter, pOpenCard);
      CloseFromCreate := TRUE;
      ResultContact := TempContactFilter."No.";
      CurrPage.CLOSE;
    END;

    PROCEDURE GetContact@1100281004() : Code[20];
    BEGIN
      IF CloseFromCreate THEN
        EXIT(ResultContact)
      ELSE
        EXIT(CurrPage.ContactList.FORM.GetContactNo);
    END;

    LOCAL PROCEDURE ResetFields@1100281007();
    BEGIN
      //IMH01
      //Remise … vide des champs
      Name := '';
      Surname := '';
      "First Name" := '';
      "Phone No." := '';
      "E-Mail" := '';
      "Country/Region Code" := '';
      "Post Code" := '';
      City := '';
      Address := '';
      "Address 2" := '';
      "Corporate No." := '';
      "Corporate Region Code" := '';
      CorporateName := '';
      CorporateRegionCode := '';
      "Member No." := ''; //IMH02.ST
      MemberNo := '';
      NoFilter := ''; //IMH04.ST
      ContactPostCode := '';
      ContactCity := '';
      MODIFY(FALSE);
      CurrPage.UPDATE(FALSE);
      CurrPage.ContactList.FORM.DeleteResults;
    END;

    LOCAL PROCEDURE EnableFields@1100281008();
    BEGIN
      IF NOT (ServiceContact IN [ServiceContact::Beneficiary,ServiceContact::All]) THEN BEGIN
        "Corporate No." := '';
        "Corporate Region Code" := '';
        "Member No." := ''; //IMH02.ST
        SearchBenef := FALSE; //IMH02.ST
      END
      ELSE
        SearchBenef := TRUE;
      //<<IMH11.ISAT.EBA
      //SearchProvider := (ServiceContact = ServiceContact::Provider); //IMH04.ST
      SearchProvider := (ServiceContact = ServiceContact::Provider);
      //>>IMH11.ISAT.EBA
      NotSearchBenef := NOT SearchBenef;
    END;

    PROCEDURE ClosedFromCreate@1100281003(VAR pContactNo@1100281000 : Code[20]) : Boolean;
    BEGIN
      IF NOT CloseFromCreate THEN
        EXIT(FALSE);
      pContactNo := ResultContact;
      EXIT(TRUE);
    END;

    PROCEDURE FormSearchContact@1100281001(pFromButton@1100481000 : Boolean);
    VAR
      lTempContact@1100281001 : TEMPORARY Record 5050;
      lContactSearchMgt@1100281002 : Codeunit 50097;
      lTempText@1100281000 : Text[1024];
    BEGIN
      //IMH01
      IF NOT pFromButton THEN
        EXIT;

      "Member No." := MemberNo;  //IMH08
      CurrPage.ContactList.FORM.DeleteResults;

      SetFiltersToContact(TempContactFilter);

      IF NOT lContactSearchMgt.CheckSearchFields(TempContactFilter,pFromButton) THEN
        EXIT;
      DialBox.OPEN(Text003);
      lContactSearchMgt.CreateContactList(TempContactFilter,lTempContact,lTempText);
      CurrPage.ContactList.FORM.LoadResult(lTempContact,lTempText, ServiceContact);
      DialBox.CLOSE;

      // Rend actif le menu cr‚er contact
      //ButtonCreateEnable := TRUE; // IMH06.ISAT.MA
    END;

    PROCEDURE CreateProvider@1100281002(pOpenCard@1100281000 : Boolean);
    VAR
      lContactSearchMgt@1100281001 : Codeunit 50097;
    BEGIN
      // IMH07.ISAT.MA
      SetFiltersToContact(TempContactFilter);
      lContactSearchMgt.CreateProvider(TempContactFilter,pOpenCard);
      CloseFromCreate := TRUE;
      ResultContact := TempContactFilter."No.";
      CurrPage.CLOSE;
    END;

    BEGIN
    {
      /** @r IMH12 @d 07/11/11 @a ISAT.ZW @v IMH6.01.020 @s Gestion prestataire
          @c recherche nø siret */
      /** @r IMH11 @d 02/11/11 @a ISAT.EBA @v IMH6.01.020 @s Gestion prestataire
          @c Affichage bouton cr‚er prestataire */
      /** @r IMH10 @d 15/09/11 @a ISAT.LLT @v IMH6.01.002 @s Gestion des contact @c Ouvre la fiche sur OK */
      /** @r IMH09 @d 30/08/11 @a ISAT.LLT @v IMH6.01.002 @s Gestion des contact @c Possibilit‚ de filtrer sur plusieurs codes postaux */
      /** @r IMH08 @d 28/0-/11 @a ISAT.ZW @v IMH6.01.020 @s Gestion prestataire
          @c champ no beneficiaire passer en variable pour evider OnValidate du champ   */
      /** @r IMH07 @d 05/05/11 @a ISAT.MA @v IMH6.01.020 @s Gestion prestataire
          @c Ajout bouton cr‚er prestataire   */
      /** @r IMH06 @d 08/04/11 @a ISAT.MA @v IMH6.01.020 @s Gestion prestataire
          @c Affichage du bouton cr‚er contact dŠs l'ouverture du formulaire  */
      /** @r IMH05 @d 07/04/11 @a ISAT.ST @v IMH6.01.020 @s Gestion prestataire
          @c filtre nø / D‚clencheurs DPS */
      /** @r IMH04 @d 16/02/11 @a ISAT.ST @v IMH6.01.020 @s Gestion prestataire
          @c Finalisation IMH03 */
      /** @r IMH03 @d 07/02/11 @a ISAT.PC @v IMH6.01.020 @s Gestion prestataire
          @c Ajout Regsitration No. et VAT Registration No
          @c renommage option ServiceContact supplier en provider */
      /** @r IMH02 @d 26/10/10 @a ISAT.ST @v IMH6.01.002 @s Gestion des contact
          @c Modification SetContactFilter
          @c Ajout Member No. */
      /** @r IMH01 @d 27/09/10 @a ISAT.LLT @v IMH6.01.002 @s Gestion des contact @c recherche de contact */
    }
    END.
  }
}