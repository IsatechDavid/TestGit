OBJECT Page 50120 Provider Search Card
{
  OBJECT-PROPERTIES
  {
    Date=07/05/14;
    Time=11:52:15;
    Modified=Yes;
    Version List=IMH6.01,IMH6.01.P011;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Provider Search Card;
               FRA=Recherche prestataire];
    SourceTable=Table2000000026;
    DataCaptionExpr=' ';
    PageType=Document;
    RefreshOnActivate=Yes;
    PromotedActionCategoriesML=[ENU=,Process,,Lines,Creation;
                                FRA=,Process,,Lines,Cr‚ation];
    OnOpenPage=VAR
                 lProviderSearchBasket@1100281000 : Record 51002;
                 lBasketBuffer@1100281001 : TEMPORARY Record 51002;
               BEGIN
                 IF UserSetup.GET(UPPERCASE(USERID)) THEN
                   Debug := UserSetup."Search Trace Enable"
                 ELSE
                   Debug := FALSE;
                 lBasketBuffer.DELETEALL();
                 SearchType := SearchType::DPR;
                 RealKm := TRUE;
                 SearchDate := WORKDATE;
                 SearchTime := TIME;
                 ProStatProspect := TRUE;
                 ProStatCasual := TRUE;
                 ProStatIntegration := TRUE;
                 ProStatTrialPeriod := TRUE;
                 ProStatApproval := TRUE;
                 ProStatOperational := TRUE;
                 ISAllSpeEnabled := TRUE;
                 //<<IMH23
                 //CorporateExclusionBool := TRUE; //IMh18
                 //CorporateExclusion := CorporateExclusion::Oui;//IMh18
                 ExclusionDeffinitive := ExclusionDeffinitive::No;
                 BlackListOption := BlackListOption::No;
                 //>>IMH23
                 //<<IMH24
                 SpecialitySearch := TRUE;
                 //>>IMH24

                 //<<IMH17 isat.nfo
                 InvisibleOpenSpace := 2;
                 //>>IMH17 isat.nfo
                 DPRSearchEnable := SearchType = SearchType::DPR;
                 GetServiceUrgent;
                 GeoEditable := NOT ShowProductInformation; //IMH19.ST
               END;

    OnQueryClosePage=BEGIN
                       IF CloseAction = ACTION::OK THEN
                         IsOk := TRUE;

                       EXIT(TRUE);
                     END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1100281026;1 ;Action    ;
                      Name=Search;
                      ShortCutKey=Maj+Ctrl+S;
                      CaptionML=[ENU=Sea&rch;
                                 FRA=&Recherche];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Find;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 Search();
                               END;
                                }
      { 1100281019;1 ;Action    ;
                      Name=Call;
                      CaptionML=[ENU=C&all;
                                 FRA=&Appel];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=AddContacts;
                      PromotedCategory=New;
                      OnAction=BEGIN
                                 CallProvider();
                               END;
                                }
      { 1100281015;1 ;Action    ;
                      Name=CreateTrayLine;
                      CaptionML=[ENU=Create Tray Line;
                                 FRA=Cr‚er activit‚ corbeille];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=BinContent;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CreateTrayLine_OnAction();
                               END;
                                }
      { 1100281037;1 ;Action    ;
                      Name=CreateButton;
                      CaptionML=[ENU=&Create Providert;
                                 FRA=&Cr‚er prestataire];
                      Promoted=Yes;
                      Image=NewDocument;
                      PromotedCategory=Category5;
                      OnAction=BEGIN
                                 //IMH22
                                 CreateProvider(TRUE);
                               END;
                                }
      { 1100281049;1 ;Action    ;
                      Name=FollowUpCreationCtrl;
                      CaptionML=[ENU=Follow Up CreationCtrl;
                                 FRA=Cr‚ation suivi];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=ImplementPriceChange;
                      PromotedCategory=Category5;
                      OnAction=BEGIN
                                 CreateFollowUp;
                               END;
                                }
      { 1100281013;1 ;Action    ;
                      Name=Affect;
                      ShortCutKey=Maj+Ctrl+Z;
                      CaptionML=FRA=Affecter;
                      OnAction=BEGIN
                                 UpdateProviderSpecialization();
                               END;
                                }
      { 1100281012;1 ;Action    ;
                      Name=DeletePSRB;
                      CaptionML=FRA=Supprimer les prestataires }
      { 1100281002;1 ;Action    ;
                      Name=ProductLine;
                      CaptionML=[ENU=Product Line;
                                 FRA=Ligne produit];
                      Promoted=Yes;
                      Image=NewSparkle;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 lServiceHeader@1100281000 : Record 5900;
                                 lSHHabitatCard@1100281001 : Page 50103;
                               BEGIN
                                 IF lServiceHeader.GET(lServiceHeader."Document Type"::Invoice,ServiceHeaderNo) THEN BEGIN
                                   lSHHabitatCard.SETRECORD(lServiceHeader);
                                   lSHHabitatCard.RUNMODAL();
                                 END;
                               END;
                                }
      { 1100281011;1 ;Action    ;
                      Name=Map;
                      CaptionML=[ENU=Map;
                                 FRA=Carte];
                      Promoted=Yes;
                      Image=Segment;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 lPSRB@1100281004 : TEMPORARY Record 51000;
                                 lGeographicalReference@1100281003 : Record 50013;
                                 lServiceHeader@1100281001 : Record 5900;
                                 lHtmlPage@1100281000 : Page 50174;
                               BEGIN
                                 CurrPage.ResultProviderSearchSubpage.FORM.GetRecords(lPSRB);
                                 //<<IMH25.PC
                                 //<<IMH14.ST
                                 //IF PostCodeRec.GET(PostCode, sCity) THEN
                                 //  lHtmlPage.SetPointToShow(STRSUBSTNO('%1,%2',PostCodeRec."Latitude Lambert 2E",PostCodeRec."Longitude Lambert 2E"));
                                 //>>IMH14.ST
                                 PostCodeRec.SETRANGE(Code,PostCode);
                                 PostCodeRec.SETRANGE(City,sCity);
                                 IF PostCodeRec.FINDFIRST THEN BEGIN
                                   lHtmlPage.SetPointToShow(STRSUBSTNO('%1,%2',PostCodeRec."Latitude Lambert 2E",PostCodeRec."Longitude Lambert 2E"));
                                 END ELSE BEGIN
                                   IF lServiceHeader.GET(lServiceHeader."Document Type"::Invoice,ServiceHeaderNo) THEN BEGIN
                                     IF lGeographicalReference.GET(lServiceHeader."Ship-to Geo. Reference Code") THEN BEGIN
                                       lHtmlPage.SetPointToShow(
                                         STRSUBSTNO('%1,%2',lGeographicalReference."Latitude Lambert 2E",lGeographicalReference."Longitude Lambert 2E"));
                                     END ELSE BEGIN
                                       PostCodeRec.SETRANGE(Code,lServiceHeader."Ship-to Post Code");
                                       PostCodeRec.SETRANGE(City,lServiceHeader."Ship-to City");
                                       IF NOT PostCodeRec.FINDFIRST THEN BEGIN
                                         PostCodeRec.SETRANGE(City);
                                         PostCodeRec.SETRANGE("City 2",lServiceHeader."Ship-to City");
                                       END;
                                       IF PostCodeRec.FINDFIRST THEN BEGIN
                                         lHtmlPage.SetPointToShow(STRSUBSTNO('%1,%2',PostCodeRec."Latitude Lambert 2E",PostCodeRec."Longitude Lambert 2E"));
                                       END;
                                     END;
                                   END;
                                 END;
                                 //>>IMH25.PC
                                 lHtmlPage.LoadProviderSearch(lPSRB);
                                 lHtmlPage.RUNMODAL();
                               END;
                                }
      { 1000000000;1 ;Action    ;
                      Name=ProviderList;
                      CaptionML=[ENU=Providers List;
                                 FRA=Liste des prestataires];
                      RunObject=Page 50001;
                      Promoted=Yes;
                      Visible=FALSE;
                      Image=TeamSales;
                      PromotedCategory=Process;
                      RunFormMode=View }
      { 1100281033;1 ;Action    ;
                      Name=Provider Card;
                      CaptionML=[ENU=Provider Card;
                                 FRA=Fiche prestataire];
                      Promoted=Yes;
                      Image=ExportSalesPerson;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 ShowProviderCard;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1100281045;1;Group  ;
                CaptionML=[ENU=Search;
                           FRA=Recherche] }

    { 1100281040;2;Field  ;
                CaptionML=[ENU=Search Type;
                           FRA=Type de recherche];
                SourceExpr=SearchType;
                Importance=Additional;
                OnValidate=BEGIN
                             ISAllSpeEnabled :=  (SearchType > SearchType::Entreprise);
                             IF (SearchType <= SearchType::Entreprise) THEN
                               AllSpecialization := FALSE;
                             DPRSearchEnable := SearchType = SearchType::DPR;
                           END;
                            }

    { 1100281008;2;Group  ;
                Name=ServiceHeader;
                CaptionML=[ENU=Service Header;
                           FRA=Ligne de produit];
                Visible=ShowProductInformation;
                GroupType=Group }

    { 1100281052;3;Field  ;
                CaptionML=[ENU=Service Header No.;
                           FRA=Nø ligne produit];
                SourceExpr=ServiceHeaderNo;
                TableRelation="Service Header".No. WHERE (Document Type=CONST(Invoice));
                Editable=FALSE;
                OnValidate=VAR
                             lServiceHeader@1100281000 : Record 5900;
                           BEGIN
                             ProductNoValidate();
                             //<<IMH02.isat.PC
                             SubformFilters;
                             //>>IMH02.isat.PC
                             GetServiceUrgent;
                           END;
                            }

    { 1100281001;3;Field  ;
                Lookup=No;
                CaptionML=FRA=B‚n‚ficiaire;
                SourceExpr=ContactNo;
                Editable=FALSE;
                OnLookup=BEGIN
                           LookupContact();
                         END;
                          }

    { 1100281003;3;Field  ;
                Name=AddressCode;
                CaptionML=[ENU=Address Code;
                           FRA=Code adresse];
                SourceExpr=AddressCode;
                TableRelation="Contact Alt. Address"."Contact No." WHERE (Contact No.=FILTER(CONTACTNO));
                Importance=Additional;
                Editable=FALSE;
                OnLookup=BEGIN
                           LookupAddressCode();
                         END;
                          }

    { 1100281034;3;Field  ;
                Name=ServAddress;
                CaptionML=[ENU=Address;
                           FRA=Adresse];
                SourceExpr=ServAddress;
                Editable=FALSE }

    { 1100281035;3;Field  ;
                Name=IntervCPCity;
                CaptionML=[ENU=Post Code - City;
                           FRA=CP - Ville];
                SourceExpr=ServCPCity;
                Editable=FALSE }

    { 1100281007;3;Field  ;
                Lookup=No;
                CaptionML=[ENU=Corporate No.;
                           FRA=Nø grand compte];
                SourceExpr=CorporateNo;
                Visible=false;
                Editable=FALSE;
                OnLookup=BEGIN
                           //LookupCorporateNo();
                         END;
                          }

    { 1000000001;3;Field  ;
                Lookup=No;
                CaptionML=FRA=Grand compte;
                SourceExpr=CorporateName;
                Editable=false;
                OnValidate=VAR
                             lCustomer@1100281000 : Record 18;
                           BEGIN
                             //IMH14.ST
                             IF CorporateName = '' THEN
                               CorporateNo := ''
                             ELSE BEGIN
                               lCustomer.RESET;
                               lCustomer.SETFILTER("No.",CorporateName);
                               IF (lCustomer.COUNT > 1) THEN
                               BEGIN

                               END ELSE BEGIN
                                 IF lCustomer.GET(CorporateNo) THEN
                                   IF lCustomer.Name = CorporateName THEN
                                     EXIT;
                                 lCustomer.SETRANGE("Service Corporate", TRUE);
                                 lCustomer.SETRANGE("Parent Customer No.", '');
                                 lCustomer.SETRANGE("Search Name", CorporateName);
                                 IF lCustomer.COUNT = 1 THEN BEGIN
                                   lCustomer.FINDFIRST;
                                   CorporateNo := lCustomer."No.";
                                   EXIT;
                                 END;
                                 lCustomer.SETFILTER("Search Name", STRSUBSTNO('%1*', CorporateName));
                                 IF lCustomer.COUNT = 1 THEN BEGIN
                                   lCustomer.FINDFIRST;
                                   CorporateNo := lCustomer."No.";
                                   EXIT;
                                 END;
                                 IF FORM.RUNMODAL(0, lCustomer) = ACTION::LookupOK THEN BEGIN
                                   CorporateName := lCustomer.Name;
                                   CorporateNo := lCustomer."No.";
                                 END
                                 ELSE BEGIN
                                   CorporateName := '';
                                   CorporateNo := '';
                                 END;
                               END;
                             END;
                           END;

                OnLookup=VAR
                           lContact@1100281000 : Record 5050;
                           lCustomer@1100281003 : Record 18;
                         BEGIN
                           lCustomer.RESET();
                           lCustomer.SETRANGE("Service Corporate", TRUE);
                           lCustomer.SETRANGE("Parent Customer No.", '');
                           IF FORM.RUNMODAL(0,lCustomer) = ACTION::LookupOK THEN BEGIN
                             CorporateName :=lCustomer.Name;
                             CorporateNo := lCustomer."No.";
                           END;

                           //lContact.RESET();
                           //lContact.SETRANGE("Service Contact",lContact."Service Contact"::"Corporate Customer");
                           //IF FORM.RUNMODAL(0,lContact) = ACTION::LookupOK THEN BEGIN
                           //  CorporateName :=lContact.Name;
                           //  CorporateNo := lContact."No.";
                           //END;
                         END;
                          }

    { 1100281018;2;Group  ;
                Name=<Geographical>;
                CaptionML=[ENU=Geographical;
                           FRA=G‚ographique];
                Editable=GeoEditable;
                GroupType=Group }

    { 1100281020;3;Field  ;
                CaptionML=FRA=Ville;
                SourceExpr=sCity;
                OnValidate=BEGIN
                             PostCode := '';
                             AreaCode := '';
                             TerritoryCode := '';
                             RegionalCoordinator := '';
                             NetworkFacilitator := '';
                             NetworkAssistant := '';
                             Country := '';

                             //"Post Code".ValidateCity(sCity,PostCode,Country);
                             PostCodeRec.ValidateCity2(
                               sCity,
                               PostCode,
                               AreaCode,
                               TerritoryCode,
                               IMHTerritoryCode,
                               RegionalCoordinator,
                               NetworkFacilitator,
                               NetworkAssistant,
                               Country); //IMH18 Ajout Code pays
                           END;

                OnLookup=BEGIN
                           PostCode := '';
                           AreaCode := '';
                           TerritoryCode := '';
                           RegionalCoordinator := '';
                           NetworkFacilitator := '';
                           NetworkAssistant := '';
                           Country := '';
                           PostCodeRec.LookUpCity(sCity,PostCode,Country,TRUE);
                         END;
                          }

    { 1100281021;3;Field  ;
                CaptionML=FRA=Code postal;
                SourceExpr=PostCode;
                OnValidate=VAR
                             lInt@1100281001 : Integer;
                           BEGIN
                             IF EVALUATE(lInt,PostCode) AND (STRLEN(PostCode) = 5) THEN
                             BEGIN
                               sCity := '';
                               AreaCode := '';
                               TerritoryCode := '';
                               RegionalCoordinator := '';
                               NetworkFacilitator := '';
                               NetworkAssistant := '';
                               Country := '';
                               PostCodeRec.ValidatePostCode2(
                                 sCity,
                                 PostCode,
                                 AreaCode,
                                 TerritoryCode,
                                 IMHTerritoryCode,
                                 RegionalCoordinator,
                                 NetworkFacilitator,
                                 NetworkAssistant,
                                 Country); //IMH18 Ajout Code pays
                             END ELSE
                               sCity := '';
                           END;

                OnLookup=BEGIN
                           sCity := '';
                           AreaCode := '';
                           TerritoryCode := '';
                           RegionalCoordinator := '';
                           NetworkFacilitator := '';
                           NetworkAssistant := '';
                           Country := '';
                           PostCodeRec.LookUpPostCode(sCity,PostCode,Country,TRUE);
                         END;
                          }

    { 1100281014;3;Field  ;
                CaptionML=[ENU=D‚partment Filter;
                           FRA=D‚partement];
                SourceExpr=AreaCode;
                Importance=Additional;
                OnValidate=BEGIN
                             TerritoryCode := '';
                           END;

                OnLookup=BEGIN
                           AreaCode := CoordinatorMgt.GetDepartmentFilter();
                         END;
                          }

    { 1100281016;3;Field  ;
                Name=<TerritoryCode>;
                CaptionML=FRA=R‚gion;
                SourceExpr=TerritoryCode;
                TableRelation=Territory;
                OnValidate=BEGIN
                             AreaCode := '';
                           END;
                            }

    { 1100281000;2;Group  ;
                CaptionML=[ENU=Provider Statuts;
                           FRA=Statut prestataire];
                Visible=DPRSearchEnable;
                GroupType=Group }

    { 1100281010;3;Field  ;
                CaptionML=FRA=Prospect;
                SourceExpr=ProStatProspect }

    { 1100281025;3;Field  ;
                CaptionML=FRA=Occasionnel;
                SourceExpr=ProStatCasual }

    { 1100281027;3;Field  ;
                CaptionML=FRA=Int‚gration;
                SourceExpr=ProStatIntegration }

    { 1100281028;3;Field  ;
                CaptionML=FRA=P‚riode essai;
                SourceExpr=ProStatTrialPeriod }

    { 1100281029;3;Field  ;
                CaptionML=FRA=Labellis‚;
                SourceExpr=ProStatApproval }

    { 1100281030;3;Field  ;
                CaptionML=FRA=Op‚rationnel;
                SourceExpr=ProStatOperational }

    { 1100281017;2;Group  ;
                Name=<Parameters>;
                CaptionML=[ENU=Parameters;
                           FRA=ParamŠtres pris en compte];
                GroupType=Group }

    { 1100281023;3;Field  ;
                CaptionML=[ENU=Status date;
                           FRA=Date de situation];
                SourceExpr=SearchDate;
                Visible=FALSE }

    { 1100281024;3;Field  ;
                CaptionML=[ENU=Status Time;
                           FRA=Heure de situation];
                SourceExpr=SearchTime;
                Visible=FALSE }

    { 1100281043;3;Field  ;
                CaptionML=[ENU=Distance;
                           FRA=Distance R‚elle];
                SourceExpr=RealKm }

    { 1100281005;3;Field  ;
                CaptionML=[ENU=Emergency;
                           FRA=Urgent];
                OptionCaptionML=[ENU=" ,Yes,No";
                                 FRA=" ,Oui,Non"];
                SourceExpr=Urgent }

    { 1100281053;3;Field  ;
                CaptionML=[ENU=All Specializations;
                           FRA=Toutes les sp‚cialit‚s];
                SourceExpr=AllSpecialization;
                Enabled=ISAllSpeEnabled }

    { 1100281048;3;Field  ;
                CaptionML=[ENU=Invisible Open Space;
                           FRA=Invisible plateau];
                OptionCaptionML=[ENU=" ,Yes,No";
                                 FRA=" ,Oui,Non"];
                SourceExpr=InvisibleOpenSpace }

    { 1100281044;3;Field  ;
                CaptionML=[ENU=Black List;
                           FRA=Black List];
                OptionCaptionML=[ENU=" ,Yes,No";
                                 FRA=" ,Oui,Non"];
                SourceExpr=BlackListOption;
                Enabled=DPRSearchEnable }

    { 1100281038;3;Field  ;
                CaptionML=[ENU=Permanent Exclusion;
                           FRA=Exclusion d‚finitive];
                OptionCaptionML=[ENU=" ,Yes,No";
                                 FRA=" ,Oui,Non"];
                SourceExpr=ExclusionDeffinitive;
                Enabled=DPRSearchEnable }

    { 1100281039;3;Field  ;
                CaptionML=[ENU=Temp. Exclusion;
                           FRA=Exclusion temporaire];
                OptionCaptionML=[ENU=" ,Yes,No";
                                 FRA=" ,Oui,Non"];
                SourceExpr=ExclusionTemp;
                Enabled=DPRSearchEnable }

    { 1100281041;3;Field  ;
                CaptionML=[ENU=Calendar;
                           FRA=Disponibilit‚ calendaire];
                OptionCaptionML=[ENU=" ,Yes,No";
                                 FRA=" ,Oui,Non"];
                SourceExpr=CalendarDispo;
                Enabled=DPRSearchEnable }

    { 1100281042;3;Field  ;
                CaptionML=[ENU=Business Hours;
                           FRA=Disponibilit‚ horaire];
                OptionCaptionML=[ENU=" ,Yes,No";
                                 FRA=" ,Oui,Non"];
                SourceExpr=TimeDispo;
                Enabled=DPRSearchEnable }

    { 1100281050;3;Field  ;
                CaptionML=[ENU=Provider Agreement;
                           FRA=Agr‚ment prestataire];
                OptionCaptionML=[ENU=" ,Yes,No";
                                 FRA=" ,Oui,Non"];
                SourceExpr=CorporateExclusion;
                Enabled=DPRSearchEnable;
                OnValidate=BEGIN
                             //<<IMH23
                             CorporateExclusionBool := CorporateExclusion <> CorporateExclusion::" ";
                             //>>IMH23
                           END;
                            }

    { 1100281036;3;Group  ;
                Visible=CorporateExclusionBool;
                GroupType=Group }

    { 1100281031;4;Field  ;
                CaptionML=[ENU=Corporate No.;
                           FRA=Nø grand compte];
                SourceExpr=AgreeCorporateNo;
                TableRelation=Customer.No. WHERE (Service Contact=CONST(Corporate Customer)) }

    { 1100281032;4;Field  ;
                CaptionML=[ENU=Service Order Type;
                           FRA=Type produit];
                SourceExpr=AgreeServOrderType;
                TableRelation="Service Order Type".Code }

    { 1100281046;3;Field  ;
                CaptionML=FRA=Sp‚cialit‚;
                SourceExpr=SpecialitySearch;
                Enabled=DPRSearchEnable }

    { 1100281022;3;Field  ;
                CaptionML=[ENU=Enabled Trace;
                           FRA=Activer la trace];
                SourceExpr=Debug;
                OnValidate=BEGIN
                             IF Debug THEN BEGIN
                               IF UserSetup.GET(UPPERCASE(USERID)) THEN BEGIN
                                 IF (UserSetup."Search Trace Path" = '') OR (UserSetup."Search Trace File Name" = '') THEN
                                   ERROR(Text002,USERID);
                                 UserSetup."Search Trace Enable" := Debug;
                                 UserSetup.MODIFY();
                               END ELSE BEGIN
                                 ERROR(Text002,USERID);
                               END;
                             END ELSE BEGIN
                               IF UserSetup.GET(UPPERCASE(USERID)) THEN BEGIN
                                 UserSetup."Search Trace Enable" := FALSE;
                                 UserSetup.MODIFY();
                               END;
                             END;
                           END;
                            }

    { 1100281009;1;Part   ;
                Name=SpeProviderSearchSubpage;
                PagePartID=Page50121 }

    { 1100281006;1;Part   ;
                Name=ResultProviderSearchSubpage;
                PagePartID=Page50150 }

    { 1100281004;1;Part   ;
                Name=QualProviderSearchSubpage;
                PagePartID=Page50122 }

  }
  CODE
  {
    VAR
      PostCodeRec@1100281021 : Record 225;
      UserSetup@1100281022 : Record 91;
      ProviderSearchBasket@1100281038 : TEMPORARY Record 51002;
      ProviderSearchCom@1100281017 : Codeunit 50066;
      CoordinatorMgt@1100281013 : Codeunit 50016;
      TrayLineEntryNo@1100281041 : Integer;
      Urgent@1100281001 : ' ,Yes,No';
      SearchType@1100281004 : 'Standard,Avanc‚e,Elargie,Entreprise,Sequenc‚e,DPR';
      InvisibleOpenSpace@1100281006 : ' ,Oui,Non';
      CorporateExclusion@1100281007 : ' ,Oui,Non';
      CorporateExclusionBool@1000000000 : Boolean INDATASET;
      ProviderStatus@1100281028 : 'Prospect,Occasionnel,Int‚gration,P‚riode essai,Labellis‚,Op‚rationnel';
      AllSpecialization@1100281008 : Boolean;
      DPR@1100281009 : Boolean;
      RealKm@1100281005 : Boolean;
      Text19067555@19040144 : TextConst 'ENU=Specialization;FRA=Sp‚cialit‚s';
      Text19050573@19052489 : TextConst 'ENU=Provider Found;FRA=Prestataires trouv‚s';
      Text19020326@19029018 : TextConst 'ENU=Qualification;FRA=Qualifications';
      Text19035884@19042951 : TextConst 'ENU=Search history;FRA=Historique recherche';
      Text001@1100281012 : TextConst 'ENU=Bad address;FRA=Adresse incomplŠte';
      Debug@1100281023 : Boolean;
      ProStatProspect@1100281045 : Boolean;
      ProStatCasual@1100281039 : Boolean;
      ProStatIntegration@1100281037 : Boolean;
      ProStatTrialPeriod@1100281036 : Boolean;
      ProStatApproval@1100281034 : Boolean;
      ProStatOperational@1100281033 : Boolean;
      ISAllSpeEnabled@1100281032 : Boolean INDATASET;
      DPRSearchEnable@1100281031 : Boolean INDATASET;
      IsOk@1100281030 : Boolean;
      ShowProductInformation@1100281029 : Boolean INDATASET;
      ContactNo@1100281003 : Code[20];
      AddressCode@1100281002 : Code[10];
      TerritoryCode@1100281015 : Code[20];
      IMHTerritoryCode@1100281046 : Code[20];
      AreaCode@1100281016 : Code[20];
      Country@1100281044 : Code[10];
      NetworkAssistant@1100281043 : Code[20];
      NetworkFacilitator@1100281042 : Code[20];
      RegionalCoordinator@1100281020 : Code[20];
      ProviderNo@1100281014 : Code[20];
      PostCode@1100281018 : Code[20];
      ServiceHeaderNo@1100281040 : Code[20];
      TeamCode@1100281010 : Code[10];
      CorporateNo@1100281035 : Code[20];
      AgreeCorporateNo@1100281047 : Code[20];
      AgreeServOrderType@1100281048 : Code[10];
      ServAddress@1100281051 : Text[150];
      ServCPCity@1100281011 : Text[1024];
      CorporateName@1100281000 : Text[50];
      sCity@1100281019 : Text[30];
      Text002@1100281024 : TextConst 'ENU=You must set the trace parameters in the user setup %1;FRA=vous devez parametrer la trace dans les parametres de l''utilisateur %1';
      SearchDate@1100281025 : Date;
      SearchTime@1100281026 : Time;
      Text003@1100281027 : TextConst 'ENU=In the case of a standard or advanced search DPR you must enter the postal code and city;FRA="Dans le cas d''une recherche DPR standard ou avanc‚e vous devez saisir le code postal et la ville "';
      GeoEditable@1000000001 : Boolean INDATASET;
      CalendarDispo@1100281054 : ' ,Yes,No';
      TimeDispo@1100281053 : ' ,Yes,No';
      ExclusionTemp@1100281052 : ' ,Yes,No';
      ExclusionDeffinitive@1100281050 : ' ,Yes,No';
      BlackListOption@1100281049 : ' ,Yes,No';
      SpecialitySearch@1100281055 : Boolean INDATASET;

    PROCEDURE LookupAddressCode@1100281000();
    VAR
      lContactAltAddress@1100281000 : Record 5051;
    BEGIN
      lContactAltAddress.RESET();
      lContactAltAddress.SETRANGE("Contact No.",ContactNo);
      IF FORM.RUNMODAL(0,lContactAltAddress) = ACTION::LookupOK THEN
        AddressCode :=lContactAltAddress.Code;
    END;

    PROCEDURE LookupContact@1100281006();
    VAR
      lContact@1100281001 : Record 5050;
      lContactAltAddress@1100281000 : Record 5051;
    BEGIN
      lContact.RESET();
      lContact.SETRANGE("Service Contact",lContact."Service Contact"::Beneficiary);
      IF FORM.RUNMODAL(0,lContact) = ACTION::LookupOK THEN BEGIN
        ContactNo := lContact."No.";
        lContactAltAddress.RESET();
        lContactAltAddress.SETRANGE("Contact No.",ContactNo);
        IF lContactAltAddress.FINDFIRST() THEN
          AddressCode :=lContactAltAddress.Code;
      END;
    END;

    PROCEDURE Search@1100281004();
    VAR
      lProviderSearchMgt@1100281000 : Codeunit 50000;
      lContactAltAddress@1100281001 : Record 5051;
      lBuffer@1100281002 : TEMPORARY Record 51000;
      lProviderSearchBasket@1100281003 : TEMPORARY Record 51002;
      lQualificationBuffer@1100281004 : TEMPORARY Record 50079;
      lPSRB@1100281005 : TEMPORARY Record 51000;
      lPostCode@1100281008 : Record 225;
      lProviderAgreement@1100281010 : Record 50012;
      lServiceSearchLedgerEntry@1100281012 : Record 50027;
      lServiceHeader@1100281013 : Record 5900;
      lGeoFilterType@1100281006 : ' ,Territory Code,Area Code,Post Code';
      lGeoFilter@1100281007 : Text[1024];
      lGeoCode@1100281009 : Code[10];
      lDelete@1100281011 : Boolean;
      lOK@1100281014 : Boolean;
    BEGIN
      WITH lPSRB DO BEGIN
        IF PostCode <> '' THEN BEGIN
          lGeoFilterType := lGeoFilterType::"Post Code";
          lGeoFilter := PostCode; // + '|' + sCity;
          //<<IMH09 isat.nfo
          IF (STRLEN(PostCode)= 5) AND (sCity <> '') THEN
            IF lPostCode.GET(PostCode,sCity) THEN
              IF lPostCode."Geo. Reference Code" <> '' THEN
                lGeoFilter := lPostCode."Geo. Reference Code";
          //>>IMH09 isat.nfo
        END ELSE IF AreaCode <> '' THEN BEGIN
          lGeoFilterType := lGeoFilterType::"Area Code";
          lGeoFilter := AreaCode;
        END ELSE IF TerritoryCode <> '' THEN BEGIN
          lGeoFilterType := lGeoFilterType::"Territory Code";
          lGeoFilter := TerritoryCode;
        END ELSE BEGIN
          lGeoFilterType := lGeoFilterType::" ";
          lGeoFilter := '';
        END;

        lPSRB.DELETEALL;
        lProviderSearchBasket.DELETEALL;
        CurrPage.ResultProviderSearchSubpage.FORM.DelRecords();
        IF lContactAltAddress.GET(ContactNo,AddressCode) THEN;// BEGIN

        IF (ServiceHeaderNo = '') AND
           ((SearchType = SearchType::Standard) OR (SearchType = SearchType::Avanc‚e))
        THEN BEGIN
          IF (PostCode = '') OR (sCity = '') THEN
            ERROR(Text003);
          IF lPostCode.GET(PostCode,sCity) THEN BEGIN
            lGeoFilterType := lGeoFilterType::"Post Code";
            lGeoFilter := lPostCode."Geo. Reference Code";
          END
        END;

        CurrPage.SpeProviderSearchSubpage.FORM.GETRECORDS(lProviderSearchBasket);
        //<<IMH16 ISAT.NFO
        //ProviderSearchCom.ClearAffectedProviderBuffer();
        lProviderSearchBasket.SETFILTER(lProviderSearchBasket."Provider No.",'<>%1','');
        IF lProviderSearchBasket.FINDSET() THEN BEGIN
          REPEAT
            ProviderSearchCom.addAffectedProviderBuffer(lProviderSearchBasket."Provider No.");
          UNTIL lProviderSearchBasket.NEXT() = 0;
        END;
        //>>IMH16 ISAT.NFO
        lProviderSearchBasket.SETRANGE(lProviderSearchBasket."Provider No.",'');
        CurrPage.QualProviderSearchSubpage.FORM.GETRECORDS(lQualificationBuffer);
        //<<IMH12.isat.PC
        lProviderSearchMgt.SetParametersToFilter(lGeoFilterType,PostCode,sCity,AreaCode,TerritoryCode);
        //>>IMH12.isat.PC
        lProviderSearchMgt.SetServOrderTypeAgree(AgreeServOrderType); //IMH21

        lProviderSearchMgt.SetSearchDate(SearchDate);
        //<<IMH23
        lProviderSearchMgt.SetSearchParameter(
            CalendarDispo, TimeDispo, ExclusionTemp, ExclusionDeffinitive, BlackListOption, SpecialitySearch);
        //>>IMH23
        //<<IMH21
        lProviderSearchMgt.SequencedSearch(
          lProviderSearchBasket,lBuffer,lQualificationBuffer,
          lContactAltAddress,Urgent,
          //<<IMH21
          //CorporateNo,SearchType,
          AgreeCorporateNo,SearchType,
          //>>IMH21
          AllSpecialization,CorporateExclusion,InvisibleOpenSpace,RealKm,lGeoFilterType,lGeoFilter,ServiceHeaderNo);

        IF lBuffer.FINDSET THEN BEGIN
          REPEAT
            lDelete := FALSE;
            lPSRB := lBuffer;
            // Detection Hors Zone
            // FILTRE SUR LES STATUS
            //<<IMH12.isat.PC
            { OLD Version
            IF (lBuffer.Status = lBuffer.Status::Prospect) AND (NOT ProStatProspect) THEN BEGIN
            END ELSE begin
              IF (lBuffer.Status = lBuffer.Status::Casual) AND (NOT ProStatCasual) THEN BEGIN
              END ELSE begin
                IF (lBuffer.Status = lBuffer.Status::Integration) AND (NOT ProStatIntegration) THEN BEGIN
                END ELSE begin
                  IF (lBuffer.Status = lBuffer.Status::"Trial Period") AND (NOT ProStatTrialPeriod) THEN BEGIN
                  END ELSE begin
                    IF (lBuffer.Status = lBuffer.Status::Approval) AND (NOT ProStatApproval) THEN BEGIN
                    END ELSE begin
                      IF (lBuffer.Status = lBuffer.Status::Operational) AND (NOT ProStatOperational) THEN BEGIN
                      END ELSE BEGIN
            }
            IF SearchType = SearchType::DPR THEN
              IF NOT (((lBuffer.Status = lBuffer.Status::Prospect) AND ProStatProspect) OR
                 ((lBuffer.Status = lBuffer.Status::Casual) AND (ProStatCasual)) OR
                 ((lBuffer.Status = lBuffer.Status::Integration) AND (ProStatIntegration)) OR
                 ((lBuffer.Status = lBuffer.Status::"Trial Period") AND (ProStatTrialPeriod)) OR
                 ((lBuffer.Status = lBuffer.Status::Approval) AND (ProStatApproval)) OR
                 ((lBuffer.Status = lBuffer.Status::Operational) AND (ProStatOperational)))
              THEN BEGIN
                lDelete := TRUE;   //IMH13
              END;
            //>>IMH12.isat.PC
              IF NOT lDelete THEN BEGIN
                //<<IMH10
                //<<IMH27
                lOK := FALSE;
                IF lServiceHeader.GET(lServiceHeader."Document Type"::Invoice, ServiceHeaderNo) THEN BEGIN
                  lServiceSearchLedgerEntry.SETRANGE("Service No.", lServiceHeader."Service No.");
                  lServiceSearchLedgerEntry.SETRANGE("Service Header No.", lServiceHeader."No.");
                  lOK := TRUE;
                END ELSE BEGIN
                  IF (TeamCode <> '') AND (TrayLineEntryNo <> 0) THEN BEGIN
                    lServiceSearchLedgerEntry.SETCURRENTKEY("Team Code","Tray Line Entry No.","Provider No.");
                    lServiceSearchLedgerEntry.SETRANGE("Team Code", TeamCode);
                    lServiceSearchLedgerEntry.SETRANGE("Tray Line Entry No.", TrayLineEntryNo);
                    lOK := TRUE;
                  END;
                END;
                IF lOK  THEN BEGIN
                //>>IMH27
                  lServiceSearchLedgerEntry.SETRANGE("Provider No.", lBuffer."Provider No.");
                  lServiceSearchLedgerEntry.SETRANGE("DRP Search", FALSE);  //IMH27
                  IF lServiceSearchLedgerEntry.FINDLAST THEN BEGIN
                    lPSRB.Refused := TRUE;
                    lPSRB."Non-Accept. Reason Code" := lServiceSearchLedgerEntry."Non-acceptance Reason Code";
                    lPSRB."Non-Accept. Comments" := lServiceSearchLedgerEntry."Non-Accept. Comments";  //IMH27
                  END;
                  lServiceSearchLedgerEntry.SETRANGE("DRP Search", TRUE);  //IMH27
                  IF lServiceSearchLedgerEntry.FINDLAST THEN BEGIN
                    lPSRB."DPR Non-Accept. Reason Code" := lServiceSearchLedgerEntry."Non-acceptance Reason Code";
                  END;
                END;  //IMH27
                //>>IMH10
                //<<IMH13
                //lPSRB.SETRANGE("Provider No.", lBuffer."Provider No.");
                //IF lPSRB.ISEMPTY THEN
                  INSERT;
                //lPSRB.RESET;
                //>>IMH13
              END;
          UNTIL lBuffer.NEXT = 0;
        END;

        //<<IMH20
        lProviderSearchBasket.RESET;
        CurrPage.ResultProviderSearchSubpage.FORM.LoadProviderSearchBasket(lProviderSearchBasket);
        //>>IMH20
        CurrPage.ResultProviderSearchSubpage.FORM.LoadTable(lPSRB);
      END;
    END;

    PROCEDURE CallProvider@1100281001();
    VAR
      lWSHShell@1100281003 : Automation "{F935DC20-1CF0-11D0-ADB9-00C04FD58A0B} 1.0:{72C24DD5-D70A-438B-8A42-98424B88AFB8}:'Windows Script Host Object Model'.WshShell";
      lEmptyCode@1100281001 : Code[10];
    BEGIN
      lEmptyCode := '';
      ProviderSearchCom.setProviderNo(lEmptyCode);
      ProviderSearchCom.setSpecializationCode(lEmptyCode);
      IF ISCLEAR(lWSHShell) THEN
        CREATE(lWSHShell,FALSE,TRUE);
      lWSHShell.SendKeys('^+A');
      CLEAR(lWSHShell);
    END;

    PROCEDURE CreateFollowUp@1000000001();
    VAR
      lWSHShell@1100281003 : Automation "{F935DC20-1CF0-11D0-ADB9-00C04FD58A0B} 1.0:{72C24DD5-D70A-438B-8A42-98424B88AFB8}:'Windows Script Host Object Model'.WshShell";
    BEGIN
      // IMH26.PC
      IF ISCLEAR(lWSHShell) THEN BEGIN
        CREATE(lWSHShell,FALSE,TRUE);
      END;
      lWSHShell.SendKeys('^+T');
      CLEAR(lWSHShell);
    END;

    PROCEDURE ProductNoValidate@1100281003();
    VAR
      lMarketingSetup@1100281004 : Record 5079;
      lServiceHeader@1100281003 : Record 5900;
      lServiceCode@1100281002 : Record 50040;
      lServiceOrderType@1100281006 : Record 5903;
      lProviderSearchBasket@1100281001 : TEMPORARY Record 51002;
      lInterventionMgt@1100281005 : Codeunit 50014;
      lLineNo@1100281000 : Integer;
      lCustomer@1000000000 : Record 18;
      lCorporateRegion@1100281007 : Record 50058;
    BEGIN
      IF lServiceHeader.GET(lServiceHeader."Document Type"::Invoice,ServiceHeaderNo) THEN BEGIN
        ProviderSearchBasket.RESET;
        IF ProviderSearchBasket.ISEMPTY THEN
          lInterventionMgt.LoadProviderSearchBasket(ServiceHeaderNo,lProviderSearchBasket,lServiceOrderType)
        ELSE BEGIN
          ProviderSearchBasket.FINDFIRST;
          REPEAT
            lProviderSearchBasket := ProviderSearchBasket;
            lProviderSearchBasket.INSERT;
          UNTIL ProviderSearchBasket.NEXT  = 0;
        END;
        CurrPage.SpeProviderSearchSubpage.FORM.LoadTable(lProviderSearchBasket);
        ContactNo := lServiceHeader."Contact No.";

        CorporateNo := lServiceHeader."Corporate No.";
        //<<IMH21
        IF lServiceHeader."Corporate Region Code" <> '' THEN
          IF lCorporateRegion.GET(lServiceHeader."Corporate No.", lServiceHeader."Corporate Region Code") THEN
            CorporateNo := lCorporateRegion."Sell-to Customer No.";
        AgreeCorporateNo := CorporateNo;
        AgreeServOrderType := lServiceHeader."Service Order Type";
        //>>IMH21
        //IMH18
        IF lCustomer.GET(CorporateNo) THEN
          CorporateName := lCustomer.Name;


        IF lMarketingSetup.GET() THEN;
        AddressCode := lMarketingSetup."Main Address Code";
        lLineNo := 0;
        //<<IMH10
        { plante la recherche de type DPR
        IF sCity = '' THEN
          sCity := lServiceHeader."Ship-to City";
        IF PostCode = '' THEN
          PostCode := lServiceHeader."Ship-to Post Code";
        }
        //>>IMH10
        ServAddress :=
          lServiceHeader."Ship-to Address" + ' ' +
          lServiceHeader."Ship-to Address 2" + ' ' +
          lServiceHeader."Ship-to Address 3";
        ServCPCity := lServiceHeader."Ship-to Post Code" + ' ' + lServiceHeader."Ship-to City";
      END;
    END;

    PROCEDURE UpdateProviderSpecialization@1100281005();
    BEGIN
      //<<IMH20
      //CurrPage.SpeProviderSearchSubpage.FORM.UpdateProviderNo(
      //  ProviderSearchCom.getProviderNo(),ProviderSearchCom.getSpecializationCode());
      CurrPage.SpeProviderSearchSubpage.FORM.UpdateProviderNo(
        ProviderSearchCom.getProviderNo(),ProviderSearchCom.getSpecializationFilter());
      //>>IMH20
      //<<IMHXX isat.nfo
      ProviderSearchCom.addAffectedProviderBuffer(ProviderSearchCom.getProviderNo());
    END;

    PROCEDURE SubformFilters@1100281007();
    VAR
      lServiceHeader@1100281000 : Record 5900;
    BEGIN
      //<<IMH02.isat.PC
      IF NOT lServiceHeader.GET(lServiceHeader."Document Type"::Invoice,ServiceHeaderNo) THEN BEGIN
        EXIT;
      END;

      //CurrPage.SubServceSearchLedgEntPart.FORM.SetFilters(lServiceHeader."Service No.",lServiceHeader."No.",0);
      //CurrPage.SubServceSearchLedgEntPart.FORM.UpdateSubpage;
      //>>IMH02.isat.PC
    END;

    PROCEDURE CreateTrayLine_OnAction@1100281008();
    VAR
      lTrayLineMgt@1100281001 : Codeunit 50050;
    BEGIN
      COMMIT;
      lTrayLineMgt.CreateTLFromSearch(ServiceHeaderNo);
    END;

    PROCEDURE SetServiceHeaderNo@1100281009(pServiceHeaderNo@1100281000 : Code[20]);
    BEGIN
      ServiceHeaderNo := pServiceHeaderNo;

      //<<IMH12.isat.PC
      CurrPage.ResultProviderSearchSubpage.FORM.SetServiceHeaderNo(pServiceHeaderNo);
      ShowProductInformation := ServiceHeaderNo <> '';
      //>>IMH12.isat.PC
    END;

    PROCEDURE SetProviderSearchBasket@1100281012(VAR pProviderSearchBasket@1100281000 : Record 51002);
    BEGIN
      //IMH10
      IF pProviderSearchBasket.FINDFIRST THEN
        REPEAT
          ProviderSearchBasket := pProviderSearchBasket;
          ProviderSearchBasket.INSERT;
        UNTIL pProviderSearchBasket.NEXT  = 0;
    END;

    PROCEDURE GetResultProvSearBasket@1100281011(VAR pProviderSearchBasket@1100281000 : Record 51002);
    BEGIN
      //IMH10
      CurrPage.SpeProviderSearchSubpage.FORM.GETRECORDS(pProviderSearchBasket);
    END;

    PROCEDURE SetTrayLineNo@1100281010(pTeamCode@1100281001 : Code[10];pTrayLineEntryNo@1100281000 : Integer);
    BEGIN
      //IMH10
      TeamCode := pTeamCode;
      TrayLineEntryNo := pTrayLineEntryNo;
    END;

    PROCEDURE GetIsOk@1100281016() : Boolean;
    BEGIN
      //IMH10
      EXIT(IsOk);
    END;

    PROCEDURE ShowProviderCard@1100281017();
    VAR
      lWSHShell@1100281000 : Automation "{F935DC20-1CF0-11D0-ADB9-00C04FD58A0B} 1.0:{72C24DD5-D70A-438B-8A42-98424B88AFB8}:'Windows Script Host Object Model'.WshShell";
    BEGIN
      //IMH11
      IF ISCLEAR(lWSHShell) THEN
        CREATE(lWSHShell,FALSE,TRUE);
      lWSHShell.SendKeys('^+F');
      CLEAR(lWSHShell);
    END;

    PROCEDURE GetServiceUrgent@1000000000();
    VAR
      lServiceHeader@1000000000 : Record 5900;
    BEGIN
      IF lServiceHeader.GET(lServiceHeader."Document Type"::Invoice, ServiceHeaderNo) THEN
        Urgent := lServiceHeader.Urgent;
    END;

    PROCEDURE CreateProvider@1100281002(pOpenCard@1100281000 : Boolean);
    VAR
      lProvSearchMgt@1100281001 : Codeunit 50000;
      TempProviderFilter@1100281002 : TEMPORARY Record 50000;
    BEGIN
      // IMH22
      SetFiltersToProvider(TempProviderFilter);
      lProvSearchMgt.CreateProvider(TempProviderFilter,pOpenCard);
      //CloseFromCreate := TRUE;
      //ResultContact := TempContactFilter."No.";
      //CurrPage.CLOSE;
    END;

    LOCAL PROCEDURE SetFiltersToProvider@1100481000(VAR pProvider@1100481000 : Record 50000);
    BEGIN
      //Initialise la variable  contenant les filtres
      pProvider.RESET;
      IF sCity <> '' THEN
        pProvider.SETFILTER(City,sCity);
      IF PostCode <> '' THEN
        pProvider.SETFILTER("Post Code",PostCode);
      IF AreaCode <> '' THEN
        pProvider.SETRANGE("Area Code",AreaCode);
      IF TerritoryCode <> '' THEN
        pProvider.SETRANGE("IMH Territory Code",TerritoryCode);
    END;

    BEGIN
    {
      /** @r IMH27 @d 28/04/14 @a ISAT.ZW @v IMH6.01.P011 @s New Provider Search
          @c Gestion de code r‚fus */
      /** @r IMH26 @d 14/04/14 @a ISAT.PC @v IMH6.01.P011 @s New Provider Search
          @c Add action FollowUpCreationCtrl
          @c Add new function CreateFollowUp */
      /** @r IMH25 @d 19/02/13 @s ISAT.PC @v IMH6.01.215 @s NEP00006 @h 3883 @c Correction */
      /** @r IMH24 @d 09/05/12 @s ISAT.ZW @v IMH6.01.020 @s Recherche prestataire @h mantis 2406
          @c Recherche sans sp‚cialit‚ */
      /** @r IMH23 @d 07/05/12 @s ISAT.ZW @v IMH6.01.020 @s Recherche prestataire @h mantis 494
          @c gestion des CritŠres de recherche */
      /** @r IMH22 @d 03/05/12 @s ISAT.LLT @v IMH6.01.020 @s Recherche prestataire @h mantis 2013
          @c Ajout bouton creation prestataire  */
      /** @r IMH21 @d 17/04/12 @s ISAT.ZW @v IMH6.01.020 @s Recherche prestataire @h mantis3203
          @c Gestion d'exclusion  */
      /** @r IMH20 @d 02/04/12 @s ISAT.ZW @v IMH6.01.020 @s Recherche prestataire @h mantis 3127
          @c Recherche prestataire multi sp‚cialit‚s */
      /** @r IMH19 @d 22/02/12 @a ISAT.ST @v IMH6.01.020 @s Recherche prestataire @c Geo non editable si ligne produit
          @c Correction recherche */
      /** @r IMH18 @d 31/01/12 @s ISAT.ZW @v IMH6.01.020 @s Recherche prestataire @c Exclusion GC option --> Boolean */
      /** @r IMH17 @d 02/12/11 @s ISAT.NFO @v IMH6.01.020 @s Recherche prestataire @c invisible plateau a faux */
      /** @r IMH16 @d 02/11/11 @s ISAT.NFO @v IMH6.01.020 @s Recherche prestataire @c Prestataire Li‚ */
      /** @r IMH15 @d 09/08/11 @s ISAT.ST @v IMH6.01.020 @s Recherche prestataire @c var PostCode … 20 */
      /** @r IHM14 @d 07/07/10 @a ISAT.ST @v IMH6.01.020 @s Validate du GC
          @c Affichage point de recherche */
      /** @r IHM13 @d 06/07/10 @a ISAT.ZW @v IMH6.01.020 @s correction recherche */
      /** @r IHM12 @d 30/06/11 @a ISAT.PC @v IMH6.01.020 @s Passage par paramŠtre */
      /** @r IHM11 @d 28/06/11 @a ISAT.ZW @v IMH6.01.020 @s fonction fiche prestataire */
      /** @r IMH10 @d 22/05/11 @a ISAT.ZW @v IMH6.01.028 @s Recherche prestataire
          @c Gestion agr‚ment
          @c fonction Appel
          @c Gestion code refus prestataire pour la recherche DPR */
      /** @r IHM09 @d 03/05/11 @a ISAT.NFO @v IMH6.01.020 @s Recherche prestataire @c Geofilter doit contenir le code geo (pas postcode */
      /** @r IHM08 @d 14/03/11 @a ISAT.NFO @v IMH6.01.020 @s Recherche prestataire @c Correction quand user setup n'existe pas */
      /** @r IHM07 @d 23/02/11 @a ISAT.NFO @v IMH6.01.020 @s Recherche prestataire @c Ajout cr‚ation ligne corbeille */
      /** @r IHM06 @d 23/02/11 @a ISAT.NFO @v IMH6.01.020 @s Recherche prestataire @c Modification recherche codepostal */
      /** @r IHM05 @d 23/02/11 @a ISAT.NFO @v IMH6.01.020 @s Recherche prestataire @c Ajout de la date et heure de situation */
      /** @r IHM04 @d 12/02/11 @a ISAT.NFO @v IMH6.01.020 @s Recherche prestataire @c Ajout du champ trace et pas de factbox par def */
      /** @r IHM03 @d 18/02/11 @a ISAT.NFO @v IMH6.01.020 @s Recherche prestataire @c Champ departement en additional */
      /** @r IHM02 @d 14/02/11 @a ISAT.PC @v IMH6.01.020 @s Recherche prestataire @c Ajout fonction SubpageFilters */
      /** @r IHM01 @d 18/10/10 @a ISAT.NFO @v IMH6.01.020 @s Recherche prestataire @c Creation */
    }
    END.
  }
}