OBJECT Page 50150 Result Provider Search Subpage
{
  OBJECT-PROPERTIES
  {
    Date=29/04/14;
    Time=16:56:54;
    Modified=Yes;
    Version List=IMH6.01,IMH6.01.P011;
  }
  PROPERTIES
  {
    Editable=No;
    CaptionML=[ENU=Result Provider Search;
               FRA=Prestataires trouv‚s];
    InsertAllowed=No;
    DeleteAllowed=No;
    ModifyAllowed=No;
    SourceTable=Table51000;
    SourceTableView=SORTING(Score)
                    ORDER(Descending);
    PageType=ListPart;
    SourceTableTemporary=Yes;
    CardFormID=Page50000;
    ActionList=ACTIONS
    {
      { 1100281002;  ;ActionContainer;
                      Name=<Action1100281002>;
                      CaptionML=FRA=Ligne;
                      ActionContainerType=ActionItems }
      { 1100281004;1 ;Action    ;
                      ShortCutKey=Maj+Ctrl+A;
                      CaptionML=[ENU=Call;
                                 FRA=Appeler];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=AddContacts;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CallProvider();
                               END;
                                }
      { 1000000000;1 ;Action    ;
                      ShortCutKey=Maj+Ctrl+T;
                      CaptionML=[ENU=Follow Up CreationCtrl;
                                 FRA=Cr‚ation suivi];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=ImplementPriceChange;
                      PromotedCategory=Category5;
                      OnAction=VAR
                                 lProvider@1000000000 : Record 50000;
                                 lProviderSearchResultBuffer@1100281000 : TEMPORARY Record 51000;
                                 lProvSearchFollowUpMgt@1100281001 : Codeunit 50287;
                               BEGIN
                                 IF lProvider.GET("Provider No.") THEN BEGIN
                                   IF lProvider."Follow Up" = '' THEN BEGIN
                                     lProvSearchFollowUpMgt.CreateFollowUpFromFirstSearch(Rec);
                                   END;
                                 END;
                               END;
                                }
      { 1100281014;1 ;Action    ;
                      ShortCutKey=Maj+Ctrl+F;
                      CaptionML=[ENU=Card;
                                 FRA=Fiche];
                      RunObject=Page 50000;
                      RunFormLink=No.=FIELD(Provider No.) }
      { 1100281030;1 ;Separator  }
      { 1100281032;1 ;Action    ;
                      Name=<Action1100281032>;
                      CaptionML=[ENU=Hide called providers;
                                 FRA=Masquer prestataires appel‚s];
                      OnAction=BEGIN
                                 SETRANGE(Called, FALSE); //IMH07
                               END;
                                }
      { 1100281034;1 ;Action    ;
                      Name=<Action1100281032>;
                      CaptionML=[ENU=Show called providers;
                                 FRA="Afficher prestataires appel‚s "];
                      OnAction=BEGIN
                                 SETRANGE(Called); //IMH07
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1100281000;1;Group  ;
                GroupType=Repeater }

    { 1100281038;2;Field  ;
                SourceExpr=Called }

    { 1100281024;2;Field  ;
                SourceExpr="DPR Non-Accept. Reason Code" }

    { 1100281001;2;Field  ;
                SourceExpr="Provider No." }

    { 1100281003;2;Field  ;
                SourceExpr=Name }

    { 1100281012;2;Field  ;
                SourceExpr=Status }

    { 1100281018;2;Field  ;
                CaptionML=[ENU=Status Description;
                           FRA=Statut processus];
                SourceExpr=GetDescripProcessStatus;
                Editable=false }

    { 1100281011;2;Field  ;
                CaptionML=[ENU=Non-Accept. Reason Code;
                           FRA=Code motif refus DRC];
                SourceExpr="Non-Accept. Reason Code" }

    { 1100281036;2;Field  ;
                CaptionML=[ENU=Non-Accept. Comments;
                           FRA=Commentaires refus DRC];
                SourceExpr="Non-Accept. Comments" }

    { 1100281009;2;Field  ;
                SourceExpr=Refused;
                Visible=FALSE }

    { 1100281006;2;Field  ;
                SourceExpr=City }

    { 1100281027;2;Field  ;
                SourceExpr=Distance }

    { 1100281008;2;Field  ;
                SourceExpr="Out Zone";
                Visible=FALSE }

    { 1100281029;2;Field  ;
                SourceExpr="Travel Time (min)";
                Visible=FALSE }

    { 1100281033;2;Field  ;
                SourceExpr="Intervention Number";
                Visible=FALSE }

    { 1100281010;2;Field  ;
                SourceExpr="Current Interv. Limit Max." }

    { 1100281015;2;Field  ;
                SourceExpr="Alt. Address Code";
                Visible=FALSE }

    { 1100281013;2;Field  ;
                SourceExpr="Contact No.";
                Visible=FALSE }

    { 1100281017;2;Field  ;
                SourceExpr="Specializations Nb.";
                Visible=FALSE }

    { 1100281019;2;Field  ;
                SourceExpr="First Available Date";
                Visible=FALSE }

    { 1100281022;2;Field  ;
                SourceExpr="Out Of Business Hours";
                Visible=false }

    { 1100281026;2;Field  ;
                SourceExpr=Exclusion;
                Visible=false }

    { 1100281021;2;Field  ;
                SourceExpr=Score;
                Visible=FALSE }

    { 1100281023;2;Field  ;
                SourceExpr=Date;
                Visible=FALSE }

    { 1100281025;2;Field  ;
                SourceExpr="Start Time";
                Visible=FALSE }

    { 1100281005;2;Field  ;
                SourceExpr="Specialization Code";
                Visible=FALSE }

    { 1100281007;2;Field  ;
                SourceExpr="Specialization Description";
                Visible=FALSE }

    { 1100281035;2;Field  ;
                SourceExpr="Linked Provider Count";
                Visible=FALSE }

    { 1100281037;2;Field  ;
                SourceExpr="Campaign No.";
                Visible=FALSE }

    { 1100281039;2;Field  ;
                SourceExpr="GeoCode Count";
                Visible=FALSE }

    { 1100281031;2;Field  ;
                SourceExpr="Search Type";
                Visible=FALSE }

    { 1100281016;2;Field  ;
                SourceExpr="Specialization List" }

    { 1100281020;2;Field  ;
                Name=Occupation Rate;
                CaptionML=[ENU=Occupation Rate;
                           FRA=Taux d'occupation];
                SourceExpr=GetOccupationRate;
                Visible=FALSE;
                Editable=FALSE }

  }
  CODE
  {
    VAR
      ProviderSearchMgt@1100281002 : Codeunit 50000;
      ServiceHeaderNo@1100281000 : Code[20];
      ProviderSearchBasket@1100281001 : TEMPORARY Record 51002;
      SpecialityFilter@1100281003 : Text[1024];
      CalledProvider@1000000000 : TEMPORARY Record 51000;
      Text001@1100281004 : TextConst 'ENU=Impossible to add specialization %1 to specialization list %2 (max size rised);FRA=Impossible de rajouter la sp‚cialit‚ %1 dans la liste de sp‚cialit‚ %2 (taille max. atteinte)';

    PROCEDURE CallProvider@1100281001();
    VAR
      lServiceHeader@1100281006 : Record 5900;
      lBuffer@1100281001 : TEMPORARY Record 51000;
      lBuffer2@1100281002 : TEMPORARY Record 51000;
      lContactAltAddressBuffer@1100281005 : TEMPORARY Record 5051;
      lProviderSpecialization@1100281007 : Record 50006;
      lProviderCall@1100281000 : Page 50022;
      lProviderSearchCom@1100281003 : Codeunit 50066;
      lProviderSearchMgt@1100281010 : Codeunit 50284;
      lWSHShell@1100281004 : Automation "{F935DC20-1CF0-11D0-ADB9-00C04FD58A0B} 1.0:{72C24DD5-D70A-438B-8A42-98424B88AFB8}:'Windows Script Host Object Model'.WshShell";
      lResultSpecialityFilter@1100281008 : Text[1024];
      lRecSave@1100281009 : TEMPORARY Record 51000;
      lComment@1100281011 : Text[250];
      lRefuReasonCode@1100281014 : Code[10];
    BEGIN
      IF "Provider No." <> '' THEN BEGIN
        //<<IMH07
        Called := TRUE;
        MODIFY;
        CalledProvider.INIT;
        CalledProvider."Provider No." := "Provider No.";
        IF CalledProvider.INSERT THEN;
        lRecSave := Rec;
        //<<IMH07
        lBuffer2 := Rec;
        lBuffer2.INSERT();
        lProviderCall.SetRecords(lBuffer2);
        //<<IMH03.PC
        IF lServiceHeader.GET(lServiceHeader."Document Type"::Invoice,ServiceHeaderNo) THEN BEGIN
          lContactAltAddressBuffer.Address := lServiceHeader."Ship-to Address";
          lContactAltAddressBuffer."Address 2" := lServiceHeader."Ship-to Address 2";
          lContactAltAddressBuffer.City := lServiceHeader."Ship-to City";
          lContactAltAddressBuffer."Post Code" := lServiceHeader."Ship-to Post Code";
          lContactAltAddressBuffer."Geo. Reference Code" := lServiceHeader."Ship-to Geo. Reference Code";
          lProviderCall.SetMEOAddr(lContactAltAddressBuffer);
        END;
        //>>IMH03.PC

        //<<IMH05
        lProviderCall.SetSpecializationFilter(SpecialityFilter);
        //>>IMH05
        lProviderCall.RUNMODAL;
        IF lProviderCall.GetIsOk THEN BEGIN
          IF lProviderCall.GetProviderNo = '' THEN BEGIN
          END ELSE BEGIN

            lProviderSearchCom.setProviderNo(lBuffer2."Provider No.");
            lProviderSearchCom.setSpecializationCode(lBuffer2."Specialization Code");
            //<<IMH05
            lResultSpecialityFilter := lProviderSearchMgt.GetProviderSpecialization(lBuffer2."Provider No.", SpecialityFilter);
            lProviderSearchCom.setSpecializationFilter(lResultSpecialityFilter);
            ProviderSearchBasket.SETFILTER("Speciality Code",lResultSpecialityFilter);
            ProviderSearchBasket.DELETEALL;

            SpecialityFilter := '';
            ProviderSearchBasket.RESET;
            ProviderSearchBasket.SETRANGE("Provider No.",'');
            IF ProviderSearchBasket.FINDSET THEN
              REPEAT
                IF SpecialityFilter <> '' THEN BEGIN
                  SpecialityFilter += '|';
                END;
                //<<IMH08
                //SpecialityFilter := SpecialityFilter + ProviderSearchBasket."Speciality Code";
                SpecialityFilter += SpecialityFilter + ProviderSearchBasket."Speciality Code";
                //>>IMH08
              UNTIL ProviderSearchBasket.NEXT = 0;
            //>>IMH05
            IF ISCLEAR(lWSHShell) THEN
              CREATE(lWSHShell,TRUE,TRUE);
            lWSHShell.SendKeys('{F5}');
            lWSHShell.SendKeys('{F5}');
            lWSHShell.SendKeys('^+Z');
            CLEAR(lWSHShell);
            //CurrPage.SubFormBasket.FORM.UpdateProviderNo(lBuffer2."Provider No.",lBuffer2."Specialization Code");
            CLEAR(lProviderCall);
            CurrPage.UPDATE(FALSE);
            //<<IMH07
            RESET;
            IF SpecialityFilter = '' THEN BEGIN
              SETRANGE(Called, FALSE);
              DELETEALL;
              RESET;
            END ELSE BEGIN
            //>>IMH07
              IF FIND('+') THEN BEGIN
                REPEAT
                  //<<IMH05
                  lProviderSpecialization.RESET;
                  lProviderSpecialization.SETRANGE("Provider No.","Provider No.");
                  lProviderSpecialization.SETFILTER("Specialization Code",SpecialityFilter);
                  IF lProviderSpecialization.FINDSET THEN BEGIN
                    REPEAT
                      "Specialization List" := '';
                      IF "Specialization List" <> '' THEN BEGIN
                        "Specialization List" += '|';
                      END;
                      //<<IMH09.PC
                      IF STRLEN("Specialization List" + lProviderSpecialization."Specialization Code") > MAXSTRLEN("Specialization List")
                      THEN BEGIN
                        ERROR(Text001,"Specialization List",lProviderSpecialization."Specialization Code");
                      END;
                      //>>IMH09.PC
                      "Specialization List" := "Specialization List" + lProviderSpecialization."Specialization Code";
                    UNTIL lProviderSpecialization.NEXT = 0;
                    MODIFY;
                  //<<IMH07
                  END ELSE BEGIN
                    IF NOT Called THEN
                      DELETE();
                  END;
                  //>>IMH07
                  //>>IMH05
                UNTIL NEXT(-1)=0;
              END;
            END;
          END;
        END ELSE BEGIN
          //<<IMH12
          //<<IMH11.PC
          //"DPR Non-Accept. Reason Code" := lProviderCall.GetNonAcceptReasonCode;
          lProviderCall.GetNonAcceptReasonCode(lRefuReasonCode,lComment);  //IMH12
          //>>IMH11.PC
          SaveRefusedProvider(lBuffer2."Provider No.", lRefuReasonCode);
          //>>IMH12
          IF FIND('+') THEN
            REPEAT
              //<<IMH07
              IF "Provider No." = lBuffer2."Provider No." THEN BEGIN
                //DELETE();
                "DPR Non-Accept. Reason Code" := lRefuReasonCode;
                Called := TRUE;
                MODIFY;
                IF CalledProvider.GET("Provider No.", '') THEN BEGIN
                  CalledProvider."DPR Non-Accept. Reason Code" := "DPR Non-Accept. Reason Code";
                  CalledProvider.MODIFY;
                END;
              END;
              //>>IMH07
            UNTIL NEXT(-1)=0;
        END;
      END;
      //<<IMH07
      IF GET(lRecSave."Provider No.", lRecSave."Specialization Code") THEN;
      //>>IMH07
    END;

    PROCEDURE LoadTable@1100281000(VAR pProviderSearchResultBuffer@1100281000 : Record 51000);
    BEGIN
      DELETEALL();
      IF pProviderSearchResultBuffer.FINDSET() THEN
        REPEAT
          Rec := pProviderSearchResultBuffer;
          //<<IMH07
          IF CalledProvider.GET(pProviderSearchResultBuffer."Provider No.", '') THEN BEGIN
            "DPR Non-Accept. Reason Code" := CalledProvider."DPR Non-Accept. Reason Code";
            Called := TRUE;
          END;
          //>>IMH07
          INSERT();
        UNTIL pProviderSearchResultBuffer.NEXT() = 0;
      IF FINDFIRST THEN;
    END;

    PROCEDURE DelRecords@1100281002();
    BEGIN
      DELETEALL();
    END;

    PROCEDURE GetRecords@1100281003(VAR pPSRB@1100281000 : Record 51000);
    BEGIN
      pPSRB.DELETEALL;
      //<<IMH10.PC
      //IF FINDSET THEN BEGIN
      IF FIND('-') THEN BEGIN
      //>>IMH10.PC
        REPEAT
          pPSRB := Rec;
          pPSRB.INSERT;
        UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE SetServiceHeaderNo@1100281004(pServiceHeaderNo@1100281000 : Code[20]);
    BEGIN
      // IMH03.PC
      ServiceHeaderNo := pServiceHeaderNo;
    END;

    PROCEDURE GetDescripProcessStatus@1100281005() : Text[80];
    VAR
      lProvider@1100281000 : Record 50000;
      lProcessStatus@1100281001 : Record 50042;
    BEGIN
      IF lProvider.GET("Provider No.") THEN BEGIN
        IF lProcessStatus.GET(lProvider."Process Code", lProvider."Process Status No.") THEN
          EXIT(lProcessStatus.Description);
      END;
    END;

    PROCEDURE LoadProviderSearchBasket@1100281009(VAR pProviderSearchBasket@1100281000 : TEMPORARY Record 51002);
    BEGIN
      //<<IMH05
      ProviderSearchBasket.DELETEALL();
      pProviderSearchBasket.SETRANGE("Provider No.",'');
      IF pProviderSearchBasket.FINDSET() THEN
        REPEAT
          ProviderSearchBasket := pProviderSearchBasket;
          ProviderSearchBasket.INSERT();
          IF SpecialityFilter <> '' THEN BEGIN
            SpecialityFilter += '|';
          END;
          SpecialityFilter := SpecialityFilter + ProviderSearchBasket."Speciality Code";
        UNTIL pProviderSearchBasket.NEXT() = 0;
      //>>IMH05
    END;

    PROCEDURE GetOccupationRate@1100281006() rOccupationRate : Decimal;
    VAR
      lProvider@1100281000 : Record 50000;
    BEGIN
      //<<IMH06.zw
      IF NOT lProvider.GET("Provider No.") THEN BEGIN
        rOccupationRate := 0;
        EXIT;
      END;
      lProvider.CALCFIELDS("Current Service Interv. Nb");
      IF lProvider."Current Interv. Limit Max." <> 0 THEN
        rOccupationRate := (lProvider."Current Service Interv. Nb" / lProvider."Current Interv. Limit Max.") * 100
      ELSE
        rOccupationRate := 0;
      //>>IMH06.zw
    END;

    PROCEDURE SaveRefusedProvider@1100281011(pProviderNo@1100281000 : Code[20];pResonCode@1100281002 : Code[10]);
    VAR
      lFirstProviderSearch@1100281005 : Codeunit 50000;
      lServiceHeader@1100281001 : Record 5900;
      lProviderTemp@1100281004 : TEMPORARY Record 50000;
      lIntervTemp@1100281003 : TEMPORARY Record 50075;
    BEGIN
      //IMH12
      // Sauvegarde les prestataires refus‚s

      IF NOT lServiceHeader.GET(lServiceHeader."Document Type"::Invoice, ServiceHeaderNo) THEN
        EXIT;

      lProviderTemp."No." := pProviderNo;
      lProviderTemp."Salutation Code" := pResonCode;
      lProviderTemp."Current Interv. Limit Max." := 5;
      lProviderTemp.INSERT;

      lIntervTemp."Service No." := lServiceHeader."Service No.";
      lIntervTemp."Service Header No." := lServiceHeader."No.";
      lIntervTemp.INSERT;
      lFirstProviderSearch.SaveRefusedProvider(lProviderTemp, lIntervTemp, TRUE);
    END;

    BEGIN
    {
      /** @r IMH12 @d 28/04/14 @a ISAT.ZW @v IMH6.01.P011 @s New Provider Search
          @c Gestion de code r‚fus */
      /** @r IMH11 @d 10/04/14 @a ISAT.PC @v IMH6.01.P011 @s New Provider Search
          @c Add field 402, "Non-Accept. Comments"
          @c Add action CreateFollowUp */
      /** @r IMH10 @d 25/09/12 @a ISAT.PC @v IMH6.01.218 @s NEP00009 @h 3883 */
      /** @r IMH09 @d 24/09/12 @a ISAT.PC @v IMH6.01.218 @s NEP00009 @h 3731 */
      /** @r IMH08 @d 27/04/12 @a ISAT.ZW @v IMH6.01.028 @s Recherche prestataire @h 3127 @c Correction */
      /** @r IMH07 @d 24/04/12 @a ISAT.ZW @v IMH6.01.028 @s Recherche prestataire @h 2452 @c ajout champ 400 Appel‚ */
      /** @r IMH07 @d 24/04/12 @a ISAT.ZW @v IMH6.01.028 @s Recherche prestataire @c ajout champ 400 Appel‚ */
      /** @r IMH06 @d 24/04/12 @s ISAT.ZW @v IMH6.01.020 @s Recherche prestataire @h 2686 @c Ajout champ Taux d'occupation */
      /** @r IMH05 @d 02/04/12 @s ISAT.ZW @v IMH6.01.020 @s Recherche prestataire @h 3127 @c Recherche prestataire multi sp‚cialit‚s */
      /** @r IMH04 @d 02/11/11 @s ISAT.NFO @v IMH6.01.020 @s Recherche prestataire @c Prestataire Li‚ */
      /** @r IHM03 @d 11/10/11 @a ISAT.PC @v IMH6.01.020 @s fonction fiche prestataire @c passgae de la MEO addresse */
      /** @r IHM11 @d 28/06/11 @a ISAT.ZW @v IMH6.01.020 @s fonction fiche prestataire */
      /** @r IHM01 @d 18/10/10 @a ISAT.NFO @v IMH6.01.020 @s Recherche prestataire @c Creation */
    }
    END.
  }
}