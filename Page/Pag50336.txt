OBJECT Page 50336 SDR64 Card
{
  OBJECT-PROPERTIES
  {
    Date=05/05/14;
    Time=17:00:00;
    Modified=Yes;
    Version List=IMH6.01,JUIN,SysAgDarva;
  }
  PROPERTIES
  {
    Permissions=TableData 5900=r,
                TableData 50021=r,
                TableData 50040=r,
                TableData 50070=r,
                TableData 50075=r,
                TableData 50139=r,
                TableData 50164=rim,
                TableData 50168=rim,
                TableData 50169=rim,
                TableData 8016701=r,
                TableData 8016717=r;
    CaptionML=[ENU=SDR64 Card;
               FRA=Fiche SDR64];
    SourceTable=Table5900;
    SourceTableView=SORTING(Document Type,No.)
                    WHERE(Document Type=CONST(Invoice));
    PromotedActionCategoriesML=[ENU=View,SDR64,Move,SDR99;
                                FRA=Visualisation,SDR64,Deplacement,SDR99];
    ActionList=ACTIONS
    {
      { 1100281003;  ;ActionContainer;
                      Name=<Action1100281003>;
                      ActionContainerType=ActionItems }
      { 1100281001;1 ;Action    ;
                      Name=SendSDR64Ctrl;
                      CaptionML=[ENU=Send SDR64;
                                 FRA=Envoyer SDR64];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Export;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 SendSDR64;
                               END;
                                }
      { 1100281042;1 ;Action    ;
                      Name=SendSDR99NewDTCtrl;
                      CaptionML=[ENU=Send SDR99 New DT;
                                 FRA=Envoyer SDR99 nouvelle DT];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=MakeOrder;
                      PromotedCategory=Category4;
                      OnAction=BEGIN
                                 SendSDR99NewDT;
                               END;
                                }
      { 1100281032;1 ;Action    ;
                      Name=OtherDTCtrl;
                      CaptionML=[ENU=Other DT;
                                 FRA=Autre DT];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      PromotedCategory=New;
                      OnAction=VAR
                                 lDocumentAttachment@1100281000 : Record 50021;
                                 lSDR64AttachmentsList@1100281001 : Page 50338;
                               BEGIN
                                 lDocumentAttachment.SETCURRENTKEY(
                                   "Service Document No.","Service Intervention Line No.","Intervention Quote Line No.");
                                 lDocumentAttachment.SETRANGE("Service Document No.","No.");
                                 lDocumentAttachment.SETFILTER(Description,'*DT*');
                                 lSDR64AttachmentsList.SETTABLEVIEW(lDocumentAttachment);
                                 lSDR64AttachmentsList.LOOKUPMODE := TRUE;
                                 IF lSDR64AttachmentsList.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                   lSDR64AttachmentsList.GETRECORD(lDocumentAttachment);
                                   lDocumentAttachment.SETRECFILTER;
                                   CurrPage.AttachSubform.FORM.SETTABLEVIEW(lDocumentAttachment);
                                   CurrPage.AttachSubform.FORM.GETRECORD(lDocumentAttachment);
                                   CurrPage.AttachSubform.FORM.UpdateSubPage;
                                 END;
                               END;
                                }
      { 1100281035;1 ;Action    ;
                      Name=PrecedentIntervCtrl;
                      CaptionML=[ENU=Precedent;
                                 FRA=Pr‚c‚dent];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=PreviousSet;
                      PromotedCategory=Report;
                      OnAction=BEGIN
                                 GetPrevious;
                               END;
                                }
      { 1100281034;1 ;Action    ;
                      Name=NextIntervCtrl;
                      CaptionML=[ENU=Next;
                                 FRA=Suivant];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=NextSet;
                      PromotedCategory=Report;
                      OnAction=BEGIN
                                 GetNext;
                               END;
                                }
      { 1100281033;1 ;Action    ;
                      Name=ReinitValueCtrl;
                      CaptionML=[ENU=Re-init Values;
                                 FRA=R‚-initialiser donn‚es];
                      OnAction=BEGIN
                                 GetIntervLineInfo(TRUE);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1100281000;;Container;
                ContainerType=ContentArea }

    { 1100281005;1;Group  ;
                Name=ServiceHeaderInformationGroup;
                CaptionML=[ENU=Service Header Information;
                           FRA=Information ligne produit];
                GroupType=Group }

    { 1100281036;2;Field  ;
                Name=UniqueProvider;
                CaptionML=[ENU=Unique Provider;
                           FRA=Mono Prestataire];
                SourceExpr=UniqueProvider;
                Editable=FALSE }

    { 1100281039;2;Field  ;
                SourceExpr="Corporate No.";
                Editable=FALSE }

    { 1100281040;2;Field  ;
                SourceExpr="Corporate Region Code";
                Editable=FALSE }

    { 1100281037;2;Field  ;
                SourceExpr="Reference No.";
                Editable=FALSE }

    { 1100281038;2;Field  ;
                CaptionML=[ENU=Mission No.;
                           FRA=Nø mission];
                SourceExpr="Your Reference";
                Editable=FALSE }

    { 1000000000;2;Field  ;
                Name=CurrentIntervNoCtrl;
                CaptionML=[ENU=Current Interv. No.;
                           FRA=Nø interv. courante];
                SourceExpr=CurrentServiceIntervLine."Intervention No.";
                Editable=FALSE;
                OnAssistEdit=BEGIN
                               SelectIntervLine;
                             END;
                              }

    { 1100281041;1;Group  ;
                Name=SDR64InformationGroup;
                CaptionML=[ENU=SDR64 Information;
                           FRA=Information SDR64];
                GroupType=Group }

    { 1000000001;2;Group  ;
                Visible=ProviderNoVisible;
                GroupType=Group }

    { 1000000002;3;Field  ;
                CaptionML=[ENU=Provider No.;
                           FRA=Nø prestataire];
                SourceExpr=ProviderNoValue;
                TableRelation=Provider;
                Editable=FALSE;
                OnValidate=BEGIN
                             SaveSDR64Information(CurrentServiceIntervLine."Line No.");
                           END;
                            }

    { 1100281019;2;Group  ;
                Visible=AgreementCodeVisible;
                GroupType=Group }

    { 1100281006;3;Field  ;
                CaptionML=[ENU=Agreement;
                           FRA=Agr‚ment];
                SourceExpr=AgreementCodeValue;
                OnValidate=BEGIN
                             SaveSDR64Information(CurrentServiceIntervLine."Line No.");
                           END;

                OnAssistEdit=BEGIN
                               GetAgreement(TRUE);
                               SaveSDR64Information(CurrentServiceIntervLine."Line No.");
                             END;
                              }

    { 1100281020;2;Group  ;
                Visible=WorkLotVisible;
                GroupType=Group }

    { 1100281007;3;Field  ;
                CaptionML=[ENU=Work Lot No.;
                           FRA=Nø lot travaux];
                SourceExpr=WorkLotValue;
                OnValidate=BEGIN
                             SaveSDR64Information(CurrentServiceIntervLine."Line No.");
                           END;

                OnAssistEdit=BEGIN
                               SelectlDARVAWorkLot;
                               SaveSDR64Information(CurrentServiceIntervLine."Line No.");
                             END;
                              }

    { 1100281021;2;Group  ;
                Visible=MissionReferenceVisible;
                GroupType=Group }

    { 1100281008;3;Field  ;
                CaptionML=[ENU=Mission Reference;
                           FRA=Nø mission r‚f‚rence];
                SourceExpr=MissionReferenceValue }

    { 1100281022;2;Group  ;
                Visible=MeetingDateVisible;
                GroupType=Group }

    { 1100281009;3;Field  ;
                CaptionML=[ENU=Meeting Date;
                           FRA=Date de rendez-vous];
                SourceExpr=MeetingDateValue;
                OnValidate=BEGIN
                             SaveSDR64Information(CurrentServiceIntervLine."Line No.");
                           END;
                            }

    { 1100281023;2;Group  ;
                Visible=NameVisible;
                GroupType=Group }

    { 1100281010;3;Field  ;
                CaptionML=[ENU=Name;
                           FRA=Nom];
                SourceExpr=NameValue;
                OnValidate=BEGIN
                             SaveSDR64Information(CurrentServiceIntervLine."Line No.");
                           END;
                            }

    { 1100281024;2;Group  ;
                Visible=Address1Visible;
                GroupType=Group }

    { 1100281011;3;Field  ;
                CaptionML=[ENU=Address 1;
                           FRA=Adresse 1];
                SourceExpr=Address1Value;
                OnValidate=BEGIN
                             SaveSDR64Information(CurrentServiceIntervLine."Line No.");
                           END;
                            }

    { 1100281025;2;Group  ;
                Visible=address2visible;
                GroupType=Group }

    { 1100281012;3;Field  ;
                CaptionML=[ENU=Address 2;
                           FRA=Adresse 2];
                SourceExpr=Address2Value;
                OnValidate=BEGIN
                             SaveSDR64Information(CurrentServiceIntervLine."Line No.");
                           END;
                            }

    { 1100281026;2;Group  ;
                Visible=Address3Visible;
                GroupType=Group }

    { 1100281013;3;Field  ;
                CaptionML=[ENU=Address 3;
                           FRA=Adresse 3];
                SourceExpr=Address3Value;
                OnValidate=BEGIN
                             SaveSDR64Information(CurrentServiceIntervLine."Line No.");
                           END;
                            }

    { 1100281027;2;Group  ;
                Visible=PostCodeVisible;
                GroupType=Group }

    { 1100281014;3;Field  ;
                CaptionML=[ENU=Post Code;
                           FRA=Code postal];
                SourceExpr=PostCodeValue;
                TableRelation="Post Code".Code;
                OnValidate=BEGIN
                             SaveSDR64Information(CurrentServiceIntervLine."Line No.");
                           END;
                            }

    { 1100281028;2;Group  ;
                Visible=CityVisible;
                GroupType=Group }

    { 1100281015;3;Field  ;
                CaptionML=[ENU=City;
                           FRA=Ville];
                SourceExpr=CityValue;
                TableRelation="Post Code".City;
                OnValidate=BEGIN
                             SaveSDR64Information(CurrentServiceIntervLine."Line No.");
                           END;
                            }

    { 1100281029;2;Group  ;
                Visible=PhoneNoVisible;
                GroupType=Group }

    { 1100281016;3;Field  ;
                CaptionML=[ENU=Phone No.;
                           FRA=Nø t‚l‚phone];
                SourceExpr=PhoneNoValue;
                OnValidate=BEGIN
                             SaveSDR64Information(CurrentServiceIntervLine."Line No.");
                           END;
                            }

    { 1100281030;2;Group  ;
                Visible=MailVisible;
                GroupType=Group }

    { 1100281017;3;Field  ;
                CaptionML=[ENU=E-mail;
                           FRA=E-mail];
                SourceExpr=MailValue;
                OnValidate=BEGIN
                             SaveSDR64Information(CurrentServiceIntervLine."Line No.");
                           END;
                            }

    { 1100281031;2;Group  ;
                Visible=CommentVisible;
                GroupType=Group }

    { 1100281018;3;Field  ;
                CaptionML=[ENU=Comment;
                           FRA=Commentaires];
                SourceExpr=CommentValue;
                MultiLine=Yes }

    { 1100281002;0;Container;
                ContainerType=FactBoxArea }

    { 1100281004;1;Part   ;
                Name=AttachSubform;
                SubFormView=SORTING(Service No.,Service Document No.,Service Intervention Line No.,Intervention Quote Line No.);
                SubFormLink=Service No.=FIELD(Service No.),
                            Service Document No.=FIELD(No.),
                            Description=FILTER(*DT*);
                PagePartID=Page50339;
                PartType=Page }

  }
  CODE
  {
    VAR
      InterfaceSetup@1100281028 : Record 50139;
      Service@1100281031 : Record 50066;
      EAISetup@1100281029 : Record 8016700;
      CurrentServiceIntervLine@1000000000 : Record 50075;
      SDR64Mgt@1100281038 : Codeunit 50210;
      AgreementCodeValue@1100281000 : Code[7];
      ProviderNoValue@1000000004 : Code[20];
      WorkLotValue@1100281001 : Text[35];
      MissionReferenceValue@1100281002 : Text[35];
      MeetingDateValue@1100281003 : Date;
      NameValue@1100281004 : Text[32];
      Address1Value@1100281005 : Text[32];
      Address2Value@1100281006 : Text[32];
      Address3Value@1100281007 : Text[32];
      PostCodeValue@1100281008 : Text[5];
      CityValue@1100281009 : Text[26];
      PhoneNoValue@1100281010 : Text[10];
      MailValue@1100281011 : Text[32];
      CommentValue@1100281012 : Text[770];
      AgreementCodeVisible@1100281013 : Boolean INDATASET;
      ProviderNoVisible@1000000005 : Boolean INDATASET;
      WorkLotVisible@1100281025 : Boolean INDATASET;
      MissionReferenceVisible@1100281024 : Boolean INDATASET;
      MeetingDateVisible@1100281023 : Boolean INDATASET;
      NameVisible@1100281022 : Boolean INDATASET;
      Address1Visible@1100281021 : Boolean INDATASET;
      Address2Visible@1100281020 : Boolean INDATASET;
      Address3Visible@1100281019 : Boolean INDATASET;
      PostCodeVisible@1100281018 : Boolean INDATASET;
      CityVisible@1100281017 : Boolean INDATASET;
      PhoneNoVisible@1100281016 : Boolean INDATASET;
      MailVisible@1100281015 : Boolean INDATASET;
      CommentVisible@1100281014 : Boolean INDATASET;
      GetSetupOK@1100281027 : Boolean;
      UniqueProvider@1100281026 : Boolean;
      Text001@1000000001 : TextConst 'ENU=This product line isn''t DARVA;FRA=Cette ligne produit n''est pas issue de DARVA';
      Text002@1000000002 : TextConst 'ENU=No intervention exists on this product line;FRA=Aucune intervention existe sur cette ligne produit';
      Text003@1000000003 : TextConst 'ENU=There isn''t intervention;FRA=Il n''existe plus d''autre intervention';
      Text004@1000000006 : TextConst 'ENU=Error when SDR64 has be send.\Error type %1 - %2;FRA=Erreur de l''envoi du SDR64.\Type erreur %1 - %2';
      Text005@1000000007 : TextConst 'ENU=SDR64 send to DARVA;FRA=SDR64 transmise … DARVA.';
      Text006@1100281030 : TextConst 'ENU=SDR64 Exchange Type setup must be webservice type (check interface setup).;FRA=Le type d''‚change d‚fini pour l''envoi du SDR64 doit ˆtre de type Webservice (voir paramŠtre interface).';
      Text007@1100281032 : TextConst 'ENU=All interventions will be send to DARVA\Do you continue ?;FRA=L''envoi va ˆtre fait sur l''ensemble des interventions.\Souhaitez-vous continuer ?';
      Text008@1100281033 : TextConst 'ENU=" Do you want to send SDR64 about provider %1 ?";FRA=Souhaitez envoyer le SDR64 pour le prestataire %1 ?';
      Text009@1100281034 : TextConst 'ENU=All intervention must be filled.;FRA=L''ensemble des interventions doivent avoir ‚t‚ parcourues.';
      Text010@1100281035 : TextConst 'ENU=SDR99 new DT send to DARVA;FRA=SDR99 nouvelle DT transmise … DARVA.';
      Text011@1100281036 : TextConst 'ENU=Error when SDR99 new DT has be send.\Error type %1 - %2;FRA=Erreur de l''envoi du SDR99 nouvelle DT.\Type erreur %1 - %2';
      Text012@1100281037 : TextConst 'ENU=Do you want to send SDR99 new DT ?;FRA=Souhaitez-vous envoyer une SDR99 pour une nouvelle DT ?';
      DARVASetup@1000000008 : Record 50126;

    LOCAL PROCEDURE SendSDR64@1000000001();
    VAR
      lDARVASwitchSystemSetup@1000000002 : Record 50180;
      lEAISentMQBuffer@1000000004 : TEMPORARY Record 8016720;
      lEAIExchangeType@1000000000 : Record 8016717;
      lInterfaceReference@1100281001 : Record 50164;
      lServiceInterventionLine@1100281002 : Record 50075;
      lServiceInterventionLine2@1000000001 : Record 50075;
      lInterfaceReference2@1100281017 : Record 50164;
      lServiceInterventionLine3@1100281016 : Record 50075;
      lDARVAWorkLot@1100281005 : Record 50169;
      lXMLMgt@1100281009 : Codeunit 8016710;
      lXmlNewDoc@1100281012 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lwinHTTPService@1100281014 : Automation "{662901FC-6951-4854-9EB2-D9A2570F2B2E} 5.1:{2087C2F4-2CEF-4953-A8AB-66779B670495}:'Microsoft WinHTTP Services, version 5.1'.WinHttpRequest";
      lXmlDoc@1100281011 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lXmlDom@1100281006 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lXmlNewChild1@1100281013 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lXmlNewChild2@1100281015 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lXmlNewChild3@1100281019 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lXmlNewChild4@1100281018 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lDebugFileName@1100281000 : Text[1024];
      lServiceInterventionLineNb@1100281003 : Integer;
      lInterfaceReferenceNb@1100281004 : Integer;
      lErrorType@1100281008 : Text[30];
      lErrorDescription@1100281007 : Text[250];
      lInStream@1000000003 : InStream;
      lOutStream@1100281010 : OutStream;
    BEGIN
      SaveSDR64Information(CurrentServiceIntervLine."Line No.");
      IF NOT UniqueProvider THEN BEGIN
        IF NOT CONFIRM(Text007) THEN BEGIN
          EXIT;
        END;
        lServiceInterventionLine.SETRANGE("Service Header No.","No.");
        lServiceInterventionLine.SETFILTER("Intervention Status",'<>%1',lServiceInterventionLine."Intervention Status"::Cancel);
        lServiceInterventionLineNb := lServiceInterventionLine.COUNT;
        lInterfaceReference.SETRANGE("Source Table ID",DATABASE::"Service Intervention Line");
        lInterfaceReference.SETRANGE("Source No.","Service No.");
        lInterfaceReference.SETRANGE("Source No. 2","No.");
        //<<IMH03.PC
        //lInterfaceReferenceNb := lInterfaceReference.COUNT;
        lInterfaceReferenceNb := 0;
        IF lInterfaceReference.FINDSET THEN BEGIN
          REPEAT
            lServiceInterventionLine2.SETRANGE("Service Header No.",lInterfaceReference."Source No. 2");
            lServiceInterventionLine2.SETRANGE("Line No.",lInterfaceReference."Source No. 3");
            lServiceInterventionLine2.SETFILTER("Intervention Status",'<>%1',lServiceInterventionLine2."Intervention Status"::Cancel);
            IF lServiceInterventionLine2.FINDFIRST THEN BEGIN
              lInterfaceReferenceNb += 1;
            END;
          UNTIL lInterfaceReference.NEXT = 0;
        END;
        //>>IMH03.PC

        IF lInterfaceReferenceNb <> lServiceInterventionLineNb THEN BEGIN
          ERROR(Text009);
        END;
      END ELSE BEGIN
        IF NOT CONFIRM(STRSUBSTNO(Text008,CurrentServiceIntervLine."Provider Name")) THEN BEGIN
          EXIT;
        END;
      END;

      IF ISCLEAR(lwinHTTPService) THEN BEGIN
        CREATE(lwinHTTPService);
      END;

      GetSetup;
      lEAIExchangeType.GET(lEAIExchangeType.Type::Outbound,InterfaceSetup."SDR64 EAI Exchange Type Code");
      IF lEAIExchangeType."Bus Type" <> lEAIExchangeType."Bus Type"::"Web service" THEN BEGIN
        ERROR(Text006);
      END;

      lwinHTTPService.Open('POST',lEAIExchangeType."Outgoing Queue Label", 0);
      lwinHTTPService.SetRequestHeader('Content-type','application/soap+xml');
      lwinHTTPService.SetRequestHeader('SOAPAction','""');
      //The last parameter set to zero allows to wait till webservice finishes
      lwinHTTPService.SetTimeouts(10000,10000,10000,0);

      //<<IMH09.PC
      //CLEAR(lXmlDoc);
      //CREATE(lXmlDoc);
      //GenerateXMLSDR64(lXmlDoc);
      //lXmlDoc.save('\\imha.local\imha\Support$\Temp\SDR64\EnvoiSDR64.xml');
      lDARVASwitchSystemSetup.SETRANGE("Corporate No.","Corporate No.");
      lDARVASwitchSystemSetup.SETRANGE("Corporate Region Code","Corporate Region Code");
      //<<IMH11.ACO
      DARVASetup.GET;
      //lDARVASwitchSystemSetup.SETRANGE("DARVA Data Flow Type",'SD64');
      lDARVASwitchSystemSetup.SETRANGE("DARVA Data Flow Type", DARVASetup."DARVA SD64 Code");
      //>>IMH11.ACO
      lDARVASwitchSystemSetup.SETRANGE(Direction,lDARVASwitchSystemSetup.Direction::Send);
      lDARVASwitchSystemSetup.SETRANGE("Line Type",lDARVASwitchSystemSetup."Line Type"::Page);
      IF lDARVASwitchSystemSetup.ISEMPTY THEN BEGIN
        lDARVASwitchSystemSetup.SETRANGE("Corporate Region Code",'');
      END;
      lDARVASwitchSystemSetup.FINDFIRST;

      lXMLMgt.CreateXml(lXmlNewDoc,'<FLUXML/>',lXmlNewChild1);
      lXMLMgt.AddElement(lXmlNewChild1,'UniqueProvider',FORMAT(TRUE),'',lXmlNewChild2);
      lXMLMgt.AddElement(lXmlNewChild1,'AgreementCode',AgreementCodeValue,'',lXmlNewChild2);
      lXMLMgt.AddElement(lXmlNewChild1,'ProviderNo',ProviderNoValue,'',lXmlNewChild2);
      lXMLMgt.AddElement(lXmlNewChild1,'WorkLot',WorkLotValue,'',lXmlNewChild2);
      lXMLMgt.AddElement(lXmlNewChild1,'MissionReference',MissionReferenceValue,'',lXmlNewChild2);
      lXMLMgt.AddElement(lXmlNewChild1,'MeetingDate',FORMAT(MeetingDateValue,0,'<Year4>-<Month,2>-<Day,2>'),'',lXmlNewChild2);
      lXMLMgt.AddElement(lXmlNewChild1,'Name',NameValue,'',lXmlNewChild2);
      lXMLMgt.AddElement(lXmlNewChild1,'Address1',Address1Value,'',lXmlNewChild2);
      lXMLMgt.AddElement(lXmlNewChild1,'Address2',Address2Value,'',lXmlNewChild2);
      lXMLMgt.AddElement(lXmlNewChild1,'Address3',Address3Value,'',lXmlNewChild2);
      lXMLMgt.AddElement(lXmlNewChild1,'PostCode',PostCodeValue,'',lXmlNewChild2);
      lXMLMgt.AddElement(lXmlNewChild1,'City',CityValue,'',lXmlNewChild2);
      lXMLMgt.AddElement(lXmlNewChild1,'PhoneNo',PhoneNoValue,'',lXmlNewChild2);
      lXMLMgt.AddElement(lXmlNewChild1,'Mail',MailValue,'',lXmlNewChild2);
      lXMLMgt.AddElement(lXmlNewChild1,'Comment',CommentValue,'',lXmlNewChild2);
      //<<IMH10.PC
      lEAISentMQBuffer."GUID Fusion Code" := '000000';
      IF UniqueProvider THEN BEGIN
        lEAISentMQBuffer."GUID Fusion Code"[1] := '1';
      END;
      IF WorkLotVisible THEN BEGIN
        lEAISentMQBuffer."GUID Fusion Code"[2] := '1';
      END;
      IF MeetingDateVisible THEN BEGIN
        lEAISentMQBuffer."GUID Fusion Code"[3] := '1';
      END;
      IF PhoneNoValue <> '' THEN BEGIN
        lEAISentMQBuffer."GUID Fusion Code"[4] := '1';
      END;
      IF MailValue <> '' THEN BEGIN
        lEAISentMQBuffer."GUID Fusion Code"[5] := '1';
      END;
      IF AgreementCodeVisible THEN BEGIN
        lEAISentMQBuffer."GUID Fusion Code"[6] := '1';
      END;
      //>>IMH10.PC
      lEAISentMQBuffer."Response XML Source".CREATEOUTSTREAM(lOutStream);
      lXmlNewDoc.save(lOutStream);
      lEAISentMQBuffer."Service Header No." := "No.";
      lEAISentMQBuffer."Service No." := "Service No.";
      lEAISentMQBuffer."Act Priority" := CurrentServiceIntervLine."Line No.";
      CODEUNIT.RUN(lDARVASwitchSystemSetup."Codeunit No.",lEAISentMQBuffer);

      lEAISentMQBuffer.CALCFIELDS("XML Source");
      lEAISentMQBuffer."XML Source".CREATEINSTREAM(lInStream);
      CLEAR(lXmlDoc);
      CREATE(lXmlDoc);
      lXmlDoc.load(lInStream);

      //>>IMH09.PC

      lwinHTTPService.Send(lXmlDoc);
      CLEAR(lXmlDoc);
      IF NOT lwinHTTPService.WaitForResponse(60) THEN BEGIN
        ERROR('Request timed out.');
      END;

      IF lwinHTTPService.Status <> 200 THEN BEGIN
        CREATE(lXmlDom);
        lXmlDom.load(lwinHTTPService.ResponseStream);
        GetWSDarvaError(lXmlDom,lErrorType,lErrorDescription);
        ERROR(STRSUBSTNO(Text004, lErrorType, lErrorDescription));
      END;

      IF NOT UniqueProvider THEN BEGIN
        lInterfaceReference.SETRANGE("Source Table ID",DATABASE::"Service Intervention Line");
        lInterfaceReference.SETRANGE("Source No.","Service No.");
        lInterfaceReference.SETRANGE("Source No. 2","No.");
        IF lInterfaceReference.FINDSET THEN BEGIN
          REPEAT
            lInterfaceReference."SDR64 Send" := TRUE;
            lInterfaceReference.MODIFY;
            IF lDARVAWorkLot.GET(
                 lInterfaceReference."Source No.",
                 lInterfaceReference."Source No. 2",
                 lInterfaceReference."Work Lot No.")
            THEN BEGIN
              lDARVAWorkLot."Provider No." := lInterfaceReference."Provider No.";
              lDARVAWorkLot.MODIFY;
            END;
          UNTIL lInterfaceReference.NEXT = 0;
        END;
      END ELSE BEGIN
        lInterfaceReference.SETRANGE("Source Table ID",DATABASE::"Service Intervention Line");
        lInterfaceReference.SETRANGE("Source No.","Service No.");
        lInterfaceReference.SETRANGE("Source No. 2","No.");
        lInterfaceReference.SETRANGE("Source No. 3",CurrentServiceIntervLine."Line No.");
        IF lInterfaceReference.FINDFIRST THEN BEGIN
          lInterfaceReference."SDR64 Send" := TRUE;
          lInterfaceReference.MODIFY;
          IF lDARVAWorkLot.GET(
               lInterfaceReference."Source No.",
               lInterfaceReference."Source No. 2",
               lInterfaceReference."Work Lot No.")
          THEN BEGIN
            lDARVAWorkLot."Provider No." := lInterfaceReference."Provider No.";
            lDARVAWorkLot.MODIFY;
          END;
        END;
      END;
      // Gestion du sdr64 sur la ligne de produit
      lInterfaceReference.SETRANGE("Source Table ID",DATABASE::"Service Header");
      lInterfaceReference.SETRANGE("Source No.","No.");
      IF lInterfaceReference.ISEMPTY THEN BEGIN
        lInterfaceReference."Source Table ID" := DATABASE::"Service Header";
        lInterfaceReference."Source No." := "No.";
        lInterfaceReference."SDR64 Send" := TRUE;
        lInterfaceReference.INSERT(TRUE);
      END ELSE BEGIN
        lInterfaceReference.FINDFIRST;
        lInterfaceReference."SDR64 Send" := TRUE;
        lInterfaceReference.MODIFY(TRUE);
      END;

      SDR64Mgt.CreateSendSDRComment(0, Rec);  //IMH05
      MESSAGE(Text005);
    END;

    LOCAL PROCEDURE GenerateXMLSDR64@1000000004(VAR pXMLDocument@1100281000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{88D96A05-F192-11D4-A65F-0040963251E5}:'Microsoft XML, v6.0'.DOMDocument60");
    VAR
      lService@1100281008 : Record 50066;
      lEAIPartner@1100281005 : Record 8016707;
      lInterfaceReference@1100281014 : Record 50164;
      lServiceInterventionLine@1100281015 : Record 50075;
      lEAIXMLDocMgt@1100281001 : Codeunit 8016713;
      lDARVAXMLMgt@1100281002 : Codeunit 50154;
      lXMLNewChild1@1100281007 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lXMLNewChild2@1100281006 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lXMLNewChild3@1100281004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lXMLNewChild4@1100281013 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lXMLNewChild5@1100281012 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lXMLNewChild6@1100281011 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lXMLNewChild7@1100281010 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lXMLNewChild8@1100281009 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lNameSpace@1100281003 : Text[250];
    BEGIN
      //<<IMH09.PC
      EXIT;
      //>>IMH09.PC
      GetSetup;
      lEAIPartner.GET(InterfaceSetup."DARVA EAI Partner Code");
      pXMLDocument.async := FALSE;

      lDARVAXMLMgt.SetType(1);
      pXMLDocument.setProperty('SelectionNamespaces',lDARVAXMLMgt.GetSelectionNameSpace);
      lDARVAXMLMgt.CreateWSHeader(pXMLDocument,lXMLNewChild2,lEAIPartner.Username,lEAIPartner.Password);
      WITH lEAIXMLDocMgt DO BEGIN
        lNameSpace := lDARVAXMLMgt.GetNameSpace(1);
        AddElement(lXMLNewChild2,'sch:SoumettreSuiviDossierReparateurDesignationPrestataireDemande','',lNameSpace,lXMLNewChild3);
        //Context
        lDARVAXMLMgt.Sent_InsertContext(lEAIPartner,lXMLNewChild3);
        //Dossier
        lDARVAXMLMgt.Sent_InsertService(lEAIPartner,Service,lXMLNewChild3);
        //Partenaires
        lDARVAXMLMgt.Sent_InsertPartners(lEAIPartner,Rec,lXMLNewChild3);
        lNameSpace := lDARVAXMLMgt.GetNameSpace(2);
        AddElement(lXMLNewChild3,'ns:suiviDossierReparateurDesignationPrestataire','',lNameSpace,lXMLNewChild4);
        AddElement(lXMLNewChild4,'ns:prestataires','',lNameSpace,lXMLNewChild5);
        IF NOT UniqueProvider THEN BEGIN
          lInterfaceReference.SETRANGE("Source Table ID",DATABASE::"Service Intervention Line");
          lInterfaceReference.SETRANGE("Source No.","Service No.");
          lInterfaceReference.SETRANGE("Source No. 2","No.");
          IF lInterfaceReference.FINDSET THEN BEGIN
            REPEAT
              //<<IMH08.PC
              IF lServiceInterventionLine.GET(lInterfaceReference."Source No. 2",lInterfaceReference."Source No. 3") THEN BEGIN
                IF lServiceInterventionLine."Intervention Status" <> lServiceInterventionLine."Intervention Status"::Cancel THEN BEGIN
              //>>IMH08.PC
                  AddElement(lXMLNewChild5,'ns:prestataire','',lNameSpace,lXMLNewChild6);
                  AddElement(lXMLNewChild6,'ns:codeEntrepriseAgreee',lInterfaceReference."Agreement Code",lNameSpace,lXMLNewChild7);
                  IF WorkLotVisible THEN BEGIN
                    AddElement(lXMLNewChild6,'ns:numeroLotTravaux',lInterfaceReference."Work Lot No.",lNameSpace,lXMLNewChild7);
                  END;
                  //<<IMH07.PC
                  //AddElement(lXMLNewChild6,'ns:referenceMission',lInterfaceReference."Mission Reference",lNameSpace,lXMLNewChild7);
                  AddElement(lXMLNewChild6,'ns:referenceMission',COPYSTR("No.",1,35),lNameSpace,lXMLNewChild7);
                  //>>IMH07.PC
                  IF MeetingDateVisible THEN BEGIN
                    AddElement(
                      lXMLNewChild6,'ns:dateRendezVous',
                      (FORMAT(lInterfaceReference."Meeting Date",0,'<Year4>-<Month,2>-<Day,2>')),lNameSpace,lXMLNewChild7);
                  //<<IMH04.PC
                  END ELSE BEGIN
                    AddElement(
                      lXMLNewChild6,'ns:dateRendezVous',
                      (FORMAT(WORKDATE,0,'<Year4>-<Month,2>-<Day,2>')),lNameSpace,lXMLNewChild7);
                  //>>IMH04.PC
                  END;
                  AddElement(lXMLNewChild6,'ns:nomPrenom',lInterfaceReference."Provider Name",lNameSpace,lXMLNewChild7);
                  AddElement(lXMLNewChild6,'ns:adresse','',lNameSpace,lXMLNewChild7);
                  AddElement(lXMLNewChild7,'ns:adresse1',lInterfaceReference."Address 1",lNameSpace,lXMLNewChild8);
                  AddElement(lXMLNewChild7,'ns:adresse2',lInterfaceReference."Address 2",lNameSpace,lXMLNewChild8);
                  IF lInterfaceReference."Address 3" <> '' THEN BEGIN
                    AddElement(lXMLNewChild7,'ns:adresse3',lInterfaceReference."Address 3",lNameSpace,lXMLNewChild8);
                  END;
                  AddElement(lXMLNewChild7,'ns:codePostal',lInterfaceReference."Post Code",lNameSpace,lXMLNewChild8);
                  AddElement(lXMLNewChild7,'ns:localite',lInterfaceReference.City,lNameSpace,lXMLNewChild8);
                  IF PhoneNoValue <> '' THEN BEGIN
                    AddElement(lXMLNewChild6,'ns:telephone',DELCHR(lInterfaceReference."Phone No.",'=',' '),lNameSpace,lXMLNewChild7);
                  END;
                  IF MailValue <> '' THEN BEGIN
                    //<<IMH06
                    //AddElement(lXMLNewChild6,'ns:mail',lInterfaceReference."E-mail",lNameSpace,lXMLNewChild7);
                    AddElement(lXMLNewChild6,'ns:mail',DeleteMailInvalidChar(lInterfaceReference."E-mail"),lNameSpace,lXMLNewChild7);
                    //>>IMH06
                  END;
                END;
              END;
            UNTIL lInterfaceReference.NEXT = 0;
          END;
        END ELSE BEGIN
          AddElement(lXMLNewChild5,'ns:prestataire','',lNameSpace,lXMLNewChild6);
          IF AgreementCodeVisible THEN BEGIN
            AddElement(lXMLNewChild6,'ns:codeEntrepriseAgreee',AgreementCodeValue,lNameSpace,lXMLNewChild7);
          END;
          IF WorkLotVisible THEN BEGIN
            AddElement(lXMLNewChild6,'ns:numeroLotTravaux',WorkLotValue,lNameSpace,lXMLNewChild7);
          END;
          //<<IMH07.PC
          //AddElement(lXMLNewChild6,'ns:referenceMission',"Your Reference",lNameSpace,lXMLNewChild7);
          AddElement(lXMLNewChild6,'ns:referenceMission',COPYSTR("No.",1,35),lNameSpace,lXMLNewChild7);
          //>>IMH07.PC
          IF MeetingDateVisible THEN BEGIN
            AddElement(
              lXMLNewChild6,'ns:dateRendezVous',
              (FORMAT(MeetingDateValue,0,'<Year4>-<Month,2>-<Day,2>')),lNameSpace,lXMLNewChild7);
          //<<IMH04.PC
          END ELSE BEGIN
            AddElement(
              lXMLNewChild6,'ns:dateRendezVous',
              (FORMAT(WORKDATE,0,'<Year4>-<Month,2>-<Day,2>')),lNameSpace,lXMLNewChild7);
          //>>IMH04.PC
          END;
          AddElement(lXMLNewChild6,'ns:nomPrenom',NameValue,lNameSpace,lXMLNewChild7);
          AddElement(lXMLNewChild6,'ns:adresse','',lNameSpace,lXMLNewChild7);
          AddElement(lXMLNewChild7,'ns:adresse1',Address1Value,lNameSpace,lXMLNewChild8);
          AddElement(lXMLNewChild7,'ns:adresse2',Address2Value,lNameSpace,lXMLNewChild8);
          AddElement(lXMLNewChild7,'ns:codePostal',PostCodeValue,lNameSpace,lXMLNewChild8);
          AddElement(lXMLNewChild7,'ns:localite',CityValue,lNameSpace,lXMLNewChild8);
          IF PhoneNoValue <> '' THEN BEGIN
            AddElement(lXMLNewChild6,'ns:telephone',DELCHR(PhoneNoValue,'=',' '),lNameSpace,lXMLNewChild7);
          END;
          IF MailValue <> '' THEN BEGIN
            //<<IMH06
            //AddElement(lXMLNewChild6,'ns:mail',MailValue,lNameSpace,lXMLNewChild7);
            AddElement(lXMLNewChild6,'ns:mail',DeleteMailInvalidChar(MailValue),lNameSpace,lXMLNewChild7);
            //>>IMH06
          END;
        END;
        AddElement(lXMLNewChild4,'ns:commentaireLibre',CommentValue,lNameSpace,lXMLNewChild5);
      END;
    END;

    LOCAL PROCEDURE SendSDR99NewDT@1100281009();
    VAR
      lDARVASwitchSystemSetup@1000000000 : Record 50180;
      lEAIExchangeType@1100281003 : Record 8016717;
      lInterfaceReference@1100281006 : Record 50164;
      lEAISentMQBuffer@1000000001 : Record 8016720;
      lwinHTTPService@1100281002 : Automation "{662901FC-6951-4854-9EB2-D9A2570F2B2E} 5.1:{2087C2F4-2CEF-4953-A8AB-66779B670495}:'Microsoft WinHTTP Services, version 5.1'.WinHttpRequest";
      lXmlDoc@1100281001 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lXmlDom@1100281000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lErrorType@1100281005 : Text[30];
      lErrorDescription@1100281004 : Text[250];
      lInStream@1000000002 : InStream;
    BEGIN
      IF NOT CONFIRM(Text012) THEN BEGIN
        EXIT;
      END;

      IF ISCLEAR(lwinHTTPService) THEN BEGIN
        CREATE(lwinHTTPService);
      END;

      GetSetup;
      lEAIExchangeType.GET(lEAIExchangeType.Type::Outbound,InterfaceSetup."SDR64 EAI Exchange Type Code");
      IF lEAIExchangeType."Bus Type" <> lEAIExchangeType."Bus Type"::"Web service" THEN BEGIN
        ERROR(Text006);
      END;

      lwinHTTPService.Open('POST',lEAIExchangeType."Outgoing Queue Label", 0);
      lwinHTTPService.SetRequestHeader('Content-type','application/soap+xml');
      lwinHTTPService.SetRequestHeader('SOAPAction','""');
      //The last parameter set to zero allows to wait till webservice finishes
      lwinHTTPService.SetTimeouts(10000,10000,10000,0);

      //<<IMH09.PC
      //CLEAR(lXmlDoc);
      //CREATE(lXmlDoc);
      //GenerateXMLSDR99NewDT(lXmlDoc);
      //lXmlDoc.save('\\imha.local\imha\Support$\Temp\SDR64\EnvoiSDR99.xml');
      lDARVASwitchSystemSetup.SETRANGE("Corporate No.","Corporate No.");
      lDARVASwitchSystemSetup.SETRANGE("Corporate Region Code","Corporate Region Code");
      //<<IMH11.ACO
      DARVASetup.GET;
      //lDARVASwitchSystemSetup.SETRANGE("DARVA Data Flow Type",'SD99');
      lDARVASwitchSystemSetup.SETRANGE("DARVA Data Flow Type",DARVASetup."DARVA SD99 Code");
      //>>IMH11.ACO
      lDARVASwitchSystemSetup.SETRANGE(Direction,lDARVASwitchSystemSetup.Direction::Send);
      lDARVASwitchSystemSetup.SETRANGE("Line Type",lDARVASwitchSystemSetup."Line Type"::Page);
      IF lDARVASwitchSystemSetup.ISEMPTY THEN BEGIN
        lDARVASwitchSystemSetup.SETRANGE("Corporate Region Code",'');
      END;
      lDARVASwitchSystemSetup.FINDFIRST;
      lEAISentMQBuffer."Service Header No." := "No.";
      lEAISentMQBuffer."Service No." := "Service No.";
      lEAISentMQBuffer."Act Priority" := CurrentServiceIntervLine."Line No.";
      CODEUNIT.RUN(lDARVASwitchSystemSetup."Codeunit No.",lEAISentMQBuffer);
      CLEAR(lXmlDoc);
      CREATE(lXmlDoc);
      lEAISentMQBuffer.CALCFIELDS("XML Source");
      lEAISentMQBuffer."XML Source".CREATEINSTREAM(lInStream);
      lXmlDoc.load(lInStream);
      //lXmlDoc.save('\\imha.local\imha\Support$\Temp\Test_DARVA\EnvoiSDR99.xml');
      //>>IMH09.PC

      lwinHTTPService.Send(lXmlDoc);
      CLEAR(lXmlDoc);
      IF NOT lwinHTTPService.WaitForResponse(60) THEN BEGIN
        ERROR('Request timed out.');
      END;

      IF lwinHTTPService.Status <> 200 THEN BEGIN
        CREATE(lXmlDom);
        lXmlDom.load(lwinHTTPService.ResponseStream);
        GetWSDarvaError(lXmlDom,lErrorType,lErrorDescription);
        ERROR(STRSUBSTNO(Text011, lErrorType, lErrorDescription));
      END;

      // Gestion du sdr64 sur la ligne de produit
      lInterfaceReference.SETRANGE("Source Table ID",DATABASE::"Service Header");
      lInterfaceReference.SETRANGE("Source No.","No.");
      IF lInterfaceReference.ISEMPTY THEN BEGIN
        lInterfaceReference."Source Table ID" := DATABASE::"Service Header";
        lInterfaceReference."Source No." := "No.";
        lInterfaceReference."SDR99 New DT" := TRUE;
        lInterfaceReference.INSERT(TRUE);
      END ELSE BEGIN
        lInterfaceReference.FINDFIRST;
        lInterfaceReference."SDR99 New DT" := TRUE;
        lInterfaceReference.MODIFY(TRUE);
      END;

      SDR64Mgt.CreateSendSDRComment(0, Rec);  //IMH05
      MESSAGE(Text010);
    END;

    LOCAL PROCEDURE GenerateXMLSDR99NewDT@1100281010(VAR pXMLDocument@1100281000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{88D96A05-F192-11D4-A65F-0040963251E5}:'Microsoft XML, v6.0'.DOMDocument60");
    VAR
      lService@1100281008 : Record 50066;
      lEAIPartner@1100281005 : Record 8016707;
      lInterfaceReference@1100281014 : Record 50164;
      lEAIXMLDocMgt@1100281001 : Codeunit 8016713;
      lDARVAXMLMgt@1100281002 : Codeunit 50154;
      lXMLNewChild1@1100281007 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lXMLNewChild2@1100281006 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lXMLNewChild3@1100281004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lXMLNewChild4@1100281013 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lXMLNewChild5@1100281012 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lXMLNewChild6@1100281011 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lXMLNewChild7@1100281010 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lXMLNewChild8@1100281009 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lNameSpace@1100281003 : Text[250];
      lBigText@1100281015 : BigText;
    BEGIN
      //<<IMH09.PC
      EXIT;
      //>>IMH09.PC
      GetSetup;
      lEAIPartner.GET(InterfaceSetup."DARVA EAI Partner Code");
      pXMLDocument.async := FALSE;

      lDARVAXMLMgt.SetType(1);
      pXMLDocument.setProperty('SelectionNamespaces',lDARVAXMLMgt.GetSelectionNameSpace);
      lDARVAXMLMgt.CreateWSHeader(pXMLDocument,lXMLNewChild2,lEAIPartner.Username,lEAIPartner.Password);
      WITH lEAIXMLDocMgt DO BEGIN
        lNameSpace := lDARVAXMLMgt.GetNameSpace(1);
        AddElement(lXMLNewChild2,'sch:SoumettreSuiviDossierReparateurCommentaireDemande','',lNameSpace,lXMLNewChild3);

        lNameSpace := lDARVAXMLMgt.GetNameSpace(2);
        //context
        lDARVAXMLMgt.Sent_InsertContext(lEAIPartner,lXMLNewChild3);
        //dossier
        lDARVAXMLMgt.Sent_InsertService(lEAIPartner,Service,lXMLNewChild3);
        //Partenaire
        lDARVAXMLMgt.Sent_InsertPartners(lEAIPartner,Rec,lXMLNewChild3);
        AddElement(lXMLNewChild3,'ns:suiviDossierReparateurCommentaire','',lNameSpace,lXMLNewChild4);

        GetCommentSDR99NewDT(lBigText,Rec);
        AddBigTextElement(lXMLNewChild4,'ns:commentaireLibre',lBigText,lNameSpace,lXMLNewChild5);
      END;
    END;

    PROCEDURE SetServiceHeader@1100281000(pServiceHeaderNo@1100281000 : Code[20]);
    VAR
      lServiceInterventionLine@1000000000 : Record 50075;
    BEGIN
      GET("Document Type"::Invoice,pServiceHeaderNo);
      FILTERGROUP(2);
      SETRECFILTER;
      FILTERGROUP(0);

      Service.GET("Service No.");
      IF NOT "DARVA Interface" THEN BEGIN
        ERROR(Text001);
      END;
      GetSetup;

      MissionReferenceValue := "Your Reference";
      MeetingDateValue := TODAY;
      CommentValue := GetProviderInformation(pServiceHeaderNo);

      IF "Corporate No." = EAISetup."MACIF Customer No." THEN BEGIN
        CASE Requisitioner OF
          // ASSUREUR
          InterfaceSetup."DARVA Corporate Cust. Code" : BEGIN
            UniqueProvider := TRUE;
            ProviderNoVisible := TRUE;
            MeetingDateValue := GetMinDate(pServiceHeaderNo);
            AgreementCodeVisible := TRUE;
            WorkLotVisible := FALSE;
            MissionReferenceVisible := FALSE;
            MeetingDateVisible := FALSE;
            NameVisible := TRUE;
            Address1Visible := TRUE;
            Address2Visible := TRUE;
            Address3Visible := TRUE;
            PostCodeVisible := TRUE;
            CityVisible := TRUE;
            PhoneNoVisible := TRUE;
            MailVisible := TRUE;
            CommentVisible := TRUE;
          END;
          // EXPERT ou TELE EXPERT
          InterfaceSetup."DARVA Expert Code",
          InterfaceSetup."DARVA Tele-Expert Code" : BEGIN
            UniqueProvider := FALSE;
            ProviderNoVisible := FALSE;
            AgreementCodeVisible := TRUE;
            WorkLotVisible := TRUE;
            MissionReferenceVisible := FALSE;
            MeetingDateVisible := FALSE;
            NameVisible := TRUE;
            Address1Visible := TRUE;
            Address2Visible := TRUE;
            Address3Visible := TRUE;
            PostCodeVisible := TRUE;
            CityVisible := TRUE;
            PhoneNoVisible := TRUE;
            MailVisible := TRUE;
            CommentVisible := TRUE;
          END;
        END;
      END;
      IF "Corporate No." = EAISetup."AGPM Customer No." THEN BEGIN
        UniqueProvider := TRUE;
        ProviderNoVisible := TRUE;
        AgreementCodeVisible := FALSE;
        WorkLotVisible := FALSE;
        MissionReferenceVisible := TRUE;
        MeetingDateVisible := FALSE;
        NameVisible := TRUE;
        Address1Visible := TRUE;
        Address2Visible := TRUE;
        Address3Visible := TRUE;
        PostCodeVisible := TRUE;
        CityVisible := TRUE;
        PhoneNoVisible := TRUE;
        MailVisible := TRUE;
        CommentVisible := TRUE;
      END;

      lServiceInterventionLine.SETRANGE("Service Header No.","No.");
      lServiceInterventionLine.SETFILTER("Intervention Status",'<>%1',lServiceInterventionLine."Intervention Status"::Cancel);
      IF NOT lServiceInterventionLine.FINDFIRST THEN BEGIN
        ERROR(Text002);
      END;
      CurrentServiceIntervLine := lServiceInterventionLine;
      GetIntervLineInfo(FALSE);
    END;

    LOCAL PROCEDURE CheckValueBeforeSend@1100281002() rValue : Boolean;
    VAR
      lDARVAMission@1100281000 : Record 50168;
    BEGIN
      rValue := FALSE;
      GetSetup;


      rValue := TRUE;
    END;

    LOCAL PROCEDURE GetSetup@1100281001();
    BEGIN
      IF GetSetupOK THEN BEGIN
        EXIT;
      END;

      InterfaceSetup.GET;
      EAISetup.GET;
    END;

    PROCEDURE GetNext@1100281011();
    VAR
      lServiceInterventionLine@1100281000 : Record 50075;
    BEGIN
      lServiceInterventionLine := CurrentServiceIntervLine;
      lServiceInterventionLine.SETRECFILTER;
      lServiceInterventionLine.SETRANGE("Line No.");
      lServiceInterventionLine.SETRANGE("Service Header No.","No.");
      lServiceInterventionLine.SETFILTER("Intervention Status",'<>%1',lServiceInterventionLine."Intervention Status"::Cancel);
      IF lServiceInterventionLine.NEXT = 0 THEN BEGIN
        MESSAGE(Text003);
      END ELSE BEGIN
        SaveSDR64Information(CurrentServiceIntervLine."Line No.");
        CurrentServiceIntervLine := lServiceInterventionLine;
        GetIntervLineInfo(FALSE);
        //CurrPage.IntervSubform.FORM.SetIntervLine(CurrentServiceIntervLine);
        //CurrPage.IntervSubform.FORM.UpdateSubPage;
      END;
    END;

    PROCEDURE GetPrevious@1100281012();
    VAR
      lServiceInterventionLine@1100281000 : Record 50075;
    BEGIN
      lServiceInterventionLine := CurrentServiceIntervLine;
      lServiceInterventionLine.SETRECFILTER;
      lServiceInterventionLine.SETRANGE("Line No.");
      lServiceInterventionLine.SETRANGE("Service Header No.","No.");
      lServiceInterventionLine.SETFILTER("Intervention Status",'<>%1',lServiceInterventionLine."Intervention Status"::Cancel);
      IF lServiceInterventionLine.NEXT(-1) = 0 THEN BEGIN
        MESSAGE(Text003);
      END ELSE BEGIN
        SaveSDR64Information(CurrentServiceIntervLine."Line No.");
        CurrentServiceIntervLine := lServiceInterventionLine;
        GetIntervLineInfo(FALSE);
        //CurrPage.IntervSubform.FORM.SetIntervLine(CurrentServiceIntervLine);
        //CurrPage.IntervSubform.FORM.UpdateSubPage;
      END;
    END;

    LOCAL PROCEDURE GetAgreement@1100281003(pLookup@1100281002 : Boolean) rIsIMH : Boolean;
    VAR
      lProviderAgreement@1100281000 : Record 50012;
      lCorporateRegion@1100281001 : Record 50058;
    BEGIN
      lProviderAgreement.SETCURRENTKEY("Detail Corporate No.","Detail Corporate Region Code");
      lProviderAgreement.SETRANGE("Detail Corporate No.","Corporate No.");
      lProviderAgreement.SETRANGE("Detail Corporate Region Code","Corporate Region Code");
      lProviderAgreement.SETRANGE("Provider No.",CurrentServiceIntervLine."Provider No.");
      IF lProviderAgreement.ISEMPTY THEN BEGIN
        lProviderAgreement.SETRANGE("Detail Corporate Region Code");
      END;
      IF NOT lProviderAgreement.ISEMPTY THEN BEGIN
        IF pLookup THEN BEGIN
          IF lProviderAgreement.COUNT = 1 THEN BEGIN
            lProviderAgreement.FINDFIRST;
            AgreementCodeValue := lProviderAgreement."Agreement No.";
          END ELSE BEGIN
            IF PAGE.RUNMODAL(0,lProviderAgreement) = ACTION::LookupOK THEN BEGIN
              AgreementCodeValue := lProviderAgreement."Agreement No.";
            END;
          END;
        END ELSE BEGIN
          IF lProviderAgreement.FINDFIRST THEN BEGIN
            AgreementCodeValue := lProviderAgreement."Agreement No.";
          END;
        END;
      END ELSE BEGIN
        lCorporateRegion.SETRANGE("Corporate No.","Corporate No.");
        lCorporateRegion.SETRANGE("Region Code","Corporate Region Code");
        IF pLookup THEN BEGIN
          IF lCorporateRegion.COUNT = 1 THEN BEGIN
            lCorporateRegion.FINDFIRST;
            AgreementCodeValue := lCorporateRegion."SDR64 Provider No.";
            rIsIMH := TRUE;
          END ELSE BEGIN
            IF PAGE.RUNMODAL(0,lCorporateRegion) = ACTION::LookupOK THEN BEGIN
              AgreementCodeValue := lCorporateRegion."SDR64 Provider No.";
            END;
          END;
        END ELSE BEGIN
          IF lCorporateRegion.FINDFIRST THEN BEGIN
            AgreementCodeValue := lCorporateRegion."SDR64 Provider No.";
            rIsIMH := TRUE;
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE GetProviderInformation@1100281008(pServiceHeaderNo@1100281001 : Code[20]) rValue : Text[770];
    VAR
      lProvider@1100281002 : Record 50000;
      lServiceInterventionLine@1100281000 : Record 50075;
      lCodeBuffer@1100281009 : TEMPORARY Record 50079;
      lTempText@1100281004 : Text[770];
      lTempText2@1100281003 : Text[770];
    BEGIN
      WITH lServiceInterventionLine DO BEGIN
        SETRANGE("Service Header No.",pServiceHeaderNo);
        SETFILTER("Intervention Status",'<>%1',"Intervention Status"::Cancel);
        IF FINDSET THEN BEGIN
          REPEAT
            lTempText := '';
            lTempText2 := '';

            IF lProvider.GET("Provider No.") THEN BEGIN
              IF NOT lCodeBuffer.GET(0,0,lProvider."No.") THEN BEGIN
                lCodeBuffer."Table ID" := 0;
                lCodeBuffer."Field ID" := 0;
                lCodeBuffer.Code := lProvider."No.";
                lCodeBuffer.INSERT;

                IF (STRLEN(rValue) <> 0) AND (STRLEN(rValue) < 667) THEN BEGIN
                  rValue += ' * ';
                END;

                IF lProvider.Name <> '' THEN BEGIN
                  IF (STRLEN(rValue) < (770 - STRLEN(lProvider.Name))) THEN BEGIN
                    rValue += lProvider.Name;
                  END;
                END;

                lTempText2 := GetProviderPhoneNo(lProvider."No.");
                IF lTempText2 <> '' THEN BEGIN
                  IF rValue <> '' THEN BEGIN
                    rValue += ' - ';
                  END;
                  IF (STRLEN(rValue) < (770 - STRLEN(lTempText2))) THEN BEGIN
                    rValue += lTempText2;
                  END;
                END;

                lTempText2 := lProvider."Post Code" + ' ' + lProvider.City;
                IF lTempText2 <> '' THEN BEGIN
                  IF rValue <> '' THEN BEGIN
                    rValue += ' - ';
                  END;
                  IF (STRLEN(rValue) < (770 - STRLEN(lTempText2))) THEN BEGIN
                    rValue += lTempText2;
                  END;
                END;
              END;
            END;
          UNTIL NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE GetProviderPhoneNo@1100281004(pProviderNo@1100281001 : Code[20]) rValue : Text[30];
    VAR
      lProvider@1100281000 : Record 50000;
      lContact@1100281002 : Record 5050;
    BEGIN
      // IMH02.PC
      // Permet de r‚cup‚rer le premier nø de t‚l‚phone d'un prestataire

      rValue := '';

      IF NOT lProvider.GET(pProviderNo) THEN BEGIN
        EXIT;
      END;
      WITH lContact DO BEGIN
        IF GET(lProvider."Admin. Contact No.") THEN BEGIN
          IF "Phone No." <> '' THEN BEGIN
            rValue := "Phone No.";
          END;
          IF ("Mobile Phone No." <> '') AND (rValue = '') THEN BEGIN
            rValue := "Mobile Phone No.";
          END;
          IF ("Mobile Phone No. 2" <> '') AND (rValue = '') THEN BEGIN
            rValue := "Mobile Phone No. 2";
          END;
          IF ("Business Phone No." <> '') AND (rValue = '') THEN BEGIN
            rValue := "Business Phone No.";
          END;
          IF ("Constraint Phone No." <> '') AND (rValue = '') THEN BEGIN
            rValue := "Constraint Phone No.";
          END;
        END;
      END;
      IF rValue = '' THEN BEGIN
        WITH lProvider DO BEGIN
          IF "Phone No." <> '' THEN BEGIN
            rValue := "Phone No.";
          END;
          IF ("Mobile Phone No." <> '') AND (rValue = '') THEN BEGIN
            rValue := "Mobile Phone No.";
          END;
          IF ("Mobile Phone No. 2" <> '') AND (rValue = '') THEN BEGIN
            rValue := "Mobile Phone No. 2";
          END;
          IF ("Business Phone No." <> '') AND (rValue = '') THEN BEGIN
            rValue := "Business Phone No.";
          END;
          IF ("Constraint Phone No." <> '') AND (rValue = '') THEN BEGIN
            rValue := "Constraint Phone No.";
          END;
        END;
      END;
      rValue := DELCHR(rValue,'=',' ');
    END;

    LOCAL PROCEDURE GetMinDate@1100281014(pServiceHeaderNo@1100281000 : Code[20]) rDate : Date;
    VAR
      lServIntervLine@1100281001 : Record 50075;
      lDate@1100281002 : Date;
    BEGIN
      //<<IMH02.PC
      EXIT(TODAY);
      //>>IMH02.PC
      lServIntervLine.SETRANGE("Service Header No.",pServiceHeaderNo);
      IF lServIntervLine.FINDSET THEN BEGIN
        REPEAT
          IF lServIntervLine."Previsit Date" <> 0D THEN BEGIN
            lDate := lServIntervLine."Previsit Date";
          END ELSE BEGIN
            lDate := lServIntervLine."Expected Previsit Date";
          END;
          IF rDate = 0D THEN BEGIN
            rDate := lDate;
          END ELSE BEGIN
            IF rDate > lDate THEN BEGIN
              rDate := lDate;
            END;
          END;
        UNTIL lServIntervLine.NEXT = 0;
      END;
      IF rDate = 0D THEN BEGIN
        rDate := WORKDATE;
      END;
    END;

    LOCAL PROCEDURE GetIntervLineInfo@1000000000(pWithoutSaveInfo@1100281003 : Boolean);
    VAR
      lDARVAWorkLot@1000000001 : Record 50169;
      lProvider@1000000002 : Record 50000;
      lCompanyInformation@1100281000 : Record 79;
      lInterfaceReference@1100281002 : Record 50164;
      lInterfaceReference2@1000000003 : Record 50164;
      lDARVAMgt@1000000000 : Codeunit 50150;
      lIsIMH@1100281001 : Boolean;
      lInterfaceRef@1000000004 : Boolean;
    BEGIN
      lIsIMH := GetAgreement(FALSE);

      lInterfaceReference.SETRANGE("Source Table ID",DATABASE::"Service Intervention Line");
      lInterfaceReference.SETRANGE("Source No.","Service No.");
      lInterfaceReference.SETRANGE("Source No. 2","No.");
      lInterfaceReference.SETRANGE("Source No. 3",CurrentServiceIntervLine."Line No.");
      IF lInterfaceReference.ISEMPTY OR pWithoutSaveInfo THEN BEGIN
        lProvider.GET(CurrentServiceIntervLine."Provider No.");

        lDARVAWorkLot.SETCURRENTKEY("Service Header No.","Provider No.");
        lDARVAWorkLot.SETRANGE("Service Header No.","No.");
        lDARVAWorkLot.SETRANGE("Provider No.",CurrentServiceIntervLine."Provider No.");
        IF lDARVAWorkLot.FINDFIRST THEN BEGIN
          WorkLotValue := lDARVAWorkLot."Lot No.";
        END ELSE BEGIN
          lInterfaceRef := FALSE;
          lDARVAWorkLot.SETFILTER("Provider No.",'=%1','');
          IF lDARVAWorkLot.FINDSET THEN BEGIN
            REPEAT
              lInterfaceReference2.SETRANGE("Source Table ID",DATABASE::"Service Intervention Line");
              lInterfaceReference2.SETRANGE("Source No.","Service No.");
              lInterfaceReference2.SETRANGE("Source No. 2","No.");
              lInterfaceReference2.SETRANGE("Work Lot No.",lDARVAWorkLot."Lot No.");
              IF lInterfaceReference2.ISEMPTY THEN BEGIN
                WorkLotValue := lDARVAWorkLot."Lot No.";
                lInterfaceRef := TRUE;
              END;
            UNTIL lInterfaceRef OR (lDARVAWorkLot.NEXT = 0);
          END;
        END;
        MissionReferenceValue := "Your Reference";
        IF lIsIMH THEN BEGIN
          lCompanyInformation.GET;
          //<<IMH12
          //NameValue := lCompanyInformation.Name;
          NameValue := COPYSTR(lCompanyInformation.Name,1,32);
          //>>IMH12
          Address1Value := COPYSTR(lCompanyInformation.Address,1,32);
          Address2Value := COPYSTR(lCompanyInformation."Address 2",1,32);
          Address3Value := '';
          PostCodeValue := COPYSTR(lCompanyInformation."Post Code",1,5);
          CityValue := COPYSTR(lCompanyInformation.City,1,26);
          PhoneNoValue := COPYSTR(DELCHR(lCompanyInformation."Phone No.",'=',' '),1,10);
          MailValue := COPYSTR(lCompanyInformation."E-Mail",1,32);
          ProviderNoValue := 'IMH';
        END ELSE BEGIN
          //<<IMH12
          //NameValue := lProvider.Name;
          NameValue := COPYSTR(lProvider.Name,1,32);
          //>>IMH12
          Address1Value := COPYSTR(lProvider.Address,1,32);
          Address2Value := COPYSTR(lProvider."Address 2",1,32);
          Address3Value := '';
          PostCodeValue := COPYSTR(lProvider."Post Code",1,5);
          CityValue := COPYSTR(lProvider.City,1,26);
          PhoneNoValue := COPYSTR(GetProviderPhoneNo(CurrentServiceIntervLine."Provider No."),1,10);
          MailValue := COPYSTR(lProvider."E-Mail",1,32);
          ProviderNoValue := lProvider."No.";
        END;
      END ELSE BEGIN
        lInterfaceReference.FINDFIRST;
        AgreementCodeValue := lInterfaceReference."Agreement Code";
        WorkLotValue := lInterfaceReference."Work Lot No.";
        MissionReferenceValue := lInterfaceReference."Mission Reference";
        MeetingDateValue := lInterfaceReference."Meeting Date";
        Address1Value := lInterfaceReference."Address 1";
        Address2Value := lInterfaceReference."Address 2";
        Address3Value := lInterfaceReference."Address 3";
        PostCodeValue := lInterfaceReference."Post Code";
        CityValue := lInterfaceReference.City;
        PhoneNoValue := lInterfaceReference."Phone No.";
        MailValue := lInterfaceReference."E-mail";
        ProviderNoValue := lInterfaceReference."Provider No.";
        //<<IMH12
        //NameValue := lInterfaceReference."Provider Name";
        NameValue := COPYSTR(lInterfaceReference."Provider Name",1,32);
        //>>IMH12
      END;
    END;

    LOCAL PROCEDURE SelectIntervLine@1000000002();
    VAR
      lServiceInterventionLine@1000000000 : Record 50075;
    BEGIN
      lServiceInterventionLine.SETRANGE("Service Header No.","No.");
      lServiceInterventionLine.SETFILTER("Intervention Status",'<>%1',lServiceInterventionLine."Intervention Status"::Cancel);
      IF PAGE.RUNMODAL(0,lServiceInterventionLine) = ACTION::LookupOK THEN BEGIN
        SaveSDR64Information(CurrentServiceIntervLine."Line No.");
        CurrentServiceIntervLine := lServiceInterventionLine;
        GetIntervLineInfo(FALSE);
      END;
    END;

    LOCAL PROCEDURE SelectlDARVAWorkLot@1000000003();
    VAR
      lDARVAWorkLot@1000000000 : Record 50169;
    BEGIN
      lDARVAWorkLot.SETRANGE("Service No.","Service No.");
      lDARVAWorkLot.SETRANGE("Service Header No.","No.");
      IF PAGE.RUNMODAL(0,lDARVAWorkLot) = ACTION::LookupOK THEN BEGIN
        WorkLotValue := lDARVAWorkLot."Lot No.";
      END;
    END;

    LOCAL PROCEDURE SaveSDR64Information@1100281005(pInterventionLineNo@1100281001 : Integer);
    VAR
      lInterfaceReference@1100281000 : Record 50164;
    BEGIN
      WITH lInterfaceReference DO BEGIN
        SETRANGE("Source Table ID",DATABASE::"Service Intervention Line");
        SETRANGE("Source No.","Service No.");
        SETRANGE("Source No. 2","No.");
        SETRANGE("Source No. 3",pInterventionLineNo);
        IF ISEMPTY THEN BEGIN
          "Source Table ID" := DATABASE::"Service Intervention Line";
          "Source No." := "Service No.";
          "Source No. 2" := "No.";
          "Source No. 3" := pInterventionLineNo;
          "Agreement Code" := AgreementCodeValue;
          "Provider No." := ProviderNoValue;
          "Work Lot No." := WorkLotValue;
          "Mission Reference" := MissionReferenceValue;
          "Meeting Date" := MeetingDateValue;
          "Address 1" := Address1Value;
          "Address 2" := Address2Value;
          "Address 3" := Address3Value;
          "Post Code" := PostCodeValue;
          City := CityValue;
          "Phone No." := PhoneNoValue;
          "E-mail" := MailValue;
          "Provider Name" := NameValue;
          INSERT;
        END ELSE BEGIN
          FINDFIRST;
          "Agreement Code" := AgreementCodeValue;
          "Provider No." := ProviderNoValue;
          "Work Lot No." := WorkLotValue;
          "Mission Reference" := MissionReferenceValue;
          "Meeting Date" := MeetingDateValue;
          "Address 1" := Address1Value;
          "Address 2" := Address2Value;
          "Address 3" := Address3Value;
          "Post Code" := PostCodeValue;
          City := CityValue;
          "Phone No." := PhoneNoValue;
          "E-mail" := MailValue;
          "Provider Name" := NameValue;
          MODIFY;
        END;
      END;
    END;

    LOCAL PROCEDURE GetWSDarvaError@1100281006(pXmlDoc@1100281002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";VAR pErrorType@1100281007 : Text[30];VAR pErrorDescription@1100281004 : Text[250]);
    VAR
      lInterfaceSetup@1100281001 : Record 50139;
      lXmlNode@1100281000 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
      lXmlNode2@1100281003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
      lXmlNode3@1100281006 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF86-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMElement";
      lErrorUnavailable@1100281005 : Boolean;
      lText001@1100281008 : TextConst 'ENU="DARVA wenservice on built on wednesday around from 12h00 to 14h00.\Please, try again later. ";FRA=Service DARVA en maintenance le mercredi autour de 12h00 … 14h00.\Merci de r‚essayer ult‚rieurement.';
    BEGIN
      // Si le flux de retour contient le code erreur d'indisponibilit‚ alors on sort … vrai

      pErrorDescription := '';
      pErrorType := '';
      lErrorUnavailable := FALSE;

      lXmlNode := pXmlDoc.getElementsByTagName('ns3:ErreurTraitement').item(0);
      IF ISCLEAR(lXmlNode) THEN BEGIN
        EXIT;
      END;
      lXmlNode2 := lXmlNode.selectSingleNode('ns2:code');
      IF NOT ISCLEAR(lXmlNode2) THEN BEGIN
        lInterfaceSetup.GET;
        lErrorUnavailable := lInterfaceSetup."DARVA Unavailable Code" = lXmlNode2.text;
        pErrorType := lXmlNode2.text;
      END;
      IF NOT lErrorUnavailable THEN BEGIN
        lXmlNode3 := lXmlNode.selectSingleNode('ns2:libelle');
        IF NOT ISCLEAR(lXmlNode3) THEN BEGIN
          pErrorDescription := COPYSTR(lXmlNode3.text,1,MAXSTRLEN(pErrorDescription));
        END;
      END ELSE BEGIN
        pErrorDescription := COPYSTR(lText001,1,MAXSTRLEN(pErrorDescription));
      END;
    END;

    LOCAL PROCEDURE GetCommentSDR99NewDT@1100281013(VAR pBigText@1100281000 : BigText;VAR ServiceHeader@1100281003 : Record 5900);
    VAR
      lProvider@1100281005 : Record 50000;
      lText005@1100281008 : TextConst 'FRA="(%1 - %2 - %3) "';
      lText006@1100281006 : TextConst 'FRA="(Raison sociale - Nø agr‚ment - Corps de m‚tier assign‚) "';
      lText007@1100281001 : TextConst 'ENU=Thanks to resend new DT wtih following working lot :;FRA="Merci de nous transmettre une nouvelle demande de travaux avec les lot de travaux suivants : "';
      lInterfaceReference@1100281002 : Record 50164;
      lServiceInterventionLine@1000000000 : Record 50075;
    BEGIN
      GetSetup;

      pBigText.ADDTEXT(lText007);
      pBigText.ADDTEXT(lText006);

      lServiceInterventionLine := CurrentServiceIntervLine;
      lServiceInterventionLine.SETRECFILTER;
      lServiceInterventionLine.SETRANGE("Line No.");
      lServiceInterventionLine.SETRANGE("Service Header No.","No.");
      lServiceInterventionLine.SETFILTER("Intervention Status",'<>%1',lServiceInterventionLine."Intervention Status"::Cancel);
      IF lServiceInterventionLine.FINDSET THEN BEGIN
        REPEAT
          lProvider.GET(lServiceInterventionLine."Provider No.");
          lServiceInterventionLine.CALCFIELDS("Building Trade Description");
          pBigText.ADDTEXT(
            STRSUBSTNO(
              lText005,
              lProvider.Name,
              GetAgreementSDR99(Rec,lServiceInterventionLine),
              lServiceInterventionLine."Building Trade Description"));
        UNTIL lServiceInterventionLine.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE GetAgreementSDR99@1000000005(pServiceHeader@1000000000 : Record 5900;pIntervention@1000000001 : Record 50075) : Code[10];
    VAR
      lProviderAgreement@1100281000 : Record 50012;
      lCorporateRegion@1100281001 : Record 50058;
    BEGIN
      //IMH07
      lProviderAgreement.SETCURRENTKEY("Detail Corporate No.","Detail Corporate Region Code");
      lProviderAgreement.SETRANGE("Detail Corporate No.",pServiceHeader."Corporate No.");
      lProviderAgreement.SETRANGE("Detail Corporate Region Code",pServiceHeader."Corporate Region Code");
      lProviderAgreement.SETRANGE("Provider No.",pIntervention."Provider No.");
      IF lProviderAgreement.ISEMPTY THEN BEGIN
        lProviderAgreement.SETRANGE("Detail Corporate Region Code");
      END;
      IF NOT lProviderAgreement.ISEMPTY THEN BEGIN
        IF lProviderAgreement.FINDFIRST THEN BEGIN
          EXIT(lProviderAgreement."Agreement No.");
        END;
      END ELSE BEGIN
        lCorporateRegion.SETRANGE("Corporate No.",pServiceHeader."Corporate No.");
        lCorporateRegion.SETRANGE("Region Code",pServiceHeader."Corporate Region Code");
        IF lCorporateRegion.COUNT = 1 THEN BEGIN
          lCorporateRegion.FINDFIRST;
          EXIT(lCorporateRegion."SDR64 Provider No.");
        END;
      END;
    END;

    PROCEDURE DeleteMailInvalidChar@1100281007(pText@1100281000 : Text[250]) : Text[250];
    BEGIN
      //IMH06
      EXIT(DELCHR(pText,'=',' '));
    END;

    BEGIN
    {
      /** @r IMH12 @d 05/05/14 @a ISAT.ZW @v IMH6.01.5106 @g 5106 @s Gestion emisison sdr64 @c Correction Nb caractŠres Providername */
      /** @r IMH11 @d 03/09/13 @a ISAT.ACO @v IMH6.01.350 @s SystŠme d'aiguillage @c ParamŠtres DARVA */
      /** @r IMH10 @d 28/08/13 @a ISAT.PC @v IMH6.01.350 @h 4657 @s SystŠme d'aiguillage @c Correction */
      /** @r IMH09 @d 01/07/13 @a ISAT.PC @v IMH6.01.350 @s SystŠme d'aiguillage @c Cr‚ation */
      /** @r IMH08 @d 25/06/13 @a ISAT.PC @v IMH6.01.345 @h 4168 @s MAI @c Correction */
      /** @r IMH07 @d 03/06/12 @a ISAT.PC @v IMH6.01.347 @h 4531 @s Juin @c Mantis du mois de juin */
      /** @r IMH06 @d 16/05/12 @a ISAT.ZW @v IMH6.01.339 @h 4005 @s DARVA1.3 @c Supprimer caractŠres invalide de Email */
      /** @r IMH05 @d 16/05/12 @a ISAT.ZW @v IMH6.01.339 @h 3658 @s DARVA1.3 @c Mentionner l'envoi auto d'un SDR 64/99 en commentaire */
      /** @r IMH04 @d 20/06/12 @a ISAT.PC @v IMH6.01.228 @h 4032 @s NEP00011 */
      /** @r IMH03 @d 20/06/12 @a ISAT.PC @v IMH6.01.228 @h 4168 @s NEP00011 */
      /** @r IMH02 @d 20/06/12 @a ISAT.PC @v IMH6.01.134 @h 3639 @s V‚rification avant accŠs DARVA */
      /** @r IMH01 @d 07/05/12 @a ISAT.PC @v IMH6.01.134 @h 3473 @s Gestion SDR64 @c Cr‚ation */
    }
    END.
  }
}