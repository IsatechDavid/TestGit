OBJECT Page 50363 DARVA Send
{
  OBJECT-PROPERTIES
  {
    Date=26/05/14;
    Time=10:57:17;
    Modified=Yes;
    Version List=IMH6.01,MATMUT01;
  }
  PROPERTIES
  {
    Editable=Yes;
    CaptionML=[ENU=DARVA Send;
               FRA=Envoi DARVA];
    InsertAllowed=No;
    DeleteAllowed=No;
    ModifyAllowed=No;
    SourceTable=Table50125;
    DataCaptionExpr=PageDescription;
    PageType=Worksheet;
    SourceTableTemporary=Yes;
    OnOpenPage=VAR
                 lDARVATemplate@1100281000 : Record 50125;
               BEGIN
                 IF NOT DataLoaded THEN
                   CurrPage.CLOSE;

                 //<<IMH03

                 //<<IMH04.ACO
                 //SETCURRENTKEY("Corporate No.", "Show To Intervention", Active);
                 //SETRANGE("Corporate No.", ServiceHeader."Corporate No.");
                 //SETRANGE(Active, TRUE);

                 //IF ServiceInterventionNo = 0 THEN
                 //  SETRANGE("Show To Service Header", TRUE)
                 //ELSE
                 //  SETRANGE("Show To Intervention", TRUE);


                 lDARVATemplate.SETCURRENTKEY("Corporate No.", "Show To Intervention", Active);
                 lDARVATemplate.SETRANGE("Corporate No.", ServiceHeader."Corporate No.");
                 lDARVATemplate.SETRANGE(Active, TRUE);

                 IF ServiceInterventionNo = 0 THEN
                   lDARVATemplate.SETRANGE("Show To Service Header", TRUE)
                 ELSE
                   lDARVATemplate.SETRANGE("Show To Intervention", TRUE);

                 DARVASetup.GET;
                 DELETEALL;
                 IF lDARVATemplate.FINDSET THEN
                   REPEAT
                     CASE lDARVATemplate.Code OF
                       DARVASetup."DARVA SD99 Code": BEGIN
                         IF (TestSDR64Send
                             AND SDR64Send(ServiceHeader."Service No.", ServiceHeader."No.", ServiceInterventionLineNo)) OR
                             NOT TestSDR64Send THEN BEGIN // L'envoi du SDR99 pour le GC n'exige pas de SDR64
                           INIT;
                           TRANSFERFIELDS(lDARVATemplate);
                           INSERT;
                         END;
                       END;
                       DARVASetup."DARVA SD64 Code": BEGIN
                         // L'envoi d'un SDR64 est soumis … condition dans le cas d'un envoi par intervention
                         IF DisplaySDR64Template(ServiceHeader."Service No.", ServiceHeader."No.", ServiceInterventionLineNo) THEN BEGIN
                           INIT;
                           TRANSFERFIELDS(lDARVATemplate);
                           INSERT;
                         END;
                       END;
                       ELSE BEGIN
                         INIT;
                         TRANSFERFIELDS(lDARVATemplate);
                         INSERT;
                       END;
                     END
                   UNTIL lDARVATemplate.NEXT = 0;
                 //>>IMH04.ACO

                 CommentsAllowed := FALSE;
                 AttachmentsAllowed := FALSE;
                 //>>IMH03

                 //<<IMH04
                 CommentLine.INIT;
                 CommentLine."Source No." := ServiceHeader."Service No.";
                 CommentLine."Source No. 2" := ServiceHeader."No.";
                 //CommentLine."Source No. 3" := ServiceInterventionLineNo;
                 CommentLine."Creation Date" := CURRENTDATETIME;
                 CommentLine."Creation User ID" := USERID;
                 CommentLine.Publication := CommentLine.Publication::Darva;

                 CommentLine.INSERT(TRUE);
                 //>>IMH04
               END;

    OnAfterGetRecord=BEGIN
                       //<<IMH03
                       IF NOT TempSelectedDARVATemplate.ISEMPTY THEN BEGIN
                         TempSelectedDARVATemplate.FINDFIRST;
                         Selected := (TempSelectedDARVATemplate.Code = Code);
                       END
                       ELSE BEGIN
                         Selected := FALSE;
                       END;

                       //>>IMH03
                       //<<IMH07 D‚placer code dans la fonction GetErrorTxt
                       GetErrorTxt;
                       {
                       //<<IMH04.ACO
                       ErrorTxt := '';
                       IF (Code = DARVASetup."DARVA SD64 Code") AND
                         (ServiceInterventionLineNo <> 0) THEN BEGIN
                         lInterfaceReference.SETRANGE("Source Table ID",DATABASE::"Service Intervention Line");
                         lInterfaceReference.SETRANGE("Source No.",ServiceHeader."Service No.");
                         lInterfaceReference.SETRANGE("Source No. 2",ServiceHeader."No.");
                         lInterfaceReference.SETRANGE("Source No. 3",ServiceInterventionLineNo);
                         IF lInterfaceReference.FINDFIRST THEN
                           ErrorTxt := FORMAT(lInterfaceReference."Send Status");
                       END
                       //>>IMH04.ACO
                       }
                       //>>IMH07
                     END;

    OnQueryClosePage=BEGIN
                       IF NOT SkipClosureTest THEN
                         EXIT(CONFIRM(Text001, TRUE))
                       ELSE
                         EXIT(TRUE);
                     END;

    ActionList=ACTIONS
    {
      { 1000000001;  ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1000000003;1 ;Action    ;
                      ShortCutKey=Ctrl+E;
                      CaptionML=[ENU=Send;
                                 FRA=Envoyer];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=SendTo;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 SendSDR;
                               END;
                                }
      { 1000000006;1 ;Action    ;
                      CaptionML=[ENU=Add attachment;
                                 FRA=Joindre un fichier];
                      Promoted=Yes;
                      Enabled=AttachmentsAllowed;
                      Image=MailAttachment;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 lTempToList@1000000001 : TEMPORARY Record 50125;
                               BEGIN
                                 //<<IMH03.ACO
                                 {CurrPage.DARVATemplates.FORM.RetrieveDARVATemplate(lTempToList, Subject, BodyText);
                                 IF lTempToList.ISEMPTY THEN
                                   ERROR(Text003);
                                 }
                                 IF TempSelectedDARVATemplate.ISEMPTY THEN
                                   ERROR(Text003);

                                 //>>IMH03.ACO
                                 CurrPage.Attachments.FORM.AddDocument;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1000000000;;Container;
                ContainerType=ContentArea }

    { 1000000002;1;Group  ;
                CaptionML=[ENU=DARVA Flow;
                           FRA=Suivi de dossier];
                GroupType=Repeater }

    { 1000000004;2;Field  ;
                SourceExpr=Code;
                Editable=FALSE }

    { 1000000005;2;Field  ;
                SourceExpr=Description;
                Editable=FALSE }

    { 1000000007;2;Field  ;
                CaptionML=[ENU=Select;
                           FRA=S‚lectionner];
                SourceExpr=Selected;
                OnValidate=VAR
                             lInstream@1000000000 : InStream;
                           BEGIN
                             //<<IMH03

                             IF Selected THEN BEGIN // D‚selection des autres templates
                               Subject := Description;
                               CALCFIELDS(Body);
                               Body.CREATEINSTREAM(lInstream);

                               BodyText.READ(lInstream);

                               SelectTemplate(Rec);
                             END
                             ELSE BEGIN
                               //<<IMH04.ACO
                               TempSelectedDARVATemplate.DELETEALL;
                               //>>IMH04.ACO

                               Subject := '';
                               CLEAR(BodyText);
                               //<<IMH01
                               CommentsAllowed := FALSE;
                               AttachmentsAllowed := FALSE;
                               //>>IMH01
                               //<<IMH04.ACO
                               RecipientVisible := FALSE;
                               ActionVisible := FALSE;
                               CommentLine."DARVA Send Type" := CommentLine."DARVA Send Type"::" ";
                               CommentLine."Manager To-do Type" := CommentLine."Manager To-do Type"::" ";
                               //>>IMH04.ACO
                             END;
                             //>>IMH03
                           END;
                            }

    { 1000000016;2;Field  ;
                Name=Error;
                CaptionML=[ENU=Error;
                           FRA=Erreur];
                SourceExpr=ErrorTxt;
                Editable=FALSE;
                Style=Unfavorable;
                StyleExpr=TRUE }

    { 1000000012;1;Group  ;
                Visible=RecipientVisible;
                GroupType=Group }

    { 1000000013;2;Field  ;
                CaptionML=[ENU=Recipient Choice;
                           FRA=Choix destinataire];
                SourceExpr=CommentLine."DARVA Send Type";
                OnValidate=BEGIN
                             //IMH04
                             ActionVisible := IsActionManagerChoiceVisible;
                             CommentLine."Manager To-do Type" := CommentLine."Manager To-do Type"::" ";
                           END;
                            }

    { 1000000015;1;Group  ;
                Visible=ActionVisible;
                GroupType=Group }

    { 1000000014;2;Field  ;
                CaptionML=[ENU=Choose Manager Action;
                           FRA=Choix action gestionnaire];
                SourceExpr=CommentLine."Manager To-do Type" }

    { 1000000010;1;Group  ;
                GroupType=Group }

    { 1000000009;2;Field  ;
                CaptionML=FRA=Objet;
                SourceExpr=Subject }

    { 1000000011;1;Group  ;
                Visible=CommentsAllowed;
                GroupType=Group }

    { 1000000008;2;Field  ;
                SourceExpr=BodyText;
                ControlAddIn=[Isatech.DynamicsNav.NotepadAddIn;PublicKeyToken=f9c11cee8793cd65] }

    { 1100281001;1;Part   ;
                Name=Attachments;
                CaptionML=[ENU=Attachments;
                           FRA=PiŠces jointes];
                PagePartID=Page50368;
                Visible=AttachmentsAllowed;
                PartType=Page }

  }
  CODE
  {
    VAR
      PageDescription@1100281000 : Text[80];
      Subject@1000000001 : Text[1024];
      BodyText@1000000002 : BigText;
      DataLoaded@1100281002 : Boolean;
      SegLine@1000000003 : TEMPORARY Record 5077;
      SkipClosureTest@1000000004 : Boolean;
      Text001@1000000005 : TextConst 'ENU=SDR has not been sent. Do you really want to quit ?;FRA=Le SDR n''est pas envoy‚. Etes-vous s–r de vouloir quitter ?';
      Text003@1000000006 : TextConst 'ENU=Please select a least one SDR.;FRA=Vous devez s‚lectionner un SDR … envoyer.';
      ServiceHeader@1000000007 : Record 5900;
      ServiceInterventionNo@1000000008 : Integer;
      ServiceInterventionLineNo@1000000014 : Integer;
      TempAttList@1000000010 : TEMPORARY Record 50021;
      InteractLogEntry@1000000009 : Record 5065;
      TextMgt@1000000011 : Codeunit 50085;
      DARVAMgt@1000000012 : Codeunit 50150;
      Text004@1000000013 : TextConst 'ENU=There is no data in file.;FRA=Le fichier %1 ne contient pas de donn‚es.';
      Text005@1000000015 : TextConst 'ENU=You cannot add attachments to this template;FRA=Vous ne pouvez ajouter de piŠces jointes pour ce modŠle d''envoi.';
      Selected@1000000016 : Boolean;
      TempSelectedDARVATemplate@1000000017 : TEMPORARY Record 50125;
      CommentsAllowed@1000000018 : Boolean INDATASET;
      AttachmentsAllowed@1000000000 : Boolean INDATASET;
      DARVASetup@1000000019 : Record 50126;
      Text006@1000000020 : TextConst 'ENU=Flow type not managed by DARVA.;FRA=Type de flux non g‚r‚ par DARVA.';
      RecipientVisible@1000000021 : Boolean INDATASET;
      ActionVisible@1000000022 : Boolean INDATASET;
      RecipientComments@1000000023 : 'Expert,Grand Compte';
      ActionComments@1000000024 : 'Pour action,Pour information';
      CommentLine@1000000025 : TEMPORARY Record 50056;
      Text007@1000000026 : TextConst 'ENU=Please fill a free comment.;FRA=Merci de saisir un commentaire libre.';
      Text008@1000000027 : TextConst 'ENU=Please fill a recipient type;FRA=Merci de choisir un type d''‚metteur.';
      Text009@1000000028 : TextConst 'ENU=Please choose a manager action;FRA=Merci de choisir une action gestionnaire.';
      SDR64Mgt@1000000029 : Codeunit 50210;
      ErrorTxt@1000000030 : Text[250];
      DARVASwitchSystemSetup@1100281001 : Record 50180;

    LOCAL PROCEDURE SendSDR@1000000000();
    VAR
      lTempToList@1000000001 : TEMPORARY Record 50125;
      lTempDocAttach@1000000004 : TEMPORARY Record 50021;
      lEAISendMQBuffer@1000000002 : TEMPORARY Record 8016720;
      lTemplateCode@1000000003 : Code[10];
      lCustomer@1000000000 : Record 18;
    BEGIN
      // R‚cup‚ration des r‚sultats
      //<<IMH03.ACO
      {CurrPage.DARVATemplates.FORM.RetrieveDARVATemplate(lTempToList, Subject, BodyText);

      IF lTempToList.ISEMPTY THEN
        ERROR(Text003);

      lTempToList.FINDFIRST;
      lTemplateCode := lTempToList.Code;
      }

      //R‚cup‚ration du template choisi
      IF TempSelectedDARVATemplate.ISEMPTY THEN
        ERROR(Text003);

      TempSelectedDARVATemplate.FINDFIRST;
      lTemplateCode := TempSelectedDARVATemplate.Code;
      //>>IMH03.ACO

      //R‚cup‚ration des piŠces jointes
      //<<IMH03.ACO
      IF AttachmentsAllowed THEN BEGIN
      //>>IMH03.ACO
        CurrPage.Attachments.FORM.RetrieveDocumentList(lTempDocAttach);

        IF NOT lTempDocAttach.ISEMPTY THEN BEGIN
          //traitement piŠce jointe issu du FileSystem
          AddAttachmentsFromFileSystem(lTempDocAttach, lTemplateCode);

          //Ajout des piŠces jointes
          CreateXMLFileToSaveAttachments(lTempDocAttach, lEAISendMQBuffer);
        END;
      //<<IM03.ACO
      END;
      //>>IMH03.ACO

      //Traitement selon type de flux
      //<<IMH03.ACO
      DARVASetup.GET;
      CASE lTemplateCode OF
        DARVASetup."DARVA SD99 Code": BEGIN

          //<<IMH04.ACO
          IF NOT CheckFieldsSDR99 THEN
            EXIT;
          //>>IMH04.ACO

          TextMgt.SetEAISentMQBuffer(lEAISendMQBuffer);
          SaveText(FALSE,lTemplateCode);
        END;
        DARVASetup."DARVA SD64 Code": BEGIN
          //Type envoi
          lCustomer.GET(ServiceHeader."Corporate No.");
          CASE lCustomer."Send Type SDR64" OF
            lCustomer."Send Type SDR64"::" " : BEGIN
              EXIT;
            END;
            lCustomer."Send Type SDR64"::"By Serv. Header" : BEGIN
              //<<IMH07 d‚palcer code dans la fonction SendSDR64ForSrvHd
              SendSDR64ForSrvHd;
              //SDR64Mgt.SetNotUseCard(FALSE);  //les fenˆtres SDR64 doivent s'ouvrir
              //SDR64Mgt.SetNotUseChangeMessage(TRUE);
              //SDR64Mgt.Code(ServiceHeader);
              //>>IMH07
            END;
            lCustomer."Send Type SDR64"::"By Intervention" : BEGIN
              //<<IMH04.ACO
              //SendSDR64ByInterv(ServiceHeader."No.");
              SendSDR64ForInterv(ServiceHeader."Service No.", ServiceHeader."No.", ServiceInterventionLineNo);
              //>>IMH04.ACO
            END;
          END
        END
        ELSE
          ERROR(Text006);
      END;
      //>>IMH03.ACO

      //<<IMH03.ACO
      //TextMgt.SetEAISentMQBuffer(lEAISendMQBuffer);
      //>>IMH03.ACO
      SkipClosureTest := TRUE;

      //<<IMH03.ACO
      //lTempToList.DELETEALL;
      TempSelectedDARVATemplate.DELETEALL;
      //>>IMH03.ACO
      lTempDocAttach.DELETEALL;
      //<<IMH03.ACO
      //Envoi du SDR
      //SaveText(FALSE,lTemplateCode);
      //>>IMH03.ACO
      CurrPage.CLOSE;
    END;

    PROCEDURE SetServiceHeader@1000000001(pServiceHeader@1000000000 : Record 5900;pInterventionNo@1000000002 : Integer;pInterventionLineNo@1000000003 : Integer);
    VAR
      lService@1000000001 : Record 50066;
    BEGIN
      IF NOT lService.GET(pServiceHeader."Service No.") THEN
        EXIT;

      ServiceHeader := pServiceHeader;
      ServiceInterventionNo := pInterventionNo;
      ServiceInterventionLineNo := pInterventionLineNo;

      LoadServData(lService);
      LoadData(STRSUBSTNO('%1 %2', pServiceHeader.TABLECAPTION, pServiceHeader."No."),
                              TempAttList);
    END;

    PROCEDURE LoadData@1100281000(pPageDesc@1100281000 : Text[80];VAR pAttachmentList@1100281002 : Record 50021);
    BEGIN
      PageDescription := pPageDesc;

      //ModŠle d'envoi DARVA
      //<<IMH03.ACO
      //CurrPage.DARVATemplates.FORM.LoadDARVATemplates(ServiceHeader."Corporate No.", ServiceHeader."No.", ServiceInterventionNo);
      //>>IMH03.ACO

      //PiŠces jointes
      CurrPage.Attachments.FORM.InitList(pAttachmentList);

      DataLoaded := TRUE;
    END;

    PROCEDURE LoadServData@1100281024(pService@1100281000 : Record 50066);
    VAR
      lContact@1100281003 : Record 5050;
      lDocAttach@1100281001 : Record 50021;
    BEGIN
      WITH lDocAttach DO BEGIN
        // Doc joint service
        SETCURRENTKEY("Service No.", "Service Document No.");
        SETRANGE("Service No.", pService."Service No.");
        //SETRANGE("Service Document No.", '');
        IF FINDSET(FALSE) THEN
          REPEAT
            AddAttachment(lDocAttach);
          UNTIL NEXT = 0;
      END; // WITH lDocAttach
    END;

    LOCAL PROCEDURE AddAttachment@1100281004(pAttachment@1100281000 : Record 50021);
    BEGIN
      TempAttList := pAttachment;
      pAttachment.CALCFIELDS("Merge Source");
      TempAttList."Merge Source" := pAttachment."Merge Source";
      IF NOT TempAttList.FIND('=') THEN BEGIN
        IF TempAttList."Interaction Template Code" = '' THEN BEGIN
          IF TempAttList."Interaction Log Entry No." <> 0 THEN BEGIN
            IF InteractLogEntry.GET(TempAttList."Interaction Log Entry No.") THEN BEGIN
              TempAttList."Interaction Template Code" := InteractLogEntry."Interaction Template Code";
            END;
          END;
        END;
        TempAttList.Modifiable := FALSE;
        TempAttList.INSERT(FALSE);
      END;
    END;

    PROCEDURE SaveText@1000000002(pAskQuestion@1100281001 : Boolean;pTemplateCode@1000000002 : Code[10]);
    VAR
      lCommentLine@1000000000 : TEMPORARY Record 50056;
      lCommentDate@1000000001 : Date;
    BEGIN
      //IF pAskQuestion THEN BEGIN
      //  IF NOT CONFIRM(Text001,TRUE) THEN BEGIN
      //    DeleteAttachment(FALSE);
      //    EXIT;
      //  END;
      //END;

      //Cr‚ation d'un commentaire
      //<<IMH04
      {lCommentLine.INIT;
      lCommentLine.Code := pTemplateCode;
      lCommentLine."Source No." := ServiceHeader."Service No.";
      lCommentLine."Source No. 2" := ServiceHeader."No.";
      lCommentLine."Source No. 3" := ServiceInterventionLineNo;
      lCommentLine."Creation Date" := CURRENTDATETIME;
      lCommentLine."Creation User ID" := USERID;
      lCommentLine.Publication := lCommentLine.Publication::Darva;

      lCommentLine.INSERT(TRUE);

      //Sauvegarde du commentaire
      TextMgt.SaveBigText(lCommentLine,lCommentDate, BodyText);
      }

      CommentLine.Code := pTemplateCode;
      CommentLine.MODIFY(TRUE);

      //Sauvegarde du commentaire
      TextMgt.SaveBigText(CommentLine,lCommentDate, BodyText);

      //>>IMH04
    END;

    PROCEDURE AddAttachmentsFromFileSystem@1000000006(VAR pAttachmentsList@1000000000 : Record 50021;pTemplateCode@1000000003 : Code[10]);
    VAR
      lDocumentAttachment@1000000001 : Record 50021;
      lAttachmentsFromDisk@1000000002 : TEMPORARY Record 50021;
    BEGIN
      //Copie des piŠces jointes s‚lectionn‚es et cr‚‚es depuis le disque
      IF pAttachmentsList.ISEMPTY THEN
        EXIT;

      lAttachmentsFromDisk.DELETEALL;
      pAttachmentsList.RESET;
      pAttachmentsList.SETRANGE("Referent Table No.", -1);
      IF pAttachmentsList.FINDSET THEN
        REPEAT
          lAttachmentsFromDisk.INIT;
          lAttachmentsFromDisk.TRANSFERFIELDS(pAttachmentsList);
          pAttachmentsList.CALCFIELDS("Merge Source");
          lAttachmentsFromDisk."Merge Source" := pAttachmentsList."Merge Source";
          lAttachmentsFromDisk.INSERT(TRUE);
        UNTIL pAttachmentsList.NEXT = 0;
      pAttachmentsList.RESET;

      IF lAttachmentsFromDisk.FINDSET THEN
        REPEAT
          //Cr‚ation de la piŠce jointe physique et dans Nav
          CreateAttachment(lAttachmentsFromDisk, lDocumentAttachment, pTemplateCode);

          //suppression de la piŠce jointe temporaire dans la liste des s‚lectionn‚s
          IF pAttachmentsList.GET(lAttachmentsFromDisk."Referent Table No.",
                                  lAttachmentsFromDisk."Key Integer 1",
                                  lAttachmentsFromDisk."Key Integer 2",
                                  lAttachmentsFromDisk."Key Code 1",
                                  lAttachmentsFromDisk."Key Code 2",
                                  lAttachmentsFromDisk."Entry No.") THEN BEGIN
            pAttachmentsList.DELETE;
            pAttachmentsList.RESET;
          END;

          //Ajout de la nouvelle piŠce jointe dans la liste des s‚lectionn‚s
          pAttachmentsList.INIT;
          pAttachmentsList.TRANSFERFIELDS(lDocumentAttachment);
          pAttachmentsList.INSERT(TRUE);
        UNTIL lAttachmentsFromDisk.NEXT = 0;
    END;

    PROCEDURE CreateAttachment@1000000005(VAR pDocumentAttachmentTmp@1000000000 : Record 50021;VAR pDocumentAttachment@1000000007 : Record 50021;pTemplateCode@1000000008 : Code[10]);
    VAR
      lDocumentAttachment@1000000006 : Record 50021;
      lAttachmentTemp@1000000005 : TEMPORARY Record 5062;
      lSourceAttchMgt@1000000004 : Codeunit 50003;
      lRecordRef@1000000003 : RecordRef;
      lFileOriginName@1000000002 : Text[250];
      lFileExtension@1000000001 : Text[10];
    BEGIN
      lFileOriginName :=  pDocumentAttachmentTmp.Description;
      lFileExtension := pDocumentAttachmentTmp."File Extension";

      pDocumentAttachmentTmp.CALCFIELDS("Merge Source");
      IF NOT pDocumentAttachmentTmp."Merge Source".HASVALUE THEN BEGIN
        ERROR(Text004,pDocumentAttachmentTmp.Description);
      END;

      WITH pDocumentAttachment DO BEGIN
        SETCURRENTKEY("Service Document No.","Service Intervention Line No.","Intervention Quote Line No.");
        SETRANGE("Service Document No.",ServiceHeader."No.");
        "Key Integer 1" := 0;
        "Key Integer 2" := 0;
        "Key Code 1" := '';
        "Key Code 2" := '';
        //<<IMH02.ACO
        //Description := pTemplateCode;
        Description := lFileOriginName;
        //>>IMH02.ACO
        "Description 2" := COPYSTR(lFileOriginName + '.' + lFileExtension,1,MAXSTRLEN("Description 2"));
        //<<IMH02.ACO
        "File Extension" := lFileExtension;
        "Queue Type" := "Queue Type"::Emission;
        //>>IMH02.ACO
      END;

      lAttachmentTemp.Attachment := pDocumentAttachmentTmp."Merge Source";
      lSourceAttchMgt.CreateAttachment(pDocumentAttachment,'',lAttachmentTemp);
    END;

    PROCEDURE CreateXMLFileToSaveAttachments@1000000011(VAR pDocumentAttachment@1000000000 : Record 50021;VAR pEAISentMQBuffer@1000000008 : Record 8016720);
    VAR
      lXMLMgt@1000000006 : Codeunit 8016710;
      lXmlNewDoc@1000000005 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{F6D90F11-9C73-11D3-B32E-00C04F990BB4}:'Microsoft XML, v6.0'.DOMDocument";
      lXmlNewChild1@1000000004 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lXmlNewChild2@1000000003 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lXmlNewChild3@1000000002 : Automation "{F5078F18-C551-11D3-89B9-0000F81FE221} 6.0:{2933BF80-7B36-11D2-B20E-00C04F983E60}:'Microsoft XML, v6.0'.IXMLDOMNode";
      lOutStream@1000000001 : OutStream;
      lEAISentMQBuffer@1000000007 : Record 8016720;
    BEGIN
      IF pDocumentAttachment.ISEMPTY THEN
        EXIT;

      lXMLMgt.CreateXml(lXmlNewDoc,'<FLUXML/>',lXmlNewChild1);
      pDocumentAttachment.RESET;
      IF pDocumentAttachment.FINDSET THEN
        REPEAT
          lXMLMgt.AddElement(lXmlNewChild1,'Attachment','','',lXmlNewChild2);
          lXMLMgt.AddElement(lXmlNewChild2,'ReferentTableNo.',FORMAT(pDocumentAttachment."Referent Table No."),'',lXmlNewChild3);
          lXMLMgt.AddElement(lXmlNewChild2,'KeyInteger1',FORMAT(pDocumentAttachment."Key Integer 1"),'',lXmlNewChild3);
          lXMLMgt.AddElement(lXmlNewChild2,'KeyInteger2',FORMAT(pDocumentAttachment."Key Integer 2"),'',lXmlNewChild3);
          lXMLMgt.AddElement(lXmlNewChild2,'KeyCode1',pDocumentAttachment."Key Code 1",'',lXmlNewChild3);
          lXMLMgt.AddElement(lXmlNewChild2,'KeyCode2',pDocumentAttachment."Key Code 2",'',lXmlNewChild3);
          lXMLMgt.AddElement(lXmlNewChild2,'EntryNo',FORMAT(pDocumentAttachment."Entry No."),'',lXmlNewChild3);
          lXmlNewChild2 := lXmlNewChild2.parentNode;
        UNTIL pDocumentAttachment.NEXT = 0;

      pEAISentMQBuffer."To Generate XML Source".CREATEOUTSTREAM(lOutStream);
      lXmlNewDoc.save(lOutStream);
    END;

    LOCAL PROCEDURE SelectTemplate@1000000009(pSelectedTemplate@1000000000 : Record 50125);
    BEGIN
      //IMH03.ACO
      TempSelectedDARVATemplate.DELETEALL;
      TempSelectedDARVATemplate.INIT;
      TempSelectedDARVATemplate.TRANSFERFIELDS(pSelectedTemplate);
      TempSelectedDARVATemplate.INSERT(FALSE);

      CommentsAllowed := pSelectedTemplate."Allow Comments";
      AttachmentsAllowed := pSelectedTemplate."Allow Attachments";

      //<<IMH04
      CommentLine."DARVA Send Type" := CommentLine."DARVA Send Type"::" ";
      CommentLine."Manager To-do Type" := CommentLine."Manager To-do Type"::" ";
      RecipientVisible := IsRecipientsChoiceVisible;
      ActionVisible := IsActionManagerChoiceVisible;
      //>>IMH04

      CurrPage.UPDATE(FALSE);
    END;

    PROCEDURE SendSDR64ForInterv@1100281003(pServiceNo@1100281002 : Code[20];pServiceHeaderNo@1100281000 : Code[20];pServiceIntervLineNo@1100281001 : Integer);
    VAR
      lInterfaceReference@1100281003 : Record 50164;
      lServiceIntervLine@1100281004 : Record 50075;
    BEGIN
      //IMH04.ACO

      lServiceIntervLine.GET(pServiceHeaderNo,pServiceIntervLineNo);

      lInterfaceReference.SETRANGE("Source Table ID",DATABASE::"Service Intervention Line");
      lInterfaceReference.SETRANGE("Source No.",pServiceNo);
      lInterfaceReference.SETRANGE("Source No. 2",pServiceHeaderNo);
      lInterfaceReference.SETRANGE("Source No. 3",pServiceIntervLineNo);

      IF lInterfaceReference.FINDFIRST THEN BEGIN // SDR64 en erreur

        //Modification des statuts des SDR64 en erreur et des flux sur la file
        //<<IMH05.ACO
        //CASE lInterfaceReference."Send Status" OF
          //lInterfaceReference."Send Status" :: "Generation Error" : BEGIN
        //>>IMH05.ACO
            IF ChangeStatusMQ(DARVASetup."DARVA SD64 Code",lServiceIntervLine) THEN BEGIN
              lInterfaceReference."Send Status" := lInterfaceReference."Send Status"::Created;
              lInterfaceReference.MODIFY;
            END;
        //<<IMH05.ACO
        // END;
        //  lInterfaceReference."Send Status" :: "Validation Error" : BEGIN
        //    IF ChangeStatusMQ(DARVASetup."DARVA SD64 Code",lServiceIntervLine) THEN BEGIN
        //      lInterfaceReference."Send Status" := lInterfaceReference."Send Status"::Generated;
        //      lInterfaceReference.MODIFY;
        //    END;
        //  END;
        //END;
        //>>IMH05.ACO
      END
      ELSE BEGIN //SDR64 jamais envoy‚
        SDR64Mgt.NewSendSDR64(lServiceIntervLine,TRUE);
      END;
    END;

    PROCEDURE SendSDR64ByInterv@1000000003(pServiceHeaderNo@1000000002 : Code[20]);
    VAR
      lServiceIntervLine@1000000000 : Record 50075;
    BEGIN
      //IMH03.ACO

      //R‚cup‚ration des interventions de la ligne produit non annul‚es
      lServiceIntervLine.SETRANGE("Service Header No.", pServiceHeaderNo);
      lServiceIntervLine.SETFILTER("Intervention Status", '<>%1', lServiceIntervLine."Intervention Status"::Cancel);

      IF lServiceIntervLine.FINDSET THEN
        REPEAT
          //<<IMH04.ACO
          {lInterfaceReference.SETRANGE("Source Table ID",DATABASE::"Service Intervention Line");
          lInterfaceReference.SETRANGE("Source No.",lServiceIntervLine."Service No.");
          lInterfaceReference.SETRANGE("Source No. 2",lServiceIntervLine."Service Header No.");
          lInterfaceReference.SETRANGE("Source No. 3",lServiceIntervLine."Line No.");


          IF lInterfaceReference.FINDFIRST THEN BEGIN
            CASE lInterfaceReference."Send Status" OF
              lInterfaceReference."Send Status" :: "Generation Error" : BEGIN
                IF ChangeStatusMQ(DARVASetup."DARVA SD64 Code",lServiceIntervLine) THEN BEGIN
                  lInterfaceReference."Send Status" := lInterfaceReference."Send Status"::Created;
                  lInterfaceReference.MODIFY;
                END;
              END;
              lInterfaceReference."Send Status" :: "Validation Error" : BEGIN
                IF ChangeStatusMQ(DARVASetup."DARVA SD64 Code",lServiceIntervLine) THEN BEGIN
                  lInterfaceReference."Send Status" := lInterfaceReference."Send Status"::Created;
                  lInterfaceReference.MODIFY;
                END;
              END;
            END;
          END}
          IF SDR64Send(lServiceIntervLine."Service No.",
                                    lServiceIntervLine."Service Header No.",
                                    lServiceIntervLine."Line No.") THEN
            SendSDR64ForInterv(lServiceIntervLine."Service No.",lServiceIntervLine."Service Header No.",lServiceIntervLine."Line No.");
          //>>IMH04.ACO
        UNTIL lServiceIntervLine.NEXT = 0;
    END;

    PROCEDURE ChangeStatusMQ@1000000010(pSDRCode@1000000000 : Code[10];pServiceIntervLine@1000000002 : Record 50075) : Boolean;
    VAR
      lDARVASwitchSystemSetup@1000000001 : Record 50180;
      lRecRef@1000000003 : RecordRef;
      lStatus@1000000005 : 'Unprocessed,Processing,Error,Unit Test,Sent,Warning';
      lRecordID@1000000004 : RecordID;
      lStep@1000000006 : 'Generation,Validation';
    BEGIN
      //IMH03.ACO
      lRecRef.GETTABLE(pServiceIntervLine);

      //<<IMH05.ACO
      {EXIT(DARVAMgt.ModifyStatusSendMQ_SDR(pServiceIntervLine."Corporate No.",
                                      pServiceIntervLine."Corporate Region Code",
                                      pSDRCode,
                                      lDARVASwitchSystemSetup."Line Type"::Default,
                                      '',
                                      lRecRef.RECORDID,
                                      lStatus::Unprocessed));
      }
      EXIT(DARVAMgt.ModifyStatusSendMQ_SDR(pServiceIntervLine."Corporate No.",
                                      pServiceIntervLine."Corporate Region Code",
                                      pSDRCode,
                                      lDARVASwitchSystemSetup."Line Type"::Default,
                                      '',
                                      lRecRef.RECORDID,
                                      lStatus::Unprocessed,
                                      lStep::Generation));
      //>>IMH05.ACO
    END;

    PROCEDURE IsRecipientsChoiceVisible@1000000007() : Boolean;
    VAR
      lProductCatalog@1000000000 : Record 50060;
    BEGIN
      //IMH04.ACO

      //Type de flux doit ˆtre un SD99
      DARVASetup.GET;

      TempSelectedDARVATemplate.RESET;
      IF NOT TempSelectedDARVATemplate.FINDFIRST THEN
        EXIT(FALSE);

      IF NOT (TempSelectedDARVATemplate.Code = DARVASetup."DARVA SD99 Code") THEN
        EXIT(FALSE);

      //Type de demandeur doit ˆtre t‚l‚expert
      //IF NOT (ServiceHeader.Requisitioner = 'TEXP') THEN
      //  EXIT(FALSE);

      //SDR64 doit avoir ‚t‚ envoy‚
      IF NOT SDR64Send(ServiceHeader."Service No.", ServiceHeader."No.", ServiceInterventionLineNo)  THEN
        EXIT(FALSE);

      //Affichage d‚pend du type de produit et grand compte
      EXIT(ShowRecipientChoice(ServiceHeader."Service Order Type", ServiceHeader."Corporate No."));
    END;

    PROCEDURE IsActionManagerChoiceVisible@1000000013() : Boolean;
    VAR
      lProductCatalog@1000000000 : Record 50060;
    BEGIN
      //IMH04.ACO

      //Choix destinataire doit ˆtre affich‚
      //<<IMH06.ACO
      //IF NOT RecipientVisible THEN
      //  EXIT (FALSE);
      //>>IMH06.ACO

      //Type de flux doit ˆtre un SD99
      DARVASetup.GET;

      TempSelectedDARVATemplate.RESET;
      IF NOT TempSelectedDARVATemplate.FINDFIRST THEN
        EXIT(FALSE);

      IF NOT (TempSelectedDARVATemplate.Code = DARVASetup."DARVA SD99 Code") THEN
        EXIT(FALSE);

      //SDR64 doit avoir ‚t‚ envoy‚
      IF NOT SDR64Send(ServiceHeader."Service No.", ServiceHeader."No.", ServiceInterventionLineNo) THEN
        EXIT(FALSE);

      //Choix destinataire doit ˆtre Grand compte
      //<<IMH06.ACO
      //IF NOT (CommentLine."DARVA Send Type" = CommentLine."DARVA Send Type"::Corporate) THEN
      //  EXIT(FALSE);

      IF RecipientVisible THEN
        IF NOT (CommentLine."DARVA Send Type" = CommentLine."DARVA Send Type"::Corporate) THEN
          EXIT(FALSE);
      //>>IMH06.ACO

      //Affichage d‚pend du type de produit et grand compte
      EXIT(ShowManagerActionChoice(ServiceHeader."Service Order Type", ServiceHeader."Corporate No."));
    END;

    PROCEDURE CheckFieldsSDR99@1000000026() : Boolean;
    BEGIN
      //IMH04.ACO

      // commentaire libre ne doit pas ˆtre vide
      IF BodyText.LENGTH = 0 THEN BEGIN
        MESSAGE(Text007);
        EXIT(FALSE);
      END;

      // Choix ‚metteur
      //<<IMH08.ACO
      //IF NOT ShowRecipientChoice(ServiceHeader."Service Order Type", ServiceHeader."Corporate No.") THEN
      //  EXIT(TRUE);          // cas MATMUT, AMFASS
      //IF CommentLine."DARVA Send Type" = CommentLine."DARVA Send Type"::" " THEN  BEGIN
      //  MESSAGE(Text008);
      //  EXIT(FALSE);
      //END;
      IF ShowRecipientChoice(ServiceHeader."Service Order Type", ServiceHeader."Corporate No.") THEN
        IF CommentLine."DARVA Send Type" = CommentLine."DARVA Send Type"::" " THEN  BEGIN
          MESSAGE(Text008);
          EXIT(FALSE);
        END;
      //>>IMH08.ACO

      // Action gestionnaire
      //<<IMH08.ACO
      //IF ShowManagerActionChoice(ServiceHeader."Service Order Type", ServiceHeader."Corporate No.") THEN
      //      EXIT(TRUE);          //cas AGPM
      //IF CommentLine."Manager To-do Type" = CommentLine."Manager To-do Type"::" " THEN BEGIN
      //  MESSAGE(Text009);
      //  EXIT(FALSE);
      // END;
      IF ActionVisible THEN BEGIN // MACIF RENEXP
        IF CommentLine."Manager To-do Type" = CommentLine."Manager To-do Type"::" " THEN BEGIN
          MESSAGE(Text009);
          EXIT(FALSE);
        END;
      END
      ELSE BEGIN
        IF RecipientVisible THEN BEGIN
          //MACIF RENSSEXP
          //Par d‚faut Information
          CommentLine."Manager To-do Type" := CommentLine."Manager To-do Type"::Information;
          CommentLine.MODIFY;
        END;
      END;
      //>>IMH08.ACO

      EXIT(TRUE);
    END;

    PROCEDURE TestSDR64Send@1100281008() : Boolean;
    VAR
      lCorporate@1100281000 : Record 18;
    BEGIN
      // IMH04.ACO
      lCorporate.GET(ServiceHeader."Corporate No.");
      EXIT(lCorporate."Test Send SDR64");
    END;

    PROCEDURE SDR64Send@1000000004(pServiceNo@1000000004 : Code[20];pServiceHeaderNo@1000000003 : Code[20];pServiceIntervLineNo@1000000000 : Integer) : Boolean;
    VAR
      lCorporate@1000000001 : Record 18;
      lInterfaceReference@1000000002 : Record 50164;
      lServiceInterventionLine@1000000005 : Record 50075;
    BEGIN
      //IMH04.ACO

      lCorporate.GET(ServiceHeader."Corporate No.");
      CASE lCorporate."Send Type SDR64" OF lCorporate."Send Type SDR64" :: "By Serv. Header" :BEGIN
          ServiceHeader.CALCFIELDS("SDR64 Send");
          EXIT(ServiceHeader."SDR64 Send");
        END;
        lCorporate."Send Type SDR64" :: "By Intervention" :BEGIN
          IF ServiceInterventionNo = 0 THEN
            EXIT(FALSE);

          //Impossible d'envoyer un SDR64 sur une action annul‚e
          IF lServiceInterventionLine.GET(ServiceHeader."No.", ServiceInterventionLineNo) THEN
            IF lServiceInterventionLine."Intervention Status" = lServiceInterventionLine."Intervention Status"::Cancel THEN
              EXIT(FALSE);

          lInterfaceReference.SETRANGE("Source Table ID",DATABASE::"Service Intervention Line");
          lInterfaceReference.SETRANGE("Source No.",pServiceNo);
          lInterfaceReference.SETRANGE("Source No. 2",pServiceHeaderNo);
          lInterfaceReference.SETRANGE("Source No. 3",pServiceIntervLineNo);

          //Envoi d'un SDR64 si celui-ci n'a jamais ‚t‚ envoy‚
          IF NOT lInterfaceReference.FINDFIRST THEN
            EXIT(TRUE);

          //Envoi d'un SDR64 si celui-ci est en erreur
          EXIT((lInterfaceReference."Send Status" = lInterfaceReference."Send Status" :: "Generation Error") OR
             (lInterfaceReference."Send Status" = lInterfaceReference."Send Status" :: "Validation Error"));
        END;
      END
    END;

    PROCEDURE ShowManagerActionChoice@1000000008(pProductType@1000000000 : Code[10];pCorporateNo@1000000001 : Code[20]) : Boolean;
    VAR
      lProductCatalog@1000000002 : Record 50060;
    BEGIN
      //IMH04.ACO
      lProductCatalog.GET(ServiceHeader."Corporate No.", ServiceHeader."Service Order Type");
      EXIT(lProductCatalog."Choose Action Comments");
    END;

    PROCEDURE ShowRecipientChoice@1000000012(pProductType@1000000001 : Code[10];pCorporateNo@1000000000 : Code[20]) : Boolean;
    VAR
      lProductCatalog@1000000002 : Record 50060;
    BEGIN
      //IMH04.ACO
      lProductCatalog.GET(ServiceHeader."Corporate No.", ServiceHeader."Service Order Type");
      EXIT(lProductCatalog."Choose Recipient Comments");
    END;

    PROCEDURE DisplaySDR64Template@1000000014(pServiceNo@1000000003 : Code[20];pServiceHeaderNo@1000000002 : Code[20];pServiceIntervLineNo@1000000001 : Integer) : Boolean;
    VAR
      lCorporate@1000000000 : Record 18;
    BEGIN
      //IMH04.ACO
      lCorporate.GET(ServiceHeader."Corporate No.");
      IF lCorporate."Send Type SDR64"  = lCorporate."Send Type SDR64" :: "By Intervention" THEN BEGIN
        EXIT(SDR64Send(pServiceNo, pServiceHeaderNo, pServiceIntervLineNo));
      END;

      EXIT(TRUE);
    END;

    PROCEDURE GetErrorTxt@1100281002();
    VAR
      lInterfaceReference@1100281000 : Record 50164;
      lCorporate@1100281001 : Record 18;
    BEGIN
      //IMH07.zw cr‚ation

      ErrorTxt := '';
      lCorporate.GET(ServiceHeader."Corporate No.");
      IF Code = DARVASetup."DARVA SD64 Code" THEN
        CASE lCorporate."Send Type SDR64" OF
          lCorporate."Send Type SDR64" :: "By Intervention" : BEGIN
            IF ServiceInterventionLineNo <> 0 THEN BEGIN
              lInterfaceReference.SETRANGE("Source Table ID",DATABASE::"Service Intervention Line");
              lInterfaceReference.SETRANGE("Source No.",ServiceHeader."Service No.");
              lInterfaceReference.SETRANGE("Source No. 2",ServiceHeader."No.");
              lInterfaceReference.SETRANGE("Source No. 3",ServiceInterventionLineNo);
              IF lInterfaceReference.FINDFIRST THEN
                ErrorTxt := FORMAT(lInterfaceReference."Send Status");
            END;
          END;
          ELSE BEGIN
            DARVAMgt.SendMQ_SrvHd_ErrorExist(ServiceHeader, DARVASetup."DARVA SD64 Code",
                                        DARVASwitchSystemSetup."Line Type"::Default, '', ErrorTxt);
          END;
        END;
    END;

    PROCEDURE SendSDR64ForSrvHd@1100281012();
    VAR
      lErrorTxt@1100281000 : Text[250];
      lStatus@1100281003 : 'Unprocessed,Processing,Error,Unit Test,Sent,Warning';
      lStep@1100281001 : 'Generation,Validation';
    BEGIN
      //IMH07.zw cr‚ation
      IF DARVAMgt.SendMQ_SrvHd_ErrorExist(ServiceHeader, DARVASetup."DARVA SD64 Code",
            DARVASwitchSystemSetup."Line Type"::Default, '', lErrorTxt) THEN BEGIN
        DARVAMgt.ModifyStatusSendMQ_SrvHd(ServiceHeader."Corporate No.",
                                      ServiceHeader."Corporate Region Code",
                                      DARVASetup."DARVA SD64 Code",
                                      DARVASwitchSystemSetup."Line Type"::Default,
                                      '',
                                      ServiceHeader."No.",
                                      lStatus::Unprocessed,
                                      lStep::Generation);

      END ELSE BEGIN
        SDR64Mgt.SetNotUseCard(FALSE);  //les fenˆtres SDR64 doivent s'ouvrir
        SDR64Mgt.SetNotUseChangeMessage(TRUE);
        SDR64Mgt.Code(ServiceHeader);
      END;
    END;

    BEGIN
    {
      /** @r IMH07 @d 19/03/14 @a ISAT.ZW @v IMH6.01.5049 @h 5049 @s Gestion erreur SDR
          @c Gestion SDR 64 en erreur MACIF & AGPM */
      /** @r IMH06 @d 18/02/14 @a ISAT.ACO @v IMH6.01.4900 @h 4900 @s DARVA MATMUT Lot 1
          @c Choix action gestionnaire peut-ˆtre affich‚e sans choix destinataire (cas MACIF REN_SSEXP) */
      /** @r IMH05 @d 18/02/14 @a ISAT.ACO @v IMH6.01.4978 @h 4978 @s DARVA MATMUT Lot1
          @c Pour SDR64 en erreur, refaire ‚tape g‚n‚ration quoiqu'il arrive */
      /** @r IMH04 @d 28/11/13 @a ISAT.ACO @v IMH6.01.4900 @h 4900 @s DARVA MATMUT Lot1
          @c Ajout choix destinaire
          @c Ajout choix action gestionnaire
          @c Ajout fonction IsRecipientChoiceVisible
          @c Ajout fonction IsActionChoiceVisible
          @c Ajout fonction CheckFieldsSDR99 pour contr“le des champs obligatoires SDR99
          @c Ajout fonction SDR64Send
          @c Ajout fonction ShowActionManagerChoice
          @c Ajout fonction ShowRecipientChoice
          @c Ajout fonction SendSDR64ForInterv
          @c Ajout fonction TestSDR64Send
          @c Ajout fonction DisplaySDR64Template
          @c Ajout colonne "Erreur" */
          @c Modification affichage et non plus d‚sactivation commentaires et piŠces jointes */
      /** @r IMH03 @d 12/11/13 @a ISAT.ACO @v IMH6.01.348 @s DARVA MATMUT Lot1
          @c Suppression sous-page templates
          @c Ajout fonction SelectTemplate
          @c Autorisation ou non de joindre piŠce jointe selon modŠle d'envoi
          @c Autorisation ou non de saisir des commentaires selon modŠle d'envoi
          @c Modification fonction SendSDR pour envoi selon type flux et type envoi DARVA
          @c Ajout fonction SendSDR64ByInterv
          @c Ajout fonction ChangeStatusMQ
          @c Modification Source Temporaire */
      /** @r IMH02 @d 14/10/13 @a ISAT.ACO @v IMH6.01.348 @s DARVA MATMUT Lot1 @h 4789
          @c Sauvegarde de l'extension du fichier joint */
      /** @r IMH01 @d 23/08/13 @a ISAT.ACO @v IMH6.01.348 @s Darva MATMUT Lot1 @c Cr‚ation */
    }
    END.
  }
}