OBJECT Report 10862 Suggest Vendor Payments FR
{
  OBJECT-PROPERTIES
  {
    Date=31/05/12;
    Time=11:44:29;
    Modified=Yes;
    Version List=NAVFR6.00.01,ISA6.00;
  }
  PROPERTIES
  {
    Permissions=TableData 25=rm;
    CaptionML=[ENU=Suggest Vendor Payments;
               FRA=Proposer paiements fournisseur];
    ProcessingOnly=Yes;
  }
  DATAITEMS
  {
    { PROPERTIES
      {
        DataItemTable=Table23;
        DataItemTableView=SORTING(No.);
        OnPreDataItem=BEGIN
                        IF LastDueDateToPayReq = 0D THEN
                          ERROR(Text000);
                        IF PostingDate = 0D THEN
                          ERROR(Text001);

                        GenPayLineInserted := FALSE;
                        SeveralCurrencies := FALSE;
                        MessageText := '';

                        IF UsePaymentDisc AND (LastDueDateToPayReq < WORKDATE) THEN
                          IF NOT
                             CONFIRM(
                               Text003+
                               Text004,FALSE,
                               WORKDATE)
                          THEN
                            ERROR(Text005);

                        Vend2.COPYFILTERS(Vendor);

                        OriginalAmtAvailable := AmountAvailable;
                        IF AmountAvailable > 0 THEN BEGIN
                          SETCURRENTKEY(Priority);
                          SETRANGE(Priority,1,2147483647);
                          UsePriority := TRUE;
                        END;
                        Window.OPEN(Text006);

                        NextEntryNo := 1;
                      END;

        OnAfterGetRecord=BEGIN
                           IF StopPayments THEN
                             CurrReport.BREAK;
                           Window.UPDATE(1,"No.");
                           GetVendLedgEntries(TRUE,FALSE);
                           GetVendLedgEntries(FALSE,FALSE);
                           CheckAmounts(FALSE);
                         END;

        OnPostDataItem=BEGIN
                         IF UsePriority AND NOT StopPayments THEN BEGIN
                           RESET;
                           COPYFILTERS(Vend2);
                           SETCURRENTKEY(Priority);
                           SETRANGE(Priority,0);
                           IF FIND('-') THEN
                             REPEAT
                               Window.UPDATE(1,"No.");
                               GetVendLedgEntries(TRUE,FALSE);
                               GetVendLedgEntries(FALSE,FALSE);
                               CheckAmounts(FALSE);
                             UNTIL (NEXT = 0) OR StopPayments;
                         END;

                         IF UsePaymentDisc AND NOT StopPayments THEN BEGIN
                           RESET;
                           COPYFILTERS(Vend2);
                           Window.OPEN(Text007);
                           IF FIND('-') THEN
                             REPEAT
                               Window.UPDATE(1,"No.");
                               PayableVendLedgEntry.SETRANGE("Vendor No.","No.");
                               GetVendLedgEntries(TRUE,TRUE);
                               GetVendLedgEntries(FALSE,TRUE);
                               CheckAmounts(TRUE);
                             UNTIL (NEXT = 0) OR StopPayments;
                         END;

                         GenPayLine.LOCKTABLE;
                         GenPayLine.SETRANGE("No.",GenPayLine."No.");
                         IF GenPayLine.FIND('+') THEN BEGIN
                           FirstLineNo := GenPayLine."Line No.";
                           LastLineNo := GenPayLine."Line No.";
                           GenPayLine.INIT;
                         END;

                         Window.OPEN(Text008);

                         PayableVendLedgEntry.RESET;
                         PayableVendLedgEntry.SETRANGE(Priority,1,2147483647);
                         MakeGenPayLines;
                         PayableVendLedgEntry.RESET;
                         PayableVendLedgEntry.SETRANGE(Priority,0);
                         MakeGenPayLines;
                         PayableVendLedgEntry.RESET;
                         PayableVendLedgEntry.DELETEALL;

                         Window.CLOSE;
                         ShowMessage(MessageText);
                       END;

        ReqFilterFields=No.,Payment Method Code;
      }
      SECTIONS
      {
      }
       }
  }
  REQUESTFORM
  {
    PROPERTIES
    {
      Width=6160;
      Height=4070;
      SaveValues=Yes;
      LookupMode=Yes;
      OnOpenForm=BEGIN
                   //<<ISA01.ST
                   IF PostingDate = 0D THEN
                     PostingDate := WORKDATE;
                   //>>ISA01.ST
                 END;

    }
    CONTROLS
    {
      { 1120001;TextBox   ;3410 ;0    ;1650 ;440  ;CaptionML=[ENU=Last Payment Date;
                                                              FRA=DerniŠre date ‚ch‚ance];
                                                   SourceExpr=LastDueDateToPayReq }
      { 1120021;Label     ;0    ;0    ;3300 ;440  ;ParentControl=1120001 }
      { 1120002;CheckBox  ;3410 ;550  ;440  ;440  ;ShowCaption=No;
                                                   CaptionML=[ENU=Find Payment Discounts;
                                                              FRA=Rechercher les escomptes];
                                                   SourceExpr=UsePaymentDisc }
      { 1120022;Label     ;0    ;550  ;3300 ;440  ;ParentControl=1120002;
                                                   VertAlign=Bottom;
                                                   MultiLine=Yes }
      { 1120004;TextBox   ;3410 ;2310 ;2750 ;440  ;CaptionML=[ENU=Available Amount (LCY);
                                                              FRA=Montant disponible DS];
                                                   SourceExpr=AmountAvailable;
                                                   OnAfterValidate=BEGIN
                                                                     IF AmountAvailable <> 0 THEN
                                                                       UsePriority := TRUE;
                                                                   END;
                                                                    }
      { 1120024;Label     ;0    ;2310 ;3300 ;440  ;ParentControl=1120004 }
      { 1120005;TextBox   ;3410 ;2970 ;1650 ;440  ;Editable=No;
                                                   CaptionML=[ENU=Currency Filter;
                                                              FRA=Filtre devise];
                                                   SourceExpr=CurrencyFilter;
                                                   TableRelation=Currency }
      { 1120003;CheckBox  ;3410 ;1760 ;440  ;440  ;ShowCaption=No;
                                                   CaptionML=[ENU=Use Vendor Priority;
                                                              FRA=Utiliser priorit‚ fournisseur];
                                                   SourceExpr=UsePriority;
                                                   OnValidate=BEGIN
                                                                IF NOT UsePriority AND (AmountAvailable <> 0) THEN
                                                                  ERROR(Text011);
                                                              END;
                                                               }
      { 1120008;Label     ;0    ;1760 ;3300 ;440  ;ParentControl=1120003 }
      { 1120000;TextBox   ;3410 ;1100 ;2750 ;440  ;CaptionML=[ENU=Summarize per;
                                                              FRA=Totaliser par];
                                                   OptionCaptionML=[ENU=" ,Vendor,Due date";
                                                                    FRA=" ,Fournisseur,Date d'‚ch‚ance"];
                                                   SourceExpr=SummarizePer }
      { 1120006;Label     ;0    ;1100 ;3300 ;440  ;ParentControl=1120000 }
      { 1120007;Label     ;0    ;2970 ;3300 ;440  ;ParentControl=1120005 }
      { 8016600;TextBox   ;3410 ;3630 ;1700 ;440  ;ValidateTableRelation=No;
                                                   CaptionML=[ENU=Payment Method Filter;
                                                              FRA=Filtre mode de rŠglement];
                                                   SourceExpr=PaymentMethodFilter;
                                                   TableRelation="Payment Method".Code }
      { 8016601;Label     ;0    ;3630 ;3300 ;440  ;ParentControl=8016600 }
    }
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnOpenPage=BEGIN
                   //<<ISA01.ST
                   IF PostingDate = 0D THEN
                     PostingDate := WORKDATE;
                   //>>ISA01.ST
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             FRA=Options] }

      { 1120001;2;Field     ;
                  CaptionML=[ENU=Last Payment Date;
                             FRA=DerniŠre date ‚ch‚ance];
                  SourceExpr=LastDueDateToPayReq }

      { 1120002;2;Field     ;
                  CaptionML=[ENU=Find Payment Discounts;
                             FRA=Rechercher les escomptes];
                  SourceExpr=UsePaymentDisc;
                  MultiLine=Yes }

      { 1120000;2;Field     ;
                  CaptionML=[ENU=Summarize per;
                             FRA=Totaliser par];
                  OptionCaptionML=[ENU=" ,Vendor,Due date";
                                   FRA=" ,Fournisseur,Date d'‚ch‚ance"];
                  SourceExpr=SummarizePer }

      { 1120003;2;Field     ;
                  CaptionML=[ENU=Use Vendor Priority;
                             FRA=Utiliser priorit‚ fournisseur];
                  SourceExpr=UsePriority;
                  OnValidate=BEGIN
                               IF NOT UsePriority AND (AmountAvailable <> 0) THEN
                                 ERROR(Text011);
                             END;
                              }

      { 1120004;2;Field     ;
                  CaptionML=[ENU=Available Amount (LCY);
                             FRA=Montant disponible DS];
                  SourceExpr=AmountAvailable;
                  OnValidate=BEGIN
                               AmountAvailableOnAfterValidate;
                             END;
                              }

      { 1120005;2;Field     ;
                  CaptionML=[ENU=Currency Filter;
                             FRA=Filtre devise];
                  SourceExpr=CurrencyFilter;
                  TableRelation=Currency;
                  Editable=FALSE }

      { 8016600;2;Field     ;
                  CaptionML=[ENU=Payment Method Filter;
                             FRA=Filtre mode de rŠglement];
                  SourceExpr=PaymentMethodFilter;
                  TableRelation="Payment Method".Code }

    }
  }
  CODE
  {
    VAR
      Text000@1120000 : TextConst 'ENU=Please enter the last payment date.;FRA=Veuillez entrer la derniŠre date d''‚ch‚ance.';
      Text001@1120001 : TextConst 'ENU=Please enter the posting date.;FRA=Veuillez entrer une date de comptabilisation.';
      Text002@1120002 : TextConst 'ENU=Please enter a Starting Document No.;FRA=Veuillez renseigner le champ Nø document d‚but.';
      Text003@1120003 : TextConst 'ENU=The selected last due date is earlier than %1.\\;FRA=La date de derniŠre ‚ch‚ance s‚lectionn‚e est ant‚rieure au %1.\\';
      Text004@1120004 : TextConst 'ENU=Do you still want to run the batch job?;FRA=Souhaitez-vous tout de mˆme ex‚cuter ce traitement par lots ?';
      Text005@1120005 : TextConst 'ENU=The batch job was interrupted.;FRA=Le traitement par lots a ‚t‚ interrompu.';
      Text006@1120006 : TextConst 'ENU=Processing vendors     #1##########;FRA=Traitement des fournisseurs             #1##########';
      Text007@1120007 : TextConst 'ENU=Processing vendors for payment discounts #1##########;FRA=Traitement des escomptes fournisseur    #1##########';
      Text008@1120008 : TextConst 'ENU=Inserting payment journal lines #1##########;FRA=Insertion des lignes f. paiement        #1##########';
      Text009@1120009 : TextConst 'ENU=%1 must be G/L Account or Bank Account.;FRA=%1 doit ˆtre un compte g‚n‚ral ou un compte bancaire.';
      Text010@1120010 : TextConst 'ENU=%1 must be filled only when %2 is Bank Account.;FRA=%1 ne doit ˆtre renseign‚ que lorsque %2 est un compte bancaire.';
      Text011@1120011 : TextConst 'ENU=Use Vendor Priority must be activated when the value in the Amount Available field is not 0.;FRA=Le champ Utiliser priorit‚ fournisseur doit ˆtre activ‚ lorsque la valeur du champ Montant disponible est diff‚rente de 0.';
      Text012@1120012 : TextConst 'ENU=Starting Document No. must contain a number.;FRA=Le champ Nø document d‚but doit contenir un num‚ro.';
      Text013@1120013 : TextConst 'ENU=Use Vendor Priority must be activated when the value in the Amount Available Amount (LCY) field is not 0.;FRA=Le champ Utiliser priorit‚ fournisseur doit ˆtre activ‚ lorsque la valeur du champ Montant disponible DS est diff‚rente de 0.';
      Text014@1120014 : TextConst 'ENU=Payment to vendor %1;FRA=Paiement au fournisseur %1';
      Text015@1120015 : TextConst 'ENU=Payment of %1 %2;FRA=Paiement de %1 %2';
      Text016@1120016 : TextConst 'ENU=" is already applied to %1 %2 for vendor %3.";FRA=" est d‚j… lettr‚(e) avec %1 %2 pour le fournisseur %3."';
      Text017@1120017 : TextConst 'ENU="When %1 = %2 and you have not placed a check mark in the Summarize per Vendor field,\";FRA="Lorsque %1 = %2 et que vous n''avez pas activ‚ le champ Totaliser par fournisseur,\"';
      Text018@1120018 : TextConst 'ENU=then you must place a check mark in New Doc. No. per Line.;FRA=vous devez donc activer le champ Nouveau nø document par ligne.';
      Text019@1120019 : TextConst 'ENU=You have only created suggested vendor payment lines for the %1 %2.\;FRA=Vous avez seulement cr‚‚ des lignes proposition paiements fournisseur pour %1 %2.\';
      Text020@1120020 : TextConst 'ENU=There are, however, other open vendor ledger entries in currencies other than %2.;FRA=Il existe cependant d''autres ‚critures comptables fournisseur ouvertes dans d''autres devises que la devise %2.';
      Text021@1120021 : TextConst 'ENU=There are no other open vendor ledger entries in other currencies.;FRA=Il n''existe aucune autre ‚criture comptable fournisseur ouverte dans une autre devise.';
      Text022@1120022 : TextConst 'ENU=You have created suggested vendor payment lines for all currencies.;FRA=Vous avez cr‚‚ des lignes proposition paiements fournisseur pour toutes les devises.';
      Vend2@1120023 : Record 23;
      GenPayHead@1120024 : Record 10865;
      GenPayLine@1120025 : Record 10866;
      VendLedgEntry@1120026 : Record 25;
      GLAcc@1120027 : Record 15;
      BankAcc@1120028 : Record 270;
      PayableVendLedgEntry@1120029 : TEMPORARY Record 317;
      TempPaymentPostBuffer@1120030 : TEMPORARY Record 10864;
      OldTempPaymentPostBuffer@1120031 : TEMPORARY Record 10864;
      NoSeriesMgt@1120032 : Codeunit 396;
      VendEntryEdit@1120033 : Codeunit 113;
      Window@1120034 : Dialog;
      UsePaymentDisc@1120035 : Boolean;
      PostingDate@1120036 : Date;
      LastDueDateToPayReq@1120037 : Date;
      NextDocNo@1120038 : Code[20];
      AmountAvailable@1120039 : Decimal;
      OriginalAmtAvailable@1120040 : Decimal;
      UsePriority@1120041 : Boolean;
      SummarizePer@1120042 : ' ,Vendor,Due date';
      FirstLineNo@1120043 : Integer;
      LastLineNo@1120044 : Integer;
      NextEntryNo@1120045 : Integer;
      StopPayments@1120046 : Boolean;
      MessageText@1120047 : Text[250];
      GenPayLineInserted@1120048 : Boolean;
      SeveralCurrencies@1120049 : Boolean;
      Text023@1120050 : TextConst 'ENU=" ,Computer Check,Manual Check";FRA=" ,Informatique,Manuel"';
      PaymentClass@1120051 : Record 10860;
      CurrencyFilter@1120052 : Code[10];
      PaymentMethodFilter@8016600 : Text[250];

    PROCEDURE SetGenPayLine@1120005(NewGenPayLine@1120000 : Record 10865);
    BEGIN
      GenPayHead := NewGenPayLine;
      GenPayLine."No." := NewGenPayLine."No.";
      PaymentClass.GET(GenPayHead."Payment Class");
      PostingDate := GenPayHead."Posting Date";
      CurrencyFilter := GenPayHead."Currency Code";
    END;

    PROCEDURE GetVendLedgEntries@1120004(Positive@1120000 : Boolean;Future@1120001 : Boolean);
    BEGIN
      VendLedgEntry.RESET;
      VendLedgEntry.SETCURRENTKEY("Vendor No.",Open,Positive,"Due Date");
      VendLedgEntry.SETRANGE("Vendor No.",Vendor."No.");
      VendLedgEntry.SETRANGE(Open,TRUE);
      VendLedgEntry.SETRANGE(Positive,Positive);
      VendLedgEntry.SETRANGE("Currency Code",CurrencyFilter);
      VendLedgEntry.SETRANGE("Applies-to ID", '');
      //<<ISA02.ST
      IF PaymentMethodFilter <> '' THEN
        VendLedgEntry.SETFILTER("Payment Method Code", PaymentMethodFilter);
      //>>ISA02.ST
      IF Future THEN BEGIN
        VendLedgEntry.SETRANGE("Due Date",LastDueDateToPayReq+1,31129999D);
        VendLedgEntry.SETRANGE("Pmt. Discount Date",PostingDate,LastDueDateToPayReq);
        VendLedgEntry.SETFILTER("Original Pmt. Disc. Possible",'<0');
      END ELSE
        VendLedgEntry.SETRANGE("Due Date",0D,LastDueDateToPayReq);
      VendLedgEntry.SETRANGE("On Hold",'');
      IF VendLedgEntry.FIND('-') THEN
        REPEAT
          SaveAmount;
        UNTIL VendLedgEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE SaveAmount@1120003();
    BEGIN
      WITH GenPayLine DO BEGIN
        "Account Type" := "Account Type"::Vendor;
        VALIDATE("Account No.",VendLedgEntry."Vendor No.");
        "Posting Date" := VendLedgEntry."Posting Date";
        "Currency Factor" := VendLedgEntry."Adjusted Currency Factor";
        IF "Currency Factor" = 0 THEN
          "Currency Factor" := 1;
        VALIDATE("Currency Code",VendLedgEntry."Currency Code");
        VendLedgEntry.CALCFIELDS("Remaining Amount");
        IF (VendLedgEntry."Document Type" = VendLedgEntry."Document Type"::Invoice) AND
           (PostingDate <= VendLedgEntry."Pmt. Discount Date")
        THEN
          Amount := -(VendLedgEntry."Remaining Amount" - VendLedgEntry."Original Pmt. Disc. Possible")
        ELSE
          Amount := -VendLedgEntry."Remaining Amount";
        VALIDATE(Amount);
      //<<IMH01.ST
        "Service No." := VendLedgEntry."Service No.";
        "Service Header No." := VendLedgEntry."Service Header No.";
        "Intervention Line No." := VendLedgEntry."Intervention Line No.";
        IF VendLedgEntry."Service Header Voucher No." <> 0 THEN
          VALIDATE("Service Header Voucher No.", VendLedgEntry."Service Header Voucher No.") // calcul de l'adresse
        ELSE
          "Payment Address Code" := '';
      //>>IMH01.ST
      END;

      IF UsePriority THEN
        PayableVendLedgEntry.Priority := Vendor.Priority
      ELSE
        PayableVendLedgEntry.Priority := 0;
      PayableVendLedgEntry."Vendor No." := VendLedgEntry."Vendor No.";
      PayableVendLedgEntry."Entry No." := NextEntryNo;
      PayableVendLedgEntry."Vendor Ledg. Entry No." := VendLedgEntry."Entry No.";
      PayableVendLedgEntry.Amount := GenPayLine.Amount;
      PayableVendLedgEntry."Amount (LCY)" := GenPayLine."Amount (LCY)";
      PayableVendLedgEntry.Positive := (PayableVendLedgEntry.Amount > 0);
      PayableVendLedgEntry.Future := (VendLedgEntry."Due Date" > LastDueDateToPayReq);
      PayableVendLedgEntry."Currency Code" := VendLedgEntry."Currency Code";
      PayableVendLedgEntry."Due Date" := VendLedgEntry."Due Date";
      PayableVendLedgEntry."Payment Address Code" := GenPayLine."Payment Address Code"; //IMH01.ST
      PayableVendLedgEntry.INSERT;
      NextEntryNo := NextEntryNo + 1;
    END;

    PROCEDURE CheckAmounts@1120002(Future@1120000 : Boolean);
    VAR
      CurrencyBalance@1120001 : Decimal;
      PrevCurrency@1120002 : Code[10];
    BEGIN
      PayableVendLedgEntry.SETRANGE("Vendor No.",Vendor."No.");
      PayableVendLedgEntry.SETRANGE(Future,Future);
      IF PayableVendLedgEntry.FIND('-') THEN BEGIN
        PrevCurrency := PayableVendLedgEntry."Currency Code";
        REPEAT
          IF PayableVendLedgEntry."Currency Code" <> PrevCurrency THEN BEGIN
            IF CurrencyBalance < 0 THEN BEGIN
              PayableVendLedgEntry.SETRANGE("Currency Code",PrevCurrency);
              PayableVendLedgEntry.DELETEALL;
              PayableVendLedgEntry.SETRANGE("Currency Code");
            END ELSE
              AmountAvailable := AmountAvailable - CurrencyBalance;
            CurrencyBalance := 0;
            PrevCurrency := PayableVendLedgEntry."Currency Code";
          END;
          IF (OriginalAmtAvailable = 0) OR
             (AmountAvailable >= CurrencyBalance + PayableVendLedgEntry."Amount (LCY)")
          THEN
            CurrencyBalance := CurrencyBalance + PayableVendLedgEntry."Amount (LCY)"
          ELSE
            PayableVendLedgEntry.DELETE;
        UNTIL PayableVendLedgEntry.NEXT = 0;
        IF CurrencyBalance < 0 THEN BEGIN
          PayableVendLedgEntry.SETRANGE("Currency Code",PrevCurrency);
          PayableVendLedgEntry.DELETEALL;
          PayableVendLedgEntry.SETRANGE("Currency Code");
        END ELSE
          IF OriginalAmtAvailable > 0 THEN
            AmountAvailable := AmountAvailable - CurrencyBalance;
        IF (OriginalAmtAvailable > 0) AND (AmountAvailable <= 0) THEN
          StopPayments := TRUE;
      END;
      PayableVendLedgEntry.RESET;
    END;

    LOCAL PROCEDURE MakeGenPayLines@1120001();
    VAR
      GenPayLine3@1120000 : Record 81;
      EntryNo@1120001 : Integer;
    BEGIN
      TempPaymentPostBuffer.DELETEALL;

      IF PayableVendLedgEntry.FIND('-') THEN
        REPEAT
          PayableVendLedgEntry.SETRANGE("Vendor No.",PayableVendLedgEntry."Vendor No.");
          PayableVendLedgEntry.FIND('-');
          REPEAT
            VendLedgEntry.GET(PayableVendLedgEntry."Vendor Ledg. Entry No.");
            TempPaymentPostBuffer."Account No." := VendLedgEntry."Vendor No.";
            TempPaymentPostBuffer."Currency Code" := VendLedgEntry."Currency Code";
            IF SummarizePer = SummarizePer::"Due date" THEN
              TempPaymentPostBuffer."Due Date" := VendLedgEntry."Due Date";

            TempPaymentPostBuffer."Dimension Entry No." := 0;
            TempPaymentPostBuffer."Global Dimension 1 Code" := '';
            TempPaymentPostBuffer."Global Dimension 2 Code" := '';

            IF SummarizePer IN [SummarizePer::Vendor,SummarizePer::"Due date"] THEN BEGIN
              TempPaymentPostBuffer."Auxiliary Entry No." := 0;
              IF TempPaymentPostBuffer.FIND THEN BEGIN
                TempPaymentPostBuffer.Amount := TempPaymentPostBuffer.Amount + PayableVendLedgEntry.Amount;
                TempPaymentPostBuffer."Amount (LCY)" := TempPaymentPostBuffer."Amount (LCY)" + PayableVendLedgEntry."Amount (LCY)";
                //<<IMH01.ST Sauvegarde de l'adresse de la derniŠre ‚criture
                TempPaymentPostBuffer."Payment Address Code" := PayableVendLedgEntry."Payment Address Code";
                //>>IMH01.ST
                TempPaymentPostBuffer.MODIFY;
              END ELSE BEGIN
                LastLineNo := LastLineNo + 10000;
                TempPaymentPostBuffer."Payment Line No." := LastLineNo;
                IF PaymentClass."Line No. Series" = '' THEN
                  NextDocNo := GenPayHead."No." + '/' + FORMAT(LastLineNo)
                ELSE
                  NextDocNo := NoSeriesMgt.GetNextNo(PaymentClass."Line No. Series",PostingDate,FALSE);
                TempPaymentPostBuffer."Document No." := NextDocNo;
                NextDocNo := INCSTR(NextDocNo);
                TempPaymentPostBuffer.Amount := PayableVendLedgEntry.Amount;
                TempPaymentPostBuffer."Amount (LCY)" := PayableVendLedgEntry."Amount (LCY)";
                //<<IMH01.ST
                TempPaymentPostBuffer."Payment Address Code" := PayableVendLedgEntry."Payment Address Code";
                //>>IMH01.ST
                Window.UPDATE(1,VendLedgEntry."Vendor No.");
                TempPaymentPostBuffer.INSERT;
              END;
              VendLedgEntry."Applies-to ID" := TempPaymentPostBuffer."Document No.";
              VendEntryEdit.RUN(VendLedgEntry)
            END ELSE BEGIN
              GenPayLine3.RESET;
              GenPayLine3.SETCURRENTKEY(
                "Account Type","Account No.","Applies-to Doc. Type","Applies-to Doc. No.");
              GenPayLine3.SETRANGE("Account Type",GenPayLine3."Account Type"::Vendor);
              GenPayLine3.SETRANGE("Account No.",VendLedgEntry."Vendor No.");
              GenPayLine3.SETRANGE("Applies-to Doc. Type",VendLedgEntry."Document Type");
              GenPayLine3.SETRANGE("Applies-to Doc. No.",VendLedgEntry."Document No.");
              IF GenPayLine3.FIND('-') THEN
                GenPayLine3.FIELDERROR(
                  "Applies-to Doc. No.",
                  STRSUBSTNO(
                    Text016,
                    VendLedgEntry."Document Type",VendLedgEntry."Document No.",
                    VendLedgEntry."Vendor No."));

              TempPaymentPostBuffer."Applies-to Doc. Type" := VendLedgEntry."Document Type";
              TempPaymentPostBuffer."Applies-to Doc. No." := VendLedgEntry."Document No.";
              TempPaymentPostBuffer."Currency Factor" := VendLedgEntry."Adjusted Currency Factor";
              TempPaymentPostBuffer.Amount := PayableVendLedgEntry.Amount;
              TempPaymentPostBuffer."Amount (LCY)" := PayableVendLedgEntry."Amount (LCY)";
              TempPaymentPostBuffer."Global Dimension 1 Code" := VendLedgEntry."Global Dimension 1 Code";
              TempPaymentPostBuffer."Global Dimension 2 Code" := VendLedgEntry."Global Dimension 2 Code";
              TempPaymentPostBuffer."Auxiliary Entry No." := VendLedgEntry."Entry No.";
              //<<IMH01.ST
              TempPaymentPostBuffer."Payment Address Code" := PayableVendLedgEntry."Payment Address Code";
              //>>IMH01.ST
              Window.UPDATE(1,VendLedgEntry."Vendor No.");
              TempPaymentPostBuffer.INSERT;
            END;
            VendLedgEntry.CALCFIELDS(VendLedgEntry."Remaining Amount");
            VendLedgEntry."Amount to Apply":=VendLedgEntry."Remaining Amount";
            VendEntryEdit.RUN(VendLedgEntry);
          UNTIL PayableVendLedgEntry.NEXT = 0;
          PayableVendLedgEntry.SETFILTER("Vendor No.",'>%1',PayableVendLedgEntry."Vendor No.");
        UNTIL NOT PayableVendLedgEntry.FIND('-');

      CLEAR(OldTempPaymentPostBuffer);
      TempPaymentPostBuffer.SETCURRENTKEY("Document No.");
      IF TempPaymentPostBuffer.FIND('-') THEN
        REPEAT
          WITH GenPayLine DO BEGIN
            INIT;
            Window.UPDATE(1,TempPaymentPostBuffer."Account No.");
            IF SummarizePer = SummarizePer::" " THEN BEGIN
              LastLineNo := LastLineNo + 10000;
              "Line No." := LastLineNo;
              IF PaymentClass."Line No. Series" = '' THEN
                NextDocNo := GenPayHead."No." + '/' + FORMAT(GenPayLine."Line No.")
              ELSE
                NextDocNo := NoSeriesMgt.GetNextNo(PaymentClass."Line No. Series",PostingDate,FALSE);
            END ELSE BEGIN
              "Line No." := TempPaymentPostBuffer."Payment Line No.";
              NextDocNo := TempPaymentPostBuffer."Document No.";
            END;
            "Document No." := NextDocNo;
            GenPayLine."Applies-to ID" := "Document No.";
            OldTempPaymentPostBuffer := TempPaymentPostBuffer;
            OldTempPaymentPostBuffer."Document No." := "Document No.";
            IF SummarizePer = SummarizePer::" " THEN BEGIN
              VendLedgEntry.GET(TempPaymentPostBuffer."Auxiliary Entry No.");
              VendLedgEntry."Applies-to ID" := NextDocNo;
              VendLedgEntry.MODIFY;
            END;
            "Account Type" := "Account Type"::Vendor;
            VALIDATE("Account No.",TempPaymentPostBuffer."Account No.");
            "Currency Code" := TempPaymentPostBuffer."Currency Code";
            Amount := TempPaymentPostBuffer.Amount;
            IF Amount > 0 THEN
              "Debit Amount" := Amount
            ELSE
              "Credit Amount" := -Amount;
            "Amount (LCY)" := TempPaymentPostBuffer."Amount (LCY)";
            "Currency Factor" := TempPaymentPostBuffer."Currency Factor";
            IF ("Currency Factor" = 0) AND (Amount <> 0) THEN
              "Currency Factor" := Amount / "Amount (LCY)";
            Vend2.GET(GenPayLine."Account No.");
            VALIDATE(GenPayLine."Bank Account Code",Vend2."Default Bank Account Code");
            "Payment Class" := GenPayHead."Payment Class";
            VALIDATE("Status No.");
            "Posting Date" := PostingDate;
            IF SummarizePer = SummarizePer::" " THEN BEGIN
              "Applies-to Doc. Type" := VendLedgEntry."Document Type";
              "Applies-to Doc. No." := VendLedgEntry."Document No.";
            END;
            CASE SummarizePer OF
              SummarizePer::" " :
                "Due Date" := VendLedgEntry."Due Date";
              SummarizePer::Vendor :
                BEGIN
                  PayableVendLedgEntry.SETCURRENTKEY("Vendor No.","Due Date");
                  PayableVendLedgEntry.SETRANGE("Vendor No.",TempPaymentPostBuffer."Account No.");
                  PayableVendLedgEntry.FIND('-');
                  "Due Date" := PayableVendLedgEntry."Due Date";
                  PayableVendLedgEntry.DELETEALL;
                END;
              SummarizePer::"Due date" :
                "Due Date" := TempPaymentPostBuffer."Due Date";
            END;
      //<<IMH01.ST
            IF TempPaymentPostBuffer."Payment Address Code" <> '' THEN
              VALIDATE("Payment Address Code", TempPaymentPostBuffer."Payment Address Code");
      //>>IMH01.ST
            IF Amount <> 0 THEN
              INSERT;
            GenPayLineInserted := TRUE;
          END;
        UNTIL TempPaymentPostBuffer.NEXT = 0;
    END;

    LOCAL PROCEDURE ShowMessage@1120000(VAR Text@1120000 : Text[250]);
    BEGIN
      IF (Text <> '') AND GenPayLineInserted THEN
        MESSAGE(Text);
    END;

    LOCAL PROCEDURE AmountAvailableOnAfterValidate@19035272();
    BEGIN
      IF AmountAvailable <> 0 THEN
        UsePriority := TRUE;
    END;

    BEGIN
    {
      /**@r IMH01 @d 25/02/12 @a ISAT.ST @v IMH6.01.146 @s Comptabilit‚ @c Adresse de rŠglement */
      /**@r ISA02 @d 23/07/09 @a ISAT.ST @v ISA6.00.00.04 @s Suivi rŠglement
         @c Ajout filtre mode rŠglement */
      /**@r ISA01 @d 08/07/09 @a ISAT.ST @v ISA6.00.00.01 @s migration ISATECH +
         @c SaveValues sur l'optionform et init PostingDate … Workdate */
    }
    END.
  }
  RDLDATA
  {
  }
}