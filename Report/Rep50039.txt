OBJECT Report 50039 IMH Draft Files Check Letter
{
  OBJECT-PROPERTIES
  {
    Date=21/05/12;
    Time=09:54:38;
    Modified=Yes;
    Version List=IMH6.01;
  }
  PROPERTIES
  {
    CaptionML=[ENU=ETEBAC Files;
               FRA=Fichiers Lettre chŠque];
    ProcessingOnly=Yes;
    OnPreReport=VAR
                  RBMgt@1120000 : Codeunit 419;
                BEGIN
                  CompanyInfo.GET;
                  CompanyInfo.TESTFIELD(Name);

                  //sb**
                  IF ExportFileName = '' THEN BEGIN
                    GLSetup.GET;
                    GLSetup.TESTFIELD("Letter Check Export Path");
                    ExportDate := FormatDate(TODAY);
                    ExportTime := FormatTime(TIME);

                    ExportFileName := GLSetup."Letter Check Export Path" + BankAccount."No."+ ExportDate + ExportTime+ '.txt';
                  END;

                  //IF ISSERVICETIER THEN
                  //  ExportFileName := RBMgt.EnvironFileName('','');
                  //sb**
                  ExportFile.TEXTMODE := TRUE;
                  ExportFile.WRITEMODE := TRUE;
                  IF NOT ISSERVICETIER THEN ExportFile.QUERYREPLACE := TRUE;
                  ExportFile.CREATE(ExportFileName);
                END;

    OnPostReport=VAR
                   ToFile@1120000 : Text[260];
                 BEGIN
                   ExportFile.CLOSE;
                   {
                   IF ISSERVICETIER THEN BEGIN
                     ToFile := Text009;
                     DOWNLOAD(ExportFileName, GetCaption, '', Text008, ToFile);
                   END;

                   IF NOT ISSERVICETIER THEN
                   }
                     MESSAGE(Text000);
                 END;

  }
  DATAITEMS
  {
    { PROPERTIES
      {
        DataItemTable=Table10866;
        DataItemTableView=SORTING(No.,Line No.);
        OnAfterGetRecord=BEGIN
                           CurrReport.BREAK;
                         END;

      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=12000;
            SectionHeight=846;
          }
          CONTROLS
          {
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemTable=Table10865;
        DataItemTableView=SORTING(No.);
        MaxIteration=1;
        OnPreDataItem=BEGIN
                        //SETFILTER("No.","Payment Line".GETFILTER("No."));
                      END;

        OnAfterGetRecord=VAR
                           TYPE@1120000 : Text[3];
                           FSENTI@1100281001 : Text[5];
                           FSTYPE@1100281002 : Text[1];
                           CODBAK@1100281003 : Text[15];
                           OperationCode@1120001 : Text[3];
                           FromPaymentNo@1120003 : Text[6];
                           DeliveryDate@1120004 : Text[6];
                           CompanyName@1120005 : Text[24];
                           CompanyBankName@1120006 : Text[24];
                           EntryCode@1120007 : Text[1];
                           CurrencyIdentifier@1120008 : Code[1];
                           BankBranchNo@1120009 : Text[5];
                           AgencyCode@1120010 : Text[5];
                           BankAccountNo@1120011 : Text[11];
                           ExportedText@1120012 : Text[270];
                           CompanyNo@1100281000 : Text[2];
                         BEGIN
                           BankAccount.GET("Account No.");
                           BankAccPostingGroup.GET(BankAccount."Bank Acc. Posting Group");

                           IF STRLEN("Bank Branch No.") > 5 THEN
                             ERROR(Text002, "Account No.");

                           IF STRLEN("Agency Code") > 5 THEN
                             ERROR(Text002, "Account No.");

                           IF STRLEN("Bank Account No.") > 11 THEN
                             ERROR(Text002, "Account No.");

                           IF NOT "RIB Checked" THEN
                             ERROR(Text003, "Account No.");

                           CASE "Currency Code" = '' OF
                             TRUE: CurrencyUsed := '';
                             FALSE: CurrencyUsed := 'FRF';
                           END;

                           CASE CurrencyUsed = '' OF
                             TRUE: CurrencyIdentifier := 'E';
                             FALSE: CurrencyIdentifier := 'F';
                           END;

                           LineNo := 1;

                           CALCFIELDS(Amount);
                           BankAccount.TESTFIELD("Check Note Issuer Code");

                           TotalAmont := 0;
                           TotalNb := 0;
                           TYPE := '001';
                           IF STRLEN("No.") >= 5 THEN
                             NUMFICHIER :=  COPYSTR("No.", STRLEN("No.") - 4,5)
                           ELSE
                             NUMFICHIER := PADSTR2("No.",5,'0');
                           FSENTI := PADSTR2(COPYSTR(BankAccount."Check Note Issuer Code",1,5),5,' ');
                           FSTYPE := PADSTR2(COPYSTR(BankAccount."Check Note Issuer Code",6,1),1,' ');
                           CODBAK := COPYSTR(BankAccPostingGroup."G/L Bank Account No.",1,15);
                           Numbering := CONVERTSTR(FORMAT(LineNo,6), ' ', '0');

                           ExportedText :=
                             TYPE +        //Code Enregistrement
                             NUMFICHIER +  //Num‚ro de s‚quence
                             FSENTI +      //Code Emetteur
                             FSTYPE +      //Type Emetteur
                             CODBAK;       //Code Banque

                           ExportFile.WRITE(ExportedText);
                         END;

      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=12000;
            SectionHeight=846;
          }
          CONTROLS
          {
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemIndent=1;
        DataItemTable=Table10866;
        DataItemTableView=SORTING(No.,Line No.);
        DataItemVarName=Payment Line2;
        OnAfterGetRecord=VAR
                           Cust@1100281051 : Record 18;
                           Vend@1100281050 : Record 23;
                           lCustLedgerEntry@1100281014 : Record 21;
                           lVendLedgerEntry@1100281049 : Record 25;
                           lPurchInvHeader@1100281048 : Record 122;
                           lService@1100281047 : Record 50066;
                           lServiceHeader@1100281022 : Record 5900;
                           lServiceOrderType@1100281021 : Record 5903;
                           lCountry@1100281008 : Record 9;
                           TYPE@1100281023 : Text[3];
                           NUMCHK@1100281024 : Text[7];
                           TOTCHK@1100281025 : Text[13];
                           COCOAS@1100281026 : Text[10];
                           COCOMP@1100281027 : Text[10];
                           TINOM2@1100281028 : Text[35];
                           TIRUE1@1100281044 : Text[35];
                           TIRUE2@1100281029 : Text[35];
                           TIPOS2@1100281031 : Text[5];
                           TIVIL2@1100281030 : Text[25];
                           TIPAY2@1100281033 : Text[30];
                           STANNE@1100281034 : Text[2];
                           STMOIS@1100281035 : Text[2];
                           STJOUR@1100281036 : Text[2];
                           STDATE@1100281038 : Text[6];
                           STRFAC@1100281037 : Text[11];
                           STJREF@1100281039 : Text[2];
                           STMREF@1100281040 : Text[2];
                           STAREF@1100281041 : Text[2];
                           STDATEREF@1100281032 : Text[6];
                           STLIB1@1100281042 : Text[30];
                           STMONT@1100281043 : Text[13];
                           RecordCode@1120000 : Text[2];
                           OperationCode@1120002 : Text[3];
                           Numbering@1120003 : Text[8];
                           BillReference@1120004 : Text[10];
                           CustomerName@1120005 : Text[35];
                           CustomerBankName@1120006 : Text[24];
                           CustomerBankCity@1100281018 : Text[24];
                           AcceptationCode@1120007 : Text[1];
                           BankBranchNo@1120008 : Text[5];
                           AgencyCode@1120009 : Text[5];
                           BankAccountNo@1120010 : Text[11];
                           PrintAmount@1120011 : Text[30];
                           DueDate@1120012 : Text[10];
                           CreationDate@1120013 : Text[10];
                           ExportedText@1120014 : Text[270];
                           CheckNo@1100281000 : Code[7];
                           PageBackGround@1100281001 : Code[2];
                           CustomerAddress@1100281003 : ARRAY [4] OF Text[35];
                           CustomerPostCode@1100281004 : Code[5];
                           CustomerCity@1100281005 : Text[35];
                           CustomerCountryName@1100281006 : Text[25];
                           CustomerCountry@1100281007 : Code[3];
                           DetDate@1100281009 : ARRAY [2] OF Code[10];
                           DetInvoiceNo@1100281010 : ARRAY [2] OF Code[15];
                           DetInvoiceDesc@1100281011 : ARRAY [2] OF Text[30];
                           DetInvoiceDebit@1100281012 : ARRAY [2] OF Code[15];
                           DetInvoicecredit@1100281013 : ARRAY [2] OF Code[15];
                           i@1100281015 : Integer;
                           PaymentCity@1100281002 : Text[26];
                           RIBKey@1100281016 : Code[10];
                           CurrencyCode@1100281017 : Code[3];
                           IBANCode@1100281019 : Code[50];
                           SWIFTNo@1100281020 : Code[24];
                           lUseServiceAddress@1100281045 : Boolean;
                           lServiceFound@1100281046 : Boolean;
                           lIsBeneficiary@1100281052 : Boolean;
                         BEGIN
                           IF ("Check No." = '') THEN BEGIN
                             BankAccount."Last Check Note No." := INCSTR(BankAccount."Last Check Note No.");
                             BankAccount.MODIFY;
                             "Check No." := BankAccount."Last Check Note No.";
                             "External Document No." := "Check No.";
                             "Drawee Reference" := "Check No.";
                             MODIFY;
                           END;

                           IF (CurrencyUsed = '') AND ("Currency Code" <> '') THEN
                             ERROR(Text004, GLSetup."LCY Code");

                           TESTFIELD("Account No.");

                           //<<IMH04.PC
                           lUseServiceAddress := FALSE;
                           lServiceFound := FALSE;
                           CASE "Account Type" OF
                             "Account Type"::Customer : BEGIN
                               lCustLedgerEntry.RESET;
                               lCustLedgerEntry.SETCURRENTKEY("Customer No.","Applies-to ID",Open,Positive,"Due Date");
                               lCustLedgerEntry.SETRANGE("Customer No.","Payment Line2"."Account No.");
                               lCustLedgerEntry.SETRANGE("Applies-to ID","Payment Line2"."Applies-to ID");
                               IF lCustLedgerEntry.FINDFIRST THEN BEGIN
                                 IF lServiceHeader.GET(lServiceHeader."Document Type"::Invoice,lCustLedgerEntry."Service Header No.") THEN BEGIN
                                   lServiceOrderType.GET(lServiceHeader."Service Order Type");
                                   lUseServiceAddress := lServiceOrderType.Proof;
                                   lServiceFound := TRUE;
                                 END;
                               END;
                               IF lUseServiceAddress AND IsBeneficiary("Account No.") AND lServiceFound THEN BEGIN
                                 lService.GET(lCustLedgerEntry."Service No.");
                                 CustomerName := PADSTR2(lService."Contact Name",35,' ');
                                 CustomerAddress[1] := PADSTR2(lService.Address,35,' ');
                                 CustomerAddress[2] := PADSTR2(lService."Address 2",35,' ');
                                 CustomerAddress[3] := PADSTR2(lService."Address 3",35,' ');
                                 CustomerAddress[4] := PADSTR2('',35,' ');
                                 CustomerPostCode := PADSTR2(lService."Post Code",5,' ');
                                 CustomerCity := PADSTR2(lService.City,35,' ');
                                 CustomerCountry := PADSTR2(lService."Country/Region Code",3,' ');
                               END ELSE BEGIN
                                 IF PaymentAddr.GET("Account Type", "Account No.", "Payment Address Code") THEN BEGIN
                                   CustomerName := PADSTR2(PaymentAddr.Name,35,' ');
                                   CustomerAddress[1] := PADSTR2(PaymentAddr.Address,35,' ');
                                   CustomerAddress[2] := PADSTR2(PaymentAddr."Address 2",35,' ');
                                   CustomerAddress[3] := PADSTR2(PaymentAddr."Address 3",35,' ');
                                   CustomerAddress[4] := PADSTR2('',35,' ');
                                   CustomerPostCode := PADSTR2(PaymentAddr."Post Code",5,' ');
                                   CustomerCity := PADSTR2(PaymentAddr.City,35,' ');
                                   CustomerCountry := PADSTR2(PaymentAddr."Country/Region Code",3,' ');
                                 END ELSE BEGIN
                                   Cust.GET("Account No.");
                                   CustomerName := PADSTR2(Cust.Name,35,' ');
                                   CustomerAddress[1] := PADSTR2(Cust.Address,35,' ');
                                   CustomerAddress[2] := PADSTR2(Cust."Address 2",35,' ');
                                   CustomerAddress[3] := PADSTR2(Cust."Address 3",35,' ');
                                   CustomerAddress[4] := PADSTR2('',35,' ');
                                   CustomerPostCode := PADSTR2(Cust."Post Code",5,' ');
                                   CustomerCity := PADSTR2(Cust.City,35,' ');
                                   CustomerCountry := PADSTR2(Cust."Country/Region Code",3,' ');
                                 END;
                               END;
                             END;
                             "Account Type"::Vendor : BEGIN
                               lVendLedgerEntry.RESET;
                               lVendLedgerEntry.SETCURRENTKEY("Vendor No.","Applies-to ID",Open,Positive,"Due Date");
                               lVendLedgerEntry.SETRANGE("Vendor No.","Payment Line2"."Account No.");
                               lVendLedgerEntry.SETRANGE("Applies-to ID","Payment Line2"."Applies-to ID");
                               IF lVendLedgerEntry.FINDFIRST THEN BEGIN
                                 IF lServiceHeader.GET(lServiceHeader."Document Type"::Invoice,lVendLedgerEntry."Service Header No.") THEN BEGIN
                                   lServiceOrderType.GET(lServiceHeader."Service Order Type");
                                   lUseServiceAddress := lServiceOrderType.Proof;
                                   lServiceFound := TRUE;
                                 END;
                               END;
                               IF lUseServiceAddress AND IsBeneficiary("Account No.") AND lServiceFound THEN BEGIN
                                 lService.GET(lVendLedgerEntry."Service No.");
                                 CustomerName := PADSTR2(lService."Contact Name",35,' ');
                                 CustomerAddress[1] := PADSTR2(lService.Address,35,' ');
                                 CustomerAddress[2] := PADSTR2(lService."Address 2",35,' ');
                                 CustomerAddress[3] := PADSTR2(lService."Address 3",35,' ');
                                 CustomerAddress[4] := PADSTR2('',35,' ');
                                 CustomerPostCode := PADSTR2(lService."Post Code",5,' ');
                                 CustomerCity := PADSTR2(lService.City,35,' ');
                                 CustomerCountry := PADSTR2(lService."Country/Region Code",3,' ');
                               END ELSE BEGIN
                                 IF PaymentAddr.GET("Account Type", "Account No.", "Payment Address Code") THEN BEGIN
                                   CustomerName := PADSTR2(PaymentAddr.Name,35,' ');
                                   CustomerAddress[1] := PADSTR2(PaymentAddr.Address,35,' ');
                                   CustomerAddress[2] := PADSTR2(PaymentAddr."Address 2",35,' ');
                                   CustomerAddress[3] := PADSTR2(PaymentAddr."Address 3",35,' ');
                                   CustomerAddress[4] := PADSTR2('',35,' ');
                                   CustomerPostCode := PADSTR2(PaymentAddr."Post Code",5,' ');
                                   CustomerCity := PADSTR2(PaymentAddr.City,35,' ');
                                   CustomerCountry := PADSTR2(PaymentAddr."Country/Region Code",3,' ');
                                 END ELSE BEGIN
                                   Vend.GET("Account No.");
                                   CustomerName := PADSTR2(Vend.Name,35,' ');
                                   CustomerAddress[1] := PADSTR2(Vend.Address,35,' ');
                                   CustomerAddress[2] := PADSTR2(Vend."Address 2",35,' ');
                                   CustomerAddress[3] := PADSTR2('',35,' ');
                                   CustomerAddress[4] := PADSTR2('',35,' ');
                                   CustomerPostCode := PADSTR2(Vend."Post Code",5,' ');
                                   CustomerCity := PADSTR2(Vend.City,35,' ');
                                   CustomerCountry := PADSTR2(Vend."Country/Region Code",3,' ');
                                 END;
                               END;
                             END;
                           END;
                           //>>IMH04.PC

                           {
                           //<<IMH02.ST
                           IF PaymentAddr.GET("Account Type", "Account No.", "Payment Address Code") THEN BEGIN
                             CustomerName := PADSTR2(PaymentAddr.Name,35,' ');
                             CustomerAddress[1] := PADSTR2(PaymentAddr.Address,35,' ');
                             CustomerAddress[2] := PADSTR2(PaymentAddr."Address 2",35,' ');
                             CustomerAddress[3] := PADSTR2(PaymentAddr."Address 3",35,' ');
                             CustomerAddress[4] := PADSTR2('',35,' ');
                             CustomerPostCode := PADSTR2(PaymentAddr."Post Code",5,' ');
                             CustomerCity := PADSTR2(PaymentAddr.City,35,' ');
                             CustomerCountry := PADSTR2(PaymentAddr."Country/Region Code",3,' ');
                           END ELSE BEGIN
                           //>>IMH02.ST
                             IF ("Account Type" = "Account Type"::Customer) THEN BEGIN
                               //<<IMH03.PC
                               lCustLedgerEntry.RESET;
                               lCustLedgerEntry.SETCURRENTKEY("Customer No.","Applies-to ID",Open,Positive,"Due Date");
                               lCustLedgerEntry.SETRANGE("Customer No.","Payment Line2"."Account No.");
                               lCustLedgerEntry.SETRANGE("Applies-to ID","Payment Line2"."Applies-to ID");
                               IF lCustLedgerEntry.FINDFIRST THEN BEGIN
                                 //<<IMH04.PC
                                 if lServiceHeader.GET(lServiceHeader."Document Type"::Invoice,lCustLedgerEntry."Service Header No.") then begin
                                   lServiceOrderType.GET(lServiceHeader."Service Order Type");
                                   lUseServiceAddress := lServiceOrderType.Proof;
                                   //>>IMH04.PC
                                     lService.GET(lCustLedgerEntry."Service No.");
                                     CustomerName := PADSTR2(lService."Contact Name",35,' ');
                                     CustomerAddress[1] := PADSTR2(lService.Address,35,' ');
                                     CustomerAddress[2] := PADSTR2(lService."Address 2",35,' ');
                                     CustomerAddress[3] := PADSTR2(lService."Address 3",35,' ');
                                     CustomerAddress[4] := PADSTR2('',35,' ');
                                     CustomerPostCode := PADSTR2(lService."Post Code",5,' ');
                                     CustomerCity := PADSTR2(lService.City,35,' ');
                                     CustomerCountry := PADSTR2(lService."Country/Region Code",3,' ');
                                   //<<IMH04.PC
                                   END ELSE BEGIN
                                     Cust.GET("Account No.");
                                     CustomerName := PADSTR2(Cust.Name,35,' ');
                                     CustomerAddress[1] := PADSTR2(Cust.Address,35,' ');
                                     CustomerAddress[2] := PADSTR2(Cust."Address 2",35,' ');
                                     CustomerAddress[3] := PADSTR2(Cust."Address 3",35,' ');
                                     CustomerAddress[4] := PADSTR2('',35,' ');
                                     CustomerPostCode := PADSTR2(Cust."Post Code",5,' ');
                                     CustomerCity := PADSTR2(Cust.City,35,' ');
                                     CustomerCountry := PADSTR2(Cust."Country/Region Code",3,' ');
                                   END;
                                 //>>IMH04.PC
                                 end else begin
                                     Cust.GET("Account No.");
                                     CustomerName := PADSTR2(Cust.Name,35,' ');
                                     CustomerAddress[1] := PADSTR2(Cust.Address,35,' ');
                                     CustomerAddress[2] := PADSTR2(Cust."Address 2",35,' ');
                                     CustomerAddress[3] := PADSTR2(Cust."Address 3",35,' ');
                                     CustomerAddress[4] := PADSTR2('',35,' ');
                                     CustomerPostCode := PADSTR2(Cust."Post Code",5,' ');
                                     CustomerCity := PADSTR2(Cust.City,35,' ');
                                     CustomerCountry := PADSTR2(Cust."Country/Region Code",3,' ');
                                 end;
                               END ELSE BEGIN
                               //>>IMH03.PC
                                 Cust.GET("Account No.");
                                 CustomerName := PADSTR2(Cust.Name,35,' ');
                                 CustomerAddress[1] := PADSTR2(Cust.Address,35,' ');
                                 CustomerAddress[2] := PADSTR2(Cust."Address 2",35,' ');
                                 CustomerAddress[3] := PADSTR2(Cust."Address 3",35,' ');
                                 CustomerAddress[4] := PADSTR2('',35,' ');
                                 CustomerPostCode := PADSTR2(Cust."Post Code",5,' ');
                                 CustomerCity := PADSTR2(Cust.City,35,' ');
                                 CustomerCountry := PADSTR2(Cust."Country/Region Code",3,' ');
                               END;
                             END;
                             IF ("Account Type" = "Account Type"::Vendor) THEN BEGIN
                               lVendLedgerEntry.RESET;
                               lVendLedgerEntry.SETCURRENTKEY("Vendor No.","Applies-to ID",Open,Positive,"Due Date");
                               lVendLedgerEntry.SETRANGE("Vendor No.","Payment Line2"."Account No.");
                               lVendLedgerEntry.SETRANGE("Applies-to ID","Payment Line2"."Applies-to ID");
                               IF lVendLedgerEntry.FINDFIRST THEN BEGIN
                                 //<<IMH04.PC
                                 lServiceHeader.GET(lServiceHeader."Document Type"::Invoice,lCustLedgerEntry."Service Header No.");
                                 lServiceOrderType.GET(lServiceHeader."Service Order Type");
                                 IF lServiceOrderType.Proof THEN BEGIN
                                 //>>IMH04.PC
                                   lService.GET(lVendLedgerEntry."Service No.");
                                   CustomerName := PADSTR2(lService."Contact Name",35,' ');
                                   CustomerAddress[1] := PADSTR2(lService.Address,35,' ');
                                   CustomerAddress[2] := PADSTR2(lService."Address 2",35,' ');
                                   CustomerAddress[3] := PADSTR2(lService."Address 3",35,' ');
                                   CustomerAddress[4] := PADSTR2('',35,' ');
                                   CustomerPostCode := PADSTR2(lService."Post Code",5,' ');
                                   CustomerCity := PADSTR2(lService.City,35,' ');
                                   CustomerCountry := PADSTR2(lService."Country/Region Code",3,' ');
                                 //<<IMH04.PC
                                 END ELSE BEGIN
                                   Vend.GET("Account No.");
                                   CustomerName := PADSTR2(Vend.Name,35,' ');
                                   CustomerAddress[1] := PADSTR2(Vend.Address,35,' ');
                                   CustomerAddress[2] := PADSTR2(Vend."Address 2",35,' ');
                                   CustomerAddress[3] := PADSTR2('',35,' ');
                                   CustomerAddress[4] := PADSTR2('',35,' ');
                                   CustomerPostCode := PADSTR2(Vend."Post Code",5,' ');
                                   CustomerCity := PADSTR2(Vend.City,35,' ');
                                   CustomerCountry := PADSTR2(Vend."Country/Region Code",3,' ');
                                 END;
                                 //>>IMH04.PC
                               END ELSE BEGIN
                                 Vend.GET("Account No.");
                                 CustomerName := PADSTR2(Vend.Name,35,' ');
                                 CustomerAddress[1] := PADSTR2(Vend.Address,35,' ');
                                 CustomerAddress[2] := PADSTR2(Vend."Address 2",35,' ');
                                 CustomerAddress[3] := PADSTR2('',35,' ');
                                 CustomerAddress[4] := PADSTR2('',35,' ');
                                 CustomerPostCode := PADSTR2(Vend."Post Code",5,' ');
                                 CustomerCity := PADSTR2(Vend.City,35,' ');
                                 CustomerCountry := PADSTR2(Vend."Country/Region Code",3,' ');
                               END;
                             END;
                           END;//IMH02.ST
                           }

                           IF STRLEN("Bank Branch No.") > 5 THEN
                             ERROR(Text006, "Bank Account Code");

                           IF STRLEN("Agency Code") > 5 THEN
                             ERROR(Text006, "Bank Account Code");

                           IF STRLEN("Bank Account No.") > 11 THEN
                             ERROR(Text006, "Bank Account Code");
                           {
                           IF NOT "RIB Checked" THEN
                             ERROR(Text007, "Bank Account Code", "Account No.");
                           }
                           TotalNb += 1;
                           TotalAmont += "Payment Line2".Amount;

                           LineNo := LineNo + 1;

                           TYPE := '020';
                           NUMCHK := PADSTR2("Payment Line2"."Check No.",7,'0');
                           TOTCHK := FormatAmount(ABS("Payment Line2".Amount),13);
                           COCOAS := PADSTR2('',10,' '); //
                           COCOMP := PADSTR2("Account No.",10,' ');
                           TINOM2 := PADSTR2(CustomerName,35,' ');
                           TIRUE1 := PADSTR2(CustomerAddress[1],35,' ');
                           TIRUE2 := PADSTR2(CustomerAddress[2],35,' ');
                           TIPOS2 := PADSTR2(CustomerPostCode,5,' ');
                           TIVIL2 := PADSTR2(CustomerCity,25,' ');
                           IF lCountry.GET(Cust."Country/Region Code") THEN
                             TIPAY2 := PADSTR2(lCountry.Name,30,' ')
                           ELSE
                             TIPAY2 := PADSTR2('FRANCE',30,' ');

                           //STANNE := FORMAT("Payment Header"."Document Date",2,'<Year>');
                           //STMOIS := FORMAT("Payment Header"."Document Date",2,'<Month,2>');
                           //STJOUR := FORMAT("Payment Header"."Document Date",2,'<Day,2>');
                           STDATE := FORMAT("Payment Header"."Document Date",6,'<Year><Month,2><Day,2>');

                           ExportedText :=
                               TYPE +        //Code Enregistrement
                               NUMFICHIER +  //Num‚ro de s‚quence
                               NUMCHK +      //Num‚ro de ChŠque
                               TOTCHK +      //Montant du chŠque
                               COCOAS +      //Personalisation
                               COCOMP +      //R‚f‚rence compte
                               TINOM2 +      //Nom B‚n‚ficiare
                               TIRUE1 +      //Adresse 1
                               TIRUE2 +      //Adresse 2
                               TIPOS2 +      //Code Postal
                               TIVIL2 +      //Ville
                               TIPAY2 +      //Pays
                               STDATE ;      //Date ChŠque

                           ExportFile.WRITE(ExportedText);

                           IF "Applies-to ID" <> '' THEN BEGIN
                             IF ("Payment Line2"."Account Type" = "Payment Line2"."Account Type"::Customer) THEN BEGIN
                               lCustLedgerEntry.RESET;
                               lCustLedgerEntry.SETCURRENTKEY("Customer No.","Applies-to ID",Open,Positive,"Due Date");
                               lCustLedgerEntry.SETRANGE("Customer No.","Payment Line2"."Account No.");
                               lCustLedgerEntry.SETRANGE("Applies-to ID","Payment Line2"."Applies-to ID");
                               IF lCustLedgerEntry.FINDSET THEN
                                 REPEAT
                                   lCustLedgerEntry.CALCFIELDS(Amount);

                                   TYPE   := '030';
                                   STRFAC := PADSTR2(lCustLedgerEntry."Document No.",11,' ');
                                   //STJREF := FORMAT(lCustLedgerEntry."Document Date",2,'<DAY,2>');
                                   //STMREF := FORMAT(lCustLedgerEntry."Document Date",2,'<Month,2>');
                                   //STAREF := FORMAT(lCustLedgerEntry."Document Date",2,'<Year>');
                                   STDATEREF := FORMAT(lCustLedgerEntry."Document Date",6,'<Day,2><Month,2><Year>');
                                   STLIB1 := PADSTR2(lCustLedgerEntry.Description,30,' ');
                                   STMONT := FormatAmount(lCustLedgerEntry.Amount,13);

                                   ExportedText :=
                                       TYPE +         //Code Enregistrement
                                       NUMFICHIER +   //Num‚ro de s‚quence
                                       NUMCHK +       //Numero de chŠque
                                       STRFAC +       //R‚f‚rence Facture
                                       STDATEREF +    //Date R‚f‚rence
                                       STLIB1 +       //Libell‚
                                       STMONT;        //Montant

                                   ExportFile.WRITE(ExportedText);
                                 UNTIL (lCustLedgerEntry.NEXT = 0);
                             END;

                             IF ("Payment Line2"."Account Type" = "Payment Line2"."Account Type"::Vendor) THEN BEGIN
                               lVendLedgerEntry.RESET;
                               lVendLedgerEntry.SETCURRENTKEY("Vendor No.","Applies-to ID",Open,Positive,"Due Date");
                               lVendLedgerEntry.SETRANGE("Vendor No.","Payment Line2"."Account No.");
                               lVendLedgerEntry.SETRANGE("Applies-to ID","Payment Line2"."Applies-to ID");
                               IF lVendLedgerEntry.FINDSET THEN
                                 REPEAT
                                   lVendLedgerEntry.CALCFIELDS(Amount);

                                   TYPE   := '030';
                                   STRFAC := PADSTR2(lVendLedgerEntry."Document No.",11,' ');
                                   //STJREF := FORMAT(lVendLedgerEntry."Document Date",2,'<DAY,2>');
                                   //STMREF := FORMAT(lVendLedgerEntry."Document Date",2,'<Month,2>');
                                   //STAREF := FORMAT(lVendLedgerEntry."Document Date",2,'<Year>');
                                   STDATEREF := FORMAT(lVendLedgerEntry."Document Date",6,'<Day,2><Month,2><Year>');
                                   STLIB1 := PADSTR2(lVendLedgerEntry.Description,30,' ');
                                   STMONT := FormatAmount(- lVendLedgerEntry.Amount,13);

                                   ExportedText :=
                                       TYPE +        //Code Enregistrement
                                       NUMFICHIER +  //Num‚ro de s‚quence
                                       NUMCHK +      //Numero de chŠque
                                       STRFAC +      //R‚f‚rence Facture
                                       STDATEREF +    //Date R‚f‚rence
                                       STLIB1 +       //Libell‚
                                       STMONT;        //Montant

                                     ExportFile.WRITE(ExportedText);
                                 UNTIL (lVendLedgerEntry.NEXT = 0);
                             END;
                           END;
                         END;

        OnPostDataItem=VAR
                         PaymentHeader@1120005 : Record 10865;
                         RecordCode@1120000 : Text[2];
                         OperationCode@1120001 : Text[2];
                         Numbering@1120002 : Text[8];
                         PrintAmount@1120003 : Text[30];
                         ExportedText@1120004 : Text[270];
                         PrintNb@1100281000 : Text[6];
                       BEGIN
                         PaymentHeader := "Payment Header";
                         PaymentHeader.Parameter := TRUE;
                         PaymentHeader.MODIFY;
                       END;

        DataItemLink=No.=FIELD(No.);
      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=12000;
            SectionHeight=846;
          }
          CONTROLS
          {
          }
           }
      }
       }
  }
  REQUESTFORM
  {
    PROPERTIES
    {
      Width=8910;
      Height=990;
      OnOpenForm=BEGIN
                   PaymentType := PaymentType::"Cash after Due Date";

                   IF ISSERVICETIER THEN
                     RequestOptionsForm.FileName.VISIBLE := FALSE;
                 END;

    }
    CONTROLS
    {
      { 1120000;TextBox   ;3410 ;0    ;5500 ;440  ;Name=FileName;
                                                   InPage=-1;
                                                   CaptionML=[ENU=File Name;
                                                              FRA=Nom du fichier];
                                                   SourceExpr=ExportFileName;
                                                   OnAssistEdit=VAR
                                                                  CommonDialogMgt@1120000 : Codeunit 412;
                                                                BEGIN
                                                                  ExportFileName := CommonDialogMgt.OpenFile(GetCaption, ExportFileName, 4, Text008, 1);
                                                                END;
                                                                 }
      { 1120001;Label     ;0    ;0    ;3300 ;440  ;ParentControl=1120000 }
      { 1120002;TextBox   ;3410 ;550  ;3300 ;440  ;InPage=-1;
                                                   CaptionML=[ENU=Payment Type;
                                                              FRA=Type de rŠglement];
                                                   OptionCaptionML=[ENU=Discount,Discount in Value,Cash after Due Date,Cash after Unpaid Delay;
                                                                    FRA=Escompte,Escompte en valeur,Encaissement ‚ch‚ance,Encaissement aprŠs d‚lai d'impay‚];
                                                   SourceExpr=PaymentType }
      { 1120003;Label     ;0    ;550  ;3300 ;440  ;ParentControl=1120002 }
    }
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnInit=BEGIN
               FileNameVisible := TRUE;
             END;

      OnOpenPage=BEGIN
                   PaymentType := PaymentType::"Cash after Due Date";

                   IF ISSERVICETIER THEN
                     FileNameVisible := FALSE;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             FRA=Options] }

      { 1120000;2;Field     ;
                  Name=FileName;
                  CaptionML=[ENU=File Name;
                             FRA=Nom du fichier];
                  SourceExpr=ExportFileName;
                  Visible=false;
                  OnAssistEdit=VAR
                                 CommonDialogMgt@1120000 : Codeunit 412;
                               BEGIN
                                 ExportFileName := CommonDialogMgt.OpenFile(GetCaption, ExportFileName, 4, Text008, 1);
                               END;
                                }

      { 1120002;2;Field     ;
                  CaptionML=[ENU=Payment Type;
                             FRA=Type de rŠglement];
                  OptionCaptionML=[ENU=Discount,Discount in Value,Cash after Due Date,Cash after Unpaid Delay;
                                   FRA=Escompte,Escompte en valeur,Encaissement ‚ch‚ance,Encaissement aprŠs d‚lai d'impay‚];
                  SourceExpr=PaymentType }

    }
  }
  CODE
  {
    VAR
      GLSetup@1120010 : Record 98;
      CompanyInfo@1120009 : Record 79;
      BankAccount@1100281008 : Record 270;
      BankAccPostingGroup@1100281010 : Record 277;
      ToolsMgt@1100281009 : Codeunit 8016602;
      ExportFile@1120012 : File;
      ExportFileName@1120000 : Text[260];
      CurrencyUsed@1120014 : Code[10];
      PaymentType@1120001 : 'Discount,Discount in Value,Cash after Due Date,Cash after Unpaid Delay';
      Text000@1120002 : TextConst 'ENU=The Check Letter file has been generated.;FRA=Le fichier Lettre ChŠque a ‚t‚ g‚n‚r‚.';
      Text002@1120003 : TextConst 'ENU=Bank Account No. %1 is too long. Please verify before continuing.;FRA=Le nø de compte bancaire %1 est trop long. V‚rifiez-le avant de continuer.';
      Text003@1120004 : TextConst 'ENU=The RIB of the company''s bank account %1 is incorrect. Please verify before continuing.;FRA=Le RIB du compte bancaire %1 de la soci‚t‚ est erron‚. V‚rifiez-le avant de continuer.';
      Text004@1120005 : TextConst 'ENU=You can only use %1;FRA=Vous pouvez seulement utiliser %1';
      Text006@1120007 : TextConst 'ENU=Bank Account No. %1 is too long. Please verify before continuing.;FRA=Le nø de compte bancaire %1 est trop long. V‚rifiez-le avant de continuer.';
      Text007@1120008 : TextConst 'ENU=The RIB of bank account %1 of customer %2 is incorrect. Please verify before continuing.;FRA=Le RIB du compte bancaire %1 du client %2 est erron‚. V‚rifiez-le avant de continuer.';
      Text008@1120011 : TextConst 'ENU=Text Files|*.txt|All Files|*.*;FRA=Fichiers texte|*.txt|Tous les fichiers|*.*';
      Text009@1120013 : TextConst 'ENU=default.txt;FRA=default.txt';
      LineNo@1120015 : Integer;
      FileNameVisible@19066691 : Boolean INDATASET;
      CompanyNo@1100281000 : Text[2];
      Numbering@1100281001 : Text[6];
      NUMFICHIER@1100281002 : Code[5];
      LotNo@1100281003 : Code[8];
      Filler@1100281004 : Text[270];
      ExpeditionMethod@1100281005 : Code[1];
      TotalAmont@1100281006 : Decimal;
      TotalNb@1100281007 : Integer;
      ExportDate@1000000000 : Text[8];
      ExportTime@1000000001 : Text[6];
      PaymentAddr@1100281011 : Record 10870;

    LOCAL PROCEDURE GetCaption@1101100008() Result : Text[50];
    VAR
      AllObjWithCaption@1101100000 : Record 2000000058;
      ID@1101100001 : Integer;
    BEGIN
      IF NOT EVALUATE(ID, DELCHR(CurrReport.OBJECTID(FALSE), '=', DELCHR(CurrReport.OBJECTID(FALSE), '=', '0123456789'))) THEN
        EXIT;

      IF NOT AllObjWithCaption.GET(AllObjWithCaption."Object Type"::Report, ID) THEN
        EXIT;

      EXIT(COPYSTR(AllObjWithCaption."Object Caption", 1, MAXSTRLEN(Result)));
    END;

    LOCAL PROCEDURE PADSTR2@1120016(String@1120000 : Text[1024];Length@1120001 : Integer;FillCharacter@1120002 : Text[1]) : Text[1024];
    VAR
      PaddingLength@1120003 : Integer;
    BEGIN
      PaddingLength := Length - STRLEN(String);

      CASE TRUE OF
        PaddingLength <= 0:
          EXIT(PADSTR(String, Length, FillCharacter));
        PaddingLength > 0:
          BEGIN
            //
            IF (FillCharacter = ' ') THEN BEGIN
              String := ToolsMgt.Ascii2Ansi(String);
              EXIT(PADSTR(String,Length));
            END ELSE
            //
              EXIT(PADSTR('', PaddingLength, FillCharacter) + String);
          END
      END;
    END;

    LOCAL PROCEDURE FormatAmount@1120055(Amount@1120000 : Decimal;Width@1120001 : Integer) : Text[50];
    VAR
      FormatAmount@1120002 : Text[50];
    BEGIN
      FormatAmount := CONVERTSTR(FORMAT(Amount * 100,Width,'<Integer>'),' ', '0');
      IF Amount < 0 THEN
        FormatAmount[Width] := '}';

      EXIT(FormatAmount)

      //FormatAmount := CONVERTSTR(FORMAT(Amount, Width, '<Precision,0:2><Integer><Decimal><Comma,,>'), ' ', '0');
      //FormatAmount := '0' + COPYSTR(FormatAmount, 1, Width - 3) + COPYSTR(FormatAmount, Width - 1, 2);
      //EXIT(FormatAmount);
    END;

    PROCEDURE FormatDate@1100281009(pDate@1100281000 : Date) : Text[8];
    BEGIN
      IF pDate <> 0D THEN
        EXIT(FORMAT(pDate,0,'<Day,2><Month,2><Year4>'))
      ELSE
        EXIT('');
    END;

    PROCEDURE FormatTime@1100281010(pTime@1100281000 : Time) : Text[6];
    BEGIN
      IF pTime <> 0T THEN
        EXIT(FORMAT(pTime,0,'<Hours24,2><Minutes,2><Seconds,2>'))
      ELSE
        EXIT('');
    END;

    PROCEDURE IsBeneficiary@1100281000(pAccountNo@1100281000 : Code[20]) : Boolean;
    VAR
      lContact@1100281001 : Record 5050;
    BEGIN
      // IMH04.PC
      IF lContact.GET(pAccountNo) THEN BEGIN
        IF lContact."Service Contact" = lContact."Service Contact"::Beneficiary THEN BEGIN
          EXIT(TRUE);
        END;
      END;
    END;

    BEGIN
    {
      /** @r IMH04 @d 16/05/12 @a ISAT.PC @v IMH6.01.154 @s Gestion lettre chŠque @h 3489 @c gestion du justificatif uniquement */
      /** @r IMH03 @d 25/02/12 @a ISAT.PC @v IMH6.01.154 @s Gestion lettre chŠque @c Cr‚ation Adresse de rŠglement */
      /** @r IMH02 @d 25/02/12 @a ISAT.ST @v IMH6.01.154 @s Gestion lettre chŠque @c Adresse de rŠglement */
      /** @r IMH01 @d 24/10/11 @a ISAT.EBA @v IMH6.01.154 @s Gestion lettre chŠque */
    }
    END.
  }
  RDLDATA
  {
  }
}