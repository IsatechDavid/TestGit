OBJECT Report 50053 Process Batch - Service Header
{
  OBJECT-PROPERTIES
  {
    Date=28/03/14;
    Time=15:22:12;
    Modified=Yes;
    Version List=IMH6.01,5005;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Process Auto - Service Header;
               FRA=Process automatique - Ligne produit];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  //<<IMH02.ISAT.EBA
                  HideDialogBox := NOT CurrReport.USEREQUESTFORM;
                  //>>IMH02.ISAT.EBA
                END;

  }
  DATAITEMS
  {
    { PROPERTIES
      {
        DataItemTable=Table5900;
        DataItemTableView=SORTING(Service No.);
        OnPreDataItem=VAR
                        lTaskLauncher@1100281000 : Codeunit 8016715;
                        lProcFilter@1100281002 : Text[1024];
                        lStatFilter@1100281001 : Text[1024];
                      BEGIN
                        FILTERGROUP(4);
                        SETFILTER("Process Code", '<>%1', '');
                        FILTERGROUP(0);
                        IF NASHandler.IsTaskTimeOut(TRUE) THEN
                          CurrReport.QUIT;
                        IF NOT ProcMgt.LoadFromStatusAuto(DATABASE::"Service Header", TempAutoStatus, lTaskLauncher.RetrieveParam) THEN
                          CurrReport.QUIT;
                        IF ProcMgt.MakeProcFilter(TempAutoStatus, lProcFilter, lStatFilter) THEN BEGIN
                          FILTERGROUP(5);
                          IF lProcFilter <> '' THEN
                            SETFILTER("Process Code", lProcFilter);
                          IF lStatFilter <> '' THEN
                            SETFILTER("Process Status No.", lStatFilter);
                          FILTERGROUP(0);
                        END;
                      END;

        OnAfterGetRecord=BEGIN
                           IF NOT TempAutoStatus.GET("Process Code", "Process Status No.") THEN
                             CurrReport.SKIP;
                           //IF Process.Code <> "Process Code" THEN
                           //  IF NOT Process.GET("Process Code") THEN
                           //    CurrReport.SKIP;
                           IF ErrorTrayLineExist THEN
                             CurrReport.SKIP;
                           CLEARLASTERROR;
                           CurrRec := "Service Header";
                           //<<IMH02.ISAT.EBA
                           //IF NOT CODEUNIT.RUN(CODEUNIT::"Proc. Service Header Mgt", CurrRec) THEN
                           ProcServHeaderMgt.SetHideDialogBox(HideDialogBox);
                           IF NOT ProcServHeaderMgt.RUN(CurrRec) THEN
                           //>>IMH02.ISAT.EBA
                             SetErrorMsg(CurrRec);
                           COMMIT;
                           IF NASHandler.IsTaskTimeOut(TRUE) THEN
                             CurrReport.QUIT;
                         END;

        ReqFilterFields=Service No.,Service Order Type,Process Code,Process Status No.;
      }
      SECTIONS
      {
      }
       }
  }
  REQUESTFORM
  {
    PROPERTIES
    {
      Width=9020;
      Height=3410;
    }
    CONTROLS
    {
    }
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  CODE
  {
    VAR
      NASHandler@1100281005 : Codeunit 8016720;
      TrayLineMgt@1100281004 : Codeunit 50050;
      ProcMgt@1100281006 : Codeunit 50040;
      ProcServHeaderMgt@1100281008 : Codeunit 50043;
      CurrRec@1100281001 : Record 5900;
      Text001@1100281000 : TextConst 'ENU=Process Error.;FRA=Erreur processus.';
      Process@1100281002 : Record 50041;
      TrayLine@1100281003 : Record 50048;
      TempAutoStatus@1100281007 : TEMPORARY Record 50042;
      HideDialogBox@1100281009 : Boolean;

    PROCEDURE SetErrorMsg@1100281012(pRec@1100281000 : Record 5900);
    VAR
      lText@1100281003 : Text[1024];
      lTrayLineCreated@1100281001 : Boolean;
      lTeamCode@1000000001 : Code[10];
      lFilterTeamTrayTask@1000000000 : TEMPORARY Record 50129;
    BEGIN
      lText :=  Text001 + GetRecText;
      //<<IMH04
      lTeamCode := Process."AutoStep Error Tray Code";
      IF lTeamCode = '' THEN BEGIN
        lTeamCode := TrayLineMgt.GetTeamByTask(Process."AutoStep Error Task", lFilterTeamTrayTask, pRec."No.");
      END;

      //IF Process."AutoStep Error Tray Code" <> '' THEN BEGIN
      IF lTeamCode <> '' THEN BEGIN
      //>>IMH04
        CLEAR(TrayLineMgt);
        IF TrayLineMgt.CreateTLFromServHeader(
          //pRec, Process."AutoStep Error Tray Code", Process."AutoStep Error Task", FALSE) THEN BEGIN
          pRec, lTeamCode, Process."AutoStep Error Task", FALSE) THEN BEGIN
      //>>IMH04
          lTrayLineCreated := TRUE;
          TrayLineMgt.GetResultLine(TrayLine);
          TrayLine."Stop Auto Process" := TRUE;
          TrayLine.Description := lText;
          TrayLine."Short Comment" := COPYSTR(GETLASTERRORTEXT,1,MAXSTRLEN(TrayLine."Short Comment"));
          TrayLine.MODIFY(FALSE);
        END;
      END;
      IF Process."AutoStep Error Tray Service" THEN BEGIN
        CLEAR(TrayLineMgt);
        IF TrayLineMgt.CreateTLFromServHeader(
          //<<IMH04
          //pRec, pRec."Default Team Code", Process."AutoStep Error Task", FALSE) THEN BEGIN
          pRec, lTeamCode, Process."AutoStep Error Task", FALSE) THEN BEGIN
          //>>IMH04
          TrayLineMgt.GetResultLine(TrayLine);
          TrayLine.Description := lText;
          TrayLine.MODIFY(FALSE);
        END;
      END;
      IF NOT lTrayLineCreated THEN
        //<<IMH02.ISAT.EBA
        IF NOT HideDialogBox THEN
        //>>IMH02.ISAT.EBA
        MESSAGE(Text001 + GetRecText + GETLASTERRORTEXT); // Affichage sur jnl evt
    END;

    PROCEDURE GetRecText@1100281000() : Text[1024];
    BEGIN
      EXIT("Service Header".TABLECAPTION + ' ' +
           "Service Header"."No." + ' : ');
    END;

    PROCEDURE ErrorTrayLineExist@1100281001() : Boolean;
    BEGIN
      TrayLine.RESET;
      TrayLine.SETCURRENTKEY("Service No.","Service Header No.","Intervention Line No.","Intervention Quote Line No.");
      TrayLine.SETRANGE("Service No.", "Service Header"."Service No.");
      TrayLine.SETRANGE("Service Header No.", "Service Header"."No.");
      TrayLine.SETRANGE("Stop Auto Process", TRUE);
      TrayLine.SETRANGE(Closed, FALSE);
      TrayLine.SETRANGE("Linked To Table", TrayLine."Linked To Table"::ServiceHeader);
      EXIT(NOT TrayLine.ISEMPTY);
    END;

    BEGIN
    {
      /** @r IMH04 @d 26/03/14 @a ISAT.ZW @v IMH6.01.5005 @s Reorganisation DPS @h 5005
          @c Ajout la gestion de team code par defaut */
      /** @r IMH03 @d 05/12/11 @a ISAT.ST @v IMH6.01.102 @s Gestion des statuts @c Param‚trage tache EAI */
      /** @r IMH02 @d 15/11/11 @a ISAT.EBA @v IMH6.01.102 @s Gestion des statuts */
      /** @r IMH01 @d 31/12/10 @a ISAT.ST @v IMH6.01.102 @s Gestion des statuts @c Creation objet */
    }
    END.
  }
  RDLDATA
  {
  }
}