OBJECT Report 50062 Update Provider To Search
{
  OBJECT-PROPERTIES
  {
    Date=14/06/11;
    Time=01:12:02;
    Modified=Yes;
    Version List=IMH6.01;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Update Provider To Search;
               FRA=MAJ comp. g‚o. prest.];
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   ExcludeGenerated := TRUE;
                 END;

  }
  DATAITEMS
  {
    { PROPERTIES
      {
        DataItemTable=Table50000;
        OnPreDataItem=VAR
                        lTime@1100281000 : Time;
                      BEGIN
                        SETRANGE("Black List",FALSE);
                        SETRANGE(Exclusion,FALSE);

                        CurrentCounter := 0;
                        TotalCounter := COUNT;
                        ModuloCounter := ROUND(TotalCounter * 5 / 100,1,'>');
                        Wdialog.OPEN(Text001);
                      END;

        OnAfterGetRecord=VAR
                           lAbilityGeoProviderSetup@1100281000 : Record 50033;
                           lProviderSpecialization@1100281005 : Record 50006;
                           lContactAltAddress@1100281004 : Record 5051;
                           lAbilityGeoProviderSetup2@1100281003 : Record 50033;
                           lEmergency@1100281002 : Boolean;
                           lNotTreat@1100281001 : Boolean;
                         BEGIN
                           VALIDATE(Status,Status::Operational);
                           Enable := TRUE;
                           "Current Interv. Limit Max." := 500;
                           MODIFY;
                           Wdialog.UPDATE(1,"No.");
                           CurrentCounter += 1;
                           IF CurrentCounter MOD ModuloCounter = 0 THEN BEGIN
                             Wdialog.UPDATE(2,ROUND(CurrentCounter / TotalCounter * 9999,1));
                             COMMIT;
                           END;

                           IF UpdateGeoAbility THEN BEGIN
                             lAbilityGeoProviderSetup.SETRANGE("Provider No.","No.");
                             CurrentCounter2 := 0;
                             TotalCounter2 := lAbilityGeoProviderSetup."Count Line";
                             ModuloCounter2 := ROUND(TotalCounter2 * 5 / 100,1,'>');

                             IF lAbilityGeoProviderSetup.FINDSET THEN BEGIN
                               REPEAT
                                 CurrentCounter2 += 1;
                                 IF CurrentCounter2 MOD ModuloCounter2 = 0 THEN BEGIN
                                   Wdialog.UPDATE(3,ROUND(CurrentCounter2 / TotalCounter2 * 9999,1));
                                   COMMIT;
                                 END;

                                 lNotTreat := FALSE;
                                 IF ExcludeGenerated THEN BEGIN
                                   lNotTreat := lAbilityGeoProviderSetup.Generated;
                                 END;

                                 lAbilityGeoProviderSetup2 := lAbilityGeoProviderSetup;
                                 CASE lAbilityGeoProviderSetup."Setup Type" OF
                                   lAbilityGeoProviderSetup."Setup Type"::"City (Distance)" : BEGIN
                                     lContactAltAddress.SETRANGE("Contact No.",Provider."No.");
                                     lContactAltAddress.SETRANGE("Geo. Reference Address",TRUE);
                                     IF lContactAltAddress.FINDFIRST THEN BEGIN
                                       IF lContactAltAddress."Geo. Reference Code" <> '' THEN BEGIN
                                         IF (lAbilityGeoProviderSetup."Start Reference Code" <> lContactAltAddress."Geo. Reference Code") THEN BEGIN
                                           lAbilityGeoProviderSetup.VALIDATE("Start Reference Code",lContactAltAddress."Geo. Reference Code");
                                         END;
                                         lAbilityGeoProviderSetup.VALIDATE(Standard,TRUE);
                                         lAbilityGeoProviderSetup.VALIDATE("Distance (km)",GeoAbilityDistance);

                                         lProviderSpecialization.RESET;
                                         lProviderSpecialization.SETRANGE("Provider No.",Provider."No.");
                                         lProviderSpecialization.SETRANGE(Emergency,TRUE);
                                         IF NOT lProviderSpecialization.ISEMPTY THEN BEGIN
                                           lAbilityGeoProviderSetup.VALIDATE(Emergency,TRUE);
                                           lAbilityGeoProviderSetup.VALIDATE("Emergency Distance (km)",GeoAbilityDistance);
                                         END;
                                         IF (lAbilityGeoProviderSetup2."Start Reference Code" <> lAbilityGeoProviderSetup."Start Reference Code") THEN BEGIN
                                           IF lAbilityGeoProviderSetup.INSERT(TRUE) THEN BEGIN
                                             lAbilityGeoProviderSetup2.DELETE;
                                           END;
                                         END ELSE BEGIN
                                           lAbilityGeoProviderSetup.MODIFY(TRUE);
                                         END;
                                       END;
                                     END;
                                   END;
                                 END;
                                 IF NOT lNotTreat THEN BEGIN
                                   GenerateAbilityGeoProvider(lAbilityGeoProviderSetup);
                                 END;
                               UNTIL lAbilityGeoProviderSetup.NEXT = 0;
                             END;
                           END;
                           Wdialog.UPDATE(3,0);
                         END;

        OnPostDataItem=BEGIN
                         Wdialog.CLOSE;
                       END;

        ReqFilterFields=No.,Post Code,Area Code,IMH Territory Code;
      }
      SECTIONS
      {
      }
       }
  }
  REQUESTFORM
  {
    PROPERTIES
    {
      Width=9020;
      Height=3410;
    }
    CONTROLS
    {
      { 1100281002;CheckBox;3520;110  ;440  ;440  ;InPage=-1;
                                                   ShowCaption=No;
                                                   CaptionML=[ENU=Update Geo. Ability;
                                                              FRA=Mise … jour comp. g‚o.];
                                                   SourceExpr=UpdateGeoAbility;
                                                   OnPush=BEGIN
                                                            IF UpdateGeoAbility THEN BEGIN
                                                              GeoAbilityDistance := 30;
                                                            END;
                                                          END;
                                                           }
      { 1100281003;Label  ;110  ;110  ;3300 ;440  ;ParentControl=1100281002 }
      { 1100281004;TextBox;3520 ;660  ;1700 ;440  ;InPage=-1;
                                                   CaptionML=[ENU=Default Distance (km);
                                                              FRA=Distance par d‚faut (km)];
                                                   SourceExpr=GeoAbilityDistance }
      { 1100281005;Label  ;110  ;660  ;3300 ;440  ;ParentControl=1100281004 }
      { 1100281000;CheckBox;3520;1320 ;440  ;440  ;ShowCaption=No;
                                                   CaptionML=[ENU=Exclude Generated;
                                                              FRA=Exclure ceux g‚n‚r‚s];
                                                   SourceExpr=ExcludeGenerated }
      { 1100281001;Label  ;110  ;1320 ;3300 ;440  ;ParentControl=1100281000 }
    }
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  CODE
  {
    VAR
      Text001@1100281000 : TextConst 'ENU=Processing\Provider #1##### - @2@@@@@@@@@@@@@@@@@\@3@@@@@@@@@@@@@@@@@\@4@@@@@@@@@@@@@@@@@;FRA=Traitement en cours\Prestataire      #1##### - @2@@@@@@@@@@@@@@@@@\MAJ param‚trage comp. g‚o. @3@@@@@@@@@@@@@@@@@\Cr‚ation comp. g‚o.         @4@@@@@@@@@@@@@@@@@';
      AbilityGeoMgt@1100281007 : Codeunit 50011;
      UpdateGeoAbility@1100281001 : Boolean;
      ExcludeGenerated@1100281011 : Boolean;
      GeoAbilityDistance@1100281002 : Integer;
      CurrentCounter@1100281003 : Integer;
      TotalCounter@1100281004 : Integer;
      ModuloCounter@1100281005 : Integer;
      CurrentCounter2@1100281010 : Integer;
      TotalCounter2@1100281009 : Integer;
      ModuloCounter2@1100281008 : Integer;
      Wdialog@1100281006 : Dialog;

    PROCEDURE GenerateAbilityGeoProvider@1100281006(VAR pAbilityGeoProviderSetup@1100281001 : Record 50033);
    VAR
      lAbilityGeoSearchBuffer@1100281002 : TEMPORARY Record 51001;
      lProviderSpecialization@1100281000 : Record 50006;
      lProviderSearchMgt@1100281003 : Codeunit 50000;
    BEGIN
      // Ajoute … la table Ability Geo Provider les enregistrement en fonction d'un cercle … vol d'oiseau.

      IF pAbilityGeoProviderSetup.Standard THEN BEGIN
        lAbilityGeoSearchBuffer.RESET;
        lAbilityGeoSearchBuffer.DELETEALL;
        CASE pAbilityGeoProviderSetup."Setup Type" OF
          pAbilityGeoProviderSetup."Setup Type":: "City (Distance)" : BEGIN
            lProviderSearchMgt.GetInseeByDistanceKm(
              pAbilityGeoProviderSetup."Start Reference Code",
              pAbilityGeoProviderSetup."Distance (km)",
              lAbilityGeoSearchBuffer,
              FALSE);
          END;
          pAbilityGeoProviderSetup."Setup Type"::Area : BEGIN
            AbilityGeoMgt.GetInseeByArea(lAbilityGeoSearchBuffer,pAbilityGeoProviderSetup."Start Reference Code");
          END;
          pAbilityGeoProviderSetup."Setup Type"::Territory : BEGIN
            AbilityGeoMgt.GetInseeByTerritory(lAbilityGeoSearchBuffer,pAbilityGeoProviderSetup."Start Reference Code");
          END;
        END;
        ManageAbilityGeoProvider(
          lAbilityGeoSearchBuffer,
          pAbilityGeoProviderSetup."Provider No.",
          pAbilityGeoProviderSetup."Specialization Code",
          pAbilityGeoProviderSetup."Start Reference Code",
          FALSE,
          pAbilityGeoProviderSetup."Distance (km)",
          pAbilityGeoProviderSetup."Setup Type");
      END;
      IF pAbilityGeoProviderSetup.Emergency THEN BEGIN
        lAbilityGeoSearchBuffer.RESET;
        lAbilityGeoSearchBuffer.DELETEALL;
        CASE pAbilityGeoProviderSetup."Setup Type" OF
          pAbilityGeoProviderSetup."Setup Type":: "City (Distance)" : BEGIN
            lProviderSearchMgt.GetInseeByDistanceKm(
              pAbilityGeoProviderSetup."Start Reference Code",
              pAbilityGeoProviderSetup."Emergency Distance (km)",
              lAbilityGeoSearchBuffer,
              FALSE);
          END;
          pAbilityGeoProviderSetup."Setup Type"::Area : BEGIN
            AbilityGeoMgt.GetInseeByArea(lAbilityGeoSearchBuffer,pAbilityGeoProviderSetup."Start Reference Code");
          END;
          pAbilityGeoProviderSetup."Setup Type"::Territory : BEGIN
            AbilityGeoMgt.GetInseeByTerritory(lAbilityGeoSearchBuffer,pAbilityGeoProviderSetup."Start Reference Code");
          END;
        END;
        ManageAbilityGeoProvider(
          lAbilityGeoSearchBuffer,
          pAbilityGeoProviderSetup."Provider No.",
          pAbilityGeoProviderSetup."Specialization Code",
          pAbilityGeoProviderSetup."Start Reference Code",
          TRUE,
          pAbilityGeoProviderSetup."Emergency Distance (km)",
          pAbilityGeoProviderSetup."Setup Type");
      END;

      pAbilityGeoProviderSetup.Generated := pAbilityGeoProviderSetup.IsGenerated; //IMH06
      pAbilityGeoProviderSetup.MODIFY;
    END;

    PROCEDURE ManageAbilityGeoProvider@1100281002(VAR pAbilityGeoSearchBuffer@1100281001 : Record 51001;pProviderNo@1100281005 : Code[20];pSpecializationCode@1100281006 : Code[10];pStartRefGeoCode@1100281007 : Code[10];pEmergency@1100281008 : Boolean;pDistance@1100281004 : Integer;pSetupType@1100281011 : Option);
    VAR
      lAbilityGeoProvider@1100281003 : Record 50016;
      lProviderSpecialization@1100281002 : Record 50006;
      lCurrentCounter@1100281000 : Integer;
      lTotalCounter@1100281010 : Integer;
      lModuloCounter@1100281009 : Integer;
    BEGIN
      // Cr‚e ou modifie la comp‚tence g‚ographique

      IF GUIALLOWED THEN BEGIN
        lCurrentCounter := 0;
        lTotalCounter := pAbilityGeoSearchBuffer.COUNT;
        lModuloCounter := ROUND(lTotalCounter * 5 / 100,1,'>');
      END;
      IF pAbilityGeoSearchBuffer.FINDSET THEN BEGIN
        REPEAT
          lCurrentCounter += 1;
          IF lCurrentCounter MOD lModuloCounter = 1 THEN BEGIN
            Wdialog.UPDATE(4,ROUND(lCurrentCounter / lTotalCounter * 9999,1));
          END;

          lProviderSpecialization.SETRANGE("Provider No.",pProviderNo);
          IF pSpecializationCode <> '' THEN BEGIN
            lProviderSpecialization.SETRANGE("Specialization Code",pSpecializationCode);
          END;
          IF lProviderSpecialization.FINDSET THEN BEGIN
            REPEAT
              // mise … jour ‚ventuelle des donn‚es existantes
              lAbilityGeoProvider.SETRANGE("Provider No.",pProviderNo);
              lAbilityGeoProvider.SETRANGE("Start Reference Code",pStartRefGeoCode);
              lAbilityGeoProvider.SETRANGE("Specialization Code",pSpecializationCode);
              lAbilityGeoProvider.SETFILTER("Distance (km)",'>%1',pDistance);
              lAbilityGeoProvider.SETRANGE("Setup Type",pSetupType);
              IF lAbilityGeoProvider.FINDSET THEN BEGIN
                REPEAT
                  IF NOT pEmergency THEN BEGIN
                    lAbilityGeoProvider.Standard := FALSE;
                  END ELSE BEGIN
                    lAbilityGeoProvider.Emergency := FALSE;
                  END;
                  IF NOT lAbilityGeoProvider.Standard AND NOT lAbilityGeoProvider.Emergency THEN BEGIN
                    lAbilityGeoProvider.DELETE(TRUE);
                  END ELSE BEGIN
                    lAbilityGeoProvider.MODIFY(TRUE);
                  END;
                UNTIL lAbilityGeoProvider.NEXT = 0;
              END;
              // ouverture de nouvelles lignes si besoin
              IF NOT lAbilityGeoProvider.GET(
                pProviderNo,
                pStartRefGeoCode,
                pAbilityGeoSearchBuffer."Ref. Geo. Code",
                lProviderSpecialization."Specialization Code")
              THEN BEGIN
                lAbilityGeoProvider.INIT;
                lAbilityGeoProvider.VALIDATE("Provider No.",pProviderNo);
                lAbilityGeoProvider.VALIDATE("Setup Type",pSetupType);
                lAbilityGeoProvider.VALIDATE("Start Reference Code",pStartRefGeoCode);
                lAbilityGeoProvider.VALIDATE("End Ref. Geo. Code",pAbilityGeoSearchBuffer."Ref. Geo. Code");
                lAbilityGeoProvider.VALIDATE("Main Specialization",lProviderSpecialization."Main Specialization");
                lAbilityGeoProvider.VALIDATE("Specialization Code",lProviderSpecialization."Specialization Code");
                lAbilityGeoProvider.VALIDATE("Distance (km)",ROUND(pAbilityGeoSearchBuffer.Distance,1));
                IF NOT pEmergency THEN BEGIN
                  lAbilityGeoProvider.Standard := TRUE;
                END;
                IF pEmergency THEN BEGIN
                  lAbilityGeoProvider.Emergency := lProviderSpecialization.Emergency;
                END;
                lAbilityGeoProvider.INSERT(TRUE);
              END ELSE BEGIN
                IF NOT pEmergency THEN BEGIN
                  lAbilityGeoProvider.Standard := TRUE;
                END;
                IF pEmergency THEN BEGIN
                  lAbilityGeoProvider.Emergency := lProviderSpecialization.Emergency;
                END;
                lAbilityGeoProvider.MODIFY(TRUE);
              END;
            UNTIL lProviderSpecialization.NEXT = 0;
          END;
        UNTIL pAbilityGeoSearchBuffer.NEXT = 0;
      END ELSE BEGIN
        // Cas o— rien n'est trouv‚
        lProviderSpecialization.SETRANGE("Provider No.",pProviderNo);
        IF pSpecializationCode <> '' THEN BEGIN
          lProviderSpecialization.SETRANGE("Specialization Code",pSpecializationCode);
        END;
        IF lProviderSpecialization.FINDSET THEN BEGIN
          REPEAT
            // mise … jour ‚ventuelle des donn‚es existantes
            lAbilityGeoProvider.SETRANGE("Provider No.",pProviderNo);
            lAbilityGeoProvider.SETRANGE("Start Reference Code",pStartRefGeoCode);
            lAbilityGeoProvider.SETRANGE("Setup Type",pSetupType);
            IF pSpecializationCode <> '' THEN BEGIN
              lAbilityGeoProvider.SETRANGE("Specialization Code",pSpecializationCode);
            END;
            IF lAbilityGeoProvider.FINDSET THEN BEGIN
              REPEAT
                IF NOT pEmergency THEN BEGIN
                  lAbilityGeoProvider.Standard := FALSE;
                END ELSE BEGIN
                  lAbilityGeoProvider.Emergency := FALSE;
                END;
                IF NOT lAbilityGeoProvider.Standard AND NOT lAbilityGeoProvider.Emergency THEN BEGIN
                  lAbilityGeoProvider.DELETE(TRUE);
                END ELSE BEGIN
                  lAbilityGeoProvider.MODIFY(TRUE);
                END;
              UNTIL lAbilityGeoProvider.NEXT = 0;
            END;
            // ouverture de nouvelles lignes si besoin
            IF NOT lAbilityGeoProvider.GET(
              pProviderNo,
              pStartRefGeoCode,
              pStartRefGeoCode,
              lProviderSpecialization."Specialization Code")
            THEN BEGIN
              lAbilityGeoProvider.INIT;
              lAbilityGeoProvider.VALIDATE("Provider No.",pProviderNo);
              lAbilityGeoProvider.VALIDATE("Setup Type",pSetupType);
              lAbilityGeoProvider.VALIDATE("Start Reference Code",pStartRefGeoCode);
              lAbilityGeoProvider.VALIDATE("End Ref. Geo. Code",pStartRefGeoCode);
              lAbilityGeoProvider.VALIDATE("Main Specialization",lProviderSpecialization."Main Specialization");
              lAbilityGeoProvider.VALIDATE("Specialization Code",lProviderSpecialization."Specialization Code");
              lAbilityGeoProvider.VALIDATE("Distance (km)",0);
              IF NOT pEmergency THEN BEGIN
                lAbilityGeoProvider.Standard := TRUE;
              END;
              IF pEmergency THEN BEGIN
                lAbilityGeoProvider.Emergency := lProviderSpecialization.Emergency;
              END;
              lAbilityGeoProvider.INSERT(TRUE);
            END;
          UNTIL lProviderSpecialization.NEXT = 0;
        END;
      END;

      Wdialog.UPDATE(4,0);
    END;

    BEGIN
    {
      /** @r IMH01 @d 05/03/11 @a ISAT.PC @v IMH6.01.125 @s Gestion comp‚tence g‚o.
          @c Permet de mettre un prestataire dans les conditions de possibilit‚ de sortie en recherche */
    }
    END.
  }
  RDLDATA
  {
  }
}