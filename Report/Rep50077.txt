OBJECT Report 50077 Report 512 : Class. scoring
{
  OBJECT-PROPERTIES
  {
    Date=15/10/13;
    Time=18:20:41;
    Modified=Yes;
    Version List=IMH6.01.08,IMH6.01.25;
  }
  PROPERTIES
  {
    CaptionML=FRA=Report 512 : Classement selon scoring;
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  BeginDate := CALCDATE('<-1Y>', WORKDATE) + 1;
                END;

  }
  DATAITEMS
  {
    { PROPERTIES
      {
        DataItemTable=Table50000;
        OnPreDataItem=BEGIN
                        ProviderFilter := GETFILTERS;
                      END;

        OnAfterGetRecord=VAR
                           lProviderScoringLedgerEntry@1100281002 : Record 50088;
                           lInterventionLine@1100281001 : Record 50075;
                           lNbInterv@1100281000 : Integer;
                         BEGIN
                           TempProvider := Provider;
                           TempProvider.INSERT;
                         END;

        ReqFilterFields=IMH Territory Code,Regional Coordinator;
      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=12000;
            SectionHeight=846;
          }
          CONTROLS
          {
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemTable=Table50000;
        DataItemTableView=SORTING(No.);
        DataItemVarName=Provider2;
        OnPreDataItem=BEGIN
                        EntryNo := 0;
                        TotalCpt := COUNT;
                        CurrCpt := 0;
                        Cpt := 0;

                        Window.OPEN(Text010);
                      END;

        OnAfterGetRecord=VAR
                           lProviderScoringLedgerEntry@1100281000 : Record 50088;
                           lInterventionLine@1100281001 : Record 50075;
                           lNbInterv@1100281002 : Integer;
                         BEGIN
                           CurrCpt += 1;
                           IF CurrCpt >= 10 THEN BEGIN
                             Cpt += CurrCpt;
                             Window.UPDATE(1,ROUND(Cpt / TotalCpt * 9999,1));
                             CurrCpt := 0;
                           END;

                           EntryNo := EntryNo + 1;

                           lNbInterv := 0;
                           lInterventionLine.SETCURRENTKEY("Provider No.");
                           lInterventionLine.SETRANGE("Provider No.","No.");
                           lInterventionLine.SETFILTER("Intervention Status",'<>%1',lInterventionLine."Intervention Status"::Cancel);
                           lInterventionLine.SETRANGE("Assigned Date",BeginDate,WORKDATE);
                           IF NOT lInterventionLine.ISEMPTY THEN
                             lNbInterv := lInterventionLine.COUNT;

                           lProviderScoringLedgerEntry.SETRANGE("Provider No.","No.");
                           lProviderScoringLedgerEntry.SETRANGE("Creation Date",CREATEDATETIME(BeginDate,0T),CREATEDATETIME(WORKDATE,0T));//IMH01
                           IF NOT lProviderScoringLedgerEntry.FINDLAST THEN
                            lProviderScoringLedgerEntry.INIT;

                           ReportingBuffer.INIT;
                           ReportingBuffer."Code 1" := "IMH Territory Code";
                           ReportingBuffer."Decimal 1" := lProviderScoringLedgerEntry."Global Note";
                           ReportingBuffer."Entry No." := EntryNo;
                           ReportingBuffer."Data Code 1" := "No.";
                           ReportingBuffer."Data Text 1" := Name;
                           ReportingBuffer."Data Integer 1" := lNbInterv;
                           ReportingBuffer."Data Amount 1" := lProviderScoringLedgerEntry."Disponibility Note";
                           ReportingBuffer."Data Amount 2" := lProviderScoringLedgerEntry."Average Cost Note";
                           ReportingBuffer."Data Amount 3" := lProviderScoringLedgerEntry."Average Time Note";
                           ReportingBuffer."Data Amount 4" := lProviderScoringLedgerEntry."Time Note";
                           ReportingBuffer."Data Amount 5" := lProviderScoringLedgerEntry."Quality Control Note";
                           ReportingBuffer."Data Amount 6" := lProviderScoringLedgerEntry."Claim Note";
                           ReportingBuffer."Data Amount 7" := lProviderScoringLedgerEntry."Global Note";

                           IF TempProvider.GET("No.") THEN BEGIN
                             ReportingBuffer.INSERT;

                             TempTerritory.Code := "IMH Territory Code";
                             IF TempTerritory.INSERT THEN;
                           END;


                           TotalReportingBuffer.RESET;
                           TotalReportingBuffer.SETRANGE("Code 1","IMH Territory Code");
                           IF TotalReportingBuffer.FINDFIRST THEN BEGIN
                             TotalReportingBuffer."Data Integer 1" += ReportingBuffer."Data Integer 1";
                             TotalReportingBuffer."Data Amount 7" += ReportingBuffer."Data Amount 7" * ReportingBuffer."Data Integer 1";
                             TotalReportingBuffer.MODIFY;
                           END ELSE BEGIN
                             TotalReportingBuffer.INIT;
                             TotalReportingBuffer."Code 1" := "IMH Territory Code";
                             TotalReportingBuffer."Data Integer 1" := ReportingBuffer."Data Integer 1";
                             TotalReportingBuffer."Data Amount 7" := ReportingBuffer."Data Amount 7" * ReportingBuffer."Data Integer 1";
                             TotalReportingBuffer.INSERT;
                           END;
                         END;

        OnPostDataItem=BEGIN
                         Window.CLOSE;

                         ExportExcel;
                       END;

      }
      SECTIONS
      {
      }
       }
  }
  REQUESTFORM
  {
    PROPERTIES
    {
      Width=6710;
      Height=1760;
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1100281000;TextBox;3630 ;220  ;1700 ;440  ;InPage=-1;
                                                   CaptionML=[ENU=Max nb provider by territory;
                                                              FRA=Nb. prestataire max par zone];
                                                   SourceExpr=ProviderMaxNb }
      { 1100281001;Label  ;220  ;220  ;3300 ;440  ;ParentControl=1100281000 }
      { 1100281004;TextBox;3630 ;880  ;2530 ;440  ;InPage=-1;
                                                   CaptionML=[ENU=Display Sort;
                                                              FRA=Ordre d'affichage];
                                                   OptionCaptionML=[ENU=The Worst,The Best;
                                                                    FRA=Les moins bons,Les meilleurs];
                                                   OptionString=The Worst,The Best;
                                                   SourceExpr=DisplaySort }
      { 1100281005;Label  ;220  ;880  ;3300 ;440  ;ParentControl=1100281004 }
    }
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1100281000;;Container;
                  ContainerType=ContentArea }

      { 1100281001;1;Group  ;
                  CaptionML=[ENU=Options;
                             FRA=Options];
                  GroupType=Group }

      { 1100281002;2;Field  ;
                  CaptionML=[ENU=Max nb provider by territory;
                             FRA=Nb. prestataire max par zone];
                  SourceExpr=ProviderMaxNb }

      { 1100281003;2;Field  ;
                  CaptionML=[ENU=Display Sort;
                             FRA=Ordre d'affichage];
                  OptionCaptionML=[ENU=The Worst,The Best;
                                   FRA=Les moins bons,Les meilleurs];
                  SourceExpr=DisplaySort }

    }
  }
  CODE
  {
    VAR
      ExcelBuffer@1000000000 : TEMPORARY Record 370;
      TempTerritory@1100281010 : TEMPORARY Record 286;
      TempProvider@1100281036 : TEMPORARY Record 50000;
      ReportingBuffer@1100281008 : TEMPORARY Record 50143;
      TotalReportingBuffer@1100281007 : TEMPORARY Record 50143;
      ExcelTemplatePath@1100281021 : Text[250];
      ExcelSheetName@1100281020 : Text[50];
      StartRowNo@1100281019 : Integer;
      StartColNo@1100281018 : Integer;
      RowNo@1100281032 : Integer;
      ColNo@1100281031 : Integer;
      TextDate@1000000024 : Text[30];
      ExcelFile@1000000018 : Text[250];
      Text001@1100281001 : TextConst 'ENU=IMH Country %1;FRA=Zone IMH %1';
      Text002@1100281000 : TextConst 'ENU=Area %1;FRA=D‚partement %1';
      Text003@1100281002 : TextConst 'ENU=Status;FRA=Statut';
      Text005@1100281004 : TextConst 'ENU=Provider DGS;FRA=R‚seau DGS';
      Text006@1100281005 : TextConst 'ENU=Global;FRA=R‚seau global';
      Text007@1100281011 : TextConst 'ENU=Average national;FRA=Moyenne nationale';
      Text008@1100281012 : TextConst 'ENU=Average regional;FRA=Moyenne zone';
      Text010@1100281013 : TextConst 'FRA=Avancement\@1@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@';
      Text0014@1000000015 : TextConst 'ENU=Scoring Classifying;FRA=Classement selon scoring';
      Text0015@1000000016 : TextConst 'FRA=Filtres :';
      ProviderFilter@1000000017 : Text[200];
      ProviderMaxNb@1100281006 : Integer;
      BeginDate@1100281009 : Date;
      Window@1100281017 : Dialog;
      TotalCpt@1100281016 : Integer;
      Cpt@1100281015 : Integer;
      CurrCpt@1100281014 : Integer;
      Text030@1100281033 : TextConst 'FRA=Nø prestataire';
      Text031@1100281022 : TextConst 'FRA=Nom du prestataire';
      Text032@1100281023 : TextConst 'FRA=Nombre d''intervention';
      Text033@1100281024 : TextConst 'FRA=Note disponibilit‚';
      Text034@1100281025 : TextConst 'FRA=Note co–ts moyens';
      Text035@1100281026 : TextConst 'FRA=Note d‚lais moyens';
      Text036@1100281027 : TextConst 'FRA=Note respect des d‚lais';
      Text037@1100281028 : TextConst 'FRA=Note qualit‚';
      Text038@1100281029 : TextConst 'FRA=Note taux r‚clamation';
      Text039@1100281030 : TextConst 'FRA=Note globale';
      EntryNo@1100281034 : Integer;
      DisplaySort@1100281035 : 'The Worst,The Best';
      Text040@1100281003 : TextConst 'FRA=Total';

    PROCEDURE InitValues@1100281000();
    VAR
      lReportSetup@1100281000 : Record 50115;
      lFound@1100281001 : Boolean;
      lReportID@1100281002 : Integer;
    BEGIN
      lReportID := 50077;
      lFound := lReportSetup.GET(lReportSetup."Object Type"::Report,lReportID,USERID);
      IF NOT lFound THEN
        lFound := lReportSetup.GET(lReportSetup."Object Type"::Report,lReportID,'');

      IF lFound THEN BEGIN
        ExcelTemplatePath := lReportSetup."Excel Template Path";
        ExcelSheetName := lReportSetup."Excel Template Tabs";
        StartRowNo := lReportSetup."First Line";
        StartColNo := lReportSetup."First Column";
      END ELSE BEGIN
        ExcelTemplatePath := '';
        ExcelSheetName  := 'Page1';
      END;

      IF StartRowNo <= 0 THEN
        StartRowNo := 8;

      IF StartColNo <= 0 THEN
        StartColNo := 1;
    END;

    PROCEDURE ExportExcel@1100281005();
    VAR
      lTotalReportingBuffer@1100281006 : TEMPORARY Record 50143;
      lDec@1100281000 : Decimal;
      lCpt@1100281001 : Integer;
      lNationalAverage@1100281003 : Decimal;
      lTerritoryAverage@1100281002 : Decimal;
      lTotalInterv@1100281004 : Decimal;
      lTotalNote@1100281005 : Decimal;
    BEGIN
      InitValues;

      IF ExcelTemplatePath <> '' THEN BEGIN
        ExcelBuffer.OpenBookWithoutSheet(ExcelTemplatePath);
      END ELSE BEGIN
        ExcelBuffer.CreateBookWithoutSheet;
      END;


      TotalReportingBuffer.RESET;
      IF TotalReportingBuffer.FINDSET THEN BEGIN
        REPEAT
          lTotalInterv := lTotalInterv + TotalReportingBuffer."Data Integer 1";
          lTotalNote := lTotalNote + TotalReportingBuffer."Data Amount 7";
        UNTIL TotalReportingBuffer.NEXT = 0;

        IF lTotalInterv <> 0 THEN
          lNationalAverage := ROUND(lTotalNote / lTotalInterv,0.01)
        ELSE
          lNationalAverage := 0;
      END;

      IF TempTerritory.FINDSET THEN BEGIN
        REPEAT

          TotalReportingBuffer.RESET;
          TotalReportingBuffer.SETRANGE("Code 1",TempTerritory.Code);
          TotalReportingBuffer.FINDFIRST;
          IF TotalReportingBuffer."Data Integer 1" <> 0 THEN
            lTerritoryAverage := ROUND(TotalReportingBuffer."Data Amount 7" / TotalReportingBuffer."Data Integer 1",0.01)
          ELSE
            lTerritoryAverage := 0;

          ExcelBuffer.DELETEALL;

          //InsertRow(1,1,Text0014,'');
          InsertRow(2,1,Text0015,'');
          InsertRow(2,2,FORMAT(ProviderFilter),'');

          InsertRow(3,1,Text007,'');
          InsertRow(3,2,FORMAT(lNationalAverage),'');

          InsertRow(4,1,Text008,'');
          InsertRow(4,2,FORMAT(lTerritoryAverage),'');

          InsertSheetHeader;

          CLEAR(lTotalReportingBuffer);
          lCpt := 0;

          IF DisplaySort = DisplaySort::"The Best" THEN
            ReportingBuffer.ASCENDING(FALSE);
          ReportingBuffer.SETRANGE("Code 1", TempTerritory.Code);
          IF ReportingBuffer.FIND('-') THEN BEGIN
            REPEAT
              RowNo := RowNo + 1;
              InsertRow(RowNo,ColNo,ReportingBuffer."Data Code 1",'');
              InsertRow(RowNo,ColNo + 1,ReportingBuffer."Data Text 1",'');
              InsertRow(RowNo,ColNo + 2,FORMAT(ReportingBuffer."Data Integer 1"),'');
              InsertRow(RowNo,ColNo + 3,FORMAT(ROUND(ReportingBuffer."Data Amount 1",0.01)),'');
              InsertRow(RowNo,ColNo + 4,FORMAT(ROUND(ReportingBuffer."Data Amount 2",0.01)),'');
              InsertRow(RowNo,ColNo + 5,FORMAT(ROUND(ReportingBuffer."Data Amount 3",0.01)),'');
              InsertRow(RowNo,ColNo + 6,FORMAT(ROUND(ReportingBuffer."Data Amount 4",0.01)),'');
              InsertRow(RowNo,ColNo + 7,FORMAT(ROUND(ReportingBuffer."Data Amount 5",0.01)),'');
              InsertRow(RowNo,ColNo + 8,FORMAT(ROUND(ReportingBuffer."Data Amount 6",0.01)),'');
              InsertRow(RowNo,ColNo + 9,FORMAT(ROUND(ReportingBuffer."Data Amount 7",0.01)),'');

              lTotalReportingBuffer."Data Integer 1" += ReportingBuffer."Data Integer 1";
              lTotalReportingBuffer."Data Amount 1" += ReportingBuffer."Data Amount 1" * ReportingBuffer."Data Integer 1";
              lTotalReportingBuffer."Data Amount 2" += ReportingBuffer."Data Amount 2" * ReportingBuffer."Data Integer 1";
              lTotalReportingBuffer."Data Amount 3" += ReportingBuffer."Data Amount 3" * ReportingBuffer."Data Integer 1";
              lTotalReportingBuffer."Data Amount 4" += ReportingBuffer."Data Amount 4" * ReportingBuffer."Data Integer 1";
              lTotalReportingBuffer."Data Amount 5" += ReportingBuffer."Data Amount 5" * ReportingBuffer."Data Integer 1";
              lTotalReportingBuffer."Data Amount 6" += ReportingBuffer."Data Amount 6" * ReportingBuffer."Data Integer 1";
              lTotalReportingBuffer."Data Amount 7" += ReportingBuffer."Data Amount 7" * ReportingBuffer."Data Integer 1";

              lCpt := lCpt + 1;
            UNTIL (ReportingBuffer.NEXT = 0) OR ((ProviderMaxNb <> 0) AND (lCpt >= ProviderMaxNb)) ;
          END;

          //Total
          RowNo := RowNo + 1;
          InsertRow(RowNo,ColNo,Text040,'');
          InsertRow(RowNo,ColNo + 1,FORMAT(lCpt),'');
          InsertRow(RowNo,ColNo + 2,FORMAT(lTotalReportingBuffer."Data Integer 1"),'');
          IF lTotalReportingBuffer."Data Integer 1" <> 0 THEN BEGIN
            InsertRow(RowNo,ColNo + 3,
              FORMAT(ROUND(lTotalReportingBuffer."Data Amount 1" / lTotalReportingBuffer."Data Integer 1", 0.01)),'');
            InsertRow(RowNo,ColNo + 4,
              FORMAT(ROUND(lTotalReportingBuffer."Data Amount 2" / lTotalReportingBuffer."Data Integer 1", 0.01)),'');
            InsertRow(RowNo,ColNo + 5,
              FORMAT(ROUND(lTotalReportingBuffer."Data Amount 3" / lTotalReportingBuffer."Data Integer 1", 0.01)),'');
            InsertRow(RowNo,ColNo + 6,
              FORMAT(ROUND(lTotalReportingBuffer."Data Amount 4" / lTotalReportingBuffer."Data Integer 1", 0.01)),'');
            InsertRow(RowNo,ColNo + 7,
              FORMAT(ROUND(lTotalReportingBuffer."Data Amount 5" / lTotalReportingBuffer."Data Integer 1", 0.01)),'');
            InsertRow(RowNo,ColNo + 8,
              FORMAT(ROUND(lTotalReportingBuffer."Data Amount 6" / lTotalReportingBuffer."Data Integer 1", 0.01)),'');
            InsertRow(RowNo,ColNo + 9,
              FORMAT(ROUND(lTotalReportingBuffer."Data Amount 7" / lTotalReportingBuffer."Data Integer 1", 0.01)),'');
          END;

          IF TempTerritory.Code <> '' THEN
            ExcelSheetName := TempTerritory.Code
          ELSE
            ExcelSheetName  := 'Page1';
          IF ExcelTemplatePath <> '' THEN BEGIN
            IF ExcelBuffer.GetSheet(ExcelSheetName) THEN BEGIN
              ExcelBuffer.CreateSheet(ExcelSheetName,ExcelSheetName,'','');
            END ELSE
              ExcelBuffer.AddSheet(ExcelSheetName,ExcelSheetName,'','');
          END ELSE
            ExcelBuffer.AddSheet(ExcelSheetName,ExcelSheetName,'','');
        UNTIL TempTerritory.NEXT = 0;
      END;

      ViewExcel;
    END;

    PROCEDURE InsertSheetHeader@1100281006();
    BEGIN

      RowNo := StartRowNo;
      ColNo := StartColNo;

      InsertRow(RowNo,ColNo,Text030,'');
      InsertRow(RowNo,ColNo + 1,Text031,'');
      InsertRow(RowNo,ColNo + 2,Text032,'');
      InsertRow(RowNo,ColNo + 3,Text033,'');
      InsertRow(RowNo,ColNo + 4,Text034,'');
      InsertRow(RowNo,ColNo + 5,Text035,'');
      InsertRow(RowNo,ColNo + 6,Text036,'');
      InsertRow(RowNo,ColNo + 7,Text037,'');
      InsertRow(RowNo,ColNo + 8,Text038,'');
      InsertRow(RowNo,ColNo + 9,Text039,'');
    END;

    PROCEDURE InsertRow@1000000003(RowNo@1000000000 : Integer;ColumnNo@1000000001 : Integer;CellValue@1000000002 : Text[250];NbFormat@1000000003 : Text[30]);
    BEGIN
      ExcelBuffer.INIT;
      ExcelBuffer.VALIDATE("Row No.",RowNo);
      ExcelBuffer.VALIDATE("Column No.",ColumnNo);
      ExcelBuffer."Cell Value as Text" := CellValue;
      ExcelBuffer.NumberFormat := NbFormat;
      ExcelBuffer.Formula := '';
      ExcelBuffer.INSERT;
    END;

    PROCEDURE ViewExcel@1100281001();
    BEGIN
      ExcelBuffer.GiveUserControl;
      CLEAR(ExcelBuffer);
    END;

    PROCEDURE CreateExcelBuffer@1000000004();
    BEGIN
      ExcelBuffer.DELETEALL;
      CLEAR(ExcelBuffer);
    END;

    BEGIN
    {
      /** @r IMH02 @d 15/10/13 @a ISAT.ST @v IMH6.01.353 @s Reorganisation region IMH @h 4760 @c Renommage CR / AR / R‚gion */
      /** @r IMH01 @d 01/02/12 @a ISAT.LLT @v IMH6.01.020 @s Gestion du service @h mantis 1791 */
    }
    END.
  }
  RDLDATA
  {
  }
}