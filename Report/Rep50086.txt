OBJECT Report 50086 Report 51 : Taux de carence
{
  OBJECT-PROPERTIES
  {
    Date=15/10/13;
    Time=18:21:03;
    Modified=Yes;
    Version List=IMH6.01.08;
  }
  PROPERTIES
  {
    CaptionML=FRA=Report 51 : Taux de carence;
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   ProviderSetup.GET;
                 END;

    OnPreReport=BEGIN
                  Filters := "Post Code".GETFILTERS + ' ' + "Service Header".GETFILTERS;
                  IMHTerritoryFilter := "Post Code".GETFILTER("IMH Territory Code");
                  AreaFilter := "Post Code".GETFILTER("Area Code");
                  CorporateFilter := "Service Header".GETFILTER("Corporate No.");
                  ServOrderTypeFilter := "Service Header".GETFILTER("Service Order Type");

                  IF StartYear <> 0 THEN
                    StartDate := CREATEDATETIME(DMY2DATE(1,1,StartYear),0T);

                  IF EndYear <> 0 THEN
                    EndDate := CREATEDATETIME(DMY2DATE(31,12,EndYear),235959T);
                END;

  }
  DATAITEMS
  {
    { PROPERTIES
      {
        DataItemTable=Table225;
        OnPreDataItem=BEGIN
                        CurrReport.BREAK;
                      END;

        ReqFilterFields=IMH Territory Code,Area Code;
      }
      SECTIONS
      {
      }
       }
    { PROPERTIES
      {
        DataItemTable=Table5900;
        DataItemTableView=SORTING(Document Type,No.)
                          WHERE(Document Type=CONST(Invoice));
        OnPreDataItem=BEGIN
                        IF CorporateFilter <> '' THEN
                          "Service Header".SETCURRENTKEY("Corporate No.","Service Order Type","No.")
                        ELSE IF ServOrderTypeFilter <> '' THEN
                          "Service Header".SETCURRENTKEY("Service Order Type",Status);

                        IF EndDate <> 0DT THEN
                          SETRANGE("Creation Date",StartDate,EndDate)
                        ELSE
                          SETFILTER("Creation Date",'%1..',StartDate);

                        TotalCpt := COUNT;
                        CurrCpt := 0;
                        Cpt := 0;
                        Window.OPEN(Text010);
                      END;

        OnAfterGetRecord=VAR
                           lLevel@1100281000 : Option;
                         BEGIN

                           CurrCpt += 1;
                           IF CurrCpt >= 10 THEN BEGIN
                             Cpt += CurrCpt;
                             Window.UPDATE(1,ROUND(Cpt / TotalCpt * 9999,1));
                             CurrCpt := 0;
                           END;

                           IF (IMHTerritoryFilter <> '') OR (AreaFilter <> '') THEN BEGIN
                             PostCode.RESET;
                             PostCode.SETRANGE(Code,"Ship-to Post Code");
                             PostCode.SETRANGE(City,"Ship-to City");
                             IF IMHTerritoryFilter <> '' THEN
                               PostCode.SETFILTER("IMH Territory Code",IMHTerritoryFilter);
                             IF AreaFilter <> '' THEN
                               PostCode.SETFILTER("Area Code",AreaFilter);
                             IF PostCode.ISEMPTY THEN
                               CurrReport.SKIP;
                           END;

                           IF NOT PostCode.GET("Ship-to Post Code","Ship-to City") THEN
                             CurrReport.SKIP;

                           CASE GroupBy OF
                             GroupBy::"IMH Territory" :
                               BEGIN
                                 Code1 := PostCode."IMH Territory Code";
                                 Code2 := '';
                               END;
                             GroupBy::"Area&Spec" :
                               BEGIN
                                 Code1 := PostCode."Area Code";
                                 Code2 := GetSpecialityCode;
                               END;
                             GroupBy::Corporate :
                               BEGIN
                                 Code1 := "Corporate No.";
                                 Code2 := '';
                               END;
                             GroupBy::"Service Order Type" :
                               BEGIN
                                 Code1 := "Service Order Type";
                                 Code2 := '';
                               END;
                             GroupBy::"Corporate&ServOrderType" :
                               BEGIN
                                 Code1 := "Corporate No.";
                                 Code2 := "Service Order Type";
                               END;
                           END;

                           NotFoundNoEmerg := 0;
                           NotFoundEmerg := 0;
                           NbDeprivation := 0;

                           TrayLine.SETCURRENTKEY("Service No.","Service Header No.");
                           TrayLine.SETRANGE("Service No.","Service No.");
                           TrayLine.SETRANGE("Service Header No.","No.");
                           IF TrayLine.FINDSET THEN
                             REPEAT
                               CASE TrayLine."Task Code" OF
                                 ProviderSetup."Non Emerg.Not Found Prov. Task" : NotFoundNoEmerg += 1;
                                 ProviderSetup."Emerg. Not Found Prov. Task" : NotFoundEmerg += 1;
                                 ProviderSetup."Deprivation Task Code" : NbDeprivation += 1;
                               END;
                             UNTIL TrayLine.NEXT = 0;

                           TrayLineHistory.SETCURRENTKEY("Service No.","Service Header No.");
                           TrayLineHistory.SETRANGE("Service No.","Service No.");
                           TrayLineHistory.SETRANGE("Service Header No.","No.");
                           IF TrayLineHistory.FINDSET THEN
                             REPEAT
                               CASE TrayLineHistory."Task Code" OF
                                 ProviderSetup."Non Emerg.Not Found Prov. Task" : NotFoundNoEmerg += 1;
                                 ProviderSetup."Emerg. Not Found Prov. Task" : NotFoundEmerg += 1;
                                 ProviderSetup."Deprivation Task Code" : NbDeprivation += 1;
                               END;
                             UNTIL TrayLineHistory.NEXT = 0;

                           TempBuffer.RESET;
                           TempBuffer.SETRANGE("Code 1",Code1);
                           TempBuffer.SETRANGE("Code 2",Code2);
                           IF TempBuffer.FINDFIRST THEN BEGIN
                             TempBuffer."Data Amount 1" := TempBuffer."Data Amount 1" + 1;
                             TempBuffer."Data Integer 1" := TempBuffer."Data Integer 1" + NotFoundNoEmerg;
                             TempBuffer."Data Integer 2" := TempBuffer."Data Integer 2" + NotFoundEmerg;
                             TempBuffer."Data Integer 3" := TempBuffer."Data Integer 3" + NbDeprivation;
                             TempBuffer.MODIFY;
                           END ELSE BEGIN
                             TempBuffer.INIT;
                             TempBuffer."Code 1" := Code1;
                             TempBuffer."Code 2" := Code2;
                             TempBuffer."Data Amount 1" := 1;
                             TempBuffer."Data Integer 1" := NotFoundNoEmerg;
                             TempBuffer."Data Integer 2" := NotFoundEmerg;
                             TempBuffer."Data Integer 3" := NbDeprivation;
                             TempBuffer.INSERT;
                           END;
                         END;

        OnPostDataItem=BEGIN
                         Window.CLOSE;

                         ExportToExcel;
                       END;

        ReqFilterFields=Corporate No.,Service Order Type;
      }
      SECTIONS
      {
      }
       }
  }
  REQUESTFORM
  {
    PROPERTIES
    {
      Width=8690;
      Height=2310;
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1100281004;TextBox;3630 ;1430 ;3850 ;440  ;InPage=-1;
                                                   CaptionML=[ENU=Group By;
                                                              FRA=Type de rupture];
                                                   OptionCaptionML=[ENU=IMH Territory,Area&Spec,Corporate,Service Order Type,Corporate&ServOrderType;
                                                                    FRA=Zone IMH,D‚partement & Sp‚cialit‚,Grand compte,Type de produit,Grand compte & Type de produit];
                                                   OptionString=IMH Territory,Area&Spec,Corporate,Service Order Type,Corporate&ServOrderType;
                                                   SourceExpr=GroupBy }
      { 1100281005;Label  ;220  ;1430 ;3300 ;440  ;ParentControl=1100281004 }
      { 1100281000;TextBox;3630 ;220  ;1700 ;440  ;InPage=-1;
                                                   CaptionML=[ENU=Start Year;
                                                              FRA=Ann‚e de d‚but];
                                                   BlankZero=Yes;
                                                   SourceExpr=StartYear }
      { 1100281001;Label  ;220  ;220  ;3300 ;440  ;ParentControl=1100281000 }
      { 1100281002;TextBox;3630 ;770  ;1700 ;440  ;InPage=-1;
                                                   CaptionML=[ENU=End Year;
                                                              FRA=Ann‚e de fin];
                                                   BlankZero=Yes;
                                                   SourceExpr=EndYear }
      { 1100281003;Label  ;220  ;770  ;3300 ;440  ;ParentControl=1100281002 }
    }
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1100281002;;Container;
                  ContainerType=ContentArea }

      { 1100281004;1;Group  ;
                  CaptionML=[ENU=Options;
                             FRA=Options];
                  GroupType=Group }

      { 1100281000;2;Field  ;
                  CaptionML=[ENU=Start Year;
                             FRA=Ann‚e de d‚but];
                  BlankZero=Yes;
                  SourceExpr=StartYear }

      { 1100281001;2;Field  ;
                  CaptionML=[ENU=End Year;
                             FRA=Ann‚e de fin];
                  BlankZero=Yes;
                  SourceExpr=EndYear }

      { 1100281003;2;Field  ;
                  CaptionML=[ENU=Group By;
                             FRA=Type de rupture];
                  OptionCaptionML=[ENU=IMH Territory,Area&Spec,Corporate,Service Order Type,Corporate&ServOrderType;
                                   FRA=Zone IMH,D‚partement & Sp‚cialit‚,Grand compte,Type de produit,Grand compte & Type de produit];
                  SourceExpr=GroupBy }

    }
  }
  CODE
  {
    VAR
      ProviderSetup@1100281003 : Record 50011;
      TempBuffer@1100281001 : TEMPORARY Record 50143;
      ExcelBuffer@1100281016 : TEMPORARY Record 370;
      TrayLine@1100281011 : Record 50048;
      TrayLineHistory@1100281021 : Record 50049;
      IntervDesc@1100281047 : Record 50070;
      PostCode@1100281048 : Record 225;
      Window@1100281018 : Dialog;
      Text000@1100281012 : TextConst 'ENU=Excel not found.;FRA=Programme Excel non trouv‚.';
      Text001@1100281007 : TextConst 'FRA=Veuillez saisir le statut processus d‚part.';
      Text002@1100281008 : TextConst 'FRA=Veuillez saisir le statut processus arriv‚e.';
      Text003@1100281015 : TextConst 'FRA=Veuillez saisir la date de d‚but.';
      Text004@1100281014 : TextConst 'FRA=Veuillez saisir la date de fin.';
      Text010@1100281019 : TextConst 'FRA=Avancement\@1@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@';
      Text011@1100281005 : TextConst 'ENU=Status Change Delay To Excel;FRA=D‚lai de changement de statut';
      Filters@1100281031 : Text[1024];
      IMHTerritoryFilter@1100281038 : Text[200];
      AreaFilter@1100281036 : Text[200];
      CorporateFilter@1100281006 : Text[200];
      ServOrderTypeFilter@1100281035 : Text[200];
      GroupBy@1100281013 : 'IMH Territory,Area&Spec,Corporate,Service Order Type,Corporate&ServOrderType';
      ExcelTemplatePath@1100281024 : Text[250];
      ExcelSheetName@1100281025 : Text[50];
      StartRowNo@1100281023 : Integer;
      StartColNo@1100281020 : Integer;
      Text020@1100281026 : TextConst 'ENU=Criteria 1:;FRA=CritŠre 1:';
      Text021@1100281028 : TextConst 'ENU=Criteria 2:;FRA=CritŠre 2:';
      Text022@1100281029 : TextConst 'ENU=Filters :;FRA=Filtres :';
      Text023@1100281030 : TextConst 'ENU=Year :;FRA=Ann‚es :';
      RowNo@1100281034 : Integer;
      ColNo@1100281033 : Integer;
      Text030@1100281004 : TextConst 'ENU=IMH Territory;FRA=Zone IMH';
      Text031@1100281002 : TextConst 'ENU=Area;FRA=D‚partement';
      Text032@1100281017 : TextConst 'ENU=Corporate;FRA=Grand compte';
      Text033@1100281040 : TextConst 'ENU=Service Order Type;FRA=Type produit';
      Text034@1100281041 : TextConst 'ENU=Speciality;FRA=Sp‚cialit‚';
      Text035@1100281042 : TextConst 'ENU=Nb Total;FRA=Nb dossier total';
      Text036@1100281043 : TextConst 'ENU=Nb Not Found No Emerg.;FRA=Nb dossier presta. non trouv‚ non urgent';
      Text037@1100281044 : TextConst 'ENU=Nb Not Found Emerg.;FRA=Nb dossier presta. non trouv‚ urgent';
      Code1@1100281009 : Code[20];
      Code2@1100281010 : Code[20];
      NotFoundNoEmerg@1100281027 : Integer;
      NotFoundEmerg@1100281022 : Integer;
      NbDeprivation@1100281046 : Integer;
      Text038@1100281045 : TextConst 'ENU=Not Found Pct;FRA=% non trouv‚';
      Text039@1100281049 : TextConst 'ENU=Nb Deprivations;FRA=Nb carences';
      Text040@1100281050 : TextConst 'ENU=Deprivation Pct;FRA=% carence';
      TextCode1@1100281051 : Text[50];
      TextCode2@1100281052 : Text[50];
      StartYear@1100281032 : Integer;
      EndYear@1100281037 : Integer;
      StartDate@1100281039 : DateTime;
      EndDate@1100281056 : DateTime;
      TotalCpt@1100281055 : Integer;
      Cpt@1100281054 : Integer;
      CurrCpt@1100281053 : Integer;

    PROCEDURE InitValues@1100281005();
    VAR
      lReportSetup@1100281000 : Record 50115;
      lFound@1100281001 : Boolean;
      lReportID@1100281002 : Integer;
    BEGIN
      lReportID := 50086;
      lFound := lReportSetup.GET(lReportSetup."Object Type"::Report,lReportID,USERID);
      IF NOT lFound THEN
        lFound := lReportSetup.GET(lReportSetup."Object Type"::Report,lReportID,'');

      IF lFound THEN BEGIN
        ExcelTemplatePath := lReportSetup."Excel Template Path";
        ExcelSheetName := lReportSetup."Excel Template Tabs";
        StartRowNo := lReportSetup."First Line";
        StartColNo := lReportSetup."First Column";
      END ELSE BEGIN
        ExcelTemplatePath := '';
        ExcelSheetName  := 'Page1';
      END;

      IF StartRowNo <= 0 THEN
        StartRowNo := 8;

      IF StartColNo <= 0 THEN
        StartColNo := 1;
    END;

    PROCEDURE ExportToExcel@1100281001();
    VAR
      lNotFoundPct@1100281001 : Decimal;
      lDeprivationPct@1100281000 : Decimal;
    BEGIN
      InitValues;

      CASE GroupBy OF
        GroupBy::"IMH Territory" :
          BEGIN
            TextCode1 := Text030;
            TextCode2 := '';
          END;
        GroupBy::"Area&Spec" :
          BEGIN
            TextCode1 := Text031;
            TextCode2 := Text034;
          END;
        GroupBy::Corporate :
          BEGIN
            TextCode1 := Text032;
            TextCode2 := '';
          END;
        GroupBy::"Service Order Type" :
          BEGIN
            TextCode1 := Text033;
            TextCode2 := '';
          END;
        GroupBy::"Corporate&ServOrderType" :
          BEGIN
            TextCode1 := Text032;
            TextCode2 := Text033;
          END;
      END;

      RowNo := 2;
      InsertRow(RowNo,1,Text020,'','');
      InsertRow(RowNo + 1,1,Text021,'','');
      InsertRow(RowNo + 2,1,Text022,'','');
      InsertRow(RowNo + 3,1,Text023,'','');

      InsertRow(RowNo,2,TextCode1,'','');
      InsertRow(RowNo + 1,2,TextCode2,'','');
      InsertRow(RowNo + 2,2,Filters,'','');
      InsertRow(RowNo + 3,2,STRSUBSTNO('%1 - %2',StartYear,EndYear),'','');

      RowNo := StartRowNo;
      ColNo := StartColNo;

      InsertRow(RowNo,ColNo,TextCode1,'','');
      InsertRow(RowNo,ColNo + 1,TextCode2,'','');
      InsertRow(RowNo,ColNo + 2,Text035,'','');
      InsertRow(RowNo,ColNo + 3,Text036,'','');
      InsertRow(RowNo,ColNo + 4,Text037,'','');
      InsertRow(RowNo,ColNo + 5,Text038,'','');
      InsertRow(RowNo,ColNo + 6,Text039,'','');
      InsertRow(RowNo,ColNo + 7,Text040,'','');

      TempBuffer.RESET;
      IF TempBuffer.FINDSET THEN BEGIN
        REPEAT
          RowNo := RowNo + 1;
          IF TempBuffer."Data Amount 1" <> 0 THEN BEGIN
            lNotFoundPct :=
              ROUND((TempBuffer."Data Integer 1" + TempBuffer."Data Integer 2")  / TempBuffer."Data Amount 1" * 100,0.01);
            lDeprivationPct :=
              ROUND(TempBuffer."Data Integer 3" / TempBuffer."Data Amount 1" * 100,0.01);
          END ELSE BEGIN
            lNotFoundPct := 0;
            lDeprivationPct := 0;
          END;

          InsertRow(RowNo,ColNo,TempBuffer."Code 1",'','');
          InsertRow(RowNo,ColNo + 1,TempBuffer."Code 2",'','');
          InsertRow(RowNo,ColNo + 2,FORMAT(TempBuffer."Data Amount 1"),'','');
          InsertRow(RowNo,ColNo + 3,FORMAT(TempBuffer."Data Integer 1"),'','');
          InsertRow(RowNo,ColNo + 4,FORMAT(TempBuffer."Data Integer 2"),'','');
          InsertRow(RowNo,ColNo + 5,FORMAT(lNotFoundPct),'','');
          InsertRow(RowNo,ColNo + 6,FORMAT(TempBuffer."Data Integer 3"),'','');
          InsertRow(RowNo,ColNo + 7,FORMAT(lDeprivationPct),'','');
        UNTIL TempBuffer.NEXT = 0;
      END;

      ViewExcel;
    END;

    PROCEDURE InsertRow@1100281004(RowNo@1000000000 : Integer;ColumnNo@1000000001 : Integer;CellValue@1000000002 : Text[250];CellFormula@1100281000 : Text[250];NbFormat@1000000003 : Text[30]);
    BEGIN
      ExcelBuffer.INIT;
      ExcelBuffer.VALIDATE("Row No.",RowNo);
      ExcelBuffer.VALIDATE("Column No.",ColumnNo);
      ExcelBuffer."Cell Value as Text" := CellValue;
      ExcelBuffer.NumberFormat := NbFormat;
      ExcelBuffer.Formula := CellFormula; //'';
      ExcelBuffer.INSERT;
    END;

    PROCEDURE GetCurrCellID@1100281000() : Text[20];
    BEGIN
      EXIT(ExcelBuffer.xlColID + ExcelBuffer.xlRowID);
    END;

    PROCEDURE ViewExcel@1000000002();
    BEGIN

      IF ExcelTemplatePath <> '' THEN
        ExcelBuffer.OpenBook(ExcelTemplatePath,ExcelSheetName)
      ELSE
        ExcelBuffer.CreateBook;

      ExcelBuffer.CreateSheet(ExcelSheetName,ExcelSheetName,'','');
      ExcelBuffer.GiveUserControl;
      CLEAR(ExcelBuffer);
    END;

    PROCEDURE CreateExcelBuffer@1000000004();
    BEGIN
      ExcelBuffer.DELETEALL;
      CLEAR(ExcelBuffer);
    END;

    PROCEDURE GetSpecialityCode@1100281010() : Code[20];
    BEGIN
      IF "Service Header"."Main Speciality" <> '' THEN
        EXIT("Service Header"."Main Speciality")
      ELSE BEGIN
        IntervDesc.RESET;
        IntervDesc.SETRANGE("Service Header No.","Service Header"."No.");
        IntervDesc.SETRANGE(Main,TRUE);
        IF IntervDesc.ISEMPTY THEN
          IntervDesc.SETRANGE(Main);
        IF IntervDesc.FINDFIRST THEN
          EXIT(IntervDesc."Speciality Code");
      END;

      EXIT('');
    END;

    BEGIN
    {
      /** @r IMH01 @d 14/10/13 @a ISAT.ST @v IMH6.01.353 @s Reorganisation region IMH @h 4760 @c Renommage CR / AR / R‚gion */
    }
    END.
  }
  RDLDATA
  {
  }
}