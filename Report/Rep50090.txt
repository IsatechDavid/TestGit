OBJECT Report 50090 Report 57 : Delai moyen
{
  OBJECT-PROPERTIES
  {
    Date=06/01/12;
    Time=09:26:23;
    Modified=Yes;
    Version List=IMH6.01;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Report 57 : Delai moyen;
               FRA=Report 57 : Delai moyen];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  IF (StartDate = 0D) OR (EndDate = 0D) THEN
                    ERROR(Err001);
                  IF DATE2DMY(StartDate,1) <> 1 THEN
                    ERROR(Err004);
                  IF DATE2DMY(EndDate+1,1) <> 1 THEN
                    ERROR(Err005);

                  IF EndDate < StartDate THEN
                    ERROR(Err002);
                  // Si Vision par prestataire alors s‚lection d'une sp‚cialit‚
                  IF TypeOfVision = TypeOfVision::Provider THEN
                    IF ( ("Provider Scoring Calc History".GETFILTER("Specialization Code") = '')
                        OR (STRPOS("Provider Scoring Calc History".GETFILTER("Specialization Code"),'|') <> 0  )) THEN
                       ERROR(Err003);
                  Filters := Area.GETFILTERS;
                  Filters1 := "Provider Scoring Calc History".GETFILTERS;
                END;

  }
  DATAITEMS
  {
    { PROPERTIES
      {
        DataItemTable=Table284;
        DataItemTableView=SORTING(Code);
        ReqFilterHeadingML=[ENU=Geography;
                            FRA=Filtres g‚ographiques];
        OnPreDataItem=BEGIN
                        CurrReport.BREAK;
                      END;

        ReqFilterFields=Regional Coordinator,IMH Territory Code,Code;
      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=12000;
            SectionHeight=846;
          }
          CONTROLS
          {
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemTable=Table50155;
        ReqFilterHeadingML=FRA=Filtres interventions;
        OnPreDataItem=BEGIN
                        SETCURRENTKEY(Year,Month,"Calculation Type");

                        IF DATE2DMY(StartDate,3) = DATE2DMY(EndDate,3) THEN BEGIN
                           SETRANGE(Year,DATE2DMY(StartDate,3));
                           SETFILTER(Month,'%1..%2',DATE2DMY(StartDate,2),DATE2DMY(EndDate,2))
                        END ELSE BEGIN
                          SETFILTER(Year,'%1..%2',DATE2DMY(StartDate,3),DATE2DMY(EndDate,3))
                        END;

                        SETRANGE("Calculation Type","Calculation Type"::"Average Cost/Time");
                        IF Area.GETFILTER(Code) <> '' THEN
                          SETFILTER("Area Code", Area.GETFILTER(Code));


                        CASE TypeOfVision OF
                          TypeOfVision::State:BEGIN
                          IF Area.GETFILTER(Code) = '' THEN
                              SETFILTER("Area Code",'<>%1','');
                          END;
                          TypeOfVision::Provider:BEGIN
                            IF GETFILTER("Provider No.") = '' THEN
                              SETFILTER("Provider No.",'<>%1','');
                          END;
                        END;//Case
                        IF GETFILTER("Provider No.") = '' THEN
                          SETFILTER("Provider No.",'=%1','');

                        IF GETFILTER("Specialization Code") = '' THEN
                          SETFILTER("Specialization Code",'<>%1','');

                        TotalCpt := COUNT;

                        Window.OPEN(Text010);
                      END;

        OnAfterGetRecord=VAR
                           lArea@1100281000 : Record 284;
                           lSpeciality@1100281001 : Record 50005;
                           lObj@1100281002 : Decimal;
                           lAvg@1100281003 : Decimal;
                           lGap@1100281004 : Decimal;
                           lGapPct@1100281005 : Decimal;
                         BEGIN
                           // Filtre Date
                           IF DATE2DMY(StartDate,3) <> DATE2DMY(EndDate,3) THEN BEGIN
                             IF (
                               ((Year = DATE2DMY(EndDate,3)) AND (Month > DATE2DMY(EndDate,2)))
                               OR
                               ((Year = DATE2DMY(StartDate,3)) AND (Month < DATE2DMY(StartDate,2)))) THEN
                               CurrReport.SKIP;
                           END;

                           IF Area.GETFILTER("Regional Coordinator") <> '' THEN BEGIN
                             IF lArea.GET("Area Code") THEN
                               IF STRPOS(Area.GETFILTER("Regional Coordinator"),lArea."Regional Coordinator") = 0 THEN
                                 CurrReport.SKIP;
                           END;
                           IF Area.GETFILTER("IMH Territory Code") <> '' THEN BEGIN
                             IF lArea.GET("Area Code") THEN
                               IF STRPOS(Area.GETFILTER("IMH Territory Code"),lArea."IMH Territory Code") = 0 THEN
                                 CurrReport.SKIP;

                           END;



                           RepBuffer.RESET;
                           RepBuffer.SETRANGE("Code 1","Specialization Code");
                           RepBuffer."Code 1" := "Specialization Code";
                           CASE TypeOfVision OF
                             TypeOfVision::Provider:BEGIN
                               RepBuffer.SETRANGE("Code 2","Provider No.");
                               RepBuffer."Code 2" := "Provider No.";
                             END;
                             TypeOfVision::State:BEGIN
                               RepBuffer.SETRANGE("Code 2","Area Code");
                               RepBuffer."Code 2" := "Area Code";
                             END;
                             TypeOfVision::Regional:BEGIN
                               IF lArea.GET("Area Code") THEN BEGIN
                                 RepBuffer."Code 2" := lArea."Admin. Territory Code";
                                 RepBuffer.SETRANGE("Code 2",lArea."Admin. Territory Code");
                               END;
                             END;

                           END;


                           IF RepBuffer.ISEMPTY THEN BEGIN
                             RepBuffer."Data Amount 2" := "Interv. Period Total"; // Delai
                             RepBuffer."Data Integer 1" := "Intervention Nb"; // Nb Inter

                             RepBuffer.INSERT
                           END
                           ELSE BEGIN
                             RepBuffer.FINDFIRST;
                             RepBuffer."Data Amount 2" := RepBuffer."Data Amount 2" + "Interv. Period Total";
                             RepBuffer."Data Integer 1" := RepBuffer."Data Integer 1" + "Intervention Nb";

                           END;
                           IF lSpeciality.GET(RepBuffer."Code 1") THEN
                             lObj := lSpeciality."Average Time Objective";
                           IF RepBuffer."Data Integer 1" <> 0 THEN
                             lAvg := ROUND(RepBuffer."Data Amount 2" / RepBuffer."Data Integer 1",1,'=');
                           lGap := lAvg - lObj;
                           IF lObj <> 0 THEN
                             lGapPct := ROUND(100*lGap/lObj);

                           RepBuffer."Data Amount 1" := lGapPct;
                           RepBuffer."Data Amount 3" := lGap;
                           RepBuffer."Data Amount 4" := lObj;
                           RepBuffer."Data Amount 5" := ROUND(lAvg,1,'=');
                           RepBuffer.MODIFY;
                         END;

        OnPostDataItem=BEGIN
                         Window.CLOSE;
                       END;

        ReqFilterFields=Provider No.,Specialization Code;
      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=12000;
            SectionHeight=846;
          }
          CONTROLS
          {
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemTable=Table50005;
        DataItemTableView=SORTING(Code);
        OnPreDataItem=BEGIN
                        IF TypeOfVision IN [TypeOfVision::Provider,TypeOfVision::National] THEN
                          CurrReport.BREAK;
                        FirstLine := TRUE;

                        ExportToExcel;
                      END;

        OnAfterGetRecord=VAR
                           lArea@1100281002 : Record 284;
                           lTerritory@1100281005 : Record 286;
                           lColNoGroup@1100281000 : Integer;
                           lAvg@1100281001 : Decimal;
                           lGapPct@1100281003 : Decimal;
                           lGap@1100281004 : Decimal;
                           lBOld@1100281006 : Boolean;
                           lColor@1100281007 : Integer;
                         BEGIN
                           RepBuffer.RESET;
                           RepBuffer.SETRANGE("Code 1",Code);
                           IF RepBuffer.ISEMPTY THEN
                             CurrReport.SKIP;

                           RepBuffer.FINDSET;

                           CASE TypeOfVision OF
                             // Vision par D‚partement
                             TypeOfVision::State:BEGIN

                               lColNoGroup := StartColNo + 2;
                               IF FirstLine THEN BEGIN
                                 InsertRow(StartRowNo+1,StartColNo,Text011,'','',FALSE,0);
                                 InsertRow(StartRowNo+1,StartColNo+1,Text012,'','',FALSE,0);
                                // FirstLine := FALSE;
                                 RowNo := StartRowNo + 2;
                               END;
                               InsertRow(RowNo,StartColNo,Description,'','',FALSE,0);
                               InsertRow(RowNo,StartColNo + 1,FORMAT(Specialization."Average Time Objective"),'','',FALSE,0);// D‚lai objectif

                               IF Area.GETFILTER(Code) <> '' THEN
                               lArea.SETFILTER(Code,Area.GETFILTER(Code));
                               IF lArea.ISEMPTY THEN
                                 CurrReport.SKIP;
                               lArea.FINDSET;
                               REPEAT
                                 IF FirstLine THEN BEGIN
                                   InsertRow(StartRowNo,lColNoGroup,lArea.Text,'','',FALSE,0);
                                   InsertRow(StartRowNo+1,lColNoGroup,Text013,'','',FALSE,0);
                                   InsertRow(StartRowNo+1,lColNoGroup + 1,Text014,'','',FALSE,0);
                                   InsertRow(StartRowNo+1,lColNoGroup + 2,Text015,'','',FALSE,0);
                                   InsertRow(StartRowNo+1,lColNoGroup + 3,Text016,'','',FALSE,0);
                                 END;

                                 RepBuffer.SETRANGE("Code 2",lArea.Code);
                                 IF RepBuffer.FINDFIRST THEN BEGIN
                                   InsertRow(RowNo,lColNoGroup,FORMAT(RepBuffer."Data Integer 1"),'','',FALSE,0); // Nb Inter.
                                   InsertRow(RowNo,lColNoGroup+1,FORMAT(RepBuffer."Data Amount 5"),'','',FALSE,0); // D‚lai moyen
                                   InsertRow(RowNo,lColNoGroup+2,FORMAT(RepBuffer."Data Amount 3"),'','',FALSE,0); // Ecart
                                   IF RepBuffer."Data Amount 1" > 0  THEN
                                     lColor:= 255
                                   ELSE lColor:= 0;

                                   InsertRow(RowNo,lColNoGroup+3,FORMAT(RepBuffer."Data Amount 1"),'','',FALSE,lColor); // Ecart %

                                 END ELSE BEGIN
                                   InsertRow(RowNo,lColNoGroup,'0','','',FALSE,0); // Nb Inter.
                                   InsertRow(RowNo,lColNoGroup+1,'0','','',FALSE,0); // D‚lai moyen
                                   InsertRow(RowNo,lColNoGroup+2,'0','','',FALSE,0); // Ecart
                                   InsertRow(RowNo,lColNoGroup+3,'0','','',FALSE,0); // Ecart %

                                 END;
                                    lColNoGroup := lColNoGroup + 4 ;
                               UNTIL lArea.NEXT =0;
                             END;
                             TypeOfVision::Regional:BEGIN

                               lColNoGroup := StartColNo + 2;
                               IF FirstLine THEN BEGIN
                                 InsertRow(StartRowNo+1,StartColNo,Text011,'','',FALSE,0);
                                 InsertRow(StartRowNo+1,StartColNo+1,Text012,'','',FALSE,0);
                                // FirstLine := FALSE;
                                 RowNo := StartRowNo + 2;
                               END;
                               InsertRow(RowNo,StartColNo,Description,'','',FALSE,0);
                               InsertRow(RowNo,StartColNo + 1,FORMAT(Specialization."Average Time Objective"),'','',FALSE,0);// D‚lai objectif

                               IF Area.GETFILTER("IMH Territory Code") <> '' THEN
                               lTerritory.SETFILTER(Code,Area.GETFILTER("IMH Territory Code"));
                               IF lTerritory.ISEMPTY THEN
                                 CurrReport.SKIP;
                               lTerritory.SETCURRENTKEY(Name);
                               lTerritory.FINDSET;
                               REPEAT
                                 IF FirstLine THEN BEGIN
                                   InsertRow(StartRowNo,lColNoGroup,lTerritory.Name,'','',FALSE,0);
                                    InsertRow(StartRowNo+1,lColNoGroup,Text013,'','',FALSE,0);
                                   InsertRow(StartRowNo+1,lColNoGroup + 1,Text014,'','',FALSE,0);
                                   InsertRow(StartRowNo+1,lColNoGroup + 2,Text015,'','',FALSE,0);
                                   InsertRow(StartRowNo+1,lColNoGroup + 3,Text016,'','',FALSE,0);
                                 END;
                                 RepBuffer.SETRANGE("Code 2",lTerritory.Code);
                                 IF RepBuffer.FINDFIRST THEN BEGIN
                                   InsertRow(RowNo,lColNoGroup,FORMAT(RepBuffer."Data Integer 1"),'','',FALSE,0); // Nb Inter.
                                   InsertRow(RowNo,lColNoGroup+1,FORMAT(RepBuffer."Data Amount 5"),'','',FALSE,0); // D‚lai moyen
                                   InsertRow(RowNo,lColNoGroup+2,FORMAT(RepBuffer."Data Amount 3"),'','',FALSE,0); // Ecart
                                   IF RepBuffer."Data Amount 1" > 0 THEN
                                     lColor := 255
                                   ELSE
                                     lColor := 0;
                                   InsertRow(RowNo,lColNoGroup+3,FORMAT(RepBuffer."Data Amount 1"),'','',FALSE,lColor); // Ecart %

                                 END ELSE BEGIN
                                   InsertRow(RowNo,lColNoGroup,'0','','',FALSE,0); // Nb Inter.
                                   InsertRow(RowNo,lColNoGroup+1,'0','','',FALSE,0); // D‚lai moyen
                                   InsertRow(RowNo,lColNoGroup+2,'0','','',FALSE,0); // Ecart
                                   InsertRow(RowNo,lColNoGroup+3,'0','','',FALSE,0); // Ecart %

                                 END;
                                    lColNoGroup := lColNoGroup + 4 ;

                               UNTIL lTerritory.NEXT =0;
                               //StartRowNo += 1;
                             END;
                             TypeOfVision::Provider:BEGIN
                             END;
                           END;
                           RowNo += 1;
                            FirstLine := FALSE
                         END;

        OnPostDataItem=BEGIN
                         IF NOT (TypeOfVision IN [TypeOfVision::Provider,TypeOfVision::National]) THEN
                           ViewExcel;
                       END;

      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=12000;
            SectionHeight=846;
          }
          CONTROLS
          {
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemTable=Table2000000026;
        DataItemTableView=SORTING(Number)
                          WHERE(Number=CONST(1));
        OnPreDataItem=BEGIN
                        IF NOT (TypeOfVision IN [TypeOfVision::Provider,TypeOfVision::National]) THEN
                          CurrReport.BREAK;
                        RepBuffer.RESET;
                        RepBuffer.SETCURRENTKEY("Data Amount 1");
                        RepBuffer.SETVIEW('SORTING("Data Amount 1") ORDER(Descending)');

                        IF RepBuffer.COUNT = 0 THEN
                          CurrReport.BREAK;

                        ExportToExcel;
                      END;

        OnAfterGetRecord=VAR
                           lProvider@1100281000 : Record 50000;
                           lSpeciality@1100281001 : Record 50005;
                           lBold@1100281002 : Boolean;
                           lColor@1100281003 : Integer;
                         BEGIN
                           RepBuffer.FINDFIRST;
                           RowNo := StartRowNo;

                           CASE TypeOfVision OF
                             TypeOfVision::Provider:BEGIN
                               InsertRow(RowNo,StartColNo,Text017,'','',FALSE,0);
                               InsertRow(RowNo,StartColNo + 1,Text018,'','',FALSE,0);
                               InsertRow(RowNo,StartColNo + 2,Text013,'','',FALSE,0);
                               InsertRow(RowNo,StartColNo + 3,Text015,'','',FALSE,0);
                               InsertRow(RowNo,StartColNo + 4,Text016,'','',FALSE,0);
                             END;
                             TypeOfVision::National:BEGIN
                               InsertRow(RowNo,StartColNo,Text011,'','',FALSE,0);
                               InsertRow(RowNo,StartColNo + 1,Text012,'','',FALSE,0);
                               InsertRow(RowNo,StartColNo + 2,Text013,'','',FALSE,0);
                               InsertRow(RowNo,StartColNo + 3,Text014,'','',FALSE,0);
                               InsertRow(RowNo,StartColNo + 4,Text015,'','',FALSE,0);
                               InsertRow(RowNo,StartColNo + 5,Text016,'','',FALSE,0);
                             END;
                           END;


                           REPEAT
                             RowNo += 1;
                             IF lSpeciality.GET(RepBuffer."Code 2") THEN;
                             CASE TypeOfVision OF
                               TypeOfVision::Provider:BEGIN
                                 IF lProvider.GET(RepBuffer."Code 2") THEN BEGIN
                                   InsertRow(RowNo,StartColNo,lProvider."No.",'','',FALSE,0);
                                   InsertRow(RowNo,StartColNo+1,lProvider.Name,'','',FALSE,0);
                                   InsertRow(RowNo,StartColNo+2,FORMAT(RepBuffer."Data Integer 1"),'','',FALSE,0); // Nb Inter.
                                   InsertRow(RowNo,StartColNo+3,FORMAT(RepBuffer."Data Amount 3"),'','',FALSE,0); // Ecart
                                   IF RepBuffer."Data Amount 1" > 0 THEN
                                     lColor := 255
                                   ELSE
                                     lColor := 0;
                                   InsertRow(RowNo,StartColNo+4,FORMAT(RepBuffer."Data Amount 1"),'','',FALSE,lColor); // Ecart %
                                 END;
                               END;
                               TypeOfVision::National:BEGIN
                                 IF lSpeciality.GET(RepBuffer."Code 1") THEN BEGIN;
                                   InsertRow(RowNo,StartColNo,lSpeciality.Description,'','',FALSE,0);
                                   InsertRow(RowNo,StartColNo+1,FORMAT(RepBuffer."Data Amount 4"),'','',FALSE,0);
                                   InsertRow(RowNo,StartColNo+2,FORMAT(RepBuffer."Data Integer 1"),'','',FALSE,0); // Nb Inter.
                                   InsertRow(RowNo,StartColNo+3,FORMAT(RepBuffer."Data Amount 5"),'','',FALSE,0); // D‚lai moyen
                                   InsertRow(RowNo,StartColNo+4,FORMAT(RepBuffer."Data Amount 3"),'','',FALSE,0); // Ecart
                                   IF RepBuffer."Data Amount 1" > 0 THEN
                                     lColor := 255
                                   ELSE
                                     lColor := 0;
                                   InsertRow(RowNo,StartColNo+5,FORMAT(RepBuffer."Data Amount 1"),'','',FALSE,lColor); // Ecart %
                                 END;
                               END;
                             END;

                           UNTIL RepBuffer.NEXT = 0;
                         END;

        OnPostDataItem=BEGIN
                         IF (TypeOfVision IN [TypeOfVision::Provider,TypeOfVision::National])
                           AND (RepBuffer.COUNT <> 0) THEN
                           ViewExcel;
                       END;

      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=12000;
            SectionHeight=846;
          }
          CONTROLS
          {
          }
           }
      }
       }
  }
  REQUESTFORM
  {
    PROPERTIES
    {
      Width=5720;
      Height=2090;
    }
    CONTROLS
    {
      { 1100281004;TextBox;3630 ;1210 ;1700 ;440  ;InPage=-1;
                                                   CaptionML=[ENU=Vision Type;
                                                              FRA=Type de vision];
                                                   OptionCaptionML=[ENU=National,Regional,State,Provider;
                                                                    FRA=Nationale,R‚gionale,D‚partement,Prestataire];
                                                   OptionString=National,Regional,State,Provider;
                                                   SourceExpr=TypeOfVision }
      { 1100281005;Label  ;220  ;1210 ;3300 ;440  ;ParentControl=1100281004 }
      { 1100281002;TextBox;3630 ;0    ;1700 ;440  ;Name=StartDateTb;
                                                   InPage=-1;
                                                   CaptionML=[ENU=Start Date;
                                                              FRA=Date de d‚but];
                                                   SourceExpr=StartDate }
      { 1100281007;Label  ;220  ;0    ;3300 ;440  ;ParentControl=1100281002 }
      { 1100281008;TextBox;3630 ;550  ;1700 ;440  ;Name=EndDateTb;
                                                   InPage=-1;
                                                   CaptionML=[ENU=End Date;
                                                              FRA=Date de fin];
                                                   SourceExpr=EndDate }
      { 1100281009;Label  ;220  ;550  ;3300 ;440  ;ParentControl=1100281008 }
    }
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1100281000;;Container;
                  Name=e;
                  ContainerType=ContentArea }

      { 1100281001;1;Group  ;
                  GroupType=Group }

      { 1100281002;2;Field  ;
                  CaptionML=[ENU=Start Date;
                             FRA=Date de d‚but];
                  SourceExpr=StartDate }

      { 1100281003;2;Field  ;
                  CaptionML=[ENU=End Date;
                             FRA=Date de fin];
                  SourceExpr=EndDate }

      { 1100281004;2;Field  ;
                  CaptionML=[ENU=Vision Type;
                             FRA=Type de vision];
                  OptionCaptionML=[ENU=National,Regional,State,Provider;
                                   FRA=Nationale,R‚gionale,D‚partement,Prestataire];
                  SourceExpr=TypeOfVision }

    }
  }
  CODE
  {
    VAR
      TempBuffer@1100281002 : TEMPORARY Record 50143;
      ExcelBuffer@1100281001 : TEMPORARY Record 370;
      RepBuffer@1100281037 : TEMPORARY Record 8016755;
      PostCode@1100281003 : Integer;
      Window@1100281000 : Dialog;
      Text000@1100281016 : TextConst 'ENU=Excel not found.;FRA=Programme Excel non trouv‚.';
      Text003@1100281015 : TextConst 'FRA=Veuillez saisir la date de d‚but.';
      Text004@1100281014 : TextConst 'FRA=Veuillez saisir la date de fin.';
      Text010@1100281013 : TextConst 'FRA=Avancement\@1@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@';
      Text011@1100281012 : TextConst 'ENU=Specialization;FRA=Sp‚cialit‚';
      Text012@1100281039 : TextConst 'ENU=Objective Time;FRA=D‚lai objectif';
      Text013@1100281040 : TextConst 'ENU=Interventions Nbr.;FRA=Nombre d''interventions';
      Text014@1100281041 : TextConst 'ENU=Time Average;FRA=D‚lai moyen';
      Text015@1100281042 : TextConst 'ENU=Gap;FRA=Ecart';
      Text016@1100281043 : TextConst 'ENU=Gap %;FRA=Ecart %';
      Filters@1100281034 : Text[1024];
      Filters1@1100281046 : Text[1024];
      ExcelTemplatePath@1100281033 : Text[250];
      ExcelSheetName@1100281032 : Text[50];
      StartRowNo@1100281031 : Integer;
      StartColNo@1100281030 : Integer;
      RowNo@1100281029 : Integer;
      ColNo@1100281028 : Integer;
      Code1@1100281027 : Code[20];
      Code2@1100281026 : Code[20];
      TextCode1@1100281025 : Text[50];
      TextCode2@1100281024 : Text[50];
      StartMonth@1100281021 : Option;
      EndMonth@1100281020 : Option;
      TotalCpt@1100281019 : Integer;
      Cpt@1100281018 : Integer;
      CurrCpt@1100281017 : Integer;
      TypeOfVision@1100281035 : 'National,Regional,State,Provider';
      Text017@1100281005 : TextConst 'ENU=Provider No.;FRA=Nø prestataire';
      Text018@1100281006 : TextConst 'ENU=Provider Name;FRA=Nom prestataire';
      Text020@1100281022 : TextConst 'FRA=Filtres g‚ographiques :';
      Text021@1100281023 : TextConst 'FRA=Filtres interventions :';
      Text022@1100281038 : TextConst 'FRA=Dates :';
      TypeOfVisionStr@1100281036 : TextConst 'ENU=National,Regional,Department,Provider;FRA=Nationale,R‚gionale,D‚partementale,Prestataire';
      FirstLine@1100281007 : Boolean;
      StartDate@1100281004 : Date;
      EndDate@1100281008 : Date;
      Err001@1100281009 : TextConst 'FRA=La date de d‚but et la date de fin doivent ˆtre renseign‚es';
      Err002@1100281010 : TextConst 'FRA=La date de d‚but doit ˆtre inf‚rieure … la date de fin.';
      Err003@1100281011 : TextConst 'FRA=Veuillez filtrer sur une sp‚cialit‚';
      Err004@1100281044 : TextConst 'FRA=La date de d‚but doit ˆtre le premier jour du mois';
      Err005@1100281045 : TextConst 'FRA=La date de fin doit ˆtre le dernier jour du mois';

    PROCEDURE InitValues@1100281005();
    VAR
      lReportSetup@1100281000 : Record 50115;
      lFound@1100281001 : Boolean;
      lReportID@1100281002 : Integer;
    BEGIN
      lReportID := 50090;
      lFound := lReportSetup.GET(lReportSetup."Object Type"::Report,lReportID,USERID);
      IF NOT lFound THEN
        lFound := lReportSetup.GET(lReportSetup."Object Type"::Report,lReportID,'');

      IF lFound THEN BEGIN
        ExcelTemplatePath := lReportSetup."Excel Template Path";
        ExcelSheetName := lReportSetup."Excel Template Tabs";
        StartRowNo := lReportSetup."First Line";
        StartColNo := lReportSetup."First Column";
      END ELSE BEGIN
        ExcelTemplatePath := '';
        ExcelSheetName  := 'Page1';
      END;

      IF StartRowNo <= 0 THEN
        StartRowNo := 8;

      IF StartColNo <= 0 THEN
        StartColNo := 1;
    END;

    PROCEDURE ExportToExcel@1100281001();
    VAR
      lArea@1100281002 : Record 284;
      lNotFoundPct@1100281001 : Decimal;
      lDeprivationPct@1100281000 : Decimal;
      lValues@1100281003 : ARRAY [4] OF Integer;
      lShowAvg@1100281004 : Boolean;
      lColNoGroup@1100281005 : Integer;
    BEGIN
      InitValues;

      RowNo := 2;
      InsertRow(RowNo,1,Text020,'','',FALSE,0);
      InsertRow(RowNo + 1,1,Text021,'','',FALSE,0);
      InsertRow(RowNo + 2,1,Text022,'','',FALSE,0);

      InsertRow(RowNo,2,Filters,'','',FALSE,0);
      InsertRow(RowNo + 1,2,Filters1,'','',FALSE,0);
      InsertRow(RowNo + 2,2,STRSUBSTNO('%1 - %2',StartDate,EndDate),'','',FALSE,0);
      RowNo := StartRowNo;
    END;

    PROCEDURE InsertRow@1100281004(RowNo@1000000000 : Integer;ColumnNo@1000000001 : Integer;CellValue@1000000002 : Text[250];CellFormula@1100281000 : Text[250];NbFormat@1000000003 : Text[30];pBold@1100281001 : Boolean;pColor@1100281002 : Integer);
    BEGIN
      ExcelBuffer.INIT;
      ExcelBuffer.VALIDATE("Row No.",RowNo);
      ExcelBuffer.VALIDATE("Column No.",ColumnNo);
      ExcelBuffer."Cell Value as Text" := CellValue;
      ExcelBuffer.NumberFormat := NbFormat;
      ExcelBuffer.Formula := CellFormula; //'';
      ExcelBuffer.Bold := pBold;
      ExcelBuffer.Color := pColor;
      ExcelBuffer.INSERT;
    END;

    PROCEDURE GetCurrCellID@1100281000() : Text[20];
    BEGIN
      EXIT(ExcelBuffer.xlColID + ExcelBuffer.xlRowID);
    END;

    PROCEDURE ViewExcel@1000000002();
    BEGIN

      IF ExcelTemplatePath <> '' THEN
        ExcelBuffer.OpenBook(ExcelTemplatePath,ExcelSheetName)
      ELSE
        ExcelBuffer.CreateBook;

      ExcelBuffer.CreateSheet(ExcelSheetName,ExcelSheetName,'','');
      ExcelBuffer.GiveUserControl;
      CLEAR(ExcelBuffer);
    END;

    PROCEDURE CreateExcelBuffer@1000000004();
    BEGIN
      ExcelBuffer.DELETEALL;
      CLEAR(ExcelBuffer);
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}