OBJECT Report 50092 Report 59 : Co–t moyen
{
  OBJECT-PROPERTIES
  {
    Date=10/01/12;
    Time=15:35:47;
    Modified=Yes;
    Version List=IMH6.01;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Report 59 : Co–t moyen;
               FRA=Report 59 : Co–t moyen];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  IF (StartDate = 0D) OR (EndDate = 0D) THEN
                    ERROR(Err001);
                  IF EndDate < StartDate THEN
                    ERROR(Err002);

                  Filters := Area.GETFILTERS;
                  Filters2 := "Service Intervention Line".GETFILTERS;
                  Filters1 := Motif.GETFILTERS;
                END;

  }
  DATAITEMS
  {
    { PROPERTIES
      {
        DataItemTable=Table5917;
        DataItemVarName=Motif;
        ReqFilterHeadingML=FRA=Cause;
        OnPreDataItem=BEGIN
                        CurrReport.BREAK;
                      END;

        ReqFilterFields=Code;
      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=12000;
            SectionHeight=846;
          }
          CONTROLS
          {
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemTable=Table284;
        ReqFilterHeadingML=FRA=Fltres g‚ographiques;
        OnPreDataItem=BEGIN
                        CurrReport.BREAK;
                      END;

        ReqFilterFields=Code,Regional Coordinator;
      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=12000;
            SectionHeight=846;
          }
          CONTROLS
          {
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemTable=Table50075;
        DataItemTableView=SORTING(Provider No.,Mission Status,Intervention Status,Suspended,Closed)
                          WHERE(Intervention Status=CONST(Closed));
        PrintOnlyIfDetail=Yes;
        OnPreDataItem=BEGIN
                        SETRANGE("Closed DateTime",CREATEDATETIME(StartDate,0T),CREATEDATETIME(EndDate,0T));

                        TotalCpt := COUNT;
                        Window.OPEN(Text010);
                      END;

        OnAfterGetRecord=VAR
                           lArea@1100281001 : Record 284;
                           lService@1100281000 : Record 50066;
                         BEGIN
                           CurrCpt += 1;
                           IF CurrCpt >= 10 THEN BEGIN
                             Cpt += CurrCpt;
                             Window.UPDATE(1,ROUND(Cpt / TotalCpt * 9999,1));
                             CurrCpt := 0;
                           END;

                           // Cont“le filtre d‚partment
                           IF NOT PostCode.GET("Post Code",City) THEN
                             CurrReport.SKIP;
                           lArea.GET(PostCode."Area Code");
                           IF Area.GETFILTER(Code) <> '' THEN BEGIN
                             IF (STRPOS(Area.GETFILTER(Code),PostCode."Area Code") = 0) THEN
                               CurrReport.SKIP;
                           END;
                           // Contr“le Cause
                           IF lService.GET("Service No.") THEN BEGIN
                             IF Motif.GETFILTER(Code) <> '' THEN BEGIN
                               IF STRPOS(Motif.GETFILTER(Code),lService."Service Cause") = 0 THEN
                                 CurrReport.SKIP;
                               RepBuffer."Data Code 1" := lService."Service Cause";//Cause
                             END;
                           END;

                           RepBuffer.SETRANGE("Code 1",PostCode."Area Code"); // Nø d‚partement
                           RepBuffer."Code 1" := PostCode."Area Code"; // Nø d‚partement
                           RepBuffer."Code 3" := lArea."Regional Coordinator";//CR
                           RepBuffer."Code 4" := lArea."Tarif Zone Code";//Zone tarifaire

                           IF TypeOfVision = TypeOfVision::Provider THEN BEGIN
                             RepBuffer.SETRANGE("Code 2","Provider No.");
                             RepBuffer."Code 2" := "Provider No.";
                           END;
                           NewLine := TRUE;
                         END;

        OnPostDataItem=BEGIN
                         Window.CLOSE;
                       END;

        ReqFilterFields=Corporate No.,Main Speciality;
      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=12000;
            SectionHeight=846;
          }
          CONTROLS
          {
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemIndent=1;
        DataItemTable=Table32;
        DataItemTableView=SORTING(Service No.,Service Header No.,Intervention Line No.);
        OnPreDataItem=BEGIN
                        // Filtre
                        IF MaxAmount <> 0 THEN
                          SETFILTER("Cost Amount (Actual)",'<%1',MaxAmount);
                      END;

        OnAfterGetRecord=BEGIN
                           CALCFIELDS("Cost Amount (Actual)");
                           IF "Cost Amount (Actual)" = 0 THEN
                             CurrReport.SKIP;
                           IF NewLine THEN BEGIN
                             IF RepBuffer.ISEMPTY THEN BEGIN
                               RepBuffer."Data Amount 1" := 1;
                               RepBuffer.INSERT;
                               RepBuffer1 := RepBuffer;
                               RepBuffer1.INSERT;

                             END ELSE BEGIN
                               RepBuffer."Data Amount 1" := RepBuffer."Data Amount 1" + 1;
                             END;
                           END;

                           RepBuffer."Data Amount 2" := RepBuffer."Data Amount 2" + "Cost Amount (Actual)";// Co–t r‚el
                           RepBuffer."Data Amount 3" := RepBuffer."Data Amount 2" / RepBuffer."Data Amount 1";// Cout moyen
                           RepBuffer.MODIFY;
                           RepBuffer1 := RepBuffer;
                           RepBuffer1.MODIFY;
                           NewLine := FALSE;
                         END;

        DataItemLink=Service No.=FIELD(Service No.),
                     Service Header No.=FIELD(Service Header No.),
                     Intervention Line No.=FIELD(Line No.);
      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=12000;
            SectionHeight=846;
          }
          CONTROLS
          {
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemTable=Table2000000026;
        DataItemTableView=SORTING(Number)
                          WHERE(Number=CONST(1));
        OnPreDataItem=BEGIN
                        RepBuffer.RESET;

                        CASE TypeOfVision OF
                          TypeOfVision::State:BEGIN
                            // Tri par nø d‚partement
                            RepBuffer.SETCURRENTKEY("Code 1");
                          END;
                          TypeOfVision::Provider:BEGIN
                            RepBuffer.SETCURRENTKEY("Data Amount 1");
                            RepBuffer.SETVIEW('SORTING("Data Amount 1") ORDER(Descending)');
                          END;
                        END;
                        IF RepBuffer.COUNT = 0 THEN
                          CurrReport.BREAK;

                        ExportToExcel;
                      END;

        OnAfterGetRecord=VAR
                           lProviderSetup@1100281006 : Record 50011;
                           lProvider@1100281000 : Record 50000;
                           lSpeciality@1100281001 : Record 50005;
                           lBold@1100281002 : Boolean;
                           lColor@1100281003 : Integer;
                           lGap@1100281004 : Decimal;
                           lAvg@1100281005 : Decimal;
                           lTot@1100281007 : Decimal;
                           lTot1@1100281008 : Decimal;
                           lTot2@1100281009 : Decimal;
                           lTot3@1100281010 : Decimal;
                         BEGIN
                           RepBuffer.FINDFIRST;
                           RowNo := StartRowNo;

                           CASE TypeOfVision OF
                             TypeOfVision::Provider:BEGIN
                               InsertRow(RowNo,StartColNo,Text017,'','',FALSE,0);
                               InsertRow(RowNo,StartColNo + 1,Text018,'','',FALSE,0);
                               InsertRow(RowNo,StartColNo + 2,Text012,'','',FALSE,0);
                               InsertRow(RowNo,StartColNo + 3,Text013,'','',FALSE,0);
                               InsertRow(RowNo,StartColNo + 4,Text019,'','',FALSE,0);
                               lProviderSetup.FINDFIRST;
                             END;
                             TypeOfVision::State:BEGIN
                               InsertRow(RowNo,StartColNo,Text011,'','',FALSE,0);
                               InsertRow(RowNo,StartColNo + 1,Text012,'','',FALSE,0);
                               InsertRow(RowNo,StartColNo + 2,Text013,'','',FALSE,0);
                               InsertRow(RowNo,StartColNo + 3,Text014,'','',FALSE,0);
                               InsertRow(RowNo,StartColNo + 4,Text015,'','',FALSE,0);
                               InsertRow(RowNo,StartColNo + 5,Text016,'','',FALSE,0);
                             END;
                           END;


                           REPEAT
                             RowNo += 1;
                             CASE TypeOfVision OF
                               TypeOfVision::Provider:BEGIN
                                 IF lProvider.GET(RepBuffer."Code 2") THEN BEGIN
                                   InsertRow(RowNo,StartColNo,lProvider."No.",'','',FALSE,0);
                                   InsertRow(RowNo,StartColNo+1,lProvider.Name,'','',FALSE,0);
                                   InsertRow(RowNo,StartColNo+2,FORMAT(RepBuffer."Data Amount 3"),'','',FALSE,0); // Co–t moyen
                                   InsertRow(RowNo,StartColNo+3,FORMAT(RepBuffer."Data Amount 1"),'','',FALSE,0); // Nb Inter.
                                   lAvg := GetAverageTarifZone(RepBuffer."Code 2",RepBuffer."Data Code 1");
                                   IF lGap <> 0 THEN
                                     lGap := 100*(RepBuffer."Data Amount 3" - lAvg) /lGap;
                                   IF lGap > 0 THEN
                                     lColor :=  32768
                                   ELSE
                                     IF lGap > lProviderSetup."% Var. Allowed Average Cost" THEN
                                       lColor := 255;
                                   InsertRow(RowNo,StartColNo+4,FORMAT(lGap),'','',FALSE,lColor); // Ecart moyenne dep

                                   lTot1 := lTot1 + RepBuffer."Data Amount 1";
                                   lTot2 := lTot2 + RepBuffer."Data Amount 2";
                                   lTot := ROUND(lTot2/lTot1,0.01,'=');

                                 END;
                               END;
                               TypeOfVision::State:BEGIN
                                   InsertRow(RowNo,StartColNo,RepBuffer."Code 1",'','',FALSE,0);
                                   InsertRow(RowNo,StartColNo+1,FORMAT(RepBuffer."Data Amount 3"),'','',FALSE,0); // Co–t moyen
                                   InsertRow(RowNo,StartColNo+2,FORMAT(RepBuffer."Data Amount 1"),'','',FALSE,0); // Nb Inter.
                                   InsertRow(RowNo,StartColNo+3,FORMAT(RepBuffer."Data Amount 2"),'','',FALSE,0); // Montant TTC imput‚
                                   lAvg := GetAverageTarifZone(RepBuffer."Code 4",RepBuffer."Data Code 1");
                                   InsertRow(RowNo,StartColNo+4,FORMAT(lAvg),'','',FALSE,0); // Moyenne zone tarifaire
                                   IF lGap <> 0 THEN
                                     lGap := 100*(RepBuffer."Data Amount 3" - lAvg) /lGap;
                                   InsertRow(RowNo,StartColNo+5,FORMAT(lGap),'','',FALSE,0); // Ecart moyenne zone tar
                                   lTot1 := lTot1 + RepBuffer."Data Amount 1";
                                   lTot2 := lTot2 + RepBuffer."Data Amount 2";
                                   lTot := ROUND(lTot2/lTot1,0.01,'=');
                               END;
                             END;

                           UNTIL RepBuffer.NEXT = 0;
                           RowNo += 1;
                           CASE TypeOfVision OF
                             TypeOfVision::Provider:BEGIN
                               InsertRow(RowNo,StartColNo+1,Text027,'','',FALSE,0);
                               InsertRow(RowNo,StartColNo+2,FORMAT(lTot),'','',FALSE,0);
                               InsertRow(RowNo,StartColNo+3,FORMAT(lTot1),'','',FALSE,0);
                             END;
                             TypeOfVision::State:BEGIN
                               InsertRow(RowNo,StartColNo,Text026,'','',FALSE,0);
                               InsertRow(RowNo,StartColNo+1,FORMAT(lTot),'','',FALSE,0);
                               InsertRow(RowNo,StartColNo+2,FORMAT(lTot1),'','',FALSE,0);
                               InsertRow(RowNo,StartColNo+3,FORMAT(lTot2),'','',FALSE,0);
                             END;
                           END;
                         END;

        OnPostDataItem=BEGIN
                         IF (RepBuffer.COUNT <> 0) THEN
                           ViewExcel;
                       END;

      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=12000;
            SectionHeight=846;
          }
          CONTROLS
          {
          }
           }
      }
       }
  }
  REQUESTFORM
  {
    PROPERTIES
    {
      Width=7260;
      Height=2310;
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1100281004;TextBox;3630 ;1100 ;2530 ;440  ;InPage=-1;
                                                   CaptionML=[ENU=Vision Type;
                                                              FRA=Type de vision];
                                                   OptionCaptionML=[ENU=CR/State,CR/Provider;
                                                                    FRA=CR/D‚partement,CR/Prestataire];
                                                   OptionString=CR/State,CR/Provider;
                                                   SourceExpr=TypeOfVision }
      { 1100281005;Label  ;220  ;1100 ;3300 ;440  ;ParentControl=1100281004 }
      { 1100281002;TextBox;3630 ;0    ;2530 ;440  ;Name=StartDateTb;
                                                   InPage=-1;
                                                   CaptionML=[ENU=Start Date;
                                                              FRA=Date de d‚but];
                                                   SourceExpr=StartDate }
      { 1100281007;Label  ;220  ;0    ;3300 ;440  ;ParentControl=1100281002 }
      { 1100281008;TextBox;3630 ;550  ;2530 ;440  ;Name=EndDateTb;
                                                   InPage=-1;
                                                   CaptionML=[ENU=End Date;
                                                              FRA=Date de fin];
                                                   SourceExpr=EndDate }
      { 1100281009;Label  ;220  ;550  ;3300 ;440  ;ParentControl=1100281008 }
      { 1100281000;TextBox;3630 ;1650 ;2530 ;440  ;InPage=-1;
                                                   CaptionML=FRA=Montant ‚crˆt‚;
                                                   SourceExpr=MaxAmount }
      { 1100281001;Label  ;220  ;1650 ;3300 ;440  ;ParentControl=1100281000 }
    }
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1100281000;;Container;
                  ContainerType=ContentArea }

      { 1100281001;1;Group  ;
                  CaptionML=FRA=Options;
                  GroupType=Group }

      { 1100281002;2;Field  ;
                  CaptionML=[ENU=Start Date;
                             FRA=Date de d‚but];
                  SourceExpr=StartDate }

      { 1100281003;2;Field  ;
                  CaptionML=[ENU=End Date;
                             FRA=Date de fin];
                  SourceExpr=EndDate }

      { 1100281004;2;Field  ;
                  CaptionML=[ENU=Vision Type;
                             FRA=Type de vision];
                  OptionCaptionML=[ENU=CR/State,CR/Provider;
                                   FRA=CR/D‚partement,CR/Prestataire];
                  SourceExpr=TypeOfVision }

      { 1100281005;2;Field  ;
                  CaptionML=[ENU=Max Amount;
                             FRA=Montant ‚crˆt‚];
                  SourceExpr=MaxAmount }

    }
  }
  CODE
  {
    VAR
      ExcelBuffer@1100281001 : TEMPORARY Record 370;
      RepBuffer@1100281037 : TEMPORARY Record 8016755;
      RepBuffer1@1100281050 : TEMPORARY Record 8016755;
      PostCode@1100281003 : Record 225;
      Window@1100281000 : Dialog;
      Text000@1100281016 : TextConst 'ENU=Excel not found.;FRA=Programme Excel non trouv‚.';
      Text003@1100281015 : TextConst 'FRA=Veuillez saisir la date de d‚but.';
      Text004@1100281014 : TextConst 'FRA=Veuillez saisir la date de fin.';
      Text010@1100281013 : TextConst 'FRA=Avancement\@1@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@';
      Text011@1100281012 : TextConst 'ENU=Specialization;FRA=D‚partement';
      Text012@1100281039 : TextConst 'ENU=Objective Time;FRA=Co–t moyen';
      Text013@1100281040 : TextConst 'ENU=Interventions Nbr.;FRA=Nombre d''interventions';
      Text014@1100281041 : TextConst 'ENU=Time Average;FRA=Montant TTC imput‚';
      Text015@1100281042 : TextConst 'ENU=Gap;FRA=Moyenne zone tarifaire';
      Text016@1100281043 : TextConst 'ENU=Gap %;FRA=Ecart moyenne zone tarifaire';
      Filters@1100281034 : Text[1024];
      Filters1@1100281046 : Text[1024];
      Filters2@1100281049 : Text[1024];
      ExcelTemplatePath@1100281033 : Text[250];
      ExcelSheetName@1100281032 : Text[50];
      StartRowNo@1100281031 : Integer;
      StartColNo@1100281030 : Integer;
      RowNo@1100281029 : Integer;
      ColNo@1100281028 : Integer;
      Code1@1100281027 : Code[20];
      Code2@1100281026 : Code[20];
      TextCode1@1100281025 : Text[50];
      TextCode2@1100281024 : Text[50];
      TotalCpt@1100281019 : Integer;
      Cpt@1100281018 : Integer;
      CurrCpt@1100281017 : Integer;
      TypeOfVision@1100281035 : 'State,Provider';
      Text017@1100281005 : TextConst 'ENU=Provider No.;FRA=Nø prestataire';
      Text018@1100281006 : TextConst 'ENU=Provider Name;FRA=Nom prestataire';
      Text019@1100281002 : TextConst 'ENU=Gap %;FRA=Ecart moyenne d‚partement';
      Text020@1100281022 : TextConst 'FRA=Total %1';
      Text021@1100281023 : TextConst 'FRA=Filtre g‚ographique :';
      Text022@1100281021 : TextConst 'FRA=Filtre cause :';
      Text023@1100281047 : TextConst 'FRA=Filtre intervention :';
      Text024@1100281048 : TextConst 'FRA=Date :';
      Text025@1100281038 : TextConst 'FRA=Montant ‚crˆt‚ :';
      Text026@1100281051 : TextConst 'FRA=Moyenne CR :';
      Text027@1100281052 : TextConst 'FRA=Total :';
      TypeOfVisionStr@1100281036 : TextConst 'ENU=CR/Department,CR/Provider;FRA=CR/D‚partementale,CR/Prestataire';
      StartDate@1100281004 : Date;
      EndDate@1100281008 : Date;
      Err001@1100281009 : TextConst 'FRA=La date de d‚but et la date de fin doivent ˆtre renseign‚es';
      Err002@1100281010 : TextConst 'FRA=La date de d‚but doit ˆtre inf‚rieure … la date de fin.';
      Err003@1100281011 : TextConst 'FRA=Veuillez filtrer sur une sp‚cialit‚';
      Err004@1100281044 : TextConst 'FRA=La date de d‚but doit ˆtre le premier jour du mois';
      Err005@1100281045 : TextConst 'FRA=La date de fin doit ˆtre le dernier jour du mois';
      MaxAmount@1100281020 : Decimal;
      NewLine@1100281007 : Boolean;

    PROCEDURE InitValues@1100281005();
    VAR
      lReportSetup@1100281000 : Record 50115;
      lFound@1100281001 : Boolean;
      lReportID@1100281002 : Integer;
    BEGIN
      lReportID := 50092;
      lFound := lReportSetup.GET(lReportSetup."Object Type"::Report,lReportID,USERID);
      IF NOT lFound THEN
        lFound := lReportSetup.GET(lReportSetup."Object Type"::Report,lReportID,'');

      IF lFound THEN BEGIN
        ExcelTemplatePath := lReportSetup."Excel Template Path";
        ExcelSheetName := lReportSetup."Excel Template Tabs";
        StartRowNo := lReportSetup."First Line";
        StartColNo := lReportSetup."First Column";
      END ELSE BEGIN
        ExcelTemplatePath := '';
        ExcelSheetName  := 'Page1';
      END;

      IF StartRowNo <= 0 THEN
        StartRowNo := 8;

      IF StartColNo <= 0 THEN
        StartColNo := 1;
    END;

    PROCEDURE ExportToExcel@1100281001();
    VAR
      lArea@1100281002 : Record 284;
      lNotFoundPct@1100281001 : Decimal;
      lDeprivationPct@1100281000 : Decimal;
      lValues@1100281003 : ARRAY [4] OF Integer;
      lShowAvg@1100281004 : Boolean;
      lColNoGroup@1100281005 : Integer;
    BEGIN
      InitValues;

      RowNo := 2;
      InsertRow(RowNo,1,Text021,'','',FALSE,0);
      InsertRow(RowNo + 1,1,Text022,'','',FALSE,0);
      InsertRow(RowNo + 2,1,Text023,'','',FALSE,0);
      InsertRow(RowNo + 3,1,Text025,'','',FALSE,0);
      InsertRow(RowNo + 4,1,Text024,'','',FALSE,0);


      InsertRow(RowNo,2,Filters,'','',FALSE,0);
      InsertRow(RowNo + 1,2,Filters1,'','',FALSE,0);
      InsertRow(RowNo + 2,2,Filters2,'','',FALSE,0);
      InsertRow(RowNo + 3,2,FORMAT(MaxAmount),'','',FALSE,0);
      InsertRow(RowNo + 4,2,STRSUBSTNO('%1 - %2',StartDate,EndDate),'','',FALSE,0);

      RowNo := StartRowNo;
    END;

    PROCEDURE InsertRow@1100281004(RowNo@1000000000 : Integer;ColumnNo@1000000001 : Integer;CellValue@1000000002 : Text[250];CellFormula@1100281000 : Text[250];NbFormat@1000000003 : Text[30];pBold@1100281001 : Boolean;pColor@1100281002 : Integer);
    BEGIN
      ExcelBuffer.INIT;
      ExcelBuffer.VALIDATE("Row No.",RowNo);
      ExcelBuffer.VALIDATE("Column No.",ColumnNo);
      ExcelBuffer."Cell Value as Text" := CellValue;
      ExcelBuffer.NumberFormat := NbFormat;
      ExcelBuffer.Formula := CellFormula; //'';
      ExcelBuffer.Bold := pBold;
      ExcelBuffer.Color := pColor;
      ExcelBuffer.INSERT;
    END;

    PROCEDURE GetCurrCellID@1100281000() : Text[20];
    BEGIN
      EXIT(ExcelBuffer.xlColID + ExcelBuffer.xlRowID);
    END;

    PROCEDURE ViewExcel@1000000002();
    BEGIN

      IF ExcelTemplatePath <> '' THEN
        ExcelBuffer.OpenBook(ExcelTemplatePath,ExcelSheetName)
      ELSE
        ExcelBuffer.CreateBook;

      ExcelBuffer.CreateSheet(ExcelSheetName,ExcelSheetName,'','');
      ExcelBuffer.GiveUserControl;
      CLEAR(ExcelBuffer);
    END;

    PROCEDURE CreateExcelBuffer@1000000004();
    BEGIN
      ExcelBuffer.DELETEALL;
      CLEAR(ExcelBuffer);
    END;

    PROCEDURE GetAverageTarifZone@1100281024(pZone@1100281000 : Code[20];pCause@1100281001 : Code[20]) : Decimal;
    VAR
      lRepBuffer@1100281002 : Record 8016755;
      lRet@1100281004 : Decimal;
      lTot@1100281005 : Decimal;
      lNb@1100281006 : Decimal;
    BEGIN
      RepBuffer1.RESET;
      RepBuffer1.SETRANGE("Code 4",pZone);
      IF pCause <> '' THEN
        RepBuffer1.SETRANGE("Data Code 1",pCause);
      IF RepBuffer1.ISEMPTY THEN
        EXIT(0);
      RepBuffer1.FINDSET;
      REPEAT
        lTot := lTot + RepBuffer1."Data Amount 2";
        lNb :=  lNb + RepBuffer1."Data Amount 1";
      UNTIL RepBuffer1.NEXT = 0;
      IF lTot <> 0 THEN
        lRet := ROUND(lTot/lNb,0.01,'=');
      EXIT(lRet);
    END;

    PROCEDURE GetAverageDep@1100281029(pDep@1100281000 : Code[20]) : Decimal;
    VAR
      lRepBuffer@1100281002 : Record 8016755;
      lRepBuffer1@1100281001 : Record 8016755;
      lRet@1100281004 : Decimal;
      lTot@1100281005 : Decimal;
      lNb@1100281006 : Decimal;
    BEGIN
      RepBuffer1 := RepBuffer;
      RepBuffer1.RESET;

      RepBuffer1.SETRANGE("Code 2",pDep);
      IF lRepBuffer1.ISEMPTY THEN
        EXIT(0);
      RepBuffer1.FINDSET;
      REPEAT
        lTot := lTot + RepBuffer1."Data Amount 2";
        lNb :=  lNb + RepBuffer1."Data Amount 1";
      UNTIL lRepBuffer.NEXT = 0;
      IF lTot <> 0 THEN
        lRet := ROUND(lTot/lNb,0.01,'=');
      EXIT(lRet);
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}