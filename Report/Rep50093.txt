OBJECT Report 50093 Report 42 : Network Activity
{
  OBJECT-PROPERTIES
  {
    Date=15/10/13;
    Time=18:21:41;
    Modified=Yes;
    Version List=IMH6.01.08;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Report 42 : Network Activity;
               FRA=Report 42 : Activit‚ r‚seau];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  IF (StartDate = 0D) OR (EndDate = 0D) THEN
                    ERROR(Err001);
                  IF EndDate < StartDate THEN
                    ERROR(Err002);

                  Filters := Provider.GETFILTERS;

                  CASE PeriodType OF
                    PeriodType::Year:BEGIN
                      DateFormat := YearFormat;
                      LibPeriod := Text020;
                    END;
                    PeriodType::Quarter:BEGIN
                      DateFormat:=MonthFormat;
                      LibPeriod := Text023;
                    END;
                    PeriodType::Month:BEGIN
                      DateFormat:=MonthFormat;
                      LibPeriod := Text019;
                    END;
                    PeriodType::Week:BEGIN
                      DateFormat:=DayFormat;
                      LibPeriod := Text021;
                    END;
                    ELSE BEGIN
                      DateFormat := DayFormat;
                      LibPeriod := Text022;
                    END;
                  END;
                END;

  }
  DATAITEMS
  {
    { PROPERTIES
      {
        DataItemTable=Table50000;
        OnPreDataItem=BEGIN
                        SETFILTER(Status,'>=%1',Status::"Trial Period");
                      END;

        OnAfterGetRecord=VAR
                           lDate@1100281000 : Date;
                           lInsert@1100281001 : Boolean;
                         BEGIN
                           IF "IMH Territory Code" = '' THEN
                             CurrReport.SKIP;
                           IF Exclusion THEN BEGIN
                              IF NOT (("Exclusion Date" >= StartDate) AND ("Exclusion Date" <= EndDate)) THEN
                                CurrReport.SKIP;
                              lDate := "Exclusion Date";
                           END ELSE BEGIN
                              IF (Status <> Status::"Trial Period") THEN
                               CurrReport.SKIP;
                              IF NOT (("Status Change Date 4" >= StartDate) AND ("Status Change Date 4" <= EndDate)) THEN
                                CurrReport.SKIP;
                              lDate := "Status Change Date 4";
                           END;

                           CASE PeriodType OF
                             PeriodType::Year: lDate := DMY2DATE(1,1,DATE2DMY(lDate,3));
                             PeriodType::Quarter: BEGIN
                                 CASE DATE2DMY(lDate,2) OF
                                   1,2,3:lDate := DMY2DATE(1,1,DATE2DMY(lDate,3));
                                   4,5,6:lDate := DMY2DATE(1,4,DATE2DMY(lDate,3));
                                   7,8,9:lDate := DMY2DATE(1,7,DATE2DMY(lDate,3));
                                   10,11,12:lDate := DMY2DATE(1,10,DATE2DMY(lDate,3));
                                 END;
                               END;
                             PeriodType::Month: lDate := DMY2DATE(1,DATE2DMY(lDate,2),DATE2DMY(lDate,3));
                             PeriodType::Week: lDate := DWY2DATE(1,DATE2DWY(lDate,2),DATE2DMY(lDate,3));
                           END;
                           RepBuffer.RESET;
                           RepBuffer.SETRANGE("Date 1",lDate);
                           IF DisplayByRegion THEN
                             RepBuffer.SETRANGE("Code 1","IMH Territory Code");

                           IF RepBuffer.ISEMPTY THEN BEGIN
                             RepBuffer.INIT;
                             RepBuffer."Date 1" := lDate;
                             RepBuffer."Code 1" := "IMH Territory Code";
                             lInsert := TRUE;
                           END
                           ELSE BEGIN
                             lInsert := FALSE;
                             RepBuffer.FINDFIRST;
                           END;

                           IF Exclusion THEN
                             RepBuffer."Data Integer 1" := RepBuffer."Data Integer 1" +1
                           ELSE
                             RepBuffer."Data Integer 2" := RepBuffer."Data Integer 2" +1;
                           IF lInsert THEN
                             RepBuffer.INSERT
                           ELSE
                             RepBuffer.MODIFY;
                         END;

        ReqFilterFields=Network Assistant,IMH Territory Code;
      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=12000;
            SectionHeight=846;
          }
          CONTROLS
          {
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemTable=Table2000000026;
        DataItemTableView=SORTING(Number)
                          WHERE(Number=CONST(1));
        OnPreDataItem=BEGIN
                        IF DisplayByRegion THEN
                          CurrReport.BREAK;

                        RepBuffer.RESET;
                        RepBuffer.SETCURRENTKEY("Date 1");
                        IF RepBuffer.COUNT = 0 THEN
                          CurrReport.BREAK;

                        ExportToExcel;
                      END;

        OnAfterGetRecord=VAR
                           lProvider@1100281000 : Record 50000;
                           lTerritory@1100281001 : Record 286;
                           lBold@1100281002 : Boolean;
                           lColor@1100281003 : Integer;
                           lTot@1100281007 : Decimal;
                           lTot1@1100281008 : Decimal;
                           lTot2@1100281009 : Decimal;
                           lTot3@1100281010 : Decimal;
                           lRegionNb@1100281004 : Integer;
                           lColNo@1100281005 : Integer;
                         BEGIN
                           RepBuffer.FINDFIRST;
                           RowNo := StartRowNo;
                           InsertRow(RowNo,StartColNo,LibPeriod,'','',FALSE,0);
                           InsertRow(RowNo,StartColNo + 1,Text013,'','',FALSE,0);
                           InsertRow(RowNo,StartColNo + 2,Text015,'','',FALSE,0);
                           InsertRow(RowNo,StartColNo + 3,Text025,'','',FALSE,0);
                           REPEAT
                             RowNo += 1;
                             InsertRow(RowNo,StartColNo,FORMAT(RepBuffer."Date 1",0,DateFormat),'','',FALSE,0);
                             InsertRow(RowNo,StartColNo + 1,FORMAT(RepBuffer."Data Integer 2"),'','',FALSE,0);
                             InsertRow(RowNo,StartColNo + 2,FORMAT(RepBuffer."Data Integer 1"),'','',FALSE,0);
                             InsertRow(RowNo,StartColNo + 3,FORMAT(RepBuffer."Data Integer 2"
                               - RepBuffer."Data Integer 1"
                               + GetMissProvider(RepBuffer."Date 1")),'','',FALSE,0);
                             lTot1 := lTot1 + RepBuffer."Data Integer 2";
                             lTot2 := lTot2 + RepBuffer."Data Integer 1";
                           UNTIL RepBuffer.NEXT = 0;
                           RowNo += 1;
                           InsertRow(RowNo,StartColNo,Text024,'','',TRUE,0);
                           InsertRow(RowNo,StartColNo + 1,FORMAT(lTot1),'','',TRUE,0);
                           InsertRow(RowNo,StartColNo + 2,FORMAT(lTot2),'','',TRUE,0);
                         END;

        OnPostDataItem=BEGIN
                         RepBuffer.RESET;
                         IF (RepBuffer.COUNT <> 0) AND (NOT DisplayByRegion) THEN
                           ViewExcel;
                       END;

      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=12000;
            SectionHeight=846;
          }
          CONTROLS
          {
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemTable=Table2000000007;
        DataItemTableView=SORTING(Period Type,Period Start);
        OnPreDataItem=BEGIN
                        IF NOT DisplayByRegion THEN
                          CurrReport.BREAK;

                        CASE PeriodType OF
                          PeriodType::Year:Date.SETRANGE("Period Type","Period Type"::Year);
                          PeriodType::Quarter,PeriodType::Month:SETRANGE("Period Type","Period Type"::Month);
                          ELSE
                            SETRANGE("Period Type","Period Type"::Date);
                        END;
                        Territory.SETRANGE(Type,Territory.Type::IMH);
                        IF Territory.ISEMPTY THEN
                            CurrReport.BREAK;
                        NbRegion := Territory.COUNT;

                        ExportToExcel;

                        RowNo := StartRowNo;
                        InsertRow(RowNo,StartColNo,LibPeriod,'','',FALSE,0);
                        InsertRow(RowNo,StartColNo + 1,Text013,'','',FALSE,0);
                        InsertRow(RowNo,StartColNo + NbRegion + 1,Text014,'','',FALSE,0);
                        InsertRow(RowNo,StartColNo + NbRegion + 2,Text015,'','',FALSE,0);
                        InsertRow(RowNo,StartColNo + 2*NbRegion + 2,Text016,'','',FALSE,0);
                        InsertRow(RowNo,StartColNo + 2*NbRegion + 3,Text025,'','',FALSE,0);
                        FirstLine := TRUE;
                        RowNo := RowNo + 2;
                      END;

        OnAfterGetRecord=VAR
                           lColNo@1100281000 : Integer;
                           lTot@1100281001 : Decimal;
                           lTot1@1100281002 : Decimal;
                           lTotGlobal@1100281004 : ARRAY [2] OF Decimal;
                           lNotFirstLine@1100281005 : Boolean;
                           i@1100281006 : Integer;
                           j@1100281008 : Integer;
                           lIdxRegion@1100281003 : Integer;
                         BEGIN
                           lColNo := StartColNo + 1;
                           lTot := 0;
                           lTot1 := 0;

                           RepBuffer.RESET;
                           RepBuffer.SETRANGE("Date 1",Date."Period Start");
                           IF NOT RepBuffer.ISEMPTY THEN BEGIN

                           InsertRow(RowNo,StartColNo,FORMAT(Date."Period Start",0,DateFormat),'','',FALSE,0);
                           lIdxRegion := 0;
                           Territory.FINDSET;
                           REPEAT
                             lIdxRegion += 1;
                             IF FirstLine THEN BEGIN
                               InsertRow(StartRowNo + 1,lColNo,Territory.Name,'','',FALSE,0);
                               InsertRow(StartRowNo + 1,1 +NbRegion + lColNo,Territory.Name,'','',FALSE,0);
                               j += 1;
                               IdxRegion[j] := lColNo;
                             END;
                             RepBuffer.SETRANGE("Code 1",Territory.Code);
                             IF RepBuffer.FINDSET THEN BEGIN
                               InsertRow(RowNo,lColNo ,FORMAT(RepBuffer."Data Integer 2"),'','',FALSE,0);
                               InsertRow(RowNo,1 + lColNo + NbRegion ,FORMAT(RepBuffer."Data Integer 1"),'','',FALSE,0);
                               lTot := lTot + RepBuffer."Data Integer 2";
                               lTot1 := lTot1 + RepBuffer."Data Integer 1";
                               lTotGlobal[1] := lTotGlobal[1] + RepBuffer."Data Integer 2";
                               lTotGlobal[2] := lTotGlobal[2] + RepBuffer."Data Integer 1";

                             END ELSE BEGIN
                             END;
                             lColNo +=1;
                           UNTIL Territory.NEXT = 0;
                           InsertRow(RowNo,StartColNo + NbRegion + 1,FORMAT(lTot),'','',FALSE,0);
                           InsertRow(RowNo,StartColNo + 2*NbRegion + 2 ,FORMAT(lTot1),'','',FALSE,0);
                           InsertRow(RowNo,StartColNo + 2*NbRegion + 3,FORMAT(lTot-lTot1 + GetMissProvider(RepBuffer."Date 1")),'','',FALSE,0);
                           FirstLine := FALSE;
                           RowNo +=1;

                           END;
                         END;

        OnPostDataItem=VAR
                         i@1100281000 : Integer;
                         j@1100281001 : Integer;
                       BEGIN
                         RepBuffer.RESET;

                         IF (RepBuffer.COUNT <> 0) AND (DisplayByRegion) THEN
                           ViewExcel;
                       END;

      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=12000;
            SectionHeight=846;
          }
          CONTROLS
          {
          }
           }
      }
       }
  }
  REQUESTFORM
  {
    PROPERTIES
    {
      Width=7260;
      Height=2310;
    }
    CONTROLS
    {
      { 1100281002;TextBox;3630 ;550  ;2530 ;440  ;Name=StartDateTb;
                                                   InPage=-1;
                                                   CaptionML=[ENU=Start Date;
                                                              FRA=Date de d‚but];
                                                   SourceExpr=StartDate }
      { 1100281007;Label  ;220  ;550  ;3300 ;440  ;ParentControl=1100281002 }
      { 1100281008;TextBox;3630 ;1100 ;2530 ;440  ;Name=EndDateTb;
                                                   InPage=-1;
                                                   CaptionML=[ENU=End Date;
                                                              FRA=Date de fin];
                                                   SourceExpr=EndDate }
      { 1100281009;Label  ;220  ;1100 ;3300 ;440  ;ParentControl=1100281008 }
      { 1100281000;TextBox;3630 ;0    ;2530 ;440  ;InPage=-1;
                                                   CaptionML=[ENU=Period;
                                                              FRA=P‚riode];
                                                   OptionCaptionML=[ENU=Year,Quarter,Month,Week,Day;
                                                                    FRA=Ann‚e,Trimestre,Mois,Semaine,Jour];
                                                   OptionString=Year,Quarter,Month,Week,Day;
                                                   SourceExpr=PeriodType }
      { 1100281001;Label  ;220  ;0    ;3300 ;440  ;ParentControl=1100281000 }
      { 1100281005;CheckBox;3630;1650 ;440  ;440  ;InPage=-1;
                                                   ShowCaption=No;
                                                   CaptionML=[ENU=Display by region;
                                                              FRA=Pr‚sentation par zone];
                                                   SourceExpr=DisplayByRegion }
      { 1100281006;Label  ;220  ;1650 ;3300 ;440  ;ParentControl=1100281005 }
    }
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1100281000;;Container;
                  ContainerType=ContentArea }

      { 1100281001;1;Group  ;
                  CaptionML=FRA=Options;
                  GroupType=Group }

      { 1100281006;2;Field  ;
                  CaptionML=[ENU=Period;
                             FRA=P‚riode];
                  OptionCaptionML=[ENU=Year,Quarter,Month,Week,Day;
                                   FRA=Ann‚e,Trimestre,Mois,Semaine,Jour];
                  SourceExpr=PeriodType }

      { 1100281002;2;Field  ;
                  CaptionML=[ENU=Start Date;
                             FRA=Date de d‚but];
                  SourceExpr=StartDate }

      { 1100281003;2;Field  ;
                  CaptionML=[ENU=End Date;
                             FRA=Date de fin];
                  SourceExpr=EndDate }

      { 1100281004;2;Field  ;
                  CaptionML=[ENU=DisplayByRegion;
                             FRA=Pr‚sentation par zone];
                  OptionCaptionML=[ENU=CR/State,CR/Provider;
                                   FRA=CR/D‚partement,CR/Prestataire];
                  SourceExpr=DisplayByRegion }

    }
  }
  CODE
  {
    VAR
      ExcelBuffer@1100281001 : TEMPORARY Record 370;
      RepBuffer@1100281037 : TEMPORARY Record 8016755;
      Territory@1100281003 : Record 286;
      Window@1100281000 : Dialog;
      Text000@1100281016 : TextConst 'ENU=Excel not found.;FRA=Programme Excel non trouv‚.';
      Text003@1100281015 : TextConst 'FRA=Veuillez saisir la date de d‚but.';
      Text004@1100281014 : TextConst 'FRA=Veuillez saisir la date de fin.';
      Text010@1100281013 : TextConst 'FRA=Avancement\@1@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@';
      Text011@1100281012 : TextConst 'ENU=Specialization;FRA=BILAN QUOTIDIEN DPR';
      Text012@1100281039 : TextConst 'ENU=Objective Time;FRA=DATE';
      Text013@1100281040 : TextConst 'ENU=Interventions Nbr.;FRA=NB INTEGRATION';
      Text014@1100281041 : TextConst 'ENU=Time Average;FRA=TOTAL INT';
      Text015@1100281042 : TextConst 'ENU=Gap;FRA=NB EXCLUSION';
      Text016@1100281043 : TextConst 'ENU=Gap %;FRA=TOTAL EXCL';
      Filters@1100281034 : Text[1024];
      ExcelTemplatePath@1100281033 : Text[250];
      ExcelSheetName@1100281032 : Text[50];
      StartRowNo@1100281031 : Integer;
      StartColNo@1100281030 : Integer;
      RowNo@1100281029 : Integer;
      ColNo@1100281028 : Integer;
      Code1@1100281027 : Code[20];
      Code2@1100281026 : Code[20];
      TextCode1@1100281025 : Text[50];
      TextCode2@1100281024 : Text[50];
      TotalCpt@1100281019 : Integer;
      Cpt@1100281018 : Integer;
      CurrCpt@1100281017 : Integer;
      PeriodType@1100281035 : 'Year,Quarter,Month,Week,Day';
      StartDate@1100281004 : Date;
      EndDate@1100281008 : Date;
      Text017@1100281002 : TextConst 'FRA=Filtres :';
      Text018@1100281005 : TextConst 'FRA=Date :';
      Text019@1100281006 : TextConst 'FRA=MOIS';
      Text020@1100281038 : TextConst 'FRA=ANNEE';
      Text021@1100281044 : TextConst 'FRA=SEMAINE';
      Text022@1100281045 : TextConst 'FRA=DATE';
      Text023@1100281047 : TextConst 'FRA=TRIMESTRE';
      Text024@1100281048 : TextConst 'FRA=Total %1';
      Text025@1100281049 : TextConst 'FRA=Nb prestataires missionnables';
      Err001@1100281009 : TextConst 'FRA=La date de d‚but et la date de fin doivent ˆtre renseign‚es';
      Err002@1100281010 : TextConst 'FRA=La date de d‚but doit ˆtre inf‚rieure … la date de fin.';
      MaxAmount@1100281020 : Decimal;
      DisplayByRegion@1100281053 : Boolean;
      DateFormat@1100281007 : Text[30];
      YearFormat@1100281011 : TextConst 'FRA=<Year4>';
      MonthFormat@1100281021 : TextConst 'FRA=<Month Text> <Year4>';
      DayFormat@1100281022 : TextConst 'FRA=<Day,2>/<Month,2>/<Year>';
      NbRegion@1100281023 : Integer;
      FirstLine@1100281036 : Boolean;
      LibPeriod@1100281046 : Text[30];
      IdxRegion@1100281050 : ARRAY [50] OF Integer;
      TotRegion@1100281051 : ARRAY [50] OF Decimal;
      TotRegion1@1100281052 : ARRAY [50] OF Decimal;

    PROCEDURE InitValues@1100281005();
    VAR
      lReportSetup@1100281000 : Record 50115;
      lFound@1100281001 : Boolean;
      lReportID@1100281002 : Integer;
      lInsert@1100281003 : Boolean;
    BEGIN
      lReportID := 50093;
      lFound := lReportSetup.GET(lReportSetup."Object Type"::Report,lReportID,USERID);
      IF NOT lFound THEN
        lFound := lReportSetup.GET(lReportSetup."Object Type"::Report,lReportID,'');

      IF lFound THEN BEGIN
        ExcelTemplatePath := lReportSetup."Excel Template Path";
        ExcelSheetName := lReportSetup."Excel Template Tabs";
        StartRowNo := lReportSetup."First Line";
        StartColNo := lReportSetup."First Column";
      END ELSE BEGIN
        ExcelTemplatePath := '';
        ExcelSheetName  := 'Page1';
        StartRowNo := 10;
        StartColNo := 1;
      END;

      IF StartRowNo <= 0 THEN
        StartRowNo := 1;

      IF StartColNo <= 0 THEN
        StartColNo := 1;
    END;

    PROCEDURE ExportToExcel@1100281001();
    VAR
      lArea@1100281002 : Record 284;
      lNotFoundPct@1100281001 : Decimal;
      lDeprivationPct@1100281000 : Decimal;
      lValues@1100281003 : ARRAY [4] OF Integer;
      lShowAvg@1100281004 : Boolean;
      lColNoGroup@1100281005 : Integer;
    BEGIN
      InitValues;

      RowNo := 2;
      InsertRow(RowNo,1,Text017,'','',FALSE,0);
      InsertRow(RowNo + 1,1,Text018,'','',FALSE,0);

      InsertRow(RowNo,2,Filters,'','',FALSE,0);
      InsertRow(RowNo + 1,2,STRSUBSTNO('%1 - %2',StartDate,EndDate),'','',FALSE,0);

      RowNo := StartRowNo;
    END;

    PROCEDURE InsertRow@1100281004(RowNo@1000000000 : Integer;ColumnNo@1000000001 : Integer;CellValue@1000000002 : Text[250];CellFormula@1100281000 : Text[250];NbFormat@1000000003 : Text[30];pBold@1100281001 : Boolean;pColor@1100281002 : Integer);
    BEGIN
      ExcelBuffer.INIT;
      ExcelBuffer.VALIDATE("Row No.",RowNo);
      ExcelBuffer.VALIDATE("Column No.",ColumnNo);
      ExcelBuffer."Cell Value as Text" := CellValue;
      ExcelBuffer.NumberFormat := NbFormat;
      ExcelBuffer.Formula := CellFormula; //'';
      ExcelBuffer.Bold := pBold;
      ExcelBuffer.Color := pColor;
      ExcelBuffer.INSERT;
    END;

    PROCEDURE GetCurrCellID@1100281000() : Text[20];
    BEGIN
      EXIT(ExcelBuffer.xlColID + ExcelBuffer.xlRowID);
    END;

    PROCEDURE ViewExcel@1000000002();
    BEGIN

      IF ExcelTemplatePath <> '' THEN
        ExcelBuffer.OpenBook(ExcelTemplatePath,ExcelSheetName)
      ELSE
        ExcelBuffer.CreateBook;

      ExcelBuffer.CreateSheet(ExcelSheetName,ExcelSheetName,'','');
      ExcelBuffer.GiveUserControl;
      CLEAR(ExcelBuffer);
    END;

    PROCEDURE CreateExcelBuffer@1000000004();
    BEGIN
      ExcelBuffer.DELETEALL;
      CLEAR(ExcelBuffer);
    END;

    PROCEDURE GetMissProvider@1100281002(pDate@1100281000 : Date) : Decimal;
    VAR
      lProvider@1100281001 : Record 50000;
    BEGIN
      lProvider.SETFILTER(lProvider.Status,'>=%1',lProvider.Status::"Trial Period");
      lProvider.SETFILTER("IMH Territory Code",'<>%1','');
      //lProvider.SETRANGE(Exclusion,FALSE);
      lProvider.SETFILTER("Exclusion Date",'%1|>=%2',0D,pDate);
      lProvider.SETFILTER("Status Change Date 4",'<%1',pDate);
      EXIT(lProvider.COUNT);
    END;

    BEGIN
    {
      /** @r IMH01 @d 14/10/13 @a ISAT.ST @v IMH6.01.353 @s Reorganisation region IMH @h 4760 @c Renommage CR / AR / R‚gion */
    }
    END.
  }
  RDLDATA
  {
  }
}