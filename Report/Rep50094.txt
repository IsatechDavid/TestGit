OBJECT Report 50094 Report 55 : Etat pot. r‚seau
{
  OBJECT-PROPERTIES
  {
    Date=15/10/13;
    Time=18:21:44;
    Modified=Yes;
    Version List=IMH6.01.08;
  }
  PROPERTIES
  {
    CaptionML=FRA=Report 55 : Etat potentialit‚ du r‚seau;
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   ProviderSetup.GET;
                 END;

    OnPreReport=BEGIN
                  //IMHTerritoryFilter := "Post Code".GETFILTER("IMH Territory Code");
                  //AreaFilter := "Post Code".GETFILTER("Area Code");

                  NbDay := EndDate - StartDate + 1;
                  PrevStartDate := CALCDATE('<-1Y>',StartDate);
                  PrevEndDate := CALCDATE('<-1Y>',EndDate);
                END;

  }
  DATAITEMS
  {
    { PROPERTIES
      {
        DataItemTable=Table50000;
        OnPreDataItem=BEGIN
                        TotalCpt := COUNT;
                        Window.OPEN(Text010);
                      END;

        OnAfterGetRecord=VAR
                           lEmergency@1100281006 : Boolean;
                           lUnavailability1@1100281005 : Boolean;
                           lUnavailability2@1100281003 : Boolean;
                           lDescription@1100281004 : Text[50];
                           lSpecialityCode@1100281002 : Code[10];
                           lReasonCode@1100281001 : Code[10];
                           lNbOpenDay@1100281008 : Integer;
                           lNbWorkingDay@1100281009 : Integer;
                           lNbInterv@1100281007 : Integer;
                           lPresenceRate@1100281000 : Decimal;
                           lIntervTime@1100281011 : Integer;
                           lAverageTime@1100281010 : Decimal;
                           lTheoreticalCapacity@1100281012 : Decimal;
                         BEGIN
                           CurrCpt += 1;
                           IF CurrCpt >= 10 THEN BEGIN
                             Cpt += CurrCpt;
                             Window.UPDATE(1,ROUND(Cpt / TotalCpt * 9999,1));
                             CurrCpt := 0;
                           END;

                           lNbOpenDay := 0;
                           lNbWorkingDay := 0;
                           lNbInterv := 0;
                           lIntervTime := 0;

                           Date.SETRANGE("Period Type",Date."Period Type"::Date);
                           Date.SETRANGE("Period Start",StartDate,EndDate);
                           IF Date.FINDSET THEN BEGIN
                             REPEAT
                               lUnavailability1 := CalendarMgt.CheckDateStatus(
                                 ProviderSetup."Base Standard Calendar Code",Date."Period Start",lDescription);

                               ProviderCalendarMgt.CheckProviderDateStatus(
                                 "No.",
                                 lEmergency,
                                 lSpecialityCode,
                                 Date."Period Start",
                                 lReasonCode,
                                 lDescription,
                                 lUnavailability2);

                               IF NOT lUnavailability1 THEN
                                 lNbOpenDay := lNbOpenDay  + 1;

                               IF NOT lUnavailability2 THEN
                                 lNbWorkingDay := lNbWorkingDay  + 1;

                             UNTIL Date.NEXT = 0;
                           END;

                           IF lNbOpenDay <> 0 THEN
                             lPresenceRate := lNbWorkingDay / lNbOpenDay
                           ELSE
                             lPresenceRate := 0;

                           IF NOT PostCode.GET("Post Code",City) THEN
                             PostCode.INIT;

                           TempBuffer.INIT;
                           TempBuffer."Code 1" := PostCode."Admin. Territory Code";
                           TempBuffer."Code 2" := PostCode."Area Code";
                           TempBuffer."Code 3" := "No.";
                           TempBuffer."Data Text 1" := Name;
                           TempBuffer."Data Text 2" := City;
                           TempBuffer.INSERT;

                           ServIntervLine.RESET;
                           ServIntervLine.SETCURRENTKEY("Provider No.");
                           ServIntervLine.SETRANGE("Provider No.","No.");
                           ServIntervLine.SETRANGE("Assigned Date",PrevStartDate,PrevEndDate);
                           IF ServIntervLine.FINDSET THEN BEGIN
                             lNbInterv := ServIntervLine.COUNT;
                             REPEAT
                               IF PostCode.GET(ServIntervLine."Post Code",ServIntervLine.City) THEN BEGIN
                                 TempBuffer.RESET;
                                 TempBuffer.SETRANGE("Code 1",PostCode."Admin. Territory Code");
                                 TempBuffer.SETRANGE("Code 2",PostCode."Area Code");
                                 TempBuffer.SETRANGE("Code 3","No.");
                                 IF TempBuffer.FINDFIRST THEN BEGIN
                                   TempBuffer."Data Integer 1" := TempBuffer."Data Integer 1" + 1;
                                   TempBuffer.MODIFY;
                                 END ELSE BEGIN
                                   TempBuffer.INIT;
                                   TempBuffer."Code 1" := PostCode."Admin. Territory Code";
                                   TempBuffer."Code 2" := PostCode."Area Code";
                                   TempBuffer."Code 3" := "No.";
                                   TempBuffer."Data Text 1" := Name;
                                   TempBuffer."Data Text 2" := City;
                                   TempBuffer."Data Integer 1" := 1;
                                   TempBuffer.INSERT;
                                 END;
                               END;

                               IF (ServIntervLine."Work End Date" <> 0D) AND (ServIntervLine."Work Start Date" <> 0D) THEN
                                 lIntervTime := lIntervTime + (ServIntervLine."Work End Date" - ServIntervLine."Work Start Date" + 1);

                             UNTIL ServIntervLine.NEXT = 0;
                           END;

                           IF lNbInterv <> 0 THEN
                             lAverageTime := lIntervTime / lNbInterv
                           ELSE
                             lAverageTime := 0;

                           IF lAverageTime <> 0 THEN
                             lTheoreticalCapacity := NbDay * "Current Interv. Limit Max." * lPresenceRate / lAverageTime
                           ELSE
                             lTheoreticalCapacity := 0;

                           CALCFIELDS("Current Service Interv. Nb");

                           TempBuffer.RESET;
                           //**TempBuffer.SETCURRENTKEY("Code 3");
                           TempBuffer.SETRANGE("Code 3","No.");
                           IF TempBuffer.FINDSET THEN
                             REPEAT
                               TempBuffer."Data Amount 1" := ROUND(TempBuffer."Data Integer 1" * (1 + MissionsIncreasePct / 100)); //Nb missions pr‚vues
                               IF lNbInterv <> 0  THEN
                                 TempBuffer."Data Amount 2" := ROUND(lTheoreticalCapacity * TempBuffer."Data Integer 1" / lNbInterv); //Capacit‚ th‚orique
                               TempBuffer."Data Amount 3" := ROUND(lPresenceRate,0.01); //Taux de pr‚sence
                               TempBuffer."Data Amount 4" := ROUND("Current Service Interv. Nb",0.01);
                               TempBuffer.MODIFY;

                               TempTerritory.Code := PostCode."Admin. Territory Code";
                               IF TempTerritory.INSERT THEN;

                               TempArea.Code := PostCode."Area Code";
                               TempArea."Admin. Territory Code" := PostCode."Admin. Territory Code";
                               IF TempArea.INSERT THEN;
                             UNTIL TempBuffer.NEXT = 0;
                         END;

        OnPostDataItem=BEGIN
                         Window.CLOSE;

                         ExportToExcel;
                       END;

        ReqFilterFields=No.;
      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=12000;
            SectionHeight=846;
          }
          CONTROLS
          {
          }
           }
      }
       }
  }
  REQUESTFORM
  {
    PROPERTIES
    {
      Width=7810;
      Height=2860;
      SaveValues=Yes;
      OnOpenForm=BEGIN
                   MissionsIncreasePct := ProviderSetup."Missions Increase / N-1 %";
                 END;

    }
    CONTROLS
    {
      { 1100281004;TextBox;3630 ;220  ;3850 ;440  ;InPage=-1;
                                                   CaptionML=[ENU=Group By;
                                                              FRA=Type de rupture];
                                                   OptionCaptionML=[ENU=Provider,Area,IMH Territory;
                                                                    FRA=Prestataire,D‚partement,Zone IMH];
                                                   OptionString=Provider,Area,IMH Territory;
                                                   SourceExpr=GroupBy }
      { 1100281005;Label  ;220  ;220  ;3300 ;440  ;ParentControl=1100281004 }
      { 1100281000;TextBox;3630 ;880  ;1700 ;440  ;InPage=-1;
                                                   CaptionML=[ENU=Start Date;
                                                              FRA=Date de d‚but];
                                                   BlankZero=Yes;
                                                   SourceExpr=StartDate }
      { 1100281001;Label  ;220  ;880  ;3300 ;440  ;ParentControl=1100281000 }
      { 1100281002;TextBox;3630 ;1430 ;1700 ;440  ;InPage=-1;
                                                   CaptionML=[ENU=End Date;
                                                              FRA=Date de fin];
                                                   BlankZero=Yes;
                                                   SourceExpr=EndDate }
      { 1100281003;Label  ;220  ;1430 ;3300 ;440  ;ParentControl=1100281002 }
      { 1100281006;TextBox;3630 ;2090 ;1700 ;440  ;InPage=-1;
                                                   CaptionML=[ENU=Missions Increase / N-1 %;
                                                              FRA=% augmentation missions / N-1];
                                                   SourceExpr=MissionsIncreasePct }
      { 1100281007;Label  ;220  ;2090 ;3300 ;440  ;ParentControl=1100281006 }
    }
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1100281002;;Container;
                  ContainerType=ContentArea }

      { 1100281004;1;Group  ;
                  CaptionML=[ENU=Options;
                             FRA=Options];
                  GroupType=Group }

      { 1100281000;2;Field  ;
                  CaptionML=[ENU=Start Year;
                             FRA=Ann‚e de d‚but];
                  BlankZero=Yes;
                  SourceExpr=StartYear }

      { 1100281001;2;Field  ;
                  CaptionML=[ENU=End Year;
                             FRA=Ann‚e de fin];
                  BlankZero=Yes;
                  SourceExpr=EndYear }

      { 1100281003;2;Field  ;
                  CaptionML=[ENU=Group By;
                             FRA=Type de rupture];
                  OptionCaptionML=[ENU=IMH Territory,Area&Spec,Corporate,Service Order Type,Corporate&ServOrderType;
                                   FRA=Zone IMH,D‚partement & Sp‚cialit‚,Grand compte,Type de produit,Grand compte & Type de produit];
                  SourceExpr=GroupBy }

    }
  }
  CODE
  {
    VAR
      ProviderSetup@1100281003 : Record 50011;
      TempBuffer@1100281001 : TEMPORARY Record 50143;
      TempTerritory@1100281011 : TEMPORARY Record 286;
      TempArea@1100281021 : TEMPORARY Record 284;
      ExcelBuffer@1100281016 : TEMPORARY Record 370;
      ServIntervLine@1100281058 : Record 50075;
      PostCode@1100281048 : Record 225;
      Date@1100281059 : Record 2000000007;
      Territory@1100281065 : Record 286;
      Area@1100281064 : Record 284;
      ProviderCalendarMgt@1100281060 : Codeunit 50007;
      CalendarMgt@1100281061 : Codeunit 7600;
      Window@1100281018 : Dialog;
      Text000@1100281012 : TextConst 'ENU=Excel not found.;FRA=Programme Excel non trouv‚.';
      Text001@1100281007 : TextConst 'FRA=Veuillez saisir le statut processus d‚part.';
      Text002@1100281008 : TextConst 'FRA=Veuillez saisir le statut processus arriv‚e.';
      Text003@1100281015 : TextConst 'FRA=Veuillez saisir la date de d‚but.';
      Text004@1100281014 : TextConst 'FRA=Veuillez saisir la date de fin.';
      Text010@1100281019 : TextConst 'FRA=Avancement\@1@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@';
      Text011@1100281005 : TextConst 'ENU=Status Change Delay To Excel;FRA=D‚lai de changement de statut';
      Filters@1100281031 : Text[1024];
      IMHTerritoryFilter@1100281038 : Text[200];
      AreaFilter@1100281036 : Text[200];
      CorporateFilter@1100281006 : Text[200];
      ServOrderTypeFilter@1100281035 : Text[200];
      GroupBy@1100281013 : 'Provider,Area,IMH Territory';
      ExcelTemplatePath@1100281024 : Text[250];
      ExcelSheetName@1100281025 : Text[50];
      StartRowNo@1100281023 : Integer;
      StartColNo@1100281020 : Integer;
      Text020@1100281026 : TextConst 'ENU=Criteria 1:;FRA=CritŠre 1:';
      Text021@1100281028 : TextConst 'ENU=Criteria 2:;FRA=CritŠre 2:';
      Text022@1100281029 : TextConst 'ENU=Filters :;FRA=Filtres :';
      Text023@1100281030 : TextConst 'ENU=Year :;FRA=Ann‚es :';
      RowNo@1100281034 : Integer;
      ColNo@1100281033 : Integer;
      Text030@1100281004 : TextConst 'FRA=Type';
      Text031@1100281002 : TextConst 'FRA=Code';
      Text032@1100281017 : TextConst 'FRA=Description';
      Text033@1100281040 : TextConst 'FRA=Ville prestataire';
      Text034@1100281041 : TextConst 'FRA=Nombre d''intervention en cours';
      Text035@1100281042 : TextConst 'FRA=Nombre de missions pr‚vues sur la p‚riode';
      Text036@1100281043 : TextConst 'FRA=Capacit‚ th‚orique de la p‚riode';
      Text037@1100281044 : TextConst 'FRA=Taux de pr‚sence';
      Code1@1100281009 : Code[20];
      Code2@1100281010 : Code[20];
      NotFoundNoEmerg@1100281027 : Integer;
      NotFoundEmerg@1100281022 : Integer;
      NbDeprivation@1100281046 : Integer;
      Text038@1100281045 : TextConst 'FRA=Prestataire';
      Text039@1100281049 : TextConst 'FRA=D‚partement';
      Text040@1100281050 : TextConst 'FRA=R‚gion';
      TextCode1@1100281051 : Text[50];
      TextCode2@1100281052 : Text[50];
      StartYear@1100281032 : Integer;
      EndYear@1100281037 : Integer;
      StartDate@1100281039 : Date;
      EndDate@1100281056 : Date;
      PrevStartDate@1100281047 : Date;
      PrevEndDate@1100281063 : Date;
      TotalCpt@1100281055 : Integer;
      Cpt@1100281054 : Integer;
      CurrCpt@1100281053 : Integer;
      MissionsIncreasePct@1100281057 : Decimal;
      NbDay@1100281062 : Integer;

    PROCEDURE InitValues@1100281005();
    VAR
      lReportSetup@1100281000 : Record 50115;
      lFound@1100281001 : Boolean;
      lReportID@1100281002 : Integer;
    BEGIN
      lReportID := 50094;
      lFound := lReportSetup.GET(lReportSetup."Object Type"::Report,lReportID,USERID);
      IF NOT lFound THEN
        lFound := lReportSetup.GET(lReportSetup."Object Type"::Report,lReportID,'');

      IF lFound THEN BEGIN
        ExcelTemplatePath := lReportSetup."Excel Template Path";
        ExcelSheetName := lReportSetup."Excel Template Tabs";
        StartRowNo := lReportSetup."First Line";
        StartColNo := lReportSetup."First Column";
      END ELSE BEGIN
        ExcelTemplatePath := '';
        ExcelSheetName  := 'Page1';
      END;

      IF StartRowNo <= 0 THEN
        StartRowNo := 8;

      IF StartColNo <= 0 THEN
        StartColNo := 1;
    END;

    PROCEDURE ExportToExcel@1100281001();
    VAR
      lNotFoundPct@1100281001 : Decimal;
      lDeprivationPct@1100281000 : Decimal;
      lTotalArea1@1100281002 : Decimal;
      lTotalArea2@1100281004 : Decimal;
      lTotalTerritory1@1100281003 : Decimal;
      lTotalTerritory2@1100281005 : Decimal;
    BEGIN
      InitValues;

      RowNo := 2;
      InsertRow(RowNo,1,Text020,'','');
      InsertRow(RowNo + 1,1,Text021,'','');
      InsertRow(RowNo + 2,1,Text022,'','');
      InsertRow(RowNo + 3,1,Text023,'','');

      InsertRow(RowNo,2,TextCode1,'','');
      InsertRow(RowNo + 1,2,TextCode2,'','');
      InsertRow(RowNo + 2,2,Filters,'','');
      InsertRow(RowNo + 3,2,STRSUBSTNO('%1 - %2',StartYear,EndYear),'','');

      RowNo := StartRowNo;
      ColNo := StartColNo;

      InsertRow(RowNo,ColNo,Text030,'','');
      InsertRow(RowNo,ColNo + 1,Text031,'','');
      InsertRow(RowNo,ColNo + 2,Text032,'','');
      InsertRow(RowNo,ColNo + 3,Text033,'','');
      InsertRow(RowNo,ColNo + 4,Text034,'','');
      InsertRow(RowNo,ColNo + 5,Text035,'','');
      InsertRow(RowNo,ColNo + 6,Text036,'','');
      InsertRow(RowNo,ColNo + 7,Text037,'','');

      TempTerritory.RESET;
      IF TempTerritory.FINDSET THEN BEGIN
        REPEAT
          lTotalTerritory1 := 0;
          lTotalTerritory2 := 0;

          TempArea.RESET;
          TempArea.SETRANGE("Admin. Territory Code",TempTerritory.Code);
          IF TempArea.FINDSET THEN BEGIN
            REPEAT
              lTotalArea1 := 0;
              lTotalArea2 := 0;

              TempBuffer.RESET;
              TempBuffer.SETRANGE("Code 1",TempTerritory.Code);
              TempBuffer.SETRANGE("Code 2",TempArea.Code);
              IF TempBuffer.FINDSET THEN BEGIN
                REPEAT
                  RowNo := RowNo + 1;
                  InsertRow(RowNo,ColNo,Text038,'','');
                  InsertRow(RowNo,ColNo + 1,TempBuffer."Code 3",'','');
                  InsertRow(RowNo,ColNo + 2,TempBuffer."Data Text 1",'','');
                  InsertRow(RowNo,ColNo + 3,TempBuffer."Data Text 2",'','');
                  InsertRow(RowNo,ColNo + 4,FORMAT(TempBuffer."Data Amount 4"),'','');
                  InsertRow(RowNo,ColNo + 5,FORMAT(TempBuffer."Data Amount 1"),'','');
                  InsertRow(RowNo,ColNo + 6,FORMAT(TempBuffer."Data Amount 2"),'','');
                  InsertRow(RowNo,ColNo + 7,FORMAT(TempBuffer."Data Amount 3"),'','');

                  lTotalArea1 := lTotalArea1 + TempBuffer."Data Amount 1";
                  lTotalArea2 := lTotalArea2 + TempBuffer."Data Amount 2";
                UNTIL TempBuffer.NEXT = 0;

              END;

              IF NOT Area.GET(TempArea.Code) THEN
                Area.INIT;

              RowNo := RowNo + 1;
              InsertRow(RowNo,ColNo,Text039,'','');
              InsertRow(RowNo,ColNo + 1,TempArea.Code,'','');
              InsertRow(RowNo,ColNo + 2,Area.Text,'','');
              //InsertRow(RowNo,ColNo + 3,'','','');
              //InsertRow(RowNo,ColNo + 4,'','','');
              InsertRow(RowNo,ColNo + 5,FORMAT(lTotalArea1),'','');
              InsertRow(RowNo,ColNo + 6,FORMAT(lTotalArea2),'','');
              //InsertRow(RowNo,ColNo + 7,'','','');

              lTotalTerritory1 := lTotalTerritory1 + lTotalArea1;
              lTotalTerritory2 := lTotalTerritory2 + lTotalArea2;

            UNTIL TempArea.NEXT = 0;
          END;

          IF NOT Territory.GET(TempTerritory.Code) THEN
            Territory.INIT;

          RowNo := RowNo + 1;
          InsertRow(RowNo,ColNo,Text040,'','');
          //InsertRow(RowNo,ColNo + 1,TempTerritory.Code,'','');
          InsertRow(RowNo,ColNo + 2,Territory.Name,'','');
          //InsertRow(RowNo,ColNo + 3,'','','');
          //InsertRow(RowNo,ColNo + 4,'','','');
          InsertRow(RowNo,ColNo + 5,FORMAT(lTotalTerritory1),'','');
          InsertRow(RowNo,ColNo + 6,FORMAT(lTotalTerritory2),'','');
          //InsertRow(RowNo,ColNo + 7,'','','');

        UNTIL TempTerritory.NEXT = 0;
      END;

      ViewExcel;
    END;

    PROCEDURE InsertRow@1100281004(RowNo@1000000000 : Integer;ColumnNo@1000000001 : Integer;CellValue@1000000002 : Text[250];CellFormula@1100281000 : Text[250];NbFormat@1000000003 : Text[30]);
    BEGIN
      ExcelBuffer.INIT;
      ExcelBuffer.VALIDATE("Row No.",RowNo);
      ExcelBuffer.VALIDATE("Column No.",ColumnNo);
      ExcelBuffer."Cell Value as Text" := CellValue;
      ExcelBuffer.NumberFormat := NbFormat;
      ExcelBuffer.Formula := CellFormula; //'';
      ExcelBuffer.INSERT;
    END;

    PROCEDURE GetCurrCellID@1100281000() : Text[20];
    BEGIN
      EXIT(ExcelBuffer.xlColID + ExcelBuffer.xlRowID);
    END;

    PROCEDURE ViewExcel@1000000002();
    BEGIN

      IF ExcelTemplatePath <> '' THEN
        ExcelBuffer.OpenBook(ExcelTemplatePath,ExcelSheetName)
      ELSE
        ExcelBuffer.CreateBook;

      ExcelBuffer.CreateSheet(ExcelSheetName,ExcelSheetName,'','');
      ExcelBuffer.GiveUserControl;
      CLEAR(ExcelBuffer);
    END;

    PROCEDURE CreateExcelBuffer@1000000004();
    BEGIN
      ExcelBuffer.DELETEALL;
      CLEAR(ExcelBuffer);
    END;

    BEGIN
    {
      /** @r IMH01 @d 14/10/13 @a ISAT.ST @v IMH6.01.353 @s Reorganisation region IMH @h 4760 @c Renommage CR / AR / R‚gion */
    }
    END.
  }
  RDLDATA
  {
  }
}