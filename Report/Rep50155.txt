OBJECT Report 50155 Quality Mgt - Create Controls
{
  OBJECT-PROPERTIES
  {
    Date=31/10/12;
    Time=12:00:00;
    Modified=Yes;
    Version List=IMH6.01;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Quality Mgt - Create Controls;
               FRA=Gestion qualit‚ - cr‚ation des contr“les];
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   IntervLimitDate := CALCDATE('<-1M>', WORKDATE);
                   IntervLimitDate := DMY2DATE(1, DATE2DMY(IntervLimitDate,2),DATE2DMY(IntervLimitDate,3));
                   RandomControlRate := 80;
                   // init des inclusions
                   // Types produits
                   TempCodeList."Table ID" := DATABASE::"Service Order Type";
                   TempCodeList.Code := 'REN_EXP';
                   TempCodeList.INSERT;
                   TempCodeList.Code := 'REN_SSEXP';
                   TempCodeList.INSERT;
                   UpdateServTypeList;
                   // init des causes
                   TempCodeList."Table ID" := DATABASE::"Fault Reason Code";
                   TempCodeList.Code := 'DDE';
                   TempCodeList.INSERT;
                   UpdateReasonList;
                   // init des corps de m‚tier
                 END;

  }
  DATAITEMS
  {
    { PROPERTIES
      {
        DataItemTable=Table50000;
        DataItemTableView=SORTING(No.);
        OnPreDataItem=BEGIN
                        CheckParam;
                        TempCodeList.RESET;
                        IF NOT TempCodeList.ISEMPTY THEN
                          QualityMgt.SetInclusionList(TempCodeList);
                        QualityMgt.Start(Provider,ExtractMode,NbOfMonth,IntervLimitDate,RandomControlRate);
                        CurrReport.BREAK;
                      END;

      }
      SECTIONS
      {
      }
       }
  }
  REQUESTFORM
  {
    PROPERTIES
    {
      Width=9020;
      Height=5060;
    }
    CONTROLS
    {
      { 1100281000;TextBox;3740 ;220  ;2420 ;440  ;InPage=-1;
                                                   CaptionML=[ENU=Extract mode;
                                                              FRA=Mode extraction];
                                                   OptionCaptionML=[ENU=Previous Year,Slippery Month;
                                                                    FRA=Ann‚e pr‚c‚dente,Mois glissant];
                                                   SourceExpr=ExtractMode }
      { 1100281001;Label  ;330  ;220  ;3300 ;440  ;ParentControl=1100281000 }
      { 1100281002;TextBox;3740 ;770  ;2420 ;440  ;InPage=-1;
                                                   CaptionML=[ENU=Number of slippery month;
                                                              FRA=Nombre mois glissant];
                                                   SourceExpr=NbOfMonth }
      { 1100281003;Label  ;330  ;770  ;3300 ;440  ;ParentControl=1100281002 }
      { 1100281004;TextBox;3740 ;1320 ;2420 ;440  ;InPage=-1;
                                                   CaptionML=[ENU=Intervention limit date;
                                                              FRA=Date limite intervention];
                                                   SourceExpr=IntervLimitDate }
      { 1100281005;Label  ;330  ;1320 ;3300 ;440  ;ParentControl=1100281004 }
      { 1100281006;TextBox;3740 ;1870 ;2420 ;440  ;InPage=-1;
                                                   CaptionML=[ENU=Random control rate;
                                                              FRA=Taux contr“le al‚atoire];
                                                   DecimalPlaces=0:5;
                                                   SourceExpr=RandomControlRate;
                                                   MinValue=0;
                                                   MaxValue=100 }
      { 1100281007;Label  ;330  ;1870 ;3300 ;440  ;ParentControl=1100281006 }
      { 1100281008;TextBox;3740 ;2530 ;5060 ;440  ;InPage=-1;
                                                   CaptionML=[ENU=Limit reason;
                                                              FRA=Limiter les causes];
                                                   SourceExpr=ReasonList;
                                                   OnAssistEdit=BEGIN
                                                                  AssistReason(TRUE);
                                                                END;

                                                   OnAfterValidate=BEGIN
                                                                     AssistReason(FALSE);
                                                                   END;
                                                                    }
      { 1100281009;Label  ;330  ;2530 ;3300 ;440  ;ParentControl=1100281008 }
      { 1100281010;TextBox;3740 ;3080 ;5060 ;440  ;InPage=-1;
                                                   CaptionML=[ENU=Exclude building trade;
                                                              FRA=Exclure les corps de m‚tier];
                                                   SourceExpr=BuildingTradeList;
                                                   OnAssistEdit=BEGIN
                                                                  AssistBuilding(TRUE);
                                                                END;

                                                   OnAfterValidate=BEGIN
                                                                     AssistBuilding(FALSE);
                                                                   END;
                                                                    }
      { 1100281011;Label  ;330  ;3080 ;3300 ;440  ;ParentControl=1100281010 }
      { 1100281012;TextBox;3740 ;3630 ;5060 ;440  ;InPage=-1;
                                                   CaptionML=[ENU=Limit service order type;
                                                              FRA=Limiter les types produit];
                                                   SourceExpr=ServTypeList;
                                                   OnAssistEdit=BEGIN
                                                                  AssistServType(TRUE);
                                                                END;

                                                   OnAfterValidate=BEGIN
                                                                     AssistServType(FALSE);
                                                                   END;
                                                                    }
      { 1100281013;Label  ;330  ;3630 ;3300 ;440  ;ParentControl=1100281012 }
    }
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1100281000;;Container;
                  CaptionML=[ENU=Options;
                             FRA=Options];
                  ContainerType=ContentArea }

      { 1100281001;1;Field  ;
                  Name=ExtrMode;
                  CaptionML=[ENU=Extract mode;
                             FRA=Mode extraction];
                  OptionCaptionML=[ENU=Previous Year,Slippery Month;
                                   FRA=Ann‚e pr‚c‚dente,Mois glissant];
                  SourceExpr=ExtractMode;
                  OnValidate=BEGIN
                               IF (NbOfMonth <> 0) AND (ExtractMode <> ExtractMode::SlipperyMonth) THEN
                                 NbOfMonth := 0;
                             END;
                              }

      { 1100281002;1;Field  ;
                  CaptionML=[ENU=Number of slippery month;
                             FRA=Nombre mois glissant];
                  SourceExpr=NbOfMonth;
                  OnValidate=BEGIN
                               IF NbOfMonth <> 0 THEN BEGIN
                                 IF ExtractMode <> ExtractMode::SlipperyMonth THEN
                                   ExtractMode := ExtractMode::SlipperyMonth;
                               END;
                             END;
                              }

      { 1100281003;1;Field  ;
                  CaptionML=[ENU=Intervention limit date;
                             FRA=Date limite intervention];
                  SourceExpr=IntervLimitDate }

      { 1100281004;1;Field  ;
                  CaptionML=[ENU=Random control rate;
                             FRA=Taux contr“le al‚atoire];
                  SourceExpr=RandomControlRate }

      { 1100281005;1;Field  ;
                  Name=RL;
                  CaptionML=[ENU=Limit reason;
                             FRA=Limiter les causes];
                  SourceExpr=ReasonList;
                  OnValidate=BEGIN
                               AssistReason(FALSE);
                             END;

                  OnAssistEdit=BEGIN
                                 AssistReason(TRUE);
                               END;
                                }

      { 1100281006;1;Field  ;
                  Name=BTL;
                  CaptionML=[ENU=Exclude building trade;
                             FRA=Exclure les corps de m‚tier];
                  SourceExpr=BuildingTradeList;
                  OnValidate=BEGIN
                               AssistBuilding(FALSE);
                             END;

                  OnAssistEdit=BEGIN
                                 AssistBuilding(TRUE);
                               END;
                                }

      { 1100281007;1;Field  ;
                  Name=STL;
                  CaptionML=[ENU=Limit service order type;
                             FRA=Limiter les types produit];
                  SourceExpr=ServTypeList;
                  OnValidate=BEGIN
                               AssistServType(FALSE);
                             END;

                  OnAssistEdit=BEGIN
                                 AssistServType(TRUE);
                               END;
                                }

    }
  }
  CODE
  {
    VAR
      QualityMgt@1100281000 : Codeunit 50027;
      ExtractMode@1100281001 : 'PreviousYear,SlipperyMonth';
      NbOfMonth@1100281002 : Integer;
      IntervLimitDate@1100281003 : Date;
      RandomControlRate@1100281004 : Decimal;
      TempCodeList@1100281005 : TEMPORARY Record 50079;
      ReasonList@1100281006 : Text[1024];
      BuildingTradeList@1100281007 : Text[1024];
      ServTypeList@1100281008 : Text[1024];
      Text001@1100281009 : TextConst 'ENU=You must specifi number of slippery month.;FRA=Vous devez d‚finir le nombre de mois glissant.';
      Text002@1100281010 : TextConst 'ENU=You must select intervention limit date.;FRA=Vous devez d‚finir la date limite intervention.';

    LOCAL PROCEDURE AssistReason@1100281000(pAssitMode@1000000000 : Boolean);
    VAR
      lList@1100281000 : Form 5929;
      lRec@1100281001 : Record 5917;
      lTableID@1100281002 : Integer;
    BEGIN
      lTableID := DATABASE::"Fault Reason Code";
      IF pAssitMode THEN BEGIN
      lList.LOOKUPMODE(TRUE);
      IF lList.RUNMODAL = ACTION::LookupOK THEN BEGIN
        TempCodeList.RESET;
        TempCodeList.SETRANGE("Table ID", lTableID);
        TempCodeList.DELETEALL;
        lList.GetSelection(lRec);
        IF lRec.FINDSET THEN
          REPEAT
            TempCodeList."Table ID" := lTableID;
            TempCodeList.Code := lRec.Code;
            TempCodeList.INSERT;
          UNTIL lRec.NEXT = 0;
        UpdateReasonList;
      END;
      END
      ELSE
        MakeTextToList(lTableID, ReasonList);
    END;

    LOCAL PROCEDURE AssistBuilding@1100281001(pAssitMode@1000000000 : Boolean);
    VAR
      lList@1100281002 : Form 50004;
      lRec@1100281001 : Record 50032;
      lTableID@1100281000 : Integer;
    BEGIN
      lTableID := DATABASE::"Building Trade";
      IF pAssitMode THEN BEGIN
      lList.LOOKUPMODE(TRUE);
      IF lList.RUNMODAL = ACTION::LookupOK THEN BEGIN
        TempCodeList.RESET;
        TempCodeList.SETRANGE("Table ID", lTableID);
        TempCodeList.DELETEALL;
        lList.GetSelection(lRec);
        IF lRec.FINDSET THEN
          REPEAT
            TempCodeList."Table ID" := lTableID;
            TempCodeList.Code := lRec."No.";
            TempCodeList.INSERT;
          UNTIL lRec.NEXT = 0;
        UpdateBuildingList;
      END;
      END
      ELSE
        MakeTextToList(lTableID, BuildingTradeList);
    END;

    LOCAL PROCEDURE AssistServType@1100281002(pAssitMode@1000000000 : Boolean);
    VAR
      lList@1100281002 : Form 5908;
      lRec@1100281001 : Record 5903;
      lTableID@1100281000 : Integer;
    BEGIN
      lTableID := DATABASE::"Service Order Type";
      IF pAssitMode THEN BEGIN
      lList.LOOKUPMODE(TRUE);
      IF lList.RUNMODAL = ACTION::LookupOK THEN BEGIN

        TempCodeList.RESET;
        TempCodeList.SETRANGE("Table ID", lTableID);
        TempCodeList.DELETEALL;
        lList.GetSelection(lRec);
        IF lRec.FINDSET THEN
          REPEAT
            TempCodeList."Table ID" := lTableID;
            TempCodeList.Code := lRec.Code;
            TempCodeList.INSERT;
          UNTIL lRec.NEXT = 0;
        UpdateServTypeList;
      END;
      END
      ELSE
        MakeTextToList(lTableID, ServTypeList);
    END;

    LOCAL PROCEDURE UpdateReasonList@1100281005();
    BEGIN
      TempCodeList.RESET;
      TempCodeList.SETRANGE("Table ID", DATABASE::"Fault Reason Code");
      MakeList(TempCodeList, ReasonList);
    END;

    LOCAL PROCEDURE UpdateBuildingList@1100281006();
    BEGIN
      TempCodeList.RESET;
      TempCodeList.SETRANGE("Table ID", DATABASE::"Building Trade");
      MakeList(TempCodeList, BuildingTradeList);
    END;

    LOCAL PROCEDURE UpdateServTypeList@1100281007();
    BEGIN
      TempCodeList.RESET;
      TempCodeList.SETRANGE("Table ID", DATABASE::"Service Order Type");
      MakeList(TempCodeList, ServTypeList);
    END;

    LOCAL PROCEDURE MakeList@1100281003(VAR pCodeList@1100281000 : Record 50079;VAR pToText@1100281001 : Text[1024]);
    BEGIN
      pToText := '';
      IF NOT pCodeList.FINDSET THEN
        EXIT;
      REPEAT
        IF pToText = '' THEN
          pToText := TempCodeList.Code
        ELSE
          pToText := pToText + ',' + TempCodeList.Code;
      UNTIL TempCodeList.NEXT=0;
    END;

    LOCAL PROCEDURE CheckParam@1100281004();
    BEGIN
      IF ExtractMode = ExtractMode::SlipperyMonth THEN
        IF NbOfMonth = 0 THEN
          ERROR(Text001);
      IF IntervLimitDate = 0D THEN
        ERROR(Text002);
    END;

    PROCEDURE MakeTextToList@1100281009(pTableID@1100281000 : Integer;pText@1100281001 : Text[1024]);
    BEGIN
      TempCodeList.RESET;
      TempCodeList.SETRANGE("Table ID", pTableID);
      TempCodeList.DELETEALL;
      IF pText = '' THEN
        EXIT;
      REPEAT
        TempCodeList."Table ID" := pTableID;
        RetrieveNextCode(pText, TempCodeList.Code);
        IF TempCodeList.INSERT THEN;
      UNTIL pText = '';
    END;

    PROCEDURE RetrieveNextCode@1100281014(VAR ptext@1100281000 : Text[1024];VAR pCode@1100281002 : Code[20]) : Boolean;
    VAR
      lInt@1100281001 : Integer;
    BEGIN
      IF ptext = '' THEN
        EXIT(FALSE);
      FOR lInt := 1 TO STRLEN(ptext) DO BEGIN
        IF ptext[lInt] = ',' THEN BEGIN
          IF lInt < 20 THEN
            pCode := COPYSTR(ptext, 1, lInt-1)
          ELSE
            pCode := COPYSTR(ptext,1,20);
          ptext := COPYSTR(ptext, lInt+1);
          EXIT(TRUE);
        END;
      END;
      pCode := COPYSTR(ptext,1,20);
      ptext := '';
      EXIT(TRUE);
    END;

    BEGIN
    {
      /** @r IMH02 @d 22/10/12 @a ISAT.ST @v IMH6.01.331 @s Control Qualit‚ v1.1 @c Modification version transitoire */
      /** @r IMH01 @d 13/04/12 @a ISAT.ST @v IMH6.01.105 @s Control Qualit‚ @c Extraction des controles*/
    }
    END.
  }
  RDLDATA
  {
  }
}