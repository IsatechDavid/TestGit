OBJECT Report 50203 Purch. Invoice To Excel
{
  OBJECT-PROPERTIES
  {
    Date=16/12/13;
    Time=16:09:46;
    Modified=Yes;
    Version List=IMH6.01;
  }
  PROPERTIES
  {
    ProcessingOnly=Yes;
  }
  DATAITEMS
  {
    { PROPERTIES
      {
        DataItemTable=Table38;
        DataItemTableView=SORTING(Document Type,No.)
                          WHERE(Document Type=CONST(Invoice));
        OnPreDataItem=BEGIN
                        SETFILTER("Service No.",'<>%1','');

                        Window.OPEN(Text010,"No.");

                        CreateExcelBuffer;

                        ColNo := 1;
                        RowNo := 1;

                        InsertRow(RowNo,ColNo,'Nø','','');
                        InsertRow(RowNo,ColNo + 1,'Code motif rejet','','');
                        InsertRow(RowNo,ColNo + 2,'Libell‚ motif rejet','','');
                        InsertRow(RowNo,ColNo + 3,'Rapproch‚','','');
                        InsertRow(RowNo,ColNo + 4,'Nø facture fournisseur','','');
                        InsertRow(RowNo,ColNo + 5,'Nø Service','','');
                        InsertRow(RowNo,ColNo + 6,'Nø ligne produit','','');
                        InsertRow(RowNo,ColNo + 7,'Nø ligne intervention','','');
                        InsertRow(RowNo,ColNo + 8,'Nø intervention','','');
                        InsertRow(RowNo,ColNo + 9,'Nø commande','','');
                        InsertRow(RowNo,ColNo +10,'Date de comptabilisation','','');
                        InsertRow(RowNo,ColNo +11,'Intervention existante','','');
                        InsertRow(RowNo,ColNo +12,'Intervention close','','');
                        InsertRow(RowNo,ColNo +13,'Service RDD','','');
                        InsertRow(RowNo,ColNo +14,'Intervention RDD','','');
                        InsertRow(RowNo,ColNo +15,'En attente de facturation GSH','','');
                        InsertRow(RowNo,ColNo +16,'Urgent','','');
                        InsertRow(RowNo,ColNo +17,'Type ligne PV','','');
                        InsertRow(RowNo,ColNo +18,'Devis actif existant','','');
                        InsertRow(RowNo,ColNo +19,'Devis accept‚','','');
                        InsertRow(RowNo,ColNo +20,'Ligne PV existante','','');
                        InsertRow(RowNo,ColNo +21,'Ligne PV valid‚','','');
                        InsertRow(RowNo,ColNo +22,'Ligne PV statut valid‚','','');
                        InsertRow(RowNo,ColNo +23,'Commande achat existante','','');
                        InsertRow(RowNo,ColNo +24,'R‚ception achat existante','','');
                        InsertRow(RowNo,ColNo +25,'Montant TTC saisie','','');
                        InsertRow(RowNo,ColNo +26,'Montant v‚tust‚ saisie','','');
                        InsertRow(RowNo,ColNo +27,'Montant franchise saisie','','');
                        InsertRow(RowNo,ColNo +28,'Montant TTC r‚ception','','');
                        InsertRow(RowNo,ColNo +29,'Montant v‚tust‚ r‚ception','','');
                        InsertRow(RowNo,ColNo +30,'Montant franchise r‚ception','','');
                        InsertRow(RowNo,ColNo +31,'Montant TTC commande','','');
                        InsertRow(RowNo,ColNo +32,'Montant v‚tust‚ commande','','');
                        InsertRow(RowNo,ColNo +33,'Montant franchise commande','','');
                        InsertRow(RowNo,ColNo +34,'R‚conc. montant TTC commande','','');
                        InsertRow(RowNo,ColNo +35,'R‚conc. montant v‚tust‚ commande','','');
                        InsertRow(RowNo,ColNo +36,'R‚conc. montant franchise commande','','');
                        InsertRow(RowNo,ColNo +37,'Nø fournisseur','','');
                        InsertRow(RowNo,ColNo +38,'Nom fournisseur','','');
                        InsertRow(RowNo,ColNo +39,'Grand-compte','','');
                        InsertRow(RowNo,ColNo +40,'R‚gion Grand-compte','','');
                        InsertRow(RowNo,ColNo +41,'Nø ‚vŠnement','','');
                        InsertRow(RowNo,ColNo +42,'Type produit','','');
                        InsertRow(RowNo,ColNo +43,'Nø Agr‚ment','','');
                        InsertRow(RowNo,ColNo +44,'R‚sultat RDD GSH','','');
                        InsertRow(RowNo,ColNo +45,'Nb factures enregistr‚es','','');
                        InsertRow(RowNo,ColNo +46,'Date cr‚ation','','');
                        InsertRow(RowNo,ColNo +47,'Utilisateur cr‚ation','','');
                        InsertRow(RowNo,ColNo +48,'Date modification','','');
                        InsertRow(RowNo,ColNo +49,'Utilisateur modification','','');
                        InsertRow(RowNo,ColNo +50,'Date document','','');
                        InsertRow(RowNo,ColNo +51,'Corbeille Service','',''); // IMH01.WGA

                        RefDate := CREATEDATETIME(141111D,000000T);
                      END;

        OnAfterGetRecord=VAR
                           lServIntervMinBuffer@1100281001 : Integer;
                         BEGIN
                           IF RowNo MOD 10 = 0 THEN
                             Window.UPDATE;

                           ServIntervLineOK := FALSE;
                           ServIntervLineClosed := FALSE;
                           ServiceRDD := FALSE;
                           IntervRDD := FALSE;
                           QuoteAcceptOK := FALSE;
                           MinPostedOK := FALSE;
                           MinPostedStatusOk := FALSE;
                           PurchOrderOK := FALSE;

                           AmountIncludingVAT := 0;
                           DepreciationAmount := 0;
                           DeductibleAmount := 0;
                           ServIntervMinType := '';
                           OrderAmountIncludingVAT := 0;
                           OrderDepreciationAmount := 0;
                           OrderDeductibleAmount := 0;
                           ReconcAmountOk := FALSE;
                           ReconcDepreciationOk := FALSE;
                           ReconcDeductibleOk := FALSE;
                           RDDGSHOK := FALSE;
                           PostedInvoiceNb := 0;

                           PurchInvLine.RESET;
                           PurchInvLine.SETRANGE("Document Type","Document Type");
                           PurchInvLine.SETRANGE("Document No.","No.");
                           PurchInvLine.SETRANGE(Type,PurchInvLine.Type::Item);
                           PurchInvLineOK := NOT PurchInvLine.ISEMPTY;

                           IF Serv.GET("Service No.") THEN
                             ServiceRDD := Serv."Creation Date" < RefDate
                           ELSE
                             CLEAR(Serv);

                           IF ServIntervLine.GET("Service Header No.","Intervention Line No.") THEN BEGIN
                             ServIntervLineOK := TRUE;
                             ServIntervLineClosed := ServIntervLine.Closed;
                             IntervRDD := ServIntervLine."Creation Date" < RefDate;
                           END ELSE
                             ServIntervLine.INIT;

                           RDDMinutes.RESET;
                           RDDMinutes.SETRANGE("Service No.","Service Header No.");
                           RDDMinutes.SETRANGE("Intervention No.",ServIntervLine."Intervention No.");
                           RDDGSHOK := RDDMinutes.FINDFIRST;
                           IF RDDGSHOK THEN
                             RDDGSHReject := RDDMinutes."Reject Reason"
                           ELSE
                             RDDGSHReject := '';

                           ServIntervQuote.RESET;
                           ServIntervQuote.SETRANGE("Service Header No.","Service Header No.");
                           ServIntervQuote.SETRANGE("Intervention Line No.","Intervention Line No.");
                           ServIntervQuote.SETRANGE(Active, TRUE);
                           ServIntervQuoteOK := NOT ServIntervQuote.ISEMPTY;
                           IF ServIntervQuoteOK THEN BEGIN
                             ServIntervQuote.SETRANGE(Acceptance,ServIntervQuote.Acceptance::Yes);
                             IF NOT ServIntervQuote.ISEMPTY THEN BEGIN
                               QuoteAcceptOK := TRUE;
                             END;
                           END;

                           ServIntervMin.RESET;
                           ServIntervMin.SETRANGE("Service Header No.","Service Header No.");
                           ServIntervMin.SETRANGE("Service Intervention Line No.","Intervention Line No.");
                           ServIntervMin.SETRANGE("Current Minutes",TRUE);
                           ServIntervMinOK := NOT ServIntervMin.ISEMPTY;
                           IF ServIntervMinOK THEN BEGIN
                             ServIntervMin.SETRANGE("Post Minute",TRUE);
                             IF ServIntervMin.FINDFIRST THEN BEGIN
                               ServIntervMinType := SELECTSTR(ServIntervMin.Type + 1,Text020);
                               MinPostedOK := TRUE;
                             END;
                             ServIntervMin.SETRANGE("Post Minute");
                             ServIntervMin.SETRANGE(Status,ServIntervMin.Status::Validated);
                             IF ServIntervMin.FINDFIRST THEN BEGIN
                               MinPostedStatusOk := TRUE;
                             END;
                           END;

                           PurchLine.RESET;
                           PurchLine.SETCURRENTKEY("Service No.","Service Header No.","Intervention Line No.");
                           PurchLine.SETRANGE("Service No.","Service No.");
                           PurchLine.SETRANGE("Service Header No.","Service Header No.");
                           PurchLine.SETRANGE("Intervention Line No.","Intervention Line No.");
                           PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::Order);
                           PurchLine.SETRANGE(Type,PurchLine.Type::Item);
                           IF PurchLine.FINDFIRST THEN
                             PurchOrderOK := TRUE
                           ELSE
                             CLEAR(PurchLine);

                           PurchRcptLine.RESET;
                           PurchRcptLine.SETCURRENTKEY("Service No.","Service Header No.","Intervention Line No.");
                           PurchRcptLine.SETRANGE("Service No.","Service No.");
                           PurchRcptLine.SETRANGE("Service Header No.","Service Header No.");
                           PurchRcptLine.SETRANGE("Intervention Line No.","Intervention Line No.");
                           PurchRcptLine.SETRANGE(Type,PurchRcptLine.Type::Item);
                           ReceiptLineOK := NOT PurchRcptLine.ISEMPTY;
                           IF ReceiptLineOK THEN BEGIN
                             PurchRcptLine.SETRANGE("Quantity Invoiced",0);
                             PurchRcptLine.SETFILTER(Quantity, '<>%1', 0);
                             IF PurchRcptLine.FINDSET THEN BEGIN
                               REPEAT
                                 IF PurchLine.GET(PurchLine."Document Type"::Order, PurchRcptLine."Order No.", PurchRcptLine."Order Line No.") THEN BEGIN
                                   AmountIncludingVAT += PurchLine."Amount Including VAT";
                                   DepreciationAmount += PurchLine."Depreciation Amount";
                                   DeductibleAmount += PurchLine."Deductible Amount";
                                 END
                                 ELSE BEGIN
                                   AmountIncludingVAT += PurchRcptLine."Amount Including VAT";
                                   DepreciationAmount += PurchRcptLine."Depreciation Amount";
                                   DeductibleAmount += PurchRcptLine."Deductible Amount";
                                 END;
                               UNTIL PurchRcptLine.NEXT = 0;
                             END;
                           END;

                           PurchLine.RESET;
                           PurchLine.SETCURRENTKEY("Service No.","Service Header No.","Intervention Line No.");
                           PurchLine.SETRANGE("Service No.","Service No.");
                           PurchLine.SETRANGE("Service Header No.","Service Header No.");
                           PurchLine.SETRANGE("Intervention Line No.","Intervention Line No.");
                           PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::Order);
                           PurchLine.SETRANGE(Type,PurchLine.Type::Item);
                           IF PurchLine.FINDSET THEN BEGIN
                             REPEAT
                               OrderAmountIncludingVAT += PurchLine."Amount Including VAT";
                               OrderDepreciationAmount += PurchLine."Depreciation Amount";
                               OrderDeductibleAmount += PurchLine."Deductible Amount";
                               IF NOT ReceiptLineOK AND
                                  MinPostedOK
                               THEN BEGIN
                               END;
                             UNTIL PurchLine.NEXT = 0;
                           END;

                           ReconcAmountOk := ("Enter Amount Including VAT" = OrderAmountIncludingVAT);
                           ReconcDepreciationOk := ("Depreciation Amount" = OrderDepreciationAmount);
                           ReconcDeductibleOk := ("Deductible Amount" = OrderDeductibleAmount);

                           {
                           lServIntervMinBuffer.RESET;
                           lServIntervMinBuffer.SETRANGE("Service Header No.","Service Header No.");
                           lServIntervMinBuffer.SETRANGE("Line No.","Intervention Line No.");
                           RDDGSHOK := lServIntervMinBuffer.FINDFIRST;
                           }

                           PostedPurchInvHeader.RESET;
                           PostedPurchInvHeader.SETCURRENTKEY("Service No.","Service Header No.","Intervention Line No.");
                           PostedPurchInvHeader.SETRANGE("Service No.","Service No.");
                           PostedPurchInvHeader.SETRANGE("Service Header No.","Service Header No.");
                           PostedPurchInvHeader.SETRANGE("Intervention Line No.","Intervention Line No.");
                           PostedInvoiceNb := PostedPurchInvHeader.COUNT;

                           RowNo := RowNo + 1;
                           InsertRow(RowNo,ColNo,"No.",'','');
                           InsertRow(RowNo,ColNo + 1,"Reconciliation Reject Code",'','');
                           InsertRow(RowNo,ColNo + 2,"Reconciliation Reject Detail",'','');
                           InsertRow(RowNo,ColNo + 3,FORMAT(PurchInvLineOK),'','');
                           InsertRow(RowNo,ColNo + 4,"Vendor Invoice No.",'','');
                           InsertRow(RowNo,ColNo + 5,"Service No.",'','');
                           InsertRow(RowNo,ColNo + 6,"Service Header No.",'','');
                           InsertRow(RowNo,ColNo + 7,FORMAT("Intervention Line No."),'','');
                           InsertRow(RowNo,ColNo + 8,FORMAT(ServIntervLine."Intervention No."),'','');
                           InsertRow(RowNo,ColNo + 9,PurchLine."Document No.",'','');
                           InsertRow(RowNo,ColNo +10,FORMAT("Posting Date"),'','');
                           InsertRow(RowNo,ColNo +11,FORMAT(ServIntervLineOK),'','');
                           InsertRow(RowNo,ColNo +12,FORMAT(ServIntervLineClosed),'','');
                           InsertRow(RowNo,ColNo +13,FORMAT(ServiceRDD),'','');
                           InsertRow(RowNo,ColNo +14,FORMAT(IntervRDD),'','');
                           InsertRow(RowNo,ColNo +15,FORMAT(RDDGSHOK),'','');
                           InsertRow(RowNo,ColNo +16,FORMAT(ServIntervLine.Urgent),'','');
                           InsertRow(RowNo,ColNo +17,ServIntervMinType,'','');
                           InsertRow(RowNo,ColNo +18,FORMAT(ServIntervQuoteOK),'','');
                           InsertRow(RowNo,ColNo +19,FORMAT(QuoteAcceptOK),'','');
                           InsertRow(RowNo,ColNo +20,FORMAT(ServIntervMinOK),'','');
                           InsertRow(RowNo,ColNo +21,FORMAT(MinPostedOK),'','');
                           InsertRow(RowNo,ColNo +22,FORMAT(MinPostedStatusOk),'','');
                           InsertRow(RowNo,ColNo +23,FORMAT(PurchOrderOK),'','');
                           InsertRow(RowNo,ColNo +24,FORMAT(ReceiptLineOK),'','');
                           InsertRow(RowNo,ColNo +25,FormatDec("Enter Amount Including VAT"),'','');
                           InsertRow(RowNo,ColNo +26,FormatDec("Depreciation Amount"),'','');
                           InsertRow(RowNo,ColNo +27,FormatDec("Deductible Amount"),'','');
                           InsertRow(RowNo,ColNo +28,FormatDec(AmountIncludingVAT),'','');
                           InsertRow(RowNo,ColNo +29,FormatDec(DepreciationAmount),'','');
                           InsertRow(RowNo,ColNo +30,FormatDec(DeductibleAmount),'','');
                           InsertRow(RowNo,ColNo +31,FormatDec(OrderAmountIncludingVAT),'','');
                           InsertRow(RowNo,ColNo +32,FormatDec(OrderDepreciationAmount),'','');
                           InsertRow(RowNo,ColNo +33,FormatDec(OrderDeductibleAmount),'','');
                           InsertRow(RowNo,ColNo +34,FORMAT(ReconcAmountOk),'','');
                           InsertRow(RowNo,ColNo +35,FORMAT(ReconcDepreciationOk),'','');
                           InsertRow(RowNo,ColNo +36,FORMAT(ReconcDeductibleOk),'','');
                           InsertRow(RowNo,ColNo +37,"Pay-to Vendor No.",'','');
                           InsertRow(RowNo,ColNo +38,"Pay-to Name",'','');
                           InsertRow(RowNo,ColNo +39,"Corporate No.",'','');
                           InsertRow(RowNo,ColNo +40,"Corporate Region Code",'','');
                           InsertRow(RowNo,ColNo +41,Serv."Reference No.",'','');
                           InsertRow(RowNo,ColNo +42,ServIntervLine."Service Order Type",'','');
                           IF Provider.GET("Pay-to Vendor No.") THEN
                             InsertRow(RowNo,ColNo +43,Provider.GetAgreement("Corporate No.", "Corporate Region Code", ServIntervLine."Service Order Type")
                               ,'','');
                           InsertRow(RowNo,ColNo +44,FORMAT(RDDGSHReject),'','');
                           InsertRow(RowNo,ColNo +45,FORMAT(PostedInvoiceNb),'','');
                           InsertRow(RowNo,ColNo +46,FORMAT("Creation Date"),'','');
                           InsertRow(RowNo,ColNo +47,FORMAT("Creation User ID"),'','');
                           InsertRow(RowNo,ColNo +48,FORMAT("Last Modification Date"),'','');
                           InsertRow(RowNo,ColNo +49,FORMAT("Last Modification User ID"),'','');
                           InsertRow(RowNo,ColNo +50,FORMAT("Document Date"),'','');
                           //<< IMH01.WGA
                           //CALCFIELDS("Service Header Team Code");
                           InsertRow(RowNo,ColNo +51,FORMAT("Service Header Team Code"),'','');
                           //>> IMH01.WGA
                         END;

        OnPostDataItem=BEGIN
                         Window.CLOSE;

                         ViewExcel;
                       END;

        ReqFilterFields=Reconciliation Reject Code;
        CalcFields=Service Header Team Code;
      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=12000;
            SectionHeight=846;
          }
          CONTROLS
          {
          }
           }
      }
       }
  }
  REQUESTFORM
  {
    PROPERTIES
    {
      Width=5940;
      Height=1320;
      SaveValues=Yes;
    }
    CONTROLS
    {
    }
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  CODE
  {
    VAR
      ExcelBuffer@1100281016 : TEMPORARY Record 370;
      Window@1100281018 : Dialog;
      Text000@1100281012 : TextConst 'ENU=Excel not found.;FRA=Programme Excel non trouv‚.';
      ExcelTemplatePath@1100281024 : Text[250];
      ExcelSheetName@1100281025 : Text[50];
      StartRowNo@1100281023 : Integer;
      StartColNo@1100281020 : Integer;
      RowNo@1100281017 : Integer;
      ColNo@1100281026 : Integer;
      Text010@1100281000 : TextConst 'ENU=No. : #1##############;FRA=Nø  : #1##############';
      Cpt@1100281001 : Integer;
      Serv@1100281006 : Record 50066;
      ServIntervLine@1100281051 : Record 50075;
      ServIntervMin@1100281050 : Record 50084;
      ServIntervQuote@1100281049 : Record 50076;
      PurchLine@1100281048 : Record 39;
      PurchInvLine@1100281031 : Record 39;
      PurchRcptHeader@1100281010 : Record 120;
      PurchRcptLine@1100281047 : Record 121;
      PostedPurchInvHeader@1000000002 : Record 122;
      RDDMinutes@1100281008 : Record 50176;
      Provider@1000000000 : Record 50000;
      ServIntervLineOK@1100281002 : Boolean;
      ServIntervLineClosed@1100281041 : Boolean;
      ServIntervMinOK@1100281030 : Boolean;
      ServIntervQuoteOK@1100281029 : Boolean;
      PurchOrderOK@1100281028 : Boolean;
      PurchInvLineOK@1100281032 : Boolean;
      ReceiptLineOK@1100281027 : Boolean;
      QuoteOK@1100281007 : Boolean;
      QuoteAcceptOK@1100281022 : Boolean;
      MinPostedOK@1100281021 : Boolean;
      MinPostedStatusOk@1000000001 : Boolean;
      ServiceRDD@1100281003 : Boolean;
      IntervRDD@1100281004 : Boolean;
      RefDate@1100281005 : DateTime;
      AmountIncludingVAT@1100281011 : Decimal;
      DepreciationAmount@1100281013 : Decimal;
      DeductibleAmount@1100281014 : Decimal;
      Text020@1100281015 : TextConst 'FRA=Fin de travaux,Interm‚diaire,,Urgent';
      OrderAmountIncludingVAT@1100281035 : Decimal;
      OrderDepreciationAmount@1100281034 : Decimal;
      OrderDeductibleAmount@1100281033 : Decimal;
      ServIntervMinType@1100281019 : Text[50];
      ReconcAmountOk@1100281036 : Boolean;
      ReconcDepreciationOk@1100281037 : Boolean;
      ReconcDeductibleOk@1100281038 : Boolean;
      RDDGSHOK@1100281039 : Boolean;
      RDDGSHReject@1100281042 : Text[250];
      PostedInvoiceNb@1100281040 : Integer;

    PROCEDURE InsertRow@1100281004(RowNo@1000000000 : Integer;ColumnNo@1000000001 : Integer;CellValue@1000000002 : Text[250];CellFormula@1100281000 : Text[250];NbFormat@1000000003 : Text[30]);
    BEGIN
      ExcelBuffer.INIT;
      ExcelBuffer.VALIDATE("Row No.",RowNo);
      ExcelBuffer.VALIDATE("Column No.",ColumnNo);
      ExcelBuffer."Cell Value as Text" := CellValue;
      ExcelBuffer.NumberFormat := NbFormat;
      ExcelBuffer.Formula := CellFormula; //'';
      ExcelBuffer.INSERT;
    END;

    PROCEDURE ViewExcel@1000000002();
    BEGIN
      ExcelTemplatePath := '';
      ExcelSheetName  := 'Page1';

      IF ExcelTemplatePath <> '' THEN
        ExcelBuffer.OpenBook(ExcelTemplatePath,ExcelSheetName)
      ELSE
        ExcelBuffer.CreateBook;

      ExcelBuffer.CreateSheet(ExcelSheetName,ExcelSheetName,'','');
      ExcelBuffer.GiveUserControl;
      CLEAR(ExcelBuffer);
    END;

    PROCEDURE CreateExcelBuffer@1000000004();
    BEGIN
      ExcelBuffer.RESET;
      ExcelBuffer.DELETEALL;
      CLEAR(ExcelBuffer);
    END;

    PROCEDURE FormatDec@1000000000(pDec@1000000000 : Decimal) : Text[1024];
    BEGIN
      EXIT(FORMAT(pDec,0,1));
    END;

    BEGIN
    {
      /** @r IMH01 @d 22/02/12 @a IMH.WGA @v IMH6.01.P009 @s Traitement Facturation
          @c Ajout Colonne Corbeille */
    }
    END.
  }
  RDLDATA
  {
  }
}