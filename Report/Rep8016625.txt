OBJECT Report 8016625 Check Isatech +
{
  OBJECT-PROPERTIES
  {
    Date=18/09/12;
    Time=15:18:24;
    Modified=Yes;
    Version List=ISA6.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Check Isatech +;
               FRA=Lettre chäque Isatech +];
    OnPreReport=BEGIN
                  InitTextVariable;
                  IF BankAcc2."No." = '' THEN
                    IF VoidGenJnlLine.GETFILTER("Bal. Account Type") <> '' THEN BEGIN
                      IF BankAcc2.GET(VoidGenJnlLine.GETFILTER("Bal. Account No.")) THEN BEGIN
                        BankAcc2.TESTFIELD("Last Check No.");
                        UseCheckNo := BankAcc2."Last Check No.";
                      END;
                    END;
                END;

    PaperSize=German Std. Fanfold 8 1/2 x 12 in;
    DeviceFontName=Arial;
    HorzGrid=210;
  }
  DATAITEMS
  {
    { PROPERTIES
      {
        DataItemTable=Table81;
        DataItemTableView=SORTING(Journal Template Name,Journal Batch Name,Posting Date,Document No.);
        DataItemVarName=VoidGenJnlLine;
        OnPreDataItem=BEGIN
                        IF CurrReport.PREVIEW THEN
                          ERROR(Text000);

                        IF UseCheckNo = '' THEN
                          ERROR(Text001);

                        IF TestPrint THEN
                          CurrReport.BREAK;

                        IF NOT ReprintChecks THEN
                          CurrReport.BREAK;

                        IF (GETFILTER("Line No.") <> '') OR (GETFILTER("Document No.") <> '') THEN
                          ERROR(
                            Text002,FIELDCAPTION("Line No."),FIELDCAPTION("Document No."));

                        SETRANGE("Bank Payment Type","Bank Payment Type"::"Computer Check");
                        SETRANGE("Check Printed",TRUE);
                      END;

        OnAfterGetRecord=BEGIN
                           CheckManagement.VoidCheck(VoidGenJnlLine);
                         END;

        ReqFilterFields=Journal Template Name,Journal Batch Name,Posting Date;
      }
      SECTIONS
      {
      }
       }
    { PROPERTIES
      {
        DataItemTable=Table81;
        DataItemTableView=SORTING(Journal Template Name,Journal Batch Name,Posting Date,Document No.);
        DataItemVarName=GenJnlLine;
        OnPreDataItem=BEGIN
                        GenJnlLine.COPY(VoidGenJnlLine);
                        CompanyInfo.GET;
                        IF NOT TestPrint THEN BEGIN
                          FormatAddr.Company(CompanyAddr,CompanyInfo);
                          BankAcc2.GET(BankAcc2."No.");
                          BankAcc2.TESTFIELD(Blocked,FALSE);
                          COPY(VoidGenJnlLine);
                          SETRANGE("Bank Payment Type","Bank Payment Type"::"Computer Check");
                          SETRANGE("Check Printed",FALSE);
                        END ELSE BEGIN
                          CLEAR(CompanyAddr);
                          FOR i := 1 TO 5 DO
                            CompanyAddr[i] := Text003;
                        END;
                        ChecksPrinted := 0;

                        SETRANGE("Account Type",GenJnlLine."Account Type"::"Fixed Asset");
                        IF FIND('-') THEN
                          GenJnlLine.FIELDERROR("Account Type");
                        SETRANGE("Account Type");
                      END;

        OnAfterGetRecord=VAR
                           lPmtMgt@1100481001 : Codeunit 10860;
                           lPaymentAddr@1100481000 : Record 10870;
                         BEGIN
                           IF OneCheckPrVendor AND (GenJnlLine."Currency Code" <> '') AND
                              (GenJnlLine."Currency Code" <> Currency.Code)
                           THEN BEGIN
                             Currency.GET(GenJnlLine."Currency Code");
                             Currency.TESTFIELD("Conv. LCY Rndg. Debit Acc.");
                             Currency.TESTFIELD("Conv. LCY Rndg. Credit Acc.");
                           END;

                           IF NOT TestPrint THEN BEGIN
                             IF Amount = 0 THEN
                               CurrReport.SKIP;

                             TESTFIELD("Bal. Account Type","Bal. Account Type"::"Bank Account");
                             IF "Bal. Account No." <> BankAcc2."No." THEN
                               CurrReport.SKIP;

                             IF ("Account No." <> '') AND ("Bal. Account No." <> '') THEN BEGIN
                               BalancingType := "Account Type";
                               BalancingNo := "Account No.";
                               RemainingAmount := Amount;
                               IF OneCheckPrVendor THEN BEGIN
                                 ApplyMethod := ApplyMethod::MoreLinesOneEntry;
                                 GenJnlLine2.RESET;
                                 GenJnlLine2.SETCURRENTKEY("Journal Template Name","Journal Batch Name","Posting Date","Document No.");
                                 GenJnlLine2.SETRANGE("Journal Template Name","Journal Template Name");
                                 GenJnlLine2.SETRANGE("Journal Batch Name","Journal Batch Name");
                                 GenJnlLine2.SETRANGE("Posting Date","Posting Date");
                                 GenJnlLine2.SETRANGE("Document No.","Document No.");
                                 GenJnlLine2.SETRANGE("Account Type","Account Type");
                                 GenJnlLine2.SETRANGE("Account No.","Account No.");
                                 GenJnlLine2.SETRANGE("Bal. Account Type","Bal. Account Type");
                                 GenJnlLine2.SETRANGE("Bal. Account No.","Bal. Account No.");
                                 GenJnlLine2.SETRANGE("Bank Payment Type","Bank Payment Type");
                                 GenJnlLine2.FIND('-');
                                 RemainingAmount := 0;
                               END ELSE
                                 IF "Applies-to Doc. No." <> '' THEN
                                   ApplyMethod := ApplyMethod::OneLineOneEntry
                                 ELSE
                                   IF "Applies-to ID" <> '' THEN
                                     ApplyMethod := ApplyMethod::OneLineID
                                   ELSE
                                     ApplyMethod := ApplyMethod::Payment;
                             END ELSE
                               IF "Account No." = '' THEN
                                 FIELDERROR("Account No.",Text004)
                               ELSE
                                 FIELDERROR("Bal. Account No.",Text004);

                             CLEAR(CheckToAddr);
                             ContactText := '';
                             CLEAR(SalesPurchPerson);
                             CASE BalancingType OF
                               BalancingType::"G/L Account":
                                 BEGIN
                                   CheckToAddr[1] := GenJnlLine.Description;
                                 END;
                               BalancingType::Customer:
                                 BEGIN
                                   Cust.GET(BalancingNo);
                                   IF Cust.Blocked = Cust.Blocked::All THEN
                                     ERROR(Text045,Cust.FIELDCAPTION(Blocked),Cust.Blocked,Cust.TABLECAPTION,Cust."No.");
                                   Cust.Contact := '';
                                   FormatAddr.Customer(CheckToAddr,Cust);
                                   IF BankAcc2."Currency Code" <> "Currency Code" THEN
                                     ERROR(Text005);
                                   IF Cust."Salesperson Code" <> '' THEN BEGIN
                                     ContactText := Text006;
                                     SalesPurchPerson.GET(Cust."Salesperson Code");
                                   END;
                                 END;
                               BalancingType::Vendor:
                                 BEGIN
                                   Vend.GET(BalancingNo);
                                   IF Vend.Blocked IN [Vend.Blocked::All,Vend.Blocked::Payment] THEN
                                     ERROR(Text045,Vend.FIELDCAPTION(Blocked),Vend.Blocked,Vend.TABLECAPTION,Vend."No.");
                                   Vend.Contact := '';
                                   FormatAddr.Vendor(CheckToAddr,Vend);
                                   IF BankAcc2."Currency Code" <> "Currency Code" THEN
                                     ERROR(Text005);
                                   IF Vend."Purchaser Code" <> '' THEN BEGIN
                                     ContactText := Text007;
                                     SalesPurchPerson.GET(Vend."Purchaser Code");
                                   END;
                                 END;
                               BalancingType::"Bank Account":
                                 BEGIN
                                   BankAcc.GET(BalancingNo);
                                   BankAcc.TESTFIELD(Blocked,FALSE);
                                   BankAcc.Contact := '';
                                   FormatAddr.BankAcc(CheckToAddr,BankAcc);
                                   IF BankAcc2."Currency Code" <> BankAcc."Currency Code" THEN
                                     ERROR(Text008);
                                   IF BankAcc."Our Contact Code" <> '' THEN BEGIN
                                     ContactText := Text009;
                                     SalesPurchPerson.GET(BankAcc."Our Contact Code");
                                   END;
                                 END;
                             END;
                           //<<ISA01.ST
                             IF GenJnlLine."Payment Address Code" <> '' THEN
                               IF lPaymentAddr.GET(BalancingType, BalancingNo, GenJnlLine."Payment Address Code") THEN BEGIN
                                 CLEAR(CheckToAddr);
                                 lPmtMgt.PaymentAddr(CheckToAddr, lPaymentAddr);
                               END;
                           //>>ISA01.ST

                             CheckDateText := FORMAT("Posting Date",0,4);
                           END ELSE BEGIN
                             IF ChecksPrinted > 0 THEN
                               CurrReport.BREAK;
                             BalancingType := BalancingType::Vendor;
                             BalancingNo := Text010;
                             CLEAR(CheckToAddr);
                             FOR i := 1 TO 5 DO
                               CheckToAddr[i] := Text003;
                             ContactText := '';
                             CLEAR(SalesPurchPerson);
                             CheckNoText := Text011;
                             CheckDateText := Text012;
                           END;
                         END;

      }
      SECTIONS
      {
      }
       }
    { PROPERTIES
      {
        DataItemIndent=1;
        DataItemTable=Table2000000026;
        DataItemTableView=SORTING(Number);
        DataItemVarName=CheckPages;
        OnPreDataItem=BEGIN
                        FirstPage := TRUE;
                        FoundLast := FALSE;
                        TotalLineAmount := 0;
                        TotalLineDiscount := 0;
                      END;

        OnAfterGetRecord=BEGIN
                           IF FoundLast THEN
                             CurrReport.BREAK;

                           UseCheckNo := INCSTR(UseCheckNo);
                           IF NOT TestPrint THEN
                             CheckNoText := UseCheckNo
                           ELSE
                             CheckNoText := Text011;
                         END;

        OnPostDataItem=BEGIN
                         IF NOT TestPrint THEN BEGIN
                           IF UseCheckNo <> GenJnlLine."Document No." THEN BEGIN
                             GenJnlLine3.RESET;
                             GenJnlLine3.SETCURRENTKEY("Journal Template Name","Journal Batch Name","Posting Date","Document No.");
                             GenJnlLine3.SETRANGE("Journal Template Name",GenJnlLine."Journal Template Name");
                             GenJnlLine3.SETRANGE("Journal Batch Name",GenJnlLine."Journal Batch Name");
                             GenJnlLine3.SETRANGE("Posting Date",GenJnlLine."Posting Date");
                             GenJnlLine3.SETRANGE("Document No.",UseCheckNo);
                             IF GenJnlLine3.FIND('-') THEN
                               GenJnlLine3.FIELDERROR("Document No.",STRSUBSTNO(Text013,UseCheckNo));
                           END;

                           IF ApplyMethod <> ApplyMethod::MoreLinesOneEntry THEN BEGIN
                             GenJnlLine3 := GenJnlLine;
                             GenJnlLine3.TESTFIELD("Posting No. Series",'');
                             GenJnlLine3."Document No." := UseCheckNo;
                             GenJnlLine3."Check Printed" := TRUE;
                             GenJnlLine3.MODIFY;
                           END ELSE BEGIN
                             IF GenJnlLine2.FIND('-') THEN BEGIN
                               HighestLineNo := GenJnlLine2."Line No.";
                               REPEAT
                                 IF GenJnlLine2."Line No." > HighestLineNo THEN
                                   HighestLineNo := GenJnlLine2."Line No.";
                                 GenJnlLine3 := GenJnlLine2;
                                 GenJnlLine3.TESTFIELD("Posting No. Series",'');
                                 GenJnlLine3."Bal. Account No." := '';
                                 GenJnlLine3."Bank Payment Type" := GenJnlLine3."Bank Payment Type"::" ";
                                 GenJnlLine3."Document No." := UseCheckNo;
                                 GenJnlLine3."Check Printed" := TRUE;
                                 GenJnlLine3.VALIDATE(Amount);
                                 GenJnlLine3.MODIFY;
                               UNTIL GenJnlLine2.NEXT = 0;
                             END;

                             GenJnlLine3.RESET;
                             GenJnlLine3 := GenJnlLine;
                             GenJnlLine3.SETRANGE("Journal Template Name",GenJnlLine."Journal Template Name");
                             GenJnlLine3.SETRANGE("Journal Batch Name",GenJnlLine."Journal Batch Name");
                             GenJnlLine3."Line No." := HighestLineNo;
                             IF GenJnlLine3.NEXT = 0 THEN
                               GenJnlLine3."Line No." := HighestLineNo + 10000
                             ELSE BEGIN
                               WHILE GenJnlLine3."Line No." = HighestLineNo + 1 DO BEGIN
                                 HighestLineNo := GenJnlLine3."Line No.";
                                 IF GenJnlLine3.NEXT = 0 THEN
                                   GenJnlLine3."Line No." := HighestLineNo + 20000;
                               END;
                               GenJnlLine3."Line No." := (GenJnlLine3."Line No." + HighestLineNo) DIV 2;
                             END;
                             GenJnlLine3.INIT;
                             GenJnlLine3.VALIDATE("Posting Date",GenJnlLine."Posting Date");
                             GenJnlLine3."Document Type" := GenJnlLine."Document Type";
                             GenJnlLine3."Document No." := UseCheckNo;
                             GenJnlLine3."Account Type" := GenJnlLine3."Account Type"::"Bank Account";
                             GenJnlLine3.VALIDATE("Account No.",BankAcc2."No.");
                             IF BalancingType <> BalancingType::"G/L Account" THEN
                               GenJnlLine3.Description := STRSUBSTNO(Text014,SELECTSTR(BalancingType + 1,Text062),BalancingNo);
                             GenJnlLine3.VALIDATE(Amount,-TotalLineAmount);
                             GenJnlLine3."Bank Payment Type" := GenJnlLine3."Bank Payment Type"::"Computer Check";
                             GenJnlLine3."Check Printed" := TRUE;
                             GenJnlLine3."Source Code" := GenJnlLine."Source Code";
                             GenJnlLine3."Reason Code" := GenJnlLine."Reason Code";
                             GenJnlLine3."Allow Zero-Amount Posting" := TRUE;
                             GenJnlLine3.INSERT;
                           END;
                         END;

                         BankAcc2."Last Check No." := UseCheckNo;
                         BankAcc2.MODIFY;

                         COMMIT;
                         CLEAR(CheckManagement);
                       END;

      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18690;
            SectionHeight=9729;
          }
          CONTROLS
          {
            { 52  ;TextBox      ;11550;423  ;4410 ;423  ;FontSize=10;
                                                         FontBold=No;
                                                         SourceExpr='Le ' + CheckDateText }
            { 1000000017;TextBox;0    ;5922 ;6300 ;423  ;Visible=Yes;
                                                         FontSize=10;
                                                         SourceExpr=CompanyAddr[8] }
            { 1000000018;TextBox;0    ;5499 ;6300 ;423  ;Visible=Yes;
                                                         FontSize=10;
                                                         SourceExpr=CompanyAddr[7] }
            { 1000000019;TextBox;0    ;5076 ;6300 ;423  ;Visible=Yes;
                                                         FontSize=10;
                                                         SourceExpr=CompanyAddr[6] }
            { 1000000020;TextBox;0    ;4230 ;6300 ;423  ;Visible=Yes;
                                                         FontSize=10;
                                                         SourceExpr=CompanyAddr[4] }
            { 1000000021;TextBox;0    ;4653 ;6300 ;423  ;Visible=Yes;
                                                         FontSize=10;
                                                         SourceExpr=CompanyAddr[5] }
            { 1000000022;TextBox;0    ;3807 ;6300 ;423  ;Visible=Yes;
                                                         FontSize=10;
                                                         SourceExpr=CompanyAddr[3] }
            { 1000000023;TextBox;0    ;3384 ;6300 ;423  ;Visible=Yes;
                                                         FontSize=10;
                                                         SourceExpr=CompanyAddr[2] }
            { 1000000024;TextBox;0    ;2961 ;6300 ;423  ;Visible=Yes;
                                                         FontSize=10;
                                                         FontBold=Yes;
                                                         SourceExpr=CompanyAddr[1] }
            { 1000000026;TextBox;9660 ;3807 ;6300 ;423  ;FontSize=10;
                                                         SourceExpr=CheckToAddr[2] }
            { 1000000027;TextBox;9660 ;4653 ;6300 ;423  ;FontSize=10;
                                                         SourceExpr=CheckToAddr[4] }
            { 1000000028;TextBox;9660 ;4230 ;6300 ;423  ;FontSize=10;
                                                         SourceExpr=CheckToAddr[3] }
            { 1000000029;TextBox;9660 ;5076 ;6300 ;423  ;FontSize=10;
                                                         SourceExpr=CheckToAddr[5] }
            { 1000000031;TextBox;11550;0    ;4410 ;423  ;FontSize=10;
                                                         SourceExpr=CompanyInfo.City }
            { 1000000032;Label  ;2940 ;7191 ;3150 ;423  ;FontSize=10;
                                                         CaptionML=FRA=Messieurs, }
            { 1000000035;TextBox;840  ;8037 ;17010;1269 ;HorzAlign=Left;
                                                         FontSize=10;
                                                         FontBold=No;
                                                         MultiLine=Yes;
                                                         CaptionML=[ENU=Check No.;
                                                                    FRA=N¯ chäque];
                                                         SourceExpr=STRSUBSTNO(Text50000, CheckNoText) }
            { 1000000010;TextBox;9660 ;5499 ;6300 ;423  ;FontSize=10;
                                                         SourceExpr=CheckToAddr[6] }
            { 1000000011;TextBox;9660 ;5922 ;6300 ;423  ;FontSize=10;
                                                         SourceExpr=CheckToAddr[7] }
            { 1000000013;TextBox;9660 ;6345 ;6300 ;423  ;FontSize=10;
                                                         SourceExpr=CheckToAddr[8] }
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemIndent=2;
        DataItemTable=Table2000000026;
        DataItemTableView=SORTING(Number);
        DataItemVarName=PrintSettledLoop;
        OnPreDataItem=BEGIN
                        IF NOT TestPrint THEN
                          IF FirstPage THEN BEGIN
                            FoundLast := TRUE;
                            CASE ApplyMethod OF
                              ApplyMethod::OneLineOneEntry: FoundLast := FALSE;

                              ApplyMethod::OneLineID:
                                CASE BalancingType OF
                                  BalancingType::Customer:
                                    BEGIN
                                      CustLedgEntry.RESET;
                                      CustLedgEntry.SETCURRENTKEY("Customer No.",Open,Positive);
                                      CustLedgEntry.SETRANGE("Customer No.",BalancingNo);
                                      CustLedgEntry.SETRANGE(Open,TRUE);
                                      CustLedgEntry.SETRANGE(Positive,TRUE);
                                      CustLedgEntry.SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID");
                                      FoundLast := NOT CustLedgEntry.FIND('-');
                                      IF FoundLast THEN BEGIN
                                        CustLedgEntry.SETRANGE(Positive,FALSE);
                                        FoundLast := NOT CustLedgEntry.FIND('-');
                                        FoundNegative := TRUE;
                                      END ELSE
                                        FoundNegative := FALSE;
                                    END;
                                  BalancingType::Vendor:
                                    BEGIN
                                      VendLedgEntry.RESET;
                                      VendLedgEntry.SETCURRENTKEY("Vendor No.",Open,Positive);
                                      VendLedgEntry.SETRANGE("Vendor No.",BalancingNo);
                                      VendLedgEntry.SETRANGE(Open,TRUE);
                                      VendLedgEntry.SETRANGE(Positive,TRUE);
                                      VendLedgEntry.SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID");
                                      FoundLast := NOT VendLedgEntry.FIND('-');
                                      IF FoundLast THEN BEGIN
                                        VendLedgEntry.SETRANGE(Positive,FALSE);
                                        FoundLast := NOT VendLedgEntry.FIND('-');
                                        FoundNegative := TRUE;
                                      END ELSE
                                        FoundNegative := FALSE;
                                    END;
                                END;

                              ApplyMethod::MoreLinesOneEntry: FoundLast := FALSE;
                            END;
                          END
                        ELSE
                          FoundLast := FALSE;
                      END;

        OnAfterGetRecord=BEGIN
                           ExternalDocNo := '';     //I56 db
                           IF NOT TestPrint THEN BEGIN
                             IF FoundLast THEN BEGIN
                               IF RemainingAmount <> 0 THEN BEGIN
                                 DocType := Text015;
                                 DocNo := '';
                                 ExternalDocNo := '';
                                 LineAmount := RemainingAmount;
                                 LineAmount2 := RemainingAmount;
                                 LineDiscount := 0;
                                 RemainingAmount := 0;
                               END ELSE
                                 CurrReport.BREAK;
                             END ELSE BEGIN
                               CASE ApplyMethod OF
                                 ApplyMethod::OneLineOneEntry:
                                   BEGIN
                                     CASE BalancingType OF
                                       BalancingType::Customer:
                                         BEGIN
                                           CustLedgEntry.RESET;
                                           CustLedgEntry.SETCURRENTKEY("Document No.","Document Type","Customer No.");
                                           CustLedgEntry.SETRANGE("Document Type",GenJnlLine."Applies-to Doc. Type");
                                           CustLedgEntry.SETRANGE("Document No.",GenJnlLine."Applies-to Doc. No.");
                                           CustLedgEntry.SETRANGE("Customer No.",BalancingNo);
                                           CustLedgEntry.FIND('-');
                                           CustUpdateAmounts(CustLedgEntry,RemainingAmount);
                                         END;
                                       BalancingType::Vendor:
                                         BEGIN
                                           VendLedgEntry.RESET;
                                           VendLedgEntry.SETCURRENTKEY("Document No.","Document Type","Vendor No.");
                                           VendLedgEntry.SETRANGE("Document Type",GenJnlLine."Applies-to Doc. Type");
                                           VendLedgEntry.SETRANGE("Document No.",GenJnlLine."Applies-to Doc. No.");
                                           VendLedgEntry.SETRANGE("Vendor No.",BalancingNo);
                                           VendLedgEntry.FIND('-');
                                           VendUpdateAmounts(VendLedgEntry,RemainingAmount);
                                         END;
                                     END;
                                     RemainingAmount := RemainingAmount - LineAmount2;
                                     FoundLast := TRUE;
                                   END;
                                 ApplyMethod::OneLineID:
                                   BEGIN
                                     CASE BalancingType OF
                                       BalancingType::Customer:
                                         BEGIN
                                           CustUpdateAmounts(CustLedgEntry,RemainingAmount);
                                           ExternalDocNo := CustLedgEntry."External Document No.";     //I56 db
                                           FoundLast := (CustLedgEntry.NEXT = 0) OR (RemainingAmount <= 0);
                                           IF FoundLast AND NOT FoundNegative THEN BEGIN
                                             CustLedgEntry.SETRANGE(Positive,FALSE);
                                             FoundLast := NOT CustLedgEntry.FIND('-');
                                             FoundNegative := TRUE;
                                           END;
                                         END;
                                       BalancingType::Vendor:
                                         BEGIN
                                           VendUpdateAmounts(VendLedgEntry,RemainingAmount);
                                           ExternalDocNo := VendLedgEntry."External Document No.";     //I56 db
                                           FoundLast := (VendLedgEntry.NEXT = 0) OR (RemainingAmount <= 0);
                                           IF FoundLast AND NOT FoundNegative THEN BEGIN
                                             VendLedgEntry.SETRANGE(Positive,FALSE);
                                             FoundLast := NOT VendLedgEntry.FIND('-');
                                             FoundNegative := TRUE;
                                           END;
                                         END;
                                     END;
                                     RemainingAmount := RemainingAmount - LineAmount2;
                                   END;
                                 ApplyMethod::MoreLinesOneEntry:
                                   BEGIN
                                     CurrentLineAmount := GenJnlLine2.Amount;
                                     IF GenJnlLine2."Applies-to ID" <> '' THEN
                                       ERROR(
                                         Text016 +
                                         Text017);
                                     GenJnlLine2.TESTFIELD("Check Printed",FALSE);
                                     GenJnlLine2.TESTFIELD("Bank Payment Type",GenJnlLine2."Bank Payment Type"::"Computer Check");

                                     IF GenJnlLine2."Applies-to Doc. No." = '' THEN BEGIN
                                       DocType := Text015;
                                       DocNo := '';
                                       ExternalDocNo := '';
                                       LineAmount := CurrentLineAmount;
                                       LineDiscount := 0;
                                     END ELSE BEGIN
                                       CASE BalancingType OF
                                         BalancingType::"G/L Account":
                                           BEGIN
                                             DocType := FORMAT(GenJnlLine2."Document Type");
                                             DocNo := GenJnlLine2."Document No.";
                                             ExternalDocNo := GenJnlLine2."External Document No.";
                                             LineAmount := CurrentLineAmount;
                                             LineDiscount := 0;
                                           END;
                                         BalancingType::Customer:
                                           BEGIN
                                             CustLedgEntry.RESET;
                                             CustLedgEntry.SETCURRENTKEY("Document No.","Document Type","Customer No.");
                                             CustLedgEntry.SETRANGE("Document Type",GenJnlLine2."Applies-to Doc. Type");
                                             CustLedgEntry.SETRANGE("Document No.",GenJnlLine2."Applies-to Doc. No.");
                                             CustLedgEntry.SETRANGE("Customer No.",BalancingNo);
                                             CustLedgEntry.FIND('-');
                                             CustUpdateAmounts(CustLedgEntry,CurrentLineAmount);
                                             LineAmount := CurrentLineAmount;
                                           END;
                                         BalancingType::Vendor:
                                           BEGIN
                                             VendLedgEntry.RESET;
                                             VendLedgEntry.SETCURRENTKEY("Document No.","Document Type","Vendor No.");
                                             VendLedgEntry.SETRANGE("Document Type",GenJnlLine2."Applies-to Doc. Type");
                                             VendLedgEntry.SETRANGE("Document No.",GenJnlLine2."Applies-to Doc. No.");
                                             VendLedgEntry.SETRANGE("Vendor No.",BalancingNo);
                                             VendLedgEntry.FIND('-');
                                             VendUpdateAmounts(VendLedgEntry,CurrentLineAmount);
                                             LineAmount := CurrentLineAmount;
                                           END;
                                         BalancingType::"Bank Account":
                                           BEGIN
                                             DocType := FORMAT(GenJnlLine2."Document Type");
                                             DocNo := GenJnlLine2."Document No.";
                                             ExternalDocNo := GenJnlLine2."External Document No.";
                                             LineAmount := CurrentLineAmount;
                                             LineDiscount := 0;
                                           END;
                                       END;
                                     END;
                                     FoundLast := GenJnlLine2.NEXT = 0;
                                   END;
                               END;
                             END;
                             CASE BalancingType OF
                               BalancingType::Customer:
                                 IF  ExternalDocNo='' THEN                                   //I56 DB
                                     ExternalDocNo := CustLedgEntry."External Document No.";
                               BalancingType::Vendor:
                                 IF  ExternalDocNo='' THEN                                   //I56 DB
                                     ExternalDocNo := VendLedgEntry."External Document No.";
                               BalancingType::"Bank Account":
                                 ExternalDocNo := GenJnlLine2."External Document No.";
                             END;

                             TotalLineAmount := TotalLineAmount + LineAmount2;
                             TotalLineDiscount := TotalLineDiscount + LineDiscount;
                           END ELSE BEGIN
                             IF FoundLast THEN
                               CurrReport.BREAK;
                             FoundLast := TRUE;
                             DocType := Text018;
                             DocNo := Text010;
                             ExternalDocNo := Text010;
                             LineAmount := 0;
                             LineDiscount := 0;
                           END;
                         END;

      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Header;
            SectionWidth=18690;
            SectionHeight=846;
            OnPreSection=BEGIN
                           IF NOT PreprintedStub THEN BEGIN
                             TotalText := Text019;
                             CurrReport.SHOWOUTPUT(FALSE);
                           END;
                         END;

          }
          CONTROLS
          {
          }
           }
        { PROPERTIES
          {
            SectionType=Header;
            SectionWidth=18690;
            SectionHeight=876;
            OnPreSection=BEGIN
                           IF PreprintedStub THEN BEGIN
                             TotalText := '';
                             CurrReport.SHOWOUTPUT(FALSE);
                           END;
                           IF GenJnlLine."Currency Code" <> '' THEN
                             NetAmount := STRSUBSTNO(Text063,GenJnlLine."Currency Code")
                           ELSE BEGIN
                             GLSetup.GET;
                             NetAmount := STRSUBSTNO(Text063,GLSetup."LCY Code");
                           END ;
                         END;

          }
          CONTROLS
          {
            { 1000000012;Label  ;7140 ;0    ;2520 ;846  ;ParentControl=113;
                                                         HorzAlign=Right;
                                                         VertAlign=Bottom;
                                                         FontSize=10;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1000000015;Label  ;4620 ;0    ;2100 ;846  ;ParentControl=13;
                                                         VertAlign=Bottom;
                                                         FontSize=10;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1000000016;Label  ;1470 ;0    ;2730 ;846  ;ParentControl=116;
                                                         VertAlign=Bottom;
                                                         FontSize=10;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1000000030;Shape  ;1260 ;0    ;30   ;846  ;ShapeStyle=VertLine }
            { 1000000034;Shape  ;4410 ;0    ;30   ;846  ;ShapeStyle=VertLine }
            { 1000000073;Shape  ;9870 ;0    ;30   ;846  ;ShapeStyle=VertLine }
            { 1000000081;Shape  ;6930 ;0    ;30   ;846  ;ShapeStyle=VertLine }
            { 1000000046;Shape  ;1260 ;846  ;13860;30   ;ShapeStyle=HorzLine }
            { 1000000009;Label  ;10080;0    ;4830 ;846  ;ParentControl=1000000008;
                                                         VertAlign=Bottom;
                                                         FontSize=10;
                                                         FontBold=Yes;
                                                         MultiLine=Yes }
            { 1000000036;Shape  ;15120;0    ;30   ;846  ;ShapeStyle=VertLine }
            { 1000000037;Shape  ;1260 ;0    ;13860;30   ;ShapeStyle=HorzLine }
          }
           }
        { PROPERTIES
          {
            SectionType=Header;
            SectionWidth=18690;
            SectionHeight=846;
            OnPreSection=BEGIN
                           CurrReport.SHOWOUTPUT(NOT FirstPage);
                         END;

          }
          CONTROLS
          {
            { 26  ;TextBox      ;7140 ;0    ;2310 ;423  ;FontSize=9;
                                                         FontBold=Yes;
                                                         SourceExpr=TotalLineAmount - LineAmount;
                                                         AutoFormatType=1;
                                                         AutoFormatExpr=GenJnlLine."Currency Code" }
            { 27  ;Label        ;4620 ;0    ;2100 ;423  ;FontSize=9;
                                                         FontBold=Yes;
                                                         CaptionML=[ENU=Transport;
                                                                    FRA=Report] }
            { 1000000066;Shape  ;4410 ;0    ;30   ;846  ;ShapeStyle=VertLine }
            { 1000000067;Shape  ;1260 ;0    ;30   ;846  ;ShapeStyle=VertLine }
            { 1000000074;Shape  ;9870 ;0    ;30   ;846  ;ShapeStyle=VertLine }
            { 1000000078;Shape  ;6930 ;0    ;30   ;846  ;ShapeStyle=VertLine }
            { 1000000033;Shape  ;15120;0    ;30   ;846  ;ShapeStyle=VertLine }
          }
           }
        { PROPERTIES
          {
            SectionType=Body;
            SectionWidth=18690;
            SectionHeight=423;
            OnPreSection=BEGIN
                           IF DocNo = '' THEN
                             CurrencyCode2 := GenJnlLine."Currency Code";
                         END;

          }
          CONTROLS
          {
            { 113 ;TextBox      ;7140 ;0    ;2310 ;423  ;FontSize=10;
                                                         CaptionML=[ENU=Net Amount;
                                                                    FRA=Montant net];
                                                         SourceExpr=LineAmount;
                                                         AutoFormatType=1;
                                                         AutoFormatExpr=GenJnlLine."Currency Code" }
            { 116 ;TextBox      ;1470 ;0    ;2730 ;423  ;FontSize=10;
                                                         CaptionML=[ENU=Document No.;
                                                                    FRA=N¯ piäce];
                                                         SourceExpr=DocNo }
            { 13  ;TextBox      ;4620 ;0    ;2100 ;423  ;HorzAlign=Left;
                                                         FontSize=10;
                                                         MultiLine=No;
                                                         CaptionML=[ENU=Document Date;
                                                                    FRA=Date document];
                                                         SourceExpr=DocDate }
            { 1000000055;Shape  ;1260 ;0    ;30   ;423  ;ShapeStyle=VertLine }
            { 1000000056;Shape  ;4410 ;0    ;30   ;423  ;ShapeStyle=VertLine }
            { 1000000057;Shape  ;6930 ;0    ;30   ;423  ;ShapeStyle=VertLine }
            { 1000000059;Shape  ;15120;0    ;30   ;423  ;ShapeStyle=VertLine }
            { 1000000076;Shape  ;9870 ;0    ;30   ;423  ;ShapeStyle=VertLine }
            { 1000000008;TextBox;10080;0    ;4830 ;423  ;FontSize=10;
                                                         CaptionML=[ENU=Vendor Invoice No.;
                                                                    FRA=Vos rÇfÇrences];
                                                         SourceExpr=ExternalDocNo }
          }
           }
        { PROPERTIES
          {
            SectionType=Footer;
            SectionWidth=18690;
            SectionHeight=2538;
          }
          CONTROLS
          {
            { 30  ;TextBox      ;6720 ;423  ;3150 ;423  ;FontSize=10;
                                                         FontBold=Yes;
                                                         CaptionML=[ENU=Check amount :;
                                                                    FRA=Montant du chäque :];
                                                         SourceExpr=TotalLineAmount;
                                                         AutoFormatType=1;
                                                         AutoFormatExpr=GenJnlLine."Currency Code" }
            { 1000000039;Label  ;3150 ;423  ;3360 ;423  ;ParentControl=30;
                                                         FontSize=10 }
            { 1000000040;Label  ;3150 ;1692 ;13020;423  ;FontSize=10;
                                                         CaptionML=FRA=Veuillez agrÇer, Messieurs, nos sincäres salutations. }
            { 1000000038;Shape  ;1260 ;0    ;13860;30   ;ShapeStyle=HorzLine }
            { 1000000041;Label  ;3150 ;1269 ;13020;423  ;FontSize=10;
                                                         CaptionML=FRA=Vous en souhaitant bonne rÇception. }
            { 1000000043;Label  ;10080;2115 ;6090 ;423  ;FontSize=10;
                                                         CaptionML=FRA=Le Service ComptabilitÇ. }
          }
           }
      }
       }
    { PROPERTIES
      {
        DataItemIndent=2;
        DataItemTable=Table2000000026;
        DataItemTableView=SORTING(Number);
        MaxIteration=1;
        DataItemVarName=PrintCheck;
        OnAfterGetRecord=VAR
                           Vendor@1120000 : Record 23;
                         BEGIN
                           IF NOT TestPrint THEN BEGIN
                             WITH GenJnlLine DO BEGIN
                               CheckLedgEntry.INIT;
                               CheckLedgEntry."Bank Account No." := BankAcc2."No.";
                               CheckLedgEntry."Posting Date" := "Posting Date";
                               CheckLedgEntry."Document Type" := "Document Type";
                               CheckLedgEntry."Document No." := UseCheckNo;
                               CheckLedgEntry.Description := Description;
                               CheckLedgEntry."Bank Payment Type" := "Bank Payment Type";
                               CheckLedgEntry."Bal. Account Type" := BalancingType;
                               CheckLedgEntry."Bal. Account No." := BalancingNo;
                               IF FoundLast THEN BEGIN
                                 IF TotalLineAmount < 0 THEN
                                   ERROR(
                                     Text020,
                                     UseCheckNo,TotalLineAmount);
                                 CheckLedgEntry."Entry Status" := CheckLedgEntry."Entry Status"::Printed;
                                 CheckLedgEntry.Amount := TotalLineAmount;
                               END ELSE BEGIN
                                 CheckLedgEntry."Entry Status" := CheckLedgEntry."Entry Status"::Voided;
                                 CheckLedgEntry.Amount := 0;
                               END;
                               CheckLedgEntry."Check Date" := "Posting Date";
                               CheckLedgEntry."Check No." := UseCheckNo;
                               CheckManagement.InsertCheck(CheckLedgEntry);

                               IF FoundLast THEN BEGIN
                                 CheckAmountText := FORMAT(CheckLedgEntry.Amount,0);
                                 i := STRPOS(CheckAmountText,'.');
                                 i2 := -1;
                                 IF i = 0 THEN
                                   i2 := STRPOS(CheckAmountText,',');
                                 CASE TRUE OF
                                   i = 0:
                                     IF i2 = -1 THEN
                                       CheckAmountText := CheckAmountText + '.00'
                                     ELSE IF i2 = 0 THEN
                                       CheckAmountText := CheckAmountText + ',00'
                                       ELSE IF i2 = STRLEN(CheckAmountText) - 1 THEN
                                         CheckAmountText := CheckAmountText + '0';
                           // Fin I56 ST
                                   i = STRLEN(CheckAmountText) - 1:
                                     CheckAmountText := CheckAmountText + '0';
                                   i > STRLEN(CheckAmountText) - 2:
                                     CheckAmountText := COPYSTR(CheckAmountText,1,i + 2);
                                 END;
                                 Vendor.GET(GenJnlLine."Account No.");
                                 FormatNoText(DescriptionLine,CheckLedgEntry.Amount,BankAcc2."Currency Code");
                                 VoidText := '';
                               END ELSE BEGIN
                                 CLEAR(CheckAmountText);
                                 CLEAR(DescriptionLine);
                                 DescriptionLine[1] := Text021;
                                 DescriptionLine[2] := DescriptionLine[1];
                                 VoidText := Text022;
                               END;
                             END;
                           END ELSE BEGIN
                             WITH GenJnlLine DO BEGIN
                               CheckLedgEntry.INIT;
                               CheckLedgEntry."Bank Account No." := BankAcc2."No.";
                               CheckLedgEntry."Posting Date" := "Posting Date";
                               CheckLedgEntry."Document No." := UseCheckNo;
                               CheckLedgEntry.Description := Text023;
                               CheckLedgEntry."Bank Payment Type" := "Bank Payment Type"::"Computer Check";
                               CheckLedgEntry."Entry Status" := CheckLedgEntry."Entry Status"::"Test Print";
                               CheckLedgEntry."Check Date" := "Posting Date";
                               CheckLedgEntry."Check No." := UseCheckNo;
                               CheckManagement.InsertCheck(CheckLedgEntry);

                               CheckAmountText := Text024;
                               DescriptionLine[1] := Text025;
                               DescriptionLine[2] := DescriptionLine[1];
                               VoidText := Text022;
                             END;
                           END;

                           ChecksPrinted := ChecksPrinted + 1;
                           FirstPage := FALSE;
                         END;

      }
      SECTIONS
      {
        { PROPERTIES
          {
            SectionType=Footer;
            PlaceInBottom=Yes;
            SectionWidth=18690;
            SectionHeight=6345;
          }
          CONTROLS
          {
            { 1   ;TextBox      ;15120;1692 ;2730 ;423  ;HorzAlign=Right;
                                                         FontSize=9;
                                                         PadChar=*;
                                                         DecimalPlaces=2:2;
                                                         SourceExpr=CheckAmountText }
            { 2   ;TextBox      ;15120;2800 ;2730 ;423  ;HorzAlign=Left;
                                                         FontSize=9;
                                                         SourceExpr=CheckDateText }
            { 5   ;TextBox      ;2100 ;1046 ;10920;423  ;FontSize=9;
                                                         SourceExpr=DescriptionLine[2] }
            { 6   ;TextBox      ;3360 ;423  ;9660 ;423  ;FontSize=9;
                                                         MultiLine=Yes;
                                                         SourceExpr=DescriptionLine[1] }
            { 7   ;TextBox      ;2100 ;1692 ;10920;423  ;FontSize=9;
                                                         SourceExpr=CheckToAddr[1] }
            { 3   ;TextBox      ;12180;3807 ;4620 ;423  ;FontSize=10;
                                                         FontBold=Yes;
                                                         SourceExpr=VoidText }
            { 1000000014;TextBox;15120;2315 ;2730 ;423  ;HorzAlign=Left;
                                                         FontSize=10;
                                                         SourceExpr=CompanyInfo.City }
          }
           }
      }
       }
  }
  REQUESTFORM
  {
    PROPERTIES
    {
      Width=6930;
      Height=3740;
      OnOpenForm=BEGIN
                   IF BankAcc2."No." <> '' THEN BEGIN
                     IF BankAcc2.GET(BankAcc2."No.") THEN
                       UseCheckNo := BankAcc2."Last Check No."
                     ELSE BEGIN
                       BankAcc2."No." := '';
                       UseCheckNo := '';
                     END;
                   END;
                 END;

    }
    CONTROLS
    {
      { 1   ;TextBox      ;3850 ;0    ;2200 ;440  ;CaptionML=[ENU=Bank Account;
                                                              FRA=Compte bancaire];
                                                   SourceExpr=BankAcc2."No.";
                                                   TableRelation="Bank Account";
                                                   OnValidate=BEGIN
                                                                IF BankAcc2."No." <> '' THEN BEGIN
                                                                  BankAcc2.GET(BankAcc2."No.");
                                                                  BankAcc2.TESTFIELD("Last Check No.");
                                                                  UseCheckNo := BankAcc2."Last Check No.";
                                                                END;
                                                              END;
                                                               }
      { 2   ;Label        ;0    ;0    ;3410 ;440  ;ParentControl=1 }
      { 3   ;TextBox      ;3850 ;660  ;2200 ;440  ;CaptionML=[ENU=Last Check No.;
                                                              FRA=N¯ dern. chäque];
                                                   SourceExpr=UseCheckNo }
      { 4   ;Label        ;0    ;660  ;3630 ;440  ;ParentControl=3 }
      { 5   ;CheckBox     ;3850 ;2200 ;440  ;440  ;ShowCaption=No;
                                                   CaptionML=[ENU=Reprint Checks;
                                                              FRA=RÇimprimer les chäques];
                                                   SourceExpr=ReprintChecks }
      { 6   ;Label        ;0    ;2200 ;3630 ;440  ;ParentControl=5 }
      { 9   ;CheckBox     ;3850 ;2750 ;440  ;440  ;ShowCaption=No;
                                                   CaptionML=[ENU=Test Print;
                                                              FRA=Impression test];
                                                   SourceExpr=TestPrint }
      { 10  ;Label        ;0    ;2750 ;3630 ;440  ;ParentControl=9 }
      { 11  ;CheckBox     ;3850 ;1650 ;440  ;440  ;ShowCaption=No;
                                                   CaptionML=[ENU=One Check per Vendor/ Customer per Document No.;
                                                              FRA=Un chäque par fournisseur/ client par n¯ document];
                                                   SourceExpr=OneCheckPrVendor }
      { 12  ;Label        ;0    ;1320 ;3740 ;770  ;ParentControl=11;
                                                   VertAlign=Bottom;
                                                   MultiLine=Yes }
      { 13  ;CheckBox     ;3850 ;3300 ;440  ;440  ;ShowCaption=No;
                                                   CaptionML=[ENU=Preprinted Stub;
                                                              FRA=Formulaire prÇimprimÇ];
                                                   SourceExpr=PreprintedStub }
      { 14  ;Label        ;0    ;3300 ;3630 ;440  ;ParentControl=13 }
    }
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Preview is not allowed.;FRA=L''aperáu n''est pas autorisÇ.';
      Text001@1001 : TextConst 'ENU=Last Check No. must be filled in.;FRA=Le numÇro du dernier chäque doit àtre renseignÇ.';
      Text002@1002 : TextConst 'ENU=Filters on %1 and %2 are not allowed.;FRA=Les filtres sur %1 et %2 ne sont pas autorisÇs.';
      Text003@1003 : TextConst 'ENU=XXXXXXXXXXXXXXXX;FRA=XXXXXXXXXXXXXXXX';
      Text004@1004 : TextConst 'ENU=must be entered.;FRA=doit àtre saisi(e).';
      Text005@1005 : TextConst 'ENU=The Bank Account and the General Journal Line must have the same currency.;FRA=Le compte bancaire et la ligne feuille doivent indiquer la màme devise.';
      Text006@1006 : TextConst 'ENU=Salesperson;FRA=Vendeur';
      Text007@1007 : TextConst 'ENU=Purchaser;FRA=Acheteur';
      Text008@1008 : TextConst 'ENU=Both Bank Accounts must have the same currency.;FRA=Les deux comptes bancaires doivent indiquer la màme devise.';
      Text009@1009 : TextConst 'ENU=Our Contact;FRA=Notre contact';
      Text010@1010 : TextConst 'ENU=XXXXXXXXXX;FRA=XXXXXXXXXX';
      Text011@1011 : TextConst 'ENU=XXXX;FRA=XXXX';
      Text012@1012 : TextConst 'ENU=XX.XXXXXXXXXX.XXXX;FRA=XX.XXXXXXXXXX.XXXX';
      Text013@1013 : TextConst 'ENU=%1 already exists.;FRA=%1 existe dÇjÖ.';
      Text014@1014 : TextConst 'ENU=Check for %1 %2;FRA=Chäque pour %1 %2';
      Text015@1015 : TextConst 'ENU=Payment;FRA=Paiement';
      Text016@1016 : TextConst 'ENU=In the Check report, One Check per Vendor and Document No.\;FRA=Dans l''Çtat Chäque, un chäque par fournisseur et par n¯ document\';
      Text017@1017 : TextConst 'ENU=must not be activated when Applies-to ID is specified in the journal lines.;FRA=ne doit pas àtre activÇ lorsque l''ID lettrage est spÇcifiÇ sur la ligne.';
      Text018@1018 : TextConst 'ENU=XXX;FRA=XXX';
      Text019@1019 : TextConst 'ENU=Total;FRA=Total';
      Text020@1020 : TextConst 'ENU=The total amount of check %1 is %2. The amount must be positive.;FRA=Le montant total du chäque %1 est de %2. Le montant doit àtre positif.';
      Text021@1021 : TextConst 'ENU=VOID VOID VOID VOID VOID VOID VOID VOID VOID VOID VOID VOID VOID VOID VOID VOID;FRA=NUL NUL NUL NUL NUL NUL NUL NUL NUL NUL NUL NUL NUL NUL NUL NUL NUL NUL NUL NUL';
      Text022@1022 : TextConst 'ENU=no-NEGOTIABLE;FRA=no NEGOCIABLE';
      Text023@1023 : TextConst 'ENU=Test print;FRA=Impression test';
      Text024@1024 : TextConst 'ENU=XXXX.XX;FRA=XXXX.XX';
      Text025@1025 : TextConst 'ENU=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;FRA=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX';
      Text026@1026 : TextConst 'ENU=ZERO;FRA=ZERO';
      Text027@1027 : TextConst 'ENU=HUNDRED;FRA=CENT';
      Text028@1028 : TextConst 'ENU=AND;FRA=ET';
      Text029@1029 : TextConst 'ENU=%1 results in a written number that is too long.;FRA=%1 rÇsultat(s) en toutes lettres trop long(s).';
      Text030@1030 : TextConst 'ENU=" is already applied to %1 %2 for customer %3.";FRA=" est dÇjÖ lettrÇ(e) avec %1 %2 pour le client %3."';
      Text031@1031 : TextConst 'ENU=" is already applied to %1 %2 for vendor %3.";FRA=" est dÇjÖ lettrÇ(e) avec %1 %2 pour le fournisseur %3."';
      Text032@1032 : TextConst 'ENU=ONE;FRA=UN';
      Text033@1033 : TextConst 'ENU=TWO;FRA=DEUX';
      Text034@1034 : TextConst 'ENU=THREE;FRA=TROIS';
      Text035@1035 : TextConst 'ENU=FOUR;FRA=QUATRE';
      Text036@1036 : TextConst 'ENU=FIVE;FRA=CINQ';
      Text037@1037 : TextConst 'ENU=SIX;FRA=SIX';
      Text038@1038 : TextConst 'ENU=SEVEN;FRA=SEPT';
      Text039@1039 : TextConst 'ENU=EIGHT;FRA=HUIT';
      Text040@1040 : TextConst 'ENU=NINE;FRA=NEUF';
      Text041@1041 : TextConst 'ENU=TEN;FRA=DIX';
      Text042@1042 : TextConst 'ENU=ELEVEN;FRA=ONZE';
      Text043@1043 : TextConst 'ENU=TWELVE;FRA=DOUZE';
      Text044@1044 : TextConst 'ENU=THIRTEEN;FRA=TREIZE';
      Text045@1045 : TextConst 'ENU=FOURTEEN;FRA=QUATORZE';
      Text046@1046 : TextConst 'ENU=FIFTEEN;FRA=QUINZE';
      Text047@1047 : TextConst 'ENU=SIXTEEN;FRA=SEIZE';
      Text048@1048 : TextConst 'ENU=SEVENTEEN;FRA=DIX-SEPT';
      Text049@1049 : TextConst 'ENU=EIGHTEEN;FRA=DIX-HUIT';
      Text050@1050 : TextConst 'ENU=NINETEEN;FRA=DIX-NEUF';
      Text051@1051 : TextConst 'ENU=TWENTY;FRA=VINGT';
      Text052@1052 : TextConst 'ENU=THIRTY;FRA=TRENTE';
      Text053@1053 : TextConst 'ENU=FORTY;FRA=QUARANTE';
      Text054@1054 : TextConst 'ENU=FIFTY;FRA=CINQUANTE';
      Text055@1055 : TextConst 'ENU=SIXTY;FRA=SOIXANTE';
      Text056@1056 : TextConst 'ENU=SEVENTY;FRA=SOIXANTE-DIX';
      Text057@1057 : TextConst 'ENU=EIGHTY;FRA=QUATRE-VINGT';
      Text058@1058 : TextConst 'ENU=NINETY;FRA=QUATRE-DIX';
      Text059@1059 : TextConst 'ENU=THOUSAND;FRA=MILLE';
      Text060@1060 : TextConst 'ENU=MILLION;FRA=MILLION';
      Text061@1061 : TextConst 'ENU=BILLION;FRA=MILLIARD';
      CompanyInfo@1062 : Record 79;
      SalesPurchPerson@1063 : Record 13;
      GenJnlLine2@1064 : Record 81;
      GenJnlLine3@1065 : Record 81;
      Cust@1066 : Record 18;
      CustLedgEntry@1067 : Record 21;
      Vend@1068 : Record 23;
      VendLedgEntry@1069 : Record 25;
      BankAcc@1070 : Record 270;
      BankAcc2@1071 : Record 270;
      CheckLedgEntry@1072 : Record 272;
      Currency@1073 : Record 4;
      FormatAddr@1074 : Codeunit 365;
      CheckManagement@1075 : Codeunit 367;
      CompanyAddr@1076 : ARRAY [8] OF Text[50];
      CheckToAddr@1077 : ARRAY [8] OF Text[50];
      OnesText@1078 : ARRAY [20] OF Text[30];
      TensText@1079 : ARRAY [10] OF Text[30];
      ExponentText@1080 : ARRAY [5] OF Text[30];
      BalancingType@1081 : 'G/L Account,Customer,Vendor,Bank Account';
      BalancingNo@1082 : Code[20];
      ContactText@1083 : Text[30];
      CheckNoText@1084 : Text[30];
      CheckDateText@1085 : Text[30];
      CheckAmountText@1086 : Text[30];
      DescriptionLine@1087 : ARRAY [2] OF Text[200];
      DocType@1088 : Text[30];
      DocNo@1089 : Text[30];
      VoidText@1090 : Text[30];
      LineAmount@1091 : Decimal;
      LineDiscount@1092 : Decimal;
      TotalLineAmount@1093 : Decimal;
      TotalLineDiscount@1094 : Decimal;
      RemainingAmount@1095 : Decimal;
      CurrentLineAmount@1096 : Decimal;
      UseCheckNo@1097 : Code[20];
      FoundLast@1098 : Boolean;
      ReprintChecks@1099 : Boolean;
      TestPrint@1100 : Boolean;
      FirstPage@1101 : Boolean;
      OneCheckPrVendor@1102 : Boolean;
      FoundNegative@1103 : Boolean;
      ApplyMethod@1104 : 'Payment,OneLineOneEntry,OneLineID,MoreLinesOneEntry';
      ChecksPrinted@1105 : Integer;
      HighestLineNo@1106 : Integer;
      PreprintedStub@1107 : Boolean;
      TotalText@1108 : Text[10];
      DocDate@1109 : Date;
      i@1110 : Integer;
      Text062@1111 : TextConst 'ENU=G/L Account,Customer,Vendor,Bank Account;FRA=GÇnÇral,Client,Fournisseur,Banque';
      Text1120000@1120000 : TextConst 'ENU=EUROS;FRA=EUROS';
      CurrencyCode2@1112 : Code[10];
      Text1120001@1120001 : TextConst 'ENU=CENT;FRA=CENTIME';
      NetAmount@1114 : Text[30];
      i2@1120002 : Integer;
      CurrencyExchangeRate@1115 : Record 330;
      LineAmount2@1116 : Decimal;
      Text063@1117 : TextConst 'ENU=Net Amount %1;FRA=Montant net %1';
      GLSetup@1118 : Record 98;
      Text064@1113 : TextConst 'ENU=%1 must not be %2 for %3 %4.;FRA=%1 ne doit pas àtre %2 pour %3 %4.';
      "-"@1000000000 : Integer;
      DocDesc@1000000001 : Text[80];
      DocDueDate@1000000002 : Date;
      Text50000@1000000003 : TextConst 'FRA="                    Nous vous prions de trouver ci-dessous le relevÇ des factures correspondantes au chäque numÇro %1 ci-joint :"';
      ExternalDocNo@1000000006 : Code[20];
      TextLigne1@1000000010 : Text[30];
      TextLigne2@1000000011 : Text[250];

    PROCEDURE FormatNoText@1(VAR NoText@1000 : ARRAY [2] OF Text[80];No@1001 : Decimal;CurrencyCode@1002 : Code[10]);
    BEGIN
      IF (CurrencyCode = '') OR (CurrencyCode = 'FRF') THEN
        FormatNoTextFR(NoText,No,CurrencyCode)
      ELSE
        FormatNoTextINTL(NoText,No,CurrencyCode);
    END;

    LOCAL PROCEDURE AddToNoText@2(VAR NoText@1000 : ARRAY [2] OF Text[80];VAR NoTextIndex@1001 : Integer;VAR PrintExponent@1002 : Boolean;AddText@1003 : Text[30]);
    BEGIN
      PrintExponent := TRUE;

      IF NoTextIndex = 1 THEN
        IF STRLEN(NoText[NoTextIndex] + ' ' + AddText) > 40 THEN
          NoTextIndex := NoTextIndex + 1;

      WHILE STRLEN(NoText[NoTextIndex] + ' ' + AddText) > MAXSTRLEN(NoText[1]) DO BEGIN
        NoTextIndex := NoTextIndex + 1;
        IF NoTextIndex > ARRAYLEN(NoText) THEN
          ERROR(Text029,AddText);
      END;

      NoText[NoTextIndex] := DELCHR(NoText[NoTextIndex] + ' ' + AddText,'<');
    END;

    LOCAL PROCEDURE CustUpdateAmounts@3(VAR CustLedgEntry2@1000 : Record 21;RemainingAmount2@1001 : Decimal);
    BEGIN
      IF (ApplyMethod = ApplyMethod::OneLineOneEntry) OR
         (ApplyMethod = ApplyMethod::MoreLinesOneEntry)
      THEN BEGIN
        GenJnlLine3.RESET;
        GenJnlLine3.SETCURRENTKEY(
          "Account Type","Account No.","Applies-to Doc. Type","Applies-to Doc. No.");
        GenJnlLine3.SETRANGE("Account Type",GenJnlLine3."Account Type"::Customer);
        GenJnlLine3.SETRANGE("Account No.",CustLedgEntry2."Customer No.");
        GenJnlLine3.SETRANGE("Applies-to Doc. Type",CustLedgEntry2."Document Type");
        GenJnlLine3.SETRANGE("Applies-to Doc. No.",CustLedgEntry2."Document No.");
        IF ApplyMethod = ApplyMethod::OneLineOneEntry THEN
          GenJnlLine3.SETFILTER("Line No.",'<>%1',GenJnlLine."Line No.")
        ELSE
          GenJnlLine3.SETFILTER("Line No.",'<>%1',GenJnlLine2."Line No.");

        IF GenJnlLine3.FIND('-') THEN
          GenJnlLine3.FIELDERROR(
            "Applies-to Doc. No.",
            STRSUBSTNO(
              Text030,
              CustLedgEntry2."Document Type",CustLedgEntry2."Document No.",
              CustLedgEntry2."Customer No."));
      END;

      DocType := FORMAT(CustLedgEntry2."Document Type");
      DocNo := CustLedgEntry2."Document No.";
      DocDate := CustLedgEntry2."Posting Date";
      CurrencyCode2 := CustLedgEntry2."Currency Code";

      CustLedgEntry2.CALCFIELDS("Remaining Amount");

      LineAmount :=
        -(CustLedgEntry2."Remaining Amount" -
         CustLedgEntry2."Remaining Pmt. Disc. Possible" -
         CustLedgEntry2."Accepted Payment Tolerance");
      LineAmount2 :=
        ROUND(
          ExchangeAmt(CustLedgEntry2."Posting Date",
          GenJnlLine."Currency Code",
          CurrencyCode2,LineAmount),
          Currency."Amount Rounding Precision");

      IF ((CustLedgEntry2."Document Type" = CustLedgEntry2."Document Type"::Invoice) AND
        (GenJnlLine."Posting Date" <= CustLedgEntry2."Pmt. Discount Date") AND
        (LineAmount2 <= RemainingAmount2)) OR
        CustLedgEntry2."Accepted Pmt. Disc. Tolerance"
      THEN BEGIN
        LineDiscount := - CustLedgEntry2."Remaining Pmt. Disc. Possible";
        IF CustLedgEntry2."Accepted Payment Tolerance" <> 0 THEN
          LineDiscount := LineDiscount - CustLedgEntry2."Accepted Payment Tolerance";
      END ELSE BEGIN
        IF RemainingAmount2 >=
          ROUND(
            -(ExchangeAmt(CustLedgEntry2."Posting Date",
            GenJnlLine."Currency Code",
            CurrencyCode2,
            CustLedgEntry2."Remaining Amount")),
            Currency."Amount Rounding Precision")
        THEN
          LineAmount2 :=
            ROUND(
              -(ExchangeAmt(CustLedgEntry2."Posting Date",
              GenJnlLine."Currency Code",
              CurrencyCode2,
              CustLedgEntry2."Remaining Amount")),
              Currency."Amount Rounding Precision")
        ELSE BEGIN
          LineAmount2 := RemainingAmount2;
          LineAmount :=
            ROUND(
              ExchangeAmt(CustLedgEntry2."Posting Date",
              CurrencyCode2,GenJnlLine."Currency Code",
              LineAmount2),
              Currency."Amount Rounding Precision");
        END;
        LineDiscount := 0;
      END;
    END;

    LOCAL PROCEDURE VendUpdateAmounts@4(VAR VendLedgEntry2@1000 : Record 25;RemainingAmount2@1001 : Decimal);
    BEGIN
      IF (ApplyMethod = ApplyMethod::OneLineOneEntry) OR
        (ApplyMethod = ApplyMethod::MoreLinesOneEntry)
      THEN BEGIN
        GenJnlLine3.RESET;
        GenJnlLine3.SETCURRENTKEY(
          "Account Type","Account No.","Applies-to Doc. Type","Applies-to Doc. No.");
        GenJnlLine3.SETRANGE("Account Type",GenJnlLine3."Account Type"::Vendor);
        GenJnlLine3.SETRANGE("Account No.",VendLedgEntry2."Vendor No.");
        GenJnlLine3.SETRANGE("Applies-to Doc. Type",VendLedgEntry2."Document Type");
        GenJnlLine3.SETRANGE("Applies-to Doc. No.",VendLedgEntry2."Document No.");
        IF ApplyMethod = ApplyMethod::OneLineOneEntry THEN
          GenJnlLine3.SETFILTER("Line No.",'<>%1',GenJnlLine."Line No.")
        ELSE
          GenJnlLine3.SETFILTER("Line No.",'<>%1',GenJnlLine2."Line No.");
        IF GenJnlLine3.FIND('-') THEN
          GenJnlLine3.FIELDERROR(
            "Applies-to Doc. No.",
            STRSUBSTNO(
              Text031,
              VendLedgEntry2."Document Type",VendLedgEntry2."Document No.",
              VendLedgEntry2."Vendor No."));
      END;

      DocType := FORMAT(VendLedgEntry2."Document Type");
      DocNo := VendLedgEntry2."Document No.";
      DocDate := VendLedgEntry2."Posting Date";
      CurrencyCode2 := VendLedgEntry2."Currency Code";
      DocDesc := VendLedgEntry2.Description;
      DocDueDate := VendLedgEntry2."Due Date";
      VendLedgEntry2.CALCFIELDS("Remaining Amount");

      LineAmount :=
        -(VendLedgEntry2."Remaining Amount" -
        VendLedgEntry2."Remaining Pmt. Disc. Possible" -
        VendLedgEntry2."Accepted Payment Tolerance");

      LineAmount2 :=
        ROUND(
          ExchangeAmt(VendLedgEntry2."Posting Date",
          GenJnlLine."Currency Code",
          CurrencyCode2,
          LineAmount),
          Currency."Amount Rounding Precision");

      IF ((VendLedgEntry2."Document Type" = VendLedgEntry2."Document Type"::Invoice) AND
         (GenJnlLine."Posting Date" <= VendLedgEntry2."Pmt. Discount Date") AND
         (LineAmount2 <= RemainingAmount2)) OR
         VendLedgEntry2."Accepted Pmt. Disc. Tolerance"
      THEN BEGIN
        LineDiscount := -VendLedgEntry2."Remaining Pmt. Disc. Possible";
        IF VendLedgEntry2."Accepted Payment Tolerance" <> 0 THEN
          LineDiscount := LineDiscount - VendLedgEntry2."Accepted Payment Tolerance";
      END ELSE BEGIN
       IF RemainingAmount2 >=
         ROUND(
           -(ExchangeAmt(VendLedgEntry2."Posting Date",
           GenJnlLine."Currency Code",
           CurrencyCode2,
           VendLedgEntry2."Remaining Amount")),
           Currency."Amount Rounding Precision")
        THEN
          LineAmount2 :=
            ROUND(
              -(ExchangeAmt(VendLedgEntry2."Posting Date",
              GenJnlLine."Currency Code",
              CurrencyCode2,
              VendLedgEntry2."Remaining Amount")),
              Currency."Amount Rounding Precision")
        ELSE BEGIN
          LineAmount2 := RemainingAmount2;
          LineAmount :=
            ROUND(
              ExchangeAmt(VendLedgEntry2."Posting Date",
              CurrencyCode2,
              GenJnlLine."Currency Code",
              LineAmount2),
              Currency."Amount Rounding Precision");
        END;
        LineDiscount := 0;
      END;
    END;

    PROCEDURE InitTextVariable@5();
    BEGIN
      OnesText[1] := Text032;
      OnesText[2] := Text033;
      OnesText[3] := Text034;
      OnesText[4] := Text035;
      OnesText[5] := Text036;
      OnesText[6] := Text037;
      OnesText[7] := Text038;
      OnesText[8] := Text039;
      OnesText[9] := Text040;
      OnesText[10] := Text041;
      OnesText[11] := Text042;
      OnesText[12] := Text043;
      OnesText[13] := Text044;
      OnesText[14] := Text045;
      OnesText[15] := Text046;
      OnesText[16] := Text047;
      OnesText[17] := Text048;
      OnesText[18] := Text049;
      OnesText[19] := Text050;

      TensText[1] := '';
      TensText[2] := Text051;
      TensText[3] := Text052;
      TensText[4] := Text053;
      TensText[5] := Text054;
      TensText[6] := Text055;
      TensText[7] := Text056;
      TensText[8] := Text057;
      TensText[9] := Text058;

      ExponentText[1] := '';
      ExponentText[2] := Text059;
      ExponentText[3] := Text060;
      ExponentText[4] := Text061;
    END;

    PROCEDURE InitializeRequest@6(BankAcc@1000 : Code[20];LastCheckNo@1001 : Code[20];NewOneCheckPrVend@1002 : Boolean;NewReprintChecks@1003 : Boolean;NewTestPrint@1004 : Boolean;NewPreprintedStub@1005 : Boolean);
    BEGIN
      IF BankAcc <> '' THEN
        IF BankAcc2.GET(BankAcc) THEN BEGIN
          UseCheckNo := LastCheckNo;
          OneCheckPrVendor := NewOneCheckPrVend;
          ReprintChecks := NewReprintChecks;
          TestPrint := NewTestPrint;
          PreprintedStub := NewPreprintedStub;
        END;
    END;

    PROCEDURE ExchangeAmt@7(PostingDate@1000 : Date;CurrencyCode@1001 : Code[10];CurrencyCode2@1003 : Code[10];Amount@1002 : Decimal) Amount2 : Decimal;
    BEGIN
      IF (CurrencyCode <> '')  AND (CurrencyCode2 = '') THEN
         Amount2 :=
           CurrencyExchangeRate.ExchangeAmtLCYToFCY(
             PostingDate,
             CurrencyCode,
             Amount,
             CurrencyExchangeRate.ExchangeRate(PostingDate,CurrencyCode))
      ELSE IF (CurrencyCode = '') AND (CurrencyCode2 <> '') THEN
        Amount2 :=
          CurrencyExchangeRate.ExchangeAmtFCYToLCY(
            PostingDate,
            CurrencyCode2,
            Amount,
            CurrencyExchangeRate.ExchangeRate(PostingDate,CurrencyCode2))
      ELSE IF (CurrencyCode <> '') AND (CurrencyCode2 <> '') AND (CurrencyCode <> CurrencyCode2) THEN
        Amount2 :=
          CurrencyExchangeRate.ExchangeAmtFCYToFCY(
            PostingDate,
            CurrencyCode2,
            CurrencyCode,Amount)
      ELSE
        Amount2 := Amount;
    END;

    PROCEDURE FormatNoTextFR@1120000(VAR NoText@1000000000 : ARRAY [2] OF Text[80];No@1000000001 : Decimal;CurrencyCode@1120009 : Code[10]);
    VAR
      PrintExponent@1120003 : Boolean;
      Ones@1120004 : Integer;
      Tens@1120005 : Integer;
      Hundreds@1120006 : Integer;
      Exponent@1120007 : Integer;
      NoTextIndex@1120008 : Integer;
    BEGIN
      CLEAR(NoText);
      NoTextIndex := 1;
      IF No < 1 THEN
        AddToNoText(NoText,NoTextIndex,PrintExponent,Text026)
      ELSE BEGIN
        FOR Exponent := 4 DOWNTO 1 DO BEGIN
          PrintExponent := FALSE;
          Ones := No DIV POWER(1000,Exponent - 1);
          Hundreds := Ones DIV 100;
          Tens := (Ones MOD 100) DIV 10;
          Ones := Ones MOD 10;

          IF Hundreds = 1 THEN
            AddToNoText(NoText,NoTextIndex,PrintExponent,Text027)
          ELSE BEGIN
            IF Hundreds > 1 THEN BEGIN
              AddToNoText(NoText,NoTextIndex,PrintExponent,OnesText[Hundreds]);
              IF (Tens*10+Ones) = 0 THEN
                AddToNoText(NoText,NoTextIndex,PrintExponent,Text027+'S')
              ELSE
                AddToNoText(NoText,NoTextIndex,PrintExponent,Text027);
            END;
          END;

          FormatTens(NoText,NoTextIndex,PrintExponent,Exponent,Hundreds,Tens,Ones);

          IF PrintExponent AND (Exponent > 1) THEN
            IF ((Hundreds * 100 + Tens * 10 + Ones) > 1) AND (Exponent <> 2) THEN
              AddToNoText(NoText,NoTextIndex,PrintExponent,ExponentText[Exponent] + 'S')
            ELSE
              AddToNoText(NoText,NoTextIndex,PrintExponent,ExponentText[Exponent]);

          No := No - (Hundreds * 100 + Tens * 10 + Ones) * POWER(1000,Exponent - 1);
        END;
      END;

      IF CurrencyCode = '' THEN
        AddToNoText(NoText,NoTextIndex,PrintExponent,Text1120000)
      ELSE BEGIN
        Currency.GET(CurrencyCode);
        AddToNoText(NoText,NoTextIndex,PrintExponent,UPPERCASE(Currency.Description));
      END;

      No := No * 100;
      Ones := No MOD 10;
      Tens := No DIV 10;
      FormatTens(NoText,NoTextIndex,PrintExponent,Exponent,Hundreds,Tens,Ones);

      IF (CurrencyCode = '') OR (CurrencyCode = 'FRF') THEN
        CASE TRUE OF
          No = 1: AddToNoText(NoText,NoTextIndex,PrintExponent,Text1120001);
          No > 1: AddToNoText(NoText,NoTextIndex,PrintExponent,Text1120001+'S');
        END;
    END;

    PROCEDURE FormatTens@1120002(VAR NoText@1000000003 : ARRAY [2] OF Text[80];VAR NoTextIndex@1000000004 : Integer;VAR PrintExponent@1120002 : Boolean;Exponent@1120003 : Integer;Hundreds@1120004 : Integer;Tens@1120005 : Integer;Ones@1120006 : Integer);
    BEGIN
      CASE Tens OF
        9 : BEGIN
          AddToNoText(NoText,NoTextIndex,PrintExponent,Text057);
          AddToNoText(NoText,NoTextIndex,PrintExponent,OnesText[Ones+10]);
        END;

        8 : BEGIN
          IF Ones = 0 THEN
            AddToNoText(NoText,NoTextIndex,PrintExponent,Text057+'S')
          ELSE BEGIN
            AddToNoText(NoText,NoTextIndex,PrintExponent,Text057);
            AddToNoText(NoText,NoTextIndex,PrintExponent,OnesText[Ones]);
          END;
        END;

        7 : BEGIN
          AddToNoText(NoText,NoTextIndex,PrintExponent,Text055);
          IF Ones = 1 THEN
            AddToNoText(NoText,NoTextIndex,PrintExponent,Text028);

          AddToNoText(NoText,NoTextIndex,PrintExponent,OnesText[Ones+10]);
        END;

        2 : BEGIN
          AddToNoText(NoText,NoTextIndex,PrintExponent,Text051);
          IF Ones > 0 THEN BEGIN
            IF Ones = 1 THEN
              AddToNoText(NoText,NoTextIndex,PrintExponent,Text028);

            AddToNoText(NoText,NoTextIndex,PrintExponent,OnesText[Ones]);
          END;
        END;

        1 : BEGIN
          AddToNoText(NoText,NoTextIndex,PrintExponent,OnesText[Tens * 10 + Ones]);
        END;

        0 : BEGIN
          IF Ones > 0 THEN
            IF (Ones = 1) AND (Hundreds < 1) AND (Exponent = 2) THEN
              PrintExponent := TRUE
            ELSE
              AddToNoText(NoText,NoTextIndex,PrintExponent,OnesText[Ones]);
        END;

        ELSE BEGIN
          AddToNoText(NoText,NoTextIndex,PrintExponent,TensText[Tens]);
          IF Ones > 0 THEN BEGIN
            IF Ones = 1 THEN
              AddToNoText(NoText,NoTextIndex,PrintExponent,'ET');
            AddToNoText(NoText,NoTextIndex,PrintExponent,OnesText[Ones]);
          END;
        END;
      END;
    END;

    PROCEDURE FormatNoTextINTL@1120001(VAR NoText@1000 : ARRAY [2] OF Text[80];No@1001 : Decimal;CurrencyCode@1002 : Code[10]);
    VAR
      PrintExponent@1003 : Boolean;
      Ones@1004 : Integer;
      Tens@1005 : Integer;
      Hundreds@1000000000 : Integer;
      Exponent@1000000001 : Integer;
      NoTextIndex@1000000002 : Integer;
    BEGIN
      CLEAR(NoText);
      NoTextIndex := 1;

      IF No < 1 THEN
        AddToNoText(NoText,NoTextIndex,PrintExponent,Text026)
      ELSE BEGIN
        FOR Exponent := 4 DOWNTO 1 DO BEGIN
          PrintExponent := FALSE;
          Ones := No DIV POWER(1000,Exponent - 1);
          Hundreds := Ones DIV 100;
          Tens := (Ones MOD 100) DIV 10;
          Ones := Ones MOD 10;
          IF Hundreds > 0 THEN BEGIN
            AddToNoText(NoText,NoTextIndex,PrintExponent,OnesText[Hundreds]);
            AddToNoText(NoText,NoTextIndex,PrintExponent,Text027);
          END;
          IF Tens >= 2 THEN BEGIN
            AddToNoText(NoText,NoTextIndex,PrintExponent,TensText[Tens]);
            IF Ones > 0 THEN
              AddToNoText(NoText,NoTextIndex,PrintExponent,OnesText[Ones]);
          END ELSE
            IF (Tens * 10 + Ones) > 0 THEN
              AddToNoText(NoText,NoTextIndex,PrintExponent,OnesText[Tens * 10 + Ones]);

          IF PrintExponent AND (Exponent > 1) THEN
            AddToNoText(NoText,NoTextIndex,PrintExponent,ExponentText[Exponent]);

          No := No - (Hundreds * 100 + Tens * 10 + Ones) * POWER(1000,Exponent - 1);
        END;
      END;

      AddToNoText(NoText,NoTextIndex,PrintExponent,Text028);
      AddToNoText(NoText,NoTextIndex,PrintExponent,FORMAT(No * 100) + '/100');

      IF CurrencyCode <> '' THEN
        AddToNoText(NoText,NoTextIndex,PrintExponent,CurrencyCode);
    END;

    BEGIN
    {
      /** @r IMH01 @d 06/01/11 @a ISAT.MA @v IMH6.01.040 @s Isatech+ */
    }
    END.
  }
  RDLDATA
  {
  }
}