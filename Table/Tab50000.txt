OBJECT Table 50000 Provider
{
  OBJECT-PROPERTIES
  {
    Date=26/05/14;
    Time=14:26:11;
    Modified=Yes;
    Version List=IMH6.01.08,JUIN,JUILLET,MATMUT01,5005,IMH6.01.P011;
  }
  PROPERTIES
  {
    Permissions=TableData 13=rimd,
                TableData 23=rimd,
                TableData 91=rimd,
                TableData 5050=rimd,
                TableData 50001=rimd,
                TableData 50002=rimd,
                TableData 50003=rimd,
                TableData 50004=rimd,
                TableData 50005=rimd,
                TableData 50006=rimd,
                TableData 50007=rimd,
                TableData 50008=rimd,
                TableData 50009=rimd,
                TableData 50010=rimd,
                TableData 50011=rimd,
                TableData 50012=rimd,
                TableData 50013=rimd,
                TableData 50014=rimd,
                TableData 50015=rimd,
                TableData 50016=rimd,
                TableData 50023=rimd,
                TableData 50027=rimd,
                TableData 50028=rimd,
                TableData 50031=rimd,
                TableData 50032=rimd,
                TableData 50033=rimd,
                TableData 50034=rimd,
                TableData 50035=rimd,
                TableData 50036=rimd,
                TableData 50037=rimd,
                TableData 50038=rimd,
                TableData 50039=rimd,
                TableData 8016709=rimd,
                TableData 8016710=rimd,
                TableData 8016711=rimd,
                TableData 8016712=rimd;
    OnInsert=VAR
               lUserSetup@1100281000 : Record 91;
               lCompletnessMgt@1100281001 : Codeunit 50009;
             BEGIN
               GetProviderSetup;
               IF "No." = '' THEN BEGIN
                 ProviderSetup.TESTFIELD("Provider Nos.");
                 NoSeriesMgt.InitSeries(ProviderSetup."Provider Nos.",xRec."No. Series",0D,"No.","No. Series");
               END;

               //<<IMH06
               IF "Extranet Link" = '' THEN
                 "Extranet Link" := "No.";
               //>>IMH06

               // <<IMH08.ISAT.MA
               IF lUserSetup.GET(USERID) THEN
               BEGIN
                 CASE lUserSetup."User Type" OF
                   lUserSetup."User Type"::"Area Responsible" : BEGIN
                     IF "Regional Coordinator" = '' THEN
                       VALIDATE("Regional Coordinator",USERID);
                   END;
                   lUserSetup."User Type"::"Network Facilitator" : BEGIN
                     IF "Network Facilitator" = '' THEN
                       VALIDATE("Network Facilitator",USERID);
                   END;
                   lUserSetup."User Type"::"Network Assistant" : BEGIN
                     IF "Network Assistant" = '' THEN
                       VALIDATE("Network Assistant",USERID);
                   END;
                 END;
               END;
               // >>IMH08.ISAT.MA
               //<<IMH107 d‚sactiv‚
               {
               IF "Process Code" = '' THEN // IMH27.ISAT.MA
                 VALIDATE("Process Code", ProviderSetup."Provider Process Code");

               IF "Process Status No." = 0 THEN // IMH27.ISAT.MA
                 VALIDATE("Process Status No.", ProviderSetup."Provider Process Start Status");
               }
               //>>IMH107
               // <<IMH40.ISAT.MA
               IF ProviderSetup."Default Category Code" <> '' THEN
               BEGIN
                 Category := ProviderSetup."Default Category Code";
                 lCompletnessMgt.InitCompletnessTask(Rec,FALSE);
               END;
               // >>IMH40.ISAT.MA
               // <<IMH49.ISAT.VA
               RMSetup.GET;
               "Salutation Code" := RMSetup."Def. Provider Salutation Code";
               "Percentage Commission" := ProviderSetup."Percentage Commission";
               // >>IMH49.ISAT.VA
               // IMH55
               CheckPriority;
               CheckFollow; //IMH111.ST
               IF NOT InsertFromContact THEN BEGIN
                 ProviderContactUpdate.SetNameBreakdownDisable(ContactNameBreakdownDisable);
                 ProviderContactUpdate.OnInsert(Rec);
               END;

               ProviderMgt.CreateProvPriorityEntry(Rec);  //IMH54
               CreateVendor; //IMH61
               TouchRecord(TRUE);

               //<<IMH60.ISAT.VA
               Recref.GETTABLE(Rec);
               ChangLogMgt.LogInsertion(Recref);
               //>>IMH60.ISAT.VA
             END;

    OnModify=VAR
               lProcessProviderMgt@1100281000 : Codeunit 50044;
             BEGIN
               //<<IMH16
               IF GUIALLOWED THEN BEGIN
               // <<IMH03.ISAT.MA
                 IF NOT ProviderMgt.IsEditable("No.") THEN
                   //ERROR('');//IMH16
                   ERROR(Text006);//IMH16
               END;
               // >>IMH03.ISAT.MA
               CheckFollow; //IMH111.ST
               // IMH55
               CheckPriority;
               //>>IMH16

               //<<IMH91
               //D‚placer dans la fonction ChangeContactOnModify
               {
               IF (Name <> xRec.Name) OR
                  ("Search Name" <> xRec."Search Name") OR
                  ("Name 2" <> xRec."Name 2") OR
                  (Address <> xRec.Address) OR
                  ("Address 2" <> xRec."Address 2") OR
                  (City <> xRec.City) OR
                  ("Post Code" <> xRec."Post Code") OR
                  (County <> xRec.County) OR
                  ("Country/Region Code" <> xRec."Country/Region Code") OR
                  ("Phone No." <> xRec."Phone No.") OR
                  ("Mobile Phone No. 2" <> xRec."Mobile Phone No. 2") OR
                  ("Mobile Phone No." <> xRec."Mobile Phone No.") OR
                  //<<IMH63.isat.PC
                  //("IMH Territory Code" <> xRec."IMH Territory Code") OR
                  ("Admin. Territory Code" <> xRec."Admin. Territory Code") OR
                  //>>IMH63.isat.PC
                  ("Language Code" <> xRec."Language Code") OR
                  ("Fax No." <> xRec."Fax No.") OR
                  ("Business Phone No." <> xRec."Business Phone No.") OR
                  ("Constraint Phone No." <> xRec."Constraint Phone No.") OR
                  ("VAT Registration No." <> xRec."VAT Registration No.") OR
                  ("E-Mail" <> xRec."E-Mail") OR
                  ("E-Mail 2" <> xRec."E-Mail 2") OR
                  ("Home Page" <> xRec."Home Page") OR
                  ("Correspondence Type" <> xRec."Correspondence Type") OR
                  ("Admin. Contact Notify Customer" <> xRec."Admin. Contact Notify Customer") OR
                  ("Salutation Code" <> xRec."Salutation Code") OR
                  ("Area Code" <> xRec."Area Code") OR
                  ("Registration No." <> xRec."Registration No.") OR
                  ("VAT Registration No." <> xRec."VAT Registration No.") OR
                  //<<IMH45.ISAT.EBA
                  ("Synchronization IMA Service" <> xRec."Synchronization IMA Service")
                  //>>IMH45.ISAT.EBA
               THEN BEGIN
                 MODIFY;
                 ProviderContactUpdate.OnModify(Rec);
                 //<<IMH87
                 ProviderContactUpdate.OnModifyLinkedContact(Rec);
                 //>>IMH87
               END;
               }
               ChangeContactOnModify(xRec);
               //>>IMH91

               //<<IMH09 isat.zw
               GetProviderSetup;
               IF NOT SkipAutoStep THEN BEGIN  //IMH107
                 IF "Process Code" = '' THEN
                   VALIDATE("Process Code", ProviderSetup."Provider Process Code");
                 IF "Process Status No." = 0 THEN
                   VALIDATE("Process Status No.", ProviderSetup."Provider Process Start Status");
               END;
               //>>IMH09 isat.zw

               ProviderMgt.CreateProvPriorityEntry(Rec);  //IMH54

               TouchRecord(FALSE);

               IF NOT ProcessDisabled THEN // IMH27ISAT.MA
                 //<<IMH98
                 //AutoStep; //IMH11.ST
                 IF NOT SkipAutoStep THEN
                   AutoStep; //IMH11.ST
                 //>>IMH98


               //<<IMH60.ISAT.VA
               Recref.GETTABLE(Rec);
               ChangLogMgt.LogModificationWithoutXref(Recref);
               //>>IMH60.ISAT.VA
             END;

    OnDelete=VAR
               lLinkedProvider@1100281000 : Record 50001;
               lCompleteTask@1100281001 : Record 50004;
               lProviderSpeciality@1100281002 : Record 50006;
               lProviderChangeCalendar@1100281003 : Record 50007;
               lProviderQualification@1100281004 : Record 50008;
               lProvQualLedgerEntry@1100281019 : Record 50009;
               lCampaignProviderSetup@1100281014 : Record 50034;
               lAbilityCampGeoProvider@1100281005 : Record 50015;
               lAbilityGeoProviderSetup@1100281011 : Record 50033;
               lAbilityGeoProvider@1100281006 : Record 50016;
               lSpecializationAgreement@1100281007 : Record 50023;
               lProviderAgreement@1100281022 : Record 50012;
               lCompletnessTask@1100281008 : Record 50004;
               lProviderStatusLedgerEntry@1100281009 : Record 50010;
               lProSpecializationLedEntry@1100281012 : Record 50024;
               lProviderBusinessHours@1100281013 : Record 50028;
               lContactProvider@1100281015 : Record 50038;
               lQualityControlHeader@1100281016 : Record 50090;
               lProviderScoringLedgerEntry@1100281017 : Record 50088;
               lNetworkFacilitatorVisit@1100281018 : Record 50105;
               lProcMgt@1100281010 : Codeunit 50040;
               lInterventionLine@1100281020 : Record 50075;
               lProviderPriorityEntry@1100281021 : Record 50014;
               lProvServOrderTypeLimit@1000000000 : Record 50181;
             BEGIN
               // <<IMH03.ISAT.MA
               IF NOT ProviderMgt.IsEditable("No.") THEN
                 ERROR('');
               // >>IMH03.ISAT.MA

               //<<IMH42 isat.zw
               lInterventionLine.SETCURRENTKEY("Provider No.","Mission Status","Intervention Status",Suspended,Closed);
               lInterventionLine.SETRANGE("Provider No.", "No.");
               IF NOT lInterventionLine.ISEMPTY THEN
                 ERROR(Text022, "No.");
               //<<IMH42 isat.zw

               // liens prestataires
               lLinkedProvider.SETRANGE("Provider No.","No.");
               IF NOT lLinkedProvider.ISEMPTY THEN BEGIN
                 lLinkedProvider.DELETEALL;
               END;

               // Compl‚tude
               lCompleteTask.SETRANGE("Provider No.","No.");
               IF NOT lCompleteTask.ISEMPTY THEN BEGIN
                 lCompleteTask.DELETEALL;
               END;

               // Sp‚cialit‚
               lProviderSpeciality.SETRANGE("Provider No.","No.");
               IF NOT lProviderSpeciality.ISEMPTY THEN BEGIN
                 lProviderSpeciality.DELETEALL;
               END;

               // Ecriture sp‚cialit‚ prestataire
               lProSpecializationLedEntry.SETRANGE("Provider No.","No.");
               IF NOT lProSpecializationLedEntry.ISEMPTY THEN BEGIN
                 lProSpecializationLedEntry.DELETEALL(TRUE);
               END;

               // Calendrier
               lProviderChangeCalendar.SETRANGE("Provider No.","No.");
               IF NOT lProviderChangeCalendar.ISEMPTY THEN BEGIN
                 lProviderChangeCalendar.DELETEALL;
               END;

               // Qualification
               lProviderQualification.SETRANGE("Provider No.","No.");
               IF NOT lProviderQualification.ISEMPTY THEN BEGIN
                 lProviderQualification.DELETEALL(TRUE);
               END;

               // Ecriture Qualification
               lProvQualLedgerEntry.SETRANGE("Provider No.","No.");
               IF NOT lProvQualLedgerEntry.ISEMPTY THEN BEGIN
                 lProvQualLedgerEntry.DELETEALL(TRUE);
               END;

               // Horaire
               lProviderBusinessHours.SETRANGE("Provider No.","No.");
               IF NOT lProviderBusinessHours.ISEMPTY THEN BEGIN
                 lProviderBusinessHours.DELETEALL(TRUE);
               END;
               {
               // Comp‚tence geographique campagne
               lAbilityCampGeoProvider.SETCURRENTKEY("Provider No.");
               lAbilityCampGeoProvider.SETRANGE("Provider No.","No.");
               IF NOT lAbilityCampGeoProvider.ISEMPTY THEN BEGIN
                 lAbilityCampGeoProvider.DELETEALL(TRUE);
               END;

               // Param‚trage comp‚tence geographique campagne
               lCampaignProviderSetup.SETRANGE("Provider No.","No.");
               IF NOT lCampaignProviderSetup.ISEMPTY THEN BEGIN
                 lCampaignProviderSetup.DELETEALL(TRUE);
               END;
               }
               // Comp‚tence geographique
               lAbilityGeoProvider.SETCURRENTKEY("Provider No.");
               lAbilityGeoProvider.SETRANGE("Provider No.","No.");
               IF NOT lAbilityGeoProvider.ISEMPTY THEN BEGIN
                 lAbilityGeoProvider.DELETEALL(TRUE);
               END;

               // Param‚trage comp‚tence geographique
               lAbilityGeoProviderSetup.SETCURRENTKEY("Provider No.","Start Reference Code","Specialization Code");
               lAbilityGeoProviderSetup.SETRANGE("Provider No.","No.");
               IF NOT lAbilityGeoProviderSetup.ISEMPTY THEN BEGIN
                 lAbilityGeoProviderSetup.DELETEALL(TRUE);
               END;

               // Agr‚ement
               lSpecializationAgreement.SETRANGE("Provider No.","No.");
               IF NOT lSpecializationAgreement.ISEMPTY THEN BEGIN
                 lSpecializationAgreement.DELETEALL(TRUE);
               END;
               lProviderAgreement.SETRANGE("Provider No.","No.");
               IF NOT lProviderAgreement.ISEMPTY THEN BEGIN
                 lProviderAgreement.DELETEALL(TRUE);
               END;

               // Contact prestataire
               lContactProvider.SETCURRENTKEY("Provider No.","Specialization Code","Contact No.");
               lContactProvider.SETRANGE("Provider No.","No.");
               IF NOT lContactProvider.ISEMPTY THEN BEGIN
                 lContactProvider.DELETEALL(TRUE);
               END;

               // Modification statut prestataire
               lProviderStatusLedgerEntry.SETRANGE("Provider No.","No.");
               IF NOT lProviderStatusLedgerEntry.ISEMPTY THEN BEGIN
                 lProviderStatusLedgerEntry.DELETEALL(TRUE);
               END;

               // Controle qualit‚
               lQualityControlHeader.SETCURRENTKEY("Provider No.");
               lQualityControlHeader.SETRANGE("Provider No.","No.");
               IF NOT lQualityControlHeader.ISEMPTY THEN BEGIN
                 lQualityControlHeader.DELETEALL(TRUE);
               END;

               // Ecriture scoring
               lProviderScoringLedgerEntry.SETCURRENTKEY("Provider No.","Entry No.");
               lProviderScoringLedgerEntry.SETRANGE("Provider No.","No.");
               IF NOT lProviderScoringLedgerEntry.ISEMPTY THEN BEGIN
                 lProviderScoringLedgerEntry.DELETEALL(TRUE);
               END;

               // Visite animation r‚seau
               lNetworkFacilitatorVisit.SETCURRENTKEY("Provider No.");
               lNetworkFacilitatorVisit.SETRANGE("Provider No.","No.");
               IF NOT lNetworkFacilitatorVisit.ISEMPTY THEN BEGIN
                 lNetworkFacilitatorVisit.DELETEALL(TRUE);
               END;

               //<< IMH02.isat.cc
               // Tƒches de compl‚tude
               lCompletnessTask.SETRANGE("Provider No.","No.");
               IF NOT lCompletnessTask.ISEMPTY THEN BEGIN
                 lCompletnessTask.DELETEALL;
               END;
               //>> IMH02.isat.cc

               //<<IMH54
               lProviderPriorityEntry.SETRANGE("Provider No.","No.");
               IF NOT lProviderPriorityEntry.ISEMPTY THEN BEGIN
                 lProviderPriorityEntry.DELETEALL(TRUE);
               END;
               //<<IMH54

               //<<IMH89
               //Param‚trage limite type intervention par type produit
               lProvServOrderTypeLimit.SETRANGE("Provider No.", "No.");
               IF NOT lProvServOrderTypeLimit.ISEMPTY THEN
                 lProvServOrderTypeLimit.DELETEALL(TRUE);
               //>>IMH89

               ProviderContactUpdate.OnDelete(Rec);

               lProcMgt.DeleteSourceRec(DATABASE::Provider, "No.", '', 0, 0); //IMH.ST

               //<<IMH60.ISAT.VA
               Recref.GETTABLE(Rec);
               ChangLogMgt.LogDeletion(Recref);
               //>>IMH60.ISAT.VA
             END;

    OnRename=BEGIN
               ERROR(Text036);

               TouchRecord(FALSE);

               //<<IMH60.ISAT.VA
               Recref.GETTABLE(Rec);
               xRecref.GETTABLE(xRec);
               ChangLogMgt.LogRename(Recref,xRecref);
               //>>IMH60.ISAT.VA
             END;

    CaptionML=[ENU=Provider;
               FRA=Prestataire];
    LookupFormID=Form50001;
    DrillDownFormID=Form50001;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;AltSearchField=Search Name;
                                                   OnValidate=BEGIN
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  GetProviderSetup;
                                                                  NoSeriesMgt.TestManual(ProviderSetup."Provider Nos.");
                                                                  "No. Series" := '';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=No.;
                                                              FRA=Nø] }
    { 2   ;   ;Name                ;Text50        ;OnValidate=VAR
                                                                ContBusRel@1001 : Record 5054;
                                                                Cust@1000 : Record 18;
                                                                Vend@1002 : Record 23;
                                                              BEGIN
                                                                IF ("Search Name" = UPPERCASE(xRec.Name)) OR ("Search Name" = '') THEN BEGIN
                                                                  "Search Name" := Name;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Name;
                                                              FRA=Raison sociale] }
    { 3   ;   ;Search Name         ;Code50        ;CaptionML=[ENU=Search Name;
                                                              FRA=Nom de recherche] }
    { 4   ;   ;Name 2              ;Text50        ;CaptionML=[ENU=Business Name;
                                                              FRA=D‚nomination commerciale] }
    { 5   ;   ;Address             ;Text50        ;OnValidate=BEGIN
                                                                PostCode.ValidateCity2(
                                                                  City,
                                                                  "Post Code",
                                                                  "Area Code",
                                                                  //<<IMH63.isat.PC
                                                                  "Admin. Territory Code",
                                                                  "IMH Territory Code",
                                                                  //>>IMH63.isat.PC
                                                                  "Regional Coordinator",
                                                                  "Network Facilitator",
                                                                  "Network Assistant",
                                                                  "Country/Region Code");                      //IMH18 Ajout Code pays
                                                                "Geo. Reference Code" := PostCode.GetReferenceGeoCode("Post Code",City);
                                                                // <<IMH40.ISAT.MA
                                                                VALIDATE("Country/Region Code");
                                                                VALIDATE("Regional Coordinator");
                                                                VALIDATE("Network Facilitator");
                                                                VALIDATE("Network Assistant");
                                                                // >>IMH40.ISAT.MA
                                                              END;

                                                   CaptionML=[ENU=Address;
                                                              FRA=Adresse] }
    { 6   ;   ;Address 2           ;Text50        ;CaptionML=[ENU=Address 2;
                                                              FRA=Adresse (2Šme ligne)] }
    { 7   ;   ;City                ;Text30        ;OnValidate=BEGIN
                                                                PostCode.ValidateCity2(
                                                                  City,
                                                                  "Post Code",
                                                                  "Area Code",
                                                                  //<<IMH63.isat.PC
                                                                  "Admin. Territory Code",
                                                                  "IMH Territory Code",
                                                                  //>>IMH63.isat.PC
                                                                  "Regional Coordinator",
                                                                  "Network Facilitator",
                                                                  "Network Assistant",
                                                                  "Country/Region Code");                      //IMH18 Ajout Code pays
                                                                "Geo. Reference Code" := PostCode.GetReferenceGeoCode("Post Code",City);
                                                                // <<IMH40.ISAT.MA
                                                                VALIDATE("Country/Region Code");
                                                                VALIDATE("Regional Coordinator");
                                                                VALIDATE("Network Facilitator");
                                                                VALIDATE("Network Assistant");
                                                                // >>IMH40.ISAT.MA
                                                              END;

                                                   OnLookup=BEGIN
                                                              PostCode.LookUpCity2(
                                                                City,
                                                                "Post Code",
                                                                "Area Code",
                                                                //<<IMH63.isat.PC
                                                                //"IMH Territory Code",
                                                                "Admin. Territory Code",
                                                                "IMH Territory Code",
                                                                //>>IMH63.isat.PC
                                                                "Regional Coordinator",
                                                                "Network Facilitator",
                                                                "Network Assistant",
                                                                "Country/Region Code", //IMH18 Ajout Code pays
                                                                TRUE);
                                                              "Geo. Reference Code" := PostCode.GetReferenceGeoCode("Post Code",City);
                                                              // <<IMH40.ISAT.MA
                                                              VALIDATE("Regional Coordinator");
                                                              VALIDATE("Network Facilitator");
                                                              VALIDATE("Network Assistant");
                                                              // >>IMH40.ISAT.MA
                                                            END;

                                                   CaptionML=[ENU=City;
                                                              FRA=Ville] }
    { 9   ;   ;Phone No.           ;Text30        ;OnValidate=BEGIN
                                                                PhoneStandardization.ValidatePhoneNo(
                                                                  DATABASE::Provider,FIELDNO("Phone No.") ,"Country/Region Code","Phone No.");
                                                              END;

                                                   ExtendedDatatype=Phone No.;
                                                   CaptionML=[ENU=Phone No.;
                                                              FRA=Nø t‚l‚phone] }
    { 10  ;   ;Mobile Phone No. 2  ;Text30        ;OnValidate=BEGIN
                                                                PhoneStandardization.ValidatePhoneNo(
                                                                  DATABASE::Provider,FIELDNO("Mobile Phone No. 2"),"Country/Region Code","Mobile Phone No. 2");
                                                              END;

                                                   ExtendedDatatype=Phone No.;
                                                   CaptionML=[ENU=Mobile Phone No. 2;
                                                              FRA=Nø t‚l‚phone mobile 2] }
    { 15  ;   ;IMH Territory Code  ;Code10        ;TableRelation=Territory WHERE (Type=CONST(IMH));
                                                   CaptionML=[ENU=IMH Territory Code;
                                                              FRA=Zone IMH];
                                                   Editable=No }
    { 24  ;   ;Language Code       ;Code10        ;TableRelation=Language;
                                                   CaptionML=[ENU=Language Code;
                                                              FRA=Code langue] }
    { 35  ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   OnValidate=VAR
                                                                lCountryRegion@1100281000 : Record 9;
                                                              BEGIN
                                                                //<<IMH20
                                                                IF "Country/Region Code" <> '' THEN
                                                                  IF lCountryRegion.GET("Country/Region Code") THEN
                                                                    IF "Language Code" = '' THEN
                                                                      VALIDATE("Language Code", lCountryRegion."Language Code");
                                                                //>>IMH20
                                                              END;

                                                   CaptionML=[ENU=Country/Region Code;
                                                              FRA=Code pays];
                                                   Editable=No }
    { 38  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Adv. Comment Line" WHERE (Source Table ID=CONST(50000),
                                                                                                Source No.=FIELD(No.)));
                                                   CaptionML=[ENU=Comment;
                                                              FRA=Commentaires];
                                                   Editable=No }
    { 84  ;   ;Fax No.             ;Text30        ;OnValidate=BEGIN
                                                                PhoneStandardization.ValidatePhoneNo(
                                                                  DATABASE::Provider,FIELDNO("Fax No."),"Country/Region Code","Fax No.");
                                                              END;

                                                   CaptionML=[ENU=Fax No.;
                                                              FRA=Nø fax] }
    { 85  ;   ;Business Phone No.  ;Text30        ;OnValidate=BEGIN
                                                                PhoneStandardization.ValidatePhoneNo(
                                                                  DATABASE::Provider,FIELDNO("Business Phone No."),"Country/Region Code","Business Phone No.");
                                                              END;

                                                   ExtendedDatatype=Phone No.;
                                                   CaptionML=[ENU=Business Phone No.;
                                                              FRA=Nø t‚l‚phone affaire] }
    { 86  ;   ;VAT Registration No.;Text20        ;TableRelation=Code.Code WHERE (Table ID=CONST(50000),
                                                                                  Field ID=CONST(86));
                                                   OnValidate=VAR
                                                                lVATRegNoFormat@1000 : Record 381;
                                                                lCode@1100281000 : Record 50079;
                                                              BEGIN
                                                                lVATRegNoFormat.Test("VAT Registration No.","Country/Region Code","No.",DATABASE::Provider);
                                                                IF MAXSTRLEN(lCode.Code) >= STRLEN("VAT Registration No.") THEN
                                                                  IF lCode.GET(50000,86,"VAT Registration No.") THEN
                                                                    "VAT Registration No." := lCode.Description;
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=VAT Registration No.;
                                                              FRA=Nø TVA intracomm.] }
    { 89  ;   ;Picture             ;BLOB          ;CaptionML=[ENU=Picture;
                                                              FRA=Image];
                                                   SubType=Bitmap }
    { 91  ;   ;Post Code           ;Code20        ;TableRelation="Post Code";
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode2(
                                                                  City,
                                                                  "Post Code",
                                                                  "Area Code",
                                                                  //<<IMH63.isat.PC
                                                                  //"IMH Territory Code",
                                                                  "Admin. Territory Code",
                                                                  "IMH Territory Code",
                                                                  //>>IMH63.isat.PC
                                                                  "Regional Coordinator",
                                                                  "Network Facilitator",
                                                                  "Network Assistant",
                                                                  "Country/Region Code"); //IMH18 Ajout Code pays
                                                                "Geo. Reference Code" := PostCode.GetReferenceGeoCode("Post Code",City);
                                                                // <<IMH40.ISAT.MA
                                                                VALIDATE("Country/Region Code");
                                                                VALIDATE("Regional Coordinator");
                                                                VALIDATE("Network Facilitator");
                                                                VALIDATE("Network Assistant");
                                                                // >>IMH40.ISAT.MA
                                                              END;

                                                   OnLookup=BEGIN
                                                              PostCode.LookUpPostCode2(
                                                                City,
                                                                "Post Code",
                                                                "Area Code",
                                                                //<<IMH63.isat.PC
                                                                //"IMH Territory Code",
                                                                "Admin. Territory Code",
                                                                "IMH Territory Code",
                                                                //>>IMH63.isat.PC
                                                                "Regional Coordinator",
                                                                "Network Facilitator",
                                                                "Network Assistant",
                                                                "Country/Region Code", //IMH18 Ajout Code pays
                                                                TRUE);
                                                              "Geo. Reference Code" := PostCode.GetReferenceGeoCode("Post Code",City);
                                                              // <<IMH40.ISAT.MA
                                                              VALIDATE("Country/Region Code");
                                                              VALIDATE("Regional Coordinator");
                                                              VALIDATE("Network Facilitator");
                                                              VALIDATE("Network Assistant");
                                                              // >>IMH40.ISAT.MA
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Post Code;
                                                              FRA=Code postal] }
    { 92  ;   ;County              ;Text30        ;CaptionML=[ENU=County;
                                                              FRA=R‚gion] }
    { 102 ;   ;E-Mail              ;Text80        ;OnValidate=VAR
                                                                lEmailStandardization@1100281000 : Codeunit 50096;
                                                              BEGIN
                                                                "E-Mail" := LOWERCASE("E-Mail");
                                                                IF ("Search E-Mail" = UPPERCASE(xRec."E-Mail")) OR ("Search E-Mail" = '') THEN BEGIN
                                                                  "Search E-Mail" := "E-Mail";
                                                                END;
                                                                lEmailStandardization.ValidateEmail("E-Mail"); //IMH19
                                                              END;

                                                   ExtendedDatatype=E-Mail;
                                                   CaptionML=[ENU=E-Mail;
                                                              FRA=E-mail] }
    { 103 ;   ;Home Page           ;Text80        ;ExtendedDatatype=URL;
                                                   CaptionML=[ENU=Home Page;
                                                              FRA=Site internet] }
    { 107 ;   ;No. Series          ;Code10        ;TableRelation="No. Series".Code;
                                                   CaptionML=[ENU=No. Series;
                                                              FRA=Souches de nø] }
    { 401 ;   ;Targeted Control    ;Boolean       ;OnValidate=BEGIN
                                                                IF "Targeted Control" THEN
                                                                  "Targeted Control Start Date" := WORKDATE
                                                                ELSE
                                                                  "Targeted Control Start Date" := 0D;
                                                              END;

                                                   CaptionML=[ENU=Targeted Control;
                                                              FRA=Contr“les cibl‚s] }
    { 402 ;   ;Targeted Control Start Date;Date   ;OnValidate=BEGIN
                                                                IF "Targeted Control" THEN
                                                                  TESTFIELD("Targeted Control Start Date");
                                                              END;

                                                   CaptionML=[ENU=Targeted Control Start Date;
                                                              FRA=Date d‚but contr“le cibl‚] }
    { 403 ;   ;Targeted Controls Min.;Integer     ;CaptionML=[ENU=Targeted Controls Min.;
                                                              FRA=Nombre de contr“les cibl‚s minimum];
                                                   MinValue=0 }
    { 404 ;   ;Max Number of Controls;Integer     ;CaptionML=[ENU=Max Number of Control;
                                                              FRA=Nombre max contr“le] }
    { 405 ;No ;Control Count in Period;Integer    ;CaptionML=[ENU=Control Count in Period;
                                                              FRA=Nombre de contr“le sur la p‚riode] }
    { 406 ;   ;Create Controls Manually;Boolean   ;CaptionML=[ENU=Create Controls Manually;
                                                              FRA=Cr‚ation contr“les manuels] }
    { 2500;   ;Service Convention Date;DateTime   ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Provider."Creation Date" WHERE (No.=FIELD(No.)));
                                                   CaptionML=[ENU=Code;
                                                              FRA=Date convention];
                                                   Description=Field for WordManagment;
                                                   Editable=No }
    { 5061;   ;Mobile Phone No.    ;Text30        ;OnValidate=BEGIN
                                                                PhoneStandardization.ValidatePhoneNo(
                                                                  DATABASE::Contact,FIELDNO("Mobile Phone No."),"Country/Region Code","Mobile Phone No.");
                                                              END;

                                                   ExtendedDatatype=Phone No.;
                                                   CaptionML=[ENU=Mobile Phone No.;
                                                              FRA=Nø t‚l‚phone mobile] }
    { 5062;   ;Pager               ;Text30        ;CaptionML=[ENU=Pager;
                                                              FRA=Pager] }
    { 5100;   ;Correspondence Type ;Option        ;CaptionML=[ENU=Correspondence Type;
                                                              FRA=Moyen de communication privil‚gi‚];
                                                   OptionCaptionML=[ENU=" ,Mail,E-Mail,Fax";
                                                                    FRA=" ,Courrier,E-Mail,Fax"];
                                                   OptionString=[ ,Mail,E-Mail,Fax] }
    { 5101;   ;Salutation Code     ;Code10        ;TableRelation=Salutation.Code;
                                                   CaptionML=[ENU=Salutation Code;
                                                              FRA=Civilit‚] }
    { 5102;   ;Search E-Mail       ;Code80        ;CaptionML=[ENU=Search E-Mail;
                                                              FRA=E-mail de recherche] }
    { 5105;   ;E-Mail 2            ;Text80        ;OnValidate=VAR
                                                                lEmailStandardization@1100281000 : Codeunit 50096;
                                                              BEGIN
                                                                lEmailStandardization.ValidateEmail("E-Mail"); //IMH19
                                                              END;

                                                   ExtendedDatatype=E-Mail;
                                                   CaptionML=[ENU=E-Mail 2;
                                                              FRA=E-mail 2] }
    { 50001;  ;Status Change Date 1;Date          ;CaptionML=[ENU=Prospect Date;
                                                              FRA=Date passage prospect] }
    { 50002;  ;Status Change Date 2;Date          ;CaptionML=[ENU=Occasionnale Date;
                                                              FRA=Date passage occasionnel] }
    { 50003;  ;Status Change Date 3;Date          ;CaptionML=[ENU=Integration Date;
                                                              FRA=Date passage int‚gration] }
    { 50004;  ;Status Change Date 4;Date          ;CaptionML=[ENU=Trial Date;
                                                              FRA=Date passage p‚riode d'essai] }
    { 50005;  ;Status Change Date 5;Date          ;CaptionML=[ENU=Label Date;
                                                              FRA=Date passage lab‚llis‚] }
    { 50006;  ;Status Change Date 6;Date          ;CaptionML=[ENU=Operational Date;
                                                              FRA=Date passage op‚rationnel] }
    { 50500;  ;Creation Date       ;DateTime      ;CaptionML=[ENU=Creation Date;
                                                              FRA=Date de cr‚ation];
                                                   Editable=No }
    { 50501;  ;Creation User ID    ;Text30        ;CaptionML=[ENU=Creation User ID;
                                                              FRA=Utilisateur cr‚ation];
                                                   Editable=No }
    { 50502;  ;Last Modification Date;DateTime    ;CaptionML=[ENU=Last Modification Date;
                                                              FRA=Date derniŠre modification];
                                                   Editable=No }
    { 50503;  ;Last Modification User ID;Text30   ;CaptionML=[ENU=Last Modification User ID;
                                                              FRA=Utilisateur derniŠre modification];
                                                   Editable=No }
    { 50505;  ;Provider to confirmed;Boolean      ;OnValidate=BEGIN
                                                                //<<IMH50
                                                                IF "Provider to confirmed" THEN
                                                                  SendTask("No.");
                                                                //>>IMH50
                                                              END;

                                                   CaptionML=[ENU=Provider to confirmed;
                                                              FRA=Prestataire … confirmer] }
    { 50520;  ;Process Code        ;Code10        ;TableRelation=Process.Code WHERE (Source Table No.=CONST(50000));
                                                   CaptionML=[ENU=Process Code;
                                                              FRA=Code processus];
                                                   Editable=No }
    { 50521;  ;Process Status No.  ;Integer       ;TableRelation="Process Status"."Status No." WHERE (Process Code=FIELD(Process Code));
                                                   OnValidate=VAR
                                                                lProcessProviderMgt@1100281000 : Codeunit 50044;
                                                              BEGIN
                                                                lProcessProviderMgt.OnChangeProcessStatus(Rec); //IMH11.ST
                                                              END;

                                                   CaptionML=[ENU=Process Status No.;
                                                              FRA=Nø statut processus];
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 50522;  ;Process Status Description;Text30  ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Process Status".Description WHERE (Process Code=FIELD(Process Code),
                                                                                                          Status No.=FIELD(Process Status No.)));
                                                   OnLookup=VAR
                                                              lProcessStatusHistory@1100281000 : Record 50047;
                                                            BEGIN
                                                              lProcessStatusHistory.ListHistory(FALSE, DATABASE::Provider,"No.", '', 0,0); //IMH11.ST
                                                            END;

                                                   CaptionML=[ENU=Status Description;
                                                              FRA=Statut processus];
                                                   Editable=No }
    { 50523;  ;User Next Step Available;Boolean   ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Process Step" WHERE (Process Code=FIELD(Process Code),
                                                                                           Previous Status=FIELD(Process Status No.),
                                                                                           Active=CONST(Yes),
                                                                                           Manual User Step=CONST(Yes)));
                                                   CaptionML=[ENU=User Next Step Available;
                                                              FRA=Etape suivante disponible];
                                                   Editable=No }
    { 54000;  ;Status              ;Option        ;OnValidate=BEGIN
                                                                IF xRec.Status <> Status THEN BEGIN
                                                                  IF Status > Status::Integration THEN BEGIN
                                                                    VALIDATE("Invisible Open Space",FALSE);
                                                                  END ELSE BEGIN
                                                                    VALIDATE("Invisible Open Space",TRUE);
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Status;
                                                              FRA=Statut];
                                                   OptionCaptionML=[ENU=Prospect,Casual,Integration,Trial Period,Approval,Operational;
                                                                    FRA=Prospect,Occasionnel,Int‚gration,P‚riode essai,Labellis‚,Op‚rationnel];
                                                   OptionString=Prospect,Casual,Integration,Trial Period,Approval,Operational }
    { 54001;  ;Invisible Open Space;Boolean       ;InitValue=Yes;
                                                   CaptionML=[ENU=Invisible Open Space;
                                                              FRA=Invisible plateau] }
    { 54004;No;Integration Status  ;Option        ;CaptionML=[ENU=Integration Status;
                                                              FRA=Statut int‚gration];
                                                   OptionCaptionML=[ENU=" ,Mail Sent,Integration Whised,Integration Authorised,Appointment Taken,Visit Done,,Waiting For Return";
                                                                    FRA=" ,Courrier envoy‚,Int‚gration souihait‚e,Rendez-vous fix‚,Rendez-vous effectu‚,En attente retour prestataire"];
                                                   OptionString=[ ,Mail Sent,Integration Whised,Integration Authorised,Appointment Taken,Appointment Done,Waiting For Return] }
    { 54005;  ;Enable              ;Boolean       ;InitValue=No;
                                                   OnValidate=BEGIN
                                                                //IMH77
                                                                IF Enable THEN
                                                                  CheckFieldMandatory;
                                                              END;

                                                   CaptionML=[ENU=Enable;
                                                              FRA=Actif] }
    { 54010;  ;Attachment          ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Document Attachment" WHERE (Referent Table No.=CONST(50000),
                                                                                                  Key Integer 1=CONST(0),
                                                                                                  Key Integer 2=CONST(0),
                                                                                                  Key Code 1=FIELD(No.),
                                                                                                  Provider No.=FIELD(No.)));
                                                   CaptionML=[ENU=Attachment;
                                                              FRA=Document joint];
                                                   Editable=No }
    { 54015;  ;Area Code           ;Code10        ;TableRelation=Area;
                                                   CaptionML=[ENU=Area Code;
                                                              FRA=Code d‚partement];
                                                   Editable=No }
    { 54019;  ;Network Facilitator ;Code20        ;TableRelation="User Setup"."User ID" WHERE (User Type=FILTER(Network Facilitator|Area Responsible));
                                                   OnValidate=BEGIN
                                                                "Salesp. Net. Facilitator Code" := GetSalespersonCode("Network Facilitator");
                                                              END;

                                                   CaptionML=[ENU=Network Facilitator;
                                                              FRA=Charg‚ de pilotage r‚seau] }
    { 54020;  ;Regional Coordinator;Code20        ;TableRelation="User Setup"."User ID" WHERE (User Type=FILTER(Area Responsible));
                                                   OnValidate=BEGIN
                                                                "Salesp. Reg. Coordinator Code" := GetSalespersonCode("Regional Coordinator");
                                                              END;

                                                   CaptionML=[ENU=Area Responsible;
                                                              FRA=Responsable de zone] }
    { 54021;  ;Network Assistant   ;Code20        ;TableRelation="User Setup"."User ID" WHERE (User Type=CONST(Network Assistant));
                                                   OnValidate=BEGIN
                                                                "Salesp. Network Assistant Code" := GetSalespersonCode("Network Assistant");
                                                              END;

                                                   CaptionML=[ENU=Network Assistant;
                                                              FRA=Assistante r‚seau] }
    { 54022;  ;Admin. Contact No.  ;Code20        ;TableRelation=Contact.No. WHERE (Company No.=FIELD(No.),
                                                                                    Type=CONST(Person),
                                                                                    Service Contact=CONST(Provider));
                                                   OnValidate=VAR
                                                                lContact@1100281000 : Record 5050;
                                                              BEGIN
                                                                //<<IMH06
                                                                IF lContact.GET("Admin. Contact No.") THEN BEGIN
                                                                  "Correspondence Type" := lContact."Correspondence Type";
                                                                  CASE "Correspondence Type" OF
                                                                    "Correspondence Type"::"E-Mail" : BEGIN
                                                                      IF ("E-Mail" = '') THEN
                                                                        "E-Mail" := lContact."E-Mail";
                                                                    END;
                                                                    "Correspondence Type"::Fax : BEGIN
                                                                      IF ("Fax No." = '') THEN
                                                                        "Fax No." := lContact."Fax No.";
                                                                    END;
                                                                  END;
                                                                END;
                                                                //>>IMH06
                                                              END;

                                                   CaptionML=[ENU=Admin. Manager No.;
                                                              FRA=Nø contact admin.] }
    { 54023;  ;Admin. Contact Name ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact.Name WHERE (Company No.=FIELD(No.),
                                                                                          No.=FIELD(Admin. Contact No.),
                                                                                          Service Contact=CONST(Provider)));
                                                   CaptionML=[ENU=Admin. Contact Name;
                                                              FRA=Nom contact administratif];
                                                   Editable=No }
    { 54024;  ;Admin. Contact Phone No.;Text30    ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact."Phone No." WHERE (Company No.=FIELD(No.),
                                                                                                 No.=FIELD(Admin. Contact No.),
                                                                                                 Service Contact=CONST(Provider)));
                                                   CaptionML=[ENU=Admin. Contact Phone No.;
                                                              FRA=Nø t‚l‚phone administratif];
                                                   Editable=No }
    { 54025;  ;Admin. Contact Mb. Phone No.;Text30;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact."Mobile Phone No." WHERE (Company No.=FIELD(No.),
                                                                                                        No.=FIELD(Admin. Contact No.),
                                                                                                        Service Contact=CONST(Provider)));
                                                   CaptionML=[ENU=Admin. Contact Mobile Phone No.;
                                                              FRA=Nø t‚l‚phone mobile administratif];
                                                   Editable=No }
    { 54026;  ;Admin. Contact Mb. Phone No. 2;Text30;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact."Mobile Phone No. 2" WHERE (Company No.=FIELD(No.),
                                                                                                          No.=FIELD(Admin. Contact No.),
                                                                                                          Service Contact=CONST(Provider)));
                                                   CaptionML=[ENU=Admin. Contact Mobile Phone No. 2;
                                                              FRA=Nø t‚l‚phone mobile 2 administratif];
                                                   Editable=No }
    { 54027;  ;Admin. Contact Fax No.;Text30      ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact."Fax No." WHERE (Company No.=FIELD(No.),
                                                                                               No.=FIELD(Admin. Contact No.),
                                                                                               Service Contact=CONST(Provider)));
                                                   CaptionML=[ENU=Admin. Contact Fax No.;
                                                              FRA=Nø fax administratif];
                                                   Editable=No }
    { 54028;  ;Admin. Contact E-mail;Text80       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact.E-Mail WHERE (Company No.=FIELD(No.),
                                                                                            No.=FIELD(Admin. Contact No.),
                                                                                            Service Contact=CONST(Provider)));
                                                   OnValidate=VAR
                                                                lEmailStandardization@1100281000 : Codeunit 50096;
                                                              BEGIN
                                                                lEmailStandardization.ValidateEmail("E-Mail"); //IMH19
                                                              END;

                                                   CaptionML=[ENU=Admin. Contact E-mail;
                                                              FRA=E-mail administratif];
                                                   Editable=No }
    { 54029;  ;Admin. Contact Corr. Type;Option   ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact."Correspondence Type" WHERE (Company No.=FIELD(No.),
                                                                                                           No.=FIELD(Admin. Contact No.),
                                                                                                           Service Contact=CONST(Provider)));
                                                   CaptionML=[ENU=Admin. Contact Corr. Type;
                                                              FRA=Moyen com. priv. administratif];
                                                   OptionCaptionML=[ENU=" ,Hard Copy,E-Mail,Fax";
                                                                    FRA=" ,Impression,E-Mail,Fax"];
                                                   OptionString=" ,Hard Copy,E-Mail,Fax";
                                                   Editable=No }
    { 54030;  ;Admin. Contact Notify Customer;Option;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact."Notify Customer" WHERE (Company No.=FIELD(No.),
                                                                                                       No.=FIELD(Admin. Contact No.)));
                                                   CaptionML=[ENU=Admin. Contact Ideal Channel;
                                                              FRA=Canal privil‚gi‚ contact admin.];
                                                   OptionCaptionML=[ENU=No,By Phone,By Mobile Phone 1,By Mobile Phone 2,By Fax,By Business Phone,By E-maill;
                                                                    FRA=Non,Par t‚l‚phone,Par t‚l‚phone mobile,Par t‚l‚phone mobile 2,Par fax,,Par e-mail,Par courrier];
                                                   OptionString=No,By Phone,By Mobile Phone,By Mobile Phone 2,By Fax,,By E-mail,By Mail;
                                                   Editable=No }
    { 54031;  ;Admin. Contact Corresp. Type;Option;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact."Correspondence Type" WHERE (Company No.=FIELD(No.),
                                                                                                           No.=FIELD(Admin. Contact No.),
                                                                                                           Service Contact=CONST(Provider)));
                                                   CaptionML=[ENU=Admin. Contact Corresp. Type;
                                                              FRA=Moyen communication privil‚gi‚ admin.];
                                                   OptionCaptionML=[ENU=" ,Hard Copy,E-Mail,Fax";
                                                                    FRA=" ,Courrier,E-Mail,Fax"];
                                                   OptionString=[ ,Hard Copy,E-Mail,Fax];
                                                   Editable=No }
    { 54032;  ;Admin. Salutation Code;Code10      ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact."Salutation Code" WHERE (Company No.=FIELD(No.),
                                                                                                       No.=FIELD(Admin. Contact No.),
                                                                                                       Service Contact=CONST(Provider)));
                                                   CaptionML=[ENU=Admin. Salutation Code;
                                                              FRA=Civilit‚ administratif];
                                                   Editable=No }
    { 54040;  ;Send to Mission Without Call;Boolean;
                                                   CaptionML=[ENU=Send to Mission Without Call;
                                                              FRA=Missionnable sans appel] }
    { 54041;  ;Send Mis. Without Call Contact;Boolean;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact."Send to Mission Without Call" WHERE (Company No.=FIELD(No.),
                                                                                                                    Preferred Contact DGS=CONST(Yes)));
                                                   CaptionML=[ENU=Send to Mission Without Call Contact;
                                                              FRA=Missionnable sans appel contact] }
    { 54042;  ;Current Interv. Limit Max.;Integer ;OnValidate=VAR
                                                                lProviderSpecialization@1100281001 : Record 50006;
                                                                lUserSetup@1100281004 : Record 91;
                                                                lProviderManagement@1100281000 : Codeunit 50018;
                                                                lSum@1100281002 : Integer;
                                                              BEGIN
                                                                //<<IMH50

                                                                GetProviderSetup;
                                                                IF ProviderSetup."Simplified Category Code" <> '' THEN
                                                                  IF ProviderSetup."Max Inter. Simplified Category" <> 0 THEN
                                                                    IF ProviderSetup."Simplified Category Code" = Category THEN
                                                                      IF "Current Interv. Limit Max." > ProviderSetup."Max Inter. Simplified Category" THEN
                                                                        ERROR(Text039,ProviderSetup."Max Inter. Simplified Category");

                                                                IF CheckUserPermission(Rec,FALSE) THEN BEGIN
                                                                  IF ("Current Interv. Limit Max." > xRec."Current Interv. Limit Max.") THEN BEGIN
                                                                    UpdateProviderToConfirmed;
                                                                    //<<IMH69.PC
                                                                    // Si modification du CA alors la fiche devient inactive
                                                                    //<<IMH97
                                                                    //IF UPPERCASE(USERID) <> UPPERCASE(ProviderSetup."Manager User Code") THEN BEGIN

                                                                    //<<IMH104.ISAT.EBA
                                                                    //IF (UPPERCASE(USERID) <> UPPERCASE(ProviderSetup."Manager User Code"))
                                                                    IF (UPPERCASE(USERID) <> UPPERCASE("Regional Coordinator"))
                                                                    //>>IMH104.ISAT.EBA
                                                                       AND ("Current Interv. Limit Max." > "Theorical Interv. Limit Max.") THEN BEGIN
                                                                    //>>IMH97
                                                                      Enable := FALSE;
                                                                      // envoie une tƒche corbeille au DIR DPR
                                                                      IF ProviderSetup."Task Code Intervention Limit" <> '' THEN BEGIN
                                                                        //<<IMH104.ISAT.EBA
                                                                        //IF lUserSetup.GET(ProviderSetup."Manager User Code") THEN BEGIN
                                                                        IF lUserSetup.GET("Regional Coordinator") THEN BEGIN
                                                                        //>>IMH104.ISAT.EBA
                                                                          IF lUserSetup."Coordinator Tray Line" <> '' THEN BEGIN
                                                                            MESSAGE(Text043);
                                                                            CreateTrayLineOnModify(
                                                                              "No.",
                                                                              FORMAT(xRec."Current Interv. Limit Max."),
                                                                              FORMAT("Current Interv. Limit Max."),
                                                                              STRSUBSTNO(Text042,"No."),
                                                                              lUserSetup."Coordinator Tray Line",
                                                                              ProviderSetup."Task Code Intervention Limit");
                                                                          END;
                                                                          "Current Interv. Limit Max." := xRec."Current Interv. Limit Max.";
                                                                        END;
                                                                      END;
                                                                    END;
                                                                    //>>IMH69.PC
                                                                    "Turnover Amount Max." := ROUND(Turnover * ProviderSetup."% Turnover IMH" / 100,0.01);
                                                                    "Theorical Interv. Limit Max." := lProviderManagement.CalcIntervMaximum(Rec); //IMH65.ST
                                                                  END ELSE BEGIN
                                                                    //<<IMH68.isat.NFO
                                                                    // la limite doit ˆtre sup‚rieur ou ‚gal … la somme des limites des sp‚cialit‚
                                                                    lSum := 0;
                                                                    lProviderSpecialization.SETRANGE("Provider No.","No.");
                                                                    IF lProviderSpecialization.FINDSET THEN BEGIN
                                                                      REPEAT
                                                                        lSum += lProviderSpecialization."Current Interv. Limit";
                                                                      UNTIL lProviderSpecialization.NEXT = 0;
                                                                    END;
                                                                    IF lSum > "Current Interv. Limit Max." THEN BEGIN
                                                                      ERROR(Text040);
                                                                    END;
                                                                    //>>IMH68.isat.NFO
                                                                    //<<IMH.isat.PC
                                                                    IF NOT SkipConfirmExclusion THEN BEGIN
                                                                      MESSAGE(Text037,xRec."Current Interv. Limit Max.","Current Interv. Limit Max.");
                                                                    END;
                                                                    //>>IMH.isat.PC
                                                                  END;
                                                                END ELSE BEGIN
                                                                  MESSAGE(Text045);
                                                                  "Current Interv. Limit Max." := xRec."Current Interv. Limit Max."
                                                                END;
                                                                //>>IMH50
                                                              END;

                                                   CaptionML=[ENU=Interv. Limit Max.;
                                                              FRA=Limite max. d'interventions en cours] }
    { 54043;  ;Current Service Interv. Nb;Integer ;FieldClass=FlowField;
                                                   CalcFormula=Count("Service Intervention Line" WHERE (Provider No.=FIELD(No.),
                                                                                                        Mission Status=FILTER(<>Canceled),
                                                                                                        Intervention Status=FILTER(<>Closed&<>Cancel),
                                                                                                        Closed=CONST(No)));
                                                   CaptionML=[ENU=Current Service Interv. Nb;
                                                              FRA=Nombre d'interventions en cours];
                                                   Editable=No }
    { 54044;  ;Theorical Interv. Limit Max.;Integer;
                                                   CaptionML=[ENU=Theorical Interv. Limit Max.;
                                                              FRA=Limite max. d'interventions th‚orique];
                                                   Editable=No }
    { 54070;  ;Default Team Code   ;Code10        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Territory."Default Tray Line" WHERE (Code=FIELD(IMH Territory Code)));
                                                   CaptionML=[ENU=Default Team Code;
                                                              FRA=Corbeille par d‚faut];
                                                   Editable=No }
    { 54080;  ;Extranet            ;Boolean       ;OnValidate=BEGIN
                                                                //<<IMH51
                                                                IF Extranet THEN
                                                                  "Extranet Create Date" := WORKDATE
                                                                ELSE
                                                                  "Extranet Create Date" := 0D;
                                                                //>>IMH51
                                                              END;

                                                   CaptionML=[ENU=Extranet;
                                                              FRA=Extranet] }
    { 54081;  ;Extranet Link       ;Code10        ;TableRelation=Provider;
                                                   CaptionML=[ENU=Extranet Link;
                                                              FRA=Lien extranet] }
    { 54082;  ;Extranet Login      ;Text80        ;CaptionML=[ENU=Extranet Link;
                                                              FRA=Nom utilisateur] }
    { 54083;  ;Extranet Password   ;Text30        ;CaptionML=[ENU=Extranet Link;
                                                              FRA=Mot de passe extranet] }
    { 54084;  ;Extranet Create Date;Date          ;OnValidate=BEGIN
                                                                IF "Extranet Create Date" <> 0D THEN
                                                                  TESTFIELD(Extranet);
                                                              END;

                                                   CaptionML=[ENU=Extranet Create Date;
                                                              FRA=Date cr‚ation compte extranet] }
    { 54085;  ;Extranet Link Name  ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Provider.Name WHERE (No.=FIELD(Extranet Link)));
                                                   CaptionML=[ENU=Extranet Link;
                                                              FRA=Nom Lien extranet];
                                                   Editable=No }
    { 54120;  ;Recruitment Origin  ;Code10        ;TableRelation=Code.Code WHERE (Table ID=CONST(50000),
                                                                                  Field ID=CONST(54120));
                                                   CaptionML=[ENU=Recruitment Origin;
                                                              FRA=Origine recrutement] }
    { 54121;  ;Recruitment Date    ;Date          ;OnValidate=BEGIN
                                                                IF ("Facilitator Visit Last Date" = 0D) THEN
                                                                  "Facilitator Visit Last Date" := "Recruitment Date";
                                                              END;

                                                   CaptionML=[ENU=Recruitment Date;
                                                              FRA=Date de recrutement] }
    { 54125;  ;Establishment Type  ;Code10        ;TableRelation=Code.Code WHERE (Table ID=CONST(50000),
                                                                                  Field ID=CONST(54125));
                                                   CaptionML=[ENU=Establishment Type;
                                                              FRA=Type d'‚tablissement] }
    { 54127;  ;Doc. Reminder Terms ;Code10        ;TableRelation="Reminder Terms".Code WHERE (Reminder Type=CONST(Document));
                                                   OnLookup=VAR
                                                              lReminderTerms@1100281000 : Record 292;
                                                              lDocReminderTerms@1100281001 : Form 50029;
                                                            BEGIN
                                                              lDocReminderTerms.LOOKUPMODE(TRUE);
                                                              IF lDocReminderTerms.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                                                lDocReminderTerms.GETRECORD(lReminderTerms);
                                                                "Doc. Reminder Terms" := lReminderTerms.Code;
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Doc. Reminder Terms;
                                                              FRA=Conditions de relance documents];
                                                   Description=IMH02 }
    { 54128;  ;Category            ;Code10        ;TableRelation=Code.Code WHERE (Table ID=CONST(50000),
                                                                                  Field ID=CONST(54128));
                                                   OnValidate=VAR
                                                                lCompletnessMgt@1100281000 : Codeunit 50009;
                                                                ProviderSetup@1100281001 : Record 50011;
                                                                lText002@1100281002 : TextConst 'ENU=The value should not higher than the value setted(%1).;FRA=La valeur du champ ne doit pas ˆtre sup‚rieure … la valeur param‚tr‚e(%1) dans les param‚tres prestataires.';
                                                              BEGIN
                                                                //<< IHM002.isat.cc
                                                                //IMH93
                                                                //D‚sactiv‚
                                                                {
                                                                IF (CurrFieldNo = FIELDNO(Category)) AND
                                                                   (Category <> xRec.Category)
                                                                THEN BEGIN
                                                                }
                                                                //  lCompletnessMgt.InitCompletnessTask(Rec,FALSE);
                                                                  ProviderSetup.GET;
                                                                  IF ProviderSetup."Simplified Category Code" <> '' THEN
                                                                    IF ProviderSetup."Max Inter. Simplified Category" <> 0 THEN
                                                                      IF ProviderSetup."Simplified Category Code" = Category THEN
                                                                        IF "Current Interv. Limit Max." > ProviderSetup."Max Inter. Simplified Category" THEN
                                                                          ERROR(Text039,ProviderSetup."Max Inter. Simplified Category");
                                                                  lCompletnessMgt.UpdateCompletnessTaskWithCat(Rec,FALSE);
                                                                //END; //IMH93
                                                                //>> IHM002.isat.cc
                                                              END;

                                                   CaptionML=[ENU=Category;
                                                              FRA=Cat‚gorie] }
    { 54129;  ;Company Creation Date;Date         ;CaptionML=[ENU=Company Creation Date;
                                                              FRA=Date cr‚ation societ‚] }
    { 54130;  ;NAF Code            ;Code10        ;TableRelation=Code.Code WHERE (Table ID=CONST(50000),
                                                                                  Field ID=CONST(54130));
                                                   OnValidate=VAR
                                                                lCode@1100281000 : Record 50079;
                                                              BEGIN
                                                                //<<IMH50
                                                                IF CheckUserPermission(Rec,FALSE) THEN
                                                                BEGIN
                                                                  UpdateProviderToConfirmed;
                                                                  //<<IMH06
                                                                  lCode.SETRANGE("Table ID",DATABASE::Provider);
                                                                  lCode.SETRANGE("Field ID",54130);
                                                                  IF NOT lCode.ISEMPTY THEN BEGIN
                                                                    lCode.FINDFIRST;
                                                                    "NAF Activity" := lCode.Description;
                                                                  END;
                                                                  //>>IMH06
                                                                END ELSE BEGIN
                                                                  "NAF Code" := xRec."NAF Code"
                                                                END;
                                                                //>>IMH50
                                                              END;

                                                   CaptionML=[ENU=NAF Code;
                                                              FRA=Code NAF] }
    { 54131;  ;NAF Activity        ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Code.Description WHERE (Table ID=CONST(50000),
                                                                                              Field ID=CONST(54130),
                                                                                              Code=FIELD(NAF Code)));
                                                   CaptionML=[ENU=NAF Activity;
                                                              FRA=Activit‚ NAF];
                                                   Editable=No }
    { 54132;  ;SIREN No.           ;Code9         ;OnValidate=VAR
                                                                lProviderMgt@1100281000 : Codeunit 50018;
                                                              BEGIN
                                                                lProviderMgt.ValidateSIRENNo("SIREN No.", '', TRUE);   //IMH21
                                                              END;

                                                   CaptionML=[ENU=SIREN No.;
                                                              FRA=Nø SIREN] }
    { 54135;  ;Registration No.    ;Code20        ;OnValidate=VAR
                                                                lProviderMgt@1100281000 : Codeunit 50018;
                                                              BEGIN
                                                                lProviderMgt.ValidateSIRETNo("Registration No.", TRUE);  //IMH21
                                                                //<<IMH44.zw
                                                                IF "Registration No." <> '' THEN
                                                                  VALIDATE("SIREN No.", COPYSTR("Registration No.", 1, 9));
                                                                //>>IMH44.zw
                                                              END;

                                                   CaptionML=[ENU=Registration No.;
                                                              FRA=Nø SIRET] }
    { 54136;  ;Main Spec. Description;Text50      ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Specialization.Description WHERE (Code=FIELD(Main Specialization Code)));
                                                   CaptionML=[ENU=Main Spec. Description;
                                                              FRA=Sp‚cialit‚ principale];
                                                   Editable=No }
    { 54137;  ;Main Building Trade No.;Code20     ;TableRelation="Building Trade".No.;
                                                   OnValidate=VAR
                                                                lProviderSpecialization@1100281000 : Record 50006;
                                                                lSpecializationBuildingTrade@1100281002 : Record 50031;
                                                                lSpecializationBuildingTrade2@1100281001 : Record 50031;
                                                              BEGIN
                                                                IF (CurrFieldNo = FIELDNO("Main Building Trade No.")) AND
                                                                   ("Main Building Trade No." <> xRec."Main Building Trade No.")
                                                                THEN BEGIN
                                                                  IF xRec."Main Building Trade No." <> '' THEN  // IMH40.ISAT.MA
                                                                    IF NOT CONFIRM(STRSUBSTNO(Text005,FIELDCAPTION("Main Building Trade No."))) THEN BEGIN
                                                                      "Main Building Trade No." := xRec."Main Building Trade No.";
                                                                      EXIT;
                                                                    END;
                                                                  "Main Specialization Check" := FALSE;
                                                                  //<<IMH17
                                                                  //TESTFIELD("Main Specialization Code",'');
                                                                  //VALIDATE("Main Specialization Code",'');
                                                                  "Main Specialization Code" := '';
                                                                  //>>IMH17
                                                                  // S‚lection de la sp‚cialit‚ principale
                                                                  lSpecializationBuildingTrade.RESET;
                                                                  lSpecializationBuildingTrade.SETRANGE("Building Trade No.","Main Building Trade No.");
                                                                  IF lSpecializationBuildingTrade.FINDFIRST THEN BEGIN
                                                                    lSpecializationBuildingTrade2.COPY(lSpecializationBuildingTrade);
                                                                    IF lSpecializationBuildingTrade2.NEXT = 1 THEN BEGIN
                                                                      IF FORM.RUNMODAL(0,lSpecializationBuildingTrade) <> ACTION::LookupOK THEN BEGIN
                                                                        EXIT;
                                                                      END;
                                                                    END;
                                                                    VALIDATE("Main Specialization Code",lSpecializationBuildingTrade."Specialization Code");
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Main Building Trade No.;
                                                              FRA=Nø corps de m‚tier principal] }
    { 54138;  ;Main Specialization Code;Code10    ;TableRelation=IF (Main Building Trade No.=FILTER(<>'')) "Specialization Building Trade"."Specialization Code" WHERE (Building Trade No.=FIELD(Main Building Trade No.))
                                                                 ELSE Specialization.Code;
                                                   OnValidate=VAR
                                                                lProviderSpecialization@1100281000 : Record 50006;
                                                                lSpecializationBuildingTrade@1100281005 : Record 50031;
                                                                lSpecializationBuildingTrade2@1100281006 : Record 50031;
                                                                lSpecialization@1100281002 : Record 50005;
                                                                lMainBuildingTradeNo@1100281001 : Code[20];
                                                              BEGIN
                                                                TESTFIELD("Main Specialization Code");
                                                                IF ("Main Specialization Code" <> xRec."Main Specialization Code") AND
                                                                   ("Main Specialization Code" <> '')
                                                                THEN BEGIN
                                                                  //<<IMH06
                                                                  IF (CurrFieldNo = FIELDNO("Main Specialization Code")) THEN BEGIN
                                                                    IF xRec."Main Specialization Code" <> '' THEN  // IMH48.ISAT.MA
                                                                      IF NOT CONFIRM(STRSUBSTNO(Text005,FIELDCAPTION("Main Specialization Code"))) THEN BEGIN
                                                                        "Main Specialization Code" := xRec."Main Specialization Code";
                                                                        EXIT;
                                                                      END;
                                                                  END;
                                                                  //>>IMH06

                                                                  // Descente du corps d'‚tat
                                                                  IF NOT lSpecialization.GetBuildingTrade("Main Specialization Code","Main Building Trade No.") THEN BEGIN
                                                                    "Main Specialization Code" := xRec."Main Specialization Code";
                                                                     EXIT;
                                                                  END;
                                                                  IF "Main Building Trade No." = '' THEN BEGIN
                                                                    VALIDATE("Main Building Trade No.");
                                                                  END;

                                                                  lProviderSpecialization.SETCURRENTKEY("Provider No.","Main Specialization");
                                                                  lProviderSpecialization.SETRANGE("Provider No.","No.");
                                                                  lProviderSpecialization.SETRANGE("Main Specialization",TRUE);
                                                                  IF NOT lProviderSpecialization.ISEMPTY THEN BEGIN
                                                                    lProviderSpecialization.MODIFYALL("Main Specialization",FALSE);
                                                                  END;

                                                                  IF NOT lProviderSpecialization.GET("No.","Main Specialization Code") THEN BEGIN
                                                                    lProviderSpecialization.INIT;
                                                                    lProviderSpecialization.VALIDATE("Provider No.","No.");
                                                                    lProviderSpecialization.VALIDATE("Building Trade No.","Main Building Trade No.");
                                                                    lProviderSpecialization.VALIDATE("Specialization Code","Main Specialization Code");
                                                                    lProviderSpecialization.VALIDATE("Main Specialization",TRUE);
                                                                    lProviderSpecialization.INSERT(TRUE);
                                                                  END ELSE BEGIN
                                                                    lProviderSpecialization.VALIDATE("Main Specialization",TRUE);
                                                                    lProviderSpecialization.MODIFY(TRUE);
                                                                  END;
                                                                  "Main Specialization Check" := FALSE;

                                                                  UpdateMainAbilityGeo("No.",xRec."Main Specialization Code","Main Specialization Code");
                                                                  UpdateMainCampaignAbilityGeo("No.",xRec."Main Specialization Code","Main Specialization Code");
                                                                END ELSE IF ("Main Specialization Code" = '') THEN
                                                                BEGIN
                                                                  lProviderSpecialization.SETCURRENTKEY("Provider No.","Main Specialization");
                                                                  lProviderSpecialization.SETRANGE("Provider No.","No.");
                                                                  lProviderSpecialization.SETRANGE("Main Specialization",TRUE);
                                                                  IF NOT lProviderSpecialization.ISEMPTY THEN BEGIN
                                                                    lProviderSpecialization.MODIFYALL("Main Specialization",FALSE);
                                                                  END;
                                                                  UpdateMainAbilityGeo("No.",xRec."Main Specialization Code",'');
                                                                  UpdateMainCampaignAbilityGeo("No.",xRec."Main Specialization Code",'');
                                                                END;
                                                                //<<IMH44.ZW
                                                                IF "Main Specialization Code" = '' THEN
                                                                  VALIDATE("Main Building Trade No.", '');
                                                                //>>IMH44.ZW
                                                              END;

                                                   CaptionML=[ENU=Main Specialization Code;
                                                              FRA=Code sp‚cialit‚ principale] }
    { 54139;  ;Main Specialization Check;Boolean  ;OnValidate=VAR
                                                                lProviderManagement@1100281000 : Codeunit 50018;
                                                              BEGIN
                                                                //<<IMH50
                                                                IF CheckUserPermission(Rec,FALSE) THEN
                                                                BEGIN
                                                                  UpdateProviderToConfirmed;
                                                                  TESTFIELD("Main Specialization Code");
                                                                  IF "Main Specialization Check" THEN BEGIN
                                                                //<<IMH65.ST
                                                                    "Theorical Interv. Limit Max." := lProviderManagement.CalcIntervMaximum(Rec);
                                                                //    "Current Interv. Limit Max." := lProviderManagement.CalcIntervMaximum(Rec);
                                                                //>>IMH65.ST
                                                                  END;
                                                                END ELSE BEGIN
                                                                  "Main Specialization Check" := xRec."Main Specialization Check"
                                                                END;
                                                                //>>IMH50
                                                              END;

                                                   CaptionML=[ENU=Main Specialization Check;
                                                              FRA=V‚rification activit‚ principale] }
    { 54140;  ;Turnover            ;Decimal       ;OnValidate=VAR
                                                                lProviderManagement@1100281000 : Codeunit 50018;
                                                              BEGIN
                                                                //<<IMH50
                                                                IF CheckUserPermission(Rec,FALSE) THEN BEGIN
                                                                  IF (Turnover > xRec.Turnover) THEN
                                                                    UpdateProviderToConfirmed
                                                                  ELSE BEGIN
                                                                    //<<IMH.isat.PC
                                                                    IF NOT SkipConfirmExclusion THEN BEGIN
                                                                      MESSAGE(Text034);
                                                                    END;
                                                                    //>>IMH.isat.PC
                                                                  END;
                                                                  IF Turnover <> xRec.Turnover THEN BEGIN
                                                                //    IF CONFIRM(STRSUBSTNO(Text003,"Current Interv. Limit Max.","Theorical Interv. Limit Max."),TRUE) THEN BEGIN
                                                                //      "Current Interv. Limit Max." := "Theorical Interv. Limit Max.";
                                                                      VALIDATE("Turnover Check",FALSE);
                                                                      EVALUATE("Turnover Year",FORMAT(WORKDATE,0,'<Year4>'));
                                                                      GetProviderSetup;
                                                                      "Turnover Amount Max." := ROUND(Turnover * ProviderSetup."% Turnover IMH" / 100,0.01);
                                                                    "Theorical Interv. Limit Max." := lProviderManagement.CalcIntervMaximum(Rec); //IMH65.ST
                                                                //    END;
                                                                  END;
                                                                  IF Turnover = 0 THEN
                                                                    "Turnover Year" := 0;
                                                                END ELSE BEGIN
                                                                  Turnover := xRec.Turnover
                                                                END;
                                                                //>>IMH50
                                                              END;

                                                   CaptionML=[ENU=Turnover;
                                                              FRA=Chiffre d'affaires];
                                                   BlankZero=Yes }
    { 54141;  ;Turnover Year       ;Integer       ;CaptionML=[ENU=Turnover Year;
                                                              FRA=Ann‚e chiffre d'affaires] }
    { 54142;  ;Turnover Check      ;Boolean       ;OnValidate=BEGIN
                                                                //<<IMH53
                                                                IF ("Turnover Check") AND (Turnover = 0) THEN
                                                                  ERROR(Text032);
                                                                //>>IMH53

                                                                //<<IMH50
                                                                IF CheckUserPermission(Rec,FALSE) THEN
                                                                BEGIN
                                                                  UpdateProviderToConfirmed;
                                                                  IF "Turnover Check" THEN BEGIN
                                                                    "Turnover Check Date" := WORKDATE;
                                                                  END ELSE BEGIN
                                                                    "Turnover Check Date" := 0D;
                                                                  END;
                                                                END ELSE BEGIN
                                                                  "Turnover Check" := xRec."Turnover Check"
                                                                END;
                                                                //>>IMH50
                                                              END;

                                                   CaptionML=[ENU=Turnover Check Date;
                                                              FRA=V‚rification chiffre d'affaires] }
    { 54143;  ;Turnover Check Date ;Date          ;CaptionML=[ENU=Turnover Check Date;
                                                              FRA=Date V‚rification chiffre d'affaires] }
    { 54145;  ;Manpower            ;Integer       ;OnValidate=BEGIN
                                                                CheckMainpower;  //IMH46

                                                                // <<IMH41.ISAT.MA
                                                                IF Manpower = 0 THEN
                                                                  VALIDATE("Manpower Check",FALSE);
                                                                // <<IMH42.ISAT.MA
                                                              END;

                                                   CaptionML=[ENU=Manpower;
                                                              FRA=Effectif global];
                                                   BlankZero=Yes }
    { 54146;  ;Manpower Check      ;Boolean       ;OnValidate=BEGIN
                                                                //<<IMH25 isat.nfo
                                                                IF "Manpower Check" THEN BEGIN
                                                                  "Manpower Check Date" := WORKDATE;
                                                                END ELSE BEGIN
                                                                  "Manpower Check Date" := 0D;
                                                                END;
                                                                //>>IMH25 isat.nfo
                                                              END;

                                                   CaptionML=[ENU=Manpower Check;
                                                              FRA=Effectif valid‚] }
    { 54147;  ;Manpower Check Date ;Date          ;CaptionML=[ENU=Manpower Check Date;
                                                              FRA=Date validation effectif] }
    { 54148;  ;Manpower Admin.     ;Integer       ;CaptionML=[ENU=Admin. Manpower;
                                                              FRA=Effectif admin.];
                                                   BlankZero=Yes }
    { 54149;  ;Income              ;Decimal       ;CaptionML=[ENU=Income;
                                                              FRA=R‚sultat] }
    { 54150;  ;Income Date         ;Date          ;CaptionML=[ENU=Income Date;
                                                              FRA=Date r‚sultat] }
    { 54151;  ;Turnover Amount Max.;Decimal       ;CaptionML=[ENU=Turnover Amount Max.;
                                                              FRA=Montant CA maxi IMH];
                                                   BlankZero=Yes }
    { 54152;  ;Specialization Exists;Boolean      ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Provider Specialization" WHERE (Provider No.=FIELD(No.),
                                                                                                      Specialization Code=FIELD(Speciality Filter),
                                                                                                      Emergency=FIELD(Emergency Filter)));
                                                   CaptionML=[ENU=Specialization Exists;
                                                              FRA=Specialit‚ existe];
                                                   Editable=No }
    { 54153;  ;Emergency Filter    ;Boolean       ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Emergency Filter;
                                                              FRA=Filtre urgence] }
    { 54154;  ;Speciality Filter   ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation=Specialization.Code;
                                                   CaptionML=[ENU=Speciality Filter;
                                                              FRA=Filtre specialit‚] }
    { 54160;  ;Emergency Specialization;Integer   ;FieldClass=FlowField;
                                                   CalcFormula=Count("Provider Specialization" WHERE (Provider No.=FIELD(No.),
                                                                                                      Emergency=CONST(Yes),
                                                                                                      Specialization Code=FIELD(Speciality Filter)));
                                                   CaptionML=[ENU=Emergency Specialization;
                                                              FRA=Specialit‚s urgentes];
                                                   Editable=No }
    { 54161;  ;Main Building Trade Desc.;Text50   ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Building Trade".Description WHERE (No.=FIELD(Main Building Trade No.)));
                                                   CaptionML=[ENU=Main Building Trade Desc.;
                                                              FRA=Corps de m‚tier principal];
                                                   Editable=No }
    { 54170;  ;General Company     ;Boolean       ;CaptionML=[ENU=General Company;
                                                              FRA=Entreprise g‚n‚rale] }
    { 54171;  ;Renovation Company  ;Boolean       ;CaptionML=[ENU=Renovation Company;
                                                              FRA=Entreprise de r‚novation] }
    { 54190;  ;MACIF Agreement     ;Code10        ;CaptionML=[ENU=MACIF Agreement;
                                                              FRA=Agr‚ment MACIF] }
    { 54191;  ;MATMUT Agreement    ;Code10        ;CaptionML=[ENU=MATMUT Agreement;
                                                              FRA=Agr‚ment MATMUT] }
    { 54195;  ;Provider Agreement  ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Provider Agreement" WHERE (Provider No.=FIELD(No.)));
                                                   CaptionML=[ENU=Provider Agreement;
                                                              FRA=Agr‚ment prestataire];
                                                   Editable=No }
    { 54200;  ;Temp. Exclusion     ;Boolean       ;OnValidate=BEGIN
                                                                IF "Temp. Exclusion" THEN BEGIN
                                                                  TESTFIELD("Temp. Exclusion Reason Code");
                                                                  TESTFIELD("Temp. Exclusion Start Date");
                                                                  //TESTFIELD("Temp. Exclusion End Date"); IMH24 isat.nfo
                                                                // <<IMH48.ISAT.MA
                                                                  TESTFIELD("Temp. Exclusion End Date");
                                                                  IF "Temp. Exclusion Start Date" > "Temp. Exclusion End Date" THEN
                                                                    ERROR(Text030,FIELDCAPTION("Temp. Exclusion Start Date"),FIELDCAPTION("Temp. Exclusion End Date"));
                                                                // >>IMH48.ISAT.MA
                                                                END ELSE BEGIN
                                                                  IF NOT Exclusion AND NOT "Black List" AND (Status >= Status::"Trial Period") THEN BEGIN
                                                                    VALIDATE("Invisible Open Space",FALSE);
                                                                  END;
                                                                  "Temp. Exclusion Reason Code" := '';
                                                                  "Temp. Exclusion Start Date" := 0D;
                                                                  "Temp. Exclusion End Date" := 0D;
                                                                  CALCFIELDS("Temp. Exclusion Reason Desc.");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Temp. Exclusion;
                                                              FRA=Exclusion temporaire];
                                                   Editable=No }
    { 54201;  ;Temp. Exclusion Reason Code;Code10 ;TableRelation=Code.Code WHERE (Table ID=CONST(50000),
                                                                                  Field ID=CONST(54201));
                                                   OnValidate=BEGIN
                                                                IF "Temp. Exclusion Reason Code" = '' THEN BEGIN
                                                                  VALIDATE("Temp. Exclusion",FALSE);
                                                                END ELSE BEGIN
                                                                // <<IMH48.ISAT.MA
                                                                  //"Temp. Exclusion" := ("Temp. Exclusion Start Date" <> 0D); // AND ("Temp. Exclusion End Date" <> 0D); IMH24 isat.nfo
                                                                  IF "Temp. Exclusion Start Date" = 0D THEN
                                                                    "Temp. Exclusion Start Date" := WORKDATE;
                                                                  IF "Temp. Exclusion End Date" = 0D THEN
                                                                    "Temp. Exclusion End Date" := WORKDATE + 1;
                                                                  "Temp. Exclusion" := TRUE;
                                                                // >>IMH48.ISAT.MA
                                                                  VALIDATE("Invisible Open Space",TRUE);
                                                                  IF NOT "Temp. Exclusion" AND NOT Exclusion AND NOT "Black List" AND (Status >= Status::"Trial Period") THEN BEGIN
                                                                    VALIDATE("Invisible Open Space",FALSE);
                                                                  END;
                                                                END;
                                                                CALCFIELDS("Temp. Exclusion Reason Desc.");
                                                              END;

                                                   CaptionML=[ENU=Temp. Exclusion Reason Code;
                                                              FRA=Motif exclusion temporaire] }
    { 54202;  ;Temp. Exclusion Start Date;Date    ;OnValidate=BEGIN
                                                                IF "Temp. Exclusion Start Date" = 0D THEN BEGIN
                                                                  VALIDATE("Temp. Exclusion",FALSE);
                                                                END ELSE BEGIN
                                                                  //<<IMH79.ISAT.EBA
                                                                  IF ("Temp. Exclusion Start Date" > "Temp. Exclusion End Date") AND
                                                                     ("Temp. Exclusion End Date" <> 0D)
                                                                  THEN
                                                                    ERROR(Text030,FIELDCAPTION("Temp. Exclusion Start Date"),FIELDCAPTION("Temp. Exclusion End Date"));
                                                                  //>>IMH79.ISAT.EBA
                                                                // <<IMH48.ISAT.MA
                                                                  "Temp. Exclusion" := TRUE;
                                                                  //"Temp. Exclusion" := ("Temp. Exclusion Reason Code" <> ''); // AND ("Temp. Exclusion End Date" <> 0D); IMH24 isat.nfo
                                                                  //VALIDATE("Temp. Exclusion",TRUE);
                                                                // >>IMH48.ISAT.MA
                                                                  VALIDATE("Invisible Open Space",TRUE);
                                                                  IF NOT "Temp. Exclusion" AND NOT Exclusion AND NOT "Black List" AND (Status >= Status::"Trial Period") THEN BEGIN
                                                                    VALIDATE("Invisible Open Space",FALSE);
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Temp. Exclusion Start Date;
                                                              FRA=Date d‚but exclusion temporaire] }
    { 54203;  ;Temp. Exclusion End Date;Date      ;OnValidate=BEGIN
                                                                //IF "Temp. Exclusion End Date" = 0D THEN BEGIN
                                                                //  VALIDATE("Temp. Exclusion",FALSE);
                                                                //END ELSE BEGIN
                                                                // <<IMH48.ISAT.MA
                                                                //"Temp. Exclusion" := ("Temp. Exclusion Reason Code" <> ''); //AND ("Temp. Exclusion Start Date" <> 0D); IMH24 isat.nfo
                                                                  //VALIDATE("Temp. Exclusion",TRUE);
                                                                //END;
                                                                // >>IMH48.ISAT.MA

                                                                //<<IMH79.ISAT.EBA
                                                                IF ("Temp. Exclusion Start Date" > "Temp. Exclusion End Date") AND
                                                                   ("Temp. Exclusion End Date" <> 0D)
                                                                THEN
                                                                  ERROR(Text030,FIELDCAPTION("Temp. Exclusion Start Date"),FIELDCAPTION("Temp. Exclusion End Date"));
                                                                //>>IMH79.ISAT.EBA

                                                                VALIDATE("Invisible Open Space",TRUE);
                                                                IF NOT "Temp. Exclusion" AND NOT Exclusion AND NOT "Black List" AND (Status >= Status::"Trial Period") THEN BEGIN
                                                                  VALIDATE("Invisible Open Space",FALSE);
                                                                END;
                                                                //END;
                                                              END;

                                                   CaptionML=[ENU=Temp. Exclusion End Date;
                                                              FRA=Date fin exclusion temporaire] }
    { 54204;  ;Temp. Exclusion Reason Desc.;Text50;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Code.Description WHERE (Table ID=CONST(50000),
                                                                                              Field ID=CONST(54201),
                                                                                              Code=FIELD(Temp. Exclusion Reason Code)));
                                                   CaptionML=[ENU=Temp. Exclusion Reason Desc.;
                                                              FRA=Description motif excl. temp.];
                                                   Editable=No }
    { 54210;  ;Exclusion           ;Boolean       ;OnValidate=BEGIN
                                                                IF Exclusion THEN BEGIN
                                                                  TESTFIELD("Exclusion Reason Code");
                                                                  TESTFIELD("Exclusion Date");
                                                                  VALIDATE("Invisible Open Space",TRUE);
                                                                  //<<IMH108 D‚sactiv‚
                                                                  //ProviderMgt.ProviderExclusionSendMail(Rec);  //IMH66
                                                                  //>>IMH108
                                                                END ELSE BEGIN
                                                                  IF NOT "Temp. Exclusion" AND NOT "Black List" AND (Status >= Status::"Trial Period") THEN BEGIN
                                                                    VALIDATE("Invisible Open Space",FALSE);
                                                                  END;
                                                                  "Exclusion Reason Code" := '';
                                                                  "Exclusion Date" := 0D;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Permanent Exclusion;
                                                              FRA=Exclusion d‚finitive] }
    { 54211;  ;Exclusion Reason Code;Code10       ;TableRelation=Code.Code WHERE (Table ID=CONST(50000),
                                                                                  Field ID=CONST(54211));
                                                   OnValidate=BEGIN
                                                                IF "Exclusion Reason Code" = '' THEN BEGIN
                                                                  VALIDATE(Exclusion,FALSE);
                                                                END ELSE BEGIN
                                                                  //<<IMH43
                                                                  IF NOT Exclusion THEN
                                                                    IF NOT SkipConfirmExclusion THEN
                                                                      IF GUIALLOWED THEN
                                                                        IF NOT CONFIRM(Text023) THEN BEGIN
                                                                          ERROR('');
                                                                        END;
                                                                  //>>IMH43

                                                                // <<IMH40.ISAT.MA
                                                                  IF "Exclusion Date" = 0D THEN
                                                                    "Exclusion Date" := WORKDATE;
                                                                // >>IMH40.ISAT.MA
                                                                  Exclusion := "Exclusion Date" <> 0D;
                                                                  //<<IMH108 D‚sactiv‚
                                                                  IF Exclusion THEN
                                                                    ProviderMgt.ProviderExclusionSendMail(Rec);  //IMH66
                                                                  //>>IMH108
                                                                  VALIDATE("Invisible Open Space",TRUE);
                                                                  IF NOT Exclusion AND NOT "Temp. Exclusion" AND NOT "Black List" AND (Status >= Status::"Trial Period") THEN BEGIN
                                                                    VALIDATE("Invisible Open Space",FALSE);
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Perm. Reason Code Exclusion;
                                                              FRA=Motif exclusion d‚finitive] }
    { 54212;  ;Exclusion Date      ;Date          ;TableRelation=IF (Exclusion=CONST(Yes)) Date."Period Start" WHERE (Period Start=FILTER(<>''));
                                                   OnValidate=BEGIN
                                                                IF "Exclusion Date" = 0D THEN BEGIN
                                                                  VALIDATE(Exclusion,FALSE);
                                                                END ELSE BEGIN
                                                                  Exclusion := "Exclusion Reason Code" <> '';
                                                                  VALIDATE("Invisible Open Space",TRUE);
                                                                  IF NOT Exclusion AND NOT "Temp. Exclusion" AND NOT "Black List" AND (Status >= Status::"Trial Period") THEN BEGIN
                                                                    VALIDATE("Invisible Open Space",FALSE);
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Permanent Exclusion Date;
                                                              FRA=Date exclusion d‚finitive] }
    { 54213;  ;Exclusion Reason Description;Text50;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Code.Description WHERE (Table ID=CONST(50000),
                                                                                              Field ID=CONST(54211),
                                                                                              Code=FIELD(Exclusion Reason Code)));
                                                   CaptionML=[ENU=Perm. Exclusion Reason Description;
                                                              FRA=Description motif excl. d‚f.];
                                                   Editable=No }
    { 54250;  ;Network Facilitator Name;Text50    ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Salesperson/Purchaser.Name WHERE (Code=FIELD(Salesp. Net. Facilitator Code)));
                                                   CaptionML=[ENU=Network Facilitator Name;
                                                              FRA=Nom charg‚ de pilotage r‚seau];
                                                   Editable=No }
    { 54251;  ;Regional Coordinator Name;Text50   ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Salesperson/Purchaser.Name WHERE (Code=FIELD(Salesp. Reg. Coordinator Code)));
                                                   CaptionML=[ENU=Area Responsible Name;
                                                              FRA=Nom responsable de zone];
                                                   Editable=No }
    { 54252;  ;Network Assistant Name;Text50      ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Salesperson/Purchaser.Name WHERE (Code=FIELD(Salesp. Network Assistant Code)));
                                                   CaptionML=[ENU=Network Assistant Name;
                                                              FRA=Nom assistante r‚seau];
                                                   Editable=No }
    { 54255;  ;Salesp. Net. Facilitator Code;Code10;
                                                   TableRelation=Salesperson/Purchaser;
                                                   CaptionML=[ENU=Network Facilitator Code;
                                                              FRA=Code vendeur charg‚ de pilotage r‚seau];
                                                   Editable=No }
    { 54256;  ;Salesp. Reg. Coordinator Code;Code10;
                                                   TableRelation=Salesperson/Purchaser;
                                                   CaptionML=[ENU=Salesperson Area Responsible Code;
                                                              FRA=Code vendeur responsable de zone];
                                                   Editable=No }
    { 54257;  ;Salesp. Network Assistant Code;Code10;
                                                   TableRelation=Salesperson/Purchaser;
                                                   CaptionML=[ENU=Salesperson Network Assistant Code;
                                                              FRA=Code vendeur assistante r‚seau];
                                                   Editable=No }
    { 54300;  ;Provider Scoring    ;Decimal       ;CaptionML=[ENU=Provider Scoring;
                                                              FRA=Note prestataire];
                                                   MinValue=0;
                                                   MaxValue=20;
                                                   Editable=No }
    { 54301;  ;Emergency           ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Provider Specialization" WHERE (Provider No.=FIELD(No.),
                                                                                                      Emergency=CONST(Yes)));
                                                   CaptionML=[ENU=Emergency;
                                                              FRA=Urgence];
                                                   Editable=No }
    { 54310;  ;Priority            ;Option        ;InitValue=(1) Normal;
                                                   OnValidate=BEGIN
                                                                IF Priority = Priority::"(1) Normal" THEN BEGIN
                                                                  "Priority Start Date" := 0D;
                                                                  "Priority End Date" := 0D;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Priority;
                                                              FRA=Priorit‚];
                                                   OptionCaptionML=[ENU=(0) Lower,(1) Normal,(2) High;
                                                                    FRA=(0) basse,(1) normale,(2) haute];
                                                   OptionString=(0) Lower,(1) Normal,(2) High }
    { 54311;  ;Priority Start Date ;Date          ;OnValidate=BEGIN
                                                                IF "Priority Start Date" <> 0D THEN
                                                                  IF "Priority End Date" <> 0D THEN
                                                                    IF "Priority End Date" < "Priority Start Date" THEN
                                                                      ERROR(Text044);
                                                              END;

                                                   CaptionML=[ENU=Priority Start Date;
                                                              FRA=Date d‚but priorit‚] }
    { 54312;  ;Priority End Date   ;Date          ;OnValidate=BEGIN
                                                                IF "Priority End Date" <> 0D THEN
                                                                  IF "Priority Start Date" <> 0D THEN
                                                                    IF "Priority End Date" < "Priority Start Date" THEN
                                                                      ERROR(Text044);
                                                              END;

                                                   CaptionML=[ENU=Priority End Date;
                                                              FRA=Date fin priorit‚] }
    { 54320;  ;Completnes Last Reminder Date;Date ;CaptionML=[ENU=Completnes Last Reminder Date;
                                                              FRA=Date de derniŠre relance compl‚tude] }
    { 54400;  ;Liveliness Network Last Date;Date  ;CaptionML=[ENU=Liveliness Network Last Date;
                                                              FRA=DerniŠre date travaux] }
    { 54401;  ;Last Visit Reason Code;Code10      ;TableRelation=Code.Code WHERE (Table ID=CONST(50000),
                                                                                  Field ID=CONST(54401));
                                                   CaptionML=[ENU=Last Visit Reason Code;
                                                              FRA=Motif derniŠre visite] }
    { 54402;  ;Planified Facilit. Visit Date;Date ;OnValidate=BEGIN
                                                                CheckNextVisitDate;//IMH16
                                                              END;

                                                   CaptionML=[ENU=Planified Visit Date Facilitator;
                                                              FRA=Date prochaine visite animation] }
    { 54403;  ;Constraint Phone No.;Text30        ;OnValidate=BEGIN
                                                                PhoneStandardization.ValidatePhoneNo(
                                                                  DATABASE::Provider,FIELDNO("Constraint Phone No."),"Country/Region Code","Constraint Phone No.");
                                                              END;

                                                   ExtendedDatatype=Phone No.;
                                                   CaptionML=[ENU=Constraint Phone No.;
                                                              FRA=Nø t‚l‚phone astreinte] }
    { 54405;  ;Facilitator Visit Last Date;Date   ;OnValidate=VAR
                                                                lNetworkFacilitatorVisitMgt@1100281000 : Codeunit 50076;
                                                              BEGIN
                                                                //TESTFIELD("Last Visit Reason Code");
                                                                //lNetworkFacilitatorVisitMgt.CreateLastVistDateHistory("No.", "Visit Last Date", "Last Visit Reason Code");//IMH39
                                                                "Planified Facilit. Visit Date" := lNetworkFacilitatorVisitMgt.CalcProviderVisitNextDate(Rec);
                                                              END;

                                                   CaptionML=[ENU=Facilitator Visit Last Date;
                                                              FRA=Date derniŠre visite animation] }
    { 54406;  ;Period Between Two Visits;DateFormula;
                                                   CaptionML=[ENU=Period Between Two Visits;
                                                              FRA=D‚lai entre 2 visites] }
    { 54407;  ;Next Visit interlocutor;Code10     ;TableRelation="User Setup"."User ID" WHERE (User Type=FILTER(Area Responsible|Network Facilitator));
                                                   CaptionML=[ENU=Next Visit interlocutor;
                                                              FRA=Interlocuteur prochaine visite] }
    { 54408;  ;Last Visit interlocutor;Code10     ;TableRelation="User Setup"."User ID" WHERE (User Type=FILTER(Area Responsible|Network Facilitator));
                                                   CaptionML=[ENU=Last Visit interlocutor;
                                                              FRA=Interlocuteur derniŠre visite] }
    { 54409;  ;Last Facilitator Visit Time;Time   ;CaptionML=[ENU=Last Facilitator Visit Time;
                                                              FRA=Heure derniŠre visite animation] }
    { 54410;  ;Planified Visit Date;Date          ;CaptionML=[ENU=Planified Visit Date Facilitator;
                                                              FRA=Date prochaine visite] }
    { 54411;  ;Visit Last Date     ;Date          ;OnValidate=VAR
                                                                lNetworkFacilitatorVisitMgt@1100281000 : Codeunit 50076;
                                                              BEGIN
                                                              END;

                                                   CaptionML=[ENU=Facilitator Visit Last Date;
                                                              FRA=Date derniŠre visite] }
    { 54412;  ;Last Visit No.      ;Code20        ;TableRelation="Network Visit";
                                                   CaptionML=[ENU=Last Visit No.;
                                                              FRA=Nø derniŠre visite] }
    { 54413;  ;Last Visit Time     ;Time          ;CaptionML=[ENU=Last Visit Time;
                                                              FRA=Heure derniŠre visite] }
    { 54420;  ;Last Visit interlocutor Name;Text50;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Salesperson/Purchaser.Name WHERE (Code=FIELD(Last Visit interlocutor)));
                                                   CaptionML=FRA=Nom du dernier interlocuteur;
                                                   Editable=No }
    { 54500;  ;Black List          ;Boolean       ;OnValidate=BEGIN
                                                                IF "Black List" THEN BEGIN
                                                                  TESTFIELD("Black List Reason Code");
                                                                  TESTFIELD("Black List Date");
                                                                  VALIDATE("Invisible Open Space",TRUE);
                                                                END ELSE BEGIN
                                                                  IF NOT "Temp. Exclusion" AND NOT Exclusion AND (Status >= Status::"Trial Period") THEN BEGIN
                                                                    VALIDATE("Invisible Open Space",FALSE);
                                                                  END;
                                                                  "Black List Reason Code" := '';
                                                                  "Black List Date" := 0D;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Black List;
                                                              FRA=Black List] }
    { 54501;  ;Black List Reason Code;Code10      ;TableRelation=Code.Code WHERE (Table ID=CONST(50000),
                                                                                  Field ID=CONST(54501));
                                                   OnValidate=BEGIN
                                                                IF "Black List Reason Code" = '' THEN BEGIN
                                                                  VALIDATE("Black List",FALSE);
                                                                END ELSE BEGIN
                                                                // <<IMH40.ISAT.MA
                                                                  IF "Black List Date" = 0D THEN
                                                                    "Black List Date" := WORKDATE;
                                                                // >>IMH40.ISAT.MA
                                                                  "Black List" := "Black List Date" <> 0D;
                                                                  VALIDATE("Invisible Open Space",TRUE);
                                                                  IF NOT "Black List" AND NOT "Temp. Exclusion" AND NOT Exclusion AND (Status >= Status::"Trial Period") THEN BEGIN
                                                                    VALIDATE("Invisible Open Space",FALSE);
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Black List Reason Code;
                                                              FRA=Motif Black List] }
    { 54502;  ;Black List Date     ;Date          ;OnValidate=BEGIN
                                                                IF "Black List Date" = 0D THEN BEGIN
                                                                  VALIDATE("Black List",FALSE);
                                                                END ELSE BEGIN
                                                                  "Black List" := ("Black List Reason Code" <> '');
                                                                  VALIDATE("Invisible Open Space",TRUE);
                                                                  IF NOT "Black List" AND NOT "Temp. Exclusion" AND NOT Exclusion AND (Status >= Status::"Trial Period") THEN BEGIN
                                                                    VALIDATE("Invisible Open Space",FALSE);
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Black List Date;
                                                              FRA=Date Black List] }
    { 54503;  ;Black List Reason Desc.;Text50     ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Code.Description WHERE (Table ID=CONST(50000),
                                                                                              Field ID=CONST(54501),
                                                                                              Code=FIELD(Black List Reason Code)));
                                                   CaptionML=[ENU=Black List Reason Desc.;
                                                              FRA=Description motif black list];
                                                   Editable=No }
    { 54520;  ;IMH Territory Description;Text50   ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Territory.Name WHERE (Code=FIELD(IMH Territory Code)));
                                                   CaptionML=[ENU=IMH Territory Description;
                                                              FRA=Zone IMH];
                                                   Editable=No }
    { 54521;  ;Admin. Territory Code;Code10       ;TableRelation=Territory WHERE (Type=CONST(Administratif));
                                                   CaptionML=[ENU=Admin. Territory Code;
                                                              FRA=R‚gion administrative];
                                                   Editable=No }
    { 54522;  ;Admin. Territory Description;Text50;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Territory.Name WHERE (Code=FIELD(Admin. Territory Code)));
                                                   CaptionML=[ENU=Admin. Territory Description;
                                                              FRA=R‚gion administrative];
                                                   Editable=No }
    { 54600;  ;Statistics Group No.;Code20        ;TableRelation="Statistics Group".No.;
                                                   OnValidate=VAR
                                                                lStatisticsGroupMgt@1100281000 : Codeunit 50126;
                                                              BEGIN
                                                                IF NOT SkipConfirmStatGroup THEN
                                                                  IF NOT CONFIRM(Text035) THEN
                                                                    ERROR('');
                                                                lStatisticsGroupMgt.ProvOnChangeGroupStat(Rec, "Statistics Group No."); //IMH59
                                                              END;

                                                   CaptionML=[ENU=Statistical Group No.;
                                                              FRA=Nø groupe statistique] }
    { 54601;  ;Statistics Group    ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Statistics Group".Name WHERE (No.=FIELD(Statistics Group No.)));
                                                   CaptionML=[ENU=Statistics Group;
                                                              FRA=Groupe statistique];
                                                   Editable=No }
    { 54610;  ;Occupancy Building  ;Boolean       ;CaptionML=[ENU=Occupancy Building;
                                                              FRA=Immeuble habitation] }
    { 54700;  ;Geo. Reference Code ;Code10        ;TableRelation="Geographical Reference".Code;
                                                   CaptionML=[ENU=Geo. Reference Code;
                                                              FRA=Code de r‚f‚rence g‚ographique] }
    { 54800;  ;Standard Calendar   ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Provider Change Calendar" WHERE (Provider No.=FIELD(No.),
                                                                                                       Emergency=CONST(No)));
                                                   CaptionML=[ENU=Standard Calendar;
                                                              FRA=Calendrier standard];
                                                   Editable=No }
    { 54801;  ;Standard Business Hours;Boolean    ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Provider Business Hours" WHERE (Provider No.=FIELD(No.),
                                                                                                      Emergency=CONST(No),
                                                                                                      Default Value=CONST(No)));
                                                   CaptionML=[ENU=Standard Business Hours;
                                                              FRA=Heures d'ouverture standard];
                                                   Editable=No }
    { 54802;  ;Standard Specializations;Integer   ;FieldClass=FlowField;
                                                   CalcFormula=Count("Provider Specialization" WHERE (Provider No.=FIELD(No.),
                                                                                                      Specialization Code=FIELD(Speciality Filter)));
                                                   CaptionML=[ENU=Standard Specializations;
                                                              FRA=Sp‚cialit‚s standard];
                                                   Editable=No }
    { 54810;  ;Emergency Calendar  ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Provider Change Calendar" WHERE (Provider No.=FIELD(No.),
                                                                                                       Emergency=CONST(Yes)));
                                                   CaptionML=[ENU=Emergency Calendar;
                                                              FRA=Calendrier d'urgence];
                                                   Editable=No }
    { 54811;  ;Emergency Business Hours;Boolean   ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Provider Business Hours" WHERE (Provider No.=FIELD(No.),
                                                                                                      Emergency=CONST(Yes),
                                                                                                      Default Value=CONST(No)));
                                                   CaptionML=[ENU=Emergency Business Hours;
                                                              FRA=Heures d'ouverture urgence];
                                                   Editable=No }
    { 54812;  ;Copy Calendar       ;Boolean       ;OnValidate=VAR
                                                                lProviderBusinessHoursFrom@1100281000 : Record 50028;
                                                              BEGIN
                                                                IF "Copy Calendar" THEN
                                                                  IF NOT CONFIRM(Text033,FALSE) THEN
                                                                    "Copy Calendar" := FALSE;

                                                                IF "Copy Calendar" THEN
                                                                BEGIN
                                                                  lProviderBusinessHoursFrom.RESET;
                                                                  lProviderBusinessHoursFrom.SETRANGE("Provider No.","No.");
                                                                  IF lProviderBusinessHoursFrom.FINDSET THEN
                                                                  REPEAT
                                                                    lProviderBusinessHoursFrom.MODIFY(TRUE);
                                                                  UNTIL(lProviderBusinessHoursFrom.NEXT = 0);
                                                                END;
                                                              END;

                                                   CaptionML=FRA=Copier calendrier / heures d'ouverture }
    { 54819;  ;Manual Visit Nb per Year;Integer   ;CaptionML=[ENU=Manual Visit Nb per Year;
                                                              FRA=Nombre de visite par an manuel] }
    { 54820;  ;Visit Category Code ;Code10        ;TableRelation="Network Visit Category Setup"."Category Code";
                                                   OnValidate=VAR
                                                                lNetworkFacilitatorVisitMgt@1000000001 : Codeunit 50076;
                                                              BEGIN
                                                                //<<IMH83.PC
                                                                lNetworkFacilitatorVisitMgt.CalcProviderVisitNextDate(Rec);
                                                                //>>IMH83.PC
                                                              END;

                                                   CaptionML=[ENU=Visit Category Code;
                                                              FRA=Code cat‚gorie visite] }
    { 54821;  ;Percentage Commission;Decimal      ;CaptionML=FRA=% Commission;
                                                   MinValue=0;
                                                   MaxValue=100;
                                                   Description=IMH6.01 }
    { 54830;  ;Synchronization IMA Service;Boolean;CaptionML=[ENU=Synchronization IMA Service;
                                                              FRA=Synchronisation IMA Service] }
    { 54840;  ;Qualification       ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Provider Qualification" WHERE (Provider No.=FIELD(No.)));
                                                   CaptionML=[ENU=Qualification;
                                                              FRA=Qualification];
                                                   Editable=No }
    { 54850;  ;Linked Provider Nb. ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Linked Provider" WHERE (Provider No.=FIELD(No.)));
                                                   CaptionML=[ENU=Linked Provider Nb.;
                                                              FRA=Nombre de prestataires associ‚s];
                                                   Editable=No }
    { 54900;  ;To Delete           ;Boolean       ;CaptionML=[ENU=To Delete;
                                                              FRA=A supprimer] }
    { 60000;  ;AR Check            ;Boolean       ;OnValidate=BEGIN
                                                                IF "AR Check" THEN
                                                                BEGIN
                                                                  "AR Check Userid" := USERID;
                                                                  "AR Check Date" := CURRENTDATETIME;
                                                                END ELSE BEGIN
                                                                  "AR Check Userid" := '';
                                                                  "AR Check Date" := 0DT;
                                                                END;
                                                              END;

                                                   CaptionML=FRA=Contr“le AR }
    { 60001;  ;AR Check Userid     ;Code20        ;CaptionML=FRA=Contr“leur AR;
                                                   Editable=No }
    { 60002;  ;AR Check Date       ;DateTime      ;CaptionML=FRA=Date contr“leur AR;
                                                   Editable=No }
    { 60010;  ;CR Check            ;Boolean       ;OnValidate=BEGIN
                                                                IF "CR Check" THEN
                                                                BEGIN
                                                                  "CR Check Userid" := USERID;
                                                                  "CR Check Date" := CURRENTDATETIME;
                                                                END ELSE BEGIN
                                                                  "CR Check Userid" := '';
                                                                  "CR Check Date" := 0DT;
                                                                END;
                                                              END;

                                                   CaptionML=FRA=Contr“le CR }
    { 60011;  ;CR Check Userid     ;Code20        ;CaptionML=FRA=Contr“leur CR;
                                                   Editable=No }
    { 60012;  ;CR Check Date       ;DateTime      ;CaptionML=FRA=Date contr“leur CR;
                                                   Editable=No }
    { 60020;  ;Geo Setup Type      ;Text250       ;CaptionML=FRA=Type de comp‚tence G‚o }
    { 65000;  ;Follow Up           ;Text175       ;OnValidate=BEGIN
                                                                "Follow Up Date Creation" := CURRENTDATETIME;
                                                                "Follow Up User Creation" := USERID;
                                                                //<<IMH111.ST
                                                                IF ("Follow Up" = '') AND ("Follow Up Start Date" = 0D) AND ("Follow Up End Date" = 0D) THEN BEGIN
                                                                  "Follow Up Date Creation" := 0DT;
                                                                  "Follow Up User Creation" := '';
                                                                  "Follow Up Origin" := '';
                                                                END;
                                                                IF ("Follow Up" <> '') AND ("Follow Up Start Date" = 0D) THEN
                                                                  VALIDATE("Follow Up Start Date", WORKDATE);
                                                                //>>IMH111.ST
                                                              END;

                                                   CaptionML=[ENU=Follow Up;
                                                              FRA=Suivi] }
    { 65001;  ;Follow Up Start Date;Date          ;OnValidate=BEGIN
                                                                //IMH110
                                                                IF "Follow Up Start Date" <> 0D THEN BEGIN
                                                                  IF "Follow Up Start Date" < WORKDATE THEN
                                                                    ERROR(Text047);
                                                                END;
                                                                //<<IMH111.ST
                                                                IF ("Follow Up" = '') AND ("Follow Up Start Date" = 0D) AND ("Follow Up End Date" = 0D) THEN BEGIN
                                                                  "Follow Up Date Creation" := 0DT;
                                                                  "Follow Up User Creation" := '';
                                                                  "Follow Up Origin" := '';
                                                                END;
                                                                //>>IMH111.ST
                                                              END;

                                                   CaptionML=[ENU=Follow Up Start Date;
                                                              FRA=Date d‚but suivi] }
    { 65002;  ;Follow Up End Date  ;Date          ;OnValidate=BEGIN
                                                                //IMH110
                                                                IF "Follow Up End Date" <> 0D THEN BEGIN
                                                                  IF "Follow Up End Date" < WORKDATE THEN
                                                                    ERROR(Text046);
                                                                  IF "Follow Up End Date" < "Follow Up Start Date" THEN
                                                                    ERROR(Text046);
                                                                END;
                                                                //<<IMH111.ST
                                                                IF ("Follow Up" = '') AND ("Follow Up Start Date" = 0D) AND ("Follow Up End Date" = 0D) THEN BEGIN
                                                                  "Follow Up Date Creation" := 0DT;
                                                                  "Follow Up User Creation" := '';
                                                                  "Follow Up Origin" := '';
                                                                END;
                                                                //>>IMH111.ST
                                                              END;

                                                   CaptionML=[ENU=Follow Up End Date;
                                                              FRA=Date fin suivi] }
    { 65010;  ;Follow Up Date Creation;DateTime   ;CaptionML=[ENU=Follow Up Date Creation;
                                                              FRA=Date de cr‚ation suivi];
                                                   Editable=No }
    { 65011;  ;Follow Up User Creation;Code20     ;CaptionML=[ENU=Follow Up User Creation;
                                                              FRA=Utilisateur cr‚ation suivi];
                                                   Editable=No }
    { 65015;  ;Follow Up Origin    ;Text30        ;CaptionML=[ENU=Follow Up Origin;
                                                              FRA=Origine suivi];
                                                   Editable=No }
    { 90000;  ;AR GO Account       ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count(Provider WHERE (AR Check=CONST(No),
                                                                                     Process Code=CONST(110..800)));
                                                   CaptionML=FRA=Compteur AR R‚gion GO;
                                                   Editable=No }
    { 90001;  ;Check Post Code     ;Boolean       ;CaptionML=FRA=Contr“le Code postal }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Search Name                              }
    {    ;Enable,Black List                        }
    {    ;Phone No.                                }
    {    ;Fax No.                                  }
    {    ;E-Mail                                   }
    {    ;Registration No.                         }
    {    ;VAT Registration No.                     }
    {    ;Regional Coordinator,Post Code           }
    {    ;Statistics Group No.                     }
    {    ;Enable                                   }
    {    ;AR Check,Process Code,IMH Territory Code }
    {    ;CR Check,Process Code,IMH Territory Code }
    {    ;Invisible Open Space                     }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;No.,Search Name                          }
  }
  CODE
  {
    VAR
      ProviderSetup@1100281005 : Record 50011;
      PostCode@1100281002 : Record 225;
      AddressReference@1100281031 : Record 50077;
      MarketingSetup@1100281020 : Record 5079;
      NFSalesperson@1100281026 : Record 13;
      RCSalesperson@1100281025 : Record 13;
      NASalesperson@1100281024 : Record 13;
      Territory@1100281023 : Record 286;
      StatisticsGroup@1100281022 : Record 50002;
      RMSetup@1100281040 : Record 5079;
      NAFCode@1100281021 : Record 50079;
      ChangLogMgt@1100281033 : Codeunit 423;
      PhoneStandardization@1100281001 : Codeunit 50099;
      Text001@1100281000 : TextConst 'ENU=Provider %1 speciality %2 do not exists;FRA=Le prestataire %1 ne possŠde pas la sp‚cialit‚ %2';
      Text002@1100281003 : TextConst 'ENU=Speciality %2 from provider %1 has already a geographical ability;FRA=Le prestataire %1 a d‚j… une couverture g‚ographique pour la sp‚cialit‚ %2';
      ProviderContactUpdate@1100281006 : Codeunit 50010;
      NoSeriesMgt@1100281007 : Codeunit 396;
      ProviderMgt@1100281008 : Codeunit 50018;
      InsertFromContact@1100281004 : Boolean;
      Text003@1100281009 : TextConst 'FRA=La nouvelle limite d''intervention passe de %1 … %2, validez-vous cette nouvelle valeur ?';
      Text004@1100281010 : TextConst 'ENU=Please fill post code.;FRA=Veuillez s‚lectionner un code postal pr‚alablement.';
      Text005@1100281011 : TextConst 'ENU=Do you want to modify %1 ?;FRA=Souhaitez-vous modifier %1 ?';
      ProviderSetupOK@1100281012 : Boolean;
      ContactNameBreakdownDisable@1100281013 : Boolean;
      Text006@1100281014 : TextConst 'ENU=You are not allowed to modify this provider;FRA=Droits insuffisants … la modification du prestataire';
      Text007@1100281015 : TextConst 'ENU=% 1 must not be earlier than 2%;FRA=%1 ne doit pas ˆtre ant‚rieure … %2';
      Text008@1100281016 : TextConst 'ENU=% 1 must not be earlier than today;FRA=%1 ne doit pas ˆtre ant‚rieure … la date du jour';
      Text021@1100281017 : TextConst 'ENU=You have to set up formal and informal salutation formulas in %1  lnguage for the %2 provider.;FRA=Vous devez configurer des formules appellatives formelles et informelles en langue %1 pour le prestataire %2.';
      ProcessDisabled@1100281018 : Boolean;
      MarketingSetupOK@1100281019 : Boolean;
      Text022@1100281027 : TextConst 'ENU=You cannot delete %1 because one or more interventions are assigned to the provider.;FRA=Vous ne pouvez pas supprimer le prestataire %1 car une ou plusieurs interventions sont li‚es au prestataire.';
      Text023@1100281028 : TextConst 'ENU=Do you want to exclude the provider?;FRA=Voulez-vous exclure d‚finitivement le prestataire?';
      SkipConfirmExclusion@1100281029 : Boolean;
      Text024@1100281030 : TextConst 'ENU=The manpower should higher than the IMH speciality manpower %1 (%2).;FRA=L''effectif global du prestataire ne doit pas ˆtre inf‚rieur au nombre de main d''oeuvre sp‚cialis‚e de la sp‚cialit‚ %1 (%2).';
      Text030@1100281032 : TextConst 'ENU=%1 must be earlier than %2.;FRA=%1 doit ˆtre inf‚rieur … %2.';
      SkipConfirmStatGroup@1100281039 : Boolean;
      Text031@1100281034 : TextConst 'FRA=Ces ‚l‚ments ne peuvent ˆtre modifi‚s que par le responsable de zone';
      Text032@1100281035 : TextConst 'ENU=Turnover should be different than zero.;FRA=Le chiffre d''affaire ne doit pas ˆtre vide.';
      Text033@1100281036 : TextConst 'FRA=Les modifications du calendrier urgent seront maintenant recopi‚es vers le calendrier standard. Souhaitez-vous continuer ?';
      Text034@1100281037 : TextConst 'FRA=Vous avez modifi‚ le chiffre d''affaire en le diminuant!';
      Text035@1100281038 : TextConst 'ENU=This modificaiton will modify the pay-to vendor of provider. Do you want to continue?;FRA=Cette modification va modifier le fournisseur … payer du prestataire. Souhaitez-vous continuer?';
      xRecref@1100281041 : RecordRef;
      Recref@1100281042 : RecordRef;
      Text036@1100281043 : TextConst 'ENU=Rename is not available;FRA=Le renomage n''est pas autoris‚';
      Text037@1100281044 : TextConst 'ENU=Intervention limit has been decrease from %1 to %2.;FRA=Vous avez diminu‚ la limite d''intervention de %1 … %2.';
      Text038@1100281045 : TextConst 'ENU=%1 should have a value.;FRA=%1 doit avoir une valeur.';
      Text039@1100281046 : TextConst 'ENU=The value should not higher than the value setted(%1).;FRA=La valeur du champ ne doit pas ˆtre sup‚rieure … la valeur param‚tr‚e(%1) dans les param‚tres prestataires.';
      Text040@1100281047 : TextConst 'ENU=Value can''t be less than sum of interventions limits by specialities;FRA=La valeur ne peut ˆtre inferieur … la somme des limites d''intervetions par sp‚cialit‚s';
      Text041@1100281048 : TextConst 'ENU=Old value %1, new value %2;FRA=Ancienne valeur %1, nouvelle valeur %2';
      Text042@1100281049 : TextConst 'ENU=Valid intervention limit provider %1;FRA=Validation de limite d''intervention prestataire %1';
      Text043@1100281050 : TextConst 'ENU=Validation demand has been sent to the Area Responsible.;FRA=Une demande de validation a ‚t‚ envoy‚e au Responsable de Zone.';
      Text044@1100281051 : TextConst 'ENU=The end priority date should be later than the begin priority date.;FRA=La date fin priorit‚ doit ˆtre sup‚rieure ou ‚gale … la date d‚but priorit‚.';
      Text045@1100281052 : TextConst 'ENU=You are not allowed to modify provider limit intervention;FRA=Drois insuffisants pour modifier la limite d''intervention';
      SkipAutoStep@1100281053 : Boolean;
      DARVASetup@1000000000 : Record 50126;
      Text046@1100281054 : TextConst 'ENU=The end follow-up date should be later than the begin follow-up date.;FRA=La date fin suivi doit ˆtre sup‚rieure ou ‚gale … la date du jour et la date d‚but suivi.';
      Text047@1100281055 : TextConst 'ENU=The begin follow-up date should be later than the work date.;FRA=La date d‚but suivi ne doit pas ˆtre inf‚rieure … la date du jour.';

    PROCEDURE ShowContact@1();
    VAR
      lContactBusinessRelation@1000 : Record 5054;
      lContact@1001 : Record 5050;
      lProviderContactUpdate@1100281000 : Codeunit 50010;
    BEGIN
      IF "No." = '' THEN BEGIN
        EXIT;
      END;

      lContactBusinessRelation.SETCURRENTKEY("Link to Table","No.");
      lContactBusinessRelation.SETRANGE("Link to Table",lContactBusinessRelation."Link to Table"::Provider);
      lContactBusinessRelation.SETRANGE("No.","No.");
      IF NOT lContactBusinessRelation.FINDFIRST THEN BEGIN
        lProviderContactUpdate.InsertNewContact(Rec,FALSE);
        lContactBusinessRelation.FINDFIRST;
      END;
      COMMIT;

      lContact.SETCURRENTKEY("Company Name","Company No.",Type,Name);
      lContact.SETRANGE("Company No.",lContactBusinessRelation."Contact No.");
      lContact.SETRANGE(Type,lContact.Type::Company);
      lContact.SETRANGE("Service Contact",lContact."Service Contact"::Provider);
      FORM.RUN(FORM::"Contact Card",lContact);
    END;

    PROCEDURE CreateVendor@7();
    VAR
      lContact@1001 : Record 5050;
      lGeneralLedgerSetup@1100281001 : Record 98;
      lVendor@1100281002 : Record 23;
      lDataTemplateHeader@1100281005 : Record 8618;
      lTemplateMgt@1100281000 : Codeunit 8612;
      lRecRef@1100281003 : RecordRef;
      lVendorNo@1100281004 : Code[20];
    BEGIN
      //<<IMH47.isat.PC
      lGeneralLedgerSetup.GET;
      lGeneralLedgerSetup.TESTFIELD("IMH Vendor Template");
      lDataTemplateHeader.GET(lGeneralLedgerSetup."IMH Vendor Template");
      //>>IMH47.isat.PC
      lContact.GET("No.");
      lContact.CreateVendor;
      //<<IMH47.isat.PC
      lVendorNo := GetVendorNo("No.");
      IF lVendor.GET(lVendorNo) THEN BEGIN
        lRecRef.GETTABLE(lVendor);
        lTemplateMgt.UpdateRecord(lDataTemplateHeader,lRecRef);
      END;
      //>>IMH47.isat.PC
    END;

    PROCEDURE IsBlackList@1100281000(lProviderAgreement@1100281000 : Record 50012) : Boolean;
    BEGIN
      lProviderAgreement.RESET();
      lProviderAgreement.SETRANGE("Provider No.","No.");
      EXIT(lProviderAgreement.COUNT()>0);
    END;

    PROCEDURE GetNameRegionalCoordinator@1100281004() rValue : Text[90];
    VAR
      lUserSetup@1100281001 : Record 91;
      lEmployee@1100281000 : Record 5200;
    BEGIN
      IF lUserSetup.GET("Regional Coordinator") THEN BEGIN
        IF lEmployee.GET(lUserSetup."Employee No.") THEN BEGIN
          rValue := lEmployee."First Name";
          IF STRLEN(rValue) <> 0 THEN BEGIN
            rValue := rValue + ' ' + lEmployee."Middle Name";
          END ELSE BEGIN
            rValue := lEmployee."Middle Name";
          END;
          IF STRLEN(rValue) <> 0 THEN BEGIN
            rValue := rValue + ' ' + lEmployee."Last Name";
          END ELSE BEGIN
            rValue := lEmployee."Last Name";
          END;
        END;
      END;
    END;

    PROCEDURE GetNameNetworkAssitant@1100281007() rValue : Text[90];
    VAR
      lUserSetup@1100281001 : Record 91;
      lEmployee@1100281000 : Record 5200;
    BEGIN
      IF lUserSetup.GET("Network Assistant") THEN BEGIN
        IF lEmployee.GET(lUserSetup."Employee No.") THEN BEGIN
          rValue := lEmployee."First Name";
          IF STRLEN(rValue) <> 0 THEN BEGIN
            rValue := rValue + ' ' + lEmployee."Middle Name";
          END ELSE BEGIN
            rValue := lEmployee."Middle Name";
          END;
          IF STRLEN(rValue) <> 0 THEN BEGIN
            rValue := rValue + ' ' + lEmployee."Last Name";
          END ELSE BEGIN
            rValue := lEmployee."Last Name";
          END;
        END;
      END;
    END;

    PROCEDURE GetNameNetworkFacilitator@1100281008() rValue : Text[90];
    VAR
      lUserSetup@1100281001 : Record 91;
      lEmployee@1100281000 : Record 5200;
    BEGIN
      IF lUserSetup.GET("Network Facilitator") THEN BEGIN
        IF lEmployee.GET(lUserSetup."Employee No.") THEN BEGIN
          rValue := lEmployee."First Name";
          IF STRLEN(rValue) <> 0 THEN BEGIN
            rValue := rValue + ' ' + lEmployee."Middle Name";
          END ELSE BEGIN
            rValue := lEmployee."Middle Name";
          END;
          IF STRLEN(rValue) <> 0 THEN BEGIN
            rValue := rValue + ' ' + lEmployee."Last Name";
          END ELSE BEGIN
            rValue := lEmployee."Last Name";
          END;
        END;
      END;
    END;

    PROCEDURE UpdateMainAbilityGeo@1100281002(pProviderNo@1100281002 : Code[20];pOldSpecializationCode@1100281003 : Code[10];pNewSpecializationCode@1100281004 : Code[10]);
    VAR
      lAbilityGeoProviderSetup@1100281001 : Record 50033;
      lAbilityGeoProvider@1100281000 : Record 50016;
    BEGIN
      // Mise … jour de la comp‚tence g‚ographique
      lAbilityGeoProviderSetup.SETRANGE("Provider No.",pProviderNo);
      IF lAbilityGeoProviderSetup.FINDSET THEN BEGIN
        REPEAT
          lAbilityGeoProvider.SETRANGE("Provider No.",pProviderNo);
          lAbilityGeoProvider.SETRANGE("Start Reference Code",lAbilityGeoProviderSetup."Start Reference Code");
          lAbilityGeoProvider.SETRANGE("Specialization Code",pOldSpecializationCode);
          lAbilityGeoProvider.MODIFYALL("Main Specialization",FALSE);
          lAbilityGeoProvider.SETRANGE("Specialization Code",pNewSpecializationCode);
          lAbilityGeoProvider.MODIFYALL("Main Specialization",TRUE);
        UNTIL lAbilityGeoProviderSetup.NEXT = 0;
      END;
    END;

    PROCEDURE UpdateMainCampaignAbilityGeo@1100281003(pProviderNo@1100281004 : Code[20];pOldSpecializationCode@1100281003 : Code[10];pNewSpecializationCode@1100281002 : Code[10]);
    VAR
      lAbilityCampGeoProvSetup@1100281001 : Record 50037;
      lAbilityCampGeoProvider@1100281000 : Record 50015;
    BEGIN
      // Mise … jour de la comp‚tence g‚ographique campagne
      {
      lAbilityCampGeoProvSetup.SETRANGE("Provider No.",pProviderNo);
      IF lAbilityCampGeoProvSetup.FINDSET THEN BEGIN
        REPEAT
          lAbilityCampGeoProvider.SETRANGE("Provider No.",pProviderNo);
          lAbilityCampGeoProvider.SETRANGE("Start Ref. Geo. Code",lAbilityCampGeoProvSetup."Start Reference Code");
          lAbilityCampGeoProvider.SETRANGE("Specialization Code",pOldSpecializationCode);
          lAbilityCampGeoProvider.MODIFYALL("Main Specialization",FALSE);
          lAbilityCampGeoProvider.SETRANGE("Specialization Code",pNewSpecializationCode);
          lAbilityCampGeoProvider.MODIFYALL("Main Specialization",TRUE);
        UNTIL lAbilityCampGeoProvSetup.NEXT = 0;
      END;
      }
    END;

    PROCEDURE CreateInteraction@10();
    VAR
      lSegmentLine@1000 : TEMPORARY Record 5077;
      lContact@1100281000 : Record 5050;
    BEGIN
      //IMH09 isat.zw
      //<<IMH32
      //lContact.GET("No.");
      //lSegmentLine.CreateInteractionFromContact(lContact);
      lSegmentLine.CreateInteractionFromProvider(Rec);
      //>>IMH32
    END;

    PROCEDURE GetProviderSetup@1100281005();
    BEGIN
      IF ProviderSetupOK THEN BEGIN
        EXIT;
      END;

      ProviderSetup.GET;
      ProviderSetupOK := TRUE;
    END;

    PROCEDURE SetContactNameBreakdownDisable@1100281001(pContactNameBreakdownDisable@1100281000 : Boolean);
    BEGIN
      ContactNameBreakdownDisable := pContactNameBreakdownDisable;
    END;

    PROCEDURE GetLastIntervNb@1100281009() rValue : Integer;
    VAR
      lServIntervLine@1100281000 : Record 50075;
      lStartDate@1100281001 : Date;
      lEndDate@1100281002 : Date;
    BEGIN
      // Permet de r‚cup‚rer sur les 12 derniers mois, le nombre d'intervention
      rValue := 0;
      lStartDate := CALCDATE('<-1Y+1D>',WORKDATE);
      lEndDate := WORKDATE;
      lServIntervLine.RESET;
      lServIntervLine.SETCURRENTKEY("Provider No.");
      lServIntervLine.SETRANGE("Provider No.","No.");
      lServIntervLine.SETRANGE("Assigned Date",lStartDate,lEndDate);
      lServIntervLine.SETFILTER("Intervention Status",'<>%1',lServIntervLine."Intervention Status"::Cancel);
      rValue := lServIntervLine.COUNT;
    END;

    PROCEDURE GetLastIntervNbByBuild@1000000001(pBuildingTradeFilter@1100281000 : Text[1024]) rValue : Integer;
    VAR
      lServIntervLine@1100281001 : Record 50075;
      lServCode@1100281002 : Record 50040;
      lSpecializationBuildingTrade@1000000002 : Record 50031;
      lStartDate@1000000001 : Date;
      lEndDate@1000000000 : Date;
    BEGIN
      // IMH83.PC
      // Permet de r‚cup‚rer sur les 12 derniers mois, le nombre d'intervention en fonction du corps de m‚tier
      rValue := 0;
      IF pBuildingTradeFilter = '' THEN BEGIN
        rValue := GetLastIntervNb;
      END ELSE BEGIN
        lStartDate := CALCDATE('<-1Y+1D>',WORKDATE);
        lEndDate := WORKDATE;
        lServIntervLine.SETCURRENTKEY("Provider No.");
        lServIntervLine.SETRANGE("Provider No.","No.");
        lServIntervLine.SETRANGE("Assigned Date",lStartDate,lEndDate);
        lServIntervLine.SETFILTER("Mission Status",'<>%1',lServIntervLine."Mission Status"::Canceled);
        lServIntervLine.SETFILTER("Intervention Status",'<>%1',lServIntervLine."Intervention Status"::Cancel);
        IF lServIntervLine.FINDSET THEN BEGIN
          REPEAT
            lServCode.SETRANGE("Service Type",lServCode."Service Type"::Intervention);
            lServCode.SETRANGE("Service No.",lServIntervLine."Service No.");
            lServCode.SETRANGE("Service Header No.",lServIntervLine."Service Header No.");
            lServCode.SETRANGE("Intervention Line No.",lServIntervLine."Line No.");
            lServCode.SETRANGE("Code Type",lServCode."Code Type"::Speciality);
            IF lServCode.FINDSET THEN BEGIN
              REPEAT
                lSpecializationBuildingTrade.SETRANGE("Building Trade No.",pBuildingTradeFilter);
                lSpecializationBuildingTrade.SETRANGE("Specialization Code",lServCode.Code);
                IF NOT lSpecializationBuildingTrade.ISEMPTY THEN BEGIN
                  rValue += 1;
                END;
              UNTIL lServCode.NEXT = 0;
            END;
          UNTIL lServIntervLine.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE LookupLastIntervNb@1100281011();
    VAR
      lServiceInterventionLine@1100281001 : Record 50075;
      lStartDate@1100281000 : Date;
      lEndDate@1100281002 : Date;
    BEGIN
      // Permet d'afficher les interventions sur les 12 derniers mois

      lStartDate := CALCDATE('<-1Y+1D>',WORKDATE);
      lEndDate := WORKDATE;
      lServiceInterventionLine.RESET;
      lServiceInterventionLine.FILTERGROUP(2);
      lServiceInterventionLine.SETCURRENTKEY("Provider No.");
      lServiceInterventionLine.SETRANGE("Provider No.","No.");
      lServiceInterventionLine.FILTERGROUP(0);
      lServiceInterventionLine.SETRANGE("Assigned Date",lStartDate,lEndDate);
      lServiceInterventionLine.SETFILTER("Intervention Status",'<>%1',lServiceInterventionLine."Intervention Status"::Cancel);
      FORM.RUNMODAL(0,lServiceInterventionLine);
    END;

    PROCEDURE AutoStep@1100281010() : Boolean;
    VAR
      lProcessProviderMgt@1100281000 : Codeunit 50044;
    BEGIN
      //IMH12.ST
      MODIFY;  //IMH100
      EXIT(lProcessProviderMgt.TestAutoStep(Rec));
    END;

    PROCEDURE GetCoordinatorTrayLine@1100281012() : Code[10];
    VAR
      lUserSetup@1100281000 : Record 91;
    BEGIN
      //IMH15
      IF lUserSetup.GET("Regional Coordinator") THEN
        EXIT(lUserSetup."Coordinator Tray Line");
    END;

    PROCEDURE GetFacilitatorTrayLine@1100281014() : Code[10];
    VAR
      lUserSetup@1100281000 : Record 91;
    BEGIN
      //IMH15
      IF lUserSetup.GET("Network Facilitator") THEN
        EXIT(lUserSetup."Coordinator Tray Line");
    END;

    PROCEDURE GetNetworkAssistantTrayLine@1100281015() : Code[10];
    VAR
      lUserSetup@1100281000 : Record 91;
    BEGIN
      //IMH15
      IF lUserSetup.GET("Network Assistant") THEN
        EXIT(lUserSetup."Coordinator Tray Line");
    END;

    PROCEDURE GetTerritoryTrayLine@1100281016(pTerritory@1100281003 : Option) : Code[10];
    VAR
      lUserSetup@1100281002 : Record 91;
      lProviderBuffer@1100281000 : TEMPORARY Record 50000;
      lTeam@1100281001 : Record 5083;
    BEGIN
      // IMH73.PC
      lTeam.SETCURRENTKEY("Provider Assignment", "Assignment Priority");
      lTeam.SETRANGE("Provider Assignment", TRUE);
      //<<IMH76.ISAT.EBA
      IF pTerritory <> 0 THEN
        lTeam.SETRANGE(Territory,pTerritory);
      //>>IMH76.ISAT.EBA
      lProviderBuffer := Rec;
      lProviderBuffer.INSERT;

      IF lTeam.FINDSET(FALSE) THEN BEGIN
        REPEAT
          lProviderBuffer.RESET;
          lProviderBuffer.SETVIEW(lTeam.GetProviderFilters(FALSE, 1));
          IF lProviderBuffer.FINDFIRST THEN BEGIN
            EXIT(lTeam.Code);
          END;
        UNTIL lTeam.NEXT = 0;
      END;
      //IMH15
      IF lUserSetup.GET("IMH Territory Code") THEN
        EXIT(lUserSetup."Coordinator Tray Line");
    END;

    PROCEDURE GetCoordinatorPhoneNo@1100281013() : Text[30];
    VAR
      lContact@1100281000 : Record 5050;
      lUser@1100281001 : Record 91;
      lUserSetup@1100281003 : Record 91;
      lEmployee@1100281002 : Record 5200;
    BEGIN
      //IMH15

      IF lUserSetup.GET("Regional Coordinator") THEN BEGIN
        IF lEmployee.GET(lUserSetup."Employee No.") THEN BEGIN
          EXIT(lEmployee."Phone No.");
        END;
      END;
      {
      IF NOT lUser.GET("Regional Coordinator") THEN
        EXIT;
      IF NOT lContact.GET(lUser."Contact No.") THEN
        EXIT;
      EXIT(lContact."Phone No.");
      }
    END;

    PROCEDURE GetNetworkFacilitatorPhoneNo@1100281045() : Text[30];
    VAR
      lUserSetup@1100281003 : Record 91;
      lEmployee@1100281002 : Record 5200;
    BEGIN
      //IMH102.ST
      IF lUserSetup.GET("Network Facilitator") THEN
        IF lEmployee.GET(lUserSetup."Employee No.") THEN
          EXIT(lEmployee."Phone No.");
    END;

    PROCEDURE CheckNextVisitDate@1100281017();
    BEGIN
      //IMH17
      IF "Planified Facilit. Visit Date" = 0D THEN
        EXIT;

      IF ("Facilitator Visit Last Date" <> 0D) AND ("Planified Facilit. Visit Date" < "Facilitator Visit Last Date") THEN
        ERROR(
          STRSUBSTNO(
            Text007,FIELDCAPTION("Planified Facilit. Visit Date"),FIELDCAPTION("Facilitator Visit Last Date")));

      IF "Planified Facilit. Visit Date" < WORKDATE THEN
        ERROR(STRSUBSTNO(Text008,FIELDCAPTION("Planified Facilit. Visit Date")));
    END;

    PROCEDURE GetSalutation@18(SalutationType@1001 : 'Formal,Informal';LanguageCode@1000 : Code[10]) : Text[260];
    VAR
      SalutationFormula@1005 : Record 5069;
      NamePart@1004 : ARRAY [5] OF Text[50];
      SubStr@1003 : Text[30];
      i@1002 : Integer;
    BEGIN
      //IMH22
      IF "Salutation Code" = '' THEN
        EXIT;

      IF NOT SalutationFormula.GET("Salutation Code",LanguageCode,SalutationType) THEN
        ERROR(Text021,LanguageCode,"No.");

      SalutationFormula.TESTFIELD(Salutation);

      CASE SalutationFormula."Name 1" OF
        SalutationFormula."Name 1"::"Company Name":
          NamePart[1] := Name;
      END;

      CASE SalutationFormula."Name 2" OF
        SalutationFormula."Name 2"::"Company Name":
          NamePart[2] := Name;
      END;

      CASE SalutationFormula."Name 3" OF
        SalutationFormula."Name 3"::"Company Name":
          NamePart[3] := Name;
      END;

      CASE SalutationFormula."Name 4" OF
        SalutationFormula."Name 4"::"Company Name":
          NamePart[4] := Name;
      END;

      CASE SalutationFormula."Name 5" OF
        SalutationFormula."Name 5"::"Company Name":
          NamePart[5] := Name;
      END;

      FOR i := 1 TO 5 DO
        IF NamePart[i] = '' THEN BEGIN
          SubStr := '%' + FORMAT(i) + ' ';
          IF STRPOS(SalutationFormula.Salutation,SubStr) > 0 THEN
            SalutationFormula.Salutation :=
              DELSTR(SalutationFormula.Salutation,STRPOS(SalutationFormula.Salutation,SubStr),3);
        END;

      EXIT(STRSUBSTNO(SalutationFormula.Salutation,NamePart[1],NamePart[2],NamePart[3],NamePart[4],NamePart[5]))
    END;

    PROCEDURE DisableProcess@1100281018(pIsDisabled@1100281000 : Boolean);
    BEGIN
      ProcessDisabled := pIsDisabled;
    END;

    PROCEDURE GetSalespersonCode@1100281019(pUserID@1100281000 : Code[20]) rValue : Code[10];
    VAR
      lUserSetup@1100281001 : Record 91;
    BEGIN
      //<<IMH34.isat.PC
      // Retourne le code vendeur du user id
      rValue := '';
      IF lUserSetup.GET(pUserID) THEN BEGIN
        rValue := lUserSetup."Salespers./Purch. Code";
      END;
      //>>IMH34.isat.PC
    END;

    PROCEDURE GetTheoricalVisitNb_@1100281020() rValue : Decimal;
    VAR
      lVisitCategorySetup@1100281000 : Record 50104;
      lLastTurnover@1100281001 : Decimal;
      lLastInterventionNb@1100281002 : Integer;
    BEGIN
      //<<IMH36.isat.PC
      rValue := 0;

      lLastTurnover := GetLastTurnover("No.");
      lLastInterventionNb := GetLastIntervNb();

      lVisitCategorySetup.SETRANGE("Category Code","Visit Category Code");
      //lVisitCategorySetup.SETRANGE("Turnover Amount",lLastTurnover);
      IF lVisitCategorySetup.ISEMPTY THEN BEGIN
      //  lVisitCategorySetup.SETRANGE("Turnover Amount");
      END;
      lVisitCategorySetup.SETRANGE("Mission Number",lLastInterventionNb);
      IF lVisitCategorySetup.ISEMPTY THEN BEGIN
        lVisitCategorySetup.SETRANGE("Mission Number");
      END;
      lVisitCategorySetup.SETRANGE("Building Trade No.","Main Specialization Code");
      IF lVisitCategorySetup.ISEMPTY THEN BEGIN
        lVisitCategorySetup.SETRANGE("Building Trade No.");
      END;
      IF lVisitCategorySetup.ISEMPTY THEN BEGIN
        EXIT;
      END;

      lVisitCategorySetup.FINDFIRST;
      //rValue := lVisitCategorySetup."Visit Number per Year";
      //>>IMH36.isat.PC
    END;

    PROCEDURE GetLastTurnover@1100281021(pProviderNo@1100281000 : Code[20]) rValue : Decimal;
    VAR
      lVendor@1100281001 : Record 23;
      lVendorLedgerEntry@1100281002 : Record 25;
      lStartDate@1100281003 : Date;
      lEndDate@1100281004 : Date;
    BEGIN
      //<<IMH36.isat.PC
      // D‚termine le CA r‚alis‚ par un prestataire sur 12 mois glissant n-1

      rValue := 0;
      lStartDate := CALCDATE('<-1Y>',WORKDATE);
      lEndDate := CALCDATE('<-1D>',WORKDATE);
      lVendorLedgerEntry.SETCURRENTKEY("Vendor No.","Posting Date","Currency Code");
      lVendorLedgerEntry.SETRANGE("Vendor No.",GetVendorNo(pProviderNo));
      lVendorLedgerEntry.SETRANGE("Posting Date",lStartDate,lEndDate);
      lVendorLedgerEntry.CALCSUMS("Purchase (LCY)");
      EXIT(lVendorLedgerEntry."Purchase (LCY)");
      //>>IMH36.isat.PC
    END;

    PROCEDURE GetVendorNo@1100281023(pProviderNo@1100281000 : Code[20]) rValue : Code[20];
    VAR
      lContactBusinessRelation@1100281001 : Record 5054;
    BEGIN
      //<<IMH36.isat.PC
      // Permet d'avoir le nø de fournisseur associ‚ au prestataire

      rValue := '';

      GetMarketingSetup;
      MarketingSetup.TESTFIELD("Bus. Rel. Code for Vendors");
      IF NOT lContactBusinessRelation.GET(pProviderNo,MarketingSetup."Bus. Rel. Code for Vendors") THEN BEGIN
        EXIT;
      END;
      IF lContactBusinessRelation."Link to Table" <> lContactBusinessRelation."Link to Table"::Vendor THEN BEGIN
        EXIT;
      END;

      EXIT(lContactBusinessRelation."No.");
      //>>IMH36.isat.PC
    END;

    PROCEDURE GetDefaultVendorBankAccount@1100281022(pProviderNo@1100281000 : Code[20]) rValue : Code[20];
    VAR
      lVendor@1100281003 : Record 23;
    BEGIN
      //<<IMH36.isat.PC
      // Permet d'avoir le compte bancaire par d‚faut du prestataire

      rValue := '';

      IF lVendor.GET(GetVendorNo(pProviderNo)) THEN BEGIN
        EXIT(lVendor."Default Bank Account Code");
      END;
      //>>IMH36.isat.PC
    END;

    PROCEDURE ShowVendorCard@1100281028(pProviderNo@1100281002 : Code[20]);
    VAR
      lVendor@1100281000 : Record 23;
      lVendorCard@1100281001 : Form 26;
    BEGIN
      //<<IMH36.isat.PC
      // Permet d'avoir la fiche fournisseur du prestataire

      IF lVendor.GET(GetVendorNo(pProviderNo)) THEN BEGIN
        lVendor.FILTERGROUP(2);
        lVendor.SETRECFILTER;
        lVendor.FILTERGROUP(0);
        CLEAR(lVendorCard);
        lVendorCard.SETTABLEVIEW(lVendor);
        lVendorCard.EDITABLE(FALSE);
        lVendorCard.RUNMODAL;
      END;
    END;

    PROCEDURE ShowDefaultVendorBankAccount@1100281025(pProviderNo@1100281002 : Code[20]);
    VAR
      lVendorBankAccount@1100281000 : Record 288;
      lVendorBankAccountCard@1100281001 : Form 425;
    BEGIN
      //<<IMH36.isat.PC
      // Permet d'avoir la fiche du compte bancaire par d‚faut du prestataire

      IF lVendorBankAccount.GET(pProviderNo,GetDefaultVendorBankAccount(pProviderNo)) THEN BEGIN
        lVendorBankAccount.FILTERGROUP(2);
        lVendorBankAccount.SETRECFILTER;
        lVendorBankAccount.FILTERGROUP(0);
        CLEAR(lVendorBankAccountCard);
        lVendorBankAccountCard.SETTABLEVIEW(lVendorBankAccount);
        lVendorBankAccountCard.EDITABLE(FALSE);
        lVendorBankAccountCard.RUNMODAL;
      END;
    END;

    PROCEDURE GetMarketingSetup@1100281024();
    BEGIN
      IF MarketingSetupOK THEN BEGIN
        EXIT;
      END;

      MarketingSetupOK := TRUE;
      MarketingSetup.GET;
    END;

    PROCEDURE GetDescription@1100281026(pFieldNo@1100281000 : Integer;pFieldValue@1100281001 : Code[20]) : Text[80];
    BEGIN
      // IMH40.ISAT.MA
      CASE pFieldNo OF
        FIELDNO("NAF Code") :
        BEGIN
          IF NAFCode.Code <> pFieldValue THEN
            IF NOT NAFCode.GET(DATABASE::Provider,FIELDNO("NAF Code"),pFieldValue) THEN
              EXIT('');
          EXIT(NAFCode.Description);
        END;
        FIELDNO("Network Facilitator") :
        BEGIN
          IF NFSalesperson.Code <> pFieldValue THEN
            IF NOT NFSalesperson.GET(pFieldValue) THEN
              EXIT('');
          EXIT(NFSalesperson.Name);
        END;
        FIELDNO("Regional Coordinator") :
        BEGIN
          IF RCSalesperson.Code <> pFieldValue THEN
            IF NOT RCSalesperson.GET(pFieldValue) THEN
              EXIT('');
          EXIT(RCSalesperson.Name);
        END;
        FIELDNO("Network Assistant") :
        BEGIN
          IF NASalesperson.Code <> pFieldValue THEN
            IF NOT NASalesperson.GET(pFieldValue) THEN
              EXIT('');
          EXIT(NASalesperson.Name);
        END;
        //<<IMH63.isat.PC
        //FIELDNO("IMH Territory Code") :
        FIELDNO("Admin. Territory Code") :
        //>>IMH63.isat.PC
        BEGIN
          IF Territory.Code <> pFieldValue THEN
            IF NOT Territory.GET(pFieldValue) THEN
              EXIT('');
          EXIT(Territory.Name);
        END;
        FIELDNO("Statistics Group No.") :
        BEGIN
        IF StatisticsGroup."No." <> pFieldValue THEN
          IF NOT StatisticsGroup.GET(pFieldValue) THEN
            EXIT('');
          EXIT(StatisticsGroup.Name);
        END;
      END;
    END;

    PROCEDURE CheckMainpower@1100281030();
    VAR
      lProviderSpecialization@1100281000 : Record 50006;
    BEGIN
      lProviderSpecialization.SETRANGE("Provider No.", "No.");
      IF lProviderSpecialization.FINDFIRST THEN
        REPEAT
          IF lProviderSpecialization."Speciality Manpower" > Manpower THEN BEGIN
            lProviderSpecialization.CALCFIELDS("Specialization Description");
            ERROR(Text024, lProviderSpecialization."Specialization Description", lProviderSpecialization."Speciality Manpower");
          END;
        UNTIL lProviderSpecialization.NEXT = 0;
    END;

    PROCEDURE SetSkipConfirmExclusion@1100281027(pSkipConfirmExclusion@1100281000 : Boolean);
    BEGIN
      //IMH43
      SkipConfirmExclusion := pSkipConfirmExclusion;
    END;

    PROCEDURE SetSkipConfirmStatGroup@1100281035(pSkipConfirmStatGroup@1100281000 : Boolean);
    BEGIN
      //IMH58
      SkipConfirmStatGroup := pSkipConfirmStatGroup;
    END;

    PROCEDURE TouchRecord@1100281029(pInsert@1100281000 : Boolean);
    BEGIN
      IF pInsert THEN BEGIN
        "Creation Date" := CURRENTDATETIME;
        "Creation User ID" := USERID;
      END;

      "Last Modification Date" := CURRENTDATETIME;
      "Last Modification User ID" := USERID;
    END;

    PROCEDURE CheckUserPermission@1100281006(pProvider@1100281001 : Record 50000;pError@1100281004 : Boolean) rValue : Boolean;
    VAR
      lProviderSetup@1100281002 : Record 50011;
      lUserSetup@1100281000 : Record 91;
    BEGIN
      rValue := FALSE;

      lProviderSetup.GET;
      IF NOT lProviderSetup."Active the chek process" THEN
        EXIT (TRUE);

      IF NOT lUserSetup.GET(USERID) THEN BEGIN
        EXIT;
      END;

      lProviderSetup.GET;
      IF (pProvider."Process Status No." >= lProviderSetup."Provider Process Start Check") THEN BEGIN
        IF lUserSetup."User ID" <> "Regional Coordinator" THEN BEGIN
          IF NOT pError THEN BEGIN
            MESSAGE(Text031);
          END ELSE BEGIN
            ERROR(Text031);
          END;
        END;
      END;

      rValue := TRUE;
    END;

    PROCEDURE UpdateProviderToConfirmed@1100281031();
    BEGIN
      IF (("Current Interv. Limit Max." <> xRec."Current Interv. Limit Max.") OR
          (Turnover <> xRec.Turnover) OR
          ("Turnover Check" <> xRec."Turnover Check") OR
          ("Main Specialization Check" <> xRec."Main Specialization Check") OR
          ("NAF Code" <> xRec."NAF Code"))
      THEN BEGIN
        "Provider to confirmed" := TRUE;
      END;
    END;

    PROCEDURE SendTask@1100281032(pProviderNo@1100281004 : Code[20]);
    VAR
      lTrayLineMgt@1100281002 : Codeunit 50050;
      lProviderSetup@1100281001 : Record 50011;
      lUserSetup@1100281000 : Record 91;
      lContact@1100281003 : Record 5050;
    BEGIN
      lProviderSetup.GET;
      lUserSetup.GET(lProviderSetup."Manager User Code");
      lContact.GET(pProviderNo);
      lTrayLineMgt.CreateTLFromContact(lContact,lUserSetup."Coordinator Tray Line",lProviderSetup."Emerg. Not Found Prov. Task",FALSE);
    END;

    PROCEDURE CheckPriority@1100281033();
    BEGIN
      //IMH55
      IF (Priority <> Priority::"(1) Normal") THEN
      //   (Priority <> xRec.Priority) THEN
      BEGIN
        IF "Priority End Date" = 0D THEN BEGIN
          MESSAGE(STRSUBSTNO(Text038, FIELDCAPTION("Priority End Date")));
          ERROR('');
        END;
        IF "Priority Start Date" = 0D THEN BEGIN
          MESSAGE(STRSUBSTNO(Text038, FIELDCAPTION("Priority Start Date")));
          ERROR('');
        END;
        //TESTFIELD("Priority End Date");
        //TESTFIELD("Priority Start Date");
      END
    END;

    PROCEDURE CheckFieldMandatory@1100281034();
    VAR
      lTrayLineMgt@1100281000 : Codeunit 50050;
      lContact@1100281001 : Record 5050;
      lContAltAddr@1100281002 : Record 5051;
    BEGIN
      TESTFIELD(Name);
      TESTFIELD("Recruitment Origin");
      TESTFIELD(Address);
      TESTFIELD("Post Code");
      TESTFIELD("Main Specialization Code");
      TESTFIELD("Phone No.");
      TESTFIELD("Correspondence Type");   //IMH01
      IF "Temp. Exclusion" THEN
        TESTFIELD("Temp. Exclusion Reason Code");

      //<<IMH74.ISAT.EBA
      lContAltAddr.RESET;
      lContAltAddr.SETRANGE("Contact No.","No.");
      lContAltAddr.SETRANGE("Geo. Reference Address",TRUE);
      lContAltAddr.FINDFIRST;
      lContAltAddr.TESTFIELD("Geo. Reference Code");
      //>>IMH74.ISAT.EBA

      ProviderMgt.ProviderDuplicate(Rec,FALSE);
    END;

    PROCEDURE CountCurrentInterv@1100281036(pSpecialityFilter@1100281000 : Text[1024]) rValue : Integer;
    VAR
      lServIntervLine@1100281001 : Record 50075;
      lServCode@1100281002 : Record 50040;
    BEGIN
      //IMH65.ST
      IF pSpecialityFilter = '' THEN BEGIN
        CALCFIELDS("Current Service Interv. Nb");
        rValue := "Current Service Interv. Nb";
      END ELSE BEGIN
        lServIntervLine.SETCURRENTKEY("Provider No.");
        lServIntervLine.SETRANGE("Provider No.", "No.");
        lServIntervLine.SETFILTER("Mission Status", '<>%1', lServIntervLine."Mission Status"::Canceled);
        lServIntervLine.SETFILTER(
          "Intervention Status", '%1|%2|%3',   //IMH96
          lServIntervLine."Intervention Status"::" ",
          lServIntervLine."Intervention Status"::InProgress,
          lServIntervLine."Intervention Status"::Suspended);   //IMH96
        //lServIntervLine.SETRANGE(Suspended, FALSE);      //IMH96 d‚sectiv‚
        lServIntervLine.SETRANGE(Closed, FALSE);
        IF lServIntervLine.FINDSET THEN BEGIN
          REPEAT
            lServCode.SETRANGE("Service Type", lServCode."Service Type"::Intervention);
            lServCode.SETRANGE("Service No.", lServIntervLine."Service No.");
            lServCode.SETRANGE("Service Header No.", lServIntervLine."Service Header No.");
            lServCode.SETRANGE("Intervention Line No.", lServIntervLine."Line No.");
            lServCode.SETRANGE("Code Type", lServCode."Code Type"::Speciality);
            lServCode.SETFILTER(Code, pSpecialityFilter);
            IF NOT lServCode.ISEMPTY THEN BEGIN
              rValue += 1;
            END;
          UNTIL lServIntervLine.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE CountServOrdCurrentInterv@1100281044(pServOrderTypeFilter@1100281000 : Text[1024]) rValue : Integer;
    VAR
      lServIntervLine@1100281001 : Record 50075;
    BEGIN
      //IMH92.ZW
      IF pServOrderTypeFilter = '' THEN BEGIN
        CALCFIELDS("Current Service Interv. Nb");
        rValue := "Current Service Interv. Nb";
      END ELSE BEGIN
        lServIntervLine.SETCURRENTKEY("Provider No.");
        lServIntervLine.SETRANGE("Provider No.", "No.");
        lServIntervLine.SETFILTER("Mission Status", '<>%1', lServIntervLine."Mission Status"::Canceled);
        lServIntervLine.SETFILTER(
          "Intervention Status", '%1|%2|%3',     //IMH96
          lServIntervLine."Intervention Status"::" ",
          lServIntervLine."Intervention Status"::InProgress,
          lServIntervLine."Intervention Status"::Suspended);   //IMH96
        //lServIntervLine.SETRANGE(Suspended, FALSE);  //IMH96 d‚sectiv‚
        lServIntervLine.SETRANGE(Closed, FALSE);
        lServIntervLine.SETFILTER("Service Order Type", pServOrderTypeFilter);
        rValue := lServIntervLine.COUNT;
      END;
    END;

    PROCEDURE GetDefaultVendBankAccountField@1100281037(FieldNo@1100281000 : Integer) : Text[80];
    VAR
      lVendor@1100281003 : Record 23;
      lVendorBank@1100281001 : Record 288;
    BEGIN
      //<<IMH36.isat.PC
      // Permet d'avoir le compte bancaire par d‚faut du prestataire

      IF lVendor.GET(GetVendorNo("No.")) THEN BEGIN
        IF lVendorBank.GET(lVendor."No.",lVendor."Default Bank Account Code") THEN
        BEGIN
          CASE FieldNo OF
            3:     EXIT(lVendorBank.Name);
            5:     EXIT(lVendorBank."Name 2");
            6:     EXIT(lVendorBank.Address);
            7:     EXIT(lVendorBank."Address 2");
            8:     EXIT(lVendorBank.City);
            9:     EXIT(lVendorBank."Post Code");
            13:    EXIT(lVendorBank."Bank Branch No.");
            14:    EXIT(lVendorBank."Bank Account No.");
            24:    EXIT(lVendorBank.IBAN);
            25:    EXIT(lVendorBank."SWIFT Code");
            10851: EXIT(lVendorBank."Agency Code");
            10852: EXIT(FORMAT(lVendorBank."RIB Key"));
          END;
        END;
      END;
      EXIT('');
      //>>IMH36.isat.PC
    END;

    PROCEDURE CreateTrayLineOnModify@1100281038(pProviderNo@1100281000 : Code[20];pOldValue@1100281001 : Text[50];pNewValue@1100281002 : Text[50];pDescription@1100281003 : Text[80];pTrayCode@1100281007 : Code[10];pTrayTaskCode@1100281008 : Code[10]);
    VAR
      lTrayLineBuffer@1100281005 : TEMPORARY Record 50048;
      lTrayLineMgt@1100281006 : Codeunit 50050;
    BEGIN
      // IMH69.PC
      // Cr‚ation d'une ativit‚ corbeille

      lTrayLineBuffer.Description := pDescription;
      lTrayLineBuffer."Short Comment" := STRSUBSTNO(Text041,pOldValue,pNewValue);
      lTrayLineBuffer.SETRANGE("Contact No.",pProviderNo);
      lTrayLineBuffer.SETRANGE("Linked To Table",lTrayLineBuffer."Linked To Table"::Contact);
      lTrayLineMgt.CreateTLFromTL(lTrayLineBuffer,pTrayCode,pTrayTaskCode,FALSE);
    END;

    PROCEDURE GetFirstAbilityFirstLine@1100281039(pFieldType@1100281000 : 'SetupType,StartRefCode,Distance,EmergencyDistance') : Text[50];
    VAR
      lAbilityGeoProviderSetup@1100281002 : Record 50033;
      lGeographicalReference@1100281004 : Record 50013;
      lArea@1100281003 : Record 284;
      lTerritory@1100281001 : Record 286;
    BEGIN
      // IMH71.PC
      // Fonction qui retourne la premiŠre ligne de la comp‚tence g‚ographique du prestataire

      lAbilityGeoProviderSetup.SETRANGE("Provider No.","No.");
      IF NOT lAbilityGeoProviderSetup.FINDFIRST THEN BEGIN
        EXIT;
      END;

      CASE pFieldType OF
        pFieldType::SetupType : EXIT(FORMAT(lAbilityGeoProviderSetup."Setup Type"));
        pFieldType::StartRefCode : BEGIN
          CASE lAbilityGeoProviderSetup."Setup Type" OF
            lAbilityGeoProviderSetup."Setup Type"::"City (Distance)" : BEGIN
              IF lGeographicalReference.GET(lAbilityGeoProviderSetup."Start Reference Code") THEN BEGIN
                EXIT(lGeographicalReference."Town Name");
              END;
            END;
            lAbilityGeoProviderSetup."Setup Type"::Area : BEGIN
              IF lArea.GET(lAbilityGeoProviderSetup."Start Reference Code") THEN BEGIN
                EXIT(lArea.Text);
              END;
            END;
            lAbilityGeoProviderSetup."Setup Type"::Territory : BEGIN
              IF lTerritory.GET(lAbilityGeoProviderSetup."Start Reference Code") THEN BEGIN
                EXIT(lTerritory.Name);
              END;
            END;
          END;
        END;
        pFieldType::Distance : EXIT(FORMAT(lAbilityGeoProviderSetup."Distance (km)"));
        pFieldType::EmergencyDistance : EXIT(FORMAT(lAbilityGeoProviderSetup."Emergency Distance (km)"));
      END;
    END;

    PROCEDURE PhoneNoAssistEdit@1100281040(pPhoneNo@1100281000 : Text[30]);
    VAR
      CTIMgt@1100281001 : Codeunit 50138;
    BEGIN
      //<<IMH75.ISAT.EBA
      IF pPhoneNo <> '' THEN
        CTIMgt.MakeCall(pPhoneNo);
      //>>IMH75.ISAT.EBA
    END;

    PROCEDURE ChangeProviderNo@1000000000(pOldProviderNo@1000000000 : Code[20];pNewProviderNo@1000000001 : Code[20]);
    VAR
      lProvider@1000000024 : Record 50000;
      lLinkedProvider@1000000023 : Record 50001;
      lCompleteTask@1000000022 : Record 50004;
      lProviderSpeciality@1000000021 : Record 50006;
      lProviderChangeCalendar@1000000020 : Record 50007;
      lProviderQualification@1000000019 : Record 50008;
      lProvQualLedgerEntry@1000000018 : Record 50009;
      lCampaignProviderSetup@1000000017 : Record 50034;
      lAbilityCampGeoProvider@1000000016 : Record 50015;
      lAbilityGeoProviderSetup@1000000015 : Record 50033;
      lAbilityGeoProvider@1000000014 : Record 50016;
      lSpecializationAgreement@1000000013 : Record 50023;
      lProviderStatusLedgerEntry@1000000011 : Record 50010;
      lProSpecializationLedEntry@1000000010 : Record 50024;
      lProviderBusinessHours@1000000009 : Record 50028;
      lContactProvider@1000000008 : Record 50038;
      lQualityControlHeader@1000000007 : Record 50090;
      lProviderScoringLedgerEntry@1000000006 : Record 50088;
      lNetworkFacilitatorVisit@1000000005 : Record 50105;
      lInterventionLine@1000000003 : Record 50075;
      lProviderPriorityEntry@1000000002 : Record 50014;
      lContact@1000000012 : Record 5050;
      lVendor@1000000025 : Record 23;
      lContactBusinessRelation@1000000027 : Record 5054;
      lTrayLine@1000000026 : Record 50048;
      lInteractLogEntry@1000000028 : Record 5065;
      lContAltAddr@1000000033 : Record 5051;
      lContAltAddrDateRange@1000000032 : Record 5052;
      lPhoneNoList@1000000031 : Record 50055;
      lContactContract@1000000030 : Record 50059;
      lProcessStatusHistory@1000000034 : Record 50047;
      lProcessCurrentAction@1000000029 : Record 50046;
      lAdvCommentLine@1000000035 : Record 50056;
      lProviderAgreement@1000000036 : Record 50012;
      lAgreement@1000000037 : Record 50114;
      lDocAttach@1000000038 : Record 50021;
    BEGIN
      //IMH42 isat.zw
      lProvider.GET(pOldProviderNo);
      lProvider.DELETE(FALSE);
      lProvider."No." := pNewProviderNo;
      lProvider.INSERT(FALSE);

      lInterventionLine.SETCURRENTKEY("Provider No.","Mission Status","Intervention Status",Suspended,Closed);
      lInterventionLine.SETRANGE("Provider No.", pOldProviderNo);
      IF NOT lInterventionLine.ISEMPTY THEN
        lInterventionLine.MODIFYALL("Provider No.", pNewProviderNo);

      // liens prestataires
      lLinkedProvider.SETRANGE("Provider No.",pOldProviderNo);
      IF NOT lLinkedProvider.ISEMPTY THEN BEGIN
        lLinkedProvider.FINDFIRST;
        REPEAT
          lLinkedProvider.DELETE(FALSE);
          lLinkedProvider."Provider No." := pNewProviderNo;
          lLinkedProvider.INSERT(FALSE);
        UNTIL (NOT lLinkedProvider.FINDFIRST);
      END;

      lLinkedProvider.SETRANGE("Linked Provider No.",pOldProviderNo);
      IF NOT lLinkedProvider.ISEMPTY THEN BEGIN
        lLinkedProvider.FINDFIRST;
        REPEAT
          lLinkedProvider.DELETE(FALSE);
          lLinkedProvider."Linked Provider No." := pNewProviderNo;
          lLinkedProvider.INSERT(FALSE);
        UNTIL (NOT lLinkedProvider.FINDFIRST);
      END;

      // Compl‚tude
      lCompleteTask.SETRANGE("Provider No.",pOldProviderNo);
      IF NOT lCompleteTask.ISEMPTY THEN BEGIN
        lCompleteTask.FINDFIRST;
        REPEAT
          lCompleteTask.DELETE(FALSE);
          lCompleteTask."Provider No." := pNewProviderNo;
          lCompleteTask.INSERT(FALSE);
        UNTIL (NOT lCompleteTask.FINDFIRST);
      END;

      // Sp‚cialit‚
      lProviderSpeciality.SETRANGE("Provider No.",pOldProviderNo);
      IF NOT lProviderSpeciality.ISEMPTY THEN BEGIN
        lProviderSpeciality.FINDFIRST;
        REPEAT
          lProviderSpeciality.DELETE(FALSE);
          lProviderSpeciality."Provider No." := pNewProviderNo;
          lProviderSpeciality.INSERT(FALSE);
        UNTIL (NOT lProviderSpeciality.FINDFIRST);
      END;

      // Ecriture sp‚cialit‚ prestataire
      lProSpecializationLedEntry.SETRANGE("Provider No.",pOldProviderNo);
      IF NOT lProSpecializationLedEntry.ISEMPTY THEN BEGIN
        lProSpecializationLedEntry.FINDFIRST;
        REPEAT
          lProSpecializationLedEntry.DELETE(FALSE);
          lProSpecializationLedEntry."Provider No." := pNewProviderNo;
          lProSpecializationLedEntry.INSERT(FALSE);
        UNTIL (NOT lProSpecializationLedEntry.FINDFIRST);
      END;

      // Calendrier
      lProviderChangeCalendar.SETRANGE("Provider No.",pOldProviderNo);
      IF NOT lProviderChangeCalendar.ISEMPTY THEN BEGIN
        lProviderChangeCalendar.FINDFIRST;
        REPEAT
          lProviderChangeCalendar.DELETE(FALSE);
          lProviderChangeCalendar."Provider No." := pNewProviderNo;
          lProviderChangeCalendar.INSERT(FALSE);
        UNTIL (NOT lProviderChangeCalendar.FINDFIRST);
      END;

      // Qualification
      lProviderQualification.SETRANGE("Provider No.",pOldProviderNo);
      IF NOT lProviderQualification.ISEMPTY THEN BEGIN
        lProviderQualification.FINDFIRST;
        REPEAT
          lProviderQualification.DELETE(FALSE);
          lProviderQualification."Provider No." := pNewProviderNo;
          lProviderQualification.INSERT(FALSE);
        UNTIL (NOT lProviderQualification.FINDFIRST);
      END;

      // Ecriture Qualification
      lProvQualLedgerEntry.SETRANGE("Provider No.",pOldProviderNo);
      IF NOT lProvQualLedgerEntry.ISEMPTY THEN BEGIN
        lProvQualLedgerEntry.FINDFIRST;
        REPEAT
          lProvQualLedgerEntry.DELETE(FALSE);
          lProvQualLedgerEntry."Provider No." := pNewProviderNo;
          lProvQualLedgerEntry.INSERT(FALSE);
        UNTIL (NOT lProvQualLedgerEntry.FINDFIRST);
      END;

      // Horaire
      lProviderBusinessHours.SETRANGE("Provider No.",pOldProviderNo);
      IF NOT lProviderBusinessHours.ISEMPTY THEN BEGIN
        lProviderBusinessHours.FINDFIRST;
        REPEAT
          lProviderBusinessHours.DELETE(FALSE);
          lProviderBusinessHours."Provider No." := pNewProviderNo;
          lProviderBusinessHours.INSERT(FALSE);
        UNTIL (NOT lProviderBusinessHours.FINDFIRST);
        //lProviderBusinessHours.DELETEALL(TRUE);
      END;

      {
      // Comp‚tence geographique campagne
      lAbilityCampGeoProvider.SETCURRENTKEY("Provider No.","Specialization Code");
      lAbilityCampGeoProvider.SETRANGE("Provider No.",pOldProviderNo);
      IF NOT lAbilityCampGeoProvider.ISEMPTY THEN BEGIN
        lAbilityCampGeoProvider.FINDFIRST;
        REPEAT
          lAbilityCampGeoProvider.DELETE(FALSE);
          lAbilityCampGeoProvider."Provider No." := pNewProviderNo;
          lAbilityCampGeoProvider.INSERT(FALSE);
        UNTIL (NOT lAbilityCampGeoProvider.FINDFIRST);
      END;
      }

      // Param‚trage comp‚tence geographique campagne
      lCampaignProviderSetup.SETRANGE("No.",pOldProviderNo);
      IF NOT lCampaignProviderSetup.ISEMPTY THEN BEGIN
        lCampaignProviderSetup.FINDFIRST;
        REPEAT
          lCampaignProviderSetup.DELETE(FALSE);
          lCampaignProviderSetup."No." := pNewProviderNo;
          lCampaignProviderSetup.INSERT(FALSE);
        UNTIL (NOT lCampaignProviderSetup.FINDFIRST);
      END;

      // Comp‚tence geographique
      lAbilityGeoProvider.SETCURRENTKEY("Provider No.");
      lAbilityGeoProvider.SETRANGE("Provider No.",pOldProviderNo);
      IF NOT lAbilityGeoProvider.ISEMPTY THEN BEGIN
        lAbilityGeoProvider.FINDFIRST;
        REPEAT
          lAbilityGeoProvider.DELETE(FALSE);
          lAbilityGeoProvider."Provider No." := pNewProviderNo;
          lAbilityGeoProvider.INSERT(FALSE);
        UNTIL (NOT lAbilityGeoProvider.FINDFIRST);
      END;

      // Param‚trage comp‚tence geographique
      lAbilityGeoProviderSetup.SETCURRENTKEY("Provider No.","Start Reference Code","Specialization Code");
      lAbilityGeoProviderSetup.SETRANGE("Provider No.",pOldProviderNo);
      IF NOT lAbilityGeoProviderSetup.ISEMPTY THEN BEGIN
        lAbilityGeoProviderSetup.FINDFIRST;
        REPEAT
          lAbilityGeoProviderSetup.DELETE(FALSE);
          lAbilityGeoProviderSetup."Provider No." := pNewProviderNo;
          lAbilityGeoProviderSetup.INSERT(FALSE);
        UNTIL (NOT lAbilityGeoProviderSetup.FINDFIRST);
      END;

      // Agr‚ement
      lSpecializationAgreement.SETRANGE("Provider No.",pOldProviderNo);
      IF NOT lSpecializationAgreement.ISEMPTY THEN BEGIN
        lSpecializationAgreement.FINDFIRST;
        REPEAT
          lSpecializationAgreement.DELETE(FALSE);
          lSpecializationAgreement."Provider No." := pNewProviderNo;
          lSpecializationAgreement.INSERT(FALSE);
        UNTIL (NOT lSpecializationAgreement.FINDFIRST);
      END;

      // Contact prestataire
      //lContactProvider.SETCURRENTKEY("Provider No.","Specialization Code","Contact No.");
      lContactProvider.SETRANGE("Provider No.",pOldProviderNo);
      IF NOT lContactProvider.ISEMPTY THEN BEGIN
        lContactProvider.FINDFIRST;
        REPEAT
          lContactProvider.DELETE(FALSE);
          lContactProvider."Provider No." := pNewProviderNo;
          lContactProvider.INSERT(FALSE);
        UNTIL (NOT lContactProvider.FINDFIRST);
      END;

      // Modification statut prestataire
      lProviderStatusLedgerEntry.SETRANGE("Provider No.",pOldProviderNo);
      IF NOT lProviderStatusLedgerEntry.ISEMPTY THEN BEGIN
        lProviderStatusLedgerEntry.FINDFIRST;
        REPEAT
          lProviderStatusLedgerEntry.DELETE(FALSE);
          lProviderStatusLedgerEntry."Provider No." := pNewProviderNo;
          lProviderStatusLedgerEntry.INSERT(FALSE);
        UNTIL (NOT lProviderStatusLedgerEntry.FINDFIRST);
      END;

      // Controle qualit‚
      lQualityControlHeader.SETCURRENTKEY("Provider No.");
      lQualityControlHeader.SETRANGE("Provider No.",pOldProviderNo);
      IF NOT lQualityControlHeader.ISEMPTY THEN BEGIN
        lQualityControlHeader.MODIFYALL("Provider No.", pNewProviderNo, FALSE);
      END;

      // Ecriture scoring
      //lProviderScoringLedgerEntry.SETCURRENTKEY("Provider No.","Entry No.");
      lProviderScoringLedgerEntry.SETRANGE("Provider No.",pOldProviderNo);
      IF NOT lProviderScoringLedgerEntry.ISEMPTY THEN BEGIN
        lProviderScoringLedgerEntry.FINDFIRST;
        REPEAT
          lProviderScoringLedgerEntry.DELETE(FALSE);
          lProviderScoringLedgerEntry."Provider No." := pNewProviderNo;
          lProviderScoringLedgerEntry.INSERT(FALSE);
        UNTIL (NOT lProviderScoringLedgerEntry.FINDFIRST);
      END;

      // Visite animation r‚seau
      lNetworkFacilitatorVisit.SETCURRENTKEY("Provider No.");
      lNetworkFacilitatorVisit.SETRANGE("Provider No.",pOldProviderNo);
      IF NOT lNetworkFacilitatorVisit.ISEMPTY THEN BEGIN
        lNetworkFacilitatorVisit.MODIFYALL("Provider No.", pNewProviderNo, FALSE);
      END;

      lProviderPriorityEntry.SETRANGE("Provider No.",pOldProviderNo);
      IF NOT lProviderPriorityEntry.ISEMPTY THEN BEGIN
        lProviderPriorityEntry.FINDFIRST;
        REPEAT
          lProviderPriorityEntry.DELETE(FALSE);
          lProviderPriorityEntry."Provider No." := pNewProviderNo;
          lProviderPriorityEntry.INSERT(FALSE);
        UNTIL (NOT lProviderPriorityEntry.FINDFIRST);
      END;

      lProviderAgreement.SETRANGE("Provider No.",pOldProviderNo);
      IF NOT lProviderAgreement.ISEMPTY THEN BEGIN
        lProviderAgreement.FINDFIRST;
        REPEAT
          lProviderAgreement.DELETE(FALSE);
          lProviderAgreement."Provider No." := pNewProviderNo;
          lProviderAgreement.INSERT(FALSE);
        UNTIL (NOT lProviderAgreement.FINDFIRST);
      END;

      lAgreement.SETRANGE("Provider No.",pOldProviderNo);
      IF NOT lAgreement.ISEMPTY THEN BEGIN
        lAgreement.FINDFIRST;
        REPEAT
          lAgreement.DELETE(FALSE);
          lAgreement."Provider No." := pNewProviderNo;
          lAgreement.INSERT(FALSE);
        UNTIL (NOT lAgreement.FINDFIRST);
      END;

      lContactBusinessRelation.SETCURRENTKEY("Link to Table","No.");
      lContactBusinessRelation.SETRANGE("Link to Table",lContactBusinessRelation."Link to Table"::Provider);
      lContactBusinessRelation.SETRANGE("No.", pOldProviderNo);
      IF NOT lContactBusinessRelation.ISEMPTY THEN BEGIN
        lContactBusinessRelation.MODIFYALL("No.", pNewProviderNo, FALSE);
      END;


      lTrayLine.SETCURRENTKEY("Contact No.",Closed);
      lTrayLine.SETRANGE("Contact No.", pOldProviderNo);
      IF NOT lTrayLine.ISEMPTY THEN BEGIN
        lTrayLine.MODIFYALL("Contact No.", pNewProviderNo, FALSE);
      END;


      lInteractLogEntry.RESET;
      lInteractLogEntry.SETCURRENTKEY("Provider No.");
      lInteractLogEntry.SETRANGE("Provider No.", pOldProviderNo);
      IF NOT lInteractLogEntry.ISEMPTY THEN BEGIN
        lInteractLogEntry.MODIFYALL("Provider No.", pNewProviderNo, FALSE);
      END;

      //Info Contact
      lContact.RESET;
      lContact.SETCURRENTKEY("Company No.");
      lContact.SETRANGE("Company No.",pOldProviderNo);
      IF NOT lContact.ISEMPTY THEN BEGIN
        lContact.MODIFYALL("Company No.", pNewProviderNo, FALSE);
      END;

      lInteractLogEntry.RESET;
      lInteractLogEntry.SETCURRENTKEY("Contact Company No.","Entry No.");
      lInteractLogEntry.SETRANGE("Contact Company No.", pOldProviderNo);
      IF NOT lInteractLogEntry.ISEMPTY THEN BEGIN
        lInteractLogEntry.MODIFYALL("Contact Company No.", pNewProviderNo, FALSE);
      END;

      lInteractLogEntry.RESET;
      lInteractLogEntry.SETCURRENTKEY("Contact No.","Correspondence Type","E-Mail Logged",Subject,Postponed);
      lInteractLogEntry.SETRANGE("Contact No.", pOldProviderNo);
      IF NOT lInteractLogEntry.ISEMPTY THEN BEGIN
        lInteractLogEntry.MODIFYALL("Contact No.", pNewProviderNo, FALSE);
      END;

      lContAltAddr.SETRANGE("Contact No.",pOldProviderNo);
      IF NOT lContAltAddr.ISEMPTY THEN BEGIN
        lContAltAddr.FINDFIRST;
        REPEAT
          lContAltAddr.DELETE(FALSE);
          lContAltAddr."Contact No." := pNewProviderNo;
          lContAltAddr.INSERT(FALSE);
        UNTIL (NOT lContAltAddr.FINDFIRST);
      END;


      lContAltAddrDateRange.SETRANGE("Contact No.",pOldProviderNo);
      IF NOT lContAltAddrDateRange.ISEMPTY THEN BEGIN
        lContAltAddrDateRange.FINDFIRST;
        REPEAT
          lContAltAddrDateRange.DELETE(FALSE);
          lContAltAddrDateRange."Contact No." := pNewProviderNo;
          lContAltAddrDateRange.INSERT(FALSE);
        UNTIL (NOT lContAltAddrDateRange.FINDFIRST);
      END;

      lPhoneNoList.SETCURRENTKEY("Contact No.");
      lPhoneNoList.SETRANGE("Contact No.",pOldProviderNo);
      IF NOT lPhoneNoList.ISEMPTY THEN BEGIN
        lPhoneNoList.FINDFIRST;
        REPEAT
          lPhoneNoList.DELETE(FALSE);
          lPhoneNoList."Contact No." := pNewProviderNo;
          lPhoneNoList.INSERT(FALSE);
        UNTIL (NOT lPhoneNoList.FINDFIRST);
      END;

      lContactContract.SETRANGE("Contact No.",pOldProviderNo);
      IF NOT lContactContract.ISEMPTY THEN BEGIN
        lContactContract.FINDFIRST;
        REPEAT
          lContactContract.DELETE(FALSE);
          lContactContract."Contact No." := pNewProviderNo;
          lContactContract.INSERT(FALSE);
        UNTIL (NOT lContactContract.FINDFIRST);
      END;

      WITH lDocAttach DO BEGIN
        SETRANGE("Referent Table No.", DATABASE::Provider);
        SETRANGE("Key Code 1", pOldProviderNo);
        IF NOT ISEMPTY THEN BEGIN
          FINDFIRST;
          REPEAT
            DELETE(FALSE);
            "Key Code 1" := pNewProviderNo;
            INSERT(FALSE);
          UNTIL (NOT FINDFIRST);
        END;
      END;


      WITH lProcessStatusHistory DO BEGIN
        SETRANGE("Source Table ID", DATABASE::Provider);
        SETRANGE("Source Key Code 1", pOldProviderNo);
        IF NOT ISEMPTY THEN BEGIN
          FINDFIRST;
          REPEAT
            DELETE(FALSE);
            "Source Key Code 1" := pNewProviderNo;
            INSERT(FALSE);
          UNTIL (NOT FINDFIRST);
        END;
      END;

      WITH lProcessCurrentAction DO BEGIN
        SETRANGE("Source Table ID", DATABASE::Provider);
        SETRANGE("Source Key Code 1", pOldProviderNo);
        IF NOT ISEMPTY THEN BEGIN
          FINDFIRST;
          REPEAT
            DELETE(FALSE);
            "Source Key Code 1" := pNewProviderNo;
            INSERT(FALSE);
          UNTIL (NOT FINDFIRST);
        END;
      END;

      WITH lAdvCommentLine DO BEGIN
        SETFILTER("Source Table ID", '%1|%2', DATABASE::Provider, DATABASE::Contact);
        SETRANGE("Source No.", pOldProviderNo);
        IF NOT ISEMPTY THEN BEGIN
          FINDFIRST;
          REPEAT
            DELETE(FALSE);
            "Source No." := pNewProviderNo;
            INSERT(FALSE);
          UNTIL (NOT FINDFIRST);
        END;
      END;

      WITH lDocAttach DO BEGIN
        SETRANGE("Referent Table No.", DATABASE::Contact);
        SETRANGE("Key Code 1", pOldProviderNo);
        IF NOT ISEMPTY THEN BEGIN
          FINDFIRST;
          REPEAT
            DELETE(FALSE);
            "Key Code 1" := pNewProviderNo;
            INSERT(FALSE);
          UNTIL (NOT FINDFIRST);
        END;
      END;


      lContact.RESET;
      IF lContact.GET(pOldProviderNo) THEN BEGIN
        //lContact.delete(false);;
        //lContact."No." := pNewProviderNo;
        //lContact.INSERT(FALSE);
        lContact.RENAME(pNewProviderNo);
      END;

      lVendor.RESET;
      IF lVendor.GET(pOldProviderNo) THEN BEGIN
        //lVendor.delete(false);;
        //lVendor."No." := pNewProviderNo;
        //lVendor.INSERT(FALSE);
        lVendor.RENAME(pNewProviderNo);
      END;

      //lProcMgt.DeleteSourceRec(DATABASE::Provider, "No.", '', 0, 0); //IMH.ST
    END;

    PROCEDURE GetManagerContactNo@1100281041() : Code[20];
    VAR
      lMarketingSetup@1100281002 : Record 5079;
      lContact@1100281001 : Record 5050;
    BEGIN
      //IMH80
      lMarketingSetup.GET;
      IF lMarketingSetup."Manager Job Title" = '' THEN
        EXIT;
      lContact.SETCURRENTKEY("Company No.",Type,Surname,"Service Contact");
      lContact.SETRANGE("Company No.","No.");
      lContact.SETRANGE(Type, lContact.Type::Person);
      lContact.SETRANGE("Service Contact", lContact."Service Contact"::Provider);
      lContact.SETRANGE("Job Title", lMarketingSetup."Manager Job Title");
      IF lContact.FINDFIRST THEN
        EXIT(lContact."No.");
    END;

    PROCEDURE AgreementExists@1100281042(pCorporateNo@1100281001 : Code[20];pCorporateRegionCode@1100281004 : Code[10];pServiceOrderType@1100281000 : Code[10]) : Boolean;
    VAR
      lProviderAgreement@1100281003 : Record 50012;
      lCorporateRegion@1100281002 : Record 50058;
      lAgreementOK@1100281005 : Boolean;
    BEGIN
      //<<IMH81.ISAT.EBA
      lProviderAgreement.RESET;
      lProviderAgreement.SETRANGE("Provider No.","No.");
      //lProviderAgreement.SETFILTER("Corporate No.",'%1|%2', pCorporateNo, '');
      IF pCorporateRegionCode = '' THEN
        lProviderAgreement.SETFILTER("Corporate No.",'%1|%2', pCorporateNo, '')
      ELSE BEGIN
        IF lCorporateRegion.GET(pCorporateNo, pCorporateRegionCode) THEN
          lProviderAgreement.SETFILTER("Corporate No.",'%1|%2|%3', lCorporateRegion."Sell-to Customer No.", pCorporateNo, '')
      END;
      lProviderAgreement.SETFILTER("Service Order Type",'%1|%2', pServiceOrderType, '');
      lAgreementOK := lProviderAgreement.FINDFIRST;

      IF NOT lAgreementOK THEN BEGIN
        lCorporateRegion.RESET;
        lCorporateRegion.SETRANGE("Corporate No.",pCorporateNo);
        IF lCorporateRegion.FINDSET THEN BEGIN
          REPEAT
            lProviderAgreement.RESET;
            lProviderAgreement.SETRANGE("Provider No.","No.");
            lProviderAgreement.SETRANGE("Corporate No.",lCorporateRegion."Sell-to Customer No.");
            lProviderAgreement.SETFILTER("Service Order Type",'%1|%2', pServiceOrderType, '');
            lProviderAgreement.SETRANGE("Corporate Agreement",TRUE);
            IF lProviderAgreement.FINDFIRST THEN
              lAgreementOK := TRUE;

          UNTIL (lCorporateRegion.NEXT = 0) OR (lAgreementOK);
        END;
      END;

      EXIT(lAgreementOK);
      //>>IMH81.ISAT.EBA
    END;

    PROCEDURE GetAgreement@1100281043(pCorporateNo@1100281002 : Code[20];pCorporateRegionCode@1100281000 : Code[10];pServiceOrderType@1100281001 : Code[10]) : Text[30];
    VAR
      lProviderAgreement@1100281004 : Record 50012;
      lCorporateRegion@1100281003 : Record 50058;
      lCorporateRegion2@1100281006 : Record 50058;
      lAgreementCode@1100281005 : Text[30];
      lAgreementOK@1100281007 : Boolean;
    BEGIN
      //<<IMH81.ISAT.EBA
      lAgreementCode := '';

      lCorporateRegion.RESET;
      lCorporateRegion.SETRANGE("Corporate No.",pCorporateNo);
      lCorporateRegion.SETRANGE("Region Code",pCorporateRegionCode);
      IF lCorporateRegion.FINDFIRST THEN BEGIN
        lProviderAgreement.RESET;
        lProviderAgreement.SETRANGE("Provider No.","No.");
        lProviderAgreement.SETRANGE("Corporate No.",lCorporateRegion."Sell-to Customer No.");
        lProviderAgreement.SETFILTER("Service Order Type",'%1|%2','',pServiceOrderType);
        lProviderAgreement.SETRANGE("Exclusion Type",lProviderAgreement."Exclusion Type"::Agree);
        IF lProviderAgreement.FINDFIRST THEN BEGIN
          lAgreementCode := lProviderAgreement."Agreement No.";
        END;

        IF lAgreementCode = '' THEN BEGIN
          lAgreementOK := FALSE;

          lCorporateRegion2.RESET;
          lCorporateRegion2.SETRANGE("Corporate No.",pCorporateNo);
          IF lCorporateRegion2.FINDSET THEN BEGIN
            REPEAT
              lProviderAgreement.RESET;
              lProviderAgreement.SETRANGE("Provider No.","No.");
              lProviderAgreement.SETRANGE("Corporate No.",lCorporateRegion2."Sell-to Customer No.");
              lProviderAgreement.SETFILTER("Service Order Type",'%1|%2','',pServiceOrderType);
              lProviderAgreement.SETRANGE("Exclusion Type",lProviderAgreement."Exclusion Type"::Agree);
              lProviderAgreement.SETRANGE("Corporate Agreement",TRUE);
              IF lProviderAgreement.FINDFIRST THEN BEGIN
                lAgreementOK := TRUE;
                lAgreementCode := lProviderAgreement."Agreement No.";
              END;

            UNTIL (lCorporateRegion2.NEXT = 0) OR (lAgreementOK);
          END;
        END;

        IF lAgreementCode = '' THEN BEGIN
          lAgreementCode := lCorporateRegion."SDR64 Provider No.";
        END;
      END;

      IF lAgreementCode = '' THEN BEGIN
        lProviderAgreement.RESET;
        lProviderAgreement.SETRANGE("Provider No.","No.");
        lProviderAgreement.SETRANGE("Corporate No.",pCorporateNo);
        lProviderAgreement.SETFILTER("Service Order Type",'%1|%2','',pServiceOrderType);
        lProviderAgreement.SETRANGE("Exclusion Type",lProviderAgreement."Exclusion Type"::Agree);
        IF lProviderAgreement.FINDFIRST THEN BEGIN
          lAgreementCode := lProviderAgreement."Agreement No.";
        END;

        IF lAgreementCode = '' THEN BEGIN
          lAgreementCode := "No.";
        END;
      END;

      EXIT(lAgreementCode);
      //>>IMH81.ISAT.EBA
    END;

    PROCEDURE GetMatmutAgreement@1000000003(pServiceHeader@1000000001 : Record 5900;pIntervention@1000000000 : Record 50075) : Code[10];
    VAR
      lProviderAgreement@1000000003 : Record 50012;
      lCorporateRegion@1000000002 : Record 50058;
    BEGIN
      //IMH105
      lProviderAgreement.SETCURRENTKEY("Detail Corporate No.","Detail Corporate Region Code");
      lProviderAgreement.SETRANGE("Detail Corporate No.",pServiceHeader."Corporate No.");
      lProviderAgreement.SETRANGE("Detail Corporate Region Code",pServiceHeader."Corporate Region Code");
      lProviderAgreement.SETRANGE("Provider No.",pIntervention."Provider No.");
      IF lProviderAgreement.ISEMPTY THEN BEGIN
        lProviderAgreement.SETRANGE("Detail Corporate Region Code");
      END;
      IF NOT lProviderAgreement.ISEMPTY THEN BEGIN
        IF lProviderAgreement.FINDFIRST THEN BEGIN
          EXIT(lProviderAgreement."Agreement No.");
        END;
      END;
      DARVASetup.GET;
      DARVASetup.TESTFIELD("Default MATMUT Prov. Agreement");
      EXIT(DARVASetup."Default MATMUT Prov. Agreement");
    END;

    PROCEDURE ChangeContactOnModify@1000000002(pxRec@1000000001 : Record 50000);
    BEGIN
      //IMH91
      IF (Name <> pxRec.Name) OR
         ("Search Name" <> pxRec."Search Name") OR
         ("Name 2" <> pxRec."Name 2") OR
         (Address <> pxRec.Address) OR
         ("Address 2" <> pxRec."Address 2") OR
         (City <> pxRec.City) OR
         ("Post Code" <> pxRec."Post Code") OR
         (County <> pxRec.County) OR
         ("Country/Region Code" <> pxRec."Country/Region Code") OR
         ("Phone No." <> pxRec."Phone No.") OR
         ("Mobile Phone No. 2" <> pxRec."Mobile Phone No. 2") OR
         ("Mobile Phone No." <> pxRec."Mobile Phone No.") OR
         //<<IMH63.isat.PC
         //("IMH Territory Code" <> pxRec."IMH Territory Code") OR
         ("Admin. Territory Code" <> pxRec."Admin. Territory Code") OR
         //>>IMH63.isat.PC
         ("Language Code" <> pxRec."Language Code") OR
         ("Fax No." <> pxRec."Fax No.") OR
         ("Business Phone No." <> pxRec."Business Phone No.") OR
         ("Constraint Phone No." <> pxRec."Constraint Phone No.") OR
         ("VAT Registration No." <> pxRec."VAT Registration No.") OR
         ("E-Mail" <> pxRec."E-Mail") OR
         ("E-Mail 2" <> pxRec."E-Mail 2") OR
         ("Home Page" <> pxRec."Home Page") OR
         ("Correspondence Type" <> pxRec."Correspondence Type") OR
         ("Admin. Contact Notify Customer" <> pxRec."Admin. Contact Notify Customer") OR
         ("Salutation Code" <> pxRec."Salutation Code") OR
         ("Area Code" <> pxRec."Area Code") OR
         ("Registration No." <> pxRec."Registration No.") OR
         ("VAT Registration No." <> pxRec."VAT Registration No.") OR
         //<<IMH45.ISAT.EBA
         ("Synchronization IMA Service" <> pxRec."Synchronization IMA Service")
         //>>IMH45.ISAT.EBA
      THEN BEGIN
        MODIFY;
        ProviderContactUpdate.OnModify(Rec);
        //<<IMH87
        ProviderContactUpdate.OnModifyLinkedContact(Rec);
        //>>IMH87
      END;
    END;

    PROCEDURE SetSkipAutoStep@1100281052(pSkipAutoStep@1100281000 : Boolean);
    BEGIN
      //IMH98
      SkipAutoStep := pSkipAutoStep;
    END;

    PROCEDURE GetOccupationRate@1100281046() OccupationRate : Decimal;
    BEGIN
      //<<IMH110
      CALCFIELDS("Current Service Interv. Nb");
      IF "Current Interv. Limit Max." <> 0 THEN
        OccupationRate := ("Current Service Interv. Nb" / "Current Interv. Limit Max.") * 100
      ELSE
        OccupationRate := 0;
    END;

    PROCEDURE CheckFollow@1000000004();
    BEGIN
      //IMH111.ST
      IF "Follow Up" <> '' THEN BEGIN
        IF "Follow Up Start Date" = 0D THEN BEGIN
          MESSAGE(STRSUBSTNO(Text038, FIELDCAPTION("Follow Up Start Date")));
          ERROR('');
        END;
        IF "Follow Up End Date" = 0D THEN BEGIN
          MESSAGE(STRSUBSTNO(Text038, FIELDCAPTION("Follow Up End Date")));
          ERROR('');
        END;
      END;
      //>>IMH111.ST
    END;

    BEGIN
    {
      /** @r IMH111 @d 20/05/14 @a ISAT.ST @v IMH6.01.P011 @s New Provider Search @h 5131
          @c Dates obligatoires sur le suivi
          @c Synchro des champs suivi pour le DPR (mantis 5132) */
      /** @r IMH110 @d 17/04/14 @a ISAT.ZW @v IMH6.01.P011 @s New Provider Search
          @c Ajout fonction GetOccupationRate + controle date de suivi */
      /** @r IMH109 @d 10/04/14 @a ISAT.PC @v IMH6.01.P011 @s New Provider Search
          @c Add new field 65000, Follow Up
          @c Add new field 65001, Follow Up Start Date
          @c Add new field 65002, Follow Up End Date
          @c Add new field 65010, Follow Up Date Creation
          @c Add new field 65011, Follow Up User Creation
          @c Add new field 65015, Follow Up Origin */
      /** @r IMH108 @d 19/03/14 @a ISAT.ZW @v IMH6.01.5005 @s Reorganisation DPS @h 5005
          @c D‚sactiv‚ fonction emission mail si prestat exclusion */
      /** @r IMH107 @d 20/03/14 @a ISAT.ZW @v IMH6.01.4484 @s gestion statut @h 4484 @c Correction gestion statut */
      /** @r IMH106 @d 11/12/13 @a IMH.DBR @v IMH6.01.3864 @s FlowField sur la table Interaction Template Field @h 3864
          @c Ajout de champ de type FlowField sur la table Interaction Template Field  */
      /** @r IMH105 @d 18/10/13 @a ISAT.ACO @v IMH6.01.348 @s DARVA MATMUT Lot 1 @h 4827
          @c Ajout fonction GetMatmutAgreement */
      /** @r IMH104 @d 24/10/13 @a ISAT.EBA @v IMH6.01.353 @s R‚organisation DRP - Modification Corbeille par d‚faut @h 4832 */
      /** @r IMH103 @d 18/10/13 @a ISAT.EBA @v IMH6.01.353 @s Fonctions utilisateur @h 4819
          @c Modification relation du champ "Network Facilitator"  */
      /** @r IMH102 @d 14/10/13 @a ISAT.ST @v IMH6.01.353 @s Reorganisation region IMH @h 4800 @c Ajout GetNetworkFacilitatorPhoneNo */
      /** @r IMH101 @d 14/10/13 @a ISAT.ST @v IMH6.01.353 @s Reorganisation region IMH @h 4760 @c Renommage CR / AR / R‚gion */
      /** @r IMH100 @d 11/07/13 @a ISAT.ZW @v IMH6.01.351 @s JUILLET @h 3872 @c Modify avant autostep */
      /** @r IMH99 @d 11/07/13 @s ISAT.ACO @v IMH6.01.351 @s JUILLET @h 4224 @c Ajout champs 54041 Send Mis. Without Call Contact*/
      /** @r IMH98 @d 11/06/13 @a ISAT.ZW @v IMH6.01.4484 @s JUIN @h 4484 @c Gestion processus*/
      /** @r IMH97 @d 21/11/12 @a ISAT.ZW @v IMH6.01.4123 @s MEP00001 @h 4123
          @c Correction modification limite d'intervention */
      /** @r IMH96 @d 17/10/12 @a ISAT.ZW @v IMH6.01.226 @s V1.4 @h 2968
          @c Correction counteur intervention en cours */
      /** @r IMH95 @d 17/10/12 @a ISAT.ZW @v IMH6.01.224 @s NEP00006 @h 3702
          @c Ajout SkipAutoStep */
      /** @r IHM94 @d 17/09/12 @a ISAT.PC @v IMH6.01.226 @s Version 1.4 @h 2845 @c Intervention en cours
          @c Changement calcul flowfield champ 54043, "Current Service Interv. Nb" (partie Table filter) de
          @c Provider No.=FIELD(No.),Mission Status=FILTER(<>Canceled),Intervention Status=FILTER(' '|InProgress),Closed=CONST(No)
          @c a
          @c Provider No.=FIELD(No.),Mission Status=FILTER(<>Canceled),Intervention Status=FILTER(<>Closed&<>Cancel),Closed=CONST(No)
      /** @r IHM93 @d 30/08/12 @a ISAT.ZW @v IMH6.01.226 @s version 1.4 @h 3249 @c Modification validation cat‚gorie */
      /** @r IHM92 @d 27/08/12 @a ISAT.ZW @v IMH6.01.226 @s version 1.4 @h 2968 @c Ajout fonction CountServOrdCurrentInterv */
      /** @r IHM91 @d 14/08/12 @a ISAT.ZW @v IMH6.01.223 @s NEP000003 @h 2096 @c Ajout fonction ChangeContactOnModify */
      /** @r IHM90 @d 27/06/12 @a ISAT.PC @v IMH6.01.226 @s version 1.4 @h 2845 @c Intervention en cours */
          @c modifciation du champ 54043, "Current Service Interv. Nb" suppression de la clause Suspended = No */
      /** @r IHM89 @d 12/06/12 @a ISAT.ZW @v IMH6.01.226 @s version 1.4 @h 2968 @c Suppression param‚trages limite type produit */
      /** @r IMH88 @d 22/05/12 @a ISAT.PC @v IMH6.01.226 @s version 1.4 @h 3502
          @c Modification du champ 54301, Emergency afin d'indiquer si le prestataire possŠde une sp‚cialit‚ urgente */
      /** @r IMH87 @d 15/05/12 @a ISAT.LLT @v IMH6.01.223 @s NEP000003 @h 2096 @c Synchro contact li‚ */
      /** @r IMH86 @d 07/05/12 @a ISAT.ST @v IMH6.01.105 @s Contr“le qualit‚
          @c Ajout champs 401 Targeted Control, 402 Targeted Control Start Date
          @c Renommage champ 403 Targeted Controls Min.
          @c D‚sactivation champ 405 Control Count in Period */
      /** @r IMH85 @d 11/04/12 @a ISAT.ZW @v IMH6.01.020 @s Gestion prestataire @h 3213
          @c Ajout champs 54850 Linked Provider Nb.*/
      /** @r IMH84 @d 13/03/12 @a ISAT.ZW @v IMH6.01.018 @s Gestion des visites
          @c Ajout champs 54410-54413 */
      /** @r IMH83 @d 21/02/12 @a ISAT.PC @v IMH6.01.115 @s Visite Animation Reseau @c Fonction GetLastIntervNbByBuild */
      /** @r IMH82 @d 15/02/12 @a ISAT.ZW @v IMH6.01.018 @s Gestion des visites
          @c Ajout champs Last visit time */
      /** @r IMH81 @d 21/12/11 @a ISAT.EBA @v IMH6.01.018 @s Gestion des agr‚ments
          @c Ajout de fonction "AgreementExists"
          @c Ajout de fonction "GetAgreement" */
      /** @r IMH80 @d 19/12/11 @a ISAT.ZW @v IMH6.01.020 @s Gestion prestataire
          @c Ajout Fonction getManagerContactNo */
      /** @r IMH79 @d 14/12/11 @a ISAT.EBA @v IMH6.01.020 @s Gestion prestataire
          @c Ajout contr“le sur les dates exclusion temporaire */
      /** @r IMH78 @d 21/11/11 @a ISAT.ZW @v IMH6.01.120 @s Ajout champ fonction ChangeProviderNo */
      /** @r IMH77 @d 02/11/11 @a ISAT.ST @v IMH6.01.120 @s Ajout champ Default Team Code */
      /** @r IMH76 @d 17/10/11 @a ISAT.EBA @v IMH6.01.120 @s Gestion des corbeilles @h 1542 */
      /** @r IMH75 @d 15/10/11 @a ISAT.EBA @v IMH6.01.129 @s Interface CTI
          @c Ajout fonction "PhoneNoAssistEdit" */
      /** @r IMH74 @d 28/09/10 @a ISAT.EBA @v IMH6.01.022 @s Comp‚tence g‚ographique */
      /** @r IMH73 @d 29/09/11 @a ISAT.PC @v IMH6.01.020 @h 1542 @s Prestataire @c gestion des corbeilles */
      /** @r IMH72 @d 24/09/11 @a ISAT.PC @v IMH6.01.020 @h 591 @s Prestataire
          @c Ajout champ 50001, Status Change Date 1
          @c Ajout champ 50002, Status Change Date 2
          @c Ajout champ 50003, Status Change Date 3
          @c Ajout champ 50004, Status Change Date 4
          @c Ajout champ 50005, Status Change Date 5
          @c Ajout champ 50005, Status Change Date 6 */
      /** @r IMH71 @d 08/09/11 @a ISAT.PC @v IMH6.01.020 @h 1429 @s Prestataire @c Ajout function GetFirstAbilityFirstLine */
      /** @r IMH70 @d 30/08/11 @a ISAT.ZW @v IMH6.01.020 @h 1319 @s Prestataire @c Ajout champ Flowfiled Qualification */
      /** @r IMH69 @d 25/08/11 @a ISAT.PC @v IMH6.01.020 @h 403 @s Prestataire @c Correctif sur les limites d'intervention */
      /** @r IMH68 @d 04/08/11 @a ISAT.NF @v IMH6.01.020 @s Prestataire
          @c Contr“le de la limite d'intervention < somme des limites d'interventions des sp‚cialit‚s */
      /** @r IMH67 @d 28/07/11 @a ISAT.ZW @v IMH6.01.020 @s Prestataire @c Extranet login code 10--> texte 80 + MDP code 10 -->texte 30 */
      /** @r IMH66 @d 25/07/11 @a ISAT.ZW @v IMH6.01.020 @s Prestataire @c Envoie mail exclusion prestataire */
      /** @r IMH65 @d 12/07/11 @a ISAT.ST @v IMH6.01.020 @s Prestataire
          @c Ajout champ 54044 Theorical Interv. Limit Max.
          @c Compteur des interventions avec sp‚cialit‚s */
      /** @r IMH64 @d 07/07/11 @a ISAT.MA @v IMH6.01.020 @s Prestataire
          @h 479 @c Temp Exclusion non ‚ditable + TRUE si date d‚but excl. temp. renseign‚e. */
      /** @r IMH63 @d 06/07/11 @a ISAT.PC @v IMH6.01.020 @s Prestataire
          @c Ajout champ 54521, Admin. Territory Code
          @c Ajout champ 54522, Admin. Territory Description */
      /** @r IMH62 @d 01/07/11 @a ISAT.ZW @v IMH6.01.102 @s Gestion des statuts @c Gestion Journal modification */
      /** @r IHM61 @d 30/06/11 @a ISATZWA @v IMH6.01.177 @s
          @c Creation fournisseur en cr‚ation prestataire
          @c champ "Correspondence Type" obligatoire en cr‚ation*/
      /** @r IHM60 @d 27/06/11 @a ISAT.VA @v IMH6.01.177 @s @c Changelog Managment */
      /** @r IHM59 @d 27/06/11 @a ISAT.ZW @v IMH6.01.177 @s @c gestion groupe statistique */
      /** @r IHM58 @d 23/06/11 @a ISAT.VA @v IMH6.01.177 @s @c Ajout champ Admin. Salutation Code */
      /** @r IHM57 @d 22/06/11 @a ISAT.VA @v IMH6.01.177 @s @c Ajout de la fonction de test des champs obligatoire pour la cr‚ation */
      /** @r IHM56 @d 22/06/11 @a ISAT.VA @v IMH6.01.177 @s @c Fonction de Copier de calandrier */
      /** @r IHM55 @d 22/06/11 @a ISAT.VA @v IMH6.01.177 @s @c Fonction de contr“le des priorit‚s */
      /** @r IHM54 @d 21/06/11 @a ISAT.ZW @v IMH6.01.177 @s @c l'historique des priorit‚s. */
      /** @r IHM53 @d 16/06/11 @a ISAT.ZW @v IMH6.01.177 @s
          @c Le CA doit ˆtre diff‚rent de z‚ro pour que lÉon puisse cocher le champ ® V‚rification CA ¯*/
      /** @r IHM52 @d 14/06/11 @a ISAT.PC @v IMH6.01.198 @s RDD
          @c Ajout champ 54900, To Delete pour g‚rer les prestataires … supprimer suite RDD */
      /** @r IHM51 @d 10/06/11 @a ISAT.ZW @v IMH6.01.177 @s Ajouter champ ® date cr‚ation compte extranet ¯
          @c Renommer le champ ® login extranet ¯ en ® nom utilisateur ¯.*/
      /** @r IHM50 @d 08/06/11 @a ISAT.VA @v IMH6.01.177 @s S‚curit‚ des prestataires */
      /** @r IHM49 @d 08/06/11 @a ISAT.VA @v IMH6.01.110 @s Reprise de % de commission */
      /** @r IHM48 @d 01/06/11 @a ISAT.MA @v IMH6.01.110 @s Finalisation prestataire
          @c si sp‚cialit‚ princ. vide : Pas de confirmation de modif. … la saisie */
      /** @r IHM47 @d 20/05/11 @a ISAT.PC @v IMH6.01.146 @s Facturation @c gestion cr‚ation fournisseur */
      /** @r IHM46 @d 17/05/11 @a ISAT.ZW @v IMH6.01.110 @s Finalisation prestataire
          @c controle sur effectif prestataire */
      /** @r IMH45 @d 16/05/11 @a ISAT.EBA @v IMH6.01.159 @s Comptabilit‚ - IMA Service
          @c Ajout champ 54830 Synchronization IMA Service */
      /** @r IHM44 @d 12/05/11 @a ISAT.ZW @v IMH6.01.004 @s GED
          @c Supprimer Nø corps de metier si specialit‚ vide
          @c Filter group "No.,Name" -- > "No.,Search Name"
          @c Modif Gestion No. siren siret*/
      /** @r IHM43 @d 09/05/10 @a ISAT.ZW @v IMH6.01.004 @s GED @c Confirm exclusion d‚finitive */
      /** @r IMH42 @d 09/05/11 @a ISAT.ZW @v IMH6.01.110 @s Finalisation prestataire
          @c Interdire la suppression si eu des interventions */
      /** @r IMH41 @d 09/05/11 @a ISAT.MA @v IMH6.01.110 @s Finalisation prestataire
          @c RAZ effectif global : RAZ champs effectif valid‚ et date de validation.
          @c Ajout cl‚ "Enable" */
      /** @r IMH40 @d 06/05/11 @a ISAT.MA @v IMH6.01.110 @s Finalisation prestataire
          @c Fonction GetDescription()
          @c Cat‚gorie par d‚faut
          @c Ajout champ "Standard Specializations"
          @c Saisie motif Exclusion D‚efinitive / Black List --> Date exclusion = Date du jour */
          @c si corps de m‚tier princ. vide : Pas de confirmation de modif. … la saisie */
      /** @r IMH39 @d 05/04/11 @a ISAT.ZW @v IMH6.01.115 @s Visite Animation Reseau @c Fonction CreateLastVistDateHistory */
      /** @r IMH38 @d 07/04/11 @a ISAT.EBA @v IMH6.01.110 @s  Finalisation Prestataire
          @c Modification "Caption" des champs: Exclusion, "Exclusion Reason Code", "Exclusion Date", "Exclusion Reason Description" */
      /** @r IMH37 @d 04/04/11 @a ISAT.ZW @v IMH6.01.029 @s groupement statistique
          @c ajout cle Statistics Group No.*/
      /** @r IMH36 @d 24/03/11 @a ISAT.PC @v IMH6.01.020 @s Gestion prestataire
          @c ajout champ 54204, Temp. Exclusion Reason Desc.
          @c ajout champ 54213, Exclusion Reason Description
          @c ajout champ 54503, Black List Reason Desc.
          @c ajout champ 54819, Manual Visit Nb per Year
          @c ajout fonction GetTheoricalVisitNb
          @c ajout fonction GetvendorNo
          @c ajout fonction GetLastTurnover
          @c ajout fonction GetDefaultVendorBankAccount
          @c ajout fonction GetMarketingSetup */
      /** @r IMH06 @d 17/03/11 @a CAP.JC @v IMH6.01.148 @s Comptabilit‚ - Commission
          @c cr‚ation champs 54821, Percentage Commission */
      /** @r IMH34 @d 09/03/11 @a ISAT.PC @v IMH6.01.020 @s Gestion prestataire
          @c ajout champ 54255, Salesp. Net. Facilitator Code
          @c ajout champ 54256, Salesp. Reg. Coordinator Code
          @c ajout champ 54257, Salesp. Network Assistant Code
          @c ajout fonction GetSalespersonCode */
      /** @r IMH33 @d 08/03/11 @a ISAT.PC @v IMH6.01.198 @s RDD @c ajout champ 54610, Occupancy Building */
      /** @r IMH32 @d 08/03/11 @a ISAT.LLT @v IMH6.01.020 @s Gestion prestataire
          @c L'interaction porte sur le contact administratif */
      /** @r IMH31 @d 04/03/11 @a ISAT.PC @v IMH6.01.020 @s Gestion prestataire
          @c Ajout de la notion de Suspension dans le calcul des interventions encours */
      /** @r IMH30 @d 03/03/11 @a ISAT.ZW @v IMH6.01.020 @s Gestion prestataire
          @c Ajout champ Next Visit interlocutor et Last Visit interlocutor */
      /** @r IMH29 @d 02/03/11 @a ISAT.PC @v IMH6.01.020 @s Gestion prestataire @c Ajout check limit intervention */
      /** @r IMH28 @d 24/02/11 @a ISAT.ZW @v IMH6.01.020 @s Gestion prestataire
          @c Ajout champ 54820, Category Code */
      /** @r IMH27 @d 23/02/11 @a ISAT.MA @v IMH6.01.020 @s Gestion prestataire
          @c OnInsert() : Test si process no. ou process status no. est vide avant d'affactation des valeurs par d‚faut *
          @c OnModify() : /
      /** @r IMH26 @d 22/02/11 @a ISAT.PC @v IMH6.01.020 @s Gestion prestataire
          @c Ajout champ 54320, Completnes Last Reminder Date*/
      /** @r IMH25 @d 22/02/11 @a ISAT.NFO @v IMH6.01.020 @s Gestion prestataire
          @c Champs maj date v‚rification effectif quand valid‚ est ok IM*
      /** @r IMH24 @d 22/02/11 @a ISAT.NFO @v IMH6.01.020 @s Gestion prestataire
          @c Champ Date de fin exlusion temp facultatif *
      /** @r IMH23 @d 21/02/11 @a ISAT.PC @v IMH6.01.020 @s Gestion prestataire
          @c Ajout du champ 54250, Network Facilitator Name
          @c Ajout du champ 54251, Regional Coordinator Name
          @c Ajout du champ 54252, Network Assistant Name */
      /** @r IMH22 @d 15/02/2011 @a IMH.ZW @v IMH6.01.001 @s Normalisation des donn‚es @c Ajout fonction GetSalutation */
      /** @r IMH21 @d 15/02/2011 @a IMH.ZW @v IMH6.01.001 @s Normalisation des donn‚es @c Contr“le de la saisie SIRET - SIREN */
      /** @r IMH20 @d 14/02/2011 @a IMH.ZW @v IMH6.01.001 @s Normalisation des donn‚es
          @c preparametrer le code langue par le pays */
      /** @r IMH19 @d 11/02/2011 @a IMH.ZW @v IMH6.01.001 @s Normalisation des donn‚es @c normalisation Email */
      /** @r IHM18 @d 10/02/11 @a ISAT.ZW @v IMH6.01.001 @s Normalisation des donn‚es
          @c Associer les Pays au code postaux - descendre le code pays automatiquement*/
      /** @r IMH17 @d 01/02/11 @a ISAT.LLT @v IMH6.01.020 @s Gestion prestataire
          @c Ajout du champ 54406 Period Between Two Visits
          @c Contr“le sur prochaine date de visite
          @c Mise … blanc de la sp‚cialit‚ principale si modif corps d'‚tat */
      /** @r IMH16 @d 01/02/11 @a ISAT.LLT @v IMH6.01.102 @s Gestion des statuts
          @c Prise en compte du NAS */
      /** @r IMH15 @d 25/01/11 @a ISAT.LLT @v IMH6.01.108 @s Interactions
          @c Renommage champ Correspondance Type
          @c Modif. Caption Process Status Description
          @c Ajout fonction gestion de corbeille */
      /** @r IMH14 @d 24/01/11 @a ISAT.ST @v IMH6.01.102 @s Gestion des statuts
          @c Ajout champ 50523 "User Next Step Available" */
      /** @r IMH13 @d 20/01/11 @a ISAT.NFO @v IMH6.01.106 @s Gestion qualit‚
          @c Ajout champs 402 403 */
      /** @r IMH12 @d 14/01/11 @a ISAT.ST @v IMH6.01.102 @s Gestion des statuts
          @c Ajout fonction AutoStep + appel DeleteSourceRec des process */
      /** @r IMH11 @d 30/12/10 @a ISAT.ST @v IMH6.01.026 @s Gestion statut prestataire
          @c Finalisation de la modif IMH09 */
      /** @r IMH10 @d 22/12/10 @a ISAT.NFO @v IMH6.01.028 @s Gestion des Statut prestataire
          @c ajout champs 54143 modif 54141
          @c renomme nom en raison sociale
          @c ajout table code sur origin recruitment */
      /** @r IMH09 @d 16/12/10 @a ISAT.ZW @v IMH6.01.026 @s Gestion des Statut prestataire
          @c ajout fonction CreateInteraction + champ 54004 Integration status
          @c Process code + process status par d‚faut en cr‚ation */
      /** @r IMH08 @d 07/12/10 @a ISAT.NFO @v IMH6.01.020 @s Gestion prestataire
          @c ajout champ admn contact name */
      /** @r IMH07 @d 06/12/10 @a ISAT.NFO @v IMH6.01.020 @s Gestion prestataire
          @c ajout fonction calcul spe urgente */
      /** @r IMH06 @d 02/12/10 @a ISAT.LLT @v IMH6.01.020 @s Gestion prestataire
          @c si pas corps d'‚tat affichage de toute sp‚cialit‚s
          @c Message confirmation lors du changement de la sp‚cilit‚ principale
          @c Champs "Provider Scoring" et "Yearly Interv. Nb" non editables
          @c Lien extranet = nø prestatataire par d‚faut */
      /** @r IMH05 @d 24/11/10 @a ISAT.NFO @v IMH6.01.020 @s Gestion prestataire @c Ajout calcul limite d'intervention  */
      /** @r IMH04 @d 16/11/10 @a ISAT.LLT @v IMH6.01.020 @s Gestion prestataire @c Corrections captions */
      /** @r IMH03 @d 28/10/10 @a ISAT.MA @v IMH6.01.020 @s Gestion prestataire
          @c Test si l'utilisateur a le droit de modifier l'enregistrement */
      /** @r IMH02 @d 21/10/10 @a ISAT.cc @v IMH6.01.021 @s Compl‚tude
          @c Init de la table Tƒches de compl‚ture si changement cat‚gorie
          @c Ajout du champ 1127 Doc. Reminder Terms */
          @c Ajout du champ 5100 Correspondance type */
      /** @r IMH01 @d 23/09/10 @a ISAT.PC @v IMH6.01.020 @s Fiche prestataire @c Creation
          @c la non traduction du champ 1500, Black List est voulue */
      /** @r IMH00 @d 23/09/10 @a ISAT.PC @v IMH6.01.001 @s Normalisation des donn‚es
          @c Champs 50000 champs contact synchronis‚s
          @c Champs 51000 champs client synchronis‚s
          @c Champs 52000 champs fournisseur synchronis‚s
          @c Champs 53000 champs banque synchronis‚s
          @c Champs 54000 champs prestataire synchronis‚s */
    }
    END.
  }
}