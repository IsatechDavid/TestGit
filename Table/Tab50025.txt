OBJECT Table 50025 Table Filter Group Lines
{
  OBJECT-PROPERTIES
  {
    Date=16/07/12;
    Time=14:56:32;
    Modified=Yes;
    Version List=IMH6.01;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Table Filter Group Lines;
               FRA=Lignes groupe filtre table];
    LookupFormID=Form50030;
    DrillDownFormID=Form50030;
  }
  FIELDS
  {
    { 1   ;   ;Table Filter Group Code;Code10     ;TableRelation=Code.Code WHERE (Table ID=CONST(50025),
                                                                                  Field ID=CONST(1));
                                                   CaptionML=[ENU=Table Filter Group Code;
                                                              FRA=Code groupe filtre table] }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              FRA=Nø ligne] }
    { 8   ;   ;Enabled             ;Boolean       ;CaptionML=[ENU=Enabled;
                                                              FRA=Actif] }
    { 9   ;   ;Description         ;Text100       ;CaptionML=[ENU=Description;
                                                              FRA=Designation] }
    { 10  ;   ;Source Table        ;Integer       ;TableRelation=AllObjWithCaption."Object ID" WHERE (Object Type=CONST(Table));
                                                   CaptionML=[ENU=Source Table No.;
                                                              FRA=Nø table origine] }
    { 11  ;   ;Source Table Filter 1;Text250      ;CaptionML=[ENU=Source Table View 1;
                                                              FRA=Filtre table origine 1] }
    { 12  ;   ;Source Table Filter 2;Text250      ;CaptionML=[ENU=Source Table View 2;
                                                              FRA=Filtre table origine 2] }
    { 13  ;   ;Source Table Filter 3;Text250      ;CaptionML=[ENU=Source Table View 3;
                                                              FRA=Filtre table origine 3] }
    { 14  ;   ;Source Table Filter 4;Text250      ;CaptionML=[ENU=Source Table View 4;
                                                              FRA=Filtre table origine 4] }
    { 15  ;   ;Source Table Flowfields;Boolean    ;CaptionML=[ENU=Source Table Flowfields;
                                                              FRA=Flowfields sur table origine] }
    { 20  ;   ;Second Table        ;Integer       ;TableRelation=AllObjWithCaption."Object ID" WHERE (Object Type=CONST(Table));
                                                   CaptionML=[ENU=Source Table No.;
                                                              FRA=Nø table origine] }
    { 21  ;   ;Second Table Filter 1;Text250      ;CaptionML=[ENU=Second Table View 1;
                                                              FRA=Filtre table secondaire 1] }
    { 22  ;   ;Second Table Filter 2;Text250      ;CaptionML=[ENU=Second Table View 2;
                                                              FRA=Filtre table secondaire 2] }
    { 23  ;   ;Second Table Filter 3;Text250      ;CaptionML=[ENU=Second Table View 3;
                                                              FRA=Filtre table secondaire 3] }
    { 24  ;   ;Second Table Filter 4;Text250      ;CaptionML=[ENU=Second Table View 4;
                                                              FRA=Filtre table secondaire 4] }
    { 25  ;   ;Second Table Flowfields;Boolean    ;CaptionML=[ENU=Second Table Flowfields;
                                                              FRA=Flowfields sur table secondaire] }
  }
  KEYS
  {
    {    ;Table Filter Group Code,Line No.        ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1100281001 : TextConst 'ENU=You can''t use table nø%1.;FRA=Vous ne pouvez pas utiliser la table %1.';
      Text002@1100281000 : TextConst 'ENU=Table filter is too long. Please limit.;FRA=Le filtre que vous utiliser est trop long. Veuillez le limiter.';

    PROCEDURE GetRecFilters@1100281003(pWithName@1100281000 : Boolean) ReturnValue : Text[1024];
    VAR
      lRecordRef@1100281001 : RecordRef;
      lText1@1100281002 : Text[1024];
      lText2@1100281004 : Text[1024];
      lPosition@1100281003 : Integer;
    BEGIN
      IF ("Source Table Filter 1" = '') THEN
        EXIT('');
      ReturnValue := "Source Table Filter 1" + "Source Table Filter 2" + "Source Table Filter 3" + "Source Table Filter 4";
      IF pWithName THEN
        ReturnValue := TransformFilterToCaption("Source Table", ReturnValue); //IMH06.ST
    END;

    LOCAL PROCEDURE SaveFilter@1100281007(pMasterTable@1100281002 : Boolean;pText@1100281000 : Text[1024]);
    VAR
      lRecRef@1100281001 : RecordRef;
    BEGIN
      "Source Table Filter 1" := GetChars(pText, MAXSTRLEN("Source Table Filter 1"));
      "Source Table Filter 2" := GetChars(pText, MAXSTRLEN("Source Table Filter 2"));
      "Source Table Filter 3" := GetChars(pText, MAXSTRLEN("Source Table Filter 3"));
      "Source Table Filter 4" := GetChars(pText, MAXSTRLEN("Source Table Filter 4"));
      IF pText <> '' THEN
        ERROR(Text002);
    END;

    LOCAL PROCEDURE GetChars@1100281008(VAR pText@1100281000 : Text[1024];pStrLen@1100281001 : Integer) ReturnValue : Text[1024];
    BEGIN
      IF pText = '' THEN
        EXIT;
      IF STRLEN(pText) <= pStrLen THEN BEGIN
        ReturnValue := COPYSTR(pText, 1, pStrLen);
        pText := '';
      END
      ELSE BEGIN
        ReturnValue := COPYSTR(pText, 1, pStrLen);
        pText := COPYSTR(pText, pStrLen + 1, STRLEN(pText));
      END;
    END;

    PROCEDURE TransformFilterToCaption@1100281018(pTableNo@1100281001 : Integer;VAR pText@1100281000 : Text[1024]) ReturnValue : Text[1024];
    VAR
      lRecordRef@1100281005 : RecordRef;
      lText1@1100281004 : Text[1024];
      lText2@1100281003 : Text[1024];
      lPosition@1100281002 : Integer;
    BEGIN
      lRecordRef.OPEN(pTableNo, TRUE);
      lRecordRef.SETVIEW(pText);
      lText1 := COPYSTR(lRecordRef.GETVIEW(TRUE), 1 , MAXSTRLEN(lText1));
      lText2 := COPYSTR(lRecordRef.GETVIEW(TRUE), MAXSTRLEN(lText1), MAXSTRLEN(lText2));
      lPosition := STRPOS(lText1, 'SORTING(');
      IF lPosition = 1 THEN BEGIN // d‚bute par sorting
        lPosition := STRPOS(lText1, ') WHERE(');
        IF lPosition <> 0 THEN
          lText1 := COPYSTR(lText1, lPosition+2, MAXSTRLEN(lText1)); // Suppression du sorting jusqu'au where
      END;
      lPosition := STRPOS(lText1, 'WHERE(');
      IF lPosition = 1 THEN BEGIN // d‚bute par where
        lText1 := COPYSTR(lText1, lPosition+6, MAXSTRLEN(lText1)); // Suppression du where
        // Suppression de la derniŠre parenthŠse
        IF lText2 <> '' THEN BEGIN
          IF lText2[STRLEN(lText2)] = ')' THEN
            lText2[STRLEN(lText2)] := ' ';
        END
        ELSE BEGIN
          IF lText1[STRLEN(lText1)] = ')' THEN
            lText1[STRLEN(lText1)] := ' ';
        END;
      END;
      IF STRLEN(lText1 + lText2) > MAXSTRLEN(ReturnValue) THEN
        ReturnValue := COPYSTR(lText1 + lText2, 1, MAXSTRLEN(ReturnValue)-5) + '[...]'
      ELSE
        ReturnValue := lText1 + lText2;
    END;

    LOCAL PROCEDURE IsSelectable@1100281001(pObject@1100281000 : Record 2000000001) : Boolean;
    VAR
      lTempObject@1100281001 : TEMPORARY Record 2000000001;
    BEGIN
      IF pObject.Type <> pObject.Type::Table THEN
        EXIT;
      lTempObject := pObject;
      lTempObject.INSERT;
      lTempObject.SETFILTER(ID, GetSelectableTable(FALSE));
      EXIT(NOT lTempObject.ISEMPTY);
    END;

    LOCAL PROCEDURE GetSelectableTable@1100281000(pSecondTable@1100281000 : Boolean) : Text[1024];
    BEGIN
      EXIT('5065|50021');
    END;

    PROCEDURE PreviewRec@1100281002(pForUpdate@1100281002 : Boolean);
    VAR
      lInterLogEntryList@1100281013 : Form 5076;
      lInterLogEntry@1100281014 : Record 5065;
      lDocAttachList@1100281003 : Form 50015;
      lDocAttach@1100281000 : Record 50021;
      lViewFilter@1100281001 : Text[1024];
    BEGIN
      lViewFilter := GetRecFilters(FALSE);

      CASE "Source Table" OF
        DATABASE::"Interaction Log Entry" : BEGIN
          lInterLogEntry.SETVIEW(lViewFilter);
          lInterLogEntryList.SETTABLEVIEW(lInterLogEntry);
          IF pForUpdate THEN BEGIN
            lInterLogEntryList.RUNMODAL;
            lInterLogEntryList.CopyRec(lInterLogEntry);
            SaveFilter(TRUE, lInterLogEntry.GETVIEW(FALSE));
          END
          ELSE
            lInterLogEntryList.RUN;
        END;
        DATABASE::"Document Attachment" : BEGIN
          lDocAttach.SETVIEW(lViewFilter);
          lDocAttachList.SETTABLEVIEW(lDocAttach);
          IF pForUpdate THEN BEGIN
            lDocAttachList.RUNMODAL;
            lDocAttachList.CopyRec(lDocAttach);
            SaveFilter(TRUE, lDocAttach.GETVIEW(FALSE));
          END
          ELSE
            lDocAttachList.RUN;
        END;
      END;
    END;

    PROCEDURE GetRecFilters2@1000000000(pWithName@1100281000 : Boolean) ReturnValue : Text[1024];
    VAR
      lRecordRef@1100281001 : RecordRef;
      lText1@1100281002 : Text[1024];
      lText2@1100281004 : Text[1024];
      lPosition@1100281003 : Integer;
    BEGIN
      IF ("Second Table Filter 1" = '') THEN
        EXIT('');
      ReturnValue := "Second Table Filter 1" + "Second Table Filter 2" + "Second Table Filter 3" + "Second Table Filter 4";
      IF pWithName THEN
        ReturnValue := TransformFilterToCaption("Second Table", ReturnValue);
    END;

    PROCEDURE TestRecInFilters@1000000001(VAR pRecRef@1100281000 : RecordRef;pTextFilter@1100281001 : Text[1024];pCheckFlowFields@1100281005 : Boolean) : Boolean;
    VAR
      lInt@1100281004 : Integer;
      lFieldRef@1100281003 : FieldRef;
      lField@1100281002 : Record 2000000041;
    BEGIN
      WITH pRecRef DO BEGIN
        RESET;
        SETVIEW(pTextFilter);
        IF pCheckFlowFields THEN BEGIN
          // Calcul des flowfields
          FOR lInt := 1 TO FIELDCOUNT DO BEGIN
            lFieldRef := FIELDINDEX(lInt);
            IF lFieldRef.GETFILTER <> '' THEN BEGIN
              lField.GET(NUMBER, lFieldRef.NUMBER);
              IF lField.Class = lField.Class::FlowField THEN
                lFieldRef.CALCFIELD;
            END;
          END;
        END;
        EXIT(NOT ISEMPTY);
      END;
    END;

    BEGIN
    {
      /** @r IMH01 @d 13/04/12 @a ISAT.ST @v IMH6.01.105 @s Control Qualit‚
          @c gestion des filtres sur les documents … pr‚senter … l'extranet */
      /** @r IMH00 @d 01/04/11 @a ISAT.ST @v @s Sert de vues avec filtres */
    }
    END.
  }
}