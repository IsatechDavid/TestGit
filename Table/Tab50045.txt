OBJECT Table 50045 Process Requirement
{
  OBJECT-PROPERTIES
  {
    Date=03/11/11;
    Time=09:10:59;
    Modified=Yes;
    Version List=IMH6.01;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               ProcessEditable(TRUE);
               TouchRecord(TRUE);
             END;

    OnModify=BEGIN
               ProcessEditable(TRUE);
               TouchRecord(FALSE);
             END;

    OnDelete=BEGIN
               ProcessEditable(TRUE);
             END;

    OnRename=BEGIN
               ProcessEditable(TRUE);
               TouchRecord(FALSE);
             END;

    CaptionML=[ENU=Process Requirement;
               FRA=Condition processus];
    LookupFormID=Form50154;
    DrillDownFormID=Form50154;
  }
  FIELDS
  {
    { 1   ;   ;Process Code        ;Code10        ;TableRelation=Process.Code;
                                                   OnValidate=VAR
                                                                lProcessType@1100281000 : Record 50041;
                                                              BEGIN
                                                                lProcessType.GET("Process Code");
                                                                "Source Table" := lProcessType."Source Table No.";
                                                              END;

                                                   CaptionML=[ENU=Process Code;
                                                              FRA=Code processus];
                                                   NotBlank=Yes }
    { 2   ;   ;Source Requirement  ;Option        ;CaptionML=[ENU=Source Requirement;
                                                              FRA=Source condition];
                                                   OptionCaptionML=[ENU=Step,Action;
                                                                    FRA=Etape,Action];
                                                   OptionString=Step,Action }
    { 3   ;   ;Source Line No.     ;Integer       ;TableRelation=IF (Source Requirement=CONST(Step)) "Process Step"."Line No." WHERE (Process Code=FIELD(Process Code))
                                                                 ELSE IF (Source Requirement=CONST(Action)) "Process Status"."Status No." WHERE (Process Code=FIELD(Process Code));
                                                   CaptionML=[ENU=Source Line No.;
                                                              FRA=Nø ligne origine];
                                                   NotBlank=Yes }
    { 4   ;   ;Source Action Line No.;Integer     ;TableRelation=IF (Source Requirement=CONST(Action)) "Process Action"."Line No." WHERE (Process Code=FIELD(Process Code));
                                                   OnValidate=BEGIN
                                                                IF "Source Requirement" <> "Source Requirement"::Action THEN
                                                                  TESTFIELD("Source Action Line No.", 0);
                                                              END;

                                                   CaptionML=[ENU=Source Action Line No.;
                                                              FRA=Nø ligne action origine];
                                                   BlankZero=Yes }
    { 5   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              FRA=Nø ligne];
                                                   NotBlank=Yes }
    { 8   ;   ;Priority            ;Integer       ;OnValidate=VAR
                                                                lProcessStepsRequirement@1100281000 : Record 50045;
                                                              BEGIN
                                                                lProcessStepsRequirement.SETCURRENTKEY("Process Code","Source Requirement","Source Line No.","Source Action Line No.",Priority);
                                                                lProcessStepsRequirement.SETRANGE("Process Code", "Process Code");
                                                                lProcessStepsRequirement.SETRANGE("Source Requirement", "Source Requirement");
                                                                lProcessStepsRequirement.SETRANGE("Source Line No.", "Source Line No.");
                                                                lProcessStepsRequirement.SETRANGE("Source Action Line No.", "Source Action Line No.");
                                                                lProcessStepsRequirement.SETRANGE(Priority, Priority);
                                                                lProcessStepsRequirement.SETFILTER("Line No.", '<>%1', "Line No.");
                                                                IF lProcessStepsRequirement.FINDFIRST THEN
                                                                  "Logical Operator" := lProcessStepsRequirement."Logical Operator";
                                                              END;

                                                   CaptionML=[ENU=Priority;
                                                              FRA=Priorit‚] }
    { 9   ;   ;Process Source Table No.;Integer   ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Process."Source Table No." WHERE (Code=FIELD(Process Code)));
                                                   CaptionML=[ENU=Process Source Table No.;
                                                              FRA=Nø table source process];
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 10  ;   ;Previous Status     ;Integer       ;TableRelation="Process Status"."Status No." WHERE (Process Code=FIELD(Process Code));
                                                   CaptionML=[ENU=Previous Status;
                                                              FRA=Statut pr‚c‚dent] }
    { 11  ;   ;Next Process Code   ;Code10        ;TableRelation=Process.Code;
                                                   CaptionML=[ENU=Next Process Code;
                                                              FRA=Code processus suivant] }
    { 12  ;   ;Next Status         ;Integer       ;TableRelation="Process Status"."Status No." WHERE (Process Code=FIELD(Next Process Code));
                                                   CaptionML=[ENU=Next Status;
                                                              FRA=Statut suivant] }
    { 19  ;   ;Source Table        ;Integer       ;TableRelation=AllObj."Object ID" WHERE (Object Type=CONST(Table));
                                                   CaptionML=[ENU=Source Table;
                                                              FRA=Table de source];
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 20  ;   ;Source Table Filter 1;Text250      ;CaptionML=[ENU=Source Table Filter 1;
                                                              FRA=Filtre service table 1] }
    { 21  ;   ;Source Table Filter 2;Text250      ;CaptionML=[ENU=Source Table Filter 2;
                                                              FRA=Filtre service table 2] }
    { 22  ;   ;Source Table Filter 3;Text250      ;CaptionML=[ENU=Source Table Filter 3;
                                                              FRA=Filtre service table 3] }
    { 23  ;   ;Source Table Filter 4;Text250      ;CaptionML=[ENU=Source Table Filter 4;
                                                              FRA=Filtre service table 4] }
    { 24  ;   ;Flowfield Tablefilter;Boolean      ;CaptionML=[ENU=Table Filter With Flowfield;
                                                              FRA=Filtre table avec flowfield] }
    { 25  ;   ;Test Function No.   ;Integer       ;TableRelation="Process Function"."Function No." WHERE (Source Table No.=FIELD(Source Table),
                                                                                                          Function Type=CONST(TestFunction));
                                                   OnValidate=BEGIN
                                                                IF CurrFieldNo = FIELDNO("Test Function No.") THEN
                                                                  CALCFIELDS("Test Function Description");
                                                              END;

                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Test Function No.;
                                                              FRA=Nø fonction test];
                                                   BlankZero=Yes }
    { 26  ;   ;Test Function Description;Text50   ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Process Function"."Function Description" WHERE (Source Table No.=FIELD(Source Table),
                                                                                                                       Function No.=FIELD(Test Function No.),
                                                                                                                       Function Type=CONST(TestFunction)));
                                                   CaptionML=[ENU=Test Function Description;
                                                              FRA=Fonction test];
                                                   Editable=No }
    { 27  ;   ;Test Function Parameters;Text250   ;CaptionML=[ENU=Test Function Parameters;
                                                              FRA=ParamŠtres fonction test] }
    { 30  ;   ;Requirement Return  ;Option        ;CaptionML=[ENU=Requirement Return;
                                                              FRA=Retour condition];
                                                   OptionCaptionML=[ENU=Accepted,Refused;
                                                                    FRA=Accept‚,Refus‚];
                                                   OptionString=Accepted,Refused }
    { 31  ;   ;Logical Operator    ;Option        ;OnValidate=BEGIN
                                                                SetLogicalOperator;
                                                              END;

                                                   CaptionML=[ENU=Logical Operator;
                                                              FRA=Op‚rateur logique];
                                                   OptionCaptionML=[ENU=Or,And;
                                                                    FRA=Ou,Et];
                                                   OptionString=Or,And }
    { 40  ;   ;Second Source Table ;Option        ;OnValidate=BEGIN
                                                                CASE "Second Source Table" OF
                                                                  "Second Source Table"::" " :
                                                                    IF "Second Source Table No." <> 0 THEN
                                                                      VALIDATE("Second Source Table No.", 0);
                                                                  "Second Source Table"::ServiceDevice :
                                                                    IF "Second Source Table No." <> DATABASE::"Service Header Device" THEN
                                                                      VALIDATE("Second Source Table No.", DATABASE::"Service Header Device");
                                                                  "Second Source Table"::ServiceClaim :
                                                                    IF "Second Source Table No." <> DATABASE::"Service Header Claims" THEN
                                                                      VALIDATE("Second Source Table No.", DATABASE::"Service Header Claims");
                                                                  ELSE
                                                                    FIELDERROR("Second Source Table");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Second Source Table;
                                                              FRA=Table annexe];
                                                   OptionCaptionML=[ENU=" ,Service Device,Service Claim";
                                                                    FRA=" ,Appareil,R‚clamation"];
                                                   OptionString=[ ,ServiceDevice,ServiceClaim] }
    { 41  ;   ;Second Source Table No.;Integer    ;TableRelation=AllObj."Object ID" WHERE (Object Type=CONST(Table));
                                                   OnValidate=BEGIN
                                                                IF "Second Source Table No." = 0 THEN BEGIN
                                                                  "Second Source Table Filter 1" := '';
                                                                  "Second Source Table Filter 2" := '';
                                                                  "Second Source Table Filter 3" := '';
                                                                  "Second Source Table Filter 4" := '';
                                                                  EXIT;
                                                                END;

                                                                CASE "Second Source Table No." OF
                                                                  DATABASE::"Service Header Device", DATABASE::"Service Header Claims" : TESTFIELD("Source Table", DATABASE::"Service Header");
                                                                  ELSE FIELDERROR("Second Source Table No.");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Second Source Table No.;
                                                              FRA=Nø table annexe];
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 42  ;   ;Second Source Table Filter 1;Text250;
                                                   CaptionML=[ENU=Second Source Table Filter 1;
                                                              FRA=Filtre service table secondaire 1] }
    { 43  ;   ;Second Source Table Filter 2;Text250;
                                                   CaptionML=[ENU=Second Source Table Filter 2;
                                                              FRA=Filtre service table secondaire 2] }
    { 44  ;   ;Second Source Table Filter 3;Text250;
                                                   CaptionML=[ENU=Second Source Table Filter 3;
                                                              FRA=Filtre service table secondaire 3] }
    { 45  ;   ;Second Source Table Filter 4;Text250;
                                                   CaptionML=[ENU=Second Source Table Filter 4;
                                                              FRA=Filtre service table secondaire 4] }
    { 46  ;   ;Flowfield Second Tablefilter;Boolean;
                                                   CaptionML=[ENU=Second Table Filter With Flowfields;
                                                              FRA=Filtre table secondaire avec flowfield] }
    { 50  ;   ;User Error Return   ;Text250       ;CaptionML=[ENU=User Error Return;
                                                              FRA=Message utilisateur] }
    { 50500;  ;Creation Date       ;DateTime      ;CaptionML=[ENU=Creation Date;
                                                              FRA=Date de cr‚ation];
                                                   Editable=No }
    { 50501;  ;Creation User ID    ;Text30        ;TableRelation="User Setup"."User ID";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Creation User ID;
                                                              FRA=Utilisateur cr‚ation];
                                                   Editable=No }
    { 50502;  ;Last Modification Date;DateTime    ;CaptionML=[ENU=Last Modification Date;
                                                              FRA=Date derniŠre modification];
                                                   Editable=No }
    { 50503;  ;Last Modification User ID;Text30   ;TableRelation="User Setup"."User ID";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Last Modification User ID;
                                                              FRA=Utilisateur derniŠre modification];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Process Code,Source Requirement,Source Line No.,Source Action Line No.,Line No.;
                                                   Clustered=Yes }
    {    ;Process Code,Source Requirement,Source Line No.,Source Action Line No.,Priority }
    {    ;Source Table,Test Function No.           }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1100281001 : TextConst 'ENU=You can''t use table nø%1.;FRA=Vous ne pouvez pas utiliser la table %1.';
      Text002@1100281000 : TextConst 'ENU=Table filter is too long. Please limit.;FRA=Le filtre que vous utiliser est trop long. Veuillez le limiter.';
      Text003@1100281002 : TextConst 'ENU=You can''t process next step because requirements are not met.;FRA=Vous ne pouvez pas passer … l''‚tape suivante car les conditions ne sont pas remplies.';
      SkipStatusCheck@1100281003 : Boolean;

    PROCEDURE TouchRecord@1100481000(pInsert@1100281000 : Boolean);
    BEGIN
      IF pInsert THEN BEGIN
        "Creation Date" := CURRENTDATETIME;
        "Creation User ID" := USERID;
      END;
      "Last Modification Date" := CURRENTDATETIME;
      "Last Modification User ID" := USERID;
    END;

    PROCEDURE SetSkipStatusCheck@1100281011(pSkipStatusCheck@1100281000 : Boolean);
    BEGIN
      SkipStatusCheck := pSkipStatusCheck;
    END;

    PROCEDURE GetRecFilters@1100281003(pWithName@1100281000 : Boolean) ReturnValue : Text[1024];
    VAR
      lRecordRef@1100281001 : RecordRef;
      lText1@1100281002 : Text[1024];
      lText2@1100281004 : Text[1024];
      lPosition@1100281003 : Integer;
    BEGIN
      IF ("Source Table Filter 1" = '') THEN
        EXIT('');
      ReturnValue := "Source Table Filter 1" + "Source Table Filter 2" + "Source Table Filter 3" + "Source Table Filter 4";
      IF pWithName THEN
        ReturnValue := TransformFilterToCaption("Source Table", ReturnValue); //IMH06.ST
    END;

    LOCAL PROCEDURE SaveFilter@1100281007(pMasterTable@1100281002 : Boolean;pText@1100281000 : Text[1024]);
    VAR
      lRecRef@1100281001 : RecordRef;
    BEGIN
      IF pMasterTable THEN BEGIN //IMH06.ST
        "Flowfield Tablefilter" := FilterWithFlowfields("Source Table", pText);
        "Source Table Filter 1" := GetChars(pText, MAXSTRLEN("Source Table Filter 1"));
        "Source Table Filter 2" := GetChars(pText, MAXSTRLEN("Source Table Filter 2"));
        "Source Table Filter 3" := GetChars(pText, MAXSTRLEN("Source Table Filter 3"));
        "Source Table Filter 4" := GetChars(pText, MAXSTRLEN("Source Table Filter 4"));
      //<<IMH06.ST
      END
      ELSE BEGIN
        "Flowfield Second Tablefilter" := FilterWithFlowfields("Second Source Table No.", pText);
        "Second Source Table Filter 1" := GetChars(pText, MAXSTRLEN("Second Source Table Filter 1"));
        "Second Source Table Filter 2" := GetChars(pText, MAXSTRLEN("Second Source Table Filter 2"));
        "Second Source Table Filter 3" := GetChars(pText, MAXSTRLEN("Second Source Table Filter 3"));
        "Second Source Table Filter 4" := GetChars(pText, MAXSTRLEN("Second Source Table Filter 4"));
      END;
      //>>IMH06.ST
      IF pText <> '' THEN
        ERROR(Text002);
    END;

    LOCAL PROCEDURE GetChars@1100281008(VAR pText@1100281000 : Text[1024];pStrLen@1100281001 : Integer) ReturnValue : Text[1024];
    BEGIN
      IF pText = '' THEN
        EXIT;
      IF STRLEN(pText) <= pStrLen THEN BEGIN
        ReturnValue := COPYSTR(pText, 1, pStrLen);
        pText := '';
      END
      ELSE BEGIN
        ReturnValue := COPYSTR(pText, 1, pStrLen);
        pText := COPYSTR(pText, pStrLen + 1, STRLEN(pText));
      END;
    END;

    LOCAL PROCEDURE IsSelectable@1100281001(pObject@1100281000 : Record 2000000001) : Boolean;
    VAR
      lTempObject@1100281001 : TEMPORARY Record 2000000001;
    BEGIN
      IF pObject.Type <> pObject.Type::Table THEN
        EXIT;
      lTempObject := pObject;
      lTempObject.INSERT;
      lTempObject.SETFILTER(ID, GetSelectableTable(FALSE));
      EXIT(NOT lTempObject.ISEMPTY);
    END;

    LOCAL PROCEDURE GetSelectableTable@1100281000(pSecondTable@1100281000 : Boolean) : Text[1024];
    BEGIN
      //<<IMH06.ST
      IF pSecondTable THEN
        EXIT('50072|50100')
      ELSE
      //>>IMH06.ST
        EXIT('5900|50000|50004|50066|50075|50076');
    END;

    PROCEDURE PreviewRec@1100281002(pForUpdate@1100281002 : Boolean);
    VAR
      lServHeaderList@1100281013 : Form 50075;
      lServHeaderTempList@1100281015 : Form 50256;
      lServHeaderTemp@1100281014 : TEMPORARY Record 5900;
      lProvidersList@1100281003 : Form 50001;
      lProvider@1100281000 : Record 50000;
      lComplTaskList@1100281010 : Form 50028;
      lComplTask@1100281009 : Record 50004;
      lServicesList@1100281006 : Form 50068;
      lServicesTempList@1100281016 : Form 50255;
      lServiceTemp@1100281005 : TEMPORARY Record 50066;
      lInterventionLinesList@1100281008 : Form 50069;
      lInterventionLinesTempList@1100281012 : Form 50251;
      lInterventionLineTemp@1100281007 : TEMPORARY Record 50075;
      lInterventionQuoteList@1100281004 : Form 50091;
      lInterventionQuote@1100281011 : TEMPORARY Record 50076;
      lViewFilter@1100281001 : Text[1024];
    BEGIN
      //<<IMH04.ST
      IF pForUpdate THEN
        ProcessEditable(TRUE);
      //>>IMH04.ST
      lViewFilter := GetRecFilters(FALSE);

      CASE "Source Table" OF
        DATABASE::"Service Header" : BEGIN
          lServHeaderTemp.SETVIEW(lViewFilter);
          IF pForUpdate THEN BEGIN
            lServHeaderTempList.SETTABLEVIEW(lServHeaderTemp);
            lServHeaderTempList.RUNMODAL;
            lServHeaderTempList.CopyRec(lServHeaderTemp);
            SaveFilter(TRUE, lServHeaderTemp.GETVIEW(FALSE));
          END
          ELSE BEGIN
            lServHeaderList.SETTABLEVIEW(lServHeaderTemp);
            lServHeaderList.RUN;
          END;
        END;
        DATABASE::Provider : BEGIN
          lProvider.SETVIEW(lViewFilter);
          lProvidersList.SETTABLEVIEW(lProvider);
          IF pForUpdate THEN BEGIN
            lProvidersList.RUNMODAL;
            lProvidersList.CopyRec(lProvider);
            SaveFilter(TRUE, lProvider.GETVIEW(FALSE));
          END
          ELSE
            lProvidersList.RUN;
        END;
        DATABASE::"Completness Task" : BEGIN
          lComplTask.SETVIEW(lViewFilter);
          lComplTaskList.SETTABLEVIEW(lComplTask);
          IF pForUpdate THEN BEGIN
            lComplTaskList.RUNMODAL;
            lComplTaskList.CopyRec(lComplTask);
            SaveFilter(TRUE, lComplTask.GETVIEW(FALSE));
          END
          ELSE
            lComplTaskList.RUN;
        END;
        DATABASE::Service : BEGIN
          lServiceTemp.SETVIEW(lViewFilter);
          IF pForUpdate THEN BEGIN
            lServicesTempList.SETTABLEVIEW(lServiceTemp);
            lServicesTempList.RUNMODAL;
            lServicesTempList.CopyRec(lServiceTemp);
            SaveFilter(TRUE, lServiceTemp.GETVIEW(FALSE));
          END
          ELSE BEGIN
            lServicesList.SETTABLEVIEW(lServiceTemp);
            lServicesList.RUN;
          END;
        END;
        DATABASE::"Service Intervention Line" : BEGIN
          lInterventionLineTemp.SETVIEW(lViewFilter);
          IF pForUpdate THEN BEGIN
            lInterventionLinesTempList.SETTABLEVIEW(lInterventionLineTemp);
            lInterventionLinesTempList.RUNMODAL;
            lInterventionLinesTempList.CopyRec(lInterventionLineTemp);
            SaveFilter(TRUE, lInterventionLineTemp.GETVIEW(FALSE));
          END
          ELSE BEGIN
            lInterventionLinesList.SETTABLEVIEW(lInterventionLineTemp);
            lInterventionLinesList.RUN;
          END;
        END;
      //<<IMH04.ST
        DATABASE::"Service Intervention Quote" : BEGIN
          lInterventionQuote.SETVIEW(lViewFilter);
          lInterventionQuoteList.SETTABLEVIEW(lInterventionQuote);
          IF pForUpdate THEN BEGIN
            lInterventionQuoteList.RUNMODAL;
            lInterventionQuoteList.CopyRec(lInterventionQuote);
            SaveFilter(TRUE, lInterventionQuote.GETVIEW(FALSE));
          END
          ELSE
            lInterventionQuoteList.RUN;
        END;
      //>>IMH04.ST
        ELSE
          ERROR(Text001, "Source Table");
      END;
    END;

    PROCEDURE SetLogicalOperator@1100281004();
    VAR
      lProcessStepsRequirement@1100281000 : Record 50045;
    BEGIN
      lProcessStepsRequirement.SETCURRENTKEY("Process Code","Source Requirement","Source Line No.","Source Action Line No.",Priority);
      lProcessStepsRequirement.SETRANGE("Process Code", "Process Code");
      lProcessStepsRequirement.SETRANGE("Source Requirement", "Source Requirement");
      lProcessStepsRequirement.SETRANGE("Source Line No.", "Source Line No.");
      lProcessStepsRequirement.SETRANGE("Source Action Line No.", "Source Action Line No.");
      lProcessStepsRequirement.SETRANGE(Priority, Priority);
      lProcessStepsRequirement.SETFILTER("Line No.", '<>%1', "Line No.");
      lProcessStepsRequirement.SETFILTER("Logical Operator", '<>%1', "Logical Operator");
      IF NOT lProcessStepsRequirement.ISEMPTY THEN
        lProcessStepsRequirement.MODIFYALL("Logical Operator", "Logical Operator", FALSE);
    END;

    PROCEDURE AssistParameters@1100281005();
    VAR
      lFunction@1100281000 : Record 50085;
    BEGIN
      TESTFIELD("Test Function No.");

      lFunction.VALIDATE("Source Table No.", "Source Table");
      lFunction."Function No." := "Test Function No.";
      lFunction.AssistFunction;
    END;

    PROCEDURE ProcessEditable@1100281006(pError@1100281000 : Boolean) rValue : Boolean;
    VAR
      lProcess@1100281001 : Record 50041;
    BEGIN
      IF SkipStatusCheck THEN
        EXIT(TRUE);

      EXIT(lProcess.IsModifyStatus("Process Code", pError));
    END;

    LOCAL PROCEDURE FilterWithFlowfields@1100281009(pSourceTable@1100281003 : Integer;pFilterText@1100281000 : Text[1024]) : Boolean;
    VAR
      lField@1100281005 : Record 2000000041;
      lRecRef@1100281001 : RecordRef;
      lFieldRef@1100281002 : FieldRef;
      lInt@1100281004 : Integer;
    BEGIN
      lRecRef.OPEN(pSourceTable, TRUE);
      lRecRef.SETVIEW(pFilterText);
      FOR lInt := 1 TO lRecRef.FIELDCOUNT DO BEGIN
        lFieldRef := lRecRef.FIELDINDEX(lInt);
        IF lFieldRef.GETFILTER <> '' THEN BEGIN
          lField.GET(lRecRef.NUMBER, lFieldRef.NUMBER);
          IF lField.Class = lField.Class::FlowField THEN
            EXIT(TRUE);
        END;
      END;
    END;

    PROCEDURE GetUserReqError@1100281010(pDefault@1100281000 : Boolean) : Text[1024];
    BEGIN
      IF pDefault OR ("User Error Return" = '') THEN
        EXIT(Text003)
      ELSE
        EXIT("User Error Return");
    END;

    PROCEDURE ShowFieldList@1100281012();
    VAR
      lField@1100281000 : Record 2000000041;
    BEGIN
      lField.FILTERGROUP(2);
      lField.SETRANGE(TableNo, "Source Table");
      lField.SETRANGE(Enabled, TRUE);
      lField.SETFILTER(Class, '<>%1', lField.Class::FlowFilter);
      lField.FILTERGROUP(0);
      FORM.RUN(FORM::"Table Field List", lField);
    END;

    PROCEDURE PreviewRec2@1100281013(pForUpdate@1100281002 : Boolean);
    VAR
      lServDeviceList@1100281013 : Form 50085;
      lServDevice@1100281014 : TEMPORARY Record 50072;
      lServClaimList@1100281006 : Form 50228;
      lServClaim@1100281005 : TEMPORARY Record 50100;
      lViewFilter@1100281001 : Text[1024];
    BEGIN
      //IMH06.ST
      IF pForUpdate THEN
        ProcessEditable(TRUE);
      lViewFilter := GetRecFilters2(FALSE);

      CASE "Second Source Table No." OF
        DATABASE::"Service Header Device" : BEGIN
          lServDevice.SETVIEW(lViewFilter);
          lServDeviceList.SETTABLEVIEW(lServDevice);
          IF pForUpdate THEN BEGIN
            lServDeviceList.RUNMODAL;
            lServDeviceList.CopyRec(lServDevice);
            SaveFilter(FALSE, lServDevice.GETVIEW(FALSE));
          END
          ELSE
            lServDeviceList.RUN;
        END;
        DATABASE::"Service Header Claims" : BEGIN
          lServClaim.SETVIEW(lViewFilter);
          lServClaimList.SETTABLEVIEW(lServClaim);
          IF pForUpdate THEN BEGIN
            lServClaimList.RUNMODAL;
            lServClaimList.CopyRec(lServClaim);
            SaveFilter(FALSE, lServClaim.GETVIEW(FALSE));
          END
          ELSE
            lServClaimList.RUN;
        END;
        ELSE
          ERROR(Text001, "Second Source Table No.");
      END;
    END;

    PROCEDURE GetRecFilters2@1100281014(pWithName@1100281000 : Boolean) ReturnValue : Text[1024];
    BEGIN
      IF ("Second Source Table Filter 1" = '') THEN
        EXIT('');
      ReturnValue := "Second Source Table Filter 1" + "Second Source Table Filter 2" +
                     "Second Source Table Filter 3" + "Second Source Table Filter 4";
      IF pWithName THEN
        ReturnValue := TransformFilterToCaption("Second Source Table No.", ReturnValue);
    END;

    PROCEDURE TransformFilterToCaption@1100281018(pTableNo@1100281001 : Integer;VAR pText@1100281000 : Text[1024]) ReturnValue : Text[1024];
    VAR
      lRecordRef@1100281005 : RecordRef;
      lText1@1100281004 : Text[1024];
      lText2@1100281003 : Text[1024];
      lPosition@1100281002 : Integer;
    BEGIN
      //IMH06.ST
      lRecordRef.OPEN(pTableNo, TRUE);
      lRecordRef.SETVIEW(pText);
      lText1 := COPYSTR(lRecordRef.GETVIEW(TRUE), 1 , MAXSTRLEN(lText1));
      lText2 := COPYSTR(lRecordRef.GETVIEW(TRUE), MAXSTRLEN(lText1), MAXSTRLEN(lText2));
      lPosition := STRPOS(lText1, 'SORTING(');
      IF lPosition = 1 THEN BEGIN // d‚bute par sorting
        lPosition := STRPOS(lText1, ') WHERE(');
        IF lPosition <> 0 THEN
          lText1 := COPYSTR(lText1, lPosition+2, MAXSTRLEN(lText1)); // Suppression du sorting jusqu'au where
      END;
      lPosition := STRPOS(lText1, 'WHERE(');
      IF lPosition = 1 THEN BEGIN // d‚bute par where
        lText1 := COPYSTR(lText1, lPosition+6, MAXSTRLEN(lText1)); // Suppression du where
        // Suppression de la derniŠre parenthŠse
        IF lText2 <> '' THEN BEGIN
          IF lText2[STRLEN(lText2)] = ')' THEN
            lText2[STRLEN(lText2)] := ' ';
        END
        ELSE BEGIN
          IF lText1[STRLEN(lText1)] = ')' THEN
            lText1[STRLEN(lText1)] := ' ';
        END;
      END;
      IF STRLEN(lText1 + lText2) > MAXSTRLEN(ReturnValue) THEN
        ReturnValue := COPYSTR(lText1 + lText2, 1, MAXSTRLEN(ReturnValue)-5) + '[...]'
      ELSE
        ReturnValue := lText1 + lText2;
    END;

    PROCEDURE GetSecondRecRef@1100281015(VAR pMasterRecRef@1100281000 : RecordRef;VAR pSecondRecRef@1100281001 : RecordRef);
    VAR
      lServHeaderMgt@1100281002 : Codeunit 50043;
    BEGIN
      CASE pMasterRecRef.NUMBER OF
        DATABASE::"Service Header" :
          lServHeaderMgt.GetSecondRecRef(pMasterRecRef, "Second Source Table No.", pSecondRecRef);
      END; // CASE
    END;

    BEGIN
    {
      /** @r IMH08 @d 07/04/11 @a ISAT.ST @v IMH6.01.102 @s Gestion des statuts
          @c ajout nouvelle liste pour pallier bug Navision / Correction IMH07 */
      /** @r IMH07 @d 27/03/11 @a ISAT.PC @v IMH6.01.102 @s Gestion des statuts
          @c ajout nouvelle liste pour pallier bug Navision */
      /** @r IMH06 @d 24/03/11 @a ISAT.ST @v IMH6.01.102 @s Gestion des statuts
          @c Ajout table secondaire pour DPS
          @c Ajout PreviewRec2, GetRecFilters2
          @c Mutualisation du code avec la fonction TransformFilterToCaption
          @c Appel des edits filters DPS en mode temporaire */
      /** @r IMH05 @d 28/02/11 @a ISAT.ST @v IMH6.01.102 @s Gestion des statuts @c Ajout ShowFieldList */
      /** @r IMH04 @d 21/02/11 @a ISAT.ST @v IMH6.01.102 @s Gestion des statuts @c Ajout accŠs devis service */
      /** @r IMH03 @d 31/12/10 @a ISAT.ST @v IMH6.01.102 @s Gestion des statuts
          @c Finalisation, changement PK, Ajout Test Function + Test function parameters */
      /** @r IMH02 @d 15/12/10 @a ISAT.ZW @v IMH6.01.102 @s Gestion des statuts @c Ajout Next process code */
      /** @r IMH01 @d 08/12/10 @a ISAT.ZW @v IMH6.01.102 @s Gestion de statut @c Creation Objet */
    }
    END.
  }
}