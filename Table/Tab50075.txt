OBJECT Table 50075 Service Intervention Line
{
  OBJECT-PROPERTIES
  {
    Date=18/06/14;
    Time=12:03:04;
    Modified=Yes;
    Version List=IMH6.01,OPTIM,DevFus,IMH6.01.P010;
  }
  PROPERTIES
  {
    Permissions=TableData 50000=rim,
                TableData 50007=rim,
                TableData 50021=rimd,
                TableData 50040=rimd,
                TableData 50069=rimd,
                TableData 50076=rimd,
                TableData 50084=rimd,
                TableData 50091=rimd,
                TableData 8016709=rim,
                TableData 8016710=rim,
                TableData 8016711=rim,
                TableData 8016712=rim;
    DataCaptionFields=Service Header No.,Intervention No.;
    OnInsert=VAR
               lServHeader@1100281001 : Record 5900;
               lInterfaceReference@1100281004 : Record 50164;
               lServiceHeader@1100281003 : Record 5900;
               lFUSIONInterfaceMgt@1100281002 : Codeunit 50181;
               lInvoicingMgt@1000000000 : Codeunit 50080;
             BEGIN
               TouchRecord(TRUE);
               //<<IMH18.ST
               IF "Mission Status" = "Mission Status"::" " THEN
                 "Mission Status" := "Mission Status"::Accepted;
               //>>IMH18.ST
               TESTFIELD("Service Header No.");
               TESTFIELD("Service No.");
               //<<IMH35.ST
               IF "Assigned Time" = 0T THEN
                 "Assigned Time" := TIME;
               //>>IMH35.ST

               //<<IMH36.zw
               IF Urgent THEN BEGIN
                 IF ("Expected Arrival Date" = 0D) AND ("Assigned Date" <> 0D) THEN
                   VALIDATE("Expected Arrival Date", "Assigned Date");
                 IF ("Expected Arrival Time" = 0T) AND ("Assigned Time" <> 0T) THEN BEGIN
                   VALIDATE("Expected Arrival Time", "Assigned Time" + 10800000);
                 END;
               END;
               //>>IMH36.zw
               UpdateExtranetDelay; //IMH60.ST
               GetNextLineNo;
               //<<IMH29.isat.PC
               //lInvoicingMgt.CreateOrderFromIntervention(Rec);
               //>>IMH29.isat.PC
               ServLog.LogIntervention(Rec,0); //IMH39.ST
               UpdateSpeciality;
               "Deductible Depreciat Amt." := "Deductible Amount" + "Unsecured Depreciation Amount";

               //<<IMH77.PC
               //lServHeader.SETRANGE("No.","Service Header No.");
               //IF lServHeader.FINDSET THEN
               //  "Global Amount (Incl. VAT)" := lServHeader."Global Amount (Incl. VAT)";
               IF lServHeader.GET(lServHeader."Document Type"::Invoice,"Service Header No.") THEN BEGIN
                 "Global Amount (Incl. VAT)" := lServHeader."Global Amount (Incl. VAT)";
               END;
               //>>IMH77.PC

               //<<IMH73.PC
               {
               IF lServiceHeader.GET(lServiceHeader."Document Type"::Invoice, "Service Header No.") THEN
                 IF lInterfaceReference.GetServiceHeaderGUID(lServiceHeader) <> '' THEN
                   lFUSIONInterfaceMgt.CreateSendMQByServiceHeader(lServiceHeader, 1)
                 ELSE
                   lFUSIONInterfaceMgt.CreateSendMQByServiceHeader(lServiceHeader, 0);
               }
               //>>IMH73.PC
             END;

    OnModify=BEGIN
               IF "Service Order Type" = '' THEN
                 FIELDERROR("Service Order Type");
               //<<IMH36
               IF "Moisture %" >= 20 THEN
                 TESTFIELD("Next Appointment Date");
               //>>IMH36
               OnModifyMoisture;//IMH14
               OnNextApointmentDate;//IMH22
               //<<IMH74
               //AutoStep;
               IF NOT SkipAutoStep THEN BEGIN
                 AutoStep;
               END;
               //>>IMH74
               TouchRecord(FALSE);
               UpdateSpeciality;
               CalcTotOrderAmount;
               UpdateExtranetDelay; //IMH60.ST
               "Deductible Depreciat Amt." := "Deductible Amount" + "Unsecured Depreciation Amount";
               ServLog.LogIntervention(Rec,1); //IMH39.ST
             END;

    OnDelete=VAR
               lInterventionQuote@1100281001 : Record 50076;
               lServHeaderAmount@1100281000 : Record 50069;
               lServCode@1100281002 : Record 50040;
               lDocAttach@1100281004 : Record 50021;
               lProcMgt@1100281003 : Codeunit 50040;
               lInterventionMinutes@1100281005 : Record 50084;
               lServInterv@1100281006 : Record 50075;
               lIntervReportLine@1100281007 : Record 50091;
             BEGIN
               //<<IMH38
               //ERROR(Text50008);
               //<<IMH38

               //<<IMH02.ST
               lInterventionQuote.SETRANGE("Service Header No.", "Service Header No.");
               lInterventionQuote.SETRANGE("Intervention Line No.", "Line No.");
               IF NOT lInterventionQuote.ISEMPTY THEN
                 lInterventionQuote.DELETEALL(TRUE);

               lServHeaderAmount.SETRANGE("Service Header No.", "Service Header No.");
               lServHeaderAmount.SETRANGE("Amount Type", "Line No.");
               IF NOT lServHeaderAmount.ISEMPTY THEN
                 lServHeaderAmount.DELETEALL(TRUE);
               //>>IMH02.ST
               //<<IMH06.ST
               lServCode.SETRANGE("Service Type", lServCode."Service Type"::Intervention);
               lServCode.SETRANGE("Service No.", "Service No.");
               lServCode.SETRANGE("Service Header No.", "Service Header No.");
               lServCode.SETRANGE("Intervention Line No.", "Line No.");
               IF NOT lServCode.ISEMPTY THEN
                 lServCode.DELETEALL(FALSE);
               //>>IMH06.ST

               //<<IMH13
               lDocAttach.SETRANGE("Referent Table No.",DATABASE::"Service Intervention Line");
               lDocAttach.SETRANGE("Key Code 1","Service Header No.");
               lDocAttach.SETRANGE("Key Integer 1","Line No.");
               IF NOT lDocAttach.ISEMPTY THEN
                 lDocAttach.DELETEALL;
               //>>IMH13

               lInterventionMinutes.SETRANGE("Service Header No.", "Service Header No.");
               lInterventionMinutes.SETRANGE("Service Intervention Line No.", "Line No.");
               IF NOT lInterventionMinutes.ISEMPTY THEN
                 lInterventionMinutes.DELETEALL(TRUE);

               //<<IMH58.ST
               IF "Source Service Header No." <> '' THEN
                 IF lServInterv.GET("Source Service Header No.", "Source Interv. Line No.") THEN
                   IF lServInterv."Line Quality Controlled" THEN BEGIN
                     lServInterv."Line Quality Controlled" := FALSE;
                     lServInterv."Quality Control Type" := 0;
                     lServInterv.MODIFY(FALSE);
                   END;

               IF "Quality Control" THEN BEGIN
                 lIntervReportLine.SETRANGE("Control Type", lIntervReportLine."Control Type"::Control);
                 lIntervReportLine.SETRANGE("Control No.", "Service Header No.");
                 lIntervReportLine.SETRANGE("Intervention Line No.", "Line No.");
                 IF NOT lIntervReportLine.ISEMPTY THEN
                   lIntervReportLine.DELETEALL(TRUE); // a voir s'il ne faut pas les garder
               END;
               //>>IMH58.ST

               lProcMgt.DeleteSourceRec(DATABASE::"Service Intervention Line", "Service Header No.", '', "Line No.", 0); //IMH12.ST
               ServLog.LogIntervention(Rec,2); //IMH39.ST
             END;

    OnRename=BEGIN
               TouchRecord(FALSE);
               ServLog.LogIntervention(Rec,3); //IMH39.ST
             END;

    CaptionML=[ENU=Service Intervention Line;
               FRA=Ligne d'intervention];
    LookupFormID=Form50069;
    DrillDownFormID=Form50069;
  }
  FIELDS
  {
    { 3   ;   ;Service Header No.  ;Code20        ;TableRelation="Service Header".No. WHERE (Document Type=CONST(Invoice));
                                                   OnValidate=BEGIN
                                                                //<<IMH01
                                                                GetServiceHeaderInfo;
                                                                //>>IMH01
                                                              END;

                                                   CaptionML=[ENU=Service Header No.;
                                                              FRA=Nø ligne produit];
                                                   Editable=No }
    { 4   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              FRA=Nø ligne];
                                                   Editable=No }
    { 10  ;   ;Intervention No.    ;Integer       ;CaptionML=[ENU=Intervention No.;
                                                              FRA=Nø intervention];
                                                   MinValue=1;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 14  ;   ;Contact Mobile Phone No.;Text30    ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Service."Contact Mobile Phone No." WHERE (Service No.=FIELD(Service No.)));
                                                   ExtendedDatatype=Phone No.;
                                                   CaptionML=[ENU=Contact Mobile Phone No.;
                                                              FRA=Nø t‚l‚phone mobile b‚n‚ficiaire];
                                                   Editable=No }
    { 15  ;   ;E-Mail              ;Text80        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Header"."Ship-to E-Mail" WHERE (Document Type=CONST(Invoice),
                                                                                                               No.=FIELD(Service Header No.)));
                                                   ExtendedDatatype=E-Mail;
                                                   CaptionML=[ENU=E-Mail;
                                                              FRA=E-Mail MEO];
                                                   Editable=No }
    { 16  ;   ;Member No.          ;Code20        ;OnValidate=VAR
                                                                lContact@1100281000 : Record 5050;
                                                              BEGIN
                                                              END;

                                                   CaptionML=[ENU=Member No.;
                                                              FRA=Nø b‚n‚ficiaire];
                                                   Editable=No }
    { 17  ;   ;Contact Name        ;Text50        ;CaptionML=[ENU=Contact Name;
                                                              FRA=Nom b‚n‚ficiaire];
                                                   Editable=No }
    { 18  ;   ;Contact No.         ;Code20        ;TableRelation=Contact.No.;
                                                   CaptionML=[ENU=Contact No.;
                                                              FRA=Nø contact b‚n‚ficiaire];
                                                   Editable=No }
    { 19  ;   ;Alt. Address Code   ;Code10        ;TableRelation="Contact Alt. Address".Code WHERE (Contact No.=FIELD(Contact No.));
                                                   OnValidate=VAR
                                                                lContactAltAddr@1100281000 : Record 5051;
                                                                lService@1100281001 : Record 50066;
                                                                lServiceHeader@1100281002 : Record 5900;
                                                                lServiceInterventionLine@1100281003 : Record 50075;
                                                              BEGIN
                                                                IF "Alt. Address Code" = '' THEN
                                                                  EXIT;
                                                                GetAltAddress;

                                                                //<<IMH42
                                                                IF "Line No." <> 0 THEN BEGIN
                                                                  lService.GET("Service No.");
                                                                  lService.GetAltAddress;
                                                                  lService.MODIFY(FALSE);
                                                                  lServiceHeader.GET(lServiceHeader."Document Type"::Invoice, "Service Header No.");
                                                                  lServiceHeader.GetShipToAddress;
                                                                  lServiceHeader.MODIFY(FALSE);
                                                                  lServiceInterventionLine.SETRANGE("Service Header No.", "Service Header No.");
                                                                  lServiceInterventionLine.SETFILTER("Line No.", '<>%1', "Line No.");
                                                                  lServiceInterventionLine.SETRANGE("Intervention Status", lServiceInterventionLine."Intervention Status"::InProgress);
                                                                  IF lServiceInterventionLine.FINDSET THEN
                                                                    REPEAT
                                                                      lServiceInterventionLine.VALIDATE("Alt. Address Code");
                                                                      lServiceInterventionLine.MODIFY(FALSE);
                                                                    UNTIL lServiceInterventionLine.NEXT = 0;
                                                                END;
                                                                //>>IMH42
                                                              END;

                                                   CaptionML=[ENU=Alt. Address Code;
                                                              FRA=Code adresse MEO];
                                                   Editable=No }
    { 20  ;   ;Address             ;Text50        ;CaptionML=[ENU=Address;
                                                              FRA=Adresse MEO];
                                                   Editable=No }
    { 21  ;   ;Address 2           ;Text50        ;CaptionML=[ENU=Address 2;
                                                              FRA=Adresse MEO 2];
                                                   Editable=No }
    { 22  ;   ;County              ;Text30        ;CaptionML=[ENU=County;
                                                              FRA=R‚gion MEO];
                                                   Editable=No }
    { 23  ;   ;City                ;Text30        ;OnValidate=BEGIN
                                                                PostCode.ValidateCity(City,"Post Code","Country/Region Code"); //IMH16 Ajout Code pays
                                                              END;

                                                   OnLookup=BEGIN
                                                              PostCode.LookUpCity(City,"Post Code","Country/Region Code", TRUE); //IMH16 Ajout Code pays
                                                            END;

                                                   CaptionML=[ENU=City;
                                                              FRA=Ville MEO];
                                                   Editable=No }
    { 24  ;   ;Post Code           ;Code20        ;TableRelation="Post Code";
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(City,"Post Code","Country/Region Code"); //IMH16 Ajout Code pays
                                                              END;

                                                   OnLookup=BEGIN
                                                              PostCode.LookUpPostCode(City,"Post Code","Country/Region Code", TRUE); //IMH16 Ajout Code pays
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Post Code;
                                                              FRA=Code postal MEO];
                                                   Editable=No }
    { 25  ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Country/Region Code;
                                                              FRA=Code pays/r‚gion MEO];
                                                   Editable=No }
    { 26  ;   ;Phone No.           ;Text30        ;OnValidate=VAR
                                                                lPhoneStandardization@1100281000 : Codeunit 50099;
                                                              BEGIN
                                                              END;

                                                   ExtendedDatatype=Phone No.;
                                                   CaptionML=[ENU=Phone No.;
                                                              FRA=Nø t‚l‚phone MEO];
                                                   Editable=No }
    { 27  ;   ;Mobile Phone No.    ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Header"."Ship-to Mobile Phone No." WHERE (No.=FIELD(Service Header No.),
                                                                                                                         Document Type=CONST(Invoice)));
                                                   OnValidate=VAR
                                                                lPhoneStandardization@1100281000 : Codeunit 50099;
                                                              BEGIN
                                                              END;

                                                   ExtendedDatatype=Phone No.;
                                                   CaptionML=[ENU=Mobile Phone No.;
                                                              FRA=Nø t‚l‚phone mobile MEO];
                                                   Editable=No }
    { 28  ;   ;Fax No.             ;Text30        ;OnValidate=VAR
                                                                lPhoneStandardization@1100281000 : Codeunit 50099;
                                                              BEGIN
                                                              END;

                                                   ExtendedDatatype=Phone No.;
                                                   CaptionML=[ENU=Fax No.;
                                                              FRA=Nø t‚l‚copie MEO] }
    { 29  ;   ;Geo. Reference Code ;Code10        ;TableRelation="Geographical Reference";
                                                   CaptionML=[ENU=Geo. Reference Code;
                                                              FRA=Code r‚f‚rence g‚o. MEO];
                                                   Editable=No }
    { 30  ;   ;Urgent              ;Boolean       ;CaptionML=[ENU=Urgent;
                                                              FRA=Urgent];
                                                   Editable=No }
    { 31  ;   ;Service No.         ;Code20        ;TableRelation=Service."Service No.";
                                                   CaptionML=[ENU=Service No.;
                                                              FRA=Nø service];
                                                   Editable=No }
    { 32  ;   ;Corporate No.       ;Code20        ;TableRelation=Customer.No. WHERE (Service Contact=CONST(Corporate Customer),
                                                                                     Service Corporate=CONST(Yes));
                                                   CaptionML=[ENU=Corporate No.;
                                                              FRA=Nø grand compte];
                                                   Editable=No }
    { 33  ;   ;Corporate Region Code;Code10       ;TableRelation="Corporate Region"."Region Code" WHERE (Corporate No.=FIELD(Corporate No.));
                                                   CaptionML=[ENU=Corporate Region Code;
                                                              FRA=Code r‚gion grand compte];
                                                   Editable=No }
    { 34  ;   ;Quote Managment     ;Boolean       ;CaptionML=[ENU=Quote Managment;
                                                              FRA=Demande devis];
                                                   Editable=No }
    { 35  ;   ;Building Trade      ;Code10        ;TableRelation=IF (Main Speciality=CONST('')) "Building Trade".No.
                                                                 ELSE IF (Main Speciality=FILTER(<>'')) "Specialization Building Trade"."Specialization Code" WHERE (Building Trade No.=FIELD(Building Trade));
                                                   OnValidate=VAR
                                                                lSpecBuild@1100281000 : Record 50031;
                                                                lServCode@1100281001 : Record 50040;
                                                              BEGIN
                                                                IF "Main Speciality" <> '' THEN BEGIN
                                                                  IF "Building Trade" = '' THEN
                                                                    VALIDATE("Main Speciality", '')
                                                                  ELSE
                                                                    IF NOT lSpecBuild.GET("Building Trade", "Main Speciality") THEN
                                                                      VALIDATE("Main Speciality", '');
                                                                  lServCode.UpdateMain(lServCode."Service Type"::Intervention, "Service Header No.", "Line No.",
                                                                                       lServCode."Code Type"::Speciality, "Main Speciality", "Building Trade");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Building Trade;
                                                              FRA=Corps de m‚tier] }
    { 36  ;   ;Main Speciality     ;Code10        ;TableRelation=IF (Building Trade=FILTER(<>'')) "Specialization Building Trade"."Specialization Code" WHERE (Building Trade No.=FIELD(Building Trade))
                                                                 ELSE IF (Building Trade=CONST('')) Specialization.Code;
                                                   OnValidate=VAR
                                                                lServCode@1100281000 : Record 50040;
                                                                lSpeciality@1100281001 : Record 50005;
                                                                lBuildTrade@1100281002 : Code[20];
                                                              BEGIN
                                                                IF "Main Speciality" <> '' THEN BEGIN
                                                                  IF lSpeciality.GetBuildingTrade("Main Speciality", lBuildTrade) THEN
                                                                    "Building Trade" := lBuildTrade
                                                                  ELSE
                                                                    "Main Speciality" := xRec."Main Speciality";
                                                                END;

                                                                IF "Line No." <> 0 THEN
                                                                  lServCode.UpdateMain(lServCode."Service Type"::Intervention, "Service Header No.", "Line No.",
                                                                                       lServCode."Code Type"::Speciality, "Main Speciality", "Building Trade");
                                                              END;

                                                   CaptionML=[ENU=Main Speciality;
                                                              FRA=Sp‚cialit‚] }
    { 37  ;   ;Service Order Type  ;Code10        ;TableRelation="Service Order Type";
                                                   CaptionML=[ENU=Service Order Type;
                                                              FRA=Type produit];
                                                   Editable=No }
    { 38  ;   ;Electrical Failure  ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Order Type"."Electrical Failure" WHERE (Code=FIELD(Service Order Type)));
                                                   CaptionML=[ENU=Electrical Failure;
                                                              FRA=Panne ‚lectrom‚nager];
                                                   Editable=No }
    { 39  ;   ;Non-Urgent Pursuit  ;Option        ;OnValidate=BEGIN
                                                                IF "Non-Urgent Pursuit" <> "Non-Urgent Pursuit"::" " THEN
                                                                  "Non-Urgent Pursuit Input" := CURRENTDATETIME;//IMH06
                                                              END;

                                                   CaptionML=[ENU=Non-Urgent Pursuit;
                                                              FRA=Poursuite en non-urgent];
                                                   OptionCaptionML=[ENU=" ,Yes,No";
                                                                    FRA=" ,Oui,Non"];
                                                   OptionString=[ ,Yes,No] }
    { 40  ;   ;Comments            ;Text80        ;CaptionML=[ENU=Comments;
                                                              FRA=Commentaire] }
    { 45  ;   ;Address 3           ;Text50        ;CaptionML=[ENU=Address 3;
                                                              FRA=Adresse MEO 3];
                                                   Editable=No }
    { 49  ;   ;Intervention Status ;Option        ;OnValidate=VAR
                                                                lServiceHeader@1000000000 : Record 5900;
                                                                lSalesInvoicingMgt@1000000001 : Codeunit 50079;
                                                              BEGIN
                                                                IF "Mission Status" = "Mission Status"::Canceled THEN
                                                                  TESTFIELD("Intervention Status", "Intervention Status"::Cancel);
                                                                SetClosed;

                                                                //<<IMH75 d‚placer dans le statut intervention
                                                                IF "Intervention Status" = "Intervention Status"::Closed THEN BEGIN
                                                                  //<<IMH69.ISAT.RC
                                                                  IF lServiceHeader.GET(lServiceHeader."Document Type"::Invoice,"Service Header No.") THEN
                                                                    IF lServiceHeader."Real Estate Diag."  THEN BEGIN
                                                                      lSalesInvoicingMgt.CreateSalesOrderFromService(lServiceHeader);
                                                                      //<<IMH70.ISAT.RC
                                                                      SendProviderOrderToIMA(lServiceHeader);
                                                                    END;
                                                                    //>>IMH70.ISAT.RC

                                                                    //<<IMH71.ISAT.RC
                                                                    //SendReturnToIMA(lServiceHeader);
                                                                    //>>IMH71.ISAT.RC
                                                                  //>>IMH69.isat.RC
                                                                END;
                                                                //>>IMH75 d‚placer dans le statut intervention
                                                              END;

                                                   CaptionML=[ENU=Intervention Status;
                                                              FRA=Statut intervention];
                                                   OptionCaptionML=[ENU=" ,In progress,Closed,Cancel,Suspended";
                                                                    FRA=" ,En cours,Cl“tur‚e,Annul‚e,Suspendu"];
                                                   OptionString=[ ,InProgress,Closed,Cancel,Suspended] }
    { 50  ;   ;Mission Status      ;Option        ;OnValidate=BEGIN
                                                                CASE "Mission Status" OF
                                                                  "Mission Status"::Canceled :
                                                                    VALIDATE("Intervention Status", "Intervention Status"::Cancel);
                                                                  "Mission Status"::Accepted :
                                                                    IF "Intervention Status" < "Intervention Status"::InProgress THEN
                                                                      VALIDATE("Intervention Status", "Intervention Status"::InProgress);
                                                                  "Mission Status"::" " :
                                                                    IF "Intervention Status" <> "Intervention Status"::Cancel THEN
                                                                      VALIDATE("Intervention Status", "Intervention Status"::" ");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Mission Status;
                                                              FRA=Statut mission];
                                                   OptionCaptionML=[ENU=" ,Accepted,Refused,Confirmed";
                                                                    FRA=" ,Accept‚,Annul‚,Confirm‚"];
                                                   OptionString=[ ,Accepted,Canceled,Confirmed] }
    { 51  ;   ;Refusal Reason Code ;Code10        ;TableRelation=Code.Code WHERE (Table ID=CONST(50075),
                                                                                  Field ID=CONST(51));
                                                   OnValidate=BEGIN
                                                                IF "Refusal Reason Code" <> '' THEN
                                                                  TESTFIELD("Mission Status", "Mission Status"::Canceled);
                                                              END;

                                                   CaptionML=[ENU=Refusal Reason Code;
                                                              FRA=Code motif refus] }
    { 52  ;   ;Assigned Date       ;Date          ;CaptionML=[ENU=Assigned Date;
                                                              FRA=Date d'assignation];
                                                   Editable=No }
    { 53  ;   ;Arrival Date        ;Date          ;OnValidate=VAR
                                                                lPurchInvMgt@1100281000 : Codeunit 50080;
                                                                lServInterMinutes@1100281001 : Record 50084;
                                                                lCode@1100281002 : Code[10];
                                                              BEGIN
                                                                IF "Arrival Date" = 0D THEN
                                                                  EXIT;
                                                                //<<IMH44
                                                                IF ("Arrival Date" > WORKDATE) AND ("Arrival Date" <> 0D) THEN
                                                                  ERROR(Text50002, FIELDCAPTION("Arrival Date"));
                                                                //>>IMH44

                                                                //<<IMH43.ISAT.VA
                                                                lServInterMinutes.RESET;
                                                                lServInterMinutes.SETRANGE("Service Header No.","Service Header No.");
                                                                lServInterMinutes.SETRANGE("Service Intervention Line No.","Line No.");
                                                                IF lServInterMinutes.FINDSET THEN
                                                                REPEAT
                                                                  lPurchInvMgt.UdatePurchCostOnMinute(lServInterMinutes,lCode);
                                                                  lServInterMinutes.MODIFY;
                                                                UNTIL (lServInterMinutes.NEXT = 0);
                                                                //>>IMH43.ISAT.VA
                                                              END;

                                                   CaptionML=[ENU=Arrival Date;
                                                              FRA=Date d'arriv‚e r‚elle] }
    { 54  ;   ;Arrival Time        ;Time          ;OnValidate=VAR
                                                                lPurchInvMgt@1100281001 : Codeunit 50080;
                                                                lServInterMinutes@1100281000 : Record 50084;
                                                                lCode@1100281002 : Code[10];
                                                                lDateTime@1100281003 : DateTime;
                                                              BEGIN
                                                                //<<IMH44
                                                                IF ("Arrival Time" <> 0T) AND ("Arrival Date" <> 0D)  THEN BEGIN
                                                                  lDateTime := CREATEDATETIME("Arrival Date","Arrival Time");
                                                                  IF lDateTime > CURRENTDATETIME THEN
                                                                    ERROR(Text50006, FIELDCAPTION("Arrival Time"));
                                                                END;
                                                                //>>IMH44

                                                                //<<IMH43.ISAT.VA
                                                                lServInterMinutes.RESET;
                                                                lServInterMinutes.SETRANGE("Service Header No.","Service Header No.");
                                                                lServInterMinutes.SETRANGE("Service Intervention Line No.","Line No.");
                                                                IF lServInterMinutes.FINDSET THEN
                                                                REPEAT
                                                                  lPurchInvMgt.UdatePurchCostOnMinute(lServInterMinutes,lCode);
                                                                  lServInterMinutes.MODIFY;
                                                                UNTIL (lServInterMinutes.NEXT = 0);
                                                                //>>IMH43.ISAT.VA
                                                              END;

                                                   CaptionML=[ENU=Arrival Time;
                                                              FRA=Heure d'arriv‚e r‚elle] }
    { 55  ;   ;Protective Action   ;Boolean       ;CaptionML=[ENU=Protective Action;
                                                              FRA=Mesures conservatoires] }
    { 56  ;   ;Definitive Repair   ;Boolean       ;CaptionML=[ENU=Definitive Repair;
                                                              FRA=R‚parations d‚finitives] }
    { 57  ;   ;Travel              ;Boolean       ;CaptionML=[ENU=Travel;
                                                              FRA=D‚placement (+ 1h Mo)] }
    { 58  ;   ;Expected Previsit Date;Date        ;OnValidate=BEGIN
                                                                "Expected Previsit Date Input" := CURRENTDATETIME;
                                                                IF "Expected Previsit Date" = 0D THEN
                                                                  EXIT;
                                                                //<<IMH32.ISAT.EBA
                                                                //<<IMH25
                                                                //<<IMH33
                                                                //IF ("Expected Previsit Date" < WORKDATE) THEN
                                                                //  ERROR(STRSUBSTNO(Text50000,FIELDCAPTION("Expected Previsit Date")));
                                                                IF ("Expected Previsit Date" < WORKDATE) THEN
                                                                  ERROR(STRSUBSTNO(Text50003,FIELDCAPTION("Expected Previsit Date")));
                                                                IF "Expected Previsit Date" <> 0D THEN
                                                                  IF "Assigned Date" <> 0D THEN
                                                                    IF ("Expected Previsit Date" < "Assigned Date") THEN
                                                                      ERROR(STRSUBSTNO(Text50005,FIELDCAPTION("Expected Previsit Date")));
                                                                //>>IMH33
                                                                //IF ("Expected Previsit Date" <= WORKDATE) THEN BEGIN
                                                                //  ERROR(STRSUBSTNO(Text50000,FIELDCAPTION("Expected Previsit Date")));
                                                                //END;
                                                                //>>IMH25
                                                                //>>IMH32.ISAT.EBA
                                                              END;

                                                   CaptionML=[ENU=Expected Previsit Date;
                                                              FRA=Date pr‚visionnelle de pr‚visite] }
    { 59  ;   ;Previsit Date       ;Date          ;OnValidate=BEGIN
                                                                IF "Previsit Date" = 0D THEN
                                                                  EXIT;
                                                                "Previsit Date Input" := CURRENTDATETIME;//IMH06
                                                                //<<IMH32.ISAT.EBA
                                                                ////<<IMH25
                                                                ////IF ("Previsit Date" < WORKDATE) THEN
                                                                ////  ERROR(STRSUBSTNO(Text50000,FIELDCAPTION("Previsit Date")));
                                                                //IF ("Previsit Date" <= WORKDATE) THEN BEGIN
                                                                //  ERROR(STRSUBSTNO(Text50000,FIELDCAPTION("Previsit Date")));
                                                                //END;
                                                                ////>>IMH25

                                                                //<<IMH33
                                                                //IF ("Previsit Date" > WORKDATE) THEN
                                                                //  ERROR(STRSUBSTNO(Text50002,FIELDCAPTION("Previsit Date")));
                                                                IF ("Previsit Date" > WORKDATE) THEN
                                                                  ERROR(STRSUBSTNO(Text50004,FIELDCAPTION("Previsit Date")));
                                                                IF "Previsit Date" <> 0D THEN
                                                                  IF "Assigned Date" <> 0D THEN
                                                                    IF ("Previsit Date" < "Assigned Date") THEN
                                                                      ERROR(STRSUBSTNO(Text50005,FIELDCAPTION("Previsit Date")));
                                                                //>>IMH33
                                                                //>>IMH32.ISAT.EBA
                                                                //CreateMinute;
                                                              END;

                                                   CaptionML=[ENU=Previsit Date;
                                                              FRA=Date r‚elle de pr‚visite] }
    { 60  ;   ;Expected Previsit Time;Time        ;CaptionML=[ENU=Expected Previsit Hour;
                                                              FRA=Heure pr‚visionnelle de pr‚visite] }
    { 61  ;   ;Previsit Date Input ;DateTime      ;CaptionML=[ENU=Previsit Date Input;
                                                              FRA=Date saisie pr‚visite];
                                                   Editable=No }
    { 62  ;   ;Moisture            ;Boolean       ;OnValidate=BEGIN
                                                                //IF NOT Moisture THEN
                                                                //  TESTFIELD("Moisture %");
                                                              END;

                                                   CaptionML=[ENU=Moisture;
                                                              FRA=Humidit‚] }
    { 63  ;   ;Moisture %          ;Decimal       ;CaptionML=[ENU=Moisture %;
                                                              FRA=Taux d'humidit‚];
                                                   DecimalPlaces=0:2;
                                                   MinValue=0;
                                                   MaxValue=100;
                                                   BlankZero=Yes }
    { 64  ;   ;Next Appointment Date;Date         ;OnValidate=BEGIN
                                                                //<<IMH28.ST
                                                                IF "Next Appointment Date" <> xRec."Next Appointment Date" THEN BEGIN
                                                                  IF "Next Appointment Date" = 0D THEN
                                                                    EXIT;
                                                                  IF ("Next Appointment Date" <> 0D) AND ("Next Appointment Date" < WORKDATE) THEN
                                                                    ERROR(Text50000, FIELDCAPTION("Next Appointment Date"));
                                                                  "Next Appointment Date Modified" := TRUE;
                                                                END;
                                                                //>>IMH28.ST
                                                              END;

                                                   CaptionML=[ENU=Next Appointment Date;
                                                              FRA=Date prochain contr“le] }
    { 65  ;   ;Non-Urgent Chase    ;Boolean       ;OnValidate=BEGIN
                                                                "Non-Urgent Pursuit Input" := CURRENTDATETIME;//IMH06
                                                              END;

                                                   CaptionML=[ENU=Non-Urgent Pursuit;
                                                              FRA=Poursuite non urgent_old] }
    { 66  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Adv. Comment Line" WHERE (Source Table ID=CONST(50075),
                                                                                                Source No.=FIELD(Service Header No.),
                                                                                                Source No. 2=FILTER(''),
                                                                                                Source No. 3=FIELD(Line No.)));
                                                   CaptionML=[ENU=Comment;
                                                              FRA=Commentaires];
                                                   Editable=No }
    { 67  ;   ;Non-Urgent Pursuit Input;DateTime  ;CaptionML=[ENU=Non-Urgent Pursuit Input;
                                                              FRA=Date saisie poursuite non urgent];
                                                   Editable=No }
    { 68  ;   ;Previsit Time       ;Time          ;CaptionML=[ENU=Previsit Time;
                                                              FRA=Heure r‚elle de pr‚visite] }
    { 69  ;   ;Next Appointment Date Modified;Boolean;
                                                   CaptionML=[ENU=Next Appointment Date Modified;
                                                              FRA=Date prochain contr“le modifi‚e];
                                                   Editable=No }
    { 70  ;   ;Expected Work Start Date;Date      ;OnValidate=VAR
                                                                lInterventionQuote@1100281000 : Record 50076;
                                                                lInterventionQuoteCode@1100281001 : Record 50062;
                                                              BEGIN
                                                                IF "Expected Work Start Date" = 0D THEN
                                                                  EXIT;
                                                                //<<IMH25
                                                                IF "Expected Work Start Date" <> 0D THEN
                                                                  IF ("Expected Work Start Date" < WORKDATE) THEN
                                                                    ERROR(STRSUBSTNO(Text50000,FIELDCAPTION("Expected Work Start Date")));
                                                                IF ("Expected Work End Date" <> 0D) AND ("Expected Work Start Date" > "Expected Work End Date") THEN BEGIN
                                                                  ERROR(STRSUBSTNO(Text50001,FIELDCAPTION("Expected Work End Date"),FIELDCAPTION("Expected Work Start Date")));
                                                                END;
                                                                //>>IMH25
                                                                //<<IMH33
                                                                IF "Expected Work Start Date" <> 0D THEN
                                                                  IF "Assigned Date" <> 0D THEN
                                                                    IF ("Expected Work Start Date" < "Assigned Date") THEN
                                                                      ERROR(STRSUBSTNO(Text50005,FIELDCAPTION("Expected Work Start Date")));
                                                                //>>IMH33
                                                                //<<IMH50.ISAT.SB
                                                                {//IMH57.ST D‚sactivation
                                                                lInterventionQuote.SETRANGE("Service Header No.", "Service Header No.");
                                                                lInterventionQuote.SETRANGE("Intervention Line No.", "Line No.");
                                                                lInterventionQuote.SETRANGE(Active,TRUE);
                                                                IF lInterventionQuote.ISEMPTY THEN
                                                                CreateMinute
                                                                ELSE
                                                                lInterventionQuote.FINDSET ;
                                                                REPEAT
                                                                  lInterventionQuoteCode.SETRANGE("Service Order Type",lInterventionQuote."Service Order Type");
                                                                  lInterventionQuoteCode.SETRANGE(Code,lInterventionQuote."Service Quote Type");

                                                                  IF lInterventionQuoteCode.FINDFIRST THEN

                                                                  CASE lInterventionQuoteCode."Service Quote Type" OF
                                                                    lInterventionQuoteCode."Service Quote Type"::Contradictory :
                                                                    BEGIN
                                                                        IF  (lInterventionQuote.Acceptance = lInterventionQuote.Acceptance::"No - wait new") AND (NOT lInterventionQuote.Active) THE
                                                                N
                                                                        CreateMinute;
                                                                    END;
                                                                    lInterventionQuoteCode."Service Quote Type"::Additional :
                                                                    BEGIN
                                                                      IF (lInterventionQuote.Acceptance = lInterventionQuote.Acceptance::Yes) AND (lInterventionQuote.Active) THEN
                                                                       CreateMinute;
                                                                    END;
                                                                  END;
                                                                UNTIL lInterventionQuote.NEXT = 0

                                                                {
                                                                lInterventionQuote.SETRANGE("Service Header No.", "Service Header No.");
                                                                lInterventionQuote.SETRANGE("Intervention Line No.", "Line No.");
                                                                //lInterventionQuote.SETRANGE(Active,TRUE);
                                                                IF lInterventionQuote.FINDFIRST THEN BEGIN
                                                                  lInterventionQuoteCode.SETRANGE("Service Order Type",lInterventionQuote."Service Order Type");
                                                                  lInterventionQuoteCode.SETRANGE(Code,lInterventionQuote."Service Quote Type");
                                                                  IF lInterventionQuoteCode.FINDFIRST THEN;

                                                                  CASE lInterventionQuoteCode."Service Quote Type" OF
                                                                    lInterventionQuoteCode."Service Quote Type"::Contradictory :
                                                                    BEGIN
                                                                      IF  lInterventionQuote.Acceptance = lInterventionQuote.Acceptance::No THEN
                                                                        CreateMinute;
                                                                    END;
                                                                    lInterventionQuoteCode."Service Quote Type"::Additional :
                                                                    BEGIN
                                                                      IF lInterventionQuote.Acceptance = lInterventionQuote.Acceptance::Yes THEN
                                                                       CreateMinute;
                                                                    END;
                                                                  END;
                                                                END ELSE
                                                                  CreateMinute;
                                                                  }

                                                                } //IMH57.ST D‚sactivation
                                                                //>>IMH50.ISAT.SB
                                                              END;

                                                   CaptionML=[ENU=Expected Work Start Date;
                                                              FRA=Date pr‚visionnelle d‚but de travaux] }
    { 71  ;   ;Expected Work End Date;Date        ;OnValidate=BEGIN
                                                                IF "Expected Work End Date" = 0D THEN
                                                                  EXIT;
                                                                //<<IMH32.ISAT.EBA
                                                                IF ("Expected Work End Date" < WORKDATE) THEN
                                                                  ERROR(STRSUBSTNO(Text50000,FIELDCAPTION("Expected Work End Date")));
                                                                //>>IMH32.ISAT.EBA

                                                                //<<IMH25
                                                                //IF ("Work Start Date" < WORKDATE) THEN
                                                                //  ERROR(STRSUBSTNO(Text50000,FIELDCAPTION("Work Start Date")));
                                                                IF "Expected Work End Date" <> 0D THEN BEGIN
                                                                  IF "Work Start Date" <> 0D THEN BEGIN
                                                                    IF ("Work Start Date" > "Expected Work End Date") THEN BEGIN
                                                                      ERROR(STRSUBSTNO(Text50001,FIELDCAPTION("Expected Work End Date"),FIELDCAPTION("Work Start Date")));
                                                                    END;
                                                                  END ELSE BEGIN
                                                                    IF ("Expected Work Start Date" > "Expected Work End Date") THEN BEGIN
                                                                      ERROR(STRSUBSTNO(Text50001,FIELDCAPTION("Expected Work End Date"),FIELDCAPTION("Expected Work Start Date")));
                                                                    END;
                                                                  END;
                                                                END;
                                                                //>>IMH25
                                                                //<<IMH33
                                                                IF "Expected Work End Date" <> 0D THEN
                                                                  IF "Assigned Date" <> 0D THEN
                                                                    IF ("Expected Work End Date" < "Assigned Date") THEN
                                                                      ERROR(STRSUBSTNO(Text50005,FIELDCAPTION("Expected Work End Date")));
                                                                //>>IMH33
                                                              END;

                                                   CaptionML=[ENU=Expected Work End Date;
                                                              FRA=Date pr‚visionnelle fin de travaux] }
    { 72  ;   ;Work Start Date     ;Date          ;OnValidate=BEGIN
                                                                IF "Work Start Date" = 0D THEN
                                                                  EXIT;
                                                                "Work Start Date Input" := CURRENTDATETIME;//IMH06
                                                                //<<IMH25
                                                                //IF ("Expected Work End Date" < WORKDATE) THEN
                                                                //  ERROR(STRSUBSTNO(Text50000,FIELDCAPTION("Expected Work End Date")));

                                                                //<<IMH32.ISAT.EBA
                                                                //IF ("Work Start Date" < WORKDATE) THEN BEGIN
                                                                //  ERROR(STRSUBSTNO(Text50000,FIELDCAPTION("Work Start Date")));
                                                                //END;
                                                                IF ("Work Start Date" > WORKDATE) THEN
                                                                  ERROR(STRSUBSTNO(Text50002,FIELDCAPTION("Work Start Date")));
                                                                //>>IMH32.ISAT.EBA

                                                                IF ("Work End Date" <> 0D) AND ("Work Start Date" > "Work End Date") THEN BEGIN
                                                                  ERROR(STRSUBSTNO(Text50001,FIELDCAPTION("Work End Date"),FIELDCAPTION("Work Start Date")));
                                                                END;
                                                                //>>IMH25
                                                                //<<IMH33
                                                                IF "Work Start Date" <> 0D THEN
                                                                  IF "Assigned Date" <> 0D THEN
                                                                    IF ("Work Start Date" < "Assigned Date") THEN
                                                                      ERROR(STRSUBSTNO(Text50005,FIELDCAPTION("Work Start Date")));
                                                                //>>IMH33
                                                              END;

                                                   CaptionML=[ENU=Work Start Date;
                                                              FRA=Date r‚elle d‚but travaux] }
    { 73  ;   ;Work End Date       ;Date          ;OnValidate=BEGIN
                                                                IF "Work End Date" = 0D THEN
                                                                  EXIT;
                                                                "Work End Date Input" := CURRENTDATETIME;//IMH06
                                                                //<<IMH25
                                                                //IF ("Work End Date" < WORKDATE) THEN
                                                                //  ERROR(STRSUBSTNO(Text50000,FIELDCAPTION("Work End Date")));
                                                                IF "Work End Date" <> 0D THEN
                                                                  IF ("Work Start Date" <> 0D) AND ("Work Start Date" > "Work End Date") THEN
                                                                    ERROR(STRSUBSTNO(Text50001,FIELDCAPTION("Work End Date"),FIELDCAPTION("Work Start Date")));
                                                                //>>IMH25

                                                                //<<IMH33
                                                                IF ("Work End Date" > WORKDATE) THEN
                                                                  ERROR(STRSUBSTNO(Text50002,FIELDCAPTION("Work End Date")));
                                                                IF "Work End Date" <> 0D THEN
                                                                  IF "Assigned Date" <> 0D THEN
                                                                    IF ("Work End Date" < "Assigned Date") THEN
                                                                      ERROR(STRSUBSTNO(Text50005,FIELDCAPTION("Work End Date")));
                                                                //>>IMH33
                                                              END;

                                                   CaptionML=[ENU=Work End Date;
                                                              FRA=Date r‚elle de fin de travaux] }
    { 74  ;   ;Work Start Date Input;DateTime     ;CaptionML=[ENU=Work Start Date Input;
                                                              FRA=Date saisie d‚but travaux];
                                                   Editable=No }
    { 75  ;   ;Work End Date Input ;DateTime      ;CaptionML=[ENU=Work Start Date Input;
                                                              FRA=Date saisie fin travaux];
                                                   Editable=No }
    { 76  ;   ;Arrival Date Expected;Boolean      ;CaptionML=[ENU=Arrival Date Expected;
                                                              FRA=Arriv‚e pr‚visionnelle] }
    { 77  ;   ;Assigned Time       ;Time          ;CaptionML=[ENU=Assigned Time;
                                                              FRA=Heure d'assignation];
                                                   Editable=No }
    { 78  ;   ;Expected Arrival Date;Date         ;OnValidate=BEGIN
                                                                IF "Expected Arrival Date" = 0D THEN
                                                                  EXIT;
                                                                IF ("Expected Arrival Date" <> 0D) AND ("Assigned Date" <> 0D) THEN BEGIN
                                                                  IF ("Expected Arrival Date" < "Assigned Date") THEN
                                                                    ERROR(STRSUBSTNO(Text50005,FIELDCAPTION("Expected Arrival Date")));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Expected Arrival Date;
                                                              FRA=Date d'arriv‚e pr‚visionnelle] }
    { 79  ;   ;Expected Arrival Time;Time         ;CaptionML=[ENU=Expected Arrival Time;
                                                              FRA=Heure d'arriv‚e pr‚visionnelle] }
    { 80  ;   ;Order Confirm Date  ;Date          ;CaptionML=[ENU=Order Confirm Date;
                                                              FRA=Date confirmation commande] }
    { 81  ;   ;Corporate Accept. Send Date;DateTime;
                                                   OnValidate=BEGIN
                                                                IF "Corporate Accept. Send Date" = 0DT THEN
                                                                  EXIT;
                                                              END;

                                                   CaptionML=[ENU=Corporate Accept. Date;
                                                              FRA=Date demande acceptation GC];
                                                   Editable=No }
    { 82  ;   ;Corporate Accept. Rcvd Date;DateTime;
                                                   CaptionML=[ENU=Corporate Accept. Rcvd Date;
                                                              FRA=Date r‚ponse GC];
                                                   Editable=No }
    { 83  ;   ;Expected Previsit Date Input;DateTime;
                                                   CaptionML=[ENU=Expected Previsit Date Input;
                                                              FRA=Date saisie pr‚visite pr‚visionnelle];
                                                   Editable=No }
    { 89  ;   ;Manual Search       ;Boolean       ;CaptionML=[ENU=Manual Search;
                                                              FRA=Recherche manuelle] }
    { 90  ;   ;Cancel Reason Code  ;Code10        ;TableRelation=Code.Code WHERE (Table ID=CONST(50075),
                                                                                  Field ID=CONST(90));
                                                   CaptionML=[ENU=Cancel Reason Code;
                                                              FRA=Code motif annulation] }
    { 91  ;   ;Cancel Reason       ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Code.Description WHERE (Table ID=CONST(50075),
                                                                                              Field ID=CONST(90),
                                                                                              Code=FIELD(Cancel Reason Code)));
                                                   CaptionML=[ENU=Cancel Reason Code;
                                                              FRA=Motif annulation];
                                                   Editable=No }
    { 98  ;   ;Closed              ;Boolean       ;OnValidate=VAR
                                                                lServiceHeader@1100281001 : Record 5900;
                                                                lSalesInvoicingMgt@1100281000 : Codeunit 50079;
                                                              BEGIN
                                                                IF Closed THEN
                                                                  "Closed DateTime" := CURRENTDATETIME
                                                                ELSE
                                                                  "Closed DateTime" := 0DT;
                                                                {
                                                                //<<IMH75 d‚placer dans le statut intervention
                                                                //<<IMH69.ISAT.RC
                                                                // La facturation au prestataire est declench‚e … la cl“ture de l'intervention
                                                                  IF Closed THEN
                                                                    IF lServiceHeader.GET(lServiceHeader."Document Type"::Invoice,"Service Header No.") THEN
                                                                    BEGIN
                                                                      lSalesInvoicingMgt.CreateSalesOrderFromService(lServiceHeader);
                                                                      //<<IMH70.ISAT.RC
                                                                      SendProviderOrderToIMA(lServiceHeader);
                                                                      //>>IMH70.ISAT.RC

                                                                      //<<IMH71.ISAT.RC
                                                                      //SendReturnToIMA(lServiceHeader);
                                                                      //>>IMH71.ISAT.RC
                                                                    END;
                                                                //>>IMH69.isat.RC
                                                                //>>IMH75 d‚placer dans le statut intervention
                                                                }
                                                              END;

                                                   CaptionML=[ENU=Closed;
                                                              FRA=Clotur‚e] }
    { 99  ;   ;Closed DateTime     ;DateTime      ;CaptionML=[ENU=Closed DateTime;
                                                              FRA=Date de cl“ture];
                                                   Editable=No }
    { 100 ;   ;Provider No.        ;Code20        ;TableRelation=Provider.No.;
                                                   OnValidate=BEGIN
                                                                GetProviderInfo;
                                                                IF ("Provider No." <> '') AND ("Intervention Status" = "Intervention Status"::" ") THEN
                                                                  VALIDATE("Intervention Status", "Intervention Status"::InProgress);
                                                              END;

                                                   CaptionML=[ENU=Provider No.;
                                                              FRA=Nø prestataire];
                                                   Editable=No }
    { 101 ;   ;Provider Name       ;Text50        ;CaptionML=[ENU=Supplier Name;
                                                              FRA=Nom prestataire];
                                                   Editable=No }
    { 102 ;   ;Provider Address    ;Text50        ;CaptionML=[ENU=Supplier Address;
                                                              FRA=Adresse prestataire];
                                                   Editable=No }
    { 103 ;   ;Provider Address 2  ;Text50        ;CaptionML=[ENU=Supplier Address 2;
                                                              FRA=Adresse 2 prestataire];
                                                   Editable=No }
    { 104 ;   ;Provider City       ;Text30        ;OnValidate=BEGIN
                                                                PostCode.ValidateCity("Provider City","Provider Post Code","Country/Region Code"); //IMH16 Ajout Code pays
                                                              END;

                                                   OnLookup=BEGIN
                                                              PostCode.LookUpPostCode("Provider City","Provider Post Code","Country/Region Code", TRUE); //IMH16 Ajout Code pays
                                                            END;

                                                   CaptionML=[ENU=Supplier City;
                                                              FRA=Ville prestataire];
                                                   Editable=No }
    { 105 ;   ;Provider Post Code  ;Code20        ;TableRelation="Post Code";
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode("Provider City","Provider Post Code","Country/Region Code"); //IMH16 Ajout Code pays
                                                              END;

                                                   OnLookup=BEGIN
                                                              PostCode.LookUpPostCode("Provider City","Provider Post Code","Country/Region Code", TRUE); //IMH16 Ajout Code pays
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Supplier Post Code;
                                                              FRA=Code postal prestataire];
                                                   Editable=No }
    { 106 ;   ;Provider Country/Region Code;Code10;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Supplier Country/Region Code;
                                                              FRA=Code pays/r‚gion prestataire];
                                                   Editable=No }
    { 107 ;   ;Provider Phone No.  ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Provider."Phone No." WHERE (No.=FIELD(Provider No.)));
                                                   OnValidate=VAR
                                                                lPhoneStandardization@1100281000 : Codeunit 50099;
                                                              BEGIN
                                                              END;

                                                   ExtendedDatatype=Phone No.;
                                                   CaptionML=[ENU=Supplier Phone No.;
                                                              FRA=Nø t‚l‚phone prestataire];
                                                   Editable=No }
    { 108 ;   ;Provider Fax No.    ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Provider."Fax No." WHERE (No.=FIELD(Provider No.)));
                                                   OnValidate=VAR
                                                                lPhoneStandardization@1100281000 : Codeunit 50099;
                                                              BEGIN
                                                              END;

                                                   ExtendedDatatype=Phone No.;
                                                   CaptionML=[ENU=Supplier Fax No.;
                                                              FRA=Nø t‚l‚copie prestataire];
                                                   Editable=No }
    { 109 ;   ;Provider Mobile Phone No.;Text30   ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Provider."Mobile Phone No." WHERE (No.=FIELD(Provider No.)));
                                                   OnValidate=VAR
                                                                lPhoneStandardization@1100281000 : Codeunit 50099;
                                                              BEGIN
                                                              END;

                                                   ExtendedDatatype=Phone No.;
                                                   CaptionML=[ENU=Supplier Mobile Phone No.;
                                                              FRA=Nø t‚l‚phone mobile prestataire];
                                                   Editable=No }
    { 110 ;   ;Provider Mobile Phone No. 2;Text30 ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Provider."Mobile Phone No. 2" WHERE (No.=FIELD(Provider No.)));
                                                   OnValidate=VAR
                                                                lPhoneStandardization@1100281000 : Codeunit 50099;
                                                              BEGIN
                                                              END;

                                                   ExtendedDatatype=Phone No.;
                                                   CaptionML=[ENU=Supplier Mobile Phone No. 2;
                                                              FRA=Nø t‚l‚phone mobile 2 prestataire];
                                                   Editable=No }
    { 111 ;   ;Provider Business No.;Text30       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Provider."Business Phone No." WHERE (No.=FIELD(Provider No.)));
                                                   ExtendedDatatype=Phone No.;
                                                   CaptionML=[ENU=Supplier Business Phone No.;
                                                              FRA=Nø t‚l‚phone affaire prestataire];
                                                   Editable=No }
    { 112 ;   ;Provider Constraint Phone No.;Text30;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup(Provider."Constraint Phone No." WHERE (No.=FIELD(Provider No.)));
                                                   ExtendedDatatype=Phone No.;
                                                   CaptionML=[ENU=Supplier Constraint Phone No.;
                                                              FRA=Nø t‚l‚phone astreinte prestataire];
                                                   Editable=No }
    { 113 ;   ;Provider Geo. Reference Code;Code10;TableRelation="Geographical Reference";
                                                   CaptionML=[ENU=Provider Geo. Reference Code;
                                                              FRA=Code r‚f‚rence g‚o. prestataire];
                                                   Editable=No }
    { 114 ;   ;Provider E-Mail     ;Text80        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Provider.E-Mail WHERE (No.=FIELD(Provider No.)));
                                                   CaptionML=[ENU=Provider E-Mail;
                                                              FRA=E-Mail prestataire];
                                                   Editable=No }
    { 115 ;   ;Provider DPS Contacts;Integer      ;FieldClass=FlowField;
                                                   CalcFormula=Count(Contact WHERE (Company No.=FIELD(Provider No.),
                                                                                    Preferred Contact DGS=CONST(Yes)));
                                                   CaptionML=[ENU=Provider DPS Contacts;
                                                              FRA=Contacts DGS];
                                                   Editable=No }
    { 116 ;   ;Provider Specialities;Integer      ;FieldClass=FlowField;
                                                   CalcFormula=Count("Provider Specialization" WHERE (Provider No.=FIELD(Provider No.)));
                                                   CaptionML=[ENU=Provider Specialities;
                                                              FRA=Sp‚cialit‚s prestataires];
                                                   Editable=No }
    { 117 ;   ;Provider Agreements ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Provider Agreement" WHERE (Provider No.=FIELD(Provider No.)));
                                                   CaptionML=[ENU=Provider Agreements;
                                                              FRA=Agr‚ments prestataires];
                                                   Editable=No }
    { 118 ;   ;Vendor No. Filter   ;Code20        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Vendor No. Filter;
                                                              FRA=Filtre nø fournisseur] }
    { 120 ;   ;Prov. DPS Contact Phone No.;Text30 ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact."Phone No." WHERE (Company No.=FIELD(Provider No.),
                                                                                                 Preferred Contact DGS=CONST(Yes),
                                                                                                 Phone No.=FILTER(<>'')));
                                                   ExtendedDatatype=Phone No.;
                                                   CaptionML=[ENU=Provider DPS Contact Phone No.;
                                                              FRA=Nø t‚l‚phone contact DGS];
                                                   Editable=No }
    { 121 ;   ;Prov. DPS Contact Mobile No.;Text30;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact."Mobile Phone No." WHERE (Company No.=FIELD(Provider No.),
                                                                                                        Preferred Contact DGS=CONST(Yes),
                                                                                                        Mobile Phone No.=FILTER(<>'')));
                                                   ExtendedDatatype=Phone No.;
                                                   CaptionML=[ENU=Provider DPS Contact Mobile No.;
                                                              FRA=Nø mobile contact DGS];
                                                   Editable=No }
    { 130 ;   ;Suspended           ;Boolean       ;CaptionML=[ENU=Suspended;
                                                              FRA=Devis en traitement];
                                                   Editable=No }
    { 150 ;   ;Contract Form Code  ;Code10        ;TableRelation="Contact Contract"."Contract Form Code";
                                                   OnLookup=VAR
                                                              lContactContract@1100281000 : Record 50059;
                                                            BEGIN
                                                            END;

                                                   CaptionML=[ENU=Contract Form Code;
                                                              FRA=Code formule];
                                                   Editable=No }
    { 151 ;   ;Contract Occurence No.;Integer     ;TableRelation="Contact Contract"."Occurence No." WHERE (Contact No.=FIELD(Contact No.),
                                                                                                           Contract Form Code=FIELD(Contract Form Code));
                                                   CaptionML=[ENU=Contract Occurence No.;
                                                              FRA=Nø occurence formule];
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 152 ;   ;Deductible 1 (LCY)  ;Decimal       ;CaptionML=[ENU=Deductible 1 (LCY);
                                                              FRA=Franchise];
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 153 ;   ;Deductible 2 (LCY)  ;Decimal       ;CaptionML=[ENU=Deductible 2 (LCY);
                                                              FRA=Franchise BG];
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 160 ;   ;Travel Distance     ;Decimal       ;CaptionML=[ENU=Travel Distance;
                                                              FRA=Distance aller-retour(km)];
                                                   BlankZero=Yes }
    { 161 ;   ;Travel Allowance    ;Decimal       ;CaptionML=[ENU=Travel Allowance;
                                                              FRA=Indemnit‚ d‚placement];
                                                   BlankZero=Yes }
    { 200 ;   ;Minutes Document    ;Integer       ;TableRelation="Service Intervention Minutes"."Document No." WHERE (Service Header No.=FIELD(Service Header No.),
                                                                                                                      Service Intervention Line No.=FIELD(Line No.));
                                                   CaptionML=[ENU=Minutes Document;
                                                              FRA=Document PV];
                                                   BlankZero=Yes }
    { 201 ;   ;Minutes Receipt Date;Date          ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Intervention Minutes"."Receipt Date" WHERE (Service Header No.=FIELD(Service Header No.),
                                                                                                                           Service Intervention Line No.=FIELD(Line No.),
                                                                                                                           Document No.=FIELD(Minutes Document)));
                                                   CaptionML=[ENU=Minutes Receipt Date;
                                                              FRA=Date r‚ception PV];
                                                   Editable=No }
    { 203 ;   ;Minutes Type        ;Option        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Intervention Minutes".Type WHERE (Service Header No.=FIELD(Service Header No.),
                                                                                                                 Service Intervention Line No.=FIELD(Line No.),
                                                                                                                 Document No.=FIELD(Minutes Document)));
                                                   CaptionML=[ENU=Minutes Type;
                                                              FRA=Type PV];
                                                   OptionCaptionML=[ENU=End of work,Intermediate,,Urgent;
                                                                    FRA=Fin de travaux,Interm‚diaire,,Urgent];
                                                   OptionString=End of work,Intermediate,Recovery,Urgent;
                                                   Editable=No }
    { 204 ;   ;Reserves            ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Intervention Minutes".Reserves WHERE (Service Header No.=FIELD(Service Header No.),
                                                                                                                     Service Intervention Line No.=FIELD(Line No.),
                                                                                                                     Document No.=FIELD(Minutes Document)));
                                                   CaptionML=[ENU=Reserves;
                                                              FRA=R‚serves];
                                                   Editable=No }
    { 206 ;   ;Minutes Status      ;Option        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Intervention Minutes".Status WHERE (Service Header No.=FIELD(Service Header No.),
                                                                                                                   Service Intervention Line No.=FIELD(Line No.),
                                                                                                                   Document No.=FIELD(Minutes Document)));
                                                   OnValidate=BEGIN
                                                                SetClosed;
                                                              END;

                                                   CaptionML=[ENU=Minutes Status;
                                                              FRA=Statut PV];
                                                   OptionCaptionML=[ENU=" ,Validated,Pending,Rejected";
                                                                    FRA=" ,Valid‚,En attente,Refus‚"];
                                                   OptionString=[ ,Validated,Pending,Rejected];
                                                   Editable=No }
    { 207 ;   ;Work Restart Date   ;Date          ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Intervention Minutes"."Work Restart Date" WHERE (Service Header No.=FIELD(Service Header No.),
                                                                                                                                Service Intervention Line No.=FIELD(Line No.),
                                                                                                                                Document No.=FIELD(Minutes Document)));
                                                   OnValidate=BEGIN
                                                                IF ("Work Restart Date" <> 0D) AND ("Assigned Date" <> 0D) THEN
                                                                  IF ("Work Restart Date" < "Assigned Date") THEN
                                                                    ERROR(STRSUBSTNO(Text50005,FIELDCAPTION("Work Restart Date")));
                                                              END;

                                                   CaptionML=[ENU=Work Restart Date;
                                                              FRA=Date reprise travaux];
                                                   Editable=No }
    { 208 ;   ;Closing Reserve Date;Date          ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Intervention Minutes"."Closing Reserve Date" WHERE (Service Header No.=FIELD(Service Header No.),
                                                                                                                                   Service Intervention Line No.=FIELD(Line No.),
                                                                                                                                   Document No.=FIELD(Minutes Document)));
                                                   OnValidate=BEGIN
                                                                IF ("Closing Reserve Date" <> 0D) AND ("Assigned Date" <> 0D) THEN
                                                                  IF ("Closing Reserve Date" < "Assigned Date") THEN
                                                                    ERROR(STRSUBSTNO(Text50005,FIELDCAPTION("Closing Reserve Date")));
                                                              END;

                                                   CaptionML=[ENU=Closing Reserve Date;
                                                              FRA=Date lev‚e r‚serves];
                                                   Editable=No }
    { 210 ;   ;Quote Reference No. ;Text30        ;CaptionML=[ENU=Reference No.;
                                                              FRA=R‚f‚rence devis] }
    { 211 ;   ;Claim               ;Boolean       ;OnValidate=VAR
                                                                ServiceHeaderClaimsMgt@1100281000 : Codeunit 50068;
                                                              BEGIN
                                                                //<<IMH20
                                                                //<<IMH20
                                                                TESTFIELD("Service Header Claims No.", '');
                                                                IF Claim THEN BEGIN
                                                                  IF NOT ServiceHeaderClaimsMgt.CreateServiceHeaderClaims(Rec) THEN
                                                                    ERROR('');
                                                                END;
                                                                //>>IMH20

                                                                {//<<IMH06
                                                                IF Claim THEN BEGIN
                                                                  IF lServiceHeader.GET(lServiceHeader."Document Type"::Invoice,"Service Header No.") THEN BEGIN
                                                                    lServiceHeader.Claim := Claim;
                                                                    lServiceHeader.MODIFY;
                                                                  END;
                                                                END;
                                                                //>>IMH06
                                                                }
                                                                //>>IMH20
                                                              END;

                                                   CaptionML=[ENU=Claim;
                                                              FRA=R‚clamation] }
    { 220 ;   ;Deductible Amt - Total Minutes;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Service Intervention Minutes"."Deductible Amount (LCY)" WHERE (Service Header No.=FIELD(Service Header No.),
                                                                                                                                   Service Intervention Line No.=FIELD(Line No.)));
                                                   OnValidate=BEGIN
                                                                CalcTotOrderAmount;//IMH47
                                                              END;

                                                   CaptionML=[ENU=Deductible Amount - Total Minutes;
                                                              FRA=Total franchise PV];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 221 ;   ;Uns. Depr. Amt - Total Minutes;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Service Intervention Minutes"."Unsecured Depr. Amount (LCY)" WHERE (Service Header No.=FIELD(Service Header No.),
                                                                                                                                        Service Intervention Line No.=FIELD(Line No.)));
                                                   OnValidate=BEGIN
                                                                CalcTotOrderAmount;//IMH47
                                                              END;

                                                   CaptionML=[ENU=Unsecured Depreciation Amount - Total Minutes;
                                                              FRA=Total v‚tust‚ non garantie PV];
                                                   BlankZero=Yes;
                                                   AutoFormatType=1 }
    { 300 ;   ;Comment Code Filter ;Code10        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Comment Code Filter;
                                                              FRA=Filtre code commentaire] }
    { 301 ;   ;Building Trade Description;Text50  ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Building Trade".Description WHERE (No.=FIELD(Building Trade)));
                                                   CaptionML=[ENU=Building Trade description;
                                                              FRA=D‚signation corps de m‚tier];
                                                   Editable=No }
    { 302 ;   ;Main Speciality Description;Text50 ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Specialization.Description WHERE (Code=FIELD(Main Speciality)));
                                                   CaptionML=[ENU=Main Speciality Description;
                                                              FRA=D‚signation sp‚cialit‚ principale];
                                                   Editable=No }
    { 303 ;   ;Event Date          ;Date          ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Service."Event Date" WHERE (Service No.=FIELD(Service No.)));
                                                   CaptionML=[ENU=Event Date;
                                                              FRA=Date ‚vŠnement];
                                                   Editable=No }
    { 304 ;   ;QuoteAcceptance Date;DateTime      ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Intervention Quote"."Acceptance Date" WHERE (Service Header No.=FIELD(Service Header No.),
                                                                                                                            Intervention No.=FIELD(Intervention No.),
                                                                                                                            Active=CONST(Yes)));
                                                   CaptionML=[ENU=Quote Acceptance Date;
                                                              FRA=Date d'acceptation devis];
                                                   Editable=No }
    { 305 ;   ;Quote Amount Incl. VAT (LCY);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Intervention Quote"."Amount Incl. VAT (LCY)" WHERE (Service Header No.=FIELD(Service Header No.),
                                                                                                                                   Intervention No.=FIELD(Intervention No.),
                                                                                                                                   Active=CONST(Yes)));
                                                   CaptionML=[ENU=Quote Amount Incl. VAT (LCY);
                                                              FRA=Montant devis TTC (DS)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 306 ;   ;Quote Amount Incl. VAT;Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Intervention Quote"."Amount Incl. VAT" WHERE (Service Header No.=FIELD(Service Header No.),
                                                                                                                             Intervention No.=FIELD(Intervention No.),
                                                                                                                             Active=CONST(Yes)));
                                                   CaptionML=[ENU=Quote Amount Incl. VAT;
                                                              FRA=Montant devis TTC];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 307 ;   ;Quote Received      ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Service Intervention Quote" WHERE (Service Header No.=FIELD(Service Header No.),
                                                                                                         Intervention Line No.=FIELD(Line No.),
                                                                                                         Active=CONST(Yes)));
                                                   CaptionML=[ENU=Quote Received;
                                                              FRA=Devis re‡u];
                                                   Editable=No }
    { 308 ;   ;Total Quote Amt Incl.VAT (LCY);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Service Intervention Quote"."Amount Incl. VAT (LCY)" WHERE (Service Header No.=FIELD(Service Header No.),
                                                                                                                                Intervention Line No.=FIELD(Line No.),
                                                                                                                                Active=CONST(Yes)));
                                                   CaptionML=[ENU=Total Quote Amount Incl. VAT (LCY);
                                                              FRA=Total devis TTC (DS)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 309 ;   ;Service Creation Date;DateTime     ;CaptionML=[ENU=Service Creation Date;
                                                              FRA=Date cr‚ation service];
                                                   Editable=No }
    { 310 ;   ;Active Quote Exists ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Service Intervention Quote" WHERE (Service Header No.=FIELD(Service Header No.),
                                                                                                         Intervention Line No.=FIELD(Line No.),
                                                                                                         Active=CONST(Yes)));
                                                   CaptionML=[ENU=Active Quote Exists;
                                                              FRA=Devis actif existe];
                                                   Editable=No }
    { 311 ;   ;Quote Approval Status Filter;Option;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Quote Approval Status Filter;
                                                              FRA=Filtre statut validation devis];
                                                   OptionCaptionML=[ENU=" ,Yes,No,WaitSurveyor,WaitAdjuster,WaitReport";
                                                                    FRA=" ,Oui,Non,Attente m‚treur,Attente t‚l‚-expert,Attente CR"];
                                                   OptionString=[ ,Yes,No,WaitSurveyor,WaitAdjuster,WaitReport] }
    { 312 ;   ;Quote Ext. Appr. Status Filter;Option;
                                                   FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Quote External Approval Status Filter;
                                                              FRA=Filtre statut validation externe devis];
                                                   OptionCaptionML=[ENU=" ,Yes,No,WaitAdjuster,WaitCorporate";
                                                                    FRA=" ,Oui,Non,Attente expert,Attent Grand Compte"];
                                                   OptionString=[ ,Yes,No,WaitAdjuster,WaitCorporate] }
    { 313 ;   ;Quote Acceptance Status Filter;Option;
                                                   FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Quote Acceptance Status Filter;
                                                              FRA=Filtre statut acceptation devis];
                                                   OptionCaptionML=[ENU=" ,Wait Beneficiary,Yes,No - wait new,No - Without continuation";
                                                                    FRA=" ,Attente b‚n‚ficiaire,Oui,Non - attente devis,Non - sans suite"];
                                                   OptionString=[ ,Wait Beneficiary,Yes,No - wait new,No - Without continuation] }
    { 314 ;   ;No. of Active Quotes;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Service Intervention Quote" WHERE (Service Header No.=FIELD(Service Header No.),
                                                                                                         Intervention Line No.=FIELD(Line No.),
                                                                                                         Active=CONST(Yes),
                                                                                                         Approval Status=FIELD(Quote Approval Status Filter),
                                                                                                         External Approval Status=FIELD(Quote Ext. Appr. Status Filter),
                                                                                                         Acceptance=FIELD(Quote Acceptance Status Filter)));
                                                   CaptionML=[ENU=No. of Active Quotes;
                                                              FRA=Nombre de devis actif];
                                                   Editable=No }
    { 315 ;   ;Total Order Amount Incl. VAT;Decimal;
                                                   CaptionML=[ENU=Total Order Incl. VAT;
                                                              FRA=Total commande TTC];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 316 ;   ;Total Order Amount Excl. VAT;Decimal;
                                                   CaptionML=[ENU=Total Order Amount Excl. VAT;
                                                              FRA=Total commande HT];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 317 ;   ;Quote Amount Excl. VAT (LCY);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Intervention Quote"."Amount Excl. VAT (LCY)" WHERE (Service Header No.=FIELD(Service Header No.),
                                                                                                                                   Intervention No.=FIELD(Intervention No.),
                                                                                                                                   Active=CONST(Yes)));
                                                   CaptionML=[ENU=Quote Amount Incl. VAT (LCY);
                                                              FRA=Montant devis HT (DS)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 318 ;   ;Quote Amount Excl. VAT;Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Intervention Quote"."Amount Excl. VAT" WHERE (Service Header No.=FIELD(Service Header No.),
                                                                                                                             Intervention No.=FIELD(Intervention No.),
                                                                                                                             Active=CONST(Yes)));
                                                   CaptionML=[ENU=Quote Amount Incl. VAT;
                                                              FRA=Montant devis HT];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 319 ;   ;Total Quote Amt Excl.VAT (LCY);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Service Intervention Quote"."Amount Excl. VAT (LCY)" WHERE (Service Header No.=FIELD(Service Header No.),
                                                                                                                                Intervention Line No.=FIELD(Line No.),
                                                                                                                                Active=CONST(Yes)));
                                                   CaptionML=[ENU=Total Quote Amount Excl. VAT (LCY);
                                                              FRA=Total devis HT (DS)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 320 ;   ;Meeting Date        ;Date          ;OnValidate=BEGIN
                                                                //<<IMH31.ST
                                                                IF ("Meeting Date" < WORKDATE) AND ("Meeting Date" <> 0D) THEN
                                                                  ERROR(Text50000, FIELDCAPTION("Meeting Date"));
                                                                //>>IMH31.ST
                                                              END;

                                                   CaptionML=[ENU=Meeting Date;
                                                              FRA=Date pr‚visionnelle RV] }
    { 321 ;   ;Actual Meeting Date ;Date          ;OnValidate=BEGIN
                                                                //<<IMH31.ST
                                                                IF ("Actual Meeting Date" > WORKDATE) THEN
                                                                  ERROR(Text50002, FIELDCAPTION("Actual Meeting Date"));
                                                                //>>IMH31.ST
                                                              END;

                                                   CaptionML=[ENU=Actual Meeting Date;
                                                              FRA=Date r‚elle RV] }
    { 322 ;   ;RC Receipt Date     ;Date          ;OnValidate=BEGIN
                                                                VALIDATE("Posted Report", "RC Receipt Date"<>0D); //IMH57.ST
                                                              END;

                                                   CaptionML=[ENU=RC Receipt Date;
                                                              FRA=Date r‚ception compte-rendu] }
    { 323 ;   ;Total Order VAT Amount;Decimal     ;CaptionML=[ENU=Total Order VAT Amount;
                                                              FRA=Total TVA commande];
                                                   Editable=No }
    { 325 ;   ;Total Work Amt Incl. VAT;Decimal   ;CaptionML=[ENU=Total Work Amt Incl. VAT;
                                                              FRA=Total travaux TTC];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 326 ;   ;Total Work Amt Excl. VAT;Decimal   ;CaptionML=[ENU=Total Work Amt Excl. VAT;
                                                              FRA=Total travaux HT];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 327 ;   ;Quote Approval Date ;DateTime      ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Intervention Quote"."Approval Date" WHERE (Service Header No.=FIELD(Service Header No.),
                                                                                                                          Intervention No.=FIELD(Intervention No.),
                                                                                                                          Active=CONST(Yes)));
                                                   CaptionML=[ENU=Quote Approval Date;
                                                              FRA=Date de validation devis];
                                                   Editable=No }
    { 328 ;   ;Posted Report       ;Boolean       ;CaptionML=[ENU=Posted Report;
                                                              FRA=Rapport valid‚] }
    { 329 ;   ;Quote Receive Date  ;Date          ;FieldClass=FlowField;
                                                   CalcFormula=Max("Service Intervention Quote"."Receive Date" WHERE (Service Header No.=FIELD(Service Header No.),
                                                                                                                      Intervention Line No.=FIELD(Line No.),
                                                                                                                      Active=CONST(Yes)));
                                                   CaptionML=[ENU=Quote Receive Date;
                                                              FRA=Date de r‚ception devos];
                                                   Editable=No }
    { 330 ;   ;Last Purch. Invoice Type;Option    ;CaptionML=[ENU=Last Invoice Type;
                                                              FRA=Type derniŠre facture];
                                                   OptionCaptionML=[ENU=" ,Invoice,PostedInvoice,NoInvoice";
                                                                    FRA=" ,Facture,Facture enregistr‚e,Non facturable"];
                                                   OptionString=[ ,Invoice,PostedInvoice,NoInvoice];
                                                   Editable=No }
    { 331 ;   ;Last Purch. Invoice No.;Code20     ;TableRelation=IF (Last Purch. Invoice Type=CONST(Invoice)) "Purchase Header".No. WHERE (Document Type=CONST(Invoice))
                                                                 ELSE IF (Last Purch. Invoice Type=CONST(PostedInvoice)) "Purch. Inv. Header".No.;
                                                   OnLookup=VAR
                                                              lPurchInvMgt@1000000000 : Codeunit 50080;
                                                            BEGIN
                                                              lPurchInvMgt.ShowInvoiceDoc("Last Purch. Invoice Type", "Last Purch. Invoice No.");
                                                            END;

                                                   CaptionML=[ENU=Last Invoice No.;
                                                              FRA=Dernier nø facture];
                                                   Editable=No }
    { 332 ;   ;Unbillable          ;Boolean       ;OnValidate=BEGIN
                                                                IF Unbillable THEN BEGIN
                                                                  TESTFIELD("Last Purch. Invoice No.", '');
                                                                  VALIDATE("Last Purch. Invoice Type", "Last Purch. Invoice Type"::NoInvoice);
                                                                END
                                                                ELSE
                                                                  VALIDATE("Last Purch. Invoice Type", "Last Purch. Invoice Type"::" ");
                                                              END;

                                                   CaptionML=[ENU=Unbillable;
                                                              FRA=Non facturable] }
    { 400 ;   ;Address Type        ;Option        ;OnValidate=VAR
                                                                lServiceHeader@1100281000 : Record 5900;
                                                                lContactAltAddress@1100281001 : Record 5051;
                                                              BEGIN
                                                              END;

                                                   CaptionML=[ENU=Address Type;
                                                              FRA=Type adresse];
                                                   OptionCaptionML=[ENU=Contact involved,Guarding,Moving,Public Storage,Annexe Contact,Disaster Declaration;
                                                                    FRA=Tiers impliqu‚,Gardiennage,D‚m‚nagement,Garde-meuble,Contact annexe,D‚claration sinistre];
                                                   OptionString=Contact involved,Guarding,Moving,Public Storage,Annexe Contact,Disaster Declaration }
    { 401 ;   ;Address No.         ;Integer       ;OnLookup=VAR
                                                              lServiceHeaderAddress@1100281000 : Record 50068;
                                                            BEGIN
                                                              IF lServiceHeaderAddress.GET("Service Header No.","Address Type","Address No.") THEN
                                                                FORM.RUNMODAL(FORM::"Service Header Address Card",lServiceHeaderAddress);
                                                            END;

                                                   CaptionML=[ENU=Address No.;
                                                              FRA=Nø adresse];
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 499 ;   ;Quality Control Score;Decimal      ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Intervention Report Line"."Line Score" WHERE (Control Type=CONST(Control),
                                                                                                                  Source Service Header No.=FIELD(Service Header No.),
                                                                                                                  Source Interv. Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Quality Control Score;
                                                              FRA=Score contr“le qualit‚];
                                                   Editable=No }
    { 500 ;   ;Line Quality Controlled;Boolean    ;CaptionML=[ENU=Line Quality Controlled;
                                                              FRA=Ligne contr“l‚ qualit‚] }
    { 501 ;   ;Quality Control     ;Boolean       ;CaptionML=[ENU=Quality Control;
                                                              FRA=Contr“le qualit‚] }
    { 502 ;   ;Source Service Header No.;Code20   ;TableRelation="Service Header".No. WHERE (Document Type=CONST(Invoice));
                                                   CaptionML=[ENU=Source Service Header No.;
                                                              FRA=Nø ligne produit origine] }
    { 503 ;   ;Source Interv. Line No.;Integer    ;TableRelation="Service Intervention Line"."Line No." WHERE (Service Header No.=FIELD(Source Service Header No.));
                                                   OnValidate=VAR
                                                                lServInterv@1100281000 : Record 50075;
                                                              BEGIN
                                                                IF lServInterv.GET("Source Service Header No.", "Source Interv. Line No.") THEN
                                                                  "Source Provider No." := lServInterv."Provider No."
                                                                ELSE
                                                                  "Source Provider No." := '';
                                                              END;

                                                   CaptionML=[ENU=Source Interv. Line No.;
                                                              FRA=Nø ligne intervention origine] }
    { 504 ;   ;Quality Control Type;Option        ;CaptionML=[ENU=Quality Control Type;
                                                              FRA=Type contr“le qualit‚];
                                                   OptionCaptionML=[ENU=Random,Target;
                                                                    FRA=Al‚atoire,cibl‚];
                                                   OptionString=Random,Target,Extranet }
    { 505 ;   ;Source Provider No. ;Code20        ;TableRelation=Provider.No.;
                                                   CaptionML=[ENU=Source Provider No.;
                                                              FRA=Nø prestataire origine] }
    { 506 ;   ;File Download Complete;Boolean     ;CaptionML=[ENU=File Download Complete;
                                                              FRA=Dossier t‚l‚charg‚] }
    { 507 ;   ;Meeting Canceled    ;Boolean       ;OnValidate=BEGIN
                                                                IF "Meeting Canceled" THEN
                                                                  VALIDATE("Meeting Canceled Date", CURRENTDATETIME);
                                                              END;

                                                   CaptionML=[ENU=Meeting Canceled;
                                                              FRA=Rendez-vous annul‚] }
    { 508 ;   ;Report Posted       ;Boolean       ;OnValidate=VAR
                                                                lQualMgt@1000000000 : Codeunit 50027;
                                                                lProvider@1000000001 : Record 50000;
                                                              BEGIN
                                                                IF "Report Posted" THEN BEGIN
                                                                  lQualMgt.CheckReportLines(Rec);
                                                                  VALIDATE("Report Posting Date", TODAY);
                                                                //<<IMH59.ST
                                                                  lProvider.GET("Provider No.");
                                                                  IF lProvider.GetVendorNo("Provider No.") = '' THEN
                                                                    lProvider.CreateVendor;
                                                                //>>IMH59.ST
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Report Posted (QC);
                                                              FRA=Rapport valid‚ (CQ)] }
    { 509 ;   ;Report Posting Date ;Date          ;CaptionML=[ENU=Report Posting Date;
                                                              FRA=Date validation rapport];
                                                   Editable=No }
    { 510 ;   ;Report Line Exist   ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Intervention Report Line" WHERE (Control Type=CONST(Control),
                                                                                                       Control No.=FIELD(Service Header No.),
                                                                                                       Intervention Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Report Line Exist;
                                                              FRA=Ligne rapport existe];
                                                   Editable=No }
    { 511 ;   ;Target Type         ;Option        ;OnValidate=BEGIN
                                                                IF NOT "Quality Control" THEN BEGIN
                                                                  IF "Line Quality Controlled" THEN
                                                                    ERROR(STRSUBSTNO(Text50010, FIELDCAPTION("Target Type")));
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Target Type;
                                                              FRA=Type ciblage];
                                                   OptionCaptionML=[ENU=" ,Intervention,Provider,Trial";
                                                                    FRA=" ,Intervention,Prestataire,P‚riode essai"];
                                                   OptionString=[ ,Intervention,Provider,Trial] }
    { 512 ;   ;Meeting Canceled Date;DateTime     ;CaptionML=[ENU=Meeting Canceled Date;
                                                              FRA=Date d'annulation RDV];
                                                   Editable=No }
    { 600 ;   ;Service Header Claims No.;Code20   ;CaptionML=[ENU=Service Header Claims No.;
                                                              FRA=Nø ligne produit r‚clamation] }
    { 700 ;   ;Max. Est. Work Amt Incl. VAT;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Header"."Max. Est. Work Amt Incl. VAT" WHERE (Document Type=CONST(Invoice),
                                                                                                                             No.=FIELD(Service Header No.)));
                                                   CaptionML=[ENU=Max. Estimate Work Amount Incl. VAT;
                                                              FRA=Estimation max des travaux TTC];
                                                   MinValue=0;
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 701 ;   ;Total Descr. Amount Incl. VAT;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Service Code"."Amount Incl. VAT" WHERE (Service Type=CONST(Intervention),
                                                                                                            Service No.=FIELD(Service No.),
                                                                                                            Service Header No.=FIELD(Service Header No.),
                                                                                                            Intervention Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Total Descr. Amount Incl. VAT;
                                                              FRA=Montant chiffrage TTC];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 702 ;   ;Total Descr. Amount Excl. VAT;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Service Code"."Amount Excl. VAT" WHERE (Service Type=CONST(Intervention),
                                                                                                            Service No.=FIELD(Service No.),
                                                                                                            Service Header No.=FIELD(Service Header No.),
                                                                                                            Intervention Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Total Descr. Amount Incl. VAT;
                                                              FRA=Montant chiffrage HT];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1000;No ;Unplanned Previsit Reason Code;Code10;
                                                   TableRelation=Code.Code WHERE (Table ID=CONST(50075),
                                                                                  Field ID=CONST(1000));
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Unplanned Previsit Reason;
                                                              FRA=Motif non-planification pr‚visite] }
    { 1001;No ;Unrealized Previsit Reason;Code10  ;TableRelation=Code.Code WHERE (Table ID=CONST(50075),
                                                                                  Field ID=CONST(1001));
                                                   CaptionML=[ENU=Unrealized Previsit Reason;
                                                              FRA=Motif non-r‚alisation pr‚visite] }
    { 1002;No ;End Of Work Delay Reason Code;Code10;
                                                   TableRelation=Code.Code WHERE (Table ID=CONST(50075),
                                                                                  Field ID=CONST(1002));
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=End Of Work Delay Reason;
                                                              FRA=Motif retard fin de travaux] }
    { 50022;  ;Campaign No.        ;Code20        ;TableRelation=Campaign;
                                                   CaptionML=[ENU=Campaign No.;
                                                              FRA=Nø ‚vŠnement exceptionnel] }
    { 50050;  ;Default Team Code   ;Code10        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Header"."Default Team Code" WHERE (Document Type=CONST(Invoice),
                                                                                                                  No.=FIELD(Service Header No.)));
                                                   CaptionML=[ENU=Default Team Code;
                                                              FRA=Code corbeille par d‚faut];
                                                   Editable=No }
    { 50070;  ;Channel             ;Code10        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Header".Channel WHERE (Document Type=CONST(Invoice),
                                                                                                      No.=FIELD(Service Header No.)));
                                                   TableRelation=Code.Code WHERE (Table ID=CONST(50066),
                                                                                  Field ID=CONST(12));
                                                   CaptionML=[ENU=Channel;
                                                              FRA=Canal] }
    { 50071;  ;Requisitioner       ;Code10        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Header".Requisitioner WHERE (Document Type=CONST(Invoice),
                                                                                                            No.=FIELD(Service Header No.)));
                                                   TableRelation=Code.Code WHERE (Table ID=CONST(50066),
                                                                                  Field ID=CONST(13));
                                                   CaptionML=[ENU=Requisitioner;
                                                              FRA=Demandeur] }
    { 50203;  ;Global Amount (Incl. VAT);Decimal  ;CaptionML=[ENU=Global Amount (Incl. VAT);
                                                              FRA=Montant global TTC];
                                                   BlankZero=Yes }
    { 50204;  ;Global Amount (Excl. VAT);Decimal  ;CaptionML=[ENU=Global Amount (Excl. VAT);
                                                              FRA=Montant global HT];
                                                   BlankZero=Yes }
    { 50260;  ;Other Phone No. Type;Code10        ;TableRelation=Code.Code WHERE (Table ID=CONST(5900),
                                                                                  Field ID=CONST(50260));
                                                   CaptionML=[ENU=Other Phone No. Type;
                                                              FRA=Type t‚l. autre];
                                                   Editable=No }
    { 50261;  ;Other Phone No.     ;Text30        ;ExtendedDatatype=Phone No.;
                                                   CaptionML=FRA=T‚l. autre MEO;
                                                   Editable=No }
    { 50500;  ;Creation Date       ;DateTime      ;CaptionML=[ENU=Creation Date;
                                                              FRA=Date de cr‚ation];
                                                   Editable=No }
    { 50501;  ;Creation User ID    ;Text30        ;TableRelation="User Setup"."User ID";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Creation User ID;
                                                              FRA=Utilisateur cr‚ation];
                                                   Editable=No }
    { 50502;  ;Last Modification Date;DateTime    ;CaptionML=[ENU=Last Modification Date;
                                                              FRA=Date derniŠre modification];
                                                   Editable=No }
    { 50503;  ;Last Modification User ID;Text30   ;TableRelation="User Setup"."User ID";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Last Modification User ID;
                                                              FRA=Utilisateur derniŠre modification];
                                                   Editable=No }
    { 50520;  ;Process Code        ;Code10        ;TableRelation=Process.Code WHERE (Source Data=CONST(Intervention));
                                                   CaptionML=[ENU=Process Code;
                                                              FRA=Code processus] }
    { 50521;  ;Process Status No.  ;Integer       ;TableRelation="Process Status"."Status No." WHERE (Process Code=FIELD(Process Code));
                                                   OnValidate=VAR
                                                                lProcessIntervMgt@1100281000 : Codeunit 50041;
                                                              BEGIN
                                                                lProcessIntervMgt.OnChangeProcessStatus(Rec);
                                                                "Last Status Change" := TODAY;
                                                              END;

                                                   CaptionML=[ENU=Process Status No.;
                                                              FRA=Nø statut processus];
                                                   BlankZero=Yes }
    { 50522;  ;Process Status Description;Text30  ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Process Status".Description WHERE (Process Code=FIELD(Process Code),
                                                                                                          Status No.=FIELD(Process Status No.)));
                                                   OnLookup=VAR
                                                              lProcessStatusHistory@1100281000 : Record 50047;
                                                            BEGIN
                                                              lProcessStatusHistory.ListHistory(FALSE, DATABASE::"Service Intervention Line","Service Header No.", '', "Line No.", 0);
                                                            END;

                                                   CaptionML=[ENU=Status Description;
                                                              FRA=Description statut];
                                                   Editable=No }
    { 50523;  ;User Next Step Available;Boolean   ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Process Step" WHERE (Process Code=FIELD(Process Code),
                                                                                           Previous Status=FIELD(Process Status No.),
                                                                                           Active=CONST(Yes),
                                                                                           Manual User Step=CONST(Yes)));
                                                   CaptionML=[ENU=User Next Step Available;
                                                              FRA=Etape suivante disponible];
                                                   Editable=No }
    { 50524;  ;Last Status Change  ;Date          ;CaptionML=[ENU=User Next Step Available;
                                                              FRA=Date dernier changement statut];
                                                   Editable=No }
    { 50525;  ;Extranet Delay Calc. Base;Option   ;OnValidate=BEGIN
                                                                UpdateExtranetDelay;
                                                              END;

                                                   CaptionML=[ENU=Extranet Delay Calc. Base;
                                                              FRA=Base calcul d‚lai extranet];
                                                   OptionCaptionML=[ENU=Last Status Change,Assigned Date,Exp. Previsit Date,Previsit Date,Exp. Work Start Date,Exp. Work End Date,Work Start Date,Work End Date,Next Appointment Date,Quote Receive Date,Work Restart Date,Arrival Date,Quote Acceptance;
                                                                    FRA=Date dernier changement statut,Date assignation,Date pr‚v. pr‚visite,Date pr‚visite,Date pr‚v. d‚but travaux,Date pr‚v. fin travaux,Date d‚but travaux,Date fin travaux,Date prochain contr“le,Date r‚ception devis,Date reprise travaux,Date d'arriv‚e r‚elle,Date acceptation devis];
                                                   OptionString=LastStatusChange,Assigned,ExpPrevisit,Previsit,ExpWorkStart,ExpWorkEnd,WorkStart,WorkEnd,NextAppointment,QuoteReceive,WorkRestart,ArrivalDate,QuoteAcceptance }
    { 50526;  ;Extranet Delay Date Base;Date      ;CaptionML=[ENU=Extranet Delay Date Base;
                                                              FRA=Date calcul d‚lai extranet];
                                                   Editable=No }
    { 50530;  ;Quote Process Code Filter;Code10   ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Quote Process Code Filter;
                                                              FRA=Filtre code processus devis];
                                                   Editable=No }
    { 50531;  ;Quote Proc. Status No. Filter;Integer;
                                                   FieldClass=FlowFilter;
                                                   OnValidate=VAR
                                                                lProcessIntervMgt@1100281000 : Codeunit 50041;
                                                              BEGIN
                                                                lProcessIntervMgt.OnChangeProcessStatus(Rec);
                                                              END;

                                                   CaptionML=[ENU=Quote Proc. Status No. Filter;
                                                              FRA=Filtre nø statut processus devis];
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 50532;  ;Quote Process Status Descr.;Text30 ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Process Status".Description WHERE (Process Code=FIELD(FILTER(Quote Process Code Filter)),
                                                                                                          Status No.=FIELD(FILTER(Quote Proc. Status No. Filter))));
                                                   OnLookup=VAR
                                                              lServIntervQuote@1100281003 : Record 50076;
                                                              lQuoteProcessCode@1100281002 : Code[10];
                                                              lQuoteStatusNo@1100281001 : Integer;
                                                              lProcessStatusHistory@1100281000 : Record 50047;
                                                            BEGIN
                                                              GetQuoteProcess(lServIntervQuote, lQuoteProcessCode, lQuoteStatusNo);
                                                              lProcessStatusHistory.ListHistory
                                                                (FALSE, DATABASE::"Service Intervention Quote","Service Header No.", '', "Line No.", lServIntervQuote."Line No.");
                                                            END;

                                                   CaptionML=[ENU=Quote Status Description;
                                                              FRA=Etat devis];
                                                   Editable=No }
    { 50533;  ;No. of Quotes       ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Service Intervention Quote" WHERE (Service Header No.=FIELD(Service Header No.),
                                                                                                         Intervention Line No.=FIELD(Line No.),
                                                                                                         Process Code=FIELD(Quote Process Code Filter),
                                                                                                         Process Status No.=FIELD(Quote Proc. Status No. Filter)));
                                                   CaptionML=[ENU=No. of Quotes;
                                                              FRA=Nombre de devis];
                                                   Editable=No }
    { 50550;  ;Multi specialities  ;Boolean       ;CaptionML=[ENU=Multi specialities;
                                                              FRA=Multi sp‚cialit‚s] }
    { 50602;  ;Sale Order Nb       ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Sales Header" WHERE (Document Type=CONST(Order),
                                                                                           Service Header No.=FIELD(Service Header No.),
                                                                                           Intervention Line No.=FIELD(Line No.),
                                                                                           Service No.=FIELD(Service No.)));
                                                   OnLookup=VAR
                                                              lSalesHeader@1100281000 : Record 36;
                                                              lCounter@1100281001 : Integer;
                                                            BEGIN
                                                              lSalesHeader.SETCURRENTKEY("Service No.","Service Header No.","Intervention Line No.","Quote Line No.");
                                                              lSalesHeader.SETRANGE("Service No.","Service No.");
                                                              lSalesHeader.SETRANGE("Service Header No.","Service Header No.");
                                                              lSalesHeader.SETRANGE("Intervention Line No.","Line No.");
                                                              lSalesHeader.SETRANGE("Document Type",lSalesHeader."Document Type"::Order);
                                                              lCounter := lSalesHeader.COUNT;
                                                              CASE lCounter OF
                                                                0 : ;
                                                                1 : FORM.RUNMODAL(FORM::"Sales Order",lSalesHeader);
                                                                ELSE FORM.RUNMODAL(FORM::"Sales List",lSalesHeader);
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Sale Order Nb;
                                                              FRA=Nb commande vente];
                                                   Editable=No }
    { 50603;  ;Purchase Order Nb   ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Purchase Header" WHERE (Document Type=CONST(Order),
                                                                                              Service Header No.=FIELD(Service Header No.),
                                                                                              Intervention Line No.=FIELD(Line No.),
                                                                                              Service No.=FIELD(Service No.)));
                                                   OnLookup=VAR
                                                              lPurchaseHeader@1100281000 : Record 38;
                                                              lCounter@1100281001 : Integer;
                                                            BEGIN
                                                              lPurchaseHeader.SETCURRENTKEY("Service No.","Service Header No.","Intervention Line No.","Quote Line No.");
                                                              lPurchaseHeader.SETRANGE("Service No.","Service No.");
                                                              lPurchaseHeader.SETRANGE("Service Header No.","Service Header No.");
                                                              lPurchaseHeader.SETRANGE("Intervention Line No.","Line No.");
                                                              lPurchaseHeader.SETRANGE("Document Type",lPurchaseHeader."Document Type"::Order);
                                                              lCounter := lPurchaseHeader.COUNT;
                                                              CASE lCounter OF
                                                                0 : ;
                                                                1 : BEGIN
                                                                  FORM.RUNMODAL(FORM::"Purchase Order",lPurchaseHeader);
                                                                END;
                                                                ELSE FORM.RUNMODAL(FORM::"Purchase List",lPurchaseHeader);
                                                              END;
                                                            END;

                                                   CaptionML=[ENU=Purchase Order Nb;
                                                              FRA=Nb commande achat];
                                                   Editable=No }
    { 50610;  ;Deductible Amount   ;Decimal       ;OnValidate=BEGIN
                                                                //<<IMH57.ST
                                                                CALCFIELDS("Deductible Amt - Total Minutes");
                                                                IF "Deductible Amount" < "Deductible Amt - Total Minutes" THEN
                                                                  ERROR(Text50009, FIELDCAPTION("Deductible Amount"));
                                                                //>>IMH57.ST
                                                                CalcTotOrderAmount;//IMH47
                                                              END;

                                                   CaptionML=[ENU=Deductible Amount;
                                                              FRA=Montant franchise];
                                                   AutoFormatType=1 }
    { 50611;  ;Interv. Minutes Amount;Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service Intervention Minutes".Amount WHERE (Service Header No.=FIELD(Service Header No.),
                                                                                                                Service Intervention Line No.=FIELD(Line No.),
                                                                                                                Type=CONST(Urgent)));
                                                   CaptionML=[ENU=Interv. Minutes Amount;
                                                              FRA=Montant PV HT];
                                                   Editable=No }
    { 50612;  ;Interv. Minutes Amnt Incl. VAT;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Service Intervention Minutes"."Amount Incl. VAT" WHERE (Service Header No.=FIELD(Service Header No.),
                                                                                                                            Service Intervention Line No.=FIELD(Line No.),
                                                                                                                            Type=CONST(Urgent)));
                                                   CaptionML=[ENU=Interv. Minutes Amnt Incl. VAT;
                                                              FRA=Montant PV TTC];
                                                   Editable=No }
    { 50615;  ;Unsecured Depreciation Amount;Decimal;
                                                   OnValidate=BEGIN
                                                                //<<IMH57.ST
                                                                CALCFIELDS("Uns. Depr. Amt - Total Minutes");
                                                                IF "Unsecured Depreciation Amount" < "Uns. Depr. Amt - Total Minutes" THEN
                                                                  ERROR(Text50009, FIELDCAPTION("Unsecured Depreciation Amount"));
                                                                //>>IMH57.ST
                                                                CalcTotOrderAmount;//IMH47
                                                              END;

                                                   CaptionML=[ENU=Unsecured Depreciation Amount;
                                                              FRA=V‚tust‚ non garantie mtt];
                                                   BlankZero=Yes;
                                                   AutoFormatType=1 }
    { 50616;  ;Deductible Depreciat Amt.;Decimal  ;OnValidate=BEGIN
                                                                CalcTotOrderAmount;//IMH47
                                                              END;

                                                   CaptionML=[ENU=Deductible Depreciat Amt.;
                                                              FRA=Franchise v‚tust‚ non garantie mtt];
                                                   BlankZero=Yes;
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 56019;  ;DARVA Interface     ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Header"."DARVA Interface" WHERE (No.=FIELD(Service Header No.),
                                                                                                                Document Type=CONST(Invoice)));
                                                   CaptionML=[ENU=DARVA Interface;
                                                              FRA=Interface DARVA] }
    { 56020;  ;Service Cause       ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Service."Service Cause" WHERE (Service No.=FIELD(Service No.)));
                                                   TableRelation="Fault Reason Code".Code;
                                                   CaptionML=[ENU=Service Cause;
                                                              FRA=Cause intervention];
                                                   Editable=No }
    { 56021;  ;Last Modification Date work;Date   ;TableRelation="Change Log Entry"."Date and Time" }
    { 56022;  ;Expected Work Start Date Input;Date;TableRelation="Change Log Entry"."Date and Time";
                                                   CaptionML=[ENU=Date de saisie de la date pr‚visionnelle de d‚but de travaux;
                                                              FRA=Date de saisie de la date pr‚visionnelle de d‚but de travaux] }
    { 56023;  ;Is OK to DRT        ;Option        ;CaptionML=[ENU=Is Valide to DRT;
                                                              FRA=Valide pour la DRT];
                                                   OptionCaptionML=[ENU=" ,Yes,No";
                                                                    FRA=" ,Oui,Non"];
                                                   OptionString=[ ,Yes,No] }
    { 56024;  ;Delay Reason Code   ;Code10        ;TableRelation=Code WHERE (Table ID=CONST(50075),
                                                                             Field ID=CONST(56024));
                                                   CaptionML=[ENU=Delay Reason Code;
                                                              FRA=Code motif retard];
                                                   Description=MATMUT02 }
    { 57010;  ;PMU Owner No.       ;Code10        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Header"."PMU Owner No." WHERE (No.=FIELD(Service Header No.)));
                                                   CaptionML=FRA=Code ‚metteur PMU;
                                                   Editable=No }
    { 57011;  ;PMU Flux Type       ;Code10        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Header"."PMU Flux Type" WHERE (No.=FIELD(Service Header No.)));
                                                   CaptionML=FRA=Type flux PMU;
                                                   Editable=No }
    { 57012;  ;PMU Interface       ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Header"."PMU Interface" WHERE (No.=FIELD(Service Header No.)));
                                                   CaptionML=[ENU=PMU Interface;
                                                              FRA=Interface PMU];
                                                   Editable=No }
    { 57013;  ;IMA Reference No.   ;Code30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Header"."IMA Reference No." WHERE (No.=FIELD(Service Header No.)));
                                                   CaptionML=[ENU=IMA Reference No.;
                                                              FRA=Nø r‚f‚rence IMA];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Service Header No.,Line No.             ;Clustered=Yes }
    {    ;Service Header No.,Intervention No.     ;MaintainSQLIndex=No }
    {    ;Provider No.,Mission Status,Intervention Status,Suspended,Closed }
    {    ;Contact No.,Corporate No.                }
    {    ;Contact Name,Corporate No.              ;KeyGroups=SearchCont }
    {    ;Service No.,Service Header No.,Line No.  }
    {    ;Assigned Date,Provider No.,Intervention Status,Closed,Multi specialities }
    {    ;Provider No.,Claim,Assigned Date,Service Header Claims No. }
    {    ;Source Provider No.                      }
    {    ;Campaign No.                             }
    {    ;Closed DateTime,Provider No.,Intervention Status,Closed,Multi specialities }
    {    ;Provider No.,Service Order Type,Closed   }
    {    ;Provider Name,Corporate No.              }
    {    ;Process Code,Process Status No.          }
    {    ;Assigned Date,Intervention Status,Claim  }
    {    ;Service Creation Date                    }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      PostCode@1100281000 : Record 225;
      Text50000@1100281001 : TextConst 'ENU=%1 must be after workdate.;FRA=La %1 doit ˆtre sup‚rieure ou ‚gale … la date du jour';
      Text50001@1100281002 : TextConst 'ENU=%1 must be higher than %2;FRA=La %1 doit ˆtre sup‚rieure ou ‚gale … la %2';
      Text50002@1100281003 : TextConst 'ENU=%1 must be before workdate.;FRA=La %1 doit ˆtre inf‚rieure ou ‚gale … la date du jour';
      Text50003@1100281005 : TextConst 'ENU=%1 must be after workdate.;FRA=La %1 doit ˆtre sup‚rieure … la date du jour';
      Text50004@1100281004 : TextConst 'ENU=%1 must be before workdate.;FRA=La %1 doit ˆtre inf‚rieure … la date du jour';
      Text50005@1100281006 : TextConst 'ENU=%1 must be after Assigned Date.;FRA=La %1 doit ˆtre sup‚rieure … la date d''assignation.';
      Text50006@1100281009 : TextConst 'ENU=%1 must be before workdatetime.;FRA=La %1 doit ˆtre inf‚rieure ou ‚gale … l''heure actuelle';
      Text50008@1100281007 : TextConst 'FRA=Vous ne pouvez pas supprimer d''enregistrement dans cette table';
      ServLog@1100281008 : Codeunit 50149;
      Text50009@1000000000 : TextConst 'ENU=You can''t change %1 because a bigger amount is affected to minutes.;FRA=Vous ne pouvez pas changer %1 car un montant sup‚rieur est affect‚ dans les PV.';
      Text50010@1000000001 : TextConst 'ENU=You can''t change %1 because intervention have a control.;FRA=Vous ne pouvez pas modifier %1 car l''intervention a un contr“le.';
      SkipAutoStep@1100281010 : Boolean;

    PROCEDURE TouchRecord@1100281006(pInsert@1100281000 : Boolean);
    BEGIN
      IF pInsert THEN BEGIN
        "Creation Date" := CURRENTDATETIME;
        "Creation User ID" := USERID;
        "Last Status Change" := TODAY;
      END;
      "Last Modification Date" := CURRENTDATETIME;
      "Last Modification User ID" := USERID;
    END;

    PROCEDURE GetNextLineNo@1100281002();
    VAR
      lInterventionLine@1100281000 : Record 50075;
    BEGIN
      lInterventionLine.LOCKTABLE(TRUE);
      lInterventionLine.SETRANGE("Service Header No.","Service Header No.");
      //<<IMH02.ST
      IF lInterventionLine.ISEMPTY THEN BEGIN
        "Line No." := 10000;
        "Intervention No." := 1;
        EXIT;
      END;

      lInterventionLine.FINDLAST;
      "Line No." := lInterventionLine."Line No." + 10000;
      lInterventionLine.SETCURRENTKEY("Service Header No.","Intervention No.");
      lInterventionLine.FINDLAST;
      "Intervention No." := lInterventionLine."Intervention No." + 1;
    END;

    PROCEDURE GetServiceHeaderInfo@1100281010();
    VAR
      lServiceHeader@1100281000 : Record 5900;
      lService@1100281001 : Record 50066;
      lServiceOrderType@1100281002 : Record 5903;
      lInterventionMgt@1100281003 : Codeunit 50014;
    BEGIN
      // R‚cupŠre les informations de Service Header
      IF NOT lServiceHeader.GET(lServiceHeader."Document Type"::Invoice,"Service Header No.") THEN
        EXIT;

      //<<IMH49.PC
      "DARVA Interface" := lServiceHeader."DARVA Interface";
      //>>IMH49.PC

      "Contact No." := lServiceHeader."Contact No.";
      "Contact Name" := lServiceHeader."Contact Name";
      "Alt. Address Code" := lServiceHeader."Ship-to Address Code";
      Address := lServiceHeader."Ship-to Address";
      "Address 2" := lServiceHeader."Ship-to Address 2";
      "Address 3" := lServiceHeader."Ship-to Address 3";//IMH48
      City := lServiceHeader."Ship-to City";
      County := lServiceHeader."Ship-to County";
      "Post Code" := lServiceHeader."Ship-to Post Code";
      "Country/Region Code" := lServiceHeader."Ship-to Country/Region Code";
      "Geo. Reference Code" := lServiceHeader."Ship-to Geo. Reference Code";
      "Phone No." := lServiceHeader."Ship-to Phone";
      "Fax No." := lServiceHeader."Ship-to Fax No.";
      "E-Mail" := lServiceHeader."Ship-to E-Mail";
      //IMH45.ST lServiceHeader.CALCFIELDS("Contact Mobile Phone No.");
      //IMH45.ST "Mobile Phone No." := lServiceHeader."Contact Mobile Phone No.";

      //<<IMH15
      //Urgent := lServiceHeader.Urgent;
      Urgent := (lServiceHeader.Urgent = lServiceHeader.Urgent::Yes);
      //>>IMH15
      "Quote Managment" := lServiceHeader."Quote Managment";
      "Service No." := lServiceHeader."Service No.";
      "Corporate No." := lServiceHeader."Corporate No.";
      "Corporate Region Code" := lServiceHeader."Corporate Region Code";
      "Contract Form Code" := lServiceHeader."Contract Form Code";
      "Contract Occurence No." := lServiceHeader."Contract Occurence No.";
      "Deductible 1 (LCY)" := lServiceHeader."Deductible 1 (LCY)";
      "Deductible 2 (LCY)" := lServiceHeader."Deductible 2 (LCY)";
      VALIDATE("Service Order Type", lServiceHeader."Service Order Type"); //IMH03 isat.zw

      //<<IMH56
      // necessaire au calcul de vestus
      lServiceHeader.CALCFIELDS("Total Descr. Amount Incl. VAT");
      "Global Amount (Incl. VAT)" := lServiceHeader."Total Descr. Amount Incl. VAT";
      //>>IMH56
      //<<IMH30
      lInterventionMgt.CalcIntervDeductibleAmount(Rec, lServiceHeader);
      lInterventionMgt.CalcUnsecuredDepreciationAmt(Rec, lServiceHeader);
      //>>IMH30

      {
      //<<IMH04 isat.zw
      IF lServiceOrderType.GET(lServiceHeader."Service Order Type") THEN BEGIN
        IF "Process Code" = '' THEN
          "Process Code" := lServiceOrderType."Interv. Process Code";
        IF "Process Status" = 0 THEN
          "Process Status" := lServiceOrderType."Interv. Start Status";
      END;
      //>>IMH04 isat.zw
      }
      "Building Trade" := lServiceHeader."Building Trade";
      "Main Speciality" := lServiceHeader."Main Speciality";
      "Member No." := lServiceHeader."Member No.";
      "Campaign No." := lServiceHeader."Campaign No.";  //IMH27
      CalcTotOrderAmount;//IMH47

      //<<IMH84.ACO
      "Other Phone No. Type" := lServiceHeader."Other Phone No. Type";
      "Other Phone No." := lServiceHeader."Other Phone No.";
      //>>IMH84.ACO

      "Service Creation Date" := lServiceHeader."Service Creation Date";   //IMH87
    END;

    PROCEDURE GetProviderInfo@1100281000();
    VAR
      lProvider@1100281000 : Record 50000;
    BEGIN
      // r‚cupŠre les infos du fournisseur
      IF NOT lProvider.GET("Provider No.") THEN;
      "Provider Name" := lProvider.Name;
      "Provider Address" := lProvider.Address;
      "Provider Address 2" := lProvider."Address 2";
      "Provider City" := lProvider.City;
      "Provider Post Code" := lProvider."Post Code";
      "Provider Country/Region Code" := lProvider."Country/Region Code";
      "Provider Geo. Reference Code" := lProvider."Geo. Reference Code";
      "Assigned Date" := WORKDATE;
    END;

    PROCEDURE GetTradeBuildDescr@1100281001() : Text[30];
    VAR
      lSpecialization@1100281000 : Record 50005;
    BEGIN
      IF "Building Trade" = '' THEN
        EXIT;
      IF NOT lSpecialization.GET("Building Trade") THEN
        EXIT;
      EXIT(lSpecialization.Description);
    END;

    PROCEDURE GetSpecialityDescr@1100281003() : Text[30];
    VAR
      lSpecialization@1100281000 : Record 50005;
    BEGIN
      IF "Main Speciality" = '' THEN
        EXIT;
      IF NOT lSpecialization.GET("Main Speciality") THEN
        EXIT;
      EXIT(lSpecialization.Description);
    END;

    LOCAL PROCEDURE SetClosed@1100281005();
    VAR
      lServiceHeader@1100281002 : Record 5900;
      lInvoicingMgt@1100281000 : Codeunit 50080;
      lInterventionMgt@1100281001 : Codeunit 50014;
    BEGIN
      CASE "Intervention Status" OF
        "Intervention Status"::Cancel :BEGIN
        //<<IMH46
          //IF lServiceHeader.GET(lServiceHeader."Document Type"::Invoice,"Service Header No.") THEN BEGIN
          //  lInterventionMgt.AffectIntervDeductibleAmount(Rec,lServiceHeader);
          //END;
        //>>IMH46
          IF NOT Closed THEN
            VALIDATE(Closed, TRUE);
        END;
        "Intervention Status"::Closed : BEGIN
          //<<IMH83 d‚sactiv‚
          //CALCFIELDS("Minutes Status", Reserves);
          //IF ("Minutes Status" = "Minutes Status"::Validated) AND (NOT Reserves) THEN BEGIN
          //>>IMH83
            //<<IMH24
            // Appel fonction facturation : reception
      //      lInvoicingMgt.ReceiptPurchaseOrder("Service No."
      //        ,"Service Header No."
      //        ,"Line No.");
            //>>IMH24
            IF NOT Closed THEN
              VALIDATE(Closed, TRUE);
          //END;
        END;
        ELSE BEGIN
          IF Closed THEN
            VALIDATE(Closed, FALSE);
        END;
      END;
    END;

    PROCEDURE UpdateServiceInterventionLine@1100281004(pServiceHeader@1100281000 : Record 5900);
    VAR
      lServiceInterventionLine@1100281001 : Record 50075;
    BEGIN
      lServiceInterventionLine.SETRANGE("Service Header No.",pServiceHeader."No.");
      lServiceInterventionLine.SETFILTER("Intervention Status",'<%1',lServiceInterventionLine."Intervention Status"::Closed);
      lServiceInterventionLine.MODIFYALL(lServiceInterventionLine."Quote Managment",pServiceHeader."Quote Managment");
    END;

    PROCEDURE OpenComments@1100281009(pCode@1100281001 : Code[10]);
    VAR
      lAdvCommentLine@1100281000 : Record 50056;
    BEGIN
      lAdvCommentLine.SETCURRENTKEY("Source Table ID","Source No.","Source No. 2","Source No. 3","Source No. 4","Line No.");
      lAdvCommentLine.SETRANGE("Source Table ID",DATABASE::"Service Intervention Line");
      lAdvCommentLine.SETRANGE("Source No.","Service No.");
      lAdvCommentLine.SETRANGE("Source No. 2","Service Header No.");
      lAdvCommentLine.SETRANGE("Source No. 3","Line No.");
      lAdvCommentLine.SETRANGE("Source No. 4",pCode);
      IF ISSERVICETIER THEN
        PAGE.RUNMODAL(0,lAdvCommentLine)
      ELSE
        FORM.RUNMODAL(0,lAdvCommentLine);
    END;

    PROCEDURE OpenContactCard@1100281008();
    VAR
      lContact@1100281000 : Record 5050;
    BEGIN
      IF lContact.GET("Contact No.") THEN
        IF ISSERVICETIER THEN
          PAGE.RUNMODAL(PAGE::"Contact Card",lContact)
        ELSE
          FORM.RUNMODAL(FORM::"Contact Card",lContact);
    END;

    PROCEDURE OpenProviderCard@1100281007();
    VAR
      lProvider@1100281000 : Record 50000;
    BEGIN
      IF lProvider.GET("Provider No.") THEN
        IF ISSERVICETIER THEN
          PAGE.RUNMODAL(PAGE::"Provider Card",lProvider)
        ELSE
          FORM.RUNMODAL(FORM::"Provider Card",lProvider)
    END;

    PROCEDURE CreateInteraction@1100281015();
    VAR
      lSegmentLine@1000 : TEMPORARY Record 5077;
    BEGIN
      //IMH05 isat.zw
      //<<IMH09
      //lSegmentLine.CreateInteracFromIntervention(Rec);
      lSegmentLine.CreateInteracFromIntervention(Rec,'');
      //>>IMH09
    END;

    PROCEDURE GetDefaultProcessStatusCode@1100281021(VAR pProcessCode@1100281002 : Code[10];VAR pProcessStatus@1100281003 : Integer);
    VAR
      lServOrderType@1100281000 : Record 5903;
      lProductCatalog@1100281001 : Record 50060;
    BEGIN
      //IMH08 isat.zw
      IF lProductCatalog.GET("Corporate No.", "Service Order Type") THEN
        IF lProductCatalog."Interv. Process Code" <> '' THEN BEGIN
          pProcessCode := lProductCatalog."Interv. Process Code";
          pProcessStatus := lProductCatalog."Interv. Start Status";
          EXIT;
        END;

      IF lServOrderType.GET("Service Order Type") THEN BEGIN
        pProcessCode := lServOrderType."Interv. Process Code";
        pProcessStatus := lServOrderType."Interv. Start Status";
      END;
    END;

    PROCEDURE AutoStep@1100281011() : Boolean;
    VAR
      lProcessInterventionMgt@1100281000 : Codeunit 50041;
    BEGIN
      //IMH12.ST
      MODIFY; //IMH85.ST
      EXIT(lProcessInterventionMgt.TestAutoStep(Rec));
    END;

    PROCEDURE CalcWorkGlobalAmount@1100281012() rValue : Decimal;
    VAR
      lInterventionDescription@1100281000 : Record 50070;
    BEGIN
      lInterventionDescription.SETRANGE("Service Header No.","Service Header No.");
      lInterventionDescription.SETRANGE("Intervention Speciality",TRUE);
      lInterventionDescription.SETFILTER("Intervention Line No. Filter",'%1',"Line No.");
      IF lInterventionDescription.ISEMPTY THEN
        EXIT(0);
      REPEAT
        rValue += lInterventionDescription."Amount Incl. VAT";
      UNTIL lInterventionDescription.NEXT = 0;
      EXIT(rValue);
    END;

    PROCEDURE OnModifyMoisture@1100281013();
    VAR
      lServiceFieldHistory@1100281000 : Record 50087;
    BEGIN
      //IMH14
      IF Rec."Moisture %" = xRec."Moisture %" THEN
        EXIT;
      lServiceFieldHistory."Table ID" := DATABASE::"Service Intervention Line";
      lServiceFieldHistory."Service Header No." := "Service Header No.";
      lServiceFieldHistory."Intervention Line No." := "Line No.";
      lServiceFieldHistory."Field No." := FIELDNO("Moisture %");
      lServiceFieldHistory."Decimal Field Value" := "Moisture %";
      lServiceFieldHistory.INSERT(TRUE);
    END;

    PROCEDURE OnNextApointmentDate@1100281016();
    VAR
      lServiceFieldHistory@1100281000 : Record 50087;
    BEGIN
      //IMH22
      IF (Rec."Next Appointment Date" = xRec."Next Appointment Date") THEN
      //  AND (xRec."Next Appointment Date" <> 0D)  THEN
        EXIT;
      lServiceFieldHistory."Table ID" := DATABASE::"Service Intervention Line";
      lServiceFieldHistory."Service Header No." := "Service Header No.";
      lServiceFieldHistory."Intervention Line No." := "Line No.";
      lServiceFieldHistory."Field No." := FIELDNO("Next Appointment Date");
      lServiceFieldHistory."Date Field Value" := "Next Appointment Date";
      lServiceFieldHistory.INSERT(TRUE);
    END;

    PROCEDURE GetQuoteProcess@1100281014(VAR pServIntervQuote@1100281004 : Record 50076;VAR pQuoteProcessCode@1100281000 : Code[10];VAR pQuoteStatusNo@1100281001 : Integer) : Boolean;
    VAR
      lServiceIntervQuote@1100281002 : Record 50076;
      lMinProcessStatusNo@1100281003 : Integer;
    BEGIN
      //<<IMH22
      lServiceIntervQuote.SETRANGE("Service Header No.","Service Header No.");
      lServiceIntervQuote.SETRANGE("Intervention Line No.","Line No.");
      lServiceIntervQuote.SETRANGE(Active,TRUE);
      IF lServiceIntervQuote.ISEMPTY THEN
        lServiceIntervQuote.SETRANGE(Active);
      IF lServiceIntervQuote.ISEMPTY THEN
        EXIT(FALSE);
      lServiceIntervQuote.FINDSET(FALSE);
      lMinProcessStatusNo := lServiceIntervQuote."Process Status No.";
      pQuoteProcessCode := lServiceIntervQuote."Process Code";
      pQuoteStatusNo := lServiceIntervQuote."Process Status No.";
      pServIntervQuote := lServiceIntervQuote;
      IF lServiceIntervQuote.NEXT <> 0 THEN
        REPEAT
          IF lMinProcessStatusNo > lServiceIntervQuote."Process Status No." THEN BEGIN
            pQuoteProcessCode := lServiceIntervQuote."Process Code";
            pQuoteStatusNo := lServiceIntervQuote."Process Status No.";
            lMinProcessStatusNo := lServiceIntervQuote."Process Status No.";
            pServIntervQuote := lServiceIntervQuote;
          END;
        UNTIL lServiceIntervQuote.NEXT = 0;
      EXIT(TRUE);
      //>>IMH22
    END;

    PROCEDURE UpdateSpeciality@1100281017();
    VAR
      lSpeciality@1100281000 : Code[20];
      lBuildTrade@1100281001 : Code[20];
      lServiceInterventionLine@1100281003 : Record 50075;
      lServiceCode@1100281004 : Record 50040;
    BEGIN
      lSpeciality := '';
      lBuildTrade := '';

      lServiceCode.RESET;
      lServiceCode.SETRANGE("Service Type",lServiceCode."Service Type"::Intervention);
      lServiceCode.SETRANGE("Service No.","Service No.");
      lServiceCode.SETRANGE("Service Header No.","Service Header No.");
      lServiceCode.SETRANGE("Intervention Line No.","Line No.");
      lServiceCode.SETRANGE(Main,TRUE);
      IF lServiceCode.FINDFIRST THEN
      BEGIN
        lSpeciality := lServiceCode.Code;
        lBuildTrade := lServiceCode."Building Trade No.";
      END;
      IF (lSpeciality = '') THEN
      BEGIN
        lServiceCode.SETRANGE(Main);
        IF lServiceCode.FINDFIRST THEN
        BEGIN
          lSpeciality := lServiceCode.Code;
          lBuildTrade := lServiceCode."Building Trade No.";
        END;
      END;

      "Building Trade" := lBuildTrade;
      "Main Speciality" := lSpeciality;
    END;

    PROCEDURE GetAltAddress@1100281018();
    VAR
      lContactAltAddr@1100281000 : Record 5051;
    BEGIN
      IF NOT lContactAltAddr.GET("Contact No.", "Alt. Address Code") THEN
        EXIT;
      Address := lContactAltAddr.Address;
      "Address 2" := lContactAltAddr."Address 2";
      City := lContactAltAddr.City;
      "Post Code" := lContactAltAddr."Post Code";
      "Country/Region Code" := lContactAltAddr."Country/Region Code";
      "Phone No." := lContactAltAddr."Phone No.";
      "Fax No." := lContactAltAddr."Fax No.";
      //IMH45.ST "Mobile Phone No." := lContactAltAddr."Mobile Phone No.";
      "E-Mail" := lContactAltAddr."E-mail";
      County := lContactAltAddr.County;
      "Geo. Reference Code" := lContactAltAddr."Geo. Reference Code";
    END;

    PROCEDURE CreateMinute@1100281019();
    VAR
      lservicecode@1100281000 : Record 50040;
      lAmount@1100281001 : Decimal;
      lAmountInclVAT@1100281002 : Decimal;
      lServInterMinutes@1100281003 : Record 50084;
      lLineNo@1100281004 : Integer;
      lVATBusinessGroup@1100281005 : Code[10];
      lServLog@1100281006 : Codeunit 50149;
    BEGIN
      IF "Quote Managment" THEN
        EXIT;

      lAmount := 0;
      lAmountInclVAT := 0;
      lVATBusinessGroup := '';

      lservicecode.RESET;
      //<<IMH52.ST
      lservicecode.SETRANGE("Service Type", lservicecode."Service Type"::Intervention);
      lservicecode.SETRANGE("Service No.", "Service No.");
      //>>IMH52.ST
      lservicecode.SETRANGE("Service Header No.","Service Header No.");
      lservicecode.SETRANGE("Intervention Line No.","Line No.");
      IF NOT lservicecode.ISEMPTY THEN
      BEGIN
        IF lservicecode.FINDSET THEN
        REPEAT
          //lservicecode.CALCFIELDS("Amount Excl. VAT","Amount Incl. VAT","Order VAT Prod. Posting Group");
          lAmount += lservicecode."Amount Excl. VAT";
          lAmountInclVAT += lservicecode."Amount Incl. VAT";
          IF (lVATBusinessGroup = '') THEN BEGIN
            lservicecode.CALCFIELDS("Order VAT Prod. Posting Group");
            lVATBusinessGroup := lservicecode."Order VAT Prod. Posting Group";
          END;
        UNTIL (lservicecode.NEXT = 0);
      END;

      IF (lAmount <> 0) THEN
      BEGIN
        lLineNo := 10000;
        lServInterMinutes.RESET;
        lServInterMinutes.SETRANGE("Service Header No.", "Service Header No.");
        lServInterMinutes.SETRANGE("Service Intervention Line No.", "Line No.");
        IF NOT lServInterMinutes.ISEMPTY THEN EXIT; //IMH45.ST

        lServInterMinutes.INIT;
        lServInterMinutes.VALIDATE("Service Header No.", "Service Header No.");
        lServInterMinutes.VALIDATE("Service Intervention Line No.", "Line No.");
        lServInterMinutes.InitNewLine;
        lServInterMinutes.Type := lServInterMinutes.Type::"End of work";
        lServInterMinutes.VALIDATE("VAT Prod. Posting Group",lVATBusinessGroup);
        lServInterMinutes.VALIDATE(Amount, lAmount);
        lServInterMinutes.VALIDATE("Amount Incl. VAT", lAmountInclVAT);
        lServInterMinutes."Without Quote" := TRUE;
      //<<IMH45.ST
        lServInterMinutes."Current Minutes" := TRUE;
        lServInterMinutes.TouchRecord(TRUE);
      //>>IMH45.ST
        lServInterMinutes.INSERT;
        lServLog.LogMinute(lServInterMinutes, 0);
      //  lServInterMinutes.CreatePurchOrder;
        "Minutes Document" := lServInterMinutes."Document No."; //IMH45.ST
      END;
    END;

    PROCEDURE ShowOrderAmount@1100281020() : Decimal;
    VAR
      lServiceInterventionQuote@1100281000 : Record 50076;
      lServiceMgtSetup@1100281001 : Record 5911;
      lResult@1100281002 : Decimal;
      lAmount@1100281007 : Decimal;
      lAmountInclVAT@1100281006 : Decimal;
      lServInterMinutes@1100281005 : Record 50084;
      lLineNo@1100281004 : Integer;
      lVATBusinessGroup@1100281003 : Code[10];
      lservicecode@1100281008 : Record 50040;
    BEGIN
      //<<IMH47
      EXIT("Total Order Amount Incl. VAT");
      //>>IMH47
      lServiceMgtSetup.GET;

      lServiceInterventionQuote.RESET;
      lServiceInterventionQuote.SETRANGE("Service Header No.","Service Header No.");
      lServiceInterventionQuote.SETRANGE("Intervention Line No.","Line No.");
      lServiceInterventionQuote.SETRANGE("Service Quote Type",lServiceMgtSetup."Oposite Quote");
      lServiceInterventionQuote.SETRANGE(Acceptance,lServiceInterventionQuote.Acceptance::Yes);
      IF lServiceInterventionQuote.FINDSET THEN BEGIN
        REPEAT
          lResult += lServiceInterventionQuote."Amount Incl. VAT";
          //EXIT(lServiceInterventionQuote."Amount Incl. VAT");
        UNTIL lServiceInterventionQuote.NEXT = 0;
        EXIT(lResult);
      END;

      lResult := 0;
      IF NOT "Quote Managment" THEN
      BEGIN
        lservicecode.RESET;
      //<<IMH52.ST
        lservicecode.SETRANGE("Service Type", lservicecode."Service Type"::Intervention);
        lservicecode.SETRANGE("Service No.", "Service No.");
      //>>IMH52.ST
        lservicecode.SETRANGE("Service Header No.","Service Header No.");
        lservicecode.SETRANGE("Intervention Line No.","Line No.");
        IF NOT lservicecode.ISEMPTY THEN
        BEGIN
          IF lservicecode.FINDSET THEN
          REPEAT
      //<<IMH52.ST ce ne sont pas des flowfields
      //      lservicecode.CALCFIELDS("Amount Excl. VAT","Amount Incl. VAT");
      //>>IMH52.ST
            lAmount += lservicecode."Amount Excl. VAT";
            lAmountInclVAT += lservicecode."Amount Incl. VAT";
          UNTIL (lservicecode.NEXT = 0);
        END;
        lResult := lAmountInclVAT;
      END;

      lServiceInterventionQuote.RESET;
      lServiceInterventionQuote.SETRANGE("Service Header No.","Service Header No.");
      lServiceInterventionQuote.SETRANGE("Intervention Line No.","Line No.");
      lServiceInterventionQuote.SETRANGE(Acceptance,lServiceInterventionQuote.Acceptance::Yes);
      IF lServiceInterventionQuote.FINDSET THEN
      REPEAT
        lResult += lServiceInterventionQuote."Amount Incl. VAT";
      UNTIL(lServiceInterventionQuote.NEXT = 0);

      EXIT (lResult);
    END;

    PROCEDURE CalcTotOrderAmount@1100281023();
    VAR
      lServInterQuote@1100281003 : Record 50076;
      lAmountInclVAT@1100281000 : Decimal;
      lAmountExclVAT@1100281001 : Decimal;
      lQuoteAmtInclVAT@1100281002 : Decimal;
      lQuoteAmtExclVAT@1100281005 : Decimal;
      lContradictoryQuote@1100281004 : Boolean;
    BEGIN
      //<<IMH47

      //<<IMH51.ISAT.EBA
      lServInterQuote.SETCURRENTKEY("Service Header No.","Intervention Line No.",Active,"Approval Status");
      lServInterQuote.SETRANGE("Service Header No.","Service Header No.");
      lServInterQuote.SETRANGE("Intervention Line No.","Line No.");
      lServInterQuote.SETRANGE(Active,TRUE);
      lServInterQuote.SETRANGE(Acceptance,lServInterQuote.Acceptance::Yes);
      IF NOT lServInterQuote.ISEMPTY THEN BEGIN
        lServInterQuote.FINDSET;
        REPEAT
          lServInterQuote.CALCFIELDS("Contradictory Quote");
          IF lServInterQuote."Contradictory Quote" THEN BEGIN
            lQuoteAmtInclVAT := lServInterQuote."Amount Incl. VAT";
            lQuoteAmtExclVAT := lServInterQuote."Amount Excl. VAT";

            lContradictoryQuote := TRUE;
          END ELSE BEGIN
            lQuoteAmtInclVAT := lQuoteAmtInclVAT + lServInterQuote."Amount Incl. VAT";
            lQuoteAmtExclVAT := lQuoteAmtExclVAT + lServInterQuote."Amount Excl. VAT";
          END;
        UNTIL (lServInterQuote.NEXT = 0) OR lContradictoryQuote;
      END;
      //>>IMH51.ISAT.EBA

      IF "Quote Managment" THEN BEGIN
        "Total Order Amount Incl. VAT" := 0;
        //<<IMH51.ISAT.EBA
        lAmountInclVAT := 0;
        lAmountExclVAT := 0;
        //>>IMH51.ISAT.EBA
      END ELSE BEGIN

        CALCFIELDS("Total Descr. Amount Incl. VAT","Total Descr. Amount Excl. VAT");
        lAmountInclVAT := "Total Descr. Amount Incl. VAT";
        //<<IMH51.ISAT.EBA
        lAmountExclVAT := "Total Descr. Amount Excl. VAT";
        //>>IMH51.ISAT.EBA

        IF lAmountInclVAT = 0 THEN BEGIN
          lAmountInclVAT := "Global Amount (Incl. VAT)";
          lAmountExclVAT := "Global Amount (Excl. VAT)";
        END;

        //<<IMH51.ISAT.EBA
        //"Total Order Amount Incl. VAT" := lAMount
        // - "Deductible Amount"
        // - "Unsecured Depreciation Amount";

        //"Total Order Amount Excl. VAT" := lAmountExclVAT
        // - "Deductible Amount"
        // - "Unsecured Depreciation Amount";
        //>>IMH51.ISAT.EBA
      END;

      //<<IMH51.ISAT.EBA
      IF lContradictoryQuote  THEN BEGIN
        "Total Order Amount Incl. VAT" :=
          lQuoteAmtInclVAT - "Deductible Amount" - "Unsecured Depreciation Amount";

        "Total Order Amount Excl. VAT" :=
          lQuoteAmtExclVAT - "Deductible Amount" - "Unsecured Depreciation Amount";

        //<<IMH53.ISAT.EBA
        "Total Work Amt Incl. VAT" := lQuoteAmtInclVAT;

        "Total Work Amt Excl. VAT" := lQuoteAmtExclVAT;
        //>>IMH53.ISAT.EBA

      END ELSE BEGIN
        "Total Order Amount Incl. VAT" :=
          lAmountInclVAT + lQuoteAmtInclVAT - "Deductible Amount" - "Unsecured Depreciation Amount";

        "Total Order Amount Excl. VAT" :=
          lAmountExclVAT + lQuoteAmtExclVAT - "Deductible Amount" - "Unsecured Depreciation Amount";

        //<<IMH53.ISAT.EBA
        "Total Work Amt Incl. VAT" := lAmountInclVAT + lQuoteAmtInclVAT;

        "Total Work Amt Excl. VAT" := lAmountExclVAT + lQuoteAmtExclVAT;
        //>>IMH53.ISAT.EBA
      END;
      //>>IMH51.ISAT.EBA
      //<<IMH61
      //Ajout du montant du PV urgent
      CALCFIELDS("Interv. Minutes Amount");
      CALCFIELDS("Interv. Minutes Amnt Incl. VAT");
      "Total Order Amount Incl. VAT" :=  "Total Order Amount Incl. VAT" + "Interv. Minutes Amnt Incl. VAT" ;
      "Total Order Amount Excl. VAT" :=  "Total Order Amount Excl. VAT" + "Interv. Minutes Amount";

      //>>IMH61
      IF "Total Order Amount Incl. VAT" < 0 THEN BEGIN
       "Total Order Amount Incl. VAT" := 0;
       "Total Order Amount Excl. VAT" := 0;
      END;

      //<<IMH53.ISAT.EBA
      IF "Total Work Amt Incl. VAT" < 0 THEN BEGIN
       "Total Work Amt Incl. VAT" := 0;
       "Total Work Amt Excl. VAT" := 0;
      END;
      //>>IMH53.ISAT.EBA

      VALIDATE("Total Order Amount Incl. VAT");
      "Total Order VAT Amount" := "Total Order Amount Incl. VAT" -
         "Total Order Amount Excl. VAT";

      //>>IMH47
    END;

    PROCEDURE PhoneNoAssistEdit@1000000000(pPhoneNo@1100281000 : Text[30]);
    VAR
      lCTIMgt@1100281001 : Codeunit 50138;
    BEGIN
      // IMH55.PC
      IF pPhoneNo <> '' THEN BEGIN
        lCTIMgt.MakeCall(pPhoneNo);
      END;
    END;

    PROCEDURE ShowCard@1100281022(pRunModal@1100281001 : Boolean);
    VAR
      lFormID@1100281000 : Integer;
      lRec@1100281003 : Record 50075;
      lServOrderType@1100281002 : Record 5903;
    BEGIN
      //IMH58.ST
      lRec := Rec;
      IF NOT lServOrderType.GET("Service Order Type") THEN
        CLEAR(lServOrderType);
      IF lServOrderType."Intervention Card Form ID" = 0 THEN
        lServOrderType."Intervention Card Form ID" := FORM::"Intervention Line Card"
      ELSE BEGIN
        lRec.FILTERGROUP(2);
        lRec.SETRANGE("Service Order Type", "Service Order Type");
        lRec.FILTERGROUP(0);
      END;
      IF pRunModal THEN
        FORM.RUNMODAL(lServOrderType."Intervention Card Form ID", lRec)
      ELSE
        FORM.RUN(lServOrderType."Intervention Card Form ID", lRec);
    END;

    PROCEDURE GetExtranetDelayDate@1100281024() rValue : Date;
    BEGIN
      //IMH60.ST
      IF "Last Status Change" = 0D THEN
        "Last Status Change" := DT2DATE("Creation Date");
      CASE "Extranet Delay Calc. Base" OF
        "Extranet Delay Calc. Base"::LastStatusChange : rValue := "Last Status Change";
        "Extranet Delay Calc. Base"::Assigned :     rValue := "Assigned Date";
        "Extranet Delay Calc. Base"::ExpPrevisit :  rValue := "Expected Previsit Date";
        "Extranet Delay Calc. Base"::Previsit :     rValue := "Previsit Date";
        "Extranet Delay Calc. Base"::ExpWorkStart : rValue := "Expected Work Start Date";
        "Extranet Delay Calc. Base"::ExpWorkEnd :   rValue := "Expected Work End Date";
        "Extranet Delay Calc. Base"::WorkStart :    rValue := "Work Start Date";
        "Extranet Delay Calc. Base"::WorkEnd :      rValue := "Work End Date";
        "Extranet Delay Calc. Base"::NextAppointment :  rValue := "Next Appointment Date";
        "Extranet Delay Calc. Base"::ArrivalDate :        rValue := "Arrival Date";
        "Extranet Delay Calc. Base"::QuoteReceive :  BEGIN
          CALCFIELDS("Quote Receive Date");
          rValue :="Quote Receive Date";
        END;
        "Extranet Delay Calc. Base"::QuoteAcceptance : BEGIN
          CALCFIELDS("QuoteAcceptance Date");
          rValue := DT2DATE("QuoteAcceptance Date");
        END;
        "Extranet Delay Calc. Base"::WorkRestart :  BEGIN
          CALCFIELDS("Work Restart Date");
          rValue :="Work Restart Date";
        END;
      END;
      IF rValue = 0D THEN
        rValue := "Last Status Change";
    END;

    PROCEDURE UpdateExtranetDelay@1000000001() : Boolean;
    VAR
      lDate@1000000000 : Date;
    BEGIN
      //IMH60.ST
      lDate := GetExtranetDelayDate;
      IF "Extranet Delay Date Base" <> lDate THEN BEGIN
        "Extranet Delay Date Base" := lDate;
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    PROCEDURE GetWikiLink@1100281051(VAR pWikiLinkVisible@1100281001 : Boolean INDATASET;VAR pWikiLink@1100281000 : Text[250]);
    VAR
      lHelpMgt@1100281002 : Codeunit 50084;
    BEGIN
      //IMH68
      pWikiLinkVisible := lHelpMgt.RunHelp("Process Code","Process Status No.","Service Order Type","Corporate No.",2,pWikiLink);
    END;

    PROCEDURE SendProviderOrderToIMA@1100281047(pServiceHeader@1100281001 : Record 5900);
    VAR
      lServIntervMin@1100281002 : Record 50084;
      lEAISentIMAAction@1100281000 : Codeunit 50130;
    BEGIN
      //<<IMH70.RC.ISAT
      IF NOT pServiceHeader."Real Estate Diag." THEN
        EXIT;

      lServIntervMin.RESET;
      lServIntervMin.SETRANGE("Service Header No.","Service Header No.");
      lServIntervMin.SETRANGE(Status,lServIntervMin.Status::Validated);
      lServIntervMin.SETRANGE(Type,lServIntervMin.Type::"End of work");
      IF NOT lServIntervMin.ISEMPTY THEN
        EXIT;

      lEAISentIMAAction.SendFromSrvHeader(pServiceHeader,TRUE,FALSE,TRUE)
      //>>IMH70.RC.ISAT
    END;

    PROCEDURE SendReturnToIMA@1100281046(pServiceHeader@1100281001 : Record 5900);
    VAR
      lServSetup@1100281003 : Record 5911;
      lReasonCode@1100281002 : Record 50079;
      lEAISentIMAAction@1100281000 : Codeunit 50130;
      lServiceInterventionQuote@1100281004 : Record 50076;
    BEGIN
      //<<IMH71.RC.ISAT

      IF NOT pServiceHeader."Home Service" THEN
        EXIT;

      IF pServiceHeader."Cheque / BC Receipt Date" = 0D THEN
        EXIT;

      IF lReasonCode.GET(DATABASE::"Service Header",50023,pServiceHeader."Closed Reason Code") THEN BEGIN
        IF NOT lReasonCode."Home Service Retractation" THEN
          EXIT;
      END ELSE
        EXIT;

      lServiceInterventionQuote.SETRANGE("Service Header No.","Service Header No.");
      lServiceInterventionQuote.SETRANGE(Acceptance,lServiceInterventionQuote.Acceptance::Yes);
      IF lServiceInterventionQuote.COUNT > 1 THEN
        EXIT;

      lServSetup.GET;
      lServSetup.TESTFIELD("Retraction Time");
      IF CALCDATE(lServSetup."Retraction Time",pServiceHeader."Cheque / BC Receipt Date") >= WORKDATE THEN
        lEAISentIMAAction.SendFromSrvHeader(pServiceHeader,FALSE,TRUE,FALSE);

      //>>IMH71.RC.ISAT
    END;

    PROCEDURE SetSkipAutoStep@1100281052(pSkipAutoStep@1100281000 : Boolean);
    BEGIN
      //IMH74
      SkipAutoStep := pSkipAutoStep;
    END;

    BEGIN
    {
      /** @r IMH138 @d 23/05/14 @a ISAT.ZW @v IMH6.01.P010 @s Projet PMU
          @c Ajouter champ 57010 - 57013 chmap PMU */
      /** @r IMH87 @d 16/04/14 @a ISAT.ZW @v IMH6.01.5071 @s Tri Service @h 5071
          @c Ajout tri sur la date de cr‚ation service + le passer de flowfield … un champ normal */
      /** @r IMH86 @d 31/10/13 @a ISAT.PC @v IMH6.01.348 @s Darva MATMUT @c Add field 56023 Is OK to DRT */
      /** @r IMH85 @d 11/07/13 @a ISAT.ST @v IMH6.01.351 @s JUILLET @h 3872 @c Modify avant autostep */
      /** @r IMH84 @d 19/06/13 @a ISAT.ACO @v IMH6.01.347 @s JUIN @h 4387
          @c Ajouts champs "Other Phone No. Type" et "Other Phone No." */
      /** @r IMH83 @d 30/05/13 @a ISAT.ZW @v IMH6.01.347 @s JUIN @h 4116 @c Gestion date cloture et case clotur‚ */
      /** @r IMH82 @d 13/05/13 @a ISAT.ZW @v IMH6.01.345 @s NEP IMH 4 @h 4470
          @c correction champ flowfiled "Interv. Minutes Amnt Incl. VAT" */
      /** @r IMH81 @d 18/04/13 @a ISAT.PC @v IMH6.01.P008 @s Optimisation @c Ajout cl‚ "Process Code","Process Statut No."
          @c Ajout cl‚ "Assigned Date","Intervention Status",Claim*/
      /** @r IMH80 @d 08/03/13 @a ISAT.ZW @v IMH6.01.340 @s NEP IMH 4 @h 4398 @c Ajout champ 50533 No. of Quotes */
      /** @r IMH79 @d 04/03/13 @a ISAT.ZW @v IMH6.01.340 @s NEP IMH 4 @h 4329 @c Mise … disposition du champ : 50070 canal */
      /** @r IMH78 @d 28/11/12 @a IMH.DBR @v IMH6.01.P009  @s Version NEP00005 @h 3869
          @c Mise … disposition du champ : Expected Work Start Date Input */
      /** @r IMH77 @d 29/11/12 @a ISAT.PC @v IMH6.01.P008 @s Optimisation */
      /** @r IMH75 @d 19/10/12 @a ISAT.ZW @v IMH6.01.212 @s Version 1.4.1 @h 3289 @c Correction */
      /** @r IMH74 @d 17/10/12 @a ISAT.ZW @v IMH6.01.224 @s NEP00006 @h 3702 @c Ajout SkipAutoStep */
      /** @r IMH73 @d 17/09/12 @a ISAT.PC @v IMH6.01.P005 @s Controle de devis NAV-FUSION @c D‚sactivation de code */
      /** @r IMH72 @d 06/09/12 @a ISAT.PC @v IMH6.01.210 @s Interface F.O.U.
          @c ajout cl‚ "Provider Name,Corporate No." */
      /** @r IMH71 @d 21/08/12 @a ISAT.RC @v IMH6.01.212 @s Version 1.4.1 @h 3289
          @s Remboursement au soci‚taire & ajout Fonction SendReturntoIMA */
      /** @r IMH70 @d 21/08/12 @a ISAT.RC @v IMH6.01.212 @s Version 1.4.1 @h 3331
          @s Facturation achat de IMH … IMH Service … la cloture de l'intervention, ajout Fonction SendProviderOrdertoIMA   */
      /** @r IMH69 @d 21/08/12 @a ISAT.RC @v IMH6.01.212 @s Version 1.4.1 @h 3331
          @s Facturation de IMH … IMH Service … la cloture de l'intervention   */
      /** @r IMH68 @d 18/07/12 @a ISAT.PC @v IMH6.01.226 @s V1.4 @h 3537 @c Lien Wiki service + intervention */
      /** @r IMH67 @d 11/07/12 @a IMH.WGA @v IMH6.01.105 @s Param Processus @c Ajout Champ Service Cause @h 3710 */
      /** @r IMH66 @d 22/05/12 @a ISAT.ST @v IMH6.01.105 @s Controle qualit‚ @c Ajout "Expected Previsit Date Input" */
      /** @r IMH65 @d 07/05/12 @a ISAT.ST @v IMH6.01.165 @s Extranet @c Ajout index Provider No.,Service Order Type,Closed */
      /** @r IMH64 @d 07/05/12 @a ISAT.ST @v IMH6.01.011 @s Service @c Maintien SQLIndex … non sur Service Header No.,Intervention No. */
      /** @r IHM63 @d 27/04/12 @a ISAT.ZW @v IMH6.01.105 @s Scoring @h 3304
          @c Ajout cl‚ "Closed DateTime,Provider No.,Intervention Status,Closed,Multi specialities" */
      /** @r IHM62 @d 24/04/12 @a ISAT.PC @v IMH6.01.028 @s EVC @c Ajout cl‚ Campaign No. */
      /** @r IMH61 @d 10/04/12 @a ISAT.LLT @v IMH6.01.011 @s Gestion du service @h 1353
          @c Ajout champ 50611 Interv. Minutes Amount
          @c Ajout champ 50612 Interv. Minutes Amnt Incl. VAT */
      /** @r IMH60 @d 30/03/12 @a ISAT.ST @v IMH6.01.165 @s Extranet - Mantis @h 3209
          @c Ajout des champs 329 Quote Receive Date, 50525 Extranet Delay Calc. Base, 50526 Extranet Delay Date Base */
      /** @r IMH59 @d 28/03/12 @a iSAT.ST @v IMH6.01.146 @s Refonte facturation @c Cr‚ation fourniseur */
      /** @r IMH58 @d 19/03/12 @a ISAT.ST @v IMH6.01.105 @s Controle qualit‚
          @c Ajout ShowCard */
      /** @r IMH57 @d 28/02/12 @a ISAT.ST @v IMH6.01.146 @s Refonte facturation
          @c Controle des montants franchises/Vetust‚ des PV
          @c Ajout champ 328 pour la gestion des rapports
          @c AJout champs 330 … 332 pour la facturation
          @c D‚sactivation IMH50 */
      /** @r IMH56 @d 30/01/12 @a ISAT.LLT @v IMH6.01.020 @s Gestion du service @h 1284
          @c Montant vetust‚ */
      /** @r IMH55 @d 14/01/12 @a ISAT.PC @v IMH6.01.129 @s CTI @c Ajout fonction PhoneNoAssistEdit */
      /** @r IMH54 @d 20/12/11 @a ISAT.ZW @v IMH6.01.011 @s Gestion du service
          @c Ajout champ 327 "Date validation devis" */
      /** @r IMH53 @d 15/11/11 @a ISAT.EBA @v IMH6.01.011 @s Gestion du service
          @c Ajout champ 325 "Total Work Amt Incl. VAT"
          @c Ajout champ 326 "Total Work Amt Excl. VAT" */
      /** @r IMH52 @d 14/11/11 @a ISAT.ST @v IMH6.01.011 @s Gestion du service
          @c Correction code sur les montants de Service Code
          @c Correction flowfields 701 et 702 (manque "Service Type") */
      /** @r IMH51 @d 24/10/11 @a ISAT.EBA @v IMH6.01.012 @s Gestion du devis */
      /** @r IMH50 @d 14/10/11 @a ISAT.SB @v IMH6.01.146 @s Gestion de la facturation @c Changement de d‚clencheur pour la cde achat. */
      /** @r IMH49 @d 14/09/11 @a ISAT.PC @v IMH6.01.132 @s Darva @c descente du champ DARVA Interface */
      /** @r IMH48 @d 09/09/11 @a ISAT.LLT @v IMH6.01.011 @s Gestion du service
          @c AJout champ 50204 Global Work Amount (Incl. VAT)
          @c Ajout champ Address 3 */
      /** @r IMH47 @d 06/09/11 @a ISAT.LLT @v IMH6.01.012 @s Gestion du devis
          @c Flowfield 315 Total Order Amount Incl. VA passe a un champ */
      /** @r IMH46 @d 05/09/11 @a ISAT.LLT @v IMH6.01.011 @s Gestion du service
          @c gestion de la franchise */
      /** @r IMH45 @d 30/08/11 @a ISAT.ST @v IMH6.01.011 @s Gestion du service
          @c T‚l‚phone mobile MEO en flowfield
          @c champ 14 Contact mobile Phone No. sur t50066 au lieu de t5050
          @c Modification de CreateMinutes */
      /** @r IMH44 @d 29/08/11 @a ISAT.LLT @v IMH6.01.011 @s Gestion du service
          @c Contr“le heure */
      /** @r IMH43 @d 01/08/11 @a ISAT.VA @v IMH6.01.146 @s Gestion du prix d'achat */
      /** @r IMH42 @d 25/07/11 @a ISAT.ZW @v IMH6.01.011 @s Gestion du service @c Synchro Adresse service */
      /** @r IMH41 @d 15/07/11 @a ISAT.ZW @v IMH6.01.161 @s Scoring
          @c Ajout champ 50550 Multi specialities + 50551 Scoring Calculed
          @c Ajout cl‚ : Provider No.,Creation Date,Intervention Status,Closed,Multi specialities */
      /** @r IMH40 @d 01/07/11 @a ISAT.ZW @v IMH6.01.161 @s Log Service @c Ajout champ 50071 Requisitioner */
      /** @r IMH39 @d 17/06/11 @a ISAT.MA @v IMH6.01.134 @s DARVA Management
          @c Ajout champ 56019 - DARVA Interface */
      /** @r IMH39 @d 17/06/11 @a ISAT.ST @v IMH6.01.161 @s Log Service @c Appel sur les triggers de table */
      /** @r IMH38 @d 07/06/11 @a ISAT.VA @v IMH6.01.146 @s Il ne faut plus pouvoir supprimer d'enregistrement */
      /** @r IMH37 @d 19/05/11 @a ISAT.PC @v IMH6.01.146 @s Gestion facturation
          @c Ajout champ 50602 Sales Order Nb
          @c Ajout champ 50603 Purchase Order Nb */
      /** @r IMH36 @d 13/05/11 @a ISAT.ZW @v IMH6.01.011 @s Gestion du service
          @c Ajout champ 78,79  Expected Arrival Date / Time, renomer champs 53, 54 … date/heure arrvi‚e r‚elle
          @c champ Date prochain contr“le olbligatoire si le champ Taux d'humidit‚ affiche une valeur >ou = … 20.*/
      /** @r IMH35 @d 13/05/11 @a ISAT.ST @v IMH6.01.011 @s Gestion du service
          @c Ajout champ 77 Assigned Time */
      /** @r IMH34 @d 11/05/11 @a ISAT.PC @v IMH6.01.011 @s Gestion du service
          @c Champ Intervention Statut : Ajout option suspendu*/
      /** @r IMH33 @d 27/04/11 @a ISAT.ZW @v IMH6.01.011 @s Contr“le des dates @c Gestion du service */
      /** @r IMH32 @d 19/04/11 @a ISAT.EBA @v IMH6.01.011 @s Contr“le des dates @c Gestion du service */
      /** @r IMH31 @d 07/04/11 @a ISAT.ST @v IMH6.01.011 @s Gestion du service
          @c Contr“le date prochain RDV */
      /** @r IMH30 @d 05/04/11 @a ISAT.ZW @v IMH6.01.146 @s Gestion facturation
          @c Ajout champ 50610 Deductible Amount + 50615 Unsecured Depreciation Amount*/
      /** @r IMH29 @d 01/04/11 @a ISAT.PC @v IMH6.01.146 @s Gestion facturation
          @c Ajout champ 50603 Purchase Order No.
          @c ajout creation de la commande en fonction du param‚trage*/
      /** @r IMH28 @d 31/03/11 @a ISAT.ST @v IMH6.01.011 @s Gestion du service @c Ajout champ 69 Next Appointment Date Updated */
      /** @r IMH27 @d 29/03/11 @a ISAT.ZW @v IMH6.01.011 @s Contr“le des dates @c Ajout champ Campaign NO. */
      /** @r IMH26 @d 24/03/11 @a ISAT.ZW @v IMH6.01.011 @s Contr“le des dates @c Ajout champ Global Amount (Incl. VAT) */
      /** @r IMH25 @d 24/03/11 @a ISAT.VA @v IMH6.01.011 @s Contr“le des dates @c Gestion du service */
      /** @r IMH24 @d 14/03/11 @a ISAT.LLT @v IMH6.01.146 @s Gestion facturation @c Appel fonction reception */
      /** @r IMH23 @d 03/03/11 @a ISAT.LLT @v IMH6.01.011 @s Gestion du service
          @c Ajout champ 321 Actual Meeting Date */
      /** @r IMH22 @d 03/03/11 @a ISAT.LLT @v IMH6.01.011 @s Gestion du service
          @c Suivi de la date de contr“le (idem suivi taux humidit‚)
          @c Ajout champ 50530 Quote Process Code
          @c Ajout champ 50531 Quote Process Status No.
          @c Ajout champ 50532 Quote Process Status Descr. */
      /** @r IMH21 @d 28/02/11 @a ISAT.LLT @v IMH6.01.011 @s Gestion du service @c Ajout champ 130 Suspended */
      /** @r IMH20 @d 18/02/11 @a ISAT.LLT @v IMH6.01.011 @s Gestion du service
          @c Ajout champ 600 "Service Header Claims No." pour suivi r‚clamation */
      /** @r IMH19 @d 17/02/11 @a ISAT.LLT @v IMH6.01.011 @s Gestion du service
          @c Verrous - Suppresion champs 50510 "Locking Date" et 50511 "Locking User ID" et cl‚  */
      /** @r IMH18 @d 16/02/11 @a ISAT.ST @v IMH6.01.011 @s Gestion du service @c init "Mission Status"
      /** @r IMH17 @d 14/02/11 @a ISAT.LLT @v IMH6.01.108 @s Interactions
          @c Ajout champ 309 Service Creation Date */
      /** @r IHM16 @d 10/02/11 @a ISAT.ZW @v IMH6.01.001 @s Normalisation des donn‚es
          @c Associer les Pays au code postaux - descendre le code pays automatiquement*/
      /** @r IMH15 @d 02/02/11 @a ISAT.NFO @v IMH6.01.106 @s Controle Qualit‚ @c champs 500 */
      /** @r IMH15 @d 31/01/11 @a ISAT.LLT @v IMH6.01.011 @s Gestion du service @c Gestion champ urgent */
      /** @r IMH14 @d 24/01/11 @a ISAT.LLT @v IMH6.01.011 @s Gestion du service @c Ajout suivi de modif % humidit‚ */
      /** @r IMH13 @d 03/01/11 @a ISAT.LLT @v IMH6.01.011 @s Gestion du service @c Ajout du champ 308 Total Quote Amount Incl. VAT */
      /** @r IMH12 @d 14/01/11 @a ISAT.ST @v IMH6.01.102 @s Gestion des statuts
          @c Ajout fonction AutoStep + appel DeleteSourceRec des process */
      /** @r IMH11 @d 03/01/11 @a ISAT.LLT @v IMH6.01.011 @s Gestion du service
          @c Ajout champ 50510 Locking Date
          @c Ajout champ 50511 Locking User ID */
      /** @r IMH10 @d 21/12/10 @a ISAT.LLT @v IMH6.01.011 @s Gestion du service
          @c Ajout des champs 400 Address Type, et 401 Address No. pour intervention GC IMH */
      /** @r IMH09 @d 15/12/10 @a ISAT.LLT @v IMH6.01.108 @s Interaction @c Gestion modŠle */
      /** @r IMH08 @d 13/12/10 @a ISAT.ZW @v IMH6.01.011 @s Gestion du service @c Ajout fonction GetDefaultProcessStatusCode */
      /** @r IMH07 @d 07/12/10 @a ISAT.LLT @v IMH6.01.011 @s Gestion du service @c Ajout du champ Default Team Code */
      /** @r IMH06 @d 01/12/10 @a ISAT.LLT @v IMH6.01.011 @s Gestion du service
          @c Ajout du champ 211 Claim
          @c Ajout des champ date de saisie */
      /** @r IMH05 @d 30/11/10 @a ISAT.ZW @v IMH6.01.011 @s Gestion du service @c Ajout fonciton create Interaction */
      /** @r IMH04 @d 08/11/10 @a ISAT.ZW @v IMH6.01.102 @s Gestion des Statuts @c Ajout champ Process Code + Process Status */
      /** @r IMH03 @d 13/10/10 @a ISAT.ZW @v IMH6.01.012 @s Gestion de l'intervention
          @c descendre Service Order type de Service Header */
      /** @r IMH02 @d 11/10/10 @a ISAT.ST @v IMH6.01.012 @s Gestion de l'intervention @c Suppressions */
      /** @r IMH01 @d 04/10/10 @a ISAT.LLT @v IMH6.01.011 @s Gestion du service @c Cr‚ation */
    }
    END.
  }
}