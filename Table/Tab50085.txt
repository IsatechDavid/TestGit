OBJECT Table 50085 Process Function
{
  OBJECT-PROPERTIES
  {
    Date=15/01/14;
    Time=11:00:49;
    Modified=Yes;
    Version List=IMH6.01,JUIN;
  }
  PROPERTIES
  {
    DataCaptionFields=Function Type,Source Data;
    OnDelete=VAR
               lProcReq@1100281000 : Record 50045;
               lProcAct@1100281001 : Record 50044;
             BEGIN
               //IMH03.ST
               CASE "Function Type" OF
                 "Function Type"::TestFunction : BEGIN
                    lProcReq.SETRANGE("Test Function No.", "Function No.");
                    lProcReq.SETRANGE("Source Table", "Source Table No.");
                    IF lProcReq.FINDFIRST THEN
                      ERROR(STRSUBSTNO(Text003, "Function No.", lProcReq."Process Code"));
                 END;
                 "Function Type"::ActionFunction : BEGIN
                    lProcAct.SETRANGE("Action Function No.", "Function No.");
                    lProcAct.SETRANGE("Source Table", "Source Table No.");
                    IF lProcAct.FINDFIRST THEN
                      ERROR(STRSUBSTNO(Text003, "Function No.", lProcAct."Process Code"));
                 END;
               END; // CASE
             END;

    CaptionML=[ENU=Process Function;
               FRA=Fonction processus];
    LookupFormID=Form50170;
    DrillDownFormID=Form50170;
  }
  FIELDS
  {
    { 1   ;   ;Source Table No.    ;Integer       ;OnValidate=BEGIN
                                                                CASE "Source Table No." OF
                                                                  DATABASE::Service :
                                                                    "Source Data" := "Source Data"::Service;
                                                                  DATABASE::"Service Header" :
                                                                    "Source Data" := "Source Data"::ServiceHeader;
                                                                  DATABASE::"Service Intervention Line" :
                                                                    "Source Data" := "Source Data"::Intervention;
                                                                  DATABASE::Provider :
                                                                    "Source Data" := "Source Data"::Provider;
                                                                  DATABASE::"Completness Task" :
                                                                    "Source Data" := "Source Data"::"Compltness Task";
                                                                //<<IMH02.ST
                                                                  DATABASE::"Service Intervention Quote" :
                                                                    "Source Data" := "Source Data"::InterventionQuote;
                                                                //>>IMH02.ST
                                                                END; //CASE
                                                              END;

                                                   CaptionML=[ENU=Source Table ID;
                                                              FRA=Nø table origine];
                                                   NotBlank=Yes }
    { 2   ;   ;Function No.        ;Integer       ;CaptionML=[ENU=Function No.;
                                                              FRA=Nø fonction] }
    { 3   ;   ;Function Type       ;Option        ;CaptionML=[ENU=Function Type;
                                                              FRA=Type fonction];
                                                   OptionCaptionML=[ENU=Test Function,Action Function;
                                                                    FRA=Fonction test,Fonction action];
                                                   OptionString=TestFunction,ActionFunction }
    { 5   ;   ;Function Description;Text80        ;CaptionML=[ENU=Description;
                                                              FRA=D‚signation] }
    { 9   ;   ;Source Data         ;Option        ;OnValidate=BEGIN
                                                                CASE "Source Data" OF
                                                                  "Source Data"::Service :           VALIDATE("Source Table No.", DATABASE::Service);
                                                                  "Source Data"::ServiceHeader :     VALIDATE("Source Table No.", DATABASE::"Service Header");
                                                                  "Source Data"::Intervention :      VALIDATE("Source Table No.", DATABASE::"Service Intervention Line");
                                                                  "Source Data"::Provider :          VALIDATE("Source Table No.", DATABASE::Provider);
                                                                  "Source Data"::"Compltness Task" : VALIDATE("Source Table No.", DATABASE::"Completness Task");
                                                                  "Source Data"::InterventionQuote : VALIDATE("Source Table No.", DATABASE::"Service Intervention Quote"); //IMH02.ST
                                                                END; //CASE
                                                              END;

                                                   CaptionML=[ENU=Source Data;
                                                              FRA=Donn‚es process];
                                                   OptionCaptionML=[ENU=Service,Service Header,Intervention,Provider,Compltness Task,InterventionQuote;
                                                                    FRA=Service,Ligne produit,Intervention,Prestataire,Tƒche de compl‚tude,Devis intervention];
                                                   OptionString=Service,ServiceHeader,Intervention,Provider,Compltness Task,InterventionQuote }
    { 10  ;   ;Parameters          ;Boolean       ;CaptionML=[ENU=Parameters;
                                                              FRA=ParamŠtres] }
  }
  KEYS
  {
    {    ;Source Table No.,Function Type,Function No.;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;Function No.,Function Description        }
  }
  CODE
  {
    VAR
      Text001@1100281000 : TextConst 'ENU=%1 %2 is not defined for table %3.;FRA=La %1 %2 n''est pas d‚finit pour la table %3.';
      Text002@1100281001 : TextConst 'ENU=Table %1 is not authorised for process functions.;FRA=La table %1 n''est pas un paramŠre autoris‚s dans les fonctions.';
      Text003@1100281002 : TextConst 'ENU=You can''t delete %1 function because it is used in process %2.;FRA=Vous ne pouvez pas supprimer la fonction %1 car elle est utilis‚e par le processus %2.';
      Text004@1100281003 : TextConst 'FRA=Le paramŠtre est incorrect.';
      HideDialogBox@1100281004 : Boolean;

    PROCEDURE LoadFunctions@1100281000();
    VAR
      lServTestFunct@1100281012 : Codeunit 50030;
      lServActFunct@1100281011 : Codeunit 50035;
      lServHeaderTestFunct@1100281010 : Codeunit 50031;
      lServHeaderActFunct@1100281009 : Codeunit 50036;
      lInterventionTestFunct@1100281008 : Codeunit 50032;
      lInterventionActFunct@1100281005 : Codeunit 50037;
      lProviderTestFunct@1100281004 : Codeunit 50033;
      lProviderActFunct@1100281003 : Codeunit 50038;
      lComplTaskTestFunct@1100281002 : Codeunit 50034;
      lComplTaskActFunct@1100281001 : Codeunit 50039;
      lQuoteTestFunct@1100281013 : Codeunit 50047;
      lQuoteActFunct@1100281014 : Codeunit 50048;
      lAllSource@1100281000 : Boolean;
      lTestFunction@1100281006 : Boolean;
      lActionFunction@1100281007 : Boolean;
    BEGIN
      lAllSource := (GETFILTER("Source Table No.") = '') AND (GETFILTER("Source Data") = '');
      IF GETFILTER("Function Type") = '' THEN BEGIN
        lTestFunction := TRUE;
        lActionFunction := TRUE;
      END
      ELSE BEGIN
        lTestFunction := GETRANGEMIN("Function Type") = "Function Type"::TestFunction;
        lActionFunction := GETRANGEMIN("Function Type") = "Function Type"::ActionFunction;
      END;

      IF lAllSource OR ("Source Table No." = DATABASE::Service) THEN BEGIN
        IF lTestFunction THEN
          lServTestFunct.LoadFunctionList;
        IF lActionFunction THEN
          lServActFunct.LoadFunctionList;
      END;
      IF lAllSource OR ("Source Table No." = DATABASE::"Service Header") THEN BEGIN
        IF lTestFunction THEN
          lServHeaderTestFunct.LoadFunctionList;
        IF lActionFunction THEN
          lServHeaderActFunct.LoadFunctionList;
      END;
      IF lAllSource OR ("Source Table No." = DATABASE::"Service Intervention Line") THEN BEGIN
        IF lTestFunction THEN
          lInterventionTestFunct.LoadFunctionList;
        IF lActionFunction THEN
          lInterventionActFunct.LoadFunctionList;
      END;
      IF lAllSource OR ("Source Table No." = DATABASE::Provider) THEN BEGIN
        IF lTestFunction THEN
          lProviderTestFunct.LoadFunctionList;
        IF lActionFunction THEN
          lProviderActFunct.LoadFunctionList;
      END;
      IF lAllSource OR ("Source Table No." = DATABASE::"Completness Task") THEN BEGIN
        IF lTestFunction THEN
          lComplTaskTestFunct.LoadFunctionList;
        IF lActionFunction THEN
          lComplTaskActFunct.LoadFunctionList;
      END;
      //<<IMH02.ST
      IF lAllSource OR ("Source Table No." = DATABASE::"Service Intervention Quote") THEN BEGIN
        IF lTestFunction THEN
          lQuoteTestFunct.LoadFunctionList;
        IF lActionFunction THEN
          lQuoteActFunct.LoadFunctionList;
      END;
      //>>IMH02.ST
    END;

    PROCEDURE InitFunction@1100281001(pSourceTable@1100281000 : Integer;pFunctionType@1100281005 : Integer;pFunctionId@1100281002 : Integer;pDescription@1100281001 : Text[50];pParameters@1100281003 : Boolean);
    VAR
      lRec@1100281004 : Record 50085;
    BEGIN
      IF lRec.GET(pSourceTable, pFunctionType, pFunctionId) THEN
        EXIT;
      lRec.INIT;
      lRec.VALIDATE("Source Table No.", pSourceTable);
      lRec.VALIDATE("Function Type", pFunctionType);
      lRec.VALIDATE("Function No.", pFunctionId);
      lRec.VALIDATE("Function Description", pDescription);
      lRec.VALIDATE(Parameters, pParameters);
      lRec.INSERT(TRUE);
    END;

    PROCEDURE UndefinedFunction@1100281002();
    BEGIN
      VALIDATE("Source Table No.");
      //<<IMH05.ISAT.EBA
      IF HideDialogBox THEN
        ERROR('');
      //>>IMH05.ISAT.EBA
      ERROR(STRSUBSTNO(Text001, FORMAT("Function Type", 0, '<text>'), "Function No.", FORMAT("Source Data", 0, '<text>')));
    END;

    PROCEDURE AssistFunction@1100281004();
    VAR
      lServTestFunct@1100281005 : Codeunit 50030;
      lServActFunct@1100281000 : Codeunit 50035;
      lServHeaderTestFunct@1100281004 : Codeunit 50031;
      lServHeaderActFunct@1100281006 : Codeunit 50036;
      lInterventionTestFunct@1100281003 : Codeunit 50032;
      lInterventionActFunct@1100281007 : Codeunit 50037;
      lProviderTestFunct@1100281002 : Codeunit 50033;
      lProviderActFunct@1100281008 : Codeunit 50038;
      lComplTaskTestFunct@1100281001 : Codeunit 50034;
      lComplTaskActFunct@1100281009 : Codeunit 50039;
      lQuoteTestFunct@1100281011 : Codeunit 50047;
      lQuoteActFunct@1100281010 : Codeunit 50048;
    BEGIN
      CASE "Source Table No." OF
        DATABASE::Service :
          IF "Function Type" = "Function Type"::TestFunction THEN
            lServTestFunct.AssistFunction("Function No.")
          ELSE
            lServActFunct.AssistFunction("Function No.");
        DATABASE::"Service Header" :
          IF "Function Type" = "Function Type"::TestFunction THEN
            lServHeaderTestFunct.AssistFunction("Function No.")
          ELSE
            lServHeaderActFunct.AssistFunction("Function No.");
        DATABASE::"Service Intervention Line" :
          IF "Function Type" = "Function Type"::TestFunction THEN
            lInterventionTestFunct.AssistFunction("Function No.")
          ELSE
            lInterventionActFunct.AssistFunction("Function No.");
        DATABASE::Provider :
          IF "Function Type" = "Function Type"::TestFunction THEN
            lProviderTestFunct.AssistFunction("Function No.")
          ELSE
            lProviderActFunct.AssistFunction("Function No.");
        DATABASE::"Completness Task" :
          IF "Function Type" = "Function Type"::TestFunction THEN
            lComplTaskTestFunct.AssistFunction("Function No.")
          ELSE
            lComplTaskActFunct.AssistFunction("Function No.");
      //<<IMH02.ST
        DATABASE::"Service Intervention Quote" :
          IF "Function Type" = "Function Type"::TestFunction THEN
            lQuoteTestFunct.AssistFunction("Function No.")
          ELSE
            lQuoteActFunct.AssistFunction("Function No.");
      //>>IMH02.ST
        ELSE BEGIN
          UndefinedFunction;
        END;
      END;
    END;

    PROCEDURE TestFunction@1100281006(VAR pRecRef@1100281001 : RecordRef;pReq@1100281000 : Record 50045) : Boolean;
    VAR
      lServFunct@1100281007 : Codeunit 50030;
      lServHeaderFunct@1100281008 : Codeunit 50031;
      lServIntervFunct@1100281009 : Codeunit 50032;
      lProviderFunct@1100281010 : Codeunit 50033;
      lComplTaskFunct@1100281011 : Codeunit 50034;
      lServIntervQuoteFunct@1100281013 : Codeunit 50047;
    BEGIN
      //IMH02.ST
      pReq.TESTFIELD("Test Function No.");
      CASE pRecRef.NUMBER OF
        DATABASE::Service :
          EXIT(lServFunct.TestFunction(pReq."Test Function No.", pReq."Test Function Parameters", pRecRef));
        DATABASE::"Service Header" :
          EXIT(lServHeaderFunct.TestFunction(pReq."Test Function No.", pReq."Test Function Parameters", pRecRef));
        DATABASE::"Service Intervention Line" :
          EXIT(lServIntervFunct.TestFunction(pReq."Test Function No.", pReq."Test Function Parameters", pRecRef));
        DATABASE::Provider :
          EXIT(lProviderFunct.TestFunction(pReq."Test Function No.", pReq."Test Function Parameters", pRecRef));
        DATABASE::"Completness Task" :
          EXIT(lComplTaskFunct.TestFunction(pReq."Test Function No.", pReq."Test Function Parameters", pRecRef));
        DATABASE::"Service Intervention Quote" :
          EXIT(lServIntervQuoteFunct.TestFunction(pReq."Test Function No.", pReq."Test Function Parameters", pRecRef));
        ELSE BEGIN
          //<<IMH05.ISAT.EBA
          IF HideDialogBox THEN
            ERROR('');
          //>>IMH05.ISAT.EBA

          ERROR(Text002, pRecRef.NUMBER);
        END;
      END;
    END;

    PROCEDURE ActFunction@1100281007(VAR pRecRef@1100281001 : RecordRef;pAction@1100281000 : Record 50044) rValue : Boolean;
    VAR
      lServActFunct@1100281012 : Codeunit 50035;
      lServHeaderActFunct@1100281010 : Codeunit 50036;
      lServIntervActFunct@1100281008 : Codeunit 50037;
      lProviderActFunct@1100281006 : Codeunit 50038;
      lComplTaskActFunct@1100281004 : Codeunit 50039;
      lQuoteActFunct@1100281002 : Codeunit 50048;
      lProcessCode@1100281005 : Code[10];
      lProcessStatus@1100281003 : Integer;
    BEGIN
      //IMH02.ST
      pAction.TESTFIELD("Action Function No.");
      CASE pRecRef.NUMBER OF
        DATABASE::Service :
          BEGIN
            //<<IMH05.ISAT.EBA
            lServActFunct.SetHideDialogBox(HideDialogBox);
            //>>IMH05.ISAT.EBA
            rValue := lServActFunct.RunFunction(pAction."Action Function No.", pAction."Action Function Parameters", pRecRef);
          END;
        DATABASE::"Service Header" :
          BEGIN
            //<<IMH05.ISAT.EBA
            lServHeaderActFunct.SetHideDialogBox(HideDialogBox);
            //>>IMH05.ISAT.EBA
            //<<IMH06
            GetToProcess(pAction, lProcessCode, lProcessStatus);
            lServHeaderActFunct.SetFromProcess(lProcessCode, lProcessStatus);
            //<<IMH06
            rValue := lServHeaderActFunct.RunFunction(pAction."Action Function No.", pAction."Action Function Parameters", pRecRef);
          END;
        DATABASE::"Service Intervention Line" :
          BEGIN
            //<<IMH05.ISAT.EBA
            lServIntervActFunct.SetHideDialogBox(HideDialogBox);
            //>>IMH05.ISAT.EBA
            //<<IMH06
            GetToProcess(pAction, lProcessCode, lProcessStatus);
            lServIntervActFunct.SetFromProcess(lProcessCode, lProcessStatus);
            //<<IMH06
            rValue := lServIntervActFunct.RunFunction(pAction."Action Function No.", pAction."Action Function Parameters", pRecRef);
          END;
        DATABASE::Provider : BEGIN
          lProviderActFunct.SetCurrentAct(pAction);
            //<<IMH06
            GetToProcess(pAction, lProcessCode, lProcessStatus);
            lProviderActFunct.SetFromProcess(lProcessCode, lProcessStatus);
            //<<IMH06
          rValue := lProviderActFunct.RunFunction(pAction."Action Function No.", pAction."Action Function Parameters", pRecRef);
        END;
        DATABASE::"Completness Task" :
          rValue := lComplTaskActFunct.RunFunction(pAction."Action Function No.", pAction."Action Function Parameters", pRecRef);
        DATABASE::"Service Intervention Quote" :
          BEGIN
            //<<IMH05.ISAT.EBA
            lQuoteActFunct.SetHideDialogBox(HideDialogBox);
            //>>IMH05.ISAT.EBA
            //<<IMH06
            GetToProcess(pAction, lProcessCode, lProcessStatus);
            lQuoteActFunct.SetFromProcess(lProcessCode, lProcessStatus);
            //<<IMH06
            rValue := lQuoteActFunct.RunFunction(pAction."Action Function No.", pAction."Action Function Parameters", pRecRef);
          END;
        ELSE BEGIN
          //<<IMH05.ISAT.EBA
          IF HideDialogBox THEN
            ERROR('');
          //>>IMH05.ISAT.EBA

          ERROR(Text002, pRecRef.NUMBER);
        END;
      END;
      IF NOT rValue THEN
        IF NOT pAction.Optional THEN
          ERROR('');
    END;

    PROCEDURE DropFunction@1100281003();
    BEGIN
    END;

    PROCEDURE CheckParameters@1100281005(pParametrer@1100281013 : Text[1024]) rValue : Boolean;
    VAR
      lServTestFunct@1100281005 : Codeunit 50030;
      lServActFunct@1100281000 : Codeunit 50035;
      lServHeaderTestFunct@1100281004 : Codeunit 50031;
      lServHeaderActFunct@1100281006 : Codeunit 50036;
      lInterventionTestFunct@1100281003 : Codeunit 50032;
      lInterventionActFunct@1100281007 : Codeunit 50037;
      lProviderTestFunct@1100281002 : Codeunit 50033;
      lProviderActFunct@1100281008 : Codeunit 50038;
      lComplTaskTestFunct@1100281001 : Codeunit 50034;
      lComplTaskActFunct@1100281009 : Codeunit 50039;
      lQuoteTestFunct@1100281011 : Codeunit 50047;
      lQuoteActFunct@1100281010 : Codeunit 50048;
      lErrorText@1100281012 : Text[250];
    BEGIN
      CASE "Source Table No." OF
        DATABASE::Service :
          IF "Function Type" = "Function Type"::TestFunction THEN
            rValue := lServTestFunct.CheckParameters("Function No.", pParametrer, lErrorText)
          ELSE
            rValue := lServActFunct.CheckParameters("Function No.", pParametrer, lErrorText);
        DATABASE::"Service Header" :
          IF "Function Type" = "Function Type"::TestFunction THEN
            rValue := lServHeaderTestFunct.CheckParameters("Function No.", pParametrer, lErrorText)
          ELSE
            rValue := lServHeaderActFunct.CheckParameters("Function No.", pParametrer, lErrorText);
        DATABASE::"Service Intervention Line" :
          IF "Function Type" = "Function Type"::TestFunction THEN
            rValue := lInterventionTestFunct.CheckParameters("Function No.", pParametrer, lErrorText)
          ELSE
            rValue := lInterventionActFunct.CheckParameters("Function No.", pParametrer, lErrorText);
        DATABASE::Provider :
          IF "Function Type" = "Function Type"::TestFunction THEN
            rValue := lProviderTestFunct.CheckParameters("Function No.", pParametrer, lErrorText)
          ELSE
            rValue := lProviderActFunct.CheckParameters("Function No.", pParametrer, lErrorText);
        DATABASE::"Completness Task" :
          IF "Function Type" = "Function Type"::TestFunction THEN
            rValue := lComplTaskTestFunct.CheckParameters("Function No.", pParametrer, lErrorText)
          ELSE
            rValue := lComplTaskActFunct.CheckParameters("Function No.", pParametrer, lErrorText);
      //<<IMH02.ST
        DATABASE::"Service Intervention Quote" :
          IF "Function Type" = "Function Type"::TestFunction THEN
            rValue := lQuoteTestFunct.CheckParameters("Function No.", pParametrer, lErrorText)
          ELSE
            rValue := lQuoteActFunct.CheckParameters("Function No.", pParametrer, lErrorText);
      //>>IMH02.ST
        ELSE BEGIN
          UndefinedFunction;
        END;
      END;

      IF NOT rValue THEN BEGIN
        //<<IMH05.ISAT.EBA
        IF HideDialogBox THEN
          ERROR('');
        //>>IMH05.ISAT.EBA

        IF lErrorText <> '' THEN
          ERROR(lErrorText)
        ELSE
          ERROR(Text004);
      END;
    END;

    PROCEDURE ShowUseCase@1100281008();
    VAR
      lProcReq@1100281000 : Record 50045;
      lProcAct@1100281001 : Record 50044;
    BEGIN
      IF "Function No." = 0 THEN
        EXIT;
      CASE "Function Type" OF
        "Function Type"::TestFunction : BEGIN
          lProcReq.SETCURRENTKEY("Source Table","Test Function No.");
          lProcReq.FILTERGROUP(2);
          lProcReq.SETRANGE("Source Table", "Source Table No.");
          lProcReq.SETRANGE("Test Function No.", "Function No.");
          lProcReq.FILTERGROUP(0);
          FORM.RUN(0, lProcReq);
        END;
        "Function Type"::ActionFunction : BEGIN
          lProcAct.SETCURRENTKEY("Action Type","Source Table", "Action Function No.");
          lProcAct.FILTERGROUP(2);
          lProcAct.SETRANGE("Action Type", lProcAct."Action Type"::"Run Function");
          lProcAct.SETRANGE("Source Table", "Source Table No.");
          lProcAct.SETRANGE("Action Function No.", "Function No.");
          lProcAct.FILTERGROUP(0);
          FORM.RUN(0,lProcAct);
        END;
      END;
    END;

    PROCEDURE SetHideDialogBox@57(NewHideDialogBox@1000 : Boolean);
    BEGIN
      //<<IMH05.ISAT.EBA
      HideDialogBox := NewHideDialogBox;
      //>>IMH05.ISAT.EBA
    END;

    PROCEDURE GetToProcess@1100281009(pAction@1100281004 : Record 50044;VAR pProcessCode@1100281000 : Code[10];VAR pProcessStatus@1100281001 : Integer);
    VAR
      lProcessStatus@1100281002 : Record 50042;
      lProcessStep@1100281003 : Record 50043;
    BEGIN
      //IMH06
      CASE pAction."Source Action" OF
        pAction."Source Action"::Step :
          IF lProcessStep.GET(pAction."Process Code", pAction."Source Line No.") THEN BEGIN
            pProcessCode := lProcessStep."Next Process Code";
            pProcessStatus := lProcessStep."Next Status";
          END;
        pAction."Source Action"::Status :
          IF lProcessStatus.GET(pAction."Process Code", pAction."Source Line No.") THEN BEGIN
            pProcessCode := lProcessStatus."Process Code";
            pProcessStatus := lProcessStatus."Status No.";
          END;
      END;
    END;

    BEGIN
    {
      /** @r IMH07 @d 11/06/13 @a ISAT.ZW @v IMH6.01.4484 @s Juin @h 4484 @c Gestion processus prestataire*/
      /** @r IMH06 @d 13/11/12 @a ISAT.ZW @v IMH6.01.215 @s NEP00006 @h 3702 @c Gestion processus*/
      /** @r IMH05 @d 15/11/11 @a ISAT.EBA @v IMH6.01.102 @s Gestion des statuts
          @c Ajout de fonction "SetHideDialogBox" */
      /** @r IMH04 @d 05/05/11 @a ISAT.ZW @v IMH6.01.102 @s Gestion des statuts @c Fonction CheckParameters */
      /** @r IMH03 @d 06/04/11 @a ISAT.ST @v IMH6.01.102 @s Gestion des statuts @c Gestion suppression */
      /** @r IMH02 @d 21/01/11 @a ISAT.ST @v IMH6.01.102 @s Gestion des statuts @c Ajout fonctions Devis */
      /** @r IMH01 @d 27/12/10 @a ISAT.ST @v IMH6.01.102 @s Gestion des statuts @c Cr‚ation objet */
    }
    END.
  }
}