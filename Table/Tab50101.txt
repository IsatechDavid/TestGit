OBJECT Table 50101 Service Header Costing Method
{
  OBJECT-PROPERTIES
  {
    Date=07/04/11;
    Time=16:20:50;
    Modified=Yes;
    Version List=IMH6.01;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               IF "Line No." = 0 THEN
                 GetNextLineNo;
               TouchRecord(TRUE);
             END;

    OnModify=BEGIN
               TouchRecord(FALSE);
             END;

    CaptionML=[ENU=Service Header Costing Method;
               FRA=Ligne produit t‚l‚chiffrage];
  }
  FIELDS
  {
    { 1   ;   ;Service Header No.  ;Code20        ;OnValidate=VAR
                                                                lServHeader@1100281000 : Record 5900;
                                                              BEGIN
                                                                IF NOT lServHeader.GET(lServHeader."Document Type"::Invoice, "Service Header No.") THEN
                                                                  CLEAR(lServHeader);
                                                                IF "Service No." <> lServHeader."Service No." THEN
                                                                  VALIDATE("Service No.", lServHeader."Service No.");
                                                              END;

                                                   CaptionML=[ENU=Service Header No.;
                                                              FRA=Nø ligne produit] }
    { 2   ;   ;Service No.         ;Code20        ;OnValidate=VAR
                                                                lService@1100281000 : Record 50066;
                                                              BEGIN
                                                                IF lService.GET("Service No.") THEN
                                                                  "Service Cause" := lService."Service Cause";
                                                              END;

                                                   CaptionML=[ENU=Service No.;
                                                              FRA=Nø service] }
    { 3   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              FRA=Line No.] }
    { 10  ;   ;Service Cause       ;Code10        ;CaptionML=[ENU=Intervention Cause;
                                                              FRA=Cause intervention];
                                                   Editable=No }
    { 30  ;   ;Expertise Date      ;Date          ;CaptionML=[ENU=Expertise Date;
                                                              FRA=Date expertise] }
    { 40  ;   ;Unsecured Depreciation Amount;Decimal;
                                                   CaptionML=[ENU=Unsecured Depreciation Amount;
                                                              FRA=V‚tust‚ non garantie mtt];
                                                   BlankZero=Yes }
    { 41  ;   ;Unsecured Depreciation %;Decimal   ;CaptionML=[ENU=Unsecured Depreciation %;
                                                              FRA=V‚tust‚ non garantie %];
                                                   BlankZero=Yes }
    { 42  ;   ;Estimated Work Amount (min);Decimal;CaptionML=[ENU=Estimated Work Amount (max);
                                                              FRA=Montant estim‚ des travaux HT (min)];
                                                   MinValue=0;
                                                   BlankZero=Yes }
    { 43  ;   ;Estimated Work Amount (max);Decimal;CaptionML=[ENU=Estimated Work Amount (max);
                                                              FRA=Montant estim‚ des travaux HT (max)];
                                                   MinValue=0;
                                                   BlankZero=Yes }
    { 44  ;   ;Deductible Amount To Collect;Decimal;
                                                   CaptionML=[ENU=Estimated Work Amount (max);
                                                              FRA=Montant franchise … pr‚lever];
                                                   MinValue=0;
                                                   BlankZero=Yes }
    { 45  ;   ;Closing Cause       ;Option        ;CaptionML=[ENU=Closing Cause;
                                                              FRA=Motif de cl“ture];
                                                   OptionCaptionML=[ENU=" ,Expert Report,Deficiency,End Of Mission";
                                                                    FRA=" ,Rapport d'expertise,Carence,Fin de mission"];
                                                   OptionString=[ ,ExpertReport,Deficiency,EndOfMission] }
    { 50  ;   ;Auto Repair         ;Boolean       ;CaptionML=[ENU=Auto Repair;
                                                              FRA=Auto r‚paration] }
    { 51  ;   ;Auto Repair Amount  ;Decimal       ;OnValidate=BEGIN
                                                                CheckAmount(0);
                                                              END;

                                                   CaptionML=[ENU=Auto Repair Amount;
                                                              FRA=Montant HT auto r‚paration];
                                                   BlankZero=Yes }
    { 52  ;   ;Auto Repair Amount Incl. VAT;Decimal;
                                                   OnValidate=BEGIN
                                                                CheckAmount(0);
                                                              END;

                                                   CaptionML=[ENU=Auto Repair Amount Incl. VAT;
                                                              FRA=Montant TTC auto r‚paration];
                                                   BlankZero=Yes }
    { 60  ;   ;Nature Repair       ;Boolean       ;CaptionML=[ENU=Nature Repair;
                                                              FRA=R‚paration en nature] }
    { 61  ;   ;Nature Repair Amount;Decimal       ;OnValidate=BEGIN
                                                                CheckAmount(1);
                                                              END;

                                                   CaptionML=[ENU=Auto Repair Amount;
                                                              FRA=Montant HT r‚paration en nature];
                                                   BlankZero=Yes }
    { 62  ;   ;Nature Repair Amount Incl. VAT;Decimal;
                                                   OnValidate=BEGIN
                                                                CheckAmount(1);
                                                              END;

                                                   CaptionML=[ENU=Auto Repair Amount Incl. VAT;
                                                              FRA=Montant TTC r‚paration en nature];
                                                   BlankZero=Yes }
    { 70  ;   ;Financial Compensation;Boolean     ;CaptionML=[ENU=Financial Compensation;
                                                              FRA=Indemnisation p‚cuniaire] }
    { 71  ;   ;Fin. Comp. Amount   ;Decimal       ;OnValidate=BEGIN
                                                                CheckAmount(2);
                                                              END;

                                                   CaptionML=[ENU=Auto Repair Amount;
                                                              FRA=Montant HT indemn. p‚cuniaire];
                                                   BlankZero=Yes }
    { 72  ;   ;Fin. Comp. Amount Incl. VAT;Decimal;OnValidate=BEGIN
                                                                CheckAmount(2);
                                                              END;

                                                   CaptionML=[ENU=Auto Repair Amount Incl. VAT;
                                                              FRA=Montant TTC indemn. p‚cuniaire];
                                                   BlankZero=Yes }
    { 100 ;   ;Service Cause Description;Text30   ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Fault Reason Code".Description WHERE (Code=FIELD(Service Cause)));
                                                   CaptionML=[ENU=Service Cause Description;
                                                              FRA=D‚signation cause intervention];
                                                   Editable=No }
    { 50500;  ;Creation Date       ;DateTime      ;CaptionML=[ENU=Creation Date;
                                                              FRA=Date de cr‚ation];
                                                   Editable=No }
    { 50501;  ;Creation User ID    ;Text30        ;TableRelation="User Setup"."User ID";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Creation User ID;
                                                              FRA=Utilisateur cr‚ation];
                                                   Editable=No }
    { 50502;  ;Last Modification Date;DateTime    ;CaptionML=[ENU=Last Modification Date;
                                                              FRA=Date derniŠre modification];
                                                   Editable=No }
    { 50503;  ;Last Modification User ID;Text30   ;TableRelation="User Setup"."User ID";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Last Modification User ID;
                                                              FRA=Utilisateur derniŠre modification];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Service Header No.                      ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1100281000 : TextConst 'ENU=%1 must not be < to %2;FRA=%1 ne peut ˆtre < … %2';

    PROCEDURE CheckAmount@1100281001(pAmountType@1100281000 : 'Auto,Nature,Fin');
    BEGIN
      CASE pAmountType OF
        0:BEGIN
          IF ("Auto Repair Amount" <> 0) AND ("Auto Repair Amount Incl. VAT" <> 0) THEN BEGIN
            IF "Auto Repair Amount Incl. VAT" < "Auto Repair Amount" THEN
              ERROR(STRSUBSTNO(Text001,
                FIELDCAPTION("Auto Repair Amount Incl. VAT"),FIELDCAPTION("Auto Repair Amount")));
          END;
        END;
        1:BEGIN
          IF ("Nature Repair Amount" <> 0) AND ("Nature Repair Amount Incl. VAT" <> 0) THEN BEGIN
            IF "Nature Repair Amount Incl. VAT" < "Nature Repair Amount" THEN
              ERROR(STRSUBSTNO(Text001,
                FIELDCAPTION("Nature Repair Amount Incl. VAT"),FIELDCAPTION("Nature Repair Amount")));
          END;
        END;
        2:BEGIN
          IF ("Fin. Comp. Amount" <> 0) AND ("Fin. Comp. Amount Incl. VAT" <> 0) THEN BEGIN
            IF "Fin. Comp. Amount Incl. VAT" < "Fin. Comp. Amount" THEN
              ERROR(STRSUBSTNO(Text001,
                FIELDCAPTION("Fin. Comp. Amount Incl. VAT"),FIELDCAPTION("Fin. Comp. Amount")));
          END;
        END;
      END;
    END;

    PROCEDURE TouchRecord@1100281006(pInsert@1100281000 : Boolean);
    BEGIN
      IF pInsert THEN BEGIN
        "Creation Date" := CURRENTDATETIME;
        "Creation User ID" := USERID;
      END;
      "Last Modification Date" := CURRENTDATETIME;
      "Last Modification User ID" := USERID;
    END;

    PROCEDURE GetNextLineNo@1100281002();
    VAR
      lServiceHeaderCost@1100281000 : Record 50101;
    BEGIN
      lServiceHeaderCost.LOCKTABLE(TRUE);
      lServiceHeaderCost.SETRANGE("Service Header No.","Service Header No.");
      IF lServiceHeaderCost.ISEMPTY THEN BEGIN
        "Line No." := 10000;
        EXIT;
      END;

      lServiceHeaderCost.FINDLAST;
      "Line No." := lServiceHeaderCost."Line No." + 10000;
    END;

    BEGIN
    {
      /** @r IMH02 @d 07/04/11 @a ISAT.ST @v IMH6.01.011 @s Gestion du service @c init ligne produit */
      /** @r IMH01 @d 17/02/11 @a ISAT.LLT @v IMH6.01.011 @s Gestion du service @c Cr‚ation */
    }
    END.
  }
}