OBJECT Table 50105 Network Visit
{
  OBJECT-PROPERTIES
  {
    Date=15/10/13;
    Time=16:09:31;
    Modified=Yes;
    Version List=IMH6.01.08,JUILLET;
  }
  PROPERTIES
  {
    OnInsert=VAR
               lNetworkFacilitatorVisit@1100281000 : Record 50105;
             BEGIN
               GetProviderSetup;
               IF "No." = '' THEN BEGIN
                 ProviderSetup.TESTFIELD("Visit Nos.");
                 NoSeriesMgt.InitSeries(ProviderSetup."Visit Nos.",xRec."No. Series",0D,"No.","No. Series");
               END;

               "Metting Time (min.)" := ProviderSetup."Visit Def. Meeting Time (min.)";

               VALIDATE(Type);

               TouchRecord(TRUE);

               Recref.GETTABLE(Rec);
               ChangLogMgt.LogInsertion(Recref);
             END;

    OnModify=BEGIN
               TouchRecord(FALSE);

               Recref.GETTABLE(Rec);
               ChangLogMgt.LogModificationWithoutXref(Recref);
             END;

    OnDelete=BEGIN
               TESTFIELD(Closed, FALSE);
               IF Status IN [Status::Done] THEN
                 FIELDERROR(Status);

               Recref.GETTABLE(Rec);
               ChangLogMgt.LogDeletion(Recref);
             END;

    OnRename=BEGIN
               TouchRecord(FALSE);
               Recref.GETTABLE(Rec);
               xRecref.GETTABLE(xRec);
               ChangLogMgt.LogRename(Recref,xRecref);
             END;

    CaptionML=[ENU=Network Visit;
               FRA=Visite r‚seau];
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;CaptionML=[ENU=No.;
                                                              FRA=Nø] }
    { 11  ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                GetProviderSetup;
                                                                CASE Type OF
                                                                  Type::Facilitator : "Minute Mandatory" := ProviderSetup."Visit Facilitator Minute Mand.";
                                                                  Type::"Camp. Recruitment" : "Minute Mandatory" := ProviderSetup."Visit Camp Recruit. Min. Mand.";
                                                                  Type::Claim : "Minute Mandatory" := ProviderSetup."Visit Claim Minute Mand.";
                                                                  Type::"Quality Control" : "Minute Mandatory" := ProviderSetup."Visit Qual. Cont. Minute Mand.";
                                                                  Type::Recruitment : "Minute Mandatory" := ProviderSetup."Visit Recruit. Minute Mand.";
                                                                  Type::Formation : "Minute Mandatory" := ProviderSetup."Visit Formation Minute Mand.";
                                                                  Type::"TH Control" : "Minute Mandatory" := ProviderSetup."Visit TH Control Minute Mand.";
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Type;
                                                              FRA=Visite];
                                                   OptionCaptionML=[ENU=Facilitator,Camp. Recruitment,Claim,Quality Control,Recruitment,Formation,TH Control;
                                                                    FRA=Animation et gestion,Campagne recrutement,R‚clamation,Contr“le Qualit‚ CR IMH,Recrutement,Formation,Contr“le TH];
                                                   OptionString=Facilitator,Camp. Recruitment,Claim,Quality Control,Recruitment,Formation,TH Control }
    { 12  ;   ;Priority            ;Option        ;CaptionML=[ENU=Priority;
                                                              FRA=Niveau de priorit‚];
                                                   OptionCaptionML=[ENU=High,Medium,Low;
                                                                    FRA=Fort,Moyen,Faible];
                                                   OptionString=High,Medium,Low }
    { 13  ;   ;Presentation Order  ;Integer       ;CaptionML=[ENU=Presentation Order;
                                                              FRA=Ordre de pr‚sentation] }
    { 15  ;   ;Provider No.        ;Code20        ;TableRelation=Provider;
                                                   OnValidate=VAR
                                                                lProvider@1100281000 : Record 50000;
                                                                lContactAltAddress@1000000000 : Record 5051;
                                                                lContact@1100281001 : Record 5050;
                                                              BEGIN
                                                                IF "Provider No." = '' THEN
                                                                  EXIT;
                                                                lProvider.GET("Provider No.");
                                                                "Prov. IMH Territory Code" := lProvider."IMH Territory Code";
                                                                "Prov. Admin. Territory Code" := lProvider."Admin. Territory Code";
                                                                VALIDATE("Provider Area Code", lProvider."Area Code");

                                                                IF lProvider.City <> '' THEN
                                                                  "Provider City" := lProvider.City;
                                                                IF lProvider.Name <> '' THEN
                                                                  "Provider Name" := lProvider.Name;
                                                                IF lProvider."Name 2" <> '' THEN
                                                                  "Provider Name 2" := lProvider."Name 2";
                                                                IF lProvider.Address <> '' THEN
                                                                  "Provider Address" := lProvider.Address;
                                                                IF lProvider."Address 2" <> '' THEN
                                                                  "Provider Address 2" := lProvider."Address 2";
                                                                IF lProvider."Phone No." <> '' THEN
                                                                  "Provider Phone No." := lProvider."Phone No.";
                                                                IF lProvider."Mobile Phone No." <> '' THEN
                                                                  "Provider Mobile Phone No." := lProvider."Mobile Phone No.";
                                                                IF lProvider."Post Code" <> '' THEN BEGIN
                                                                  "Provider Post Code" := lProvider."Post Code";
                                                                END;

                                                                lContactAltAddress.SETRANGE("Contact No.",lProvider."No.");
                                                                lContactAltAddress.SETRANGE("Geo. Reference Address",TRUE);
                                                                IF lContactAltAddress.FINDFIRST THEN BEGIN
                                                                  "Prov. Geo. Reference Code" := lContactAltAddress."Geo. Reference Code";
                                                                END;

                                                                IF lProvider."Country/Region Code" <> '' THEN
                                                                  "Provider Country/Region Code" := lProvider."Country/Region Code";

                                                                "Provider Status" := lProvider.Status;
                                                                "Main Specialization Code" := lProvider."Main Specialization Code";
                                                                //"Theorical Planified Visit Date" := lProvider."Planified Visit Date";
                                                                //VALIDATE("Visit Date", lProvider."Planified Visit Date");

                                                                //<<IMH12
                                                                IF lContact.GET(lProvider."Admin. Contact No.") THEN
                                                                //>>IMH12
                                                                  VALIDATE("Admin. Contact No.", lProvider."Admin. Contact No.");
                                                              END;

                                                   CaptionML=[ENU=Provider No.;
                                                              FRA=Nø prestataire] }
    { 20  ;   ;Planning No.        ;Code20        ;OnValidate=VAR
                                                                lNetworkVisit@1000000000 : Record 50105;
                                                              BEGIN
                                                              END;

                                                   CaptionML=[ENU=Planning No.;
                                                              FRA=Nø planning] }
    { 30  ;   ;Status              ;Option        ;OnValidate=VAR
                                                                lProvider@1000000000 : Record 50000;
                                                              BEGIN
                                                                CASE Status OF
                                                                  Status::Planned : BEGIN
                                                                    TESTFIELD("Visit Date");
                                                                  END;
                                                                  Status::"To Replan" : BEGIN
                                                                    TESTFIELD(Closed, FALSE);
                                                                  END;
                                                                  Status::Done : BEGIN
                                                                    TESTFIELD(Closed, FALSE);
                                                                    TESTFIELD("Visit Date");
                                                                    TESTFIELD("Visit Reason Code");
                                                                    //<<IMH13.ACO
                                                                    TESTFIELD("Visit Interlocutor");
                                                                    //>>IMH13.ACO
                                                                    IF "Minute Mandatory" THEN BEGIN
                                                                      IF "Minites Imported" THEN
                                                                        VALIDATE(Closed, TRUE);
                                                                    END ELSE
                                                                      VALIDATE(Closed, TRUE);
                                                                    //MAJ fiche prestataire
                                                                    lProvider.GET("Provider No.");
                                                                    IF Type = Type::Facilitator THEN BEGIN
                                                                      lProvider.VALIDATE("Facilitator Visit Last Date", "Visit Date");
                                                                      lProvider.VALIDATE("Last Facilitator Visit Time", "Visit Time");
                                                                    END;
                                                                    lProvider.VALIDATE("Last Visit No.", "No.");
                                                                    lProvider.VALIDATE("Visit Last Date", "Visit Date");
                                                                    lProvider.VALIDATE("Last Visit Time", "Visit Time");
                                                                    lProvider.VALIDATE("Last Visit Reason Code", "Visit Reason Code");
                                                                    lProvider.VALIDATE("Last Visit interlocutor", "Visit Interlocutor");
                                                                    lProvider.MODIFY(FALSE);
                                                                  END;
                                                                  Status::Cancel : BEGIN
                                                                    TESTFIELD(Closed, FALSE);
                                                                    TESTFIELD("Visit Date");
                                                                    VALIDATE(Closed, TRUE);
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Status;
                                                              FRA=Statut];
                                                   OptionCaptionML=[ENU=" ,Planned,To Replan,Done,Cancel";
                                                                    FRA=" ,Visite planifi‚e,Visite … re-planifier,Visite effectu‚e,Visite annul‚e"];
                                                   OptionString=[ ,Planned,To Replan,Done,Cancel] }
    { 35  ;   ;Closed              ;Boolean       ;CaptionML=[ENU=Closed;
                                                              FRA=Clot–r‚];
                                                   Editable=No }
    { 50  ;   ;Provider Status     ;Option        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Provider.Status WHERE (No.=FIELD(Provider No.)));
                                                   CaptionML=[ENU=Provider Status;
                                                              FRA=Statut prestataire];
                                                   OptionCaptionML=[ENU=Prospect,Casual,Integration,Trial Period,Approval,Operational;
                                                                    FRA=Prospect,Occasionnel,Int‚gration,P‚riode essai,Labellis‚,Op‚rationnel];
                                                   OptionString=Prospect,Casual,Integration,Trial Period,Approval,Operational;
                                                   Editable=No }
    { 51  ;   ;Provider Process Code;Code10       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Provider."Process Code" WHERE (No.=FIELD(Provider No.)));
                                                   TableRelation=Process.Code WHERE (Source Table No.=CONST(50000));
                                                   CaptionML=[ENU=Provider Process Code;
                                                              FRA=Code processus prestataire];
                                                   Editable=No }
    { 52  ;   ;Provider Process Status No.;Integer;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Provider."Process Status No." WHERE (No.=FIELD(Provider No.)));
                                                   OnValidate=VAR
                                                                lProcessProviderMgt@1100281000 : Codeunit 50044;
                                                              BEGIN
                                                              END;

                                                   CaptionML=[ENU=Provider Process Status No.;
                                                              FRA=Nø statut processus prestataire];
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 55  ;   ;Network Facilitator ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Provider."Network Facilitator" WHERE (No.=FIELD(Provider No.)));
                                                   TableRelation="User Setup"."User ID" WHERE (User Type=FILTER(Network Facilitator));
                                                   CaptionML=[ENU=Network Facilitator;
                                                              FRA=Charg‚ de pilotage r‚seau];
                                                   Editable=No }
    { 56  ;   ;Regional Coordinator;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Provider."Regional Coordinator" WHERE (No.=FIELD(Provider No.)));
                                                   TableRelation="User Setup"."User ID" WHERE (User Type=FILTER(Area Responsible));
                                                   CaptionML=[ENU=Area Responsible;
                                                              FRA=Responsable de zone];
                                                   Editable=No }
    { 70  ;   ;Provider Visit Last Date;Date      ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Provider."Facilitator Visit Last Date" WHERE (No.=FIELD(Provider No.)));
                                                   CaptionML=[ENU=Visit Last Date;
                                                              FRA=Date derniŠre visite];
                                                   Editable=No }
    { 71  ;   ;Provider Last Visit Rea. Code;Code10;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup(Provider."Last Visit Reason Code" WHERE (No.=FIELD(Provider No.)));
                                                   TableRelation=Code.Code WHERE (Table ID=CONST(50000),
                                                                                  Field ID=CONST(54401));
                                                   CaptionML=[ENU=Last Visit Reason Code;
                                                              FRA=Motif derniŠre visite];
                                                   Editable=No }
    { 72  ;   ;Theorical Planified Visit Date;Date;CaptionML=[ENU=Theorical Planified Visit Date;
                                                              FRA=Date prochaine visite th‚orique];
                                                   Editable=No }
    { 73  ;   ;Provider Planified Visit Date;Date ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Provider."Planified Facilit. Visit Date" WHERE (No.=FIELD(Provider No.)));
                                                   CaptionML=[ENU=Planified Visit Date;
                                                              FRA=Date prochaine visite planifi‚e];
                                                   Editable=No }
    { 75  ;   ;Visit Date          ;Date          ;OnValidate=VAR
                                                                lProvider@1100281000 : Record 50000;
                                                              BEGIN
                                                                IF ("Visit Date" <> 0D) THEN BEGIN
                                                                  VALIDATE(Status, Status::Planned);
                                                                  CASE Type OF
                                                                    Type::Formation,Type::Claim,
                                                                    Type::"Quality Control",Type::"TH Control" : BEGIN
                                                                      HideConfirmMge := TRUE;
                                                                      VALIDATE("Visit Confirmed", TRUE);
                                                                    END;
                                                                    Type::"Camp. Recruitment",Type::Recruitment, Type::Formation : ;
                                                                  END;
                                                                  IF lProvider.GET("Provider No.") THEN BEGIN
                                                                    IF ("Visit Date" < lProvider."Planified Visit Date") OR (lProvider."Planified Visit Date" = 0D) THEN BEGIN
                                                                      lProvider."Planified Visit Date" := "Visit Date";
                                                                      lProvider."Next Visit interlocutor" := "Visit Interlocutor";
                                                                      lProvider.MODIFY(FALSE);
                                                                    END;
                                                                  END;
                                                                END;
                                                                CreateVisitDateTime;
                                                              END;

                                                   CaptionML=[ENU=Visit Date;
                                                              FRA=Date de visite] }
    { 76  ;   ;Visit Time          ;Time          ;OnValidate=BEGIN
                                                                CreateVisitDateTime;
                                                              END;

                                                   CaptionML=[ENU=Visit Time;
                                                              FRA=Heure de visite] }
    { 77  ;   ;Metting Time (min.) ;Integer       ;CaptionML=[ENU=Metting Time (min.);
                                                              FRA=Dur‚e du RDV (min.)] }
    { 78  ;   ;Trip Time           ;Integer       ;CaptionML=[ENU=Trip Time;
                                                              FRA=Dur‚e trajet] }
    { 79  ;   ;Visit Reason Code   ;Code10        ;TableRelation=Code.Code WHERE (Table ID=CONST(50000),
                                                                                  Field ID=CONST(54401));
                                                   CaptionML=[ENU=Visit Reason Code;
                                                              FRA=Motif visite] }
    { 80  ;   ;Recruitment Date    ;Date          ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Provider."Recruitment Date" WHERE (No.=FIELD(Provider No.)));
                                                   CaptionML=[ENU=Recruitment Date;
                                                              FRA=Date de recrutement prestataire];
                                                   Editable=No }
    { 81  ;   ;Trip Distance (km)  ;Decimal       ;CaptionML=[ENU=Trip Distance (km);
                                                              FRA=Distance trajet (km)] }
    { 82  ;   ;Travel Time (min)   ;Decimal       ;CaptionML=[ENU=Travel Time;
                                                              FRA=Temps de trajet (min)] }
    { 85  ;   ;Min. Visit Time     ;Time          ;CaptionML=[ENU=Min. Visit Time;
                                                              FRA=Heure de visite minimum] }
    { 90  ;   ;Main Specialization Code;Code10    ;TableRelation=Specialization.Code;
                                                   OnValidate=VAR
                                                                lSpecialization@1000000000 : Record 50005;
                                                              BEGIN
                                                              END;

                                                   CaptionML=[ENU=Main Specialization Code;
                                                              FRA=Code sp‚cialit‚ principale] }
    { 91  ;   ;Main Spec. Description;Text50      ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Specialization.Description WHERE (Code=FIELD(Main Specialization Code)));
                                                   CaptionML=[ENU=Main Spec. Description;
                                                              FRA=Sp‚cialit‚ principale];
                                                   Editable=No }
    { 100 ;   ;Visit Interlocutor  ;Code10        ;TableRelation="User Setup"."User ID" WHERE (User Type=FILTER(Area Responsible|Network Facilitator));
                                                   OnValidate=VAR
                                                                lProvider@1100281000 : Record 50000;
                                                              BEGIN
                                                                IF lProvider.GET("Provider No.") THEN BEGIN
                                                                  IF lProvider."Planified Visit Date" = "Visit Date" THEN BEGIN
                                                                    lProvider."Next Visit interlocutor" := "Visit Interlocutor";
                                                                    lProvider.MODIFY(FALSE);
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Visit Interlocutor;
                                                              FRA=Interlocuteur visite] }
    { 107 ;   ;No. Series          ;Code10        ;TableRelation="No. Series".Code;
                                                   CaptionML=[ENU=No. Series;
                                                              FRA=Souches de nø] }
    { 120 ;   ;Visit Confirmed     ;Boolean       ;OnValidate=VAR
                                                                lProvider@1100281000 : Record 50000;
                                                              BEGIN
                                                                IF "Visit Confirmed" THEN BEGIN
                                                                  IF NOT HideConfirmMge THEN
                                                                    IF NOT CONFIRM(Text017) THEN
                                                                      ERROR(Text004);

                                                                  IF (Type = Type::"Camp. Recruitment") AND ("Provider No." = '') THEN BEGIN
                                                                    IF NOT CONFIRM(Text003) THEN BEGIN
                                                                      ERROR(Text004);
                                                                    END;
                                                                    CLEAR(NetworkFacilitatorVisitMgt);
                                                                    NetworkFacilitatorVisitMgt.CreateProvider(Rec, lProvider, FALSE)
                                                                  END;
                                                                  TESTFIELD("Provider No.");
                                                                  TESTFIELD("Visit Date");
                                                                  NetworkFacilitatorVisitMgt.ProviderToVisitConfirmed(Rec);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Visit Confirmed;
                                                              FRA=Confirm‚e] }
    { 200 ;   ;Black List          ;Boolean       ;OnValidate=BEGIN
                                                                CLEAR(NetworkFacilitatorVisitMgt);
                                                                NetworkFacilitatorVisitMgt.ProviderToBlackList(Rec);
                                                                "Not Interesting" := FALSE;
                                                              END;

                                                   CaptionML=[ENU=Black List;
                                                              FRA=Black List] }
    { 210 ;   ;Not Interesting     ;Boolean       ;OnValidate=BEGIN
                                                                CLEAR(NetworkFacilitatorVisitMgt);
                                                                NetworkFacilitatorVisitMgt.ProviderToNotInteresting(Rec);
                                                                "Black List" := FALSE;
                                                              END;

                                                   CaptionML=[ENU=Not Interesting;
                                                              FRA=Non int‚ress‚] }
    { 310 ;   ;Create Auto         ;Boolean       ;CaptionML=[ENU=Create Auto;
                                                              FRA=Cr‚ation auto] }
    { 800 ;   ;Visit DateTime      ;DateTime      ;CaptionML=[ENU=Visit DateTime;
                                                              FRA=Date et heure visite] }
    { 2000;   ;Provider Name       ;Text50        ;OnValidate=VAR
                                                                ContBusRel@1001 : Record 5054;
                                                                Cust@1000 : Record 18;
                                                                Vend@1002 : Record 23;
                                                              BEGIN
                                                              END;

                                                   CaptionML=[ENU=Name;
                                                              FRA=Raison sociale] }
    { 2001;   ;Provider Name 2     ;Text50        ;CaptionML=[ENU=Provider Business Name;
                                                              FRA=D‚nomination commerciale prestataire] }
    { 2002;   ;Provider Address    ;Text50        ;CaptionML=[ENU=Provide Address;
                                                              FRA=Adresse prestataire] }
    { 2003;   ;Provider Address 2  ;Text50        ;CaptionML=[ENU=Address 2;
                                                              FRA=Adresse 2] }
    { 2004;   ;Provider Post Code  ;Code20        ;TableRelation="Post Code";
                                                   OnValidate=VAR
                                                                lCode@1000000000 : Code[10];
                                                              BEGIN
                                                                PostCode.ValidatePostCode2(
                                                                  "Provider City",
                                                                  "Provider Post Code",
                                                                  "Provider Area Code",
                                                                  "Prov. Admin. Territory Code",
                                                                  "Prov. IMH Territory Code",
                                                                  "Regional Coordinator",
                                                                  "Network Facilitator",
                                                                  lCode,
                                                                  "Provider Country/Region Code");

                                                                "Prov. Geo. Reference Code" := PostCode.GetReferenceGeoCode("Provider Post Code","Provider City");
                                                              END;

                                                   OnLookup=VAR
                                                              lCode@1000000000 : Code[10];
                                                            BEGIN
                                                              PostCode.LookUpPostCode2(
                                                                "Provider City",
                                                                "Provider Post Code",
                                                                "Provider Area Code",
                                                                "Prov. Admin. Territory Code",
                                                                "Prov. IMH Territory Code",
                                                                "Regional Coordinator",
                                                                "Network Facilitator",
                                                                lCode,
                                                                "Provider Country/Region Code",
                                                                TRUE);

                                                              "Prov. Geo. Reference Code" := PostCode.GetReferenceGeoCode("Provider Post Code","Provider City");
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Provide Post Code;
                                                              FRA=Code postal prestataire] }
    { 2005;   ;Provider City       ;Text30        ;TableRelation="Post Code".City;
                                                   OnValidate=VAR
                                                                lCode@1000000000 : Code[10];
                                                              BEGIN
                                                                PostCode.ValidateCity2(
                                                                  "Provider City",
                                                                  "Provider Post Code",
                                                                  "Provider Area Code",
                                                                  "Prov. Admin. Territory Code",
                                                                  "Prov. IMH Territory Code",
                                                                  "Regional Coordinator",
                                                                  "Network Facilitator",
                                                                  lCode,
                                                                  "Provider Country/Region Code");

                                                                "Prov. Geo. Reference Code" := PostCode.GetReferenceGeoCode("Provider Post Code","Provider City");
                                                              END;

                                                   OnLookup=VAR
                                                              lCode@1000000000 : Code[10];
                                                            BEGIN
                                                              PostCode.LookUpCity2(
                                                                "Provider City",
                                                                "Provider Post Code",
                                                                "Provider Area Code",
                                                                "Prov. Admin. Territory Code",
                                                                "Prov. IMH Territory Code",
                                                                "Regional Coordinator",
                                                                "Network Facilitator",
                                                                lCode,
                                                                "Provider Country/Region Code",
                                                                TRUE);

                                                              "Prov. Geo. Reference Code" := PostCode.GetReferenceGeoCode("Provider Post Code","Provider City");
                                                            END;

                                                   CaptionML=[ENU=City;
                                                              FRA=Ville] }
    { 2006;   ;Provider Phone No.  ;Text30        ;OnValidate=BEGIN
                                                                PhoneStandardization.ValidatePhoneNo(
                                                                  DATABASE::"Network Visit",FIELDNO("Provider Phone No.") ,"Provider Country/Region Code","Provider Phone No.");

                                                                SearchProviderByPhone("Provider Phone No.");
                                                              END;

                                                   ExtendedDatatype=Phone No.;
                                                   CaptionML=[ENU=Provide Phone No.;
                                                              FRA=Nø t‚l‚phone prestataire] }
    { 2007;   ;Provider Mobile Phone No.;Text30   ;OnValidate=BEGIN
                                                                PhoneStandardization.ValidatePhoneNo(
                                                                  DATABASE::"Network Visit",FIELDNO("Provider Mobile Phone No."),
                                                                  "Provider Country/Region Code","Provider Mobile Phone No.");

                                                                SearchProviderByPhone("Provider Mobile Phone No.");
                                                              END;

                                                   ExtendedDatatype=Phone No.;
                                                   CaptionML=[ENU=Provide Mobile Phone No.;
                                                              FRA=Nø t‚l‚phone mobile prestataire] }
    { 2008;   ;Provider Area Code  ;Code10        ;TableRelation=Area;
                                                   CaptionML=[ENU=Area Code;
                                                              FRA=D‚partement] }
    { 2009;   ;Prov. IMH Territory Code;Code10    ;TableRelation=Territory WHERE (Type=CONST(IMH));
                                                   CaptionML=[ENU=IMH Territory Code;
                                                              FRA=Code zone IMH];
                                                   Editable=No }
    { 2010;   ;Provider Country/Region Code;Code10;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Provide Country/Region Code;
                                                              FRA=Code pays prestataire] }
    { 2011;   ;Provider Registration No.;Code20   ;OnValidate=VAR
                                                                lProviderMgt@1100281000 : Codeunit 50018;
                                                              BEGIN
                                                                //lProviderMgt.ValidateSIRETNo("Registration No.", TRUE);
                                                              END;

                                                   CaptionML=[ENU=Registration No.;
                                                              FRA=Nø SIRET] }
    { 2012;   ;Prov. Admin. Territory Code;Code10 ;TableRelation=Territory WHERE (Type=CONST(Administratif));
                                                   CaptionML=[ENU=Admin. Territory Code;
                                                              FRA=R‚gion administrative];
                                                   Editable=No }
    { 2013;   ;Prov. Geo. Reference Code;Code10   ;TableRelation="Geographical Reference";
                                                   CaptionML=[ENU=Prov. Geo. Reference Code;
                                                              FRA=Code r‚f‚rence g‚o. prestataire];
                                                   Editable=No }
    { 2100;   ;Prov. IMH Territory Desc.;Text50   ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Territory.Name WHERE (Code=FIELD(Prov. IMH Territory Code)));
                                                   CaptionML=[ENU=IMH Territory Description;
                                                              FRA=Zone IMH];
                                                   Editable=No }
    { 2101;   ;Prov. Admin. Territory Desc.;Text50;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Territory.Name WHERE (Code=FIELD(Prov. Admin. Territory Code)));
                                                   CaptionML=[ENU=Admin. Territory Description;
                                                              FRA=R‚gion administrative];
                                                   Editable=No }
    { 2200;   ;Provider Not Refenced;Boolean      ;CaptionML=[ENU=Provider Not Refenced;
                                                              FRA=Prestataire non r‚f‚renc‚] }
    { 50100;  ;Claim Service Header No.;Code20    ;TableRelation="Service Header".No.;
                                                   CaptionML=[ENU=Claim Service Header No.;
                                                              FRA=Nø ligne produit r‚clamation] }
    { 50110;  ;Comment             ;Text250       ;CaptionML=[ENU=Comment;
                                                              FRA=Commentaire] }
    { 50120;  ;Minites interaction No.;Integer    ;CaptionML=[ENU=Minites interaction No.;
                                                              FRA=Nø interaction compte rendu] }
    { 50121;  ;Minites Imported    ;Boolean       ;CaptionML=[ENU=Minites Imported;
                                                              FRA=Compte rendu int‚gr‚] }
    { 50122;  ;Minute Mandatory    ;Boolean       ;CaptionML=[ENU=Minute obligatory;
                                                              FRA=Compte-rendu obligatoire] }
    { 50500;  ;Creation Date       ;DateTime      ;CaptionML=[ENU=Creation Date;
                                                              FRA=Date de cr‚ation];
                                                   Editable=No }
    { 50501;  ;Creation User ID    ;Text30        ;TableRelation="User Setup"."User ID";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Creation User ID;
                                                              FRA=Utilisateur cr‚ation];
                                                   Editable=No }
    { 50502;  ;Last Modification Date;DateTime    ;CaptionML=[ENU=Last Modification Date;
                                                              FRA=Date derniŠre modification];
                                                   Editable=No }
    { 50503;  ;Last Modification User ID;Text30   ;TableRelation="User Setup"."User ID";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Last Modification User ID;
                                                              FRA=Utilisateur derniŠre modification];
                                                   Editable=No }
    { 54022;  ;Admin. Contact No.  ;Code20        ;TableRelation=Contact;
                                                   OnValidate=BEGIN
                                                                GetAdminContactInfo;
                                                              END;

                                                   CaptionML=[ENU=Admin. Manager No.;
                                                              FRA=Nø contact admin.] }
    { 54023;  ;Admin. Contact Name ;Text50        ;CaptionML=[ENU=Admin. Contact Name;
                                                              FRA=Nom contact administratif] }
    { 54024;  ;Admin. Contact Phone No.;Text30    ;CaptionML=[ENU=Admin. Contact Phone No.;
                                                              FRA=Nø t‚l‚phone administratif] }
    { 54025;  ;Admin. Contact Mb. Phone No.;Text30;CaptionML=[ENU=Admin. Contact Mobile Phone No.;
                                                              FRA=Nø t‚l‚phone mobile administratif] }
    { 54026;  ;Admin. Contact Mb. Phone No. 2;Text30;
                                                   CaptionML=[ENU=Admin. Contact Mobile Phone No. 2;
                                                              FRA=Nø t‚l‚phone mobile 2 administratif] }
    { 54027;  ;Admin. Contact Fax No.;Text30      ;CaptionML=[ENU=Admin. Contact Fax No.;
                                                              FRA=Nø fax administratif] }
    { 54028;  ;Admin. Contact E-mail;Text80       ;OnValidate=VAR
                                                                lEmailStandardization@1100281000 : Codeunit 50096;
                                                              BEGIN
                                                                lEmailStandardization.ValidateEmail("Admin. Contact E-mail");
                                                              END;

                                                   CaptionML=[ENU=Admin. Contact E-mail;
                                                              FRA=E-mail administratif] }
    { 54032;  ;Admin. Salutation Code;Code10      ;TableRelation=Salutation;
                                                   CaptionML=[ENU=Admin. Salutation Code;
                                                              FRA=Civilit‚] }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Type,Closed                              }
    {    ;Provider No.,Closed                      }
    {    ;Claim Service Header No.                 }
    {    ;Planning No.,Visit Date,Visit Time       }
    {    ;Provider Registration No.                }
    {    ;Provider Post Code,Provider Phone No.    }
    {    ;Provider Phone No.,Provider Post Code    }
    {    ;Status,Closed                            }
    {    ;Presentation Order                       }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1100281000 : TextConst 'ENU=Visit category setup missing for the code category %1.;FRA=ParamŠtre cat‚gorie visite manquant pour le cat‚gorie code %1.';
      ProviderSetup@1000000000 : Record 50011;
      PostCode@1100281002 : Record 225;
      Text002@1100281003 : TextConst 'ENU=Do you want to add the provider to the Black list;FRA=Voulez-vous ajouter le prestataire dans la Black List?';
      ContactSearchMgt@1100281005 : Codeunit 50097;
      NetworkFacilitatorVisitMgt@1000000003 : Codeunit 50076;
      NoSeriesMgt@1000000005 : Codeunit 396;
      PhoneStandardization@1000000001 : Codeunit 50099;
      Text003@1000000002 : TextConst 'ENU=Do you want to create the provider?;FRA=Souhaitez-vous cr‚er le prestataire?';
      Text004@1000000004 : TextConst 'ENU=Action cancel.;FRA=Op‚ration annul‚e.';
      GetProviderSetupOK@1000000006 : Boolean;
      Text005@1100281001 : TextConst 'ENU=Do you want to create a visit ?;FRA=Souhaitez-vous cr‚er une visite ?';
      Text017@1100281004 : TextConst 'ENU=Do you want to confirm the visit?;FRA=Souhaitez-vous confirmer la visite?';
      HideConfirmMge@1100281006 : Boolean;
      ChangLogMgt@1000000008 : Codeunit 423;
      xRecref@1000000009 : RecordRef;
      Recref@1000000007 : RecordRef;

    PROCEDURE TouchRecord@1100281002(pInsert@1100281000 : Boolean);
    BEGIN
      IF pInsert THEN BEGIN
        "Creation Date" := CURRENTDATETIME;
        "Creation User ID" := USERID;
      END;
      "Last Modification Date" := CURRENTDATETIME;
      "Last Modification User ID" := USERID;
    END;

    PROCEDURE CreateRejectProvider@1100281004();
    VAR
      lProviderSetup@1100281001 : Record 50011;
      lProvider@1100281002 : Record 50000;
    BEGIN
      IF (Type = Type::"Camp. Recruitment") AND ("Provider No." = '') THEN
      BEGIN
        CLEAR(NetworkFacilitatorVisitMgt);
        NetworkFacilitatorVisitMgt.CreateProvider(Rec, lProvider, FALSE);
        lProvider.Enable := FALSE;
        lProvider.MODIFY;
        COMMIT;
        lProvider.VALIDATE("Black List Reason Code",'BL-PASIN');
        lProvider.MODIFY(FALSE);
      END;
    END;

    PROCEDURE CreateWaitProvider@1100281001();
    VAR
      lProvider@1100281002 : Record 50000;
    BEGIN
      IF (Type = Type::"Camp. Recruitment") AND ("Provider No." = '') THEN
      BEGIN
        CLEAR(NetworkFacilitatorVisitMgt);
        NetworkFacilitatorVisitMgt.CreateProvider(Rec, lProvider, FALSE);
        lProvider.Enable := FALSE;
        lProvider.MODIFY;
        COMMIT;
        GetProviderSetup;
        lProvider.VALIDATE("Process Status No.",ProviderSetup."Prov Process Recrutement excl");
        lProvider.MODIFY(FALSE);
      END;
    END;

    PROCEDURE SearchProviderByPhone@1100281006(pPhoneNo@1100281000 : Text[30]);
    VAR
      lFind@1100281001 : Boolean;
      lContactNo@1100281002 : Code[20];
      lProvider@1100281003 : Record 50000;
    BEGIN
      IF ContactSearchMgt.GetContactByPhoneNo(pPhoneNo,lFind,lContactNo) THEN
        IF lProvider.GET(lContactNo) THEN
          VALIDATE("Provider No.",lProvider."No.");
    END;

    LOCAL PROCEDURE GetAdminContactInfo@1000000003();
    VAR
      lContact@1000000000 : Record 5050;
      lProvider@1000000001 : Record 50000;
    BEGIN
      IF NOT lContact.GET("Admin. Contact No.") THEN
        EXIT;

      IF lContact.Name <> '' THEN
        "Admin. Contact Name" := lContact.Name
      ELSE
        IF lProvider.Name <> '' THEN
        "Admin. Contact Name" := lProvider.Name;

      IF lContact."Phone No." <> '' THEN
        "Admin. Contact Phone No." := lContact."Phone No."
      ELSE
        IF lProvider."Phone No." <> '' THEN
          "Admin. Contact Phone No." := lProvider."Phone No.";

      IF lContact."Mobile Phone No." <> '' THEN
        "Admin. Contact Mb. Phone No." := lContact."Mobile Phone No."
      ELSE
        IF lProvider."Mobile Phone No." <> '' THEN
        "Admin. Contact Mb. Phone No." := lProvider."Mobile Phone No.";

      IF lContact."Mobile Phone No. 2" <> '' THEN
        "Admin. Contact Mb. Phone No. 2" := lContact."Mobile Phone No. 2"
      ELSE
        IF lProvider."Mobile Phone No. 2" <> '' THEN
          "Admin. Contact Mb. Phone No. 2" := lProvider."Mobile Phone No. 2";

      IF lContact."Fax No." <> '' THEN
        "Admin. Contact Fax No." := lContact."Fax No."
      ELSE
        IF lProvider."Fax No." <> '' THEN
          "Admin. Contact Fax No." := lProvider."Fax No.";

      IF lContact."E-Mail" <> '' THEN
        "Admin. Contact E-mail" := lContact."E-Mail"
      ELSE
        IF lProvider."E-Mail" <> '' THEN
          "Admin. Contact E-mail" := lProvider."E-Mail";
      IF lContact."Salutation Code" <> '' THEN
        "Admin. Salutation Code" := lContact."Salutation Code";
    END;

    LOCAL PROCEDURE GetSalesPersonName@1000000002(pCode@1000000002 : Code[10]) rValue : Text[50];
    VAR
      lUserSetup@1000000000 : Record 91;
      lSalespersonPurchaser@1000000001 : Record 13;
    BEGIN
      // IMH04.PC
      // r‚cupŠre le nom du code vendeur en fonction du code pass‚ en paramŠtre

      rValue := '';

      IF NOT lUserSetup.GET(pCode) THEN BEGIN
        EXIT;
      END;
      IF NOT lSalespersonPurchaser.GET(lUserSetup."Salespers./Purch. Code") THEN BEGIN
        EXIT;
      END;

      rValue := lSalespersonPurchaser.Name;
    END;

    PROCEDURE DeletePlanningLine@1000000007();
    BEGIN
      IF "Create Auto" THEN
        DeleteLine
      ELSE
        DeleteFromDocFlowHeader;
    END;

    PROCEDURE DeleteLine@1100281005();
    BEGIN
      DELETE(TRUE);
    END;

    PROCEDURE DeleteFromDocFlowHeader@1100281016();
    VAR
      lDocQueue@1100281000 : Record 50054;
    BEGIN
      VALIDATE("Planning No.", '');
      MODIFY(TRUE);
    END;

    PROCEDURE GetBeforeVisit@1100281000(VAR pName@1100281001 : Text[50];VAR pCity@1100281002 : Text[30];VAR pVisitTime@1100281003 : Time;VAR pMeetingTime@1100281004 : Integer) rValue : Boolean;
    VAR
      lBeforeNetworkVisit@1100281000 : Record 50105;
    BEGIN
      // Permet d'avoir la visite pr‚c‚dente

      rValue := FALSE;

      pName := '';
      pCity := '';
      pVisitTime := 0T;
      pMeetingTime := 0;

      IF "Planning No." = '' THEN BEGIN
        EXIT;
      END;

      lBeforeNetworkVisit.SETCURRENTKEY("Planning No.","Visit Date","Visit Time");
      lBeforeNetworkVisit.SETRANGE("Planning No.","Planning No.");
      lBeforeNetworkVisit.SETRANGE("Visit Date","Visit Date");
      IF lBeforeNetworkVisit.ISEMPTY THEN BEGIN
        EXIT;
      END;

      lBeforeNetworkVisit := Rec;
      IF lBeforeNetworkVisit.NEXT(-1) = 0 THEN BEGIN
        EXIT;
      END;

      pName := lBeforeNetworkVisit."Provider Name";
      pCity := lBeforeNetworkVisit."Provider City";
      pVisitTime := lBeforeNetworkVisit."Visit Time";
      pMeetingTime := lBeforeNetworkVisit."Metting Time (min.)";

      rValue := TRUE;
    END;

    PROCEDURE GetAfterVisit@1100281003(VAR pName@1100281003 : Text[50];VAR pCity@1100281002 : Text[30];VAR pTripTime@1100281000 : Decimal;VAR pTripDistance@1100281006 : Decimal;VAR pMinVisitTime@1100281001 : Time;VAR pVisitTime@1100281004 : Time) rValue : Boolean;
    VAR
      lAfterNetworkVisit@1100281005 : Record 50105;
    BEGIN
      // Permet d'avoir la visite suivante

      rValue := FALSE;

      pName := '';
      pCity := '';
      pTripTime := 0;
      pTripDistance := 0;
      pMinVisitTime := 0T;
      pVisitTime := 0T;

      IF "Planning No." = '' THEN BEGIN
        EXIT;
      END;


      lAfterNetworkVisit.SETCURRENTKEY("Planning No.","Visit Date","Visit Time");
      lAfterNetworkVisit.SETRANGE("Planning No.","Planning No.");
      lAfterNetworkVisit.SETRANGE("Visit Date","Visit Date");
      IF lAfterNetworkVisit.ISEMPTY THEN BEGIN
        EXIT;
      END;

      lAfterNetworkVisit := Rec;
      IF lAfterNetworkVisit.NEXT = 0 THEN BEGIN
        EXIT;
      END;

      pName := lAfterNetworkVisit."Provider Name";
      pCity := lAfterNetworkVisit."Provider City";
      GetTimeAndDistance(Rec,lAfterNetworkVisit,pTripTime,pTripDistance);
      //<<IMH11
      //pMinVisitTime := lAfterNetworkVisit."Min. Visit Time";
      //pMinVisitTime := GetMinBeforeVisitTime;
      //>>IMH11
      pVisitTime := lAfterNetworkVisit."Visit Time";

      rValue := TRUE;
    END;

    LOCAL PROCEDURE GetTimeAndDistance@1000000004(pStartNetworkVisit@1100281000 : Record 50105;pEndNetworkVisit@1100281001 : Record 50105;VAR pTime@1000000008 : Decimal;VAR pDistance@1000000009 : Decimal);
    VAR
      lAbilityGeoMgt@1000000000 : Codeunit 50011;
      lFirstLatitude@1000000004 : Integer;
      lFirstLongitude@1000000005 : Integer;
      lSecondLatitude@1000000006 : Integer;
      lSecondLongitude@1000000007 : Integer;
      lTime@1000000010 : Decimal;
      lDistance@1000000011 : Decimal;
    BEGIN
      // calcul la distance et le temps entre 2 visites

      pTime := 0;
      pDistance := 0;

      lAbilityGeoMgt.GetGeoCodeWS(
        pStartNetworkVisit."Provider Address" + ' ' + pStartNetworkVisit."Provider Address 2",
        pStartNetworkVisit."Provider Post Code",
        pStartNetworkVisit."Provider City",
        lFirstLatitude,
        lFirstLongitude);
      lAbilityGeoMgt.GetGeoCodeWS(
        pEndNetworkVisit."Provider Address" + ' ' + pEndNetworkVisit."Provider Address 2",
        pEndNetworkVisit."Provider Post Code",
        pEndNetworkVisit."Provider City",
        lSecondLatitude,
        lSecondLongitude);
      //lAbilityGeoMgt.GetRoute(lSecondLatitude,lSecondLongitude,lFirstLatitude,lFirstLongitude,pTime,pDistance);
      lAbilityGeoMgt.SearchAround2(lSecondLatitude,lSecondLongitude,lFirstLatitude,lFirstLongitude,pTime,pDistance);
    END;

    PROCEDURE GetMinBeforeVisitTime@1000000010() rValue : Time;
    VAR
      lTripTime@1000000001 : Decimal;
      lTripDistance@1000000000 : Decimal;
      lBeforeNetworkVisit@1100281005 : Record 50105;
    BEGIN
      //IMH11
      // Calculer l'heure de visite min avant
      IF "Planning No." = '' THEN BEGIN
        EXIT;
      END;

      IF "Visit Date" = 0D THEN
        EXIT;

      lBeforeNetworkVisit.SETCURRENTKEY("Planning No.","Visit Date","Visit Time");
      lBeforeNetworkVisit.SETRANGE("Planning No.","Planning No.");
      lBeforeNetworkVisit.SETRANGE("Visit Date","Visit Date");
      IF lBeforeNetworkVisit.ISEMPTY THEN BEGIN
        EXIT;
      END;

      lBeforeNetworkVisit := Rec;
      IF lBeforeNetworkVisit.NEXT(-1) = 0 THEN BEGIN
        rValue := "Visit Time";
        EXIT;
      END;

      IF lBeforeNetworkVisit."Visit Time" = 0T THEN
        EXIT;

      GetTimeAndDistance(lBeforeNetworkVisit, Rec, lTripTime, lTripDistance);

      //Heure min RDV = Heure dernier RDV + temps trajet + temps dernier RDV
      rValue := lBeforeNetworkVisit."Visit Time" + (lTripTime + lBeforeNetworkVisit."Metting Time (min.)") * 60000;
    END;

    PROCEDURE GetMinAfterVisitTime@1000000009() rValue : Time;
    VAR
      lTripTime@1000000001 : Decimal;
      lTripDistance@1000000000 : Decimal;
      lAfterNetworkVisit@1100281005 : Record 50105;
    BEGIN
      //IMH11
      // Calculer l'heure de visite min aprŠs
      IF "Planning No." = '' THEN BEGIN
        EXIT;
      END;

      IF "Visit Date" = 0D THEN
        EXIT;

      lAfterNetworkVisit.SETCURRENTKEY("Planning No.","Visit Date","Visit Time");
      lAfterNetworkVisit.SETRANGE("Planning No.","Planning No.");
      lAfterNetworkVisit.SETRANGE("Visit Date","Visit Date");
      IF lAfterNetworkVisit.ISEMPTY THEN BEGIN
        EXIT;
      END;

      lAfterNetworkVisit := Rec;
      IF lAfterNetworkVisit.NEXT = 0 THEN BEGIN
        rValue := "Visit Time";
        EXIT;
      END;
      IF lAfterNetworkVisit."Visit Time" = 0T THEN
        EXIT;

      GetTimeAndDistance(Rec, lAfterNetworkVisit, lTripTime, lTripDistance);

      //Heure min RDV = Heure dernier RDV + temps trajet + temps dernier RDV
      rValue := lAfterNetworkVisit."Visit Time" - (lTripTime + "Metting Time (min.)") * 60000;
    END;

    PROCEDURE ShowCard@1000000000();
    BEGIN
      FORM.RUN(FORM::"Network Facilitator Visit Card", Rec);
    END;

    PROCEDURE ShowProviderCard@1000000001();
    VAR
      lProvider@1000000000 : Record 50000;
    BEGIN
      IF "Provider No." = '' THEN
        EXIT;
      IF lProvider.GET("Provider No.") THEN
        FORM.RUN(FORM::"Provider Card", lProvider);
    END;

    LOCAL PROCEDURE GetProviderSetup@1000000005();
    BEGIN
      IF GetProviderSetupOK THEN BEGIN
        EXIT;
      END;

      ProviderSetup.GET;
      GetProviderSetupOK := TRUE;
    END;

    LOCAL PROCEDURE CreateVisitDateTime@1100281007();
    BEGIN
      IF ("Visit Date" = 0D) OR ("Visit Time" = 0T) THEN BEGIN
        "Visit DateTime" := 0DT;
      END ELSE BEGIN
        "Visit DateTime" := CREATEDATETIME("Visit Date","Visit Time");
      END;
    END;

    PROCEDURE SearchProvider@1000000006();
    VAR
      lContactNo@1100281000 : Code[20];
      lContactSearchMgt@1100281001 : Codeunit 50097;
      lContactFilter@1100281002 : TEMPORARY Record 5050;
      lTeam@1100281003 : Record 5083;
    BEGIN
      lContactFilter.SETRANGE("Service Contact", lContactFilter."Service Contact"::Provider);
      IF lContactSearchMgt.SearchContactWithFilters(lContactFilter, lContactNo) THEN
      //if lContactSearchMgt.SearchContact(0, lContactNo) then
        VALIDATE("Provider No.", lContactNo);
    END;

    PROCEDURE CreateNewVisit@1100281008(pWithConfirm@1100281000 : Boolean;pProviderNo@1100281003 : Code[20]);
    VAR
      lNetworkVisit@1100281001 : Record 50105;
      lNetworkVisitCard@1100281002 : Form 50316;
    BEGIN
      IF pWithConfirm THEN BEGIN
        IF NOT CONFIRM(Text005) THEN BEGIN
          EXIT;
        END;
      END;

      lNetworkVisit."No." := '';
      FILTERGROUP(2);
      IF GETFILTER(Type) <> '' THEN BEGIN
        lNetworkVisit.Type := lNetworkVisit.Type::Claim;
      END;
      FILTERGROUP(0);
      lNetworkVisit.INSERT(TRUE);

      lNetworkVisit.SETRANGE("No.",lNetworkVisit."No.");
      IF pProviderNo <> '' THEN BEGIN
        lNetworkVisit.VALIDATE("Provider No.",pProviderNo);
        lNetworkVisit.MODIFY(TRUE);
      END;
      COMMIT;
      lNetworkVisit.SETRECFILTER;

      CLEAR(lNetworkVisitCard);
      lNetworkVisitCard.SETRECORD(lNetworkVisit);
      lNetworkVisitCard.RUN;
    END;

    PROCEDURE GetProvProcessStatusDesc@1100281009() : Text[250];
    VAR
      lProcessStatus@1100281000 : Record 50042;
    BEGIN
      CALCFIELDS("Provider Process Code", "Provider Process Status No.");
      IF lProcessStatus.GET("Provider Process Code", "Provider Process Status No.") THEN
        EXIT(lProcessStatus.Description);
    END;

    PROCEDURE PhoneNoAssistEdit@1000000008(pPhoneNo@1000000001 : Text[30]);
    VAR
      lCTIMgt@1000000000 : Codeunit 50138;
    BEGIN
      //IMH07
      TESTFIELD("Black List", FALSE); //IMH10
      IF pPhoneNo <> '' THEN BEGIN
        lCTIMgt.MakeCall(pPhoneNo);
      END;
    END;

    BEGIN
    {
      /** @r IMH14 @d 14/10/13 @a ISAT.ST @v IMH6.01.353 @s Reorganisation region IMH @h 4760 @c Renommage CR / AR / R‚gion */
      /** @r IMH13 @d 12/07/13 @a ISAT.ACO @v IMH6.01.351 @s JUILLET @h 3671 @c Interlocuteur visite obligatoire pour effectuer visite */
      /** @r IMH12 @d 19/11/12 @a ISAT.ZW @v IMH6.01.4102 @s MEP00001 @ 4102
          @c Contact admin vide  */
      /** @r IMH11 @d 11/04/12 @a ISAT.ZW @v IMH6.01.115 @s Visite Animation Reseau @ mantis 3282
          @c Gestion de l'heure min RDV  */
      /** @r IMH10 @d 10/04/12 @a ISAT.ZW @v IMH6.01.115 @s Visite Animation Reseau @ mantis 3275
          @c Un prestataire black-list‚ peut ˆtre contact‚ via le CTI  */
      /** @r IMH09 @d 10/04/12 @a ISAT.ZW @v IMH6.01.115 @s Visite Animation Reseau @ mantis 3285
          @c Vlidate type … la cr‚ation pour le champ CR obligatoire */
      /** @r IMH08 @d 10/04/12 @a ISAT.ZW @v IMH6.01.115 @s Visite Animation Reseau @ mantis 3282
          @c Supprimer le champ description statut Processus */
      /** @r IMH07 @d 30/03/12 @a ISAT.ZW @v IMH6.01.108 @s Interactions @ mantis 3233 @c FOnction CTI */
      /** @r IMH06 @d 28/03/12 @a ISAT.ZW @v IMH6.01.115 @h mantis 3206 @c Ajout champ Geo. Reference Code */
      /** @r IMH05 @d 22/03/12 @a ISAT.ZW @v IMH6.01.115 @s Ajout champ Presentation Order */
      /** @r IMH04 @d 21/02/12 @a ISAT.PC @v IMH6.01.115 @s Finalisation */
      /** @r IMH03 @d 07/02/12 @a ISAT.ZW @v IMH6.01.115 @s Finalisation */
      /** @r IMH02 @d 11/03/11 @a ISAT.PC @v IMH6.01.020 @s prestataire
          @c Ajout de la cl‚ "Provider No." pour la gestion de la suppression */
      /** @r IMH01 @d 23/02/11 @a ISAT.ZW @v IMH6.01.115 @s Visite Animation Reseau @c Cr‚ation */
    }
    END.
  }
}