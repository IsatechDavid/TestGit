OBJECT Table 5083 Team
{
  OBJECT-PROPERTIES
  {
    Date=26/03/14;
    Time=11:09:41;
    Modified=Yes;
    Version List=NAVW16.00,IMH6.01.08,Hotfix,5005;
  }
  PROPERTIES
  {
    DataCaptionFields=Code,Name;
    OnInsert=BEGIN
               VALIDATE("Showing Filter");   //IMH15
             END;

    OnModify=BEGIN
               VALIDATE("Showing Filter");   //IMH15
             END;

    OnDelete=VAR
               TeamSalesperson@1000 : Record 5084;
               lTeamSubst@1100281000 : Record 50097;
               lTrayAct@1100281001 : Record 50048;
             BEGIN
               //<<IMH06.ST
               lTrayAct.SETRANGE("Team Code", Code);
               IF NOT lTrayAct.ISEMPTY THEN
                 ERROR(STRSUBSTNO(Text50000, Code));
               //>>IMH06.ST
               TeamSalesperson.RESET;
               TeamSalesperson.SETRANGE("Team Code",Code);
               IF NOT TeamSalesperson.ISEMPTY THEN //IMH06.ST
               TeamSalesperson.DELETEALL;
               //<<IMH06.ST
               lTeamSubst.SETRANGE("Source Team Code", Code);
               IF NOT lTeamSubst.ISEMPTY THEN
                 lTeamSubst.DELETEALL(TRUE);
               lTeamSubst.SETCURRENTKEY("Substitution Team Code");
               lTeamSubst.SETRANGE("Substitution Team Code", Code);
               IF NOT lTeamSubst.ISEMPTY THEN
                 lTeamSubst.DELETEALL(TRUE);
               //>>IMH06.ST
             END;

    CaptionML=[ENU=Team;
               FRA=Corbeille];
    LookupFormID=Form5105;
    DrillDownFormID=Form5105;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code10        ;CaptionML=[ENU=Code;
                                                              FRA=Code];
                                                   NotBlank=Yes }
    { 2   ;   ;Name                ;Text30        ;CaptionML=[ENU=Name;
                                                              FRA=Nom] }
    { 3   ;   ;Next To-do Date     ;Date          ;FieldClass=FlowField;
                                                   CalcFormula=Min(To-do.Date WHERE (Team Code=FIELD(Code),
                                                                                     Closed=CONST(No)));
                                                   CaptionML=[ENU=Next To-do Date;
                                                              FRA=Date prochaine action];
                                                   Editable=No }
    { 4   ;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Date Filter;
                                                              FRA=Filtre date] }
    { 5   ;   ;Contact Filter      ;Code20        ;FieldClass=FlowFilter;
                                                   TableRelation=Contact;
                                                   CaptionML=[ENU=Contact Filter;
                                                              FRA=Filtre contact] }
    { 6   ;   ;Contact Company Filter;Code20      ;FieldClass=FlowFilter;
                                                   TableRelation=Contact WHERE (Type=CONST(Company));
                                                   CaptionML=[ENU=Contact Company Filter;
                                                              FRA=Filtre soci‚t‚] }
    { 7   ;   ;To-do Status Filter ;Option        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=To-do Status Filter;
                                                              FRA=Filtre statut action];
                                                   OptionCaptionML=[ENU=Not Started,In Progress,Completed,Waiting,Postponed;
                                                                    FRA=Non d‚marr‚,En cours,Termin‚,En attente,Report‚];
                                                   OptionString=Not Started,In Progress,Completed,Waiting,Postponed }
    { 8   ;   ;To-do Closed Filter ;Boolean       ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=To-do Closed Filter;
                                                              FRA=Filtre action termin‚e] }
    { 9   ;   ;Priority Filter     ;Option        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Priority Filter;
                                                              FRA=Filtre priorit‚];
                                                   OptionCaptionML=[ENU=Low,Normal,High;
                                                                    FRA=Faible,Normale,Haute];
                                                   OptionString=Low,Normal,High }
    { 11  ;   ;Salesperson Filter  ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation=Salesperson/Purchaser;
                                                   CaptionML=[ENU=Salesperson Filter;
                                                              FRA=Filtre vendeur] }
    { 12  ;   ;Campaign Filter     ;Code20        ;FieldClass=FlowFilter;
                                                   TableRelation=Campaign;
                                                   CaptionML=[ENU=Campaign Filter;
                                                              FRA=Filtre campagne] }
    { 13  ;   ;To-do Entry Exists  ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist(To-do WHERE (Team Code=FIELD(Code),
                                                                                  Contact No.=FIELD(Contact Filter),
                                                                                  Contact Company No.=FIELD(Contact Company Filter),
                                                                                  Salesperson Code=FIELD(Salesperson Filter),
                                                                                  Campaign No.=FIELD(Campaign Filter),
                                                                                  Status=FIELD(To-do Status Filter),
                                                                                  Closed=FIELD(To-do Closed Filter),
                                                                                  Priority=FIELD(Priority Filter),
                                                                                  Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=To-do Entry Exists;
                                                              FRA=Ecriture action existante];
                                                   Editable=No }
    { 50000;  ;Blocked             ;Boolean       ;CaptionML=[ENU=Blocked;
                                                              FRA=Bloqu‚e] }
    { 50001;  ;Team Group Code     ;Code10        ;TableRelation=Code.Code WHERE (Table ID=CONST(5083),
                                                                                  Field ID=CONST(50001));
                                                   CaptionML=[ENU=Team Group Code;
                                                              FRA=Code groupe corbeille] }
    { 50002;  ;Salesperson Code    ;Code10        ;TableRelation="Team Salesperson"."Salesperson Code" WHERE (Team Code=FIELD(Code));
                                                   CaptionML=[ENU=Salesperson Code;
                                                              FRA=Code responsable] }
    { 50005;  ;Show To DGS         ;Boolean       ;OnValidate=BEGIN
                                                                //<<IMH12.PC
                                                                VALIDATE("Showing Filter");
                                                                //>>IMH12.PC
                                                              END;

                                                   CaptionML=[ENU=Show To Contact;
                                                              FRA=Afficher pour le DGS] }
    { 50006;  ;Show To DPR         ;Boolean       ;OnValidate=BEGIN
                                                                //<<IMH12.PC
                                                                VALIDATE("Showing Filter");
                                                                //>>IMH12.PC
                                                              END;

                                                   CaptionML=[ENU=Show To Service;
                                                              FRA=Afficher pour le DPR] }
    { 50007;  ;Show To DFC         ;Boolean       ;OnValidate=BEGIN
                                                                //<<IMH12.PC
                                                                VALIDATE("Showing Filter");
                                                                //>>IMH12.PC
                                                              END;

                                                   CaptionML=[ENU=Show To DFC;
                                                              FRA=Afficher pour le DFC] }
    { 50008;  ;Show To DQP         ;Boolean       ;OnValidate=BEGIN
                                                                VALIDATE("Showing Filter");//IMH20
                                                              END;

                                                   CaptionML=[ENU=Show To DQP;
                                                              FRA=Afficher pour le DQP] }
    { 50010;  ;Service Header Filter 1;Text250    ;CaptionML=[ENU=Service Header Filter 1;
                                                              FRA=Filtre ligne produit 1] }
    { 50011;  ;Service Header Filter 2;Text250    ;CaptionML=[ENU=Service Header Filter 2;
                                                              FRA=Filtre ligne produit 2] }
    { 50012;  ;Tray Line Hist. Delay;DateFormula  ;CaptionML=[ENU=Tray Line Hist. Delay;
                                                              FRA=D‚lai historisation activit‚ corbeille] }
    { 50020;  ;Tray Line Number    ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Tray Line" WHERE (Team Code=FIELD(Code)));
                                                   CaptionML=[ENU=Tray Line Number;
                                                              FRA=Nombre d'activit‚ corbeille];
                                                   Editable=No }
    { 50021;  ;Unclosed Tray Line Number;Integer  ;FieldClass=FlowField;
                                                   CalcFormula=Count("Tray Line" WHERE (Team Code=FIELD(Code),
                                                                                        Closed=CONST(No)));
                                                   CaptionML=[ENU=Tray Line Number;
                                                              FRA=Nombre de ligne corbeille non termin‚e];
                                                   Editable=No }
    { 50022;  ;Assignment Priority ;Integer       ;CaptionML=[ENU=Assignment Priority;
                                                              FRA=Priorit‚ affectation] }
    { 50030;  ;Service Assignment  ;Boolean       ;CaptionML=[ENU=Service Assignment;
                                                              FRA=Affectation service] }
    { 50031;  ;User Assignment     ;Option        ;CaptionML=[ENU=User Assignment;
                                                              FRA=Assignation utilisateur];
                                                   OptionCaptionML=[ENU=" ,Service Creator";
                                                                    FRA=" ,Cr‚ateur ligne produit"];
                                                   OptionString=[ ,ServiceCreator] }
    { 50040;  ;Territory           ;Option        ;CaptionML=[ENU=Territory;
                                                              FRA=Zone];
                                                   OptionCaptionML=[ENU=" ,RC Territory,NA Territory,NF Territory";
                                                                    FRA=" ,Responsable,Zone AR,Charg‚ de pilotage"];
                                                   OptionString=[ ,RC Territory,NA Territory,NF Territory] }
    { 50050;  ;Provider Filter 1   ;Text250       ;CaptionML=[ENU=Provider Filter 1;
                                                              FRA=Filtre prestataire 1] }
    { 50051;  ;Provider Filter 2   ;Text250       ;CaptionML=[ENU=Provider Filter 2;
                                                              FRA=Filtre prestataire 2] }
    { 50052;  ;Provider Assignment ;Boolean       ;CaptionML=[ENU=Provider Assignment;
                                                              FRA=Affectation prestataire] }
    { 50060;  ;Show Group          ;Option        ;CaptionML=[ENU=Show Group;
                                                              FRA=Groupe d'affichage];
                                                   OptionCaptionML=[ENU=Default,Enter Flow;
                                                                    FRA=D‚faut,Flux rentrant];
                                                   OptionString=Default,EnterFlow }
    { 50069;  ;Showing Filter      ;Code4         ;OnValidate=BEGIN
                                                                //<<IMH12.PC
                                                                IF "Show To DGS" THEN BEGIN
                                                                  "Showing Filter"[1] := '1';
                                                                END ELSE BEGIN
                                                                  "Showing Filter"[1] := '0';
                                                                END;
                                                                IF "Show To DPR" THEN BEGIN
                                                                  "Showing Filter"[2] := '1';
                                                                END ELSE BEGIN
                                                                  "Showing Filter"[2] := '0';
                                                                END;
                                                                IF "Show To DFC" THEN BEGIN
                                                                  "Showing Filter"[3] := '1';
                                                                END ELSE BEGIN
                                                                  "Showing Filter"[3] := '0';
                                                                END;
                                                                IF "Show To DQP" THEN BEGIN
                                                                  "Showing Filter"[4] := '1';
                                                                END ELSE BEGIN
                                                                  "Showing Filter"[4] := '0';
                                                                END;
                                                                //>>IMH12.PC
                                                              END;

                                                   CaptionML=[ENU=Showing Filter;
                                                              FRA=Filtre affichage] }
    { 50070;  ;Service Tray Task Code Filter;Text250;
                                                   TableRelation="Tray Task"."Task Code";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Service Tray Task Code Filter;
                                                              FRA=Filtre Code Tƒche Service] }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
    {    ;Service Assignment,Assignment Priority   }
    {    ;Provider Assignment,Assignment Priority  }
    {    ;Team Group Code,Code                     }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1100281001 : TextConst 'ENU=You can''t use table nø%1.;FRA=Vous ne pouvez pas utiliser la table %1.';
      Text002@1100281000 : TextConst 'ENU=Table filter is too long. Please limit.;FRA=Le filtre que vous utiliser est trop long. Veuillez le limiter.';
      Text50000@1100281002 : TextConst 'ENU=You can''t delete team %1 because tray lines exist.;FRA=Vous ne pouvez pas supprimer la corbeille %1 car il existe des activit‚s.';

    PROCEDURE GetRecFilters@1100281003(pWithName@1100281000 : Boolean;pWhichFilter@1100281002 : Integer) ReturnValue : Text[1024];
    VAR
      lRecordRef@1100281001 : RecordRef;
      lText1@1100281003 : Text[1024];
      lText2@1100281004 : Text[1024];
      lPosition@1100281005 : Integer;
    BEGIN
      //IMH4 isat.zw
      CASE pWhichFilter OF
        1 : BEGIN
          IF ("Service Header Filter 1" = '') THEN
            EXIT('');
          ReturnValue := "Service Header Filter 1";
        END;
        2 : BEGIN
          IF ("Service Header Filter 2" = '') THEN
            EXIT('');
          ReturnValue := "Service Header Filter 2";
        END;
      END;
      IF pWithName THEN BEGIN
        lRecordRef.OPEN(DATABASE::"Service Header", TRUE);
        lRecordRef.SETVIEW(ReturnValue);

        lText1 := COPYSTR(lRecordRef.GETVIEW(TRUE), 1 , MAXSTRLEN(lText1));
        lText2 := COPYSTR(lRecordRef.GETVIEW(TRUE), MAXSTRLEN(lText1), MAXSTRLEN(lText2));
        lPosition := STRPOS(lText1, 'SORTING(');
        IF lPosition = 1 THEN BEGIN // d‚bute par sorting
          lPosition := STRPOS(lText1, ') WHERE(');
          IF lPosition <> 0 THEN
            lText1 := COPYSTR(lText1, lPosition+2, MAXSTRLEN(lText1)); // Suppression du sorting jusqu'au where
        END;
        lPosition := STRPOS(lText1, 'WHERE(');
        IF lPosition = 1 THEN BEGIN // d‚bute par where
          lText1 := COPYSTR(lText1, lPosition+6, MAXSTRLEN(lText1)); // Suppression du sorting jusqu'au where
          // Suppression de la derniŠre parenthŠse
          IF lText2 <> '' THEN BEGIN
            IF lText2[STRLEN(lText2)] = ')' THEN
              lText2[STRLEN(lText2)] := ' ';
          END
          ELSE BEGIN
            IF lText1[STRLEN(lText1)] = ')' THEN
              lText1[STRLEN(lText1)] := ' ';
          END;
        END;
        IF STRLEN(lText1 + lText2) > MAXSTRLEN(ReturnValue) THEN
          ReturnValue := COPYSTR(lText1 + lText2, 1, MAXSTRLEN(ReturnValue)-5) + '[...]'
        ELSE
          ReturnValue := lText1 + lText2;
      END;
    END;

    PROCEDURE SaveFilter@1100281007(pText@1100281000 : Text[1024];pWhichFilter@1100281001 : Integer);
    BEGIN
      //IMH4 isat.zw
      CASE pWhichFilter OF
        1 : "Service Header Filter 1" := GetChars(pText, MAXSTRLEN("Service Header Filter 1"));
        2 : "Service Header Filter 2" := GetChars(pText, MAXSTRLEN("Service Header Filter 2"));
      END;
      IF pText <> '' THEN
        ERROR(Text002);
    END;

    PROCEDURE IsSelectable@1100281001(pObject@1100281000 : Record 2000000001) : Boolean;
    VAR
      lTempObject@1100281001 : TEMPORARY Record 2000000001;
    BEGIN
      //IMH4 isat.zw
      IF pObject.Type <> pObject.Type::Table THEN
        EXIT;
      lTempObject := pObject;
      lTempObject.INSERT;
      lTempObject.SETFILTER(ID, GetSelectableTable);
      EXIT(NOT lTempObject.ISEMPTY);
    END;

    PROCEDURE GetSelectableTable@1100281000() : Text[1024];
    BEGIN
      //IMH4 isat.zw
      EXIT('5900');
    END;

    PROCEDURE PreviewRec@1100281002(pForUpdate@1100281002 : Boolean;pWhichFilter@1100281000 : Integer);
    VAR
      lServHeaderList@1100281013 : Form 50075;
      lServHeader@1100281014 : Record 5900;
      lViewFilter@1100281001 : Text[1024];
      lRecRef@1100281004 : RecordRef;
    BEGIN
      //IMH4 isat.zw
      lViewFilter := GetRecFilters(FALSE, pWhichFilter);
      //TESTFIELD("Service Assignment", TRUE);
      lServHeader.SETVIEW(lViewFilter);
      lServHeaderList.SETTABLEVIEW(lServHeader);
      IF pForUpdate THEN BEGIN
        lServHeaderList.RUNMODAL;
        lServHeaderList.CopyRec(lServHeader);
        IF lServHeader.GETFILTERS <> '' THEN
          SaveFilter(lServHeader.GETVIEW(FALSE), pWhichFilter)
        ELSE
          SaveFilter('', pWhichFilter);
      END
      ELSE
        lServHeaderList.RUN;
      EXIT;
    END;

    PROCEDURE GetProviderFilters@1100281012(pWithName@1100281000 : Boolean;pWhichFilter@1100281002 : Integer) rValue : Text[1024];
    VAR
      lRecordRef@1100281001 : RecordRef;
      lText1@1100281003 : Text[1024];
      lText2@1100281004 : Text[1024];
      lPosition@1100281005 : Integer;
    BEGIN
      // IMH08.PC
      rValue := '';

      CASE pWhichFilter OF
        1 : BEGIN
          IF ("Provider Filter 1" = '') THEN BEGIN
            EXIT;
          END;
          rValue := "Provider Filter 1";
        END;
        2 : BEGIN
          IF ("Provider Filter 2" = '') THEN BEGIN
            EXIT;
          END;
          rValue := "Provider Filter 2";
        END;
      END;
      IF pWithName THEN BEGIN
        lRecordRef.OPEN(DATABASE::Provider, TRUE);
        lRecordRef.SETVIEW(rValue);

        lText1 := COPYSTR(lRecordRef.GETVIEW(TRUE),1,MAXSTRLEN(lText1));
        lText2 := COPYSTR(lRecordRef.GETVIEW(TRUE),MAXSTRLEN(lText1),MAXSTRLEN(lText2));
        lPosition := STRPOS(lText1, 'SORTING(');
        IF lPosition = 1 THEN BEGIN // d‚bute par sorting
          lPosition := STRPOS(lText1, ') WHERE(');
          IF lPosition <> 0 THEN BEGIN
            lText1 := COPYSTR(lText1, lPosition + 2, MAXSTRLEN(lText1)); // Suppression du sorting jusqu'au where
          END;
        END;
        lPosition := STRPOS(lText1, 'WHERE(');
        IF lPosition = 1 THEN BEGIN // d‚bute par where
          lText1 := COPYSTR(lText1, lPosition + 6, MAXSTRLEN(lText1)); // Suppression du sorting jusqu'au where
          // Suppression de la derniŠre parenthŠse
          IF lText2 <> '' THEN BEGIN
            IF lText2[STRLEN(lText2)] = ')' THEN BEGIN
              lText2[STRLEN(lText2)] := ' ';
            END;
          END ELSE BEGIN
            IF lText1[STRLEN(lText1)] = ')' THEN BEGIN
              lText1[STRLEN(lText1)] := ' ';
            END;
          END;
        END;
        IF STRLEN(lText1 + lText2) > MAXSTRLEN(rValue) THEN BEGIN
          rValue := COPYSTR(lText1 + lText2, 1, MAXSTRLEN(rValue) - 5) + '[...]';
        END ELSE BEGIN
          rValue := lText1 + lText2;
        END;
      END;
    END;

    PROCEDURE SaveProviderFilter@1100281011(pText@1100281000 : Text[1024];pWhichFilter@1100281001 : Integer);
    BEGIN
      // IMH08.PC

      CASE pWhichFilter OF
        1 : "Provider Filter 1" := GetChars(pText, MAXSTRLEN("Provider Filter 1"));
        2 : "Provider Filter 2" := GetChars(pText, MAXSTRLEN("Provider Filter 2"));
      END;
      IF pText <> '' THEN BEGIN
        ERROR(Text002);
      END;
    END;

    PROCEDURE PreviewProvider@1100281005(pForUpdate@1100281002 : Boolean;pWhichFilter@1100281000 : Integer);
    VAR
      lProvider@1100281003 : Record 50000;
      lProvidersList@1100281013 : Form 50001;
      lViewFilter@1100281001 : Text[1024];
      lRecRef@1100281004 : RecordRef;
    BEGIN
      // IMH08.PC

      lViewFilter := GetProviderFilters(FALSE, pWhichFilter);
      lProvider.SETVIEW(lViewFilter);
      lProvidersList.SETTABLEVIEW(lProvider);
      IF pForUpdate THEN BEGIN
        lProvidersList.RUNMODAL;
        lProvidersList.CopyRec(lProvider);
        IF lProvider.GETFILTERS <> '' THEN BEGIN
          SaveProviderFilter(lProvider.GETVIEW(FALSE), pWhichFilter);
        END ELSE BEGIN
          SaveProviderFilter('', pWhichFilter);
        END;
      END ELSE BEGIN
        lProvidersList.RUN;
      END;
      EXIT;
    END;

    LOCAL PROCEDURE GetChars@1100281008(VAR pText@1100281000 : Text[1024];pStrLen@1100281001 : Integer) ReturnValue : Text[1024];
    BEGIN
      //IMH4 isat.zw
      IF pText = '' THEN
        EXIT;
      IF STRLEN(pText) <= pStrLen THEN BEGIN
        ReturnValue := COPYSTR(pText, 1, pStrLen);
        pText := '';
      END
      ELSE BEGIN
        ReturnValue := COPYSTR(pText, 1, pStrLen);
        pText := COPYSTR(pText, pStrLen + 1, STRLEN(pText));
      END;
    END;

    BEGIN
    {
      /** @r IMH15 @d 19/03/14 @a ISAT.ZW @v IMH6.01.5005 @s Reorganisation DPS @h 5005 @c Gestion filtre */
      /** @r IMH14 @d 25/02/14 @a ISAT.ZW @v IMH6.01.4985 @s Reorganisation DPS @h 4985 @c Ajout champ FIltre Code tache */
      /** @r IMH13 @d 15/10/13 @a ISAT.ST @v IMH6.01.353 @s Reorganisation region IMH @h 4760 @c Renommage CR / AR / R‚gion */
      /** @r IMH12 @d 24/04/13 @a ISAT.PC @v IMH6.01.346 @s Hotfix
          @c Ajout du champ 50069, "Showing Filter"
          @c ajout champ 50008, "Show To DQP"
          @c ManiŠre de stocker les diff‚rent Show To pour contourner les marks */
      /** @r IMH11 @d 25/12/11 @a ISAT.ZW @v IMH6.01.120 @s Gestion des corbeilles @h 2033
          @c Ajout champ 50060 Show Group */
      /** @r IMH10 @d 17/12/11 @a ISAT.ST @v IMH6.01.120 @s Gestion des corbeilles @h 2347
          @c Ajout champ 50031 User Assignment */
      /** @r IMH09 @d 17/10/11 @a ISAT.EBA @v IMH6.01.120 @s Gestion des corbeilles - Mantis 1542
          @c Ajout champ 50040 Territory */
      /** @r IMH08 @d 28/09/11 @a ISAT.PC @v IMH6.01.120 @s Gestion des corbeilles
          @c Filtre sur prestataire pour affectation par r‚gion
          @c ajout champ 50050, Provider filter 1
          @c ajout champ 50051, Provider filter 2
          @c ajout champ 50052, Provider Assignment
          @c ajout cl‚ Provider assignement, assignement priority
          @c ajout fonction GetProviderFilters, SaveProviderFilter, PreviewProvider*/
      /** @r IMH07 @d 08/03/11 @a ISAT.LLT @v IMH6.01.120 @s Gestion des corbeilles
          @c Ajout champ 50002 Salesperson Code */
      /** @r IMH06 @d 31/01/2011 @a ISAT.ST @v IMH6.01.120 @s Gestion des corbeilles
          @c corbeilles substitution
          @c Changement cl‚ "Assignment Priority" en "Service Assignment","Assignment Priority"
          @c Ajout champ 50000 Blocked */
      /** @r IMH05 @d 13/12/2010 @a ISAT.ZW @v IMH6.01.102 @s Gestion de statut
          @c Ajout champs affectation service*/
      /** @r IMH04 @d 08/12/2010 @a ISAT.ZW @v IMH6.01.102 @s Gestion de statut
          @c fonctions de gestion filtre*/
      /** @r IMH03 @d 07/10/2010 @a ISAT.ZW @v IMH6.01.013 @s Gestion des corbeilles
          @c Ajout champ + cl‚ : Affectation Priority*/
      /** @r IMH02 @d 26/10/2010 @a ISAT.ZW @v IMH6.01.013 @s Gestion des corbeilles
          @c Ajout champ Tray Line Delay + Tray Line Number + No Closed Tray Line Number*/
      /** @r IMH01 @d 07/10/2010 @a ISAT.ZW @v IMH6.01.013 @s Gestion des corbeilles
          @c Ajout champ 50010 50011 Service Order Filter 1 & 2 : Filtre sur la table pour affectation corbeille mode */
    }
    END.
  }
}