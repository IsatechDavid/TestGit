OBJECT Table 7321 Warehouse Shipment Line
{
  OBJECT-PROPERTIES
  {
    Date=14/08/09;
    Time=12:00:00;
    Version List=NAVW16.00.01,KITNA6.00;
  }
  PROPERTIES
  {
    OnDelete=VAR
               ItemTrackingMgt@1001 : Codeunit 6500;
               OrderStatus@1000 : Option;
             BEGIN
               TestReleased;

               IF "Qty. Shipped" < "Qty. Picked" THEN
                 IF NOT CONFIRM(
                   STRSUBSTNO(
                     Text007,
                     FIELDCAPTION("Qty. Picked"),"Qty. Picked",FIELDCAPTION("Qty. Shipped"),
                     "Qty. Shipped",TABLECAPTION),FALSE)
                 THEN
                   ERROR(Text006);

               ItemTrackingMgt.DeleteWhseItemTrkgLines(
                 DATABASE::"Warehouse Shipment Line",0,"No.",'',0,"Line No.","Location Code",TRUE);

               IF "Build Kit" THEN
                 ItemTrackingMgt.DeleteWhseItemTrkgLines2(
                   DATABASE::"Warehouse Shipment Line",0,"No.",'',"Line No.",0,"Location Code");

               OrderStatus :=
                 WhseShptHeader.GetDocumentStatus("Line No.");
               IF OrderStatus <> WhseShptHeader."Document Status" THEN BEGIN
                 WhseShptHeader.VALIDATE("Document Status",OrderStatus);
                 WhseShptHeader.MODIFY;
               END;

               GetLocation("Location Code");
               IF Location."Require Pick" THEN
                 CreatePick.AdjustReservation(
                   "Qty. Outstanding (Base)","Source Type","Source Subtype",
                   "Source No.","Source Line No.",0,1);
               IF "Build Kit" THEN // Requires pick
                 AdjustKitSalesLines(Rec);
             END;

    OnRename=BEGIN
               ERROR(Text008,TABLECAPTION);
             END;

    CaptionML=[ENU=Warehouse Shipment Line;
               FRA=Ligne exp‚dition entrep“t];
    PasteIsValid=No;
    LookupFormID=Form7341;
    DrillDownFormID=Form7341;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;CaptionML=[ENU=No.;
                                                              FRA=Nø];
                                                   Editable=No }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              FRA=Nø ligne];
                                                   Editable=No }
    { 3   ;   ;Source Type         ;Integer       ;CaptionML=[ENU=Source Type;
                                                              FRA=Type origine];
                                                   Editable=No }
    { 4   ;   ;Source Subtype      ;Option        ;CaptionML=[ENU=Source Subtype;
                                                              FRA=Sous-type origine];
                                                   OptionCaptionML=[ENU=0,1,2,3,4,5,6,7,8,9,10;
                                                                    FRA=0,1,2,3,4,5,6,7,8,9,10];
                                                   OptionString=0,1,2,3,4,5,6,7,8,9,10;
                                                   Editable=No }
    { 6   ;   ;Source No.          ;Code20        ;CaptionML=[ENU=Source No.;
                                                              FRA=Nø origine];
                                                   Editable=No }
    { 7   ;   ;Source Line No.     ;Integer       ;CaptionML=[ENU=Source Line No.;
                                                              FRA=Nø ligne origine];
                                                   Editable=No }
    { 9   ;   ;Source Document     ;Option        ;CaptionML=[ENU=Source Document;
                                                              FRA=Document origine];
                                                   OptionCaptionML=[ENU=,Sales Order,,,Sales Return Order,Purchase Order,,,Purchase Return Order,,Outbound Transfer;
                                                                    FRA=,Commande vente,,,Retour vente,Commande achat,,,Retour achat,,D‚senlogement transfert];
                                                   OptionString=,Sales Order,,,Sales Return Order,Purchase Order,,,Purchase Return Order,,Outbound Transfer;
                                                   Editable=No }
    { 10  ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   CaptionML=[ENU=Location Code;
                                                              FRA=Code magasin];
                                                   Editable=No }
    { 11  ;   ;Shelf No.           ;Code10        ;CaptionML=[ENU=Shelf No.;
                                                              FRA=Nø emplacement] }
    { 12  ;   ;Bin Code            ;Code20        ;TableRelation=IF (Zone Code=FILTER('')) Bin.Code WHERE (Location Code=FIELD(Location Code))
                                                                 ELSE IF (Zone Code=FILTER(<>'')) Bin.Code WHERE (Location Code=FIELD(Location Code),
                                                                                                                  Zone Code=FIELD(Zone Code));
                                                   OnValidate=BEGIN
                                                                TestReleased;
                                                                IF xRec."Bin Code" <> "Bin Code" THEN
                                                                  IF "Bin Code" <> '' THEN BEGIN
                                                                    GetLocation("Location Code");
                                                                    Location.TESTFIELD("Bin Mandatory");
                                                                    IF "Bin Code" = Location."Adjustment Bin Code" THEN
                                                                      FIELDERROR(
                                                                        "Bin Code",
                                                                          STRSUBSTNO(
                                                                            Text004,
                                                                            Location.FIELDCAPTION("Adjustment Bin Code"),
                                                                            Location.TABLECAPTION));

                                                                    IF Location."Directed Put-away and Pick" THEN
                                                                      CheckBin(0,0);
                                                                  END;
                                                              END;

                                                   CaptionML=[ENU=Bin Code;
                                                              FRA=Code emplacement] }
    { 13  ;   ;Zone Code           ;Code10        ;TableRelation=Zone.Code WHERE (Location Code=FIELD(Location Code));
                                                   OnValidate=BEGIN
                                                                TestReleased;
                                                                IF xRec."Zone Code" <> "Zone Code" THEN BEGIN
                                                                  IF "Zone Code" <> '' THEN BEGIN
                                                                    GetLocation("Location Code");
                                                                    Location.TESTFIELD("Directed Put-away and Pick");
                                                                  END;
                                                                  "Bin Code" := '';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Zone Code;
                                                              FRA=Code zone] }
    { 14  ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   CaptionML=[ENU=Item No.;
                                                              FRA=Nø article];
                                                   Editable=No }
    { 15  ;   ;Quantity            ;Decimal       ;OnValidate=VAR
                                                                OrderStatus@1000 : Integer;
                                                              BEGIN
                                                                IF Quantity <= 0 THEN
                                                                  FIELDERROR(Quantity,Text003);
                                                                TestReleased;
                                                                CheckSourceDocLineQty;

                                                                IF Quantity < "Qty. Picked" THEN
                                                                  FIELDERROR(Quantity,STRSUBSTNO(Text001,"Qty. Picked"));
                                                                IF Quantity < "Qty. Shipped" THEN
                                                                  FIELDERROR(Quantity,STRSUBSTNO(Text001,"Qty. Shipped"));

                                                                VALIDATE("Qty. Outstanding",(Quantity - "Qty. Shipped"));
                                                                "Qty. (Base)" := CalcBaseQty(Quantity);
                                                                "Completely Picked" := (Quantity = "Qty. Picked") OR ("Qty. (Base)" = "Qty. Picked (Base)");

                                                                GetLocation("Location Code");
                                                                IF Location."Directed Put-away and Pick" THEN
                                                                  CheckBin(xRec.Cubage,xRec.Weight);

                                                                Status := CalcStatusShptLine;
                                                                IF Status <> xRec.Status THEN BEGIN
                                                                  GetWhseShptHeader("No.");
                                                                  OrderStatus := WhseShptHeader.GetDocumentStatus(0);
                                                                  IF OrderStatus <> WhseShptHeader."Document Status" THEN BEGIN
                                                                    WhseShptHeader.VALIDATE("Document Status",OrderStatus);
                                                                    WhseShptHeader.MODIFY;
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Quantity;
                                                              FRA=Quantit‚];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   Editable=No }
    { 16  ;   ;Qty. (Base)         ;Decimal       ;CaptionML=[ENU=Qty. (Base);
                                                              FRA=Qt‚ (base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 19  ;   ;Qty. Outstanding    ;Decimal       ;OnValidate=VAR
                                                                WMSMgt@1000 : Codeunit 7302;
                                                              BEGIN
                                                                GetLocation("Location Code");
                                                                "Qty. Outstanding (Base)" := CalcBaseQty("Qty. Outstanding");
                                                                IF Location."Require Pick" OR "Build Kit" THEN
                                                                  VALIDATE("Qty. to Ship","Qty. Picked" - (Quantity - "Qty. Outstanding"))
                                                                ELSE
                                                                  VALIDATE("Qty. to Ship","Qty. Outstanding");

                                                                IF Location."Directed Put-away and Pick" THEN
                                                                  WMSMgt.CalcCubageAndWeight(
                                                                    "Item No.","Unit of Measure Code","Qty. Outstanding",Cubage,Weight);
                                                              END;

                                                   CaptionML=[ENU=Qty. Outstanding;
                                                              FRA=Qt‚ ouverte];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 20  ;   ;Qty. Outstanding (Base);Decimal    ;CaptionML=[ENU=Qty. Outstanding (Base);
                                                              FRA=Qt‚ ouverte (base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 21  ;   ;Qty. to Ship        ;Decimal       ;OnValidate=VAR
                                                                Confirmed@1000 : Boolean;
                                                              BEGIN
                                                                GetLocation("Location Code");
                                                                IF ("Qty. to Ship" > "Qty. Picked" - "Qty. Shipped") AND
                                                                   (Location."Require Pick" OR "Build Kit")
                                                                THEN
                                                                  FIELDERROR("Qty. to Ship",
                                                                    STRSUBSTNO(Text002,"Qty. Picked" - "Qty. Shipped"));

                                                                IF "Qty. to Ship" > "Qty. Outstanding" THEN
                                                                  ERROR(
                                                                    Text000,
                                                                    "Qty. Outstanding");

                                                                Confirmed := TRUE;
                                                                IF (CurrFieldNo = FIELDNO("Qty. to Ship")) AND
                                                                   ("Shipping Advice" = "Shipping Advice"::Complete) AND
                                                                   ("Qty. to Ship" <> "Qty. Outstanding") AND
                                                                   ("Qty. to Ship" > 0)
                                                                THEN
                                                                  Confirmed :=
                                                                    CONFIRM(
                                                                      Text009 +
                                                                      Text010,
                                                                      FALSE,
                                                                      FIELDCAPTION("Shipping Advice"),
                                                                      "Shipping Advice",
                                                                      FIELDCAPTION("Qty. to Ship"),
                                                                      "Qty. Outstanding");

                                                                IF NOT Confirmed THEN
                                                                  ERROR(Text006);

                                                                IF CurrFieldNo <> FIELDNO("Qty. to Ship (Base)") THEN
                                                                  "Qty. to Ship (Base)" := CalcBaseQty("Qty. to Ship");
                                                              END;

                                                   CaptionML=[ENU=Qty. to Ship;
                                                              FRA=Qt‚ … exp‚dier];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 22  ;   ;Qty. to Ship (Base) ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Qty. to Ship",CalcQty("Qty. to Ship (Base)"));
                                                              END;

                                                   CaptionML=[ENU=Qty. to Ship (Base);
                                                              FRA=Qt‚ … exp‚dier (base)];
                                                   DecimalPlaces=0:5 }
    { 23  ;   ;Qty. Picked         ;Decimal       ;FieldClass=Normal;
                                                   OnValidate=BEGIN
                                                                "Qty. Picked (Base)" := CalcBaseQty("Qty. Picked");
                                                              END;

                                                   CaptionML=[ENU=Qty. Picked;
                                                              FRA=Qt‚ pr‚lev‚e];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 24  ;   ;Qty. Picked (Base)  ;Decimal       ;CaptionML=[ENU=Qty. Picked (Base);
                                                              FRA=Qt‚ pr‚lev‚e (base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 25  ;   ;Qty. Shipped        ;Decimal       ;CaptionML=[ENU=Qty. Shipped;
                                                              FRA=Qt‚ exp‚di‚e];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 26  ;   ;Qty. Shipped (Base) ;Decimal       ;CaptionML=[ENU=Qty. Shipped (Base);
                                                              FRA=Qt‚ exp‚di‚e (base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 27  ;   ;Pick Qty.           ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Activity Line"."Qty. Outstanding" WHERE (Activity Type=CONST(Pick),
                                                                                                                       Whse. Document Type=CONST(Shipment),
                                                                                                                       Whse. Document No.=FIELD(No.),
                                                                                                                       Whse. Document Line No.=FIELD(Line No.),
                                                                                                                       Unit of Measure Code=FIELD(Unit of Measure Code),
                                                                                                                       Action Type=FILTER(' '|Place),
                                                                                                                       Original Breakbulk=CONST(No),
                                                                                                                       Breakbulk No.=CONST(0)));
                                                   CaptionML=[ENU=Pick Qty.;
                                                              FRA=Pr‚lever qt‚];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 28  ;   ;Pick Qty. (Base)    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Activity Line"."Qty. Outstanding (Base)" WHERE (Activity Type=CONST(Pick),
                                                                                                                              Whse. Document Type=CONST(Shipment),
                                                                                                                              Whse. Document No.=FIELD(No.),
                                                                                                                              Whse. Document Line No.=FIELD(Line No.),
                                                                                                                              Action Type=FILTER(' '|Place),
                                                                                                                              Original Breakbulk=CONST(No),
                                                                                                                              Breakbulk No.=CONST(0)));
                                                   CaptionML=[ENU=Pick Qty. (Base);
                                                              FRA=Pr‚lever qt‚ (base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 29  ;   ;Unit of Measure Code;Code10        ;TableRelation="Item Unit of Measure".Code WHERE (Item No.=FIELD(Item No.));
                                                   CaptionML=[ENU=Unit of Measure Code;
                                                              FRA=Code unit‚];
                                                   Editable=No }
    { 30  ;   ;Qty. per Unit of Measure;Decimal   ;InitValue=1;
                                                   CaptionML=[ENU=Qty. per Unit of Measure;
                                                              FRA=Quantit‚ par unit‚];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 31  ;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE (Item No.=FIELD(Item No.));
                                                   CaptionML=[ENU=Variant Code;
                                                              FRA=Code variante];
                                                   Editable=No }
    { 32  ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              FRA=D‚signation];
                                                   Editable=No }
    { 33  ;   ;Description 2       ;Text50        ;CaptionML=[ENU=Description 2;
                                                              FRA=D‚signation 2];
                                                   Editable=No }
    { 34  ;   ;Status              ;Option        ;CaptionML=[ENU=Status;
                                                              FRA=Statut];
                                                   OptionCaptionML=[ENU=" ,Partially Picked,Partially Shipped,Completely Picked,Completely Shipped";
                                                                    FRA=" ,Partiellement pr‚lev‚,Partiellement exp‚di‚,EntiŠrement pr‚lev‚,EntiŠrement exp‚di‚"];
                                                   OptionString=[ ,Partially Picked,Partially Shipped,Completely Picked,Completely Shipped];
                                                   Editable=No }
    { 35  ;   ;Sorting Sequence No.;Integer       ;CaptionML=[ENU=Sorting Sequence No.;
                                                              FRA=Nø s‚quence tri];
                                                   Editable=No }
    { 36  ;   ;Due Date            ;Date          ;CaptionML=[ENU=Due Date;
                                                              FRA=D‚lai] }
    { 39  ;   ;Destination Type    ;Option        ;CaptionML=[ENU=Destination Type;
                                                              FRA=Type destination];
                                                   OptionCaptionML=[ENU=" ,Customer,Vendor,Location";
                                                                    FRA=" ,Client,Fournisseur,Magasin"];
                                                   OptionString=[ ,Customer,Vendor,Location];
                                                   Editable=No }
    { 40  ;   ;Destination No.     ;Code20        ;TableRelation=IF (Destination Type=CONST(Customer)) Customer.No.
                                                                 ELSE IF (Destination Type=CONST(Vendor)) Vendor.No.
                                                                 ELSE IF (Destination Type=CONST(Location)) Location.Code;
                                                   CaptionML=[ENU=Destination No.;
                                                              FRA=Nø destination];
                                                   Editable=No }
    { 41  ;   ;Cubage              ;Decimal       ;CaptionML=[ENU=Cubage;
                                                              FRA=Cubage];
                                                   DecimalPlaces=0:5 }
    { 42  ;   ;Weight              ;Decimal       ;CaptionML=[ENU=Weight;
                                                              FRA=Poids];
                                                   DecimalPlaces=0:5 }
    { 44  ;   ;Shipping Advice     ;Option        ;CaptionML=[ENU=Shipping Advice;
                                                              FRA=Option d'exp‚dition];
                                                   OptionCaptionML=[ENU=Partial,Complete;
                                                                    FRA=Partielle,Totale];
                                                   OptionString=Partial,Complete;
                                                   Editable=No }
    { 45  ;   ;Shipment Date       ;Date          ;CaptionML=[ENU=Shipment Date;
                                                              FRA=Date d'exp‚dition] }
    { 46  ;   ;Completely Picked   ;Boolean       ;CaptionML=[ENU=Completely Picked;
                                                              FRA=EntiŠrement pr‚l‚v‚];
                                                   Editable=No }
    { 48  ;   ;Not upd. by Src. Doc. Post.;Boolean;CaptionML=[ENU=Not upd. by Src. Doc. Post.;
                                                              FRA=Pas de MAJ par doc. source];
                                                   Editable=No }
    { 49  ;   ;Posting from Whse. Ref.;Integer    ;CaptionML=[ENU=Posting from Whse. Ref.;
                                                              FRA=Validation … partir r‚f. entrep“t];
                                                   Editable=No }
    { 25000;  ;Build Kit           ;Boolean       ;CaptionML=[ENU=Build Kit;
                                                              FRA=Constituer le kit];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;No.,Line No.                            ;Clustered=Yes }
    {    ;No.,Sorting Sequence No.                ;MaintainSQLIndex=No }
    {    ;No.,Item No.                            ;MaintainSQLIndex=No }
    {    ;No.,Source Document,Source No.          ;MaintainSQLIndex=No }
    {    ;No.,Shelf No.                           ;MaintainSQLIndex=No }
    {    ;No.,Bin Code                            ;MaintainSQLIndex=No }
    {    ;No.,Due Date                            ;MaintainSQLIndex=No }
    {    ;No.,Destination Type,Destination No.    ;MaintainSQLIndex=No }
    {    ;Source Type,Source Subtype,Source No.,Source Line No.;
                                                   SumIndexFields=Qty. Outstanding,Qty. Outstanding (Base);
                                                   MaintainSIFTIndex=No }
    {    ;No.,Source Type,Source Subtype,Source No.,Source Line No.;
                                                   MaintainSQLIndex=No }
    {    ;Item No.,Location Code,Variant Code,Due Date;
                                                   SumIndexFields=Qty. Outstanding (Base),Qty. Picked (Base),Qty. Shipped (Base);
                                                   MaintainSIFTIndex=No }
    {    ;Bin Code,Location Code                  ;SumIndexFields=Cubage,Weight;
                                                   MaintainSIFTIndex=No }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You cannot handle more than the outstanding %1 units.;FRA=Vous ne pouvez pas traiter plus que les %1 unit‚s restantes.';
      Location@1001 : Record 14;
      Item@1016 : Record 27;
      WhseShptHeader@1002 : Record 7320;
      Text001@1003 : TextConst 'ENU=must not be less than %1 units;FRA=ne doit pas ˆtre inf‚rieur(e) … %1 unit‚(s)';
      Text002@1004 : TextConst 'ENU=must not be greater than %1 units;FRA=doit ˆtre inf‚rieur(e) … %1 unit‚s.';
      Text003@1005 : TextConst 'ENU=must be greater than zero;FRA=doit ˆtre sup‚rieur(e) … z‚ro.';
      Text004@1006 : TextConst 'ENU=must not be the %1 of the %2;FRA=ne doit pas ˆtre le %1 de %2';
      Text005@1007 : TextConst 'ENU=The picked quantity is not enough to ship all lines.;FRA=La quantit‚ pr‚lev‚e n''est pas suffisante pour exp‚dier toutes les lignes.';
      CreatePick@1017 : Codeunit 7312;
      HideValidationDialog@1008 : Boolean;
      Text006@1009 : TextConst 'ENU=Cancelled.;FRA=Annul‚.';
      Text007@1010 : TextConst 'ENU="%1 = %2 is greater than %3 = %4. If you delete the %5, the items will remain in the shipping area until you put them away.\Do you still want to delete the %5?";FRA="La %1 = %2 est sup‚rieure … %3 = %4. Si vous supprimez la %5, les lignes resteront dans la zone d''exp‚dition jusqu''… ce que vous les rangiez.\Souhaitez-vous supprimer la %5 ?"';
      Text008@1011 : TextConst 'ENU=You cannot rename a %1.;FRA=Vous ne pouvez pas renommer l''enregistrement %1.';
      Text009@1013 : TextConst 'ENU=%1 is set to %2. %3 should be %4.\\;FRA=L''%1 est param‚tr‚e sur %2. La %3 devrait ˆtre %4.\\';
      Text010@1012 : TextConst 'ENU=Accept the entered value?;FRA=Acceptez-vous la valeur entr‚e ?';
      Text011@1014 : TextConst 'ENU=Nothing to handle.;FRA=Il n''y a rien … traiter.';
      Text012@1015 : TextConst 'ENU=The items have been picked. If you delete the Whse. Shipment, the items will remain in the shipping area until you put them away.\Do you still want to delete the Whse. Shipment?;FRA=Les articles ont ‚t‚ pr‚lev‚s. Si vous supprimez l''exp‚dition entrep“t, les articles vont rester dans la zone d''exp‚dition jusqu''a ce que vous les rangiez.\Souhaitez-vous quand mˆme supprimer l''exp‚dition entrep“t ?';

    LOCAL PROCEDURE CalcBaseQty@14(Qty@1000 : Decimal) : Decimal;
    BEGIN
      TESTFIELD("Qty. per Unit of Measure");
      EXIT(ROUND(Qty * "Qty. per Unit of Measure",0.00001));
    END;

    PROCEDURE CalcQty@5(QtyBase@1000 : Decimal) : Decimal;
    BEGIN
      TESTFIELD("Qty. per Unit of Measure");
      EXIT(ROUND(QtyBase / "Qty. per Unit of Measure",0.00001));
    END;

    LOCAL PROCEDURE GetLocation@1(LocationCode@1000 : Code[10]);
    BEGIN
      IF LocationCode = '' THEN
        Location.GetLocationSetup(LocationCode,Location)
      ELSE
        IF Location.Code <> LocationCode THEN
          Location.GET(LocationCode);
    END;

    LOCAL PROCEDURE TestReleased@37();
    BEGIN
      TESTFIELD("No.");
      GetWhseShptHeader("No.");
      WhseShptHeader.TESTFIELD(Status,WhseShptHeader.Status::Open);
    END;

    PROCEDURE CheckBin@9(DeductCubage@1000 : Decimal;DeductWeight@1001 : Decimal);
    VAR
      Bin@1005 : Record 7354;
      BinContent@1004 : Record 7302;
      BinType@1003 : Record 7303;
    BEGIN
      IF "Bin Code" <> '' THEN BEGIN
        GetLocation("Location Code");
        IF NOT Location."Directed Put-away and Pick" THEN
          EXIT;

        IF "Build Kit" THEN
          TESTFIELD("Bin Code",Location."Outbound BOM Bin Code");

        IF BinContent.GET(
          "Location Code","Bin Code",
          "Item No.","Variant Code","Unit of Measure Code")
        THEN BEGIN
          BinContent.CheckIncreaseBinContent(
            "Qty. Outstanding","Qty. Outstanding",
            DeductCubage,DeductWeight,Cubage,Weight,FALSE);
          IF Location."Directed Put-away and Pick" THEN BEGIN
            BinContent.TESTFIELD("Bin Type Code");
            BinType.GET(BinContent."Bin Type Code");
            IF NOT "Build Kit" THEN
              BinType.TESTFIELD(Ship);
            "Zone Code" := BinContent."Zone Code";
          END;
        END ELSE BEGIN
          Bin.GET("Location Code","Bin Code");
          Bin.CheckIncreaseBin(
            "Bin Code","Item No.","Qty. Outstanding",
            DeductCubage,DeductWeight,Cubage,Weight,FALSE);
          IF Location."Directed Put-away and Pick" THEN BEGIN
            Bin.TESTFIELD("Bin Type Code");
            BinType.GET(Bin."Bin Type Code");
            IF NOT "Build Kit" THEN
              BinType.TESTFIELD(Ship);
            "Zone Code" := Bin."Zone Code";
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE CheckSourceDocLineQty@3();
    VAR
      WhseShptLine@1005 : Record 7321;
      SalesLine@1002 : Record 37;
      PurchaseLine@1003 : Record 39;
      TransferLine@1004 : Record 5741;
      WhseQtyOutstandingBase@1006 : Decimal;
      QtyOutstandingBase@1000 : Decimal;
      QuantityBase@1001 : Decimal;
    BEGIN
      QuantityBase := CalcBaseQty(Quantity);
      WhseShptLine.SETCURRENTKEY("Source Type");
      WhseShptLine.SETRANGE("Source Type","Source Type");
      WhseShptLine.SETRANGE("Source Subtype","Source Subtype");
      WhseShptLine.SETRANGE("Source No.","Source No.");
      WhseShptLine.SETRANGE("Source Line No.","Source Line No.");
      WhseShptLine.CALCSUMS("Qty. Outstanding (Base)");
      IF WhseShptLine.FIND('-') THEN
        REPEAT
          IF (WhseShptLine."No." <> "No.") OR
             (WhseShptLine."Line No." <> "Line No.")
          THEN
            WhseQtyOutstandingBase := WhseQtyOutstandingBase + WhseShptLine."Qty. Outstanding (Base)";
        UNTIL WhseShptLine.NEXT = 0;

      CASE "Source Type" OF
        DATABASE::"Sales Line":
          BEGIN
            SalesLine.GET("Source Subtype","Source No.","Source Line No.");
            IF ABS(SalesLine."Outstanding Qty. (Base)") < WhseQtyOutstandingBase + QuantityBase THEN
              FIELDERROR(Quantity,STRSUBSTNO(Text002,
                CalcQty(SalesLine."Outstanding Qty. (Base)" - WhseQtyOutstandingBase)));
            QtyOutstandingBase := ABS(SalesLine."Outstanding Qty. (Base)");
          END;
        DATABASE::"Purchase Line":
          BEGIN
            PurchaseLine.GET("Source Subtype","Source No.","Source Line No.");
            IF ABS(PurchaseLine."Outstanding Qty. (Base)") < WhseQtyOutstandingBase + QuantityBase THEN
              FIELDERROR(Quantity,STRSUBSTNO(Text002,
                CalcQty(ABS(PurchaseLine."Outstanding Qty. (Base)") - WhseQtyOutstandingBase)));
            QtyOutstandingBase := ABS(PurchaseLine."Outstanding Qty. (Base)");
          END;
        DATABASE::"Transfer Line":
          BEGIN
            TransferLine.GET("Source No.","Source Line No.");
            IF TransferLine."Outstanding Qty. (Base)" < WhseQtyOutstandingBase + QuantityBase THEN
              FIELDERROR(Quantity,STRSUBSTNO(Text002,
                CalcQty(TransferLine."Outstanding Qty. (Base)" - WhseQtyOutstandingBase)));
            QtyOutstandingBase := TransferLine."Outstanding Qty. (Base)";
          END;
      END;
      IF QuantityBase > QtyOutstandingBase THEN
        FIELDERROR(Quantity,STRSUBSTNO(Text002,FIELDCAPTION("Qty. Outstanding")));
    END;

    PROCEDURE CalcStatusShptLine@4() : Integer;
    BEGIN
      IF (Quantity = "Qty. Shipped") OR ("Qty. (Base)" = "Qty. Shipped (Base)") THEN
        EXIT(Status::"Completely Shipped");
      IF "Qty. Shipped" > 0 THEN
        EXIT(Status::"Partially Shipped");
      IF (Quantity = "Qty. Picked") OR ("Qty. (Base)" = "Qty. Picked (Base)") THEN
        EXIT(Status::"Completely Picked");
      IF "Qty. Picked" > 0 THEN
        EXIT(Status::"Partially Picked");
      EXIT(Status::" ");
    END;

    PROCEDURE AutofillQtyToHandle@10(VAR WhseShptLine@1000 : Record 7321);
    VAR
      NotEnough@1001 : Boolean;
    BEGIN
      WITH WhseShptLine DO BEGIN
        NotEnough := FALSE;
        SetHideValidationDialog(TRUE);
        IF FIND('-') THEN
          REPEAT
            GetLocation("Location Code");
            IF Location."Require Pick" THEN
              VALIDATE("Qty. to Ship (Base)","Qty. Picked (Base)" - "Qty. Shipped (Base)")
            ELSE
              VALIDATE("Qty. to Ship (Base)","Qty. Outstanding (Base)");
            MODIFY;
            IF NOT NotEnough THEN
              IF ("Qty. to Ship (Base)" < "Qty. Outstanding (Base)") AND
                 ("Shipping Advice" = "Shipping Advice"::Complete)
              THEN
                NotEnough := TRUE;
          UNTIL NEXT = 0;
        SetHideValidationDialog(FALSE);
        IF NotEnough THEN
          MESSAGE(Text005);
      END;
    END;

    PROCEDURE DeleteQtyToHandle@11(VAR WhseShptLine@1000 : Record 7321);
    BEGIN
      WITH WhseShptLine DO BEGIN
        IF FIND('-') THEN
          REPEAT
            VALIDATE("Qty. to Ship",0);
            MODIFY;
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE SetHideValidationDialog@8(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    LOCAL PROCEDURE GetWhseShptHeader@6(WhseShptNo@1000 : Code[20]);
    BEGIN
      IF WhseShptHeader."No." <> WhseShptNo THEN
        WhseShptHeader.GET(WhseShptNo);
    END;

    PROCEDURE DeleteAllWhseShptLines@2(WhseShptNo@1000 : Code[20]);
    VAR
      WhseShptLine@1001 : Record 7321;
      Confirmed@1002 : Boolean;
    BEGIN
      WITH WhseShptLine DO BEGIN
        SETRANGE("No.",WhseShptNo);
        IF FIND('-') THEN BEGIN
          REPEAT
            IF "Qty. Shipped" < "Qty. Picked" THEN
              IF NOT CONFIRM(Text012)THEN
                ERROR(Text006)
              ELSE
                Confirmed := TRUE;
          UNTIL (NEXT = 0) OR Confirmed;
          IF FIND('-') THEN BEGIN
            GetLocation("Location Code");
            REPEAT
              IF Location."Require Pick" THEN
                CreatePick.AdjustReservation(
                  "Qty. Outstanding (Base)","Source Type","Source Subtype",
                  "Source No.","Source Line No.",0,1);
              IF "Build Kit" THEN // Requires pick
                AdjustKitSalesLines(WhseShptLine);
              DELETE;
            UNTIL NEXT = 0;
          END;
        END;
      END;
    END;

    PROCEDURE CreatePickDoc@7(VAR WhseShptLine@1000 : Record 7321;WhseShptHeader2@1001 : Record 7320);
    VAR
      CreatePickFromWhseShpt@1002 : Report 7318;
    BEGIN
      WhseShptHeader2.TESTFIELD(Status,WhseShptHeader.Status::Released);
      WhseShptLine.SETFILTER(Quantity,'>0');
      WhseShptLine.SETRANGE("Completely Picked",FALSE);
      IF WhseShptLine.FIND('-') THEN BEGIN
        CreatePickFromWhseShpt.SetWhseShipmentLine(WhseShptLine,WhseShptHeader2);
        CreatePickFromWhseShpt.SetHideValidationDialog(HideValidationDialog);
        CreatePickFromWhseShpt.USEREQUESTFORM(NOT HideValidationDialog);
        CreatePickFromWhseShpt.RUNMODAL;
        CreatePickFromWhseShpt.GetResultMessage;
        CLEAR(CreatePickFromWhseShpt);
      END ELSE
        IF NOT HideValidationDialog THEN
          MESSAGE(Text011);
    END;

    LOCAL PROCEDURE GetItem@15();
    BEGIN
      IF Item."No." <> "Item No." THEN
        Item.GET("Item No.");
    END;

    PROCEDURE OpenItemTrackingLines@6500();
    VAR
      PurchaseLine@1000 : Record 39;
      SalesLine@1001 : Record 37;
      TransferLine@1002 : Record 5741;
      ReservePurchLine@1003 : Codeunit 99000834;
      ReserveSalesLine@1004 : Codeunit 99000832;
      ReserveTransferLine@1005 : Codeunit 99000836;
      SecondSourceQtyArray@1007 : ARRAY [3] OF Decimal;
      Direction@1006 : 'Outbound,Inbound';
    BEGIN
      TESTFIELD("No.");
      TESTFIELD("Qty. (Base)");

      GetItem;
      Item.TESTFIELD("Item Tracking Code");

      SecondSourceQtyArray[1] := DATABASE::"Warehouse Receipt Line";
      SecondSourceQtyArray[2] := "Qty. to Ship (Base)";
      SecondSourceQtyArray[3] := 0;

      CASE "Source Type" OF
        DATABASE::"Sales Line":
          BEGIN
            IF SalesLine.GET("Source Subtype","Source No.","Source Line No.") THEN
              ReserveSalesLine.CallItemTracking2(SalesLine,SecondSourceQtyArray);
          END;
        DATABASE::"Purchase Line":
          BEGIN
            IF PurchaseLine.GET("Source Subtype","Source No.","Source Line No.") THEN
              ReservePurchLine.CallItemTracking2(PurchaseLine,SecondSourceQtyArray);
          END;
        DATABASE::"Transfer Line":
          BEGIN
            Direction := Direction::Outbound;
            IF TransferLine.GET("Source No.","Source Line No.") THEN
              ReserveTransferLine.CallItemTracking2(TransferLine,Direction,SecondSourceQtyArray);
          END
      END;
    END;

    PROCEDURE AdjustKitSalesLines@1462000(WhseShptLine@1462000 : Record 7321);
    VAR
      KitSalesLine@1462001 : Record 25000;
    BEGIN
      WITH KitSalesLine DO BEGIN
        SETRANGE("Document Type",WhseShptLine."Source Subtype");
        SETRANGE("Document No.",WhseShptLine."Source No.");
        SETRANGE("Document Line No.",WhseShptLine."Source Line No.");
        SETRANGE(Type,Type::Item);
        IF FINDSET THEN
          REPEAT
            CreatePick.AdjustReservation(
              (WhseShptLine."Qty. Outstanding (Base)" * "Quantity per (Base)"),
               DATABASE::"Kit Sales Line",WhseShptLine."Source Subtype",
               WhseShptLine."Source No.",WhseShptLine."Source Line No.",
               "Line No.",1);
            "Qty. Picked" := "Qty. Picked" - (WhseShptLine."Qty. Picked (Base)" * "Quantity per");
            "Qty. Picked (Base)" := "Qty. Picked (Base)" - (WhseShptLine."Qty. Picked (Base)" * "Quantity per (Base)");
            "Completely Picked" := "Qty. Picked" = "Extended Quantity";
            MODIFY;
          UNTIL NEXT = 0;
      END;
    END;

    BEGIN
    END.
  }
}