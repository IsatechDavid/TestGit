OBJECT Table 81 Gen. Journal Line
{
  OBJECT-PROPERTIES
  {
    Date=12/06/14;
    Time=17:45:58;
    Modified=Yes;
    Version List=NAVW16.00.10,IMH6.01.P010;
  }
  PROPERTIES
  {
    OnInsert=VAR
               JnlLineDim@1000 : Record 356;
             BEGIN
               JnlLineDim.LOCKTABLE;
               GenJnlAlloc.LOCKTABLE;
               LOCKTABLE;
               GenJnlTemplate.GET("Journal Template Name");
               GenJnlBatch.GET("Journal Template Name","Journal Batch Name");
               "Check Printed" := FALSE;

               ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
               ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
               DimMgt.InsertJnlLineDim(
                 DATABASE::"Gen. Journal Line",
                 "Journal Template Name","Journal Batch Name","Line No.",0,
                 "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
             END;

    OnModify=BEGIN
               TESTFIELD("Check Printed",FALSE);
               IF ("Applies-to ID" = '') AND (xRec."Applies-to ID" <> '') THEN
                 ClearCustVendApplnEntry;
             END;

    OnDelete=VAR
               JnlLineDim@1000 : Record 356;
             BEGIN
               CheckNoCardTransactEntryExist(Rec);

               TESTFIELD("Check Printed",FALSE);

               ClearCustVendApplnEntry;

               JnlLineDim.SETRANGE("Table ID",DATABASE::"Gen. Jnl. Allocation");
               JnlLineDim.SETRANGE("Journal Template Name","Journal Template Name");
               JnlLineDim.SETRANGE("Journal Batch Name","Journal Batch Name");
               JnlLineDim.SETRANGE("Journal Line No.","Line No.");
               JnlLineDim.DELETEALL;

               GenJnlAlloc.SETRANGE("Journal Template Name","Journal Template Name");
               GenJnlAlloc.SETRANGE("Journal Batch Name","Journal Batch Name");
               GenJnlAlloc.SETRANGE("Journal Line No.","Line No.");
               GenJnlAlloc.DELETEALL;

               DimMgt.DeleteJnlLineDim(
                 DATABASE::"Gen. Journal Line",
                 "Journal Template Name","Journal Batch Name","Line No.",0);
             END;

    OnRename=BEGIN
               CheckNoCardTransactEntryExist(Rec);
               TESTFIELD("Check Printed",FALSE);
             END;

    CaptionML=[ENU=Gen. Journal Line;
               FRA=Ligne feuille comptabilit‚];
  }
  FIELDS
  {
    { 1   ;   ;Journal Template Name;Code10       ;TableRelation="Gen. Journal Template";
                                                   CaptionML=[ENU=Journal Template Name;
                                                              FRA=Nom modŠle feuille] }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              FRA=Nø ligne] }
    { 3   ;   ;Account Type        ;Option        ;OnValidate=BEGIN
                                                                IF ("Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Fixed Asset",
                                                                    "Account Type"::"IC Partner"]) AND
                                                                   ("Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::"Fixed Asset",
                                                                    "Bal. Account Type"::"IC Partner"])
                                                                THEN
                                                                  ERROR(
                                                                    Text000,
                                                                    FIELDCAPTION("Account Type"),FIELDCAPTION("Bal. Account Type"));
                                                                VALIDATE("Account No.",'');
                                                                IF "Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Bank Account"] THEN BEGIN
                                                                  VALIDATE("Gen. Posting Type","Gen. Posting Type"::" ");
                                                                  VALIDATE("Gen. Bus. Posting Group",'');
                                                                  VALIDATE("Gen. Prod. Posting Group",'');
                                                                END ELSE
                                                                  IF "Bal. Account Type" IN [
                                                                     "Bal. Account Type"::"G/L Account","Account Type"::"Bank Account","Bal. Account Type"::"Fixed Asset"]
                                                                  THEN
                                                                    VALIDATE("Payment Terms Code",'');
                                                                UpdateSource;

                                                                IF ("Account Type" <> "Account Type"::"Fixed Asset") AND
                                                                   ("Bal. Account Type" <> "Bal. Account Type"::"Fixed Asset")
                                                                THEN BEGIN
                                                                  "Depreciation Book Code" := '';
                                                                  VALIDATE("FA Posting Type","FA Posting Type"::" ");
                                                                END;
                                                                IF xRec."Account Type" IN
                                                                   [xRec."Account Type"::Customer,xRec."Account Type"::Vendor]
                                                                THEN BEGIN
                                                                  "Bill-to/Pay-to No." := '';
                                                                  "Ship-to/Order Address Code" := '';
                                                                  "Sell-to/Buy-from No." := '';
                                                                END;

                                                                IF ("Account Type" = "Account Type"::"IC Partner") AND
                                                                   ("Bal. Account Type" = "Bal. Account Type"::"G/L Account") AND
                                                                   GLAcc.GET("Bal. Account No.")
                                                                THEN
                                                                  "IC Partner G/L Acc. No." := GLAcc."Default IC Partner G/L Acc. No"
                                                                ELSE
                                                                  "IC Partner G/L Acc. No." := '';

                                                                IF "Journal Template Name" <> '' THEN
                                                                  IF ("Account Type" = "Account Type"::"IC Partner") THEN BEGIN
                                                                    GetTemplate;
                                                                    IF GenJnlTemplate.Type <> GenJnlTemplate.Type::Intercompany THEN
                                                                      FIELDERROR("Account Type");
                                                                  END;
                                                                IF "Account Type" <> "Account Type"::Customer THEN
                                                                  VALIDATE("Credit Card No.",'');
                                                              END;

                                                   CaptionML=[ENU=Account Type;
                                                              FRA=Type compte];
                                                   OptionCaptionML=[ENU=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner;
                                                                    FRA=G‚n‚ral,Client,Fournisseur,Banque,Immobilisation,Partenaire IC];
                                                   OptionString=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner }
    { 4   ;   ;Account No.         ;Code20        ;TableRelation=IF (Account Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Account Type=CONST(Customer)) Customer
                                                                 ELSE IF (Account Type=CONST(Vendor)) Vendor
                                                                 ELSE IF (Account Type=CONST(Bank Account)) "Bank Account"
                                                                 ELSE IF (Account Type=CONST(Fixed Asset)) "Fixed Asset"
                                                                 ELSE IF (Account Type=CONST(IC Partner)) "IC Partner";
                                                   OnValidate=VAR
                                                                lPaymentAddr@8016600 : Record 10870;
                                                              BEGIN
                                                                VALIDATE("Job No.",'');
                                                                IF "Account No." = '' THEN BEGIN
                                                                  UpdateLineBalance;
                                                                  UpdateSource;
                                                                  CreateDim(
                                                                    DimMgt.TypeToTableID1("Account Type"),"Account No.",
                                                                    DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
                                                                    DATABASE::Job,"Job No.",
                                                                    DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
                                                                    DATABASE::Campaign,"Campaign No.");
                                                                  IF xRec."Account No." <> '' THEN BEGIN
                                                                    "Gen. Posting Type" := "Gen. Posting Type"::" ";
                                                                    "Gen. Bus. Posting Group" := '';
                                                                    "Gen. Prod. Posting Group" := '';
                                                                    "VAT Bus. Posting Group" := '';
                                                                    "VAT Prod. Posting Group" := '';
                                                                    "Tax Area Code" := '';
                                                                    "Tax Liable" := FALSE;
                                                                    "Tax Group Code" := '';
                                                                  END;
                                                                  GetDerogatorySetup;
                                                                  EXIT;
                                                                END;

                                                                IF "Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"IC Partner"] THEN
                                                                  "IC Partner Code" := '';

                                                                //<<ISA02.ST
                                                                GetGenJnlBatch;
                                                                IF GenJnlBatch."Default Payment Method Code" <> '' THEN
                                                                  "Payment Method Code" := GenJnlBatch."Default Payment Method Code";
                                                                //>>ISA02.ST

                                                                CASE "Account Type" OF
                                                                  "Account Type"::"G/L Account":
                                                                    BEGIN
                                                                      GLAcc.GET("Account No.");
                                                                      CheckGLAcc;
                                                                      ReplaceInfo := "Bal. Account No." = '';
                                                                      IF NOT ReplaceInfo THEN BEGIN
                                                                        GenJnlBatch.GET("Journal Template Name","Journal Batch Name");
                                                                        ReplaceInfo := GenJnlBatch."Bal. Account No." <> '';
                                                                      END;
                                                                      IF ReplaceInfo THEN BEGIN
                                                                        Description := GLAcc.Name;
                                                                      END;
                                                                      IF ("Bal. Account No." = '') OR
                                                                         ("Bal. Account Type" IN
                                                                          ["Bal. Account Type"::"G/L Account","Bal. Account Type"::"Bank Account"])
                                                                      THEN BEGIN
                                                                        "Posting Group" := '';
                                                                        "Salespers./Purch. Code" := '';
                                                                        "Payment Terms Code" := '';
                                                                      END;
                                                                      IF "Bal. Account No." = '' THEN
                                                                        "Currency Code" := '';
                                                                      IF NOT GenJnlBatch.GET("Journal Template Name","Journal Batch Name") OR
                                                                         GenJnlBatch."Copy VAT Setup to Jnl. Lines"
                                                                      THEN BEGIN
                                                                        "Gen. Posting Type" := GLAcc."Gen. Posting Type";
                                                                        "Gen. Bus. Posting Group" := GLAcc."Gen. Bus. Posting Group";
                                                                        "Gen. Prod. Posting Group" := GLAcc."Gen. Prod. Posting Group";
                                                                        "VAT Bus. Posting Group" := GLAcc."VAT Bus. Posting Group";
                                                                        "VAT Prod. Posting Group" := GLAcc."VAT Prod. Posting Group";
                                                                      END;
                                                                      "Tax Area Code" := GLAcc."Tax Area Code";
                                                                      "Tax Liable" := GLAcc."Tax Liable";
                                                                      "Tax Group Code" := GLAcc."Tax Group Code";
                                                                      IF "Posting Date" <> 0D THEN
                                                                        IF "Posting Date" = CLOSINGDATE("Posting Date") THEN BEGIN
                                                                          "Gen. Posting Type" := 0;
                                                                          "Gen. Bus. Posting Group" := '';
                                                                          "Gen. Prod. Posting Group" := '';
                                                                          "VAT Bus. Posting Group" := '';
                                                                          "VAT Prod. Posting Group" := '';
                                                                        END;
                                                                    END;
                                                                  "Account Type"::Customer:
                                                                    BEGIN
                                                                      Cust.GET("Account No.");
                                                                      Cust.CheckBlockedCustOnJnls(Cust,"Document Type", FALSE);
                                                                      IF (Cust."IC Partner Code" <> '') THEN BEGIN
                                                                        IF GenJnlTemplate.GET("Journal Template Name") THEN;
                                                                        IF (Cust."IC Partner Code" <> '' ) AND (ICPartner.GET(Cust."IC Partner Code")) THEN BEGIN
                                                                          ICPartner.CheckICPartnerIndirect(FORMAT("Account Type"),"Account No.");
                                                                          "IC Partner Code" := Cust."IC Partner Code";
                                                                        END;
                                                                      END;
                                                                      Description := Cust.Name;
                                                                      "Posting Group" := Cust."Customer Posting Group";
                                                                      "Salespers./Purch. Code" := Cust."Salesperson Code";
                                                                      "Payment Terms Code" := Cust."Payment Terms Code";
                                                                      VALIDATE("Bill-to/Pay-to No.","Account No.");
                                                                      VALIDATE("Sell-to/Buy-from No.", "Account No.");
                                                                      IF SetCurrencyCode("Bal. Account Type","Bal. Account No.") THEN
                                                                        Cust.TESTFIELD("Currency Code","Currency Code")
                                                                      ELSE
                                                                        "Currency Code" := Cust."Currency Code";
                                                                      "Gen. Posting Type" := 0;
                                                                      "Gen. Bus. Posting Group" := '';
                                                                      "Gen. Prod. Posting Group" := '';
                                                                      "VAT Bus. Posting Group" := '';
                                                                      "VAT Prod. Posting Group" := '';
                                                                      IF Cust.GET("Account No.") THEN
                                                                        VALIDATE("Bank Account Code",Cust."Default Bank Account Code");
                                                                      IF (Cust."Bill-to Customer No." <> '') AND (Cust."Bill-to Customer No." <> "Account No.") THEN BEGIN
                                                                        OK := CONFIRM(Text014,FALSE,Cust.TABLECAPTION,Cust."No.",Cust.FIELDCAPTION("Bill-to Customer No."),
                                                                        Cust."Bill-to Customer No.");
                                                                        IF NOT OK THEN
                                                                          ERROR('');
                                                                      END;
                                                                      VALIDATE("Payment Terms Code");
                                                                //<<ISA02.ST
                                                                      GetGenJnlBatch;
                                                                      IF GenJnlBatch."Default Payment Method Code" = '' THEN
                                                                        "Payment Method Code" := Cust."Payment Method Code";
                                                                //>>ISA02.ST
                                                                    END;
                                                                  "Account Type"::Vendor:
                                                                    BEGIN
                                                                      Vend.GET("Account No.");
                                                                      Vend.CheckBlockedVendOnJnls(Vend,"Document Type",FALSE);
                                                                      IF (Vend."IC Partner Code" <> '') THEN BEGIN
                                                                        IF GenJnlTemplate.GET("Journal Template Name") THEN;
                                                                        IF (Vend."IC Partner Code" <> '') AND (ICPartner.GET(Vend."IC Partner Code")) THEN BEGIN
                                                                          ICPartner.CheckICPartnerIndirect(FORMAT("Account Type"),"Account No.");
                                                                          "IC Partner Code" := Vend."IC Partner Code";
                                                                        END;
                                                                      END;
                                                                      Description := Vend.Name;
                                                                      "Posting Group" := Vend."Vendor Posting Group";
                                                                      "Salespers./Purch. Code" := Vend."Purchaser Code";
                                                                      "Payment Terms Code" := Vend."Payment Terms Code";
                                                                      VALIDATE("Bill-to/Pay-to No.","Account No.");
                                                                      VALIDATE("Sell-to/Buy-from No.","Account No.");
                                                                      IF SetCurrencyCode("Bal. Account Type","Bal. Account No.") THEN
                                                                        Vend.TESTFIELD("Currency Code","Currency Code")
                                                                      ELSE
                                                                        "Currency Code" := Vend."Currency Code";
                                                                      "Gen. Posting Type" := 0;
                                                                      "Gen. Bus. Posting Group" := '';
                                                                      "Gen. Prod. Posting Group" := '';
                                                                      "VAT Bus. Posting Group" := '';
                                                                      "VAT Prod. Posting Group" := '';
                                                                      VALIDATE("Bank Account Code",Vend."Default Bank Account Code");
                                                                      IF (Vend."Pay-to Vendor No." <> '') AND (Vend."Pay-to Vendor No." <> "Account No.")  THEN BEGIN
                                                                        OK := CONFIRM(Text014,FALSE,Vend.TABLECAPTION,Vend."No.",Vend.FIELDCAPTION("Pay-to Vendor No."),
                                                                        Vend."Pay-to Vendor No.");
                                                                        IF NOT OK THEN
                                                                          ERROR('');
                                                                      END;
                                                                      VALIDATE("Payment Terms Code");
                                                                //<<ISA02.ST
                                                                      GetGenJnlBatch;
                                                                      IF GenJnlBatch."Default Payment Method Code" = '' THEN
                                                                        "Payment Method Code" := Vend."Payment Method Code";
                                                                //>>ISA02.ST
                                                                    END;
                                                                  "Account Type"::"Bank Account":
                                                                    BEGIN
                                                                      BankAcc.GET("Account No.");
                                                                      BankAcc.TESTFIELD(Blocked,FALSE);
                                                                      ReplaceInfo := "Bal. Account No." = '';
                                                                      IF NOT ReplaceInfo THEN BEGIN
                                                                        GenJnlBatch.GET("Journal Template Name","Journal Batch Name");
                                                                        ReplaceInfo := GenJnlBatch."Bal. Account No." <> '';
                                                                      END;
                                                                      IF ReplaceInfo THEN BEGIN
                                                                        Description := BankAcc.Name;
                                                                      END;
                                                                      IF ("Bal. Account No." = '') OR
                                                                         ("Bal. Account Type" IN
                                                                          ["Bal. Account Type"::"G/L Account","Bal. Account Type"::"Bank Account"])
                                                                      THEN BEGIN
                                                                        "Posting Group" := '';
                                                                        "Salespers./Purch. Code" := '';
                                                                        "Payment Terms Code" := '';
                                                                      END;
                                                                      IF BankAcc."Currency Code" = '' THEN BEGIN
                                                                        IF "Bal. Account No." = '' THEN
                                                                          "Currency Code" := '';
                                                                      END ELSE
                                                                        IF SetCurrencyCode("Bal. Account Type","Bal. Account No.") THEN
                                                                          BankAcc.TESTFIELD("Currency Code","Currency Code")
                                                                        ELSE
                                                                          "Currency Code" := BankAcc."Currency Code";
                                                                      "Gen. Posting Type" := 0;
                                                                      "Gen. Bus. Posting Group" := '';
                                                                      "Gen. Prod. Posting Group" := '';
                                                                      "VAT Bus. Posting Group" := '';
                                                                      "VAT Prod. Posting Group" := '';
                                                                    END;
                                                                  "Account Type"::"Fixed Asset":
                                                                    BEGIN
                                                                      FA.GET("Account No.");
                                                                      FA.TESTFIELD(FA.Blocked,FALSE);
                                                                      FA.TESTFIELD(FA.Inactive,FALSE);
                                                                      FA.TESTFIELD(FA."Budgeted Asset",FALSE);
                                                                      Description := FA.Description;
                                                                      IF "Depreciation Book Code" = '' THEN BEGIN
                                                                        FASetup.GET;
                                                                        "Depreciation Book Code" := FASetup."Default Depr. Book";
                                                                        IF NOT FADeprBook.GET("Account No.","Depreciation Book Code") THEN
                                                                          "Depreciation Book Code" := '';
                                                                      END;
                                                                      IF "Depreciation Book Code" <> '' THEN BEGIN
                                                                        FADeprBook.GET("Account No.","Depreciation Book Code");
                                                                        "Posting Group" := FADeprBook."FA Posting Group";
                                                                      END;
                                                                      GetFAVATSetup;
                                                                      GetFAAddCurrExchRate;
                                                                      GetDerogatorySetup;
                                                                    END;
                                                                  "Account Type"::"IC Partner":
                                                                    BEGIN
                                                                      ICPartner.GET("Account No.");
                                                                      ICPartner.CheckICPartner;
                                                                      Description := ICPartner.Name;
                                                                      IF ("Bal. Account No." = '') OR ("Bal. Account Type" = "Bal. Account Type"::"G/L Account") THEN
                                                                        "Currency Code" := ICPartner."Currency Code";
                                                                      IF ("Bal. Account Type" = "Bal. Account Type"::"Bank Account") AND ("Currency Code" = '') THEN
                                                                        "Currency Code" := ICPartner."Currency Code";
                                                                      "Gen. Posting Type" := 0;
                                                                      "Gen. Bus. Posting Group" := '';
                                                                      "Gen. Prod. Posting Group" := '';
                                                                      "VAT Bus. Posting Group" := '';
                                                                      "VAT Prod. Posting Group" := '';
                                                                      "IC Partner Code" := "Account No.";
                                                                    END;
                                                                END;

                                                                VALIDATE("Currency Code");
                                                                VALIDATE("VAT Prod. Posting Group");
                                                                UpdateLineBalance;
                                                                UpdateSource;
                                                                CreateDim(
                                                                  DimMgt.TypeToTableID1("Account Type"),"Account No.",
                                                                  DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
                                                                  DATABASE::Job,"Job No.",
                                                                  DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
                                                                  DATABASE::Campaign,"Campaign No.");

                                                                //<<ISA03.ISAT.MA
                                                                InitDescription();
                                                                IF "Account No." <> '' THEN BEGIN
                                                                  lPaymentAddr.SETRANGE("Account Type", "Account Type");
                                                                  lPaymentAddr.SETRANGE("Account No.", "Account No.");
                                                                  lPaymentAddr.SETRANGE("Default Value", TRUE);
                                                                  IF lPaymentAddr.FINDFIRST THEN;
                                                                END;
                                                                "Payment Address Code" := lPaymentAddr.Code;
                                                                //>>ISA03.ISAT.MA

                                                                //<<IMH05.ST
                                                                IF "Service Header Voucher No." <> 0 THEN
                                                                  VALIDATE("Service Header Voucher No.");
                                                                //>>IMH05.ST
                                                              END;

                                                   CaptionML=[ENU=Account No.;
                                                              FRA=Nø compte] }
    { 5   ;   ;Posting Date        ;Date          ;OnValidate=BEGIN
                                                                InitDescription(); // ISA03.ISAT.MA

                                                                VALIDATE("Document Date","Posting Date");
                                                                VALIDATE("Currency Code");

                                                                IF ((Rec."Posting Date" <> xRec."Posting Date") AND (Amount <> 0))  THEN
                                                                  PaymentToleranceMgt.PmtTolGenJnl(Rec);

                                                                ValidateApplyRequirements(Rec);

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine;
                                                                  UpdatePricesFromJobJnlLine;
                                                                END
                                                              END;

                                                   CaptionML=[ENU=Posting Date;
                                                              FRA=Date comptabilisation];
                                                   ClosingDates=Yes }
    { 6   ;   ;Document Type       ;Option        ;OnValidate=BEGIN
                                                                CheckNoCardTransactEntryExist(xRec);

                                                                VALIDATE("Payment Terms Code");
                                                                IF "Account No." <> '' THEN
                                                                  CASE "Account Type" OF
                                                                    "Account Type"::Customer:
                                                                       BEGIN
                                                                         Cust.GET("Account No.");
                                                                         Cust.CheckBlockedCustOnJnls(Cust,"Document Type",FALSE);
                                                                       END;
                                                                    "Account Type"::Vendor:
                                                                       BEGIN
                                                                         Vend.GET("Account No.");
                                                                         Vend.CheckBlockedVendOnJnls(Vend,"Document Type",FALSE);
                                                                       END;
                                                                  END;
                                                                IF "Bal. Account No." <> '' THEN
                                                                  CASE "Bal. Account Type" OF
                                                                    "Account Type"::Customer:
                                                                      BEGIN
                                                                        Cust.GET("Bal. Account No.");
                                                                        Cust.CheckBlockedCustOnJnls(Cust,"Document Type",FALSE);
                                                                      END;
                                                                    "Account Type"::Vendor:
                                                                      BEGIN
                                                                        Vend.GET("Bal. Account No.");
                                                                        Vend.CheckBlockedVendOnJnls(Vend,"Document Type",FALSE);
                                                                      END;
                                                                  END;
                                                                UpdateSalesPurchLCY;
                                                                ValidateApplyRequirements(Rec);
                                                                IF NOT ("Document Type" IN ["Document Type"::Payment,"Document Type"::Refund]) THEN
                                                                  VALIDATE("Credit Card No.",'');
                                                              END;

                                                   CaptionML=[ENU=Document Type;
                                                              FRA=Type document];
                                                   OptionCaptionML=[ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                                    FRA=" ,Paiement,Facture,Avoir,Int‚rˆts,Relance,Remboursement"];
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund] }
    { 7   ;   ;Document No.        ;Code20        ;OnValidate=BEGIN
                                                                CheckNoCardTransactEntryExist(xRec);
                                                              END;

                                                   CaptionML=[ENU=Document No.;
                                                              FRA=Nø document] }
    { 8   ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              FRA=D‚signation] }
    { 10  ;   ;VAT %               ;Decimal       ;OnValidate=BEGIN
                                                                GetCurrency;
                                                                CASE "VAT Calculation Type" OF
                                                                  "VAT Calculation Type"::"Normal VAT",
                                                                  "VAT Calculation Type"::"Reverse Charge VAT":
                                                                    BEGIN
                                                                      "VAT Amount" :=
                                                                        ROUND(Amount * "VAT %" / (100 + "VAT %"),Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                                                                      "VAT Base Amount" :=
                                                                        ROUND(Amount - "VAT Amount",Currency."Amount Rounding Precision");
                                                                    END;
                                                                  "VAT Calculation Type"::"Full VAT":
                                                                    "VAT Amount" := Amount;
                                                                  "VAT Calculation Type"::"Sales Tax":
                                                                    IF ("Gen. Posting Type" = "Gen. Posting Type"::Purchase) AND
                                                                       "Use Tax"
                                                                    THEN BEGIN
                                                                      "VAT Amount" := 0;
                                                                      "VAT %" := 0;
                                                                    END ELSE BEGIN
                                                                      "VAT Amount" :=
                                                                        Amount -
                                                                        SalesTaxCalculate.ReverseCalculateTax(
                                                                          "Tax Area Code","Tax Group Code","Tax Liable",
                                                                          "Posting Date",Amount,Quantity,"Currency Factor");
                                                                      IF Amount - "VAT Amount" <> 0 THEN
                                                                        "VAT %" := ROUND(100 * "VAT Amount" / (Amount - "VAT Amount"),0.00001)
                                                                      ELSE
                                                                        "VAT %" := 0;
                                                                      "VAT Amount" :=
                                                                        ROUND("VAT Amount",Currency."Amount Rounding Precision");
                                                                    END;
                                                                END;
                                                                "VAT Base Amount" := Amount - "VAT Amount";
                                                                "VAT Difference" := 0;

                                                                IF "Currency Code" = '' THEN
                                                                  "VAT Amount (LCY)" := "VAT Amount"
                                                                ELSE
                                                                  "VAT Amount (LCY)" :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                                                        "Posting Date","Currency Code",
                                                                        "VAT Amount","Currency Factor"));
                                                                "VAT Base Amount (LCY)" := "Amount (LCY)" - "VAT Amount (LCY)";

                                                                UpdateSalesPurchLCY;
                                                              END;

                                                   CaptionML=[ENU=VAT %;
                                                              FRA=% TVA];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100;
                                                   Editable=No }
    { 11  ;   ;Bal. Account No.    ;Code20        ;TableRelation=IF (Bal. Account Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Bal. Account Type=CONST(Customer)) Customer
                                                                 ELSE IF (Bal. Account Type=CONST(Vendor)) Vendor
                                                                 ELSE IF (Bal. Account Type=CONST(Bank Account)) "Bank Account"
                                                                 ELSE IF (Bal. Account Type=CONST(Fixed Asset)) "Fixed Asset"
                                                                 ELSE IF (Bal. Account Type=CONST(IC Partner)) "IC Partner";
                                                   OnValidate=VAR
                                                                lPaymentAddr@8016600 : Record 10870;
                                                              BEGIN
                                                                VALIDATE("Job No.",'');
                                                                IF "Bal. Account No." = '' THEN BEGIN
                                                                  UpdateLineBalance;
                                                                  UpdateSource;
                                                                  CreateDim(
                                                                    DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
                                                                    DimMgt.TypeToTableID1("Account Type"),"Account No.",
                                                                    DATABASE::Job,"Job No.",
                                                                    DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
                                                                    DATABASE::Campaign,"Campaign No.");
                                                                  IF xRec."Bal. Account No." <> '' THEN BEGIN
                                                                    "Bal. Gen. Posting Type" := "Bal. Gen. Posting Type"::" ";
                                                                    "Bal. Gen. Bus. Posting Group" := '';
                                                                    "Bal. Gen. Prod. Posting Group" := '';
                                                                    "Bal. VAT Bus. Posting Group" := '';
                                                                    "Bal. VAT Prod. Posting Group" := '';
                                                                    "Bal. Tax Area Code" := '';
                                                                    "Bal. Tax Liable" := FALSE;
                                                                    "Bal. Tax Group Code" := '';
                                                                  END;
                                                                  EXIT;
                                                                END;
                                                                IF xRec."Bal. Account Type" IN [xRec."Bal. Account Type"::Customer, xRec."Bal. Account Type"::Vendor,
                                                                   xRec."Bal. Account Type"::"IC Partner"]
                                                                THEN
                                                                  "IC Partner Code" := '';

                                                                //<<ISA02.ST
                                                                GetGenJnlBatch;
                                                                IF GenJnlBatch."Default Payment Method Code" <> '' THEN
                                                                  "Payment Method Code" := GenJnlBatch."Default Payment Method Code";
                                                                //>>ISA02.ST

                                                                CASE "Bal. Account Type" OF
                                                                  "Bal. Account Type"::"G/L Account":
                                                                    BEGIN
                                                                      GLAcc.GET("Bal. Account No.");
                                                                      CheckGLAcc;
                                                                      IF "Account No." = '' THEN BEGIN
                                                                        Description := GLAcc.Name;
                                                                        "Currency Code" := '';
                                                                      END;
                                                                      IF ("Account No." = '') OR
                                                                         ("Account Type" IN
                                                                          ["Account Type"::"G/L Account","Account Type"::"Bank Account"])
                                                                      THEN BEGIN
                                                                        "Posting Group" := '';
                                                                        "Salespers./Purch. Code" := '';
                                                                        "Payment Terms Code" := '';
                                                                      END;
                                                                      IF NOT GenJnlBatch.GET("Journal Template Name","Journal Batch Name") OR
                                                                         GenJnlBatch."Copy VAT Setup to Jnl. Lines"
                                                                      THEN BEGIN
                                                                        "Bal. Gen. Posting Type" := GLAcc."Gen. Posting Type";
                                                                        "Bal. Gen. Bus. Posting Group" := GLAcc."Gen. Bus. Posting Group";
                                                                        "Bal. Gen. Prod. Posting Group" := GLAcc."Gen. Prod. Posting Group";
                                                                        "Bal. VAT Bus. Posting Group" := GLAcc."VAT Bus. Posting Group";
                                                                        "Bal. VAT Prod. Posting Group" := GLAcc."VAT Prod. Posting Group";
                                                                      END;
                                                                      "Bal. Tax Area Code" := GLAcc."Tax Area Code";
                                                                      "Bal. Tax Liable" := GLAcc."Tax Liable";
                                                                      "Bal. Tax Group Code" := GLAcc."Tax Group Code";
                                                                      IF "Posting Date" <> 0D THEN
                                                                        IF "Posting Date" = CLOSINGDATE("Posting Date") THEN BEGIN
                                                                          "Bal. Gen. Bus. Posting Group" := '';
                                                                          "Bal. Gen. Prod. Posting Group" := '';
                                                                          "Bal. VAT Bus. Posting Group" := '';
                                                                          "Bal. VAT Prod. Posting Group" := '';
                                                                          "Bal. Gen. Posting Type" := 0;
                                                                        END;
                                                                    END;
                                                                  "Bal. Account Type"::Customer:
                                                                    BEGIN
                                                                      Cust.GET("Bal. Account No.");
                                                                      Cust.CheckBlockedCustOnJnls(Cust,"Document Type",FALSE);
                                                                      IF (Cust."IC Partner Code" <> '') THEN BEGIN
                                                                        IF GenJnlTemplate.GET("Journal Template Name") THEN;
                                                                        IF (Cust."IC Partner Code" <> '') AND (ICPartner.GET(Cust."IC Partner Code")) THEN BEGIN
                                                                          ICPartner.CheckICPartnerIndirect(FORMAT("Bal. Account Type"),"Bal. Account No.");
                                                                          "IC Partner Code" := Cust."IC Partner Code";
                                                                        END;
                                                                      END;

                                                                      IF "Account No." = '' THEN BEGIN
                                                                        Description := Cust.Name;
                                                                      END;
                                                                      "Posting Group" := Cust."Customer Posting Group";
                                                                      "Salespers./Purch. Code" := Cust."Salesperson Code";
                                                                      "Payment Terms Code" := Cust."Payment Terms Code";
                                                                      VALIDATE("Bill-to/Pay-to No.","Bal. Account No.");
                                                                      VALIDATE("Sell-to/Buy-from No.","Bal. Account No.");
                                                                      IF ("Account No." = '') OR ("Account Type" = "Account Type"::"G/L Account") THEN
                                                                        "Currency Code" := Cust."Currency Code";
                                                                      IF ("Account Type" = "Account Type"::"Bank Account") AND ("Currency Code" = '') THEN
                                                                        "Currency Code" := Cust."Currency Code";
                                                                      "Bal. Gen. Posting Type" := 0;
                                                                      "Bal. Gen. Bus. Posting Group" := '';
                                                                      "Bal. Gen. Prod. Posting Group" := '';
                                                                      "Bal. VAT Bus. Posting Group" := '';
                                                                      "Bal. VAT Prod. Posting Group" := '';
                                                                      IF (Cust."Bill-to Customer No." <> '') AND (Cust."Bill-to Customer No." <> "Bal. Account No.") THEN BEGIN
                                                                        OK := CONFIRM(Text014,FALSE,Cust.TABLECAPTION,Cust."No.",Cust.FIELDCAPTION("Bill-to Customer No."),
                                                                        Cust."Bill-to Customer No.");
                                                                        IF NOT OK THEN
                                                                          ERROR('');
                                                                      END;
                                                                      VALIDATE("Payment Terms Code");
                                                                //<<ISA02.ST
                                                                      GetGenJnlBatch;
                                                                      IF GenJnlBatch."Default Payment Method Code" = '' THEN
                                                                        "Payment Method Code" := Cust."Payment Method Code";
                                                                //>>ISA02.ST
                                                                    END;
                                                                  "Bal. Account Type"::Vendor:
                                                                    BEGIN
                                                                      Vend.GET("Bal. Account No.");
                                                                      Vend.CheckBlockedVendOnJnls(Vend,"Document Type",FALSE);
                                                                      IF (Vend."IC Partner Code" <> '') THEN BEGIN
                                                                        IF GenJnlTemplate.GET("Journal Template Name") THEN;
                                                                        IF (Vend."IC Partner Code" <> '') AND (ICPartner.GET(Vend."IC Partner Code")) THEN BEGIN
                                                                          ICPartner.CheckICPartnerIndirect(FORMAT("Bal. Account Type"),"Bal. Account No.");
                                                                          "IC Partner Code" := Vend."IC Partner Code";
                                                                        END;
                                                                      END;

                                                                      IF "Account No." = '' THEN BEGIN
                                                                        Description := Vend.Name;
                                                                      END;
                                                                      "Posting Group" := Vend."Vendor Posting Group";
                                                                      "Salespers./Purch. Code" := Vend."Purchaser Code";
                                                                      "Payment Terms Code" := Vend."Payment Terms Code";
                                                                      VALIDATE("Bill-to/Pay-to No.","Bal. Account No.");
                                                                      VALIDATE("Sell-to/Buy-from No.","Bal. Account No.");
                                                                      IF ("Account No." = '') OR ("Account Type" = "Account Type"::"G/L Account") THEN
                                                                        "Currency Code" := Vend."Currency Code";
                                                                      IF ("Account Type" = "Account Type"::"Bank Account") AND ("Currency Code" = '') THEN
                                                                        "Currency Code" := Vend."Currency Code";
                                                                      "Bal. Gen. Posting Type" := 0;
                                                                      "Bal. Gen. Bus. Posting Group" := '';
                                                                      "Bal. Gen. Prod. Posting Group" := '';
                                                                      "Bal. VAT Bus. Posting Group" := '';
                                                                      "Bal. VAT Prod. Posting Group" := '';
                                                                      IF (Vend."Pay-to Vendor No." <> '') AND (Vend."Pay-to Vendor No." <> "Bal. Account No.")  THEN BEGIN
                                                                        OK := CONFIRM(Text014,FALSE,Vend.TABLECAPTION,Vend."No.",Vend.FIELDCAPTION("Pay-to Vendor No."),
                                                                        Vend."Pay-to Vendor No.");
                                                                        IF NOT OK THEN
                                                                          ERROR('');
                                                                      END;
                                                                      VALIDATE("Payment Terms Code");
                                                                //<<ISA02.ST
                                                                      GetGenJnlBatch;
                                                                      IF GenJnlBatch."Default Payment Method Code" = '' THEN
                                                                        "Payment Method Code" := Vend."Payment Method Code";
                                                                //>>ISA02.ST
                                                                    END;
                                                                  "Bal. Account Type"::"Bank Account":
                                                                    BEGIN
                                                                      BankAcc.GET("Bal. Account No.");
                                                                      BankAcc.TESTFIELD(Blocked,FALSE);
                                                                      IF "Account No." = '' THEN BEGIN
                                                                        Description := BankAcc.Name;
                                                                      END;
                                                                      IF ("Account No." = '') OR
                                                                         ("Account Type" IN
                                                                          ["Account Type"::"G/L Account","Account Type"::"Bank Account"])
                                                                      THEN BEGIN
                                                                        "Posting Group" := '';
                                                                        "Salespers./Purch. Code" := '';
                                                                        "Payment Terms Code" := '';
                                                                      END;
                                                                      IF BankAcc."Currency Code" = '' THEN BEGIN
                                                                        IF "Account No." = '' THEN
                                                                          "Currency Code" := '';
                                                                      END ELSE
                                                                        IF SetCurrencyCode("Bal. Account Type","Bal. Account No.") THEN
                                                                          BankAcc.TESTFIELD("Currency Code","Currency Code")
                                                                        ELSE
                                                                          "Currency Code" := BankAcc."Currency Code";
                                                                      "Bal. Gen. Posting Type" := 0;
                                                                      "Bal. Gen. Bus. Posting Group" := '';
                                                                      "Bal. Gen. Prod. Posting Group" := '';
                                                                      "Bal. VAT Bus. Posting Group" := '';
                                                                      "Bal. VAT Prod. Posting Group" := '';
                                                                    END;
                                                                  "Bal. Account Type"::"Fixed Asset":
                                                                    BEGIN
                                                                      FA.GET("Bal. Account No.");
                                                                      FA.TESTFIELD(FA.Blocked,FALSE);
                                                                      FA.TESTFIELD(FA.Inactive,FALSE);
                                                                      FA.TESTFIELD(FA."Budgeted Asset",FALSE);
                                                                      IF "Account No." = '' THEN BEGIN
                                                                        Description := FA.Description;
                                                                      END;
                                                                      IF "Depreciation Book Code" = '' THEN BEGIN
                                                                        FASetup.GET;
                                                                        "Depreciation Book Code" := FASetup."Default Depr. Book";
                                                                        IF NOT FADeprBook.GET("Bal. Account No.","Depreciation Book Code") THEN
                                                                          "Depreciation Book Code" := '';
                                                                      END;
                                                                      IF "Depreciation Book Code" <> '' THEN BEGIN
                                                                        FADeprBook.GET("Bal. Account No.","Depreciation Book Code");
                                                                        "Posting Group" := FADeprBook."FA Posting Group";
                                                                      END;
                                                                      GetFAVATSetup;
                                                                      GetFAAddCurrExchRate;
                                                                    END;
                                                                  "Bal. Account Type"::"IC Partner":
                                                                    BEGIN
                                                                      ICPartner.GET("Bal. Account No.");
                                                                      IF "Account No." = '' THEN BEGIN
                                                                        Description := ICPartner.Name;
                                                                      END;
                                                                      IF ("Account No." = '') OR ("Account Type" = "Account Type"::"G/L Account") THEN
                                                                        "Currency Code" := ICPartner."Currency Code";
                                                                      IF ("Account Type" = "Account Type"::"Bank Account") AND ("Currency Code" = '') THEN
                                                                        "Currency Code" := ICPartner."Currency Code";
                                                                      "Bal. Gen. Posting Type" := 0;
                                                                      "Bal. Gen. Bus. Posting Group" := '';
                                                                      "Bal. Gen. Prod. Posting Group" := '';
                                                                      "Bal. VAT Bus. Posting Group" := '';
                                                                      "Bal. VAT Prod. Posting Group" := '';
                                                                      "IC Partner Code" := "Bal. Account No.";
                                                                    END;

                                                                END;

                                                                VALIDATE("Currency Code");
                                                                VALIDATE("Bal. VAT Prod. Posting Group");
                                                                UpdateLineBalance;
                                                                UpdateSource;
                                                                CreateDim(
                                                                  DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
                                                                  DimMgt.TypeToTableID1("Account Type"),"Account No.",
                                                                  DATABASE::Job,"Job No.",
                                                                  DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
                                                                  DATABASE::Campaign,"Campaign No.");

                                                                IF ("Account Type" = "Account Type"::"IC Partner") AND
                                                                   ("Bal. Account Type" = "Bal. Account Type"::"G/L Account")
                                                                THEN
                                                                  "IC Partner G/L Acc. No." := GLAcc."Default IC Partner G/L Acc. No";

                                                                //<<ISA03.ST
                                                                IF "Bal. Account No." <> '' THEN BEGIN
                                                                  lPaymentAddr.SETRANGE("Account Type", "Bal. Account Type");
                                                                  lPaymentAddr.SETRANGE("Account No.", "Bal. Account No.");
                                                                  lPaymentAddr.SETRANGE("Default Value", TRUE);
                                                                  IF lPaymentAddr.FINDFIRST THEN;
                                                                END;
                                                                "Bal. Payment Address Code" := lPaymentAddr.Code;
                                                                //>>ISA03.ST
                                                                //<<IMH05.ST
                                                                IF "Service Header Voucher No." <> 0 THEN
                                                                  VALIDATE("Service Header Voucher No.");
                                                                //>>IMH05.ST
                                                              END;

                                                   CaptionML=[ENU=Bal. Account No.;
                                                              FRA=Nø compte contrepartie] }
    { 12  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=BEGIN
                                                                IF "Bal. Account Type" = "Bal. Account Type"::"Bank Account" THEN BEGIN
                                                                  IF BankAcc3.GET("Bal. Account No.") AND (BankAcc3."Currency Code" <> '')THEN
                                                                    BankAcc3.TESTFIELD("Currency Code","Currency Code");
                                                                END;
                                                                IF "Account Type" = "Account Type"::"Bank Account" THEN BEGIN
                                                                  IF BankAcc3.GET("Account No.") AND (BankAcc3."Currency Code" <> '') THEN
                                                                    BankAcc3.TESTFIELD("Currency Code","Currency Code");
                                                                END;
                                                                IF ("Recurring Method" IN
                                                                    ["Recurring Method"::"B  Balance","Recurring Method"::"RB Reversing Balance"]) AND
                                                                   ("Currency Code" <> '')
                                                                THEN
                                                                  ERROR(
                                                                    Text001,
                                                                    FIELDCAPTION("Currency Code"),FIELDCAPTION("Recurring Method"),"Recurring Method");

                                                                IF "Currency Code" <> '' THEN BEGIN
                                                                  GetCurrency;
                                                                  IF ("Currency Code" <> xRec."Currency Code") OR
                                                                     ("Posting Date" <> xRec."Posting Date") OR
                                                                     (CurrFieldNo = FIELDNO("Currency Code")) OR
                                                                     ("Currency Factor" = 0)
                                                                  THEN
                                                                    "Currency Factor" :=
                                                                      CurrExchRate.ExchangeRate("Posting Date","Currency Code");
                                                                END ELSE
                                                                  "Currency Factor" := 0;
                                                                VALIDATE("Currency Factor");

                                                                IF (("Currency Code" <> xRec."Currency Code") AND (Amount <> 0)) THEN
                                                                  PaymentToleranceMgt.PmtTolGenJnl(Rec);
                                                              END;

                                                   CaptionML=[ENU=Currency Code;
                                                              FRA=Code devise] }
    { 13  ;   ;Amount              ;Decimal       ;OnValidate=BEGIN
                                                                GetCurrency;
                                                                IF "Currency Code" = '' THEN
                                                                  "Amount (LCY)" := Amount
                                                                ELSE
                                                                  "Amount (LCY)" := ROUND(
                                                                    CurrExchRate.ExchangeAmtFCYToLCY(
                                                                      "Posting Date","Currency Code",
                                                                      Amount,"Currency Factor"));

                                                                Amount := ROUND(Amount,Currency."Amount Rounding Precision");
                                                                IF (CurrFieldNo <> 0) AND
                                                                   (CurrFieldNo <> FIELDNO("Applies-to Doc. No.")) AND
                                                                   ((("Account Type" = "Account Type"::Customer) AND
                                                                     ("Account No." <> '') AND (Amount > 0) AND
                                                                     (CurrFieldNo <> FIELDNO("Bal. Account No."))) OR
                                                                    (("Bal. Account Type" = "Bal. Account Type"::Customer) AND
                                                                     ("Bal. Account No." <> '') AND (Amount < 0) AND
                                                                     (CurrFieldNo <> FIELDNO("Account No."))))
                                                                THEN
                                                                  CustCheckCreditLimit.GenJnlLineCheck(Rec);

                                                                VALIDATE("VAT %");
                                                                VALIDATE("Bal. VAT %");
                                                                UpdateLineBalance;

                                                                IF ((Rec.Amount <> xRec.Amount))  THEN BEGIN
                                                                  IF ("Applies-to Doc. No." <> '') OR ("Applies-to ID" <> '') THEN
                                                                    SetApplyToAmount;
                                                                  PaymentToleranceMgt.PmtTolGenJnl(Rec);
                                                                END;

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine;
                                                                  UpdatePricesFromJobJnlLine;
                                                                END;

                                                                GetDerogatorySetup;
                                                              END;

                                                   CaptionML=[ENU=Amount;
                                                              FRA=Montant];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 14  ;   ;Debit Amount        ;Decimal       ;OnValidate=BEGIN
                                                                GetCurrency;
                                                                "Debit Amount" := ROUND("Debit Amount",Currency."Amount Rounding Precision");
                                                                Correction := "Debit Amount" < 0;
                                                                Amount := "Debit Amount";
                                                                VALIDATE(Amount);
                                                              END;

                                                   CaptionML=[ENU=Debit Amount;
                                                              FRA=Montant d‚bit];
                                                   BlankZero=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 15  ;   ;Credit Amount       ;Decimal       ;OnValidate=BEGIN
                                                                GetCurrency;
                                                                "Credit Amount" := ROUND("Credit Amount",Currency."Amount Rounding Precision");
                                                                Correction := "Credit Amount" < 0;
                                                                Amount := -"Credit Amount";
                                                                VALIDATE(Amount);
                                                              END;

                                                   CaptionML=[ENU=Credit Amount;
                                                              FRA=Montant cr‚dit];
                                                   BlankZero=Yes;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 16  ;   ;Amount (LCY)        ;Decimal       ;OnValidate=BEGIN
                                                                IF "Currency Code" = '' THEN BEGIN
                                                                  Amount := "Amount (LCY)";
                                                                  VALIDATE(Amount);
                                                                END ELSE BEGIN
                                                                  IF CheckFixedCurrency THEN BEGIN
                                                                    GetCurrency;
                                                                    Amount := ROUND(
                                                                      CurrExchRate.ExchangeAmtLCYToFCY(
                                                                        "Posting Date","Currency Code",
                                                                        "Amount (LCY)","Currency Factor"),
                                                                        Currency."Amount Rounding Precision")
                                                                  END ELSE BEGIN
                                                                    TESTFIELD("Amount (LCY)");
                                                                    TESTFIELD(Amount);
                                                                    "Currency Factor" := Amount / "Amount (LCY)";
                                                                  END;

                                                                  VALIDATE("VAT %");
                                                                  VALIDATE("Bal. VAT %");
                                                                  UpdateLineBalance;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Amount (LCY);
                                                              FRA=Montant DS];
                                                   AutoFormatType=1 }
    { 17  ;   ;Balance (LCY)       ;Decimal       ;CaptionML=[ENU=Balance (LCY);
                                                              FRA=Solde DS];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 18  ;   ;Currency Factor     ;Decimal       ;OnValidate=BEGIN
                                                                IF ("Currency Code" = '') AND ("Currency Factor" <> 0) THEN
                                                                  FIELDERROR("Currency Factor",STRSUBSTNO(Text002,FIELDCAPTION("Currency Code")));
                                                                VALIDATE(Amount);
                                                              END;

                                                   CaptionML=[ENU=Currency Factor;
                                                              FRA=Facteur devise];
                                                   DecimalPlaces=0:15;
                                                   MinValue=0;
                                                   Editable=No }
    { 19  ;   ;Sales/Purch. (LCY)  ;Decimal       ;CaptionML=[ENU=Sales/Purch. (LCY);
                                                              FRA=Ventes/Achats DS];
                                                   AutoFormatType=1 }
    { 20  ;   ;Profit (LCY)        ;Decimal       ;CaptionML=[ENU=Profit (LCY);
                                                              FRA=Marge DS];
                                                   AutoFormatType=1 }
    { 21  ;   ;Inv. Discount (LCY) ;Decimal       ;CaptionML=[ENU=Inv. Discount (LCY);
                                                              FRA=Remise facture DS];
                                                   AutoFormatType=1 }
    { 22  ;   ;Bill-to/Pay-to No.  ;Code20        ;TableRelation=IF (Account Type=CONST(Customer)) Customer
                                                                 ELSE IF (Bal. Account Type=CONST(Customer)) Customer
                                                                 ELSE IF (Account Type=CONST(Vendor)) Vendor
                                                                 ELSE IF (Bal. Account Type=CONST(Vendor)) Vendor;
                                                   OnValidate=BEGIN
                                                                IF Rec."Bill-to/Pay-to No." <> xRec."Bill-to/Pay-to No." THEN
                                                                  "Ship-to/Order Address Code" := '';
                                                                GLSetup.GET;
                                                                IF GLSetup."Bill-to/Sell-to VAT Calc." = GLSetup."Bill-to/Sell-to VAT Calc."::"Bill-to/Pay-to No." THEN
                                                                  UpdateCountryCodeAndVATRegNo("Bill-to/Pay-to No.");
                                                              END;

                                                   CaptionML=[ENU=Bill-to/Pay-to No.;
                                                              FRA=Nø client factur‚/personne … payer] }
    { 23  ;   ;Posting Group       ;Code10        ;TableRelation=IF (Account Type=CONST(Customer)) "Customer Posting Group"
                                                                 ELSE IF (Account Type=CONST(Vendor)) "Vendor Posting Group"
                                                                 ELSE IF (Account Type=CONST(Fixed Asset)) "FA Posting Group";
                                                   CaptionML=[ENU=Posting Group;
                                                              FRA=Groupe comptabilisation];
                                                   Editable=No }
    { 24  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 1 Code;
                                                              FRA=Code raccourci axe 1];
                                                   CaptionClass='1,2,1' }
    { 25  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=[ENU=Shortcut Dimension 2 Code;
                                                              FRA=Code raccourci axe 2];
                                                   CaptionClass='1,2,2' }
    { 26  ;   ;Salespers./Purch. Code;Code10      ;TableRelation=Salesperson/Purchaser;
                                                   OnValidate=BEGIN
                                                                CreateDim(
                                                                  DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
                                                                  DimMgt.TypeToTableID1("Account Type"),"Account No.",
                                                                  DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
                                                                  DATABASE::Job,"Job No.",
                                                                  DATABASE::Campaign,"Campaign No.");
                                                              END;

                                                   CaptionML=[ENU=Salespers./Purch. Code;
                                                              FRA=Code vendeur/acheteur] }
    { 29  ;   ;Source Code         ;Code10        ;TableRelation="Source Code";
                                                   CaptionML=[ENU=Source Code;
                                                              FRA=Code journal];
                                                   Editable=No }
    { 30  ;   ;System-Created Entry;Boolean       ;CaptionML=[ENU=System-Created Entry;
                                                              FRA=Ecriture systŠme];
                                                   Editable=No }
    { 34  ;   ;On Hold             ;Code3         ;CaptionML=[ENU=On Hold;
                                                              FRA=En attente] }
    { 35  ;   ;Applies-to Doc. Type;Option        ;CaptionML=[ENU=Applies-to Doc. Type;
                                                              FRA=Type doc. lettrage];
                                                   OptionCaptionML=[ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                                    FRA=" ,Paiement,Facture,Avoir,Int‚rˆts,Relance,Remboursement"];
                                                   OptionString=[ ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund] }
    { 36  ;   ;Applies-to Doc. No. ;Code20        ;OnValidate=VAR
                                                                CustLedgEntry@1000 : Record 21;
                                                                VendLedgEntry@1003 : Record 25;
                                                                TempGenJnlLine@1001 : TEMPORARY Record 81;
                                                              BEGIN
                                                                IF ("Applies-to Doc. No." = '') AND (xRec."Applies-to Doc. No." <> '') THEN BEGIN
                                                                  PaymentToleranceMgt.DelPmtTolApllnDocNo(Rec,xRec."Applies-to Doc. No.");

                                                                  TempGenJnlLine := Rec;
                                                                  IF (TempGenJnlLine."Bal. Account Type" = TempGenJnlLine."Bal. Account Type"::Customer) OR
                                                                    (TempGenJnlLine."Bal. Account Type" = TempGenJnlLine."Bal. Account Type"::Vendor)
                                                                  THEN
                                                                    CODEUNIT.RUN(CODEUNIT::"Exchange Acc. G/L Journal Line",TempGenJnlLine);

                                                                  IF TempGenJnlLine."Account Type" = TempGenJnlLine."Account Type"::Customer THEN BEGIN
                                                                    CustLedgEntry.SETCURRENTKEY("Document No.");
                                                                    CustLedgEntry.SETRANGE("Document No.",xRec."Applies-to Doc. No.");
                                                                    IF NOT(xRec."Applies-to Doc. Type" = "Document Type"::" ") THEN
                                                                      CustLedgEntry.SETRANGE("Document Type",xRec."Applies-to Doc. Type");
                                                                    CustLedgEntry.SETRANGE("Customer No.",TempGenJnlLine."Account No.");
                                                                    CustLedgEntry.SETRANGE(Open,TRUE);
                                                                    IF CustLedgEntry.FIND('-') THEN BEGIN
                                                                      IF CustLedgEntry."Amount to Apply" <> 0 THEN  BEGIN
                                                                        CustLedgEntry."Amount to Apply" := 0;
                                                                        CODEUNIT.RUN(CODEUNIT::"Cust. Entry-Edit",CustLedgEntry);
                                                                      END;
                                                                    END;
                                                                  END ELSE IF TempGenJnlLine."Account Type" = TempGenJnlLine."Account Type"::Vendor THEN BEGIN
                                                                    VendLedgEntry.SETCURRENTKEY("Document No.");
                                                                    VendLedgEntry.SETRANGE("Document No.",xRec."Applies-to Doc. No.");
                                                                    IF NOT(xRec."Applies-to Doc. Type" = "Document Type"::" ") THEN
                                                                      VendLedgEntry.SETRANGE("Document Type",xRec."Applies-to Doc. Type");
                                                                    VendLedgEntry.SETRANGE("Vendor No.",TempGenJnlLine."Account No.");
                                                                    VendLedgEntry.SETRANGE(Open,TRUE);
                                                                    IF VendLedgEntry.FIND('-') THEN BEGIN
                                                                      IF VendLedgEntry."Amount to Apply" <> 0 THEN  BEGIN
                                                                        VendLedgEntry."Amount to Apply" := 0;
                                                                        CODEUNIT.RUN(CODEUNIT::"Vend. Entry-Edit",VendLedgEntry);
                                                                      END;
                                                                    END;
                                                                  END;

                                                                END;

                                                                IF (("Applies-to Doc. No." <> xRec."Applies-to Doc. No.") AND (Amount <> 0)) THEN BEGIN
                                                                  IF xRec."Applies-to Doc. No." <> '' THEN
                                                                    PaymentToleranceMgt.DelPmtTolApllnDocNo(Rec,xRec."Applies-to Doc. No.");
                                                                  SetApplyToAmount;
                                                                  PaymentToleranceMgt.PmtTolGenJnl(Rec);
                                                                END;

                                                                ValidateApplyRequirements(Rec);

                                                                GetCreditCard;
                                                              END;

                                                   OnLookup=VAR
                                                              GenJnlPostLine@1000 : Codeunit 12;
                                                              PaymentToleranceMgt@1001 : Codeunit 426;
                                                              OldAppliesToDocNo@1002 : Code[20];
                                                            BEGIN
                                                              IF xRec."Line No." = 0 THEN
                                                                xRec.Amount := Amount;

                                                              OldAppliesToDocNo := "Applies-to Doc. No.";
                                                              "Applies-to Doc. No." := '';

                                                              IF "Bal. Account Type" IN
                                                                ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor]
                                                              THEN BEGIN
                                                                AccNo := "Bal. Account No.";
                                                                AccType := "Bal. Account Type";
                                                                CLEAR(CustLedgEntry);
                                                                CLEAR(VendLedgEntry);
                                                              END ELSE BEGIN
                                                                AccNo := "Account No.";
                                                                AccType := "Account Type";
                                                                CLEAR(CustLedgEntry);
                                                                CLEAR(VendLedgEntry);
                                                              END;

                                                              xRec."Currency Code" := "Currency Code";
                                                              xRec."Posting Date" := "Posting Date";

                                                              CASE AccType OF
                                                                AccType::Customer:
                                                                  BEGIN
                                                                    CustLedgEntry.SETCURRENTKEY("Customer No.",Open,Positive,"Due Date");
                                                                    CustLedgEntry.SETRANGE("Customer No.",AccNo);
                                                                    CustLedgEntry.SETRANGE(Open,TRUE);
                                                                    IF "Applies-to Doc. No." <> '' THEN BEGIN
                                                                      CustLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
                                                                      CustLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
                                                                      IF NOT CustLedgEntry.FIND('-') THEN BEGIN
                                                                        CustLedgEntry.SETRANGE("Document Type");
                                                                        CustLedgEntry.SETRANGE("Document No.");
                                                                      END;
                                                                    END;
                                                                    IF "Applies-to ID" <> '' THEN BEGIN
                                                                      CustLedgEntry.SETRANGE("Applies-to ID","Applies-to ID");
                                                                      IF NOT CustLedgEntry.FIND('-') THEN
                                                                        CustLedgEntry.SETRANGE("Applies-to ID");
                                                                    END;
                                                                    IF "Applies-to Doc. Type" <> "Applies-to Doc. Type"::" " THEN BEGIN
                                                                      CustLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
                                                                      IF NOT CustLedgEntry.FIND('-') THEN
                                                                        CustLedgEntry.SETRANGE("Document Type");
                                                                    END;
                                                                    IF  "Applies-to Doc. No." <>''THEN BEGIN
                                                                      CustLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
                                                                      IF NOT CustLedgEntry.FIND('-') THEN
                                                                        CustLedgEntry.SETRANGE("Document No.");
                                                                    END;
                                                                    IF Amount <> 0 THEN BEGIN
                                                                      CustLedgEntry.SETRANGE(Positive,Amount < 0);
                                                                      IF CustLedgEntry.FIND('-') THEN;
                                                                      CustLedgEntry.SETRANGE(Positive);
                                                                    END;
                                                                    ApplyCustEntries.SetGenJnlLine(Rec,GenJnlLine.FIELDNO("Applies-to Doc. No."));
                                                                    ApplyCustEntries.SETTABLEVIEW(CustLedgEntry);
                                                                    ApplyCustEntries.SETRECORD(CustLedgEntry);
                                                                    ApplyCustEntries.LOOKUPMODE(TRUE);
                                                                    IF ApplyCustEntries.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                                                      ApplyCustEntries.GETRECORD(CustLedgEntry);
                                                                      CLEAR(ApplyCustEntries);
                                                                      IF "Currency Code" <> CustLedgEntry."Currency Code" THEN
                                                                        IF Amount = 0 THEN BEGIN
                                                                          FromCurrencyCode := GetShowCurrencyCode("Currency Code");
                                                                          ToCurrencyCode := GetShowCurrencyCode(CustLedgEntry."Currency Code");
                                                                          IF NOT
                                                                             CONFIRM(
                                                                               Text003 +
                                                                               Text004,TRUE,
                                                                               FIELDCAPTION("Currency Code"),TABLECAPTION,FromCurrencyCode,
                                                                               ToCurrencyCode)
                                                                          THEN
                                                                            ERROR(Text005);
                                                                          VALIDATE("Currency Code",CustLedgEntry."Currency Code");
                                                                        END ELSE
                                                                          GenJnlApply.CheckAgainstApplnCurrency(
                                                                            "Currency Code",CustLedgEntry."Currency Code",
                                                                            GenJnlLine."Account Type"::Customer,TRUE);
                                                                      IF Amount = 0 THEN BEGIN
                                                                        CustLedgEntry.CALCFIELDS("Remaining Amount");
                                                                        IF CustLedgEntry."Amount to Apply" <> 0 THEN BEGIN
                                                                          IF GenJnlPostLine.CheckCalcPmtDiscGenJnlCust(Rec,CustLedgEntry,0,FALSE)
                                                                          THEN BEGIN
                                                                            IF ABS(CustLedgEntry."Amount to Apply") >=
                                                                              ABS(CustLedgEntry."Remaining Amount" - CustLedgEntry."Remaining Pmt. Disc. Possible")
                                                                            THEN
                                                                              Amount := -(CustLedgEntry."Remaining Amount" -
                                                                                CustLedgEntry."Remaining Pmt. Disc. Possible")
                                                                            ELSE
                                                                              Amount := -CustLedgEntry."Amount to Apply";
                                                                          END ELSE
                                                                            Amount := -CustLedgEntry."Amount to Apply";
                                                                        END ELSE BEGIN
                                                                        IF GenJnlPostLine.CheckCalcPmtDiscGenJnlCust(Rec,CustLedgEntry,0,FALSE)
                                                                        THEN
                                                                          Amount := -(CustLedgEntry."Remaining Amount" -
                                                                            CustLedgEntry."Remaining Pmt. Disc. Possible")
                                                                        ELSE
                                                                          Amount := -CustLedgEntry."Remaining Amount";
                                                                        END;
                                                                        IF "Bal. Account Type" IN
                                                                          ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor]
                                                                        THEN
                                                                          Amount := -Amount;
                                                                        VALIDATE(Amount);
                                                                      END;
                                                                      "Applies-to Doc. Type" := CustLedgEntry."Document Type";
                                                                      "Applies-to Doc. No." := CustLedgEntry."Document No.";
                                                                      "Applies-to ID" := '';
                                                                    END ELSE BEGIN
                                                                      "Applies-to Doc. No." := OldAppliesToDocNo;
                                                                      CLEAR(ApplyCustEntries);
                                                                    END;

                                                                    GetCreditCard;
                                                                  END;
                                                                AccType::Vendor:
                                                                  BEGIN
                                                                    VendLedgEntry.SETCURRENTKEY("Vendor No.",Open,Positive,"Due Date");
                                                                    VendLedgEntry.SETRANGE("Vendor No.",AccNo);
                                                                    VendLedgEntry.SETRANGE(Open,TRUE);
                                                                    IF "Applies-to Doc. No." <> '' THEN BEGIN
                                                                      VendLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
                                                                      VendLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
                                                                      IF NOT VendLedgEntry.FIND('-') THEN BEGIN
                                                                        VendLedgEntry.SETRANGE("Document Type");
                                                                        VendLedgEntry.SETRANGE("Document No.");
                                                                      END;
                                                                    END;
                                                                    IF "Applies-to ID" <> '' THEN BEGIN
                                                                      VendLedgEntry.SETRANGE("Applies-to ID","Applies-to ID");
                                                                      IF NOT VendLedgEntry.FIND('-') THEN
                                                                        VendLedgEntry.SETRANGE("Applies-to ID");
                                                                    END;
                                                                    IF "Applies-to Doc. Type" <> "Applies-to Doc. Type"::" " THEN BEGIN
                                                                      VendLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
                                                                      IF NOT VendLedgEntry.FIND('-') THEN
                                                                        VendLedgEntry.SETRANGE("Document Type");
                                                                    END;
                                                                    IF  "Applies-to Doc. No." <>''THEN BEGIN
                                                                      VendLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
                                                                      IF NOT VendLedgEntry.FIND('-') THEN
                                                                        VendLedgEntry.SETRANGE("Document No.");
                                                                    END;
                                                                    IF Amount <> 0 THEN BEGIN
                                                                      VendLedgEntry.SETRANGE(Positive,Amount < 0);
                                                                      IF VendLedgEntry.FIND('-') THEN;
                                                                      VendLedgEntry.SETRANGE(Positive);
                                                                    END;
                                                                    ApplyVendEntries.SetGenJnlLine(Rec,GenJnlLine.FIELDNO("Applies-to Doc. No."));
                                                                    ApplyVendEntries.SETTABLEVIEW(VendLedgEntry);
                                                                    ApplyVendEntries.SETRECORD(VendLedgEntry);
                                                                    ApplyVendEntries.LOOKUPMODE(TRUE);
                                                                    IF ApplyVendEntries.RUNMODAL = ACTION::LookupOK THEN BEGIN
                                                                      ApplyVendEntries.GETRECORD(VendLedgEntry);
                                                                      CLEAR(ApplyVendEntries);
                                                                      IF "Currency Code" <> VendLedgEntry."Currency Code" THEN
                                                                        IF Amount = 0 THEN BEGIN
                                                                          FromCurrencyCode := GetShowCurrencyCode("Currency Code");
                                                                          ToCurrencyCode := GetShowCurrencyCode(VendLedgEntry."Currency Code");
                                                                          IF NOT
                                                                             CONFIRM(
                                                                               Text003 +
                                                                               Text004,TRUE,
                                                                               FIELDCAPTION("Currency Code"),TABLECAPTION,FromCurrencyCode,
                                                                               ToCurrencyCode)
                                                                          THEN
                                                                            ERROR(Text005);
                                                                          VALIDATE("Currency Code",VendLedgEntry."Currency Code");
                                                                        END ELSE
                                                                          GenJnlApply.CheckAgainstApplnCurrency(
                                                                            "Currency Code",VendLedgEntry."Currency Code",GenJnlLine."Account Type"::Vendor,TRUE);
                                                                      IF Amount = 0 THEN BEGIN
                                                                        VendLedgEntry.CALCFIELDS("Remaining Amount");
                                                                        IF VendLedgEntry."Amount to Apply" <> 0 THEN BEGIN
                                                                          IF GenJnlPostLine.CheckCalcPmtDiscGenJnlVend(Rec,VendLedgEntry,0,FALSE)
                                                                          THEN BEGIN
                                                                            IF ABS(VendLedgEntry."Amount to Apply") >=
                                                                              ABS(VendLedgEntry."Remaining Amount" - VendLedgEntry."Remaining Pmt. Disc. Possible")
                                                                            THEN
                                                                              Amount := -(VendLedgEntry."Remaining Amount" -
                                                                                VendLedgEntry."Remaining Pmt. Disc. Possible")
                                                                            ELSE
                                                                              Amount := -VendLedgEntry."Amount to Apply";
                                                                          END ELSE
                                                                            Amount := -VendLedgEntry."Amount to Apply";
                                                                        END ELSE BEGIN
                                                                        IF GenJnlPostLine.CheckCalcPmtDiscGenJnlVend(Rec,VendLedgEntry,0,FALSE)
                                                                        THEN
                                                                          Amount := -(VendLedgEntry."Remaining Amount" -
                                                                            VendLedgEntry."Remaining Pmt. Disc. Possible")
                                                                        ELSE
                                                                          Amount := -VendLedgEntry."Remaining Amount";
                                                                        END;
                                                                        IF "Bal. Account Type" IN
                                                                          ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor]
                                                                        THEN
                                                                          Amount := -Amount;
                                                                        VALIDATE(Amount);
                                                                      END;
                                                                      "Applies-to Doc. Type" := VendLedgEntry."Document Type";
                                                                      "Applies-to Doc. No." := VendLedgEntry."Document No.";
                                                                      "Applies-to ID" := '';
                                                                    END ELSE BEGIN
                                                                      "Applies-to Doc. No." := OldAppliesToDocNo;
                                                                      CLEAR(ApplyVendEntries);
                                                                    END;
                                                                  END;
                                                                ELSE
                                                                  "Applies-to Doc. No." := OldAppliesToDocNo;
                                                              END;

                                                              IF (xRec.Amount <> 0) THEN
                                                                IF NOT PaymentToleranceMgt.PmtTolGenJnl(Rec) THEN
                                                                  EXIT;
                                                            END;

                                                   CaptionML=[ENU=Applies-to Doc. No.;
                                                              FRA=Nø doc. lettrage] }
    { 38  ;   ;Due Date            ;Date          ;OnValidate=BEGIN
                                                                InitDescription(); // ISA03.ISAT.MA
                                                              END;

                                                   CaptionML=[ENU=Due Date;
                                                              FRA=Date d'‚ch‚ance] }
    { 39  ;   ;Pmt. Discount Date  ;Date          ;CaptionML=[ENU=Pmt. Discount Date;
                                                              FRA=Date d'escompte] }
    { 40  ;   ;Payment Discount %  ;Decimal       ;CaptionML=[ENU=Payment Discount %;
                                                              FRA=% escompte];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 42  ;   ;Job No.             ;Code20        ;TableRelation=Job;
                                                   OnValidate=BEGIN
                                                                IF ("Job No." = xRec."Job No.") THEN
                                                                  EXIT;

                                                                SourceCodeSetup.GET;
                                                                IF "Source Code" <> SourceCodeSetup."Job G/L WIP" THEN
                                                                  VALIDATE("Job Task No.",'');
                                                                IF "Job No." = '' THEN BEGIN
                                                                  CreateDim(
                                                                    DATABASE::Job,"Job No.",
                                                                    DimMgt.TypeToTableID1("Account Type"),"Account No.",
                                                                    DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
                                                                    DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
                                                                    DATABASE::Campaign,"Campaign No.");
                                                                  EXIT;
                                                                END;

                                                                TESTFIELD("Account Type","Account Type"::"G/L Account");
                                                                IF "Bal. Account No." <> '' THEN
                                                                  TESTFIELD("Bal. Account Type","Bal. Account Type"::"G/L Account");
                                                                Job.GET("Job No.");
                                                                Job.TestBlocked;
                                                                "Job Currency Code" := Job."Currency Code";

                                                                CreateDim(
                                                                  DATABASE::Job,"Job No.",
                                                                  DimMgt.TypeToTableID1("Account Type"),"Account No.",
                                                                  DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
                                                                  DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
                                                                  DATABASE::Campaign,"Campaign No.");
                                                              END;

                                                   CaptionML=[ENU=Job No.;
                                                              FRA=Nø projet] }
    { 43  ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE(Amount);
                                                              END;

                                                   CaptionML=[ENU=Quantity;
                                                              FRA=Quantit‚];
                                                   DecimalPlaces=0:5 }
    { 44  ;   ;VAT Amount          ;Decimal       ;OnValidate=BEGIN
                                                                GenJnlBatch.GET("Journal Template Name","Journal Batch Name");
                                                                GenJnlBatch.TESTFIELD("Allow VAT Difference",TRUE);
                                                                IF NOT ("VAT Calculation Type" IN
                                                                  ["VAT Calculation Type"::"Normal VAT","VAT Calculation Type"::"Reverse Charge VAT"])
                                                                THEN
                                                                  ERROR(
                                                                    Text010,FIELDCAPTION("VAT Calculation Type"),
                                                                    "VAT Calculation Type"::"Normal VAT","VAT Calculation Type"::"Reverse Charge VAT");
                                                                IF "VAT Amount" <> 0 THEN BEGIN
                                                                  TESTFIELD("VAT %");
                                                                  TESTFIELD(Amount);
                                                                END;

                                                                GetCurrency;
                                                                "VAT Amount" := ROUND("VAT Amount",Currency."Amount Rounding Precision",Currency.VATRoundingDirection);

                                                                IF "VAT Amount" * Amount < 0 THEN
                                                                  IF "VAT Amount" > 0 THEN
                                                                    ERROR(Text011,FIELDCAPTION("VAT Amount"))
                                                                  ELSE
                                                                    ERROR(Text012,FIELDCAPTION("VAT Amount"));

                                                                "VAT Base Amount" := Amount - "VAT Amount";

                                                                "VAT Difference" :=
                                                                  "VAT Amount" -
                                                                  ROUND(
                                                                    Amount * "VAT %" / (100 + "VAT %"),
                                                                    Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                                                                IF ABS("VAT Difference") > Currency."Max. VAT Difference Allowed" THEN
                                                                  ERROR(Text013,FIELDCAPTION("VAT Difference"),Currency."Max. VAT Difference Allowed");

                                                                IF "Currency Code" = '' THEN
                                                                  "VAT Amount (LCY)" := "VAT Amount"
                                                                ELSE
                                                                  "VAT Amount (LCY)" :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                                                        "Posting Date","Currency Code",
                                                                        "VAT Amount","Currency Factor"));
                                                                "VAT Base Amount (LCY)" := "Amount (LCY)" - "VAT Amount (LCY)";

                                                                UpdateSalesPurchLCY;
                                                              END;

                                                   CaptionML=[ENU=VAT Amount;
                                                              FRA=Montant TVA];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 45  ;   ;VAT Posting         ;Option        ;CaptionML=[ENU=VAT Posting;
                                                              FRA=Comptabilisation TVA];
                                                   OptionCaptionML=[ENU=Automatic VAT Entry,Manual VAT Entry;
                                                                    FRA=Automatique,Manuel];
                                                   OptionString=Automatic VAT Entry,Manual VAT Entry;
                                                   Editable=No }
    { 47  ;   ;Payment Terms Code  ;Code10        ;TableRelation="Payment Terms";
                                                   OnValidate=BEGIN
                                                                "Due Date" := 0D;
                                                                "Pmt. Discount Date" := 0D;
                                                                "Payment Discount %" := 0;
                                                                IF ("Account Type" <> "Account Type"::"G/L Account") OR
                                                                   ("Bal. Account Type" <> "Bal. Account Type"::"G/L Account")
                                                                THEN
                                                                  CASE "Document Type" OF
                                                                    "Document Type"::Invoice:
                                                                      IF ("Payment Terms Code" <> '') AND ("Document Date" <> 0D) THEN BEGIN
                                                                        PaymentTerms.GET("Payment Terms Code");
                                                                        "Due Date" := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
                                                                        "Pmt. Discount Date" := CALCDATE(PaymentTerms."Discount Date Calculation","Document Date");
                                                                        "Payment Discount %" := PaymentTerms."Discount %";
                                                                      END;
                                                                    "Document Type"::"Credit Memo":
                                                                      IF ("Payment Terms Code" <> '') AND ("Document Date" <> 0D) THEN BEGIN
                                                                        PaymentTerms.GET("Payment Terms Code");
                                                                        IF PaymentTerms."Calc. Pmt. Disc. on Cr. Memos" THEN BEGIN
                                                                          "Due Date" := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
                                                                          "Pmt. Discount Date" :=
                                                                            CALCDATE(PaymentTerms."Discount Date Calculation","Document Date");
                                                                          "Payment Discount %" := PaymentTerms."Discount %";
                                                                        END ELSE
                                                                          "Due Date" := "Document Date";
                                                                      END;
                                                                    ELSE
                                                                      "Due Date" := "Document Date";
                                                                  END;
                                                              END;

                                                   CaptionML=[ENU=Payment Terms Code;
                                                              FRA=Code condition paiement] }
    { 48  ;   ;Applies-to ID       ;Code20        ;OnValidate=BEGIN
                                                                IF ("Applies-to ID" <> xRec."Applies-to ID") AND (xRec."Applies-to ID" <> '') THEN
                                                                  ClearCustVendApplnEntry;
                                                              END;

                                                   CaptionML=[ENU=Applies-to ID;
                                                              FRA=ID lettrage] }
    { 50  ;   ;Business Unit Code  ;Code10        ;TableRelation="Business Unit";
                                                   CaptionML=[ENU=Business Unit Code;
                                                              FRA=Code centre de profit] }
    { 51  ;   ;Journal Batch Name  ;Code10        ;TableRelation="Gen. Journal Batch".Name WHERE (Journal Template Name=FIELD(Journal Template Name));
                                                   CaptionML=[ENU=Journal Batch Name;
                                                              FRA=Nom feuille] }
    { 52  ;   ;Reason Code         ;Code10        ;TableRelation="Reason Code";
                                                   CaptionML=[ENU=Reason Code;
                                                              FRA=Code motif] }
    { 53  ;   ;Recurring Method    ;Option        ;OnValidate=BEGIN
                                                                IF "Recurring Method" IN
                                                                   ["Recurring Method"::"B  Balance","Recurring Method"::"RB Reversing Balance"]
                                                                THEN
                                                                  TESTFIELD("Currency Code",'');
                                                              END;

                                                   CaptionML=[ENU=Recurring Method;
                                                              FRA=Mode abonnement];
                                                   OptionCaptionML=[ENU=" ,F  Fixed,V  Variable,B  Balance,RF Reversing Fixed,RV Reversing Variable,RB Reversing Balance";
                                                                    FRA=" ,F Fixe,V Variable,S Solde,FI Fixe inverse,VI Variable inverse,SI Solde inverse"];
                                                   OptionString=[ ,F  Fixed,V  Variable,B  Balance,RF Reversing Fixed,RV Reversing Variable,RB Reversing Balance];
                                                   BlankZero=Yes }
    { 54  ;   ;Expiration Date     ;Date          ;CaptionML=[ENU=Expiration Date;
                                                              FRA=Date d'expiration] }
    { 55  ;   ;Recurring Frequency ;DateFormula   ;CaptionML=[ENU=Recurring Frequency;
                                                              FRA=P‚riodicit‚ abonnement] }
    { 56  ;   ;Allocated Amt. (LCY);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Gen. Jnl. Allocation".Amount WHERE (Journal Template Name=FIELD(Journal Template Name),
                                                                                                        Journal Batch Name=FIELD(Journal Batch Name),
                                                                                                        Journal Line No.=FIELD(Line No.)));
                                                   CaptionML=[ENU=Allocated Amt. (LCY);
                                                              FRA=Montant imput‚ DS];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 57  ;   ;Gen. Posting Type   ;Option        ;OnValidate=BEGIN
                                                                IF "Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Bank Account"] THEN
                                                                  TESTFIELD("Gen. Posting Type","Gen. Posting Type"::" ");
                                                                IF ("Gen. Posting Type" = "Gen. Posting Type"::Settlement) AND (CurrFieldNo <> 0) THEN
                                                                  ERROR(Text006,"Gen. Posting Type");
                                                                CheckVATInAlloc;
                                                                IF "Gen. Posting Type" > 0 THEN
                                                                  VALIDATE("VAT Prod. Posting Group");
                                                              END;

                                                   CaptionML=[ENU=Gen. Posting Type;
                                                              FRA=Type compta. TVA];
                                                   OptionCaptionML=[ENU=" ,Purchase,Sale,Settlement";
                                                                    FRA=" ,Achat,Vente,RŠglement"];
                                                   OptionString=[ ,Purchase,Sale,Settlement] }
    { 58  ;   ;Gen. Bus. Posting Group;Code10     ;TableRelation="Gen. Business Posting Group";
                                                   OnValidate=BEGIN
                                                                IF "Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Bank Account"] THEN
                                                                  TESTFIELD("Gen. Bus. Posting Group",'');
                                                                IF xRec."Gen. Bus. Posting Group" <> "Gen. Bus. Posting Group" THEN
                                                                  IF GenBusPostingGrp.ValidateVatBusPostingGroup(GenBusPostingGrp,"Gen. Bus. Posting Group") THEN
                                                                    VALIDATE("VAT Bus. Posting Group",GenBusPostingGrp."Def. VAT Bus. Posting Group");
                                                              END;

                                                   CaptionML=[ENU=Gen. Bus. Posting Group;
                                                              FRA=Groupe compta. march‚] }
    { 59  ;   ;Gen. Prod. Posting Group;Code10    ;TableRelation="Gen. Product Posting Group";
                                                   OnValidate=BEGIN
                                                                IF "Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Bank Account"] THEN
                                                                  TESTFIELD("Gen. Prod. Posting Group",'');
                                                                IF xRec."Gen. Prod. Posting Group" <> "Gen. Prod. Posting Group" THEN
                                                                  IF GenProdPostingGrp.ValidateVatProdPostingGroup(GenProdPostingGrp,"Gen. Prod. Posting Group") THEN
                                                                    VALIDATE("VAT Prod. Posting Group",GenProdPostingGrp."Def. VAT Prod. Posting Group");
                                                              END;

                                                   CaptionML=[ENU=Gen. Prod. Posting Group;
                                                              FRA=Groupe compta. produit] }
    { 60  ;   ;VAT Calculation Type;Option        ;CaptionML=[ENU=VAT Calculation Type;
                                                              FRA=Mode calcul TVA];
                                                   OptionCaptionML=[ENU=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                                    FRA=Normal,Intracomm.,Correctif,Sales Tax];
                                                   OptionString=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                   Editable=No }
    { 61  ;   ;EU 3-Party Trade    ;Boolean       ;CaptionML=[ENU=EU 3-Party Trade;
                                                              FRA=Trans. tripartite UE];
                                                   Editable=No }
    { 62  ;   ;Allow Application   ;Boolean       ;InitValue=Yes;
                                                   CaptionML=[ENU=Allow Application;
                                                              FRA=Lettrable] }
    { 63  ;   ;Bal. Account Type   ;Option        ;OnValidate=BEGIN
                                                                IF ("Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Fixed Asset",
                                                                    "Account Type"::"IC Partner"]) AND
                                                                   ("Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::"Fixed Asset",
                                                                    "Bal. Account Type"::"IC Partner"])
                                                                THEN
                                                                  ERROR(
                                                                    Text000,
                                                                    FIELDCAPTION("Account Type"),FIELDCAPTION("Bal. Account Type"));
                                                                VALIDATE("Bal. Account No.",'');
                                                                VALIDATE("IC Partner G/L Acc. No.",'');
                                                                IF "Bal. Account Type" IN
                                                                   ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::"Bank Account"]
                                                                THEN BEGIN
                                                                  VALIDATE("Bal. Gen. Posting Type","Bal. Gen. Posting Type"::" ");
                                                                  VALIDATE("Bal. Gen. Bus. Posting Group",'');
                                                                  VALIDATE("Bal. Gen. Prod. Posting Group",'');
                                                                END ELSE
                                                                  IF "Account Type" IN [
                                                                     "Bal. Account Type"::"G/L Account","Account Type"::"Bank Account","Account Type"::"Fixed Asset"]
                                                                  THEN
                                                                    VALIDATE("Payment Terms Code",'');
                                                                UpdateSource;
                                                                IF ("Account Type" <> "Account Type"::"Fixed Asset") AND
                                                                   ("Bal. Account Type" <> "Bal. Account Type"::"Fixed Asset")
                                                                THEN BEGIN
                                                                  "Depreciation Book Code" := '';
                                                                  VALIDATE("FA Posting Type","FA Posting Type"::" ");
                                                                END;
                                                                IF xRec."Bal. Account Type" IN
                                                                   [xRec."Bal. Account Type"::Customer,xRec."Bal. Account Type"::Vendor]
                                                                THEN BEGIN
                                                                  "Bill-to/Pay-to No." := '';
                                                                  "Ship-to/Order Address Code" := '';
                                                                  "Sell-to/Buy-from No." := '';
                                                                END;
                                                                IF ("Account Type" IN [
                                                                    "Account Type"::"G/L Account","Account Type"::"Bank Account","Account Type"::"Fixed Asset"]) AND
                                                                  ("Bal. Account Type" IN [
                                                                    "Bal. Account Type"::"G/L Account","Bal. Account Type"::"Bank Account","Bal. Account Type"::"Fixed Asset"])
                                                                THEN BEGIN
                                                                  VALIDATE("Payment Terms Code",'');
                                                                END;

                                                                IF ("Bal. Account Type" = "Bal. Account Type"::"IC Partner") THEN BEGIN
                                                                  GetTemplate;
                                                                  IF GenJnlTemplate.Type <> GenJnlTemplate.Type::Intercompany THEN
                                                                    FIELDERROR("Bal. Account Type");
                                                                END;
                                                                IF "Bal. Account Type" <> "Bal. Account Type"::"Bank Account" THEN
                                                                  VALIDATE("Credit Card No.",'');
                                                              END;

                                                   CaptionML=[ENU=Bal. Account Type;
                                                              FRA=Type compte contrepartie];
                                                   OptionCaptionML=[ENU=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner;
                                                                    FRA=G‚n‚ral,Client,Fournisseur,Banque,Immobilisation,Partenaire IC];
                                                   OptionString=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner }
    { 64  ;   ;Bal. Gen. Posting Type;Option      ;OnValidate=BEGIN
                                                                IF "Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::"Bank Account"] THEN
                                                                  TESTFIELD("Bal. Gen. Posting Type","Bal. Gen. Posting Type"::" ");
                                                                IF ("Bal. Gen. Posting Type" = "Gen. Posting Type"::Settlement) AND (CurrFieldNo <> 0) THEN
                                                                  ERROR(Text006,"Bal. Gen. Posting Type");
                                                                IF "Bal. Gen. Posting Type" > 0 THEN
                                                                  VALIDATE("Bal. VAT Prod. Posting Group");

                                                                IF ("Account Type" <> "Account Type"::"Fixed Asset") AND
                                                                   ("Bal. Account Type" <> "Bal. Account Type"::"Fixed Asset")
                                                                THEN BEGIN
                                                                  "Depreciation Book Code" := '';
                                                                  VALIDATE("FA Posting Type","FA Posting Type"::" ");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Bal. Gen. Posting Type;
                                                              FRA=Type compta. contrepartie];
                                                   OptionCaptionML=[ENU=" ,Purchase,Sale,Settlement";
                                                                    FRA=" ,Achat,Vente,RŠglement"];
                                                   OptionString=[ ,Purchase,Sale,Settlement] }
    { 65  ;   ;Bal. Gen. Bus. Posting Group;Code10;TableRelation="Gen. Business Posting Group";
                                                   OnValidate=BEGIN
                                                                IF "Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::"Bank Account"] THEN
                                                                  TESTFIELD("Bal. Gen. Bus. Posting Group",'');
                                                                IF xRec."Bal. Gen. Bus. Posting Group" <> "Bal. Gen. Bus. Posting Group" THEN
                                                                  IF GenBusPostingGrp.ValidateVatBusPostingGroup(GenBusPostingGrp,"Bal. Gen. Bus. Posting Group") THEN
                                                                    VALIDATE("Bal. VAT Bus. Posting Group",GenBusPostingGrp."Def. VAT Bus. Posting Group");
                                                              END;

                                                   CaptionML=[ENU=Bal. Gen. Bus. Posting Group;
                                                              FRA=Groupe compta. march‚ contr.] }
    { 66  ;   ;Bal. Gen. Prod. Posting Group;Code10;
                                                   TableRelation="Gen. Product Posting Group";
                                                   OnValidate=BEGIN
                                                                IF "Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::"Bank Account"] THEN
                                                                  TESTFIELD("Bal. Gen. Prod. Posting Group",'');
                                                                IF xRec."Bal. Gen. Prod. Posting Group" <> "Bal. Gen. Prod. Posting Group" THEN
                                                                  IF GenProdPostingGrp.ValidateVatProdPostingGroup(GenProdPostingGrp,"Bal. Gen. Prod. Posting Group") THEN
                                                                    VALIDATE("Bal. VAT Prod. Posting Group",GenProdPostingGrp."Def. VAT Prod. Posting Group");
                                                              END;

                                                   CaptionML=[ENU=Bal. Gen. Prod. Posting Group;
                                                              FRA=Groupe compta. produit contr.] }
    { 67  ;   ;Bal. VAT Calculation Type;Option   ;CaptionML=[ENU=Bal. VAT Calculation Type;
                                                              FRA=Mode calcul TVA contrepartie];
                                                   OptionCaptionML=[ENU=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                                    FRA=Normal,Intracomm.,Correctif,Sales Tax];
                                                   OptionString=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                   Editable=No }
    { 68  ;   ;Bal. VAT %          ;Decimal       ;OnValidate=BEGIN
                                                                GetCurrency;
                                                                CASE "Bal. VAT Calculation Type" OF
                                                                  "Bal. VAT Calculation Type"::"Normal VAT",
                                                                  "Bal. VAT Calculation Type"::"Reverse Charge VAT":
                                                                    BEGIN
                                                                      "Bal. VAT Amount" :=
                                                                        ROUND(-Amount * "Bal. VAT %" / (100 + "Bal. VAT %"),Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                                                                      "Bal. VAT Base Amount" :=
                                                                        ROUND(-Amount - "Bal. VAT Amount",Currency."Amount Rounding Precision");
                                                                    END;
                                                                  "Bal. VAT Calculation Type"::"Full VAT":
                                                                    "Bal. VAT Amount" := -Amount;
                                                                  "Bal. VAT Calculation Type"::"Sales Tax":
                                                                    IF ("Bal. Gen. Posting Type" = "Bal. Gen. Posting Type"::Purchase) AND
                                                                       "Bal. Use Tax"
                                                                    THEN BEGIN
                                                                      "Bal. VAT Amount" := 0;
                                                                      "Bal. VAT %" := 0;
                                                                    END ELSE BEGIN
                                                                      "Bal. VAT Amount" :=
                                                                        -(Amount -
                                                                          SalesTaxCalculate.ReverseCalculateTax(
                                                                            "Bal. Tax Area Code","Bal. Tax Group Code","Bal. Tax Liable",
                                                                            "Posting Date",Amount,Quantity,"Currency Factor"));
                                                                      IF Amount + "Bal. VAT Amount" <> 0 THEN
                                                                        "Bal. VAT %" := ROUND(100 * (-"Bal. VAT Amount") / (Amount + "Bal. VAT Amount"),0.00001)
                                                                      ELSE
                                                                        "Bal. VAT %" := 0;
                                                                      "Bal. VAT Amount" :=
                                                                        ROUND("Bal. VAT Amount",Currency."Amount Rounding Precision");
                                                                    END;
                                                                END;
                                                                "Bal. VAT Base Amount" := -(Amount + "Bal. VAT Amount");
                                                                "Bal. VAT Difference" := 0;

                                                                IF "Currency Code" = '' THEN
                                                                  "Bal. VAT Amount (LCY)" := "Bal. VAT Amount"
                                                                ELSE
                                                                  "Bal. VAT Amount (LCY)" :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                                                      "Posting Date","Currency Code",
                                                                      "Bal. VAT Amount","Currency Factor"));
                                                                "Bal. VAT Base Amount (LCY)" := -("Amount (LCY)" + "Bal. VAT Amount (LCY)");

                                                                UpdateSalesPurchLCY;
                                                              END;

                                                   CaptionML=[ENU=Bal. VAT %;
                                                              FRA=% TVA contrepartie];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100;
                                                   Editable=No }
    { 69  ;   ;Bal. VAT Amount     ;Decimal       ;OnValidate=BEGIN
                                                                GenJnlBatch.GET("Journal Template Name","Journal Batch Name");
                                                                GenJnlBatch.TESTFIELD("Allow VAT Difference",TRUE);
                                                                IF NOT ("Bal. VAT Calculation Type" IN
                                                                  ["Bal. VAT Calculation Type"::"Normal VAT","Bal. VAT Calculation Type"::"Reverse Charge VAT"])
                                                                THEN
                                                                  ERROR(
                                                                    Text010,FIELDCAPTION("Bal. VAT Calculation Type"),
                                                                    "Bal. VAT Calculation Type"::"Normal VAT","Bal. VAT Calculation Type"::"Reverse Charge VAT");
                                                                IF "Bal. VAT Amount" <> 0 THEN BEGIN
                                                                  TESTFIELD("Bal. VAT %");
                                                                  TESTFIELD(Amount);
                                                                END;

                                                                GetCurrency;
                                                                "Bal. VAT Amount" :=
                                                                  ROUND("Bal. VAT Amount",Currency."Amount Rounding Precision",Currency.VATRoundingDirection);

                                                                IF "Bal. VAT Amount" * Amount > 0 THEN
                                                                  IF "Bal. VAT Amount" > 0 THEN
                                                                    ERROR(Text011,FIELDCAPTION("Bal. VAT Amount"))
                                                                  ELSE
                                                                    ERROR(Text012,FIELDCAPTION("Bal. VAT Amount"));

                                                                "Bal. VAT Base Amount" := -(Amount + "Bal. VAT Amount");

                                                                "Bal. VAT Difference" :=
                                                                  "Bal. VAT Amount" -
                                                                  ROUND(
                                                                    -Amount * "Bal. VAT %" / (100 + "Bal. VAT %"),
                                                                    Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                                                                IF ABS("Bal. VAT Difference") > Currency."Max. VAT Difference Allowed" THEN
                                                                  ERROR(
                                                                    Text013,FIELDCAPTION("Bal. VAT Difference"),Currency."Max. VAT Difference Allowed");

                                                                IF "Currency Code" = '' THEN
                                                                  "Bal. VAT Amount (LCY)" := "Bal. VAT Amount"
                                                                ELSE
                                                                  "Bal. VAT Amount (LCY)" :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                                                      "Posting Date","Currency Code",
                                                                      "Bal. VAT Amount","Currency Factor"));
                                                                "Bal. VAT Base Amount (LCY)" := -("Amount (LCY)" + "Bal. VAT Amount (LCY)");

                                                                UpdateSalesPurchLCY;
                                                              END;

                                                   CaptionML=[ENU=Bal. VAT Amount;
                                                              FRA=Montant TVA contrepartie];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 70  ;   ;Bank Payment Type   ;Option        ;OnValidate=BEGIN
                                                                IF ("Bank Payment Type" <> "Bank Payment Type"::" ") AND
                                                                   ("Account Type" <> "Account Type"::"Bank Account") AND
                                                                   ("Bal. Account Type" <> "Bal. Account Type"::"Bank Account")
                                                                THEN
                                                                  ERROR(
                                                                    Text007,
                                                                    FIELDCAPTION("Account Type"),FIELDCAPTION("Bal. Account Type"));
                                                                IF ("Account Type" = "Account Type"::"Fixed Asset") AND
                                                                   ("Bank Payment Type" <> "Bank Payment Type"::" ")
                                                                THEN
                                                                  FIELDERROR("Account Type");
                                                              END;

                                                   CaptionML=[ENU=Bank Payment Type;
                                                              FRA=Mode ‚mission paiement];
                                                   OptionCaptionML=[ENU=" ,Computer Check,Manual Check";
                                                                    FRA=" ,Informatique,Manuel"];
                                                   OptionString=[ ,Computer Check,Manual Check] }
    { 71  ;   ;VAT Base Amount     ;Decimal       ;OnValidate=BEGIN
                                                                GetCurrency;
                                                                "VAT Base Amount" := ROUND("VAT Base Amount",Currency."Amount Rounding Precision");
                                                                CASE "VAT Calculation Type" OF
                                                                  "VAT Calculation Type"::"Normal VAT",
                                                                  "VAT Calculation Type"::"Reverse Charge VAT":
                                                                    Amount :=
                                                                      ROUND(
                                                                        "VAT Base Amount" * (1 + "VAT %" / 100),
                                                                        Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                                                                  "VAT Calculation Type"::"Full VAT":
                                                                    IF "VAT Base Amount" <> 0 THEN
                                                                      FIELDERROR(
                                                                        "VAT Base Amount",
                                                                        STRSUBSTNO(
                                                                          Text008,FIELDCAPTION("VAT Calculation Type"),
                                                                          "VAT Calculation Type"));
                                                                  "VAT Calculation Type"::"Sales Tax":
                                                                    IF ("Gen. Posting Type" = "Gen. Posting Type"::Purchase) AND
                                                                       "Use Tax"
                                                                    THEN BEGIN
                                                                      "VAT Amount" := 0;
                                                                      "VAT %" := 0;
                                                                      Amount := "VAT Base Amount" + "VAT Amount";
                                                                    END ELSE BEGIN
                                                                      "VAT Amount" :=
                                                                        SalesTaxCalculate.CalculateTax(
                                                                          "Tax Area Code","Tax Group Code","Tax Liable","Posting Date",
                                                                          "VAT Base Amount",Quantity,"Currency Factor");
                                                                      IF "VAT Base Amount" <> 0 THEN
                                                                        "VAT %" := ROUND(100 * "VAT Amount" / "VAT Base Amount",0.00001)
                                                                      ELSE
                                                                        "VAT %" := 0;
                                                                      "VAT Amount" :=
                                                                        ROUND("VAT Amount",Currency."Amount Rounding Precision");
                                                                      Amount := "VAT Base Amount" + "VAT Amount";
                                                                    END;
                                                                END;
                                                                VALIDATE(Amount);
                                                              END;

                                                   CaptionML=[ENU=VAT Base Amount;
                                                              FRA=Montant base TVA];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 72  ;   ;Bal. VAT Base Amount;Decimal       ;OnValidate=BEGIN
                                                                GetCurrency;
                                                                "Bal. VAT Base Amount" := ROUND("Bal. VAT Base Amount",Currency."Amount Rounding Precision");
                                                                CASE "Bal. VAT Calculation Type" OF
                                                                  "Bal. VAT Calculation Type"::"Normal VAT",
                                                                  "Bal. VAT Calculation Type"::"Reverse Charge VAT":
                                                                    Amount :=
                                                                      ROUND(
                                                                        -"Bal. VAT Base Amount" * (1 + "Bal. VAT %" / 100),
                                                                        Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                                                                  "Bal. VAT Calculation Type"::"Full VAT":
                                                                    IF "Bal. VAT Base Amount" <> 0 THEN
                                                                      FIELDERROR(
                                                                        "Bal. VAT Base Amount",
                                                                        STRSUBSTNO(
                                                                          Text008,FIELDCAPTION("Bal. VAT Calculation Type"),
                                                                          "Bal. VAT Calculation Type"));
                                                                  "Bal. VAT Calculation Type"::"Sales Tax":
                                                                    IF ("Bal. Gen. Posting Type" = "Bal. Gen. Posting Type"::Purchase) AND
                                                                       "Bal. Use Tax"
                                                                    THEN BEGIN
                                                                      "Bal. VAT Amount" := 0;
                                                                      "Bal. VAT %" := 0;
                                                                      Amount := -"Bal. VAT Base Amount" - "Bal. VAT Amount";
                                                                    END ELSE BEGIN
                                                                      "Bal. VAT Amount" :=
                                                                        SalesTaxCalculate.CalculateTax(
                                                                          "Bal. Tax Area Code","Bal. Tax Group Code","Bal. Tax Liable",
                                                                          "Posting Date","Bal. VAT Base Amount",Quantity,"Currency Factor");
                                                                      IF "Bal. VAT Base Amount" <> 0 THEN
                                                                        "Bal. VAT %" := ROUND(100 * "Bal. VAT Amount" / "Bal. VAT Base Amount",0.00001)
                                                                      ELSE
                                                                        "Bal. VAT %" := 0;
                                                                      "Bal. VAT Amount" :=
                                                                        ROUND("Bal. VAT Amount",Currency."Amount Rounding Precision");
                                                                      Amount := -"Bal. VAT Base Amount" - "Bal. VAT Amount";
                                                                    END;
                                                                END;
                                                                VALIDATE(Amount);
                                                              END;

                                                   CaptionML=[ENU=Bal. VAT Base Amount;
                                                              FRA=Montant base TVA contrepartie];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 73  ;   ;Correction          ;Boolean       ;OnValidate=BEGIN
                                                                VALIDATE(Amount);
                                                              END;

                                                   CaptionML=[ENU=Correction;
                                                              FRA=Correction] }
    { 75  ;   ;Check Printed       ;Boolean       ;CaptionML=[ENU=Check Printed;
                                                              FRA=ChŠque imprim‚];
                                                   Editable=No }
    { 76  ;   ;Document Date       ;Date          ;OnValidate=BEGIN
                                                                VALIDATE("Payment Terms Code");
                                                              END;

                                                   CaptionML=[ENU=Document Date;
                                                              FRA=Date document];
                                                   ClosingDates=Yes }
    { 77  ;   ;External Document No.;Code20       ;CaptionML=[ENU=External Document No.;
                                                              FRA=Nø doc. externe] }
    { 78  ;   ;Source Type         ;Option        ;OnValidate=BEGIN
                                                                IF ("Account Type" <> "Account Type"::"G/L Account") AND ("Account No." <> '') OR
                                                                   ("Bal. Account Type" <> "Bal. Account Type"::"G/L Account") AND ("Bal. Account No." <> '')
                                                                THEN
                                                                  UpdateSource
                                                                ELSE
                                                                  "Source No." := '';
                                                              END;

                                                   CaptionML=[ENU=Source Type;
                                                              FRA=Type origine];
                                                   OptionCaptionML=[ENU=" ,Customer,Vendor,Bank Account,Fixed Asset";
                                                                    FRA=" ,Client,Fournisseur,Banque,Immobilisation"];
                                                   OptionString=[ ,Customer,Vendor,Bank Account,Fixed Asset] }
    { 79  ;   ;Source No.          ;Code20        ;TableRelation=IF (Source Type=CONST(Customer)) Customer
                                                                 ELSE IF (Source Type=CONST(Vendor)) Vendor
                                                                 ELSE IF (Source Type=CONST(Bank Account)) "Bank Account"
                                                                 ELSE IF (Source Type=CONST(Fixed Asset)) "Fixed Asset";
                                                   OnValidate=BEGIN
                                                                IF ("Account Type" <> "Account Type"::"G/L Account") AND ("Account No." <> '') OR
                                                                   ("Bal. Account Type" <> "Bal. Account Type"::"G/L Account") AND ("Bal. Account No." <> '')
                                                                THEN
                                                                  UpdateSource;
                                                              END;

                                                   CaptionML=[ENU=Source No.;
                                                              FRA=Nø origine] }
    { 80  ;   ;Posting No. Series  ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Posting No. Series;
                                                              FRA=Souches de nø validation] }
    { 82  ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   OnValidate=BEGIN
                                                                VALIDATE("VAT %");
                                                              END;

                                                   CaptionML=[ENU=Tax Area Code;
                                                              FRA=Code zone recouvrement] }
    { 83  ;   ;Tax Liable          ;Boolean       ;OnValidate=BEGIN
                                                                VALIDATE("VAT %");
                                                              END;

                                                   CaptionML=[ENU=Tax Liable;
                                                              FRA=Soumis … recouvrement] }
    { 84  ;   ;Tax Group Code      ;Code10        ;TableRelation="Tax Group";
                                                   OnValidate=BEGIN
                                                                VALIDATE("VAT %");
                                                              END;

                                                   CaptionML=[ENU=Tax Group Code;
                                                              FRA=Code groupe taxes] }
    { 85  ;   ;Use Tax             ;Boolean       ;OnValidate=BEGIN
                                                                TESTFIELD("Gen. Posting Type","Gen. Posting Type"::Purchase);
                                                                VALIDATE("VAT %");
                                                              END;

                                                   CaptionML=[ENU=Use Tax;
                                                              FRA=Use Tax] }
    { 86  ;   ;Bal. Tax Area Code  ;Code20        ;TableRelation="Tax Area";
                                                   OnValidate=BEGIN
                                                                VALIDATE("Bal. VAT %");
                                                              END;

                                                   CaptionML=[ENU=Bal. Tax Area Code;
                                                              FRA=Code zone recouvrement contr.] }
    { 87  ;   ;Bal. Tax Liable     ;Boolean       ;OnValidate=BEGIN
                                                                VALIDATE("Bal. VAT %");
                                                              END;

                                                   CaptionML=[ENU=Bal. Tax Liable;
                                                              FRA=Soumis … recouvrement contr.] }
    { 88  ;   ;Bal. Tax Group Code ;Code10        ;TableRelation="Tax Group";
                                                   OnValidate=BEGIN
                                                                VALIDATE("Bal. VAT %");
                                                              END;

                                                   CaptionML=[ENU=Bal. Tax Group Code;
                                                              FRA=Code groupe taxes contrepartie] }
    { 89  ;   ;Bal. Use Tax        ;Boolean       ;OnValidate=BEGIN
                                                                TESTFIELD("Bal. Gen. Posting Type","Bal. Gen. Posting Type"::Purchase);
                                                                VALIDATE("Bal. VAT %");
                                                              END;

                                                   CaptionML=[ENU=Bal. Use Tax;
                                                              FRA=Use Tax contrepartie] }
    { 90  ;   ;VAT Bus. Posting Group;Code10      ;TableRelation="VAT Business Posting Group";
                                                   OnValidate=BEGIN
                                                                IF "Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Bank Account"] THEN
                                                                  TESTFIELD("VAT Bus. Posting Group",'');

                                                                VALIDATE("VAT Prod. Posting Group");

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine;
                                                                  UpdatePricesFromJobJnlLine;
                                                                END
                                                              END;

                                                   CaptionML=[ENU=VAT Bus. Posting Group;
                                                              FRA=Groupe compta. march‚ TVA] }
    { 91  ;   ;VAT Prod. Posting Group;Code10     ;TableRelation="VAT Product Posting Group";
                                                   OnValidate=BEGIN
                                                                IF "Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Bank Account"] THEN
                                                                  TESTFIELD("VAT Prod. Posting Group",'');

                                                                CheckVATInAlloc;

                                                                "VAT %" := 0;
                                                                "VAT Calculation Type" := "VAT Calculation Type"::"Normal VAT";
                                                                IF "Gen. Posting Type" <> 0 THEN BEGIN
                                                                  IF NOT VATPostingSetup.GET("VAT Bus. Posting Group","VAT Prod. Posting Group") THEN
                                                                    VATPostingSetup.INIT;
                                                                  "VAT Calculation Type" := VATPostingSetup."VAT Calculation Type";
                                                                  CASE "VAT Calculation Type" OF
                                                                    "VAT Calculation Type"::"Normal VAT":
                                                                      "VAT %" := VATPostingSetup."VAT %";
                                                                    "VAT Calculation Type"::"Full VAT":
                                                                      CASE "Gen. Posting Type" OF
                                                                        "Gen. Posting Type"::Sale:
                                                                          BEGIN
                                                                            VATPostingSetup.TESTFIELD("Sales VAT Account");
                                                                            TESTFIELD("Account No.",VATPostingSetup."Sales VAT Account");
                                                                          END;
                                                                        "Gen. Posting Type"::Purchase:
                                                                          BEGIN
                                                                            VATPostingSetup.TESTFIELD("Purchase VAT Account");
                                                                            TESTFIELD("Account No.",VATPostingSetup."Purchase VAT Account");
                                                                          END;
                                                                      END;
                                                                  END;
                                                                END;
                                                                VALIDATE("VAT %");

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine;
                                                                  UpdatePricesFromJobJnlLine;
                                                                END
                                                              END;

                                                   CaptionML=[ENU=VAT Prod. Posting Group;
                                                              FRA=Groupe compta. produit TVA] }
    { 92  ;   ;Bal. VAT Bus. Posting Group;Code10 ;TableRelation="VAT Business Posting Group";
                                                   OnValidate=BEGIN
                                                                IF "Bal. Account Type" IN
                                                                   ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::"Bank Account"]
                                                                THEN
                                                                  TESTFIELD("Bal. VAT Bus. Posting Group",'');

                                                                VALIDATE("Bal. VAT Prod. Posting Group");
                                                              END;

                                                   CaptionML=[ENU=Bal. VAT Bus. Posting Group;
                                                              FRA=Gpe compta. march‚ TVA contr.] }
    { 93  ;   ;Bal. VAT Prod. Posting Group;Code10;TableRelation="VAT Product Posting Group";
                                                   OnValidate=BEGIN
                                                                IF "Bal. Account Type" IN
                                                                   ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::"Bank Account"]
                                                                THEN
                                                                  TESTFIELD("Bal. VAT Prod. Posting Group",'');

                                                                "Bal. VAT %" := 0;
                                                                "Bal. VAT Calculation Type" := "Bal. VAT Calculation Type"::"Normal VAT";
                                                                IF "Bal. Gen. Posting Type" <> 0 THEN BEGIN
                                                                  IF NOT VATPostingSetup.GET("Bal. VAT Bus. Posting Group","Bal. VAT Prod. Posting Group") THEN
                                                                    VATPostingSetup.INIT;
                                                                  "Bal. VAT Calculation Type" := VATPostingSetup."VAT Calculation Type";
                                                                  CASE "Bal. VAT Calculation Type" OF
                                                                    "Bal. VAT Calculation Type"::"Normal VAT":
                                                                      "Bal. VAT %" := VATPostingSetup."VAT %";
                                                                    "Bal. VAT Calculation Type"::"Full VAT":
                                                                      CASE "Bal. Gen. Posting Type" OF
                                                                        "Bal. Gen. Posting Type"::Sale:
                                                                          BEGIN
                                                                            VATPostingSetup.TESTFIELD("Sales VAT Account");
                                                                            TESTFIELD("Bal. Account No.",VATPostingSetup."Sales VAT Account");
                                                                          END;
                                                                        "Bal. Gen. Posting Type"::Purchase:
                                                                          BEGIN
                                                                            VATPostingSetup.TESTFIELD("Purchase VAT Account");
                                                                            TESTFIELD("Bal. Account No.",VATPostingSetup."Purchase VAT Account");
                                                                          END;
                                                                      END;
                                                                  END;
                                                                END;
                                                                VALIDATE("Bal. VAT %");
                                                              END;

                                                   CaptionML=[ENU=Bal. VAT Prod. Posting Group;
                                                              FRA=Gpe compta. produit TVA contr.] }
    { 95  ;   ;Additional-Currency Posting;Option ;CaptionML=[ENU=Additional-Currency Posting;
                                                              FRA=Comptabilisation devise report];
                                                   OptionCaptionML=[ENU=None,Amount Only,Additional-Currency Amount Only;
                                                                    FRA=Aucun,Montant seulement,Montant DR seulement];
                                                   OptionString=None,Amount Only,Additional-Currency Amount Only;
                                                   Editable=No }
    { 98  ;   ;FA Add.-Currency Factor;Decimal    ;CaptionML=[ENU=FA Add.-Currency Factor;
                                                              FRA=Facteur devise immo.];
                                                   DecimalPlaces=0:15;
                                                   MinValue=0 }
    { 99  ;   ;Source Currency Code;Code10        ;TableRelation=Currency;
                                                   CaptionML=[ENU=Source Currency Code;
                                                              FRA=Code devise origine];
                                                   Editable=No }
    { 100 ;   ;Source Currency Amount;Decimal     ;CaptionML=[ENU=Source Currency Amount;
                                                              FRA=Montant devise origine];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 101 ;   ;Source Curr. VAT Base Amount;Decimal;
                                                   CaptionML=[ENU=Source Curr. VAT Base Amount;
                                                              FRA=Montant base TVA devise origine];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 102 ;   ;Source Curr. VAT Amount;Decimal    ;CaptionML=[ENU=Source Curr. VAT Amount;
                                                              FRA=Montant TVA devise origine];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 103 ;   ;VAT Base Discount % ;Decimal       ;CaptionML=[ENU=VAT Base Discount %;
                                                              FRA=% remise base TVA];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100;
                                                   Editable=No }
    { 104 ;   ;VAT Amount (LCY)    ;Decimal       ;CaptionML=[ENU=VAT Amount (LCY);
                                                              FRA=Montant TVA DS];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 105 ;   ;VAT Base Amount (LCY);Decimal      ;CaptionML=[ENU=VAT Base Amount (LCY);
                                                              FRA=Montant base TVA DS];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 106 ;   ;Bal. VAT Amount (LCY);Decimal      ;CaptionML=[ENU=Bal. VAT Amount (LCY);
                                                              FRA=Montant TVA contr. DS];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 107 ;   ;Bal. VAT Base Amount (LCY);Decimal ;CaptionML=[ENU=Bal. VAT Base Amount (LCY);
                                                              FRA=Mont. base TVA contr. DS];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 108 ;   ;Reversing Entry     ;Boolean       ;CaptionML=[ENU=Reversing Entry;
                                                              FRA=Ecriture oppos‚e];
                                                   Editable=No }
    { 109 ;   ;Allow Zero-Amount Posting;Boolean  ;CaptionML=[ENU=Allow Zero-Amount Posting;
                                                              FRA=Autoriser compta. montant nul];
                                                   Editable=No }
    { 110 ;   ;Ship-to/Order Address Code;Code10  ;TableRelation=IF (Account Type=CONST(Customer)) "Ship-to Address".Code WHERE (Customer No.=FIELD(Bill-to/Pay-to No.))
                                                                 ELSE IF (Account Type=CONST(Vendor)) "Order Address".Code WHERE (Vendor No.=FIELD(Bill-to/Pay-to No.))
                                                                 ELSE IF (Bal. Account Type=CONST(Customer)) "Ship-to Address".Code WHERE (Customer No.=FIELD(Bill-to/Pay-to No.))
                                                                 ELSE IF (Bal. Account Type=CONST(Vendor)) "Order Address".Code WHERE (Vendor No.=FIELD(Bill-to/Pay-to No.));
                                                   CaptionML=[ENU=Ship-to/Order Address Code;
                                                              FRA=Code adresse destinataire/adresse de commande] }
    { 111 ;   ;VAT Difference      ;Decimal       ;CaptionML=[ENU=VAT Difference;
                                                              FRA=Diff‚rence TVA];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 112 ;   ;Bal. VAT Difference ;Decimal       ;CaptionML=[ENU=Bal. VAT Difference;
                                                              FRA=Diff‚rence TVA contrepartie];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 113 ;   ;IC Partner Code     ;Code20        ;TableRelation="IC Partner";
                                                   CaptionML=[ENU=IC Partner Code;
                                                              FRA=Code du partenaire IC];
                                                   Editable=No }
    { 114 ;   ;IC Direction        ;Option        ;CaptionML=[ENU=IC Direction;
                                                              FRA=Direction IC];
                                                   OptionCaptionML=[ENU=Outgoing,Incoming;
                                                                    FRA=Sortant,Entrant];
                                                   OptionString=Outgoing,Incoming }
    { 116 ;   ;IC Partner G/L Acc. No.;Code20     ;TableRelation="IC G/L Account";
                                                   OnValidate=VAR
                                                                ICGLAccount@1000 : Record 410;
                                                              BEGIN
                                                                IF "IC Partner G/L Acc. No." <> '' THEN BEGIN
                                                                  GetTemplate;
                                                                  GenJnlTemplate.TESTFIELD(Type,GenJnlTemplate.Type::Intercompany);
                                                                  IF ICGLAccount.GET("IC Partner G/L Acc. No.") THEN
                                                                    ICGLAccount.TESTFIELD(Blocked,FALSE);
                                                                END
                                                              END;

                                                   CaptionML=[ENU=IC Partner G/L Acc. No.;
                                                              FRA=Nø cpte g‚n partenaire IC] }
    { 117 ;   ;IC Partner Transaction No.;Integer ;CaptionML=[ENU=IC Partner Transaction No.;
                                                              FRA=Nø transaction partenaire IC];
                                                   Editable=No }
    { 118 ;   ;Sell-to/Buy-from No.;Code20        ;TableRelation=IF (Account Type=CONST(Customer)) Customer
                                                                 ELSE IF (Bal. Account Type=CONST(Customer)) Customer
                                                                 ELSE IF (Account Type=CONST(Vendor)) Vendor
                                                                 ELSE IF (Bal. Account Type=CONST(Vendor)) Vendor;
                                                   OnValidate=BEGIN
                                                                GLSetup.GET;
                                                                IF GLSetup."Bill-to/Sell-to VAT Calc." = GLSetup."Bill-to/Sell-to VAT Calc."::"Sell-to/Buy-from No." THEN
                                                                  UpdateCountryCodeAndVATRegNo("Sell-to/Buy-from No.");
                                                              END;

                                                   CaptionML=[ENU=Sell-to/Buy-from No.;
                                                              FRA=Nø donneur d'ordre/fournisseur] }
    { 119 ;   ;VAT Registration No.;Text20        ;OnValidate=VAR
                                                                VATRegNoFormat@1000 : Record 381;
                                                              BEGIN
                                                                VATRegNoFormat.Test("VAT Registration No.","Country/Region Code",'',0);
                                                              END;

                                                   CaptionML=[ENU=VAT Registration No.;
                                                              FRA=Nø identif. intracomm.] }
    { 120 ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   OnValidate=BEGIN
                                                                VALIDATE("VAT Registration No.");
                                                              END;

                                                   CaptionML=[ENU=Country/Region Code;
                                                              FRA=Code pays/r‚gion] }
    { 121 ;   ;Prepayment          ;Boolean       ;CaptionML=[ENU=Prepayment;
                                                              FRA=Acompte] }
    { 122 ;   ;Financial Void      ;Boolean       ;CaptionML=[ENU=Financial Void;
                                                              FRA=Annulation financiŠre];
                                                   Editable=No }
    { 827 ;   ;Credit Card No.     ;Code20        ;TableRelation=IF (Account Type=CONST(Customer),
                                                                     Document Type=FILTER(Payment|Refund),
                                                                     Bal. Account Type=CONST(Bank Account)) "DO Payment Credit Card" WHERE (Customer No.=FIELD(Account No.));
                                                   OnValidate=VAR
                                                                DOPaymentMgt@1000 : Codeunit 825;
                                                              BEGIN
                                                                CheckNoCardTransactEntryExist(xRec);
                                                                IF "Credit Card No." = '' THEN
                                                                  EXIT;

                                                                DOPaymentMgt.CheckCreditCardData("Credit Card No.");
                                                              END;

                                                   CaptionML=[ENU=Credit Card No.;
                                                              FRA=Nø de carte de cr‚dit] }
    { 1001;   ;Job Task No.        ;Code20        ;TableRelation="Job Task"."Job Task No." WHERE (Job No.=FIELD(Job No.));
                                                   OnValidate=BEGIN
                                                                IF "Job Task No." = '' THEN BEGIN
                                                                  "Job Quantity" := 0;
                                                                  "Job Currency Factor" := 0;
                                                                  "Job Currency Code" := '';
                                                                  "Job Unit Price" := 0;
                                                                  "Job Total Price" := 0;
                                                                  "Job Line Amount" := 0;
                                                                  "Job Line Discount Amount" := 0;
                                                                  "Job Unit Cost" := 0;
                                                                  "Job Total Cost" := 0;
                                                                  "Job Line Discount %" := 0;

                                                                  "Job Unit Price (LCY)" := 0;
                                                                  "Job Total Price (LCY)" := 0;
                                                                  "Job Line Amount (LCY)" := 0;
                                                                  "Job Line Disc. Amount (LCY)" := 0;
                                                                  "Job Unit Cost (LCY)" := 0;
                                                                  "Job Total Cost (LCY)" := 0;
                                                                  EXIT;
                                                                END;

                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine;
                                                                  UpdatePricesFromJobJnlLine;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Job Task No.;
                                                              FRA=Nø tƒche projet] }
    { 1002;   ;Job Unit Price (LCY);Decimal       ;CaptionML=[ENU=Job Unit Price (LCY);
                                                              FRA=Prix unitaire projet DS];
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 1003;   ;Job Total Price (LCY);Decimal      ;CaptionML=[ENU=Job Total Price (LCY);
                                                              FRA=Prix total projet DS];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1004;   ;Job Quantity        ;Decimal       ;OnValidate=BEGIN
                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine;
                                                                  UpdatePricesFromJobJnlLine;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Job Quantity;
                                                              FRA=Quantit‚ projet];
                                                   DecimalPlaces=0:5 }
    { 1005;   ;Job Unit Cost (LCY) ;Decimal       ;CaptionML=[ENU=Job Unit Cost (LCY);
                                                              FRA=Co–t unitaire projet DS];
                                                   Editable=No;
                                                   AutoFormatType=2 }
    { 1006;   ;Job Line Discount % ;Decimal       ;OnValidate=BEGIN
                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine;
                                                                  JobJnlLine.VALIDATE("Line Discount %","Job Line Discount %");
                                                                  UpdatePricesFromJobJnlLine;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Job Line Discount %;
                                                              FRA=% remise ligne projet];
                                                   AutoFormatType=1 }
    { 1007;   ;Job Line Disc. Amount (LCY);Decimal;OnValidate=BEGIN
                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine;
                                                                  JobJnlLine.VALIDATE("Line Discount Amount (LCY)","Job Line Disc. Amount (LCY)");
                                                                  UpdatePricesFromJobJnlLine;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Job Line Disc. Amount (LCY);
                                                              FRA=Montant remise ligne projet DS];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1008;   ;Job Unit Of Measure Code;Code10    ;TableRelation="Unit of Measure";
                                                   CaptionML=[ENU=Job Unit Of Measure Code;
                                                              FRA=Code unit‚ projet] }
    { 1009;   ;Job Line Type       ;Option        ;CaptionML=[ENU=Job Line Type;
                                                              FRA=Type ligne projet];
                                                   OptionCaptionML=[ENU=" ,Schedule,Contract,Both Schedule and Contract";
                                                                    FRA=" ,Planifi‚,Contrat,Planifi‚ et contrat"];
                                                   OptionString=[ ,Schedule,Contract,Both Schedule and Contract] }
    { 1010;   ;Job Unit Price      ;Decimal       ;OnValidate=BEGIN
                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine;
                                                                  JobJnlLine.VALIDATE("Unit Price","Job Unit Price");
                                                                  UpdatePricesFromJobJnlLine;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Job Unit Price;
                                                              FRA=Prix unitaire projet];
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Job Currency Code" }
    { 1011;   ;Job Total Price     ;Decimal       ;CaptionML=[ENU=Job Total Price;
                                                              FRA=Prix total projet];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Job Currency Code" }
    { 1012;   ;Job Unit Cost       ;Decimal       ;CaptionML=[ENU=Job Unit Cost;
                                                              FRA=Co–t unitaire projet];
                                                   Editable=No;
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Job Currency Code" }
    { 1013;   ;Job Total Cost      ;Decimal       ;CaptionML=[ENU=Job Total Cost;
                                                              FRA=Co–t total projet];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Job Currency Code" }
    { 1014;   ;Job Line Discount Amount;Decimal   ;OnValidate=BEGIN
                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine;
                                                                  JobJnlLine.VALIDATE("Line Discount Amount","Job Line Discount Amount");
                                                                  UpdatePricesFromJobJnlLine;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Job Line Discount Amount;
                                                              FRA=Montant remise ligne projet];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Job Currency Code" }
    { 1015;   ;Job Line Amount     ;Decimal       ;OnValidate=BEGIN
                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine;
                                                                  JobJnlLine.VALIDATE("Line Amount","Job Line Amount");
                                                                  UpdatePricesFromJobJnlLine;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Job Line Amount;
                                                              FRA=Montant ligne projet];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Job Currency Code" }
    { 1016;   ;Job Total Cost (LCY);Decimal       ;CaptionML=[ENU=Job Total Cost (LCY);
                                                              FRA=Co–t total projet DS];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1017;   ;Job Line Amount (LCY);Decimal      ;OnValidate=BEGIN
                                                                IF JobTaskIsSet THEN BEGIN
                                                                  CreateTempJobJnlLine;
                                                                  JobJnlLine.VALIDATE("Line Amount (LCY)","Job Line Amount (LCY)");
                                                                  UpdatePricesFromJobJnlLine;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Job Line Amount (LCY);
                                                              FRA=Montant ligne projet DS];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 1018;   ;Job Currency Factor ;Decimal       ;CaptionML=[ENU=Job Currency Factor;
                                                              FRA=Facteur devise projet] }
    { 1019;   ;Job Currency Code   ;Code10        ;OnValidate=BEGIN
                                                                IF ("Job Currency Code" <> xRec."Job Currency Code") OR ("Job Currency Code" <> '') THEN
                                                                  IF JobTaskIsSet THEN BEGIN
                                                                    CreateTempJobJnlLine;
                                                                    UpdatePricesFromJobJnlLine;
                                                                  END;
                                                              END;

                                                   CaptionML=[ENU=Job Currency Code;
                                                              FRA=Code devise projet] }
    { 5050;   ;Campaign No.        ;Code20        ;TableRelation=Campaign;
                                                   OnValidate=BEGIN
                                                                CreateDim(
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DimMgt.TypeToTableID1("Account Type"),"Account No.",
                                                                  DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
                                                                  DATABASE::Job,"Job No.",
                                                                  DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code");
                                                              END;

                                                   CaptionML=[ENU=Campaign No.;
                                                              FRA=Nø campagne] }
    { 5400;   ;Prod. Order No.     ;Code20        ;CaptionML=[ENU=Prod. Order No.;
                                                              FRA=Nø ordre de fabrication];
                                                   Editable=No }
    { 5600;   ;FA Posting Date     ;Date          ;CaptionML=[ENU=FA Posting Date;
                                                              FRA=Date compta. immo.] }
    { 5601;   ;FA Posting Type     ;Option        ;OnValidate=BEGIN
                                                                IF  NOT (("Account Type" = "Account Type"::"Fixed Asset") OR
                                                                    ("Bal. Account Type" = "Bal. Account Type"::"Fixed Asset")) AND
                                                                    ("FA Posting Type" = "FA Posting Type"::" ")
                                                                THEN BEGIN
                                                                  "FA Posting Date" := 0D;
                                                                  "Salvage Value" := 0;
                                                                  "No. of Depreciation Days" := 0;
                                                                  "Depr. until FA Posting Date" := FALSE;
                                                                  "Depr. Acquisition Cost" := FALSE;
                                                                  "Maintenance Code" := '';
                                                                  "Insurance No." := '';
                                                                  "Budgeted FA No." := '';
                                                                  "Duplicate in Depreciation Book" := '';
                                                                  "Use Duplication List" := FALSE;
                                                                  "FA Reclassification Entry" := FALSE;
                                                                  "FA Error Entry No." := 0;
                                                                END;

                                                                IF "FA Posting Type" <> "FA Posting Type"::"Acquisition Cost" THEN
                                                                  TESTFIELD("Insurance No.",'');
                                                                IF "FA Posting Type" <> "FA Posting Type"::Maintenance THEN
                                                                  TESTFIELD("Maintenance Code",'');
                                                                GetFAVATSetup;
                                                                GetFAAddCurrExchRate;

                                                                GetDerogatorySetup;
                                                              END;

                                                   CaptionML=[ENU=FA Posting Type;
                                                              FRA=Type compta. immo.];
                                                   OptionCaptionML=[ENU=" ,Acquisition Cost,Depreciation,Write-Down,Appreciation,Custom 1,Custom 2,Disposal,Maintenance,,,,,Derogatory";
                                                                    FRA=" ,Co–t acquisition,Amortissement,D‚pr‚ciation,R‚‚valuation,Param. 1,Param. 2,Cession,Maintenance,,,,,D‚rogatoire"];
                                                   OptionString=[ ,Acquisition Cost,Depreciation,Write-Down,Appreciation,Custom 1,Custom 2,Disposal,Maintenance,,,,,Derogatory] }
    { 5602;   ;Depreciation Book Code;Code10      ;TableRelation="Depreciation Book";
                                                   OnValidate=BEGIN
                                                                GetDerogatorySetup;
                                                                IF "Depreciation Book Code" = '' THEN
                                                                  EXIT;

                                                                IF ("Account No." <> '') AND
                                                                   ("Account Type" = "Account Type"::"Fixed Asset")
                                                                THEN BEGIN
                                                                  FADeprBook.GET("Account No.","Depreciation Book Code");
                                                                  "Posting Group" := FADeprBook."FA Posting Group";
                                                                END;

                                                                IF ("Bal. Account No." <> '') AND
                                                                   ("Bal. Account Type" = "Bal. Account Type"::"Fixed Asset")
                                                                THEN BEGIN
                                                                  FADeprBook.GET("Bal. Account No.","Depreciation Book Code");
                                                                  "Posting Group" := FADeprBook."FA Posting Group";
                                                                END;
                                                                GetFAVATSetup;
                                                                GetFAAddCurrExchRate;
                                                              END;

                                                   CaptionML=[ENU=Depreciation Book Code;
                                                              FRA=Code loi d'amortissement] }
    { 5603;   ;Salvage Value       ;Decimal       ;CaptionML=[ENU=Salvage Value;
                                                              FRA=Valeur r‚siduelle];
                                                   AutoFormatType=1 }
    { 5604;   ;No. of Depreciation Days;Integer   ;CaptionML=[ENU=No. of Depreciation Days;
                                                              FRA=Nbre jours amort.];
                                                   BlankZero=Yes }
    { 5605;   ;Depr. until FA Posting Date;Boolean;CaptionML=[ENU=Depr. until FA Posting Date;
                                                              FRA=Amort. jusqu'… date compta.] }
    { 5606;   ;Depr. Acquisition Cost;Boolean     ;CaptionML=[ENU=Depr. Acquisition Cost;
                                                              FRA=Amortir co–t acquisition] }
    { 5609;   ;Maintenance Code    ;Code10        ;TableRelation=Maintenance;
                                                   OnValidate=BEGIN
                                                                IF "Maintenance Code" <> '' THEN
                                                                  TESTFIELD("FA Posting Type","FA Posting Type"::Maintenance);
                                                              END;

                                                   CaptionML=[ENU=Maintenance Code;
                                                              FRA=Code maintenance] }
    { 5610;   ;Insurance No.       ;Code20        ;TableRelation=Insurance;
                                                   OnValidate=BEGIN
                                                                IF "Insurance No." <> '' THEN
                                                                  TESTFIELD("FA Posting Type","FA Posting Type"::"Acquisition Cost");
                                                              END;

                                                   CaptionML=[ENU=Insurance No.;
                                                              FRA=Nø assurance] }
    { 5611;   ;Budgeted FA No.     ;Code20        ;TableRelation="Fixed Asset";
                                                   OnValidate=BEGIN
                                                                IF "Budgeted FA No." <> '' THEN BEGIN
                                                                  FA.GET("Budgeted FA No.");
                                                                  FA.TESTFIELD(FA."Budgeted Asset",TRUE);
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Budgeted FA No.;
                                                              FRA=Nø immo. budg‚t‚e] }
    { 5612;   ;Duplicate in Depreciation Book;Code10;
                                                   TableRelation="Depreciation Book";
                                                   OnValidate=BEGIN
                                                                "Use Duplication List" := FALSE;
                                                              END;

                                                   CaptionML=[ENU=Duplicate in Depreciation Book;
                                                              FRA=Dupliquer dans journaux amort.] }
    { 5613;   ;Use Duplication List;Boolean       ;OnValidate=BEGIN
                                                                "Duplicate in Depreciation Book" := '';
                                                              END;

                                                   CaptionML=[ENU=Use Duplication List;
                                                              FRA=Utiliser liste duplication] }
    { 5614;   ;FA Reclassification Entry;Boolean  ;CaptionML=[ENU=FA Reclassification Entry;
                                                              FRA=Ecriture reclass. immo.] }
    { 5615;   ;FA Error Entry No.  ;Integer       ;TableRelation="FA Ledger Entry";
                                                   CaptionML=[ENU=FA Error Entry No.;
                                                              FRA=Nø s‚quence erreur immo.];
                                                   BlankZero=Yes }
    { 5616;   ;Index Entry         ;Boolean       ;CaptionML=[ENU=Index Entry;
                                                              FRA=Ecriture r‚‚valuation] }
    { 10800;  ;Bank Account Code   ;Code20        ;TableRelation=IF (Account Type=CONST(Customer)) "Customer Bank Account".Code WHERE (Customer No.=FIELD(Account No.))
                                                                 ELSE IF (Account Type=CONST(Vendor)) "Vendor Bank Account".Code WHERE (Vendor No.=FIELD(Account No.));
                                                   OnValidate=BEGIN
                                                                IF "Account Type" = "Account Type":: Customer THEN
                                                                  IF CustBankAcc.GET("Account No.","Bank Account Code") THEN
                                                                    "Bank Account Name" := CustBankAcc.Name
                                                                  ELSE
                                                                    "Bank Account Name" := '';
                                                                IF "Account Type" = "Account Type":: Vendor THEN
                                                                  IF VendBankAcc.GET("Account No.","Bank Account Code") THEN
                                                                    "Bank Account Name" := VendBankAcc.Name
                                                                  ELSE
                                                                    "Bank Account Name" := '';
                                                              END;

                                                   CaptionML=[ENU=Bank Account Code;
                                                              FRA=Code compte bancaire] }
    { 10801;  ;Bank Account Name   ;Text50        ;CaptionML=[ENU=Bank Account Name;
                                                              FRA=Nom compte bancaire] }
    { 10810;  ;Entry Type          ;Option        ;CaptionML=[ENU=Entry Type;
                                                              FRA=Type ‚criture];
                                                   OptionCaptionML=[ENU=Definitive,Simulation;
                                                                    FRA=D‚finitive,Simulation];
                                                   OptionString=Definitive,Simulation }
    { 10860;  ;Entry No.           ;Integer       ;CaptionML=[ENU=Entry No.;
                                                              FRA=Nø s‚quence];
                                                   Editable=No }
    { 10861;  ;Derogatory Line     ;Boolean       ;CaptionML=[ENU=Derogatory Line;
                                                              FRA=Ligne d‚rogatoire];
                                                   Editable=No }
    { 10862;  ;Delayed Unrealized VAT;Boolean     ;CaptionML=[ENU=Delayed Unrealized VAT;
                                                              FRA=TVA sur encaissement diff‚r‚e] }
    { 10863;  ;Realize VAT         ;Boolean       ;CaptionML=[ENU=Realize VAT;
                                                              FRA=R‚aliser TVA] }
    { 10864;  ;Created from No.    ;Code20        ;CaptionML=[ENU=Created from No.;
                                                              FRA=Cr‚‚ … partir du nø] }
    { 50000;  ;Dimension Entry No. ;Integer       ;CaptionML=FRA=Nø Ecriture analytique li‚e;
                                                   Description=IMH6.01 }
    { 50001;  ;Distribution Date   ;Date          ;CaptionML=FRA=Date de r‚partition;
                                                   Description=IMH6.01 }
    { 50002;  ;Reference No.       ;Code30        ;CaptionML=[ENU=Reference No.;
                                                              FRA=Nø ‚vŠnement];
                                                   Editable=No }
    { 50003;  ;DARVA Reference No. ;Code20        ;CaptionML=[ENU=DARVA Reference No.;
                                                              FRA=Nø sinistre DARVA] }
    { 50005;  ;Depreciation Amount ;Decimal       ;CaptionML=FRA=Montant v‚tust‚;
                                                   Description=IMH6.01.029 }
    { 50006;  ;Deductible Amount   ;Decimal       ;CaptionML=FRA=Montant franchise;
                                                   Description=IMH6.01.029 }
    { 50010;  ;Corporate No.       ;Code20        ;TableRelation=Customer.No. WHERE (Service Contact=CONST(Corporate Customer));
                                                   CaptionML=[ENU=Corporate No.;
                                                              FRA=Nø grand compte] }
    { 50011;  ;Corporate Region Code;Code10       ;TableRelation="Corporate Region"."Region Code";
                                                   CaptionML=[ENU=Corporate Region Code;
                                                              FRA=Code r‚gion grand compte] }
    { 50012;  ;Service No.         ;Code20        ;TableRelation=Service;
                                                   CaptionML=[ENU=Service No.;
                                                              FRA=Nø service] }
    { 50013;  ;Service Header No.  ;Code20        ;TableRelation="Service Header".No. WHERE (Document Type=CONST(Invoice),
                                                                                             Service No.=FIELD(Service No.));
                                                   CaptionML=[ENU=Service Header No.;
                                                              FRA=Nø ligne produit] }
    { 50014;  ;Intervention Line No.;Integer      ;TableRelation="Service Intervention Line"."Line No." WHERE (Service Header No.=FIELD(Service Header No.));
                                                   CaptionML=[ENU=Intervention Line No.;
                                                              FRA=Nø ligne intervention] }
    { 50015;  ;Service Order Type  ;Code10        ;TableRelation="Service Order Type";
                                                   CaptionML=[ENU=Service Order Type;
                                                              FRA=Code type produit] }
    { 50016;  ;Service Header Voucher No.;Integer ;OnValidate=VAR
                                                                lServHVoucher@1100281000 : Record 50103;
                                                              BEGIN
                                                                //<<IMH05.ST
                                                                IF ("Service Header Voucher No." <> 0) AND ("Service Header No." <> '') THEN
                                                                  IF lServHVoucher.GET("Service Header No.", "Service Header Voucher No.") THEN BEGIN
                                                                    IF ("Account Type" = "Account Type"::Vendor) THEN
                                                                      "Payment Address Code" := lServHVoucher.GetPaymentAddr(TRUE,TRUE);
                                                                    IF ("Bal. Account Type" = "Bal. Account Type"::Vendor) THEN
                                                                      "Bal. Payment Address Code" := lServHVoucher.GetPaymentAddr(TRUE,TRUE);
                                                                  END;
                                                                //>>IMH05.ST
                                                              END;

                                                   CaptionML=[ENU=Service Header Voucher No.;
                                                              FRA=Nø ligne produit justificatif] }
    { 50020;  ;Transmission No.    ;Code20        ;CaptionML=[ENU=Transmission No.;
                                                              FRA=Nø transmission] }
    { 50021;  ;Transmission Generate Date;Date    ;CaptionML=[ENU=Transmission Generate Date;
                                                              FRA=Date g‚n‚ration transmission] }
    { 50050;  ;Payment Check No.   ;Code20        ;CaptionML=[ENU=Payment Check No.;
                                                              FRA=Nø chŠque] }
    { 50150;  ;Fusion NH GUID      ;Text40        ;CaptionML=[ENU=Fusion NH GUID;
                                                              FRA=GUID NH Fusion] }
    { 56010;  ;Fusion Document No. ;Code30        ;TableRelation="Fusion Invoicing Doc. Head"."Fusion Document No.";
                                                   CaptionML=[ENU=Fusion Document No.;
                                                              FRA=Nø document Fusion] }
    { 57013;  ;IMA Reference No.   ;Code30        ;CaptionML=[ENU=IMA Reference No.;
                                                              FRA=Nø r‚f‚rence IMA] }
    { 8016602;;G/L Entry Applies-to ID;Code20     ;CaptionML=[ENU=G/L Entry Applies-to ID;
                                                              FRA=ID lettrage ‚criture comptable];
                                                   Editable=No }
    { 8016605;;Payment Method Code ;Code10        ;TableRelation="Payment Method".Code;
                                                   OnValidate=BEGIN
                                                                InitDescription(); // ISA03.ISAT.MA
                                                              END;

                                                   CaptionML=[ENU=Payment Method Code;
                                                              FRA=Code mode rŠglement] }
    { 8016610;;Payment Address Code;Code10        ;TableRelation="Payment Address".Code WHERE (Account Type=FIELD(Account Type),
                                                                                               Account No.=FIELD(Account No.));
                                                   CaptionML=[ENU=Payment Address Code;
                                                              FRA=Code adresse de paiement] }
    { 8016611;;Bal. Payment Address Code;Code10   ;TableRelation="Payment Address".Code WHERE (Account Type=FIELD(Bal. Account Type),
                                                                                               Account No.=FIELD(Bal. Account No.));
                                                   CaptionML=[ENU=Bal. Payment Address Code;
                                                              FRA=Code adresse de paiement contrepartie] }
  }
  KEYS
  {
    {    ;Journal Template Name,Journal Batch Name,Line No.;
                                                   SumIndexFields=Balance (LCY);
                                                   MaintainSIFTIndex=No;
                                                   Clustered=Yes }
    {    ;Journal Template Name,Journal Batch Name,Posting Date,Document No.;
                                                   MaintainSQLIndex=No }
    {    ;Account Type,Account No.,Applies-to Doc. Type,Applies-to Doc. No. }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=%1 or %2 must be G/L Account or Bank Account.;FRA=%1 ou %2 doit ˆtre un compte g‚n‚ral ou un compte bancaire.';
      Text001@1001 : TextConst 'ENU=You must not specify %1 when %2 is %3.;FRA=Vous ne devez pas sp‚cifier %1 quand %2 est %3.';
      Text002@1002 : TextConst 'ENU=cannot be specified without %1;FRA=ne peut pas ˆtre sp‚cifi‚(e) sans %1';
      Text003@1003 : TextConst 'ENU=The %1 in the %2 will be changed from %3 to %4.\;FRA=Remplacement de %1 %3 par %4 dans %2.\';
      Text004@1004 : TextConst 'ENU=Do you wish to continue?;FRA=Souhaitez-vous continuer ?';
      Text005@1005 : TextConst 'ENU=The update has been interrupted to respect the warning.;FRA=La mise … jour a ‚t‚ interrompue pour respecter l''alerte.';
      Text006@1006 : TextConst 'ENU=The %1 option can only be used internally in the system.;FRA=L''option %1 ne peut ˆtre utilis‚e qu''en interne par le systŠme.';
      Text007@1007 : TextConst 'ENU=%1 or %2 must be a Bank Account.;FRA=%1 ou %2 doit ˆtre un compte bancaire.';
      Text008@1008 : TextConst 'ENU=" must be 0 when %1 is %2.";FRA=" doit ˆtre 0 quand %1 est %2."';
      Text009@1009 : TextConst 'ENU=LCY;FRA=DS';
      Text010@1010 : TextConst 'ENU=%1 must be %2 or %3.;FRA=%1 doit ˆtre %2 ou %3.';
      Text011@1011 : TextConst 'ENU=%1 must be negative.;FRA=%1 doit ˆtre n‚gatif/ve.';
      Text012@1012 : TextConst 'ENU=%1 must be positive.;FRA=%1 doit ˆtre positif/ve.';
      Text013@1013 : TextConst 'ENU=The %1 must not be more than %2.;FRA=%1 ne doit pas ˆtre sup‚rieur(e) … %2.';
      Text016@1065 : TextConst 'ENU=Credit card %1 has already been performed for this %2, but posting failed. You must complete posting of %2 %3.;FRA=La carte de cr‚dit %1 a d‚j… ‚t‚ effectu‚e pour %2, mais la validation a ‚chou‚. Vous devez terminer la validation de %2 %3.';
      GenJnlTemplate@1014 : Record 80;
      GenJnlBatch@1015 : Record 232;
      GenJnlLine@1016 : Record 81;
      GLAcc@1017 : Record 15;
      Cust@1018 : Record 18;
      Cust2@1019 : Record 18;
      Vend@1020 : Record 23;
      Vend2@1021 : Record 23;
      ICPartner@1057 : Record 413;
      Currency@1022 : Record 4;
      CurrExchRate@1023 : Record 330;
      PaymentTerms@1024 : Record 3;
      CustLedgEntry@1025 : Record 21;
      VendLedgEntry@1026 : Record 25;
      GenJnlAlloc@1027 : Record 221;
      VATPostingSetup@1028 : Record 325;
      BankAcc@1029 : Record 270;
      BankAcc2@1030 : Record 270;
      BankAcc3@1031 : Record 270;
      FA@1032 : Record 5600;
      FASetup@1033 : Record 5603;
      FADeprBook@1034 : Record 5612;
      GenBusPostingGrp@1035 : Record 250;
      GenProdPostingGrp@1036 : Record 251;
      GLSetup@1037 : Record 98;
      Job@1060 : Record 167;
      JobJnlLine@1059 : TEMPORARY Record 210;
      ApplyCustEntries@1038 : Form 232;
      ApplyVendEntries@1039 : Form 233;
      NoSeriesMgt@1040 : Codeunit 396;
      CustCheckCreditLimit@1041 : Codeunit 312;
      SalesTaxCalculate@1042 : Codeunit 398;
      GenJnlApply@1043 : Codeunit 225;
      CustEntrySetApplID@1044 : Codeunit 101;
      VendEntrySetApplID@1045 : Codeunit 111;
      DimMgt@1046 : Codeunit 408;
      PaymentToleranceMgt@1053 : Codeunit 426;
      AccNo@1047 : Code[20];
      FromCurrencyCode@1048 : Code[10];
      ToCurrencyCode@1049 : Code[10];
      AccType@1050 : 'G/L Account,Customer,Vendor,Bank Account,Fixed Asset';
      ReplaceInfo@1051 : Boolean;
      CurrencyCode@1052 : Code[10];
      Text014@1054 : TextConst 'ENU=The %1 %2 has a %3 %4.\Do you still want to use %1 %2 in this journal line?;FRA=Le/La %1 %2 a un(e) %3 %4.\Souhaitez-vous quand mˆme utiliser %1 %2 dans cette ligne feuille ?';
      OK@1055 : Boolean;
      TemplateFound@1056 : Boolean;
      Text015@1058 : TextConst 'ENU=You are not allowed to apply and post an entry to an entry with an earlier posting date.\\Instead, post %1 %2 and then apply it to %3 %4.;FRA=Vous n''ˆtes pas autoris‚ … lettrer et … enregistrer une ‚criture dans une ‚criture disposant d''une date de comptabilisation ant‚rieure.\\Enregistrez plut“t %1 %2, puis lettrez-la dans %3 %4.';
      CurrencyDate@1061 : Date;
      SourceCodeSetup@1063 : Record 242;
      CustBankAcc@1120000 : Record 287;
      VendBankAcc@1120001 : Record 288;
      DerogDeprBook@1120002 : Record 5611;
      DerogFADeprBook@1120003 : Record 5612;

    PROCEDURE EmptyLine@5() : Boolean;
    BEGIN
      EXIT(
        ("Account No." = '') AND (Amount = 0) AND
        (("Bal. Account No." = '') OR NOT "System-Created Entry"));
    END;

    PROCEDURE UpdateLineBalance@2();
    BEGIN
      IF ((Amount > 0) AND (NOT Correction)) OR
         ((Amount < 0) AND Correction)
      THEN BEGIN
        "Debit Amount" := Amount;
        "Credit Amount" := 0
      END ELSE BEGIN
        "Debit Amount" := 0;
        "Credit Amount" := -Amount;
      END;
      IF "Currency Code" = '' THEN
        "Amount (LCY)" := Amount;
      CASE TRUE OF
        ("Account No." <> '') AND ("Bal. Account No." <> ''):
          "Balance (LCY)" := 0;
        "Bal. Account No." <> '':
          "Balance (LCY)" := -"Amount (LCY)";
        ELSE
          "Balance (LCY)" := "Amount (LCY)";
      END;

      CLEAR(GenJnlAlloc);
      GenJnlAlloc.UpdateAllocations(Rec);

      UpdateSalesPurchLCY;
    END;

    PROCEDURE SetUpNewLine@9(LastGenJnlLine@1000 : Record 81;Balance@1001 : Decimal;BottomLine@1002 : Boolean);
    BEGIN
      GenJnlTemplate.GET("Journal Template Name");
      GenJnlBatch.GET("Journal Template Name","Journal Batch Name");
      GenJnlLine.SETRANGE("Journal Template Name","Journal Template Name");
      GenJnlLine.SETRANGE("Journal Batch Name","Journal Batch Name");
      IF GenJnlLine.FIND('-') THEN BEGIN
        "Posting Date" := LastGenJnlLine."Posting Date";
        "Document Date" := LastGenJnlLine."Posting Date";
        "Document No." := LastGenJnlLine."Document No.";
        IF BottomLine AND
           (Balance - LastGenJnlLine."Balance (LCY)" = 0) AND
           NOT LastGenJnlLine.EmptyLine
        THEN
          "Document No." := INCSTR("Document No.");
      END ELSE BEGIN
        "Posting Date" := WORKDATE;
        "Document Date" := WORKDATE;
        IF GenJnlBatch."No. Series" <> '' THEN BEGIN
          CLEAR(NoSeriesMgt);
          "Document No." := NoSeriesMgt.TryGetNextNo(GenJnlBatch."No. Series","Posting Date");
        END;
      END;
      IF GenJnlTemplate.Recurring THEN
        "Recurring Method" := LastGenJnlLine."Recurring Method";
      "Account Type" := LastGenJnlLine."Account Type";
      "Document Type" := LastGenJnlLine."Document Type";
      "Source Code" := GenJnlTemplate."Source Code";
      "Reason Code" := GenJnlBatch."Reason Code";
      "Posting No. Series" := GenJnlBatch."Posting No. Series";
      "Bal. Account Type" := GenJnlBatch."Bal. Account Type";
      IF ("Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Fixed Asset"]) AND
         ("Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::"Fixed Asset"])
      THEN
        "Account Type" := "Account Type"::"G/L Account";
      VALIDATE("Bal. Account No.",GenJnlBatch."Bal. Account No.");
      Description := '';
    END;

    LOCAL PROCEDURE CheckVATInAlloc@1();
    BEGIN
      IF "Gen. Posting Type" <> 0 THEN BEGIN
        GenJnlAlloc.RESET;
        GenJnlAlloc.SETRANGE("Journal Template Name","Journal Template Name");
        GenJnlAlloc.SETRANGE("Journal Batch Name","Journal Batch Name");
        GenJnlAlloc.SETRANGE("Journal Line No.","Line No.");
        IF GenJnlAlloc.FIND('-') THEN
          REPEAT
            GenJnlAlloc.CheckVAT(Rec);
          UNTIL GenJnlAlloc.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE SetCurrencyCode@4(AccType2@1000 : 'G/L Account,Customer,Vendor,Bank Account';AccNo2@1001 : Code[20]) : Boolean;
    BEGIN
      "Currency Code" := '';
      IF AccNo2 <> '' THEN
        CASE AccType2 OF
          AccType2::Customer:
            IF Cust2.GET(AccNo2) THEN
              "Currency Code" := Cust2."Currency Code";
          AccType2::Vendor:
            IF Vend2.GET(AccNo2) THEN
              "Currency Code" := Vend2."Currency Code";
          AccType2::"Bank Account":
            IF BankAcc2.GET(AccNo2) THEN
              "Currency Code" := BankAcc2."Currency Code";
        END;
      EXIT("Currency Code" <> '');
    END;

    LOCAL PROCEDURE GetCurrency@3();
    BEGIN
      IF "Additional-Currency Posting" =
         "Additional-Currency Posting"::"Additional-Currency Amount Only"
      THEN BEGIN
        IF GLSetup."Additional Reporting Currency" = '' THEN
          GLSetup.GET;
        CurrencyCode := GLSetup."Additional Reporting Currency";
      END ELSE
        CurrencyCode := "Currency Code";

      IF CurrencyCode = '' THEN BEGIN
        CLEAR(Currency);
        Currency.InitRoundingPrecision
      END ELSE
        IF CurrencyCode <> Currency.Code THEN BEGIN
          Currency.GET(CurrencyCode);
          Currency.TESTFIELD("Amount Rounding Precision");
        END;
    END;

    PROCEDURE UpdateSource@6();
    VAR
      SourceExists1@1000 : Boolean;
      SourceExists2@1001 : Boolean;
    BEGIN
      SourceExists1 := ("Account Type" <> "Account Type"::"G/L Account") AND ("Account No." <> '');
      SourceExists2 := ("Bal. Account Type" <> "Bal. Account Type"::"G/L Account") AND ("Bal. Account No." <> '');
      CASE TRUE OF
        SourceExists1 AND NOT SourceExists2:
          BEGIN
            "Source Type" := "Account Type";
            "Source No." := "Account No.";
          END;
        SourceExists2 AND NOT SourceExists1:
          BEGIN
            "Source Type" := "Bal. Account Type";
            "Source No." := "Bal. Account No.";
          END;
        ELSE BEGIN
          "Source Type" := "Source Type"::" ";
          "Source No." := '';
        END;
      END;
    END;

    LOCAL PROCEDURE CheckGLAcc@7();
    BEGIN
      GLAcc.CheckGLAcc;
      IF GLAcc."Direct Posting" OR ("Journal Template Name" = '') OR "System-Created Entry" THEN
        EXIT;
      IF "Posting Date" <> 0D THEN
        IF "Posting Date" = CLOSINGDATE("Posting Date") THEN
          EXIT;
      GLAcc.TESTFIELD("Direct Posting",TRUE);
    END;

    PROCEDURE GetFAAddCurrExchRate@8();
    VAR
      DeprBook@1000 : Record 5611;
      FANo@1001 : Code[20];
      UseFAAddCurrExchRate@1002 : Boolean;
    BEGIN
      "FA Add.-Currency Factor" := 0;
      IF ("FA Posting Type" <> "FA Posting Type"::" ") AND
         ("Depreciation Book Code" <> '')
      THEN BEGIN
        IF ("Account Type" = "Account Type"::"Fixed Asset") THEN
          FANo := "Account No.";
        IF ("Bal. Account Type" = "Bal. Account Type"::"Fixed Asset") THEN
          FANo := "Bal. Account No.";
        IF FANo <> '' THEN BEGIN
          DeprBook.GET("Depreciation Book Code");
          CASE "FA Posting Type" OF
            "FA Posting Type"::"Acquisition Cost":
              UseFAAddCurrExchRate := DeprBook."Add-Curr Exch Rate - Acq. Cost";
            "FA Posting Type"::Depreciation:
              UseFAAddCurrExchRate := DeprBook."Add.-Curr. Exch. Rate - Depr.";
            "FA Posting Type"::"Write-Down":
              UseFAAddCurrExchRate := DeprBook."Add-Curr Exch Rate -Write-Down";
            "FA Posting Type"::Appreciation:
              UseFAAddCurrExchRate := DeprBook."Add-Curr. Exch. Rate - Apprec.";
            "FA Posting Type"::"Custom 1":
              UseFAAddCurrExchRate := DeprBook."Add-Curr. Exch Rate - Custom 1";
            "FA Posting Type"::"Custom 2":
              UseFAAddCurrExchRate := DeprBook."Add-Curr. Exch Rate - Custom 2";
            "FA Posting Type"::Disposal:
              UseFAAddCurrExchRate := DeprBook."Add.-Curr. Exch. Rate - Disp.";
            "FA Posting Type"::Maintenance:
              UseFAAddCurrExchRate := DeprBook."Add.-Curr. Exch. Rate - Maint.";
          END;
          IF UseFAAddCurrExchRate THEN BEGIN
            FADeprBook.GET(FANo,"Depreciation Book Code");
            FADeprBook.TESTFIELD("FA Add.-Currency Factor");
            "FA Add.-Currency Factor" := FADeprBook."FA Add.-Currency Factor";
          END;
        END;
      END;
    END;

    PROCEDURE GetShowCurrencyCode@10(CurrencyCode@1000 : Code[10]) : Code[10];
    BEGIN
      IF CurrencyCode <> '' THEN
        EXIT(CurrencyCode)
      ELSE
        EXIT(Text009);
    END;

    PROCEDURE ClearCustVendApplnEntry@11();
    VAR
      TempCustLedgEntry@1000 : Record 21;
      TempVendLedgEntry@1001 : Record 25;
      CustEntryEdit@1002 : Codeunit 103;
      VendEntryEdit@1003 : Codeunit 113;
    BEGIN
      IF Rec."Bal. Account Type" IN
         ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor]
      THEN BEGIN
        AccType := Rec."Bal. Account Type";
        AccNo := Rec."Bal. Account No.";
      END ELSE BEGIN
        AccType := Rec."Account Type";
        AccNo := Rec."Account No.";
      END;
      CASE AccType OF
        AccType::Customer:
          BEGIN
            CustLedgEntry.RESET;
            IF Rec."Applies-to ID" <> '' THEN BEGIN
              CustLedgEntry.SETCURRENTKEY("Customer No.","Applies-to ID",Open);
              CustLedgEntry.SETRANGE("Customer No.",AccNo);
              CustLedgEntry.SETRANGE("Applies-to ID",Rec."Applies-to ID");
              CustLedgEntry.SETRANGE(Open,TRUE);
              IF CustLedgEntry.FIND('-') THEN BEGIN
                CustLedgEntry."Accepted Pmt. Disc. Tolerance" := FALSE;
                CustLedgEntry."Accepted Payment Tolerance" := 0;
                CustLedgEntry."Amount to Apply" := 0;
                CustEntrySetApplID.SetApplId(CustLedgEntry,TempCustLedgEntry,0,0,'');
              END;
            END ELSE IF Rec."Applies-to Doc. No." <> '' THEN BEGIN
              CustLedgEntry.SETCURRENTKEY("Document No.");
              CustLedgEntry.SETRANGE("Document No.",Rec."Applies-to Doc. No.");
              CustLedgEntry.SETRANGE("Document Type",Rec."Applies-to Doc. Type");
              CustLedgEntry.SETRANGE("Customer No.",AccNo);
              CustLedgEntry.SETRANGE(Open,TRUE);
              IF CustLedgEntry.FIND('-') THEN BEGIN
                CustLedgEntry."Accepted Pmt. Disc. Tolerance" := FALSE;
                CustLedgEntry."Accepted Payment Tolerance" := 0;
                CustLedgEntry."Amount to Apply" := 0;
                CustEntryEdit.RUN(CustLedgEntry);
              END;
            END;
          END;
        AccType::Vendor:
          BEGIN
            VendLedgEntry.RESET;
            IF Rec."Applies-to ID" <> '' THEN BEGIN
              VendLedgEntry.SETCURRENTKEY("Vendor No.","Applies-to ID",Open);
              VendLedgEntry.SETRANGE("Vendor No.",AccNo);
              VendLedgEntry.SETRANGE("Applies-to ID",Rec."Applies-to ID");
              VendLedgEntry.SETRANGE(Open,TRUE);
              IF VendLedgEntry.FIND('-') THEN BEGIN
                VendLedgEntry."Accepted Pmt. Disc. Tolerance" := FALSE;
                VendLedgEntry."Accepted Payment Tolerance" := 0;
                VendLedgEntry."Amount to Apply" := 0;
                VendEntrySetApplID.SetApplId(VendLedgEntry,TempVendLedgEntry,0,0,'');
            END;
            END ELSE IF Rec."Applies-to Doc. No." <> '' THEN BEGIN
              VendLedgEntry.SETCURRENTKEY("Document No.");
              VendLedgEntry.SETRANGE("Document No.",Rec."Applies-to Doc. No.");
              VendLedgEntry.SETRANGE("Document Type",Rec."Applies-to Doc. Type");
              VendLedgEntry.SETRANGE("Vendor No.",AccNo);
              VendLedgEntry.SETRANGE(Open,TRUE);
              IF VendLedgEntry.FIND('-') THEN BEGIN
                VendLedgEntry."Accepted Pmt. Disc. Tolerance" := FALSE;
                VendLedgEntry."Accepted Payment Tolerance" := 0;
                VendLedgEntry."Amount to Apply" := 0;
                VendEntryEdit.RUN(VendLedgEntry);
              END;
            END;
        END;
      END;
    END;

    PROCEDURE CheckFixedCurrency@12() : Boolean;
    VAR
      CurrExchRate@1000 : Record 330;
    BEGIN
      CurrExchRate.SETRANGE("Currency Code","Currency Code");
      CurrExchRate.SETRANGE("Starting Date",0D,"Posting Date");

      IF NOT CurrExchRate.FIND('+') THEN
        EXIT(FALSE);

      IF CurrExchRate."Relational Currency Code" = '' THEN
        EXIT(
          CurrExchRate."Fix Exchange Rate Amount" =
          CurrExchRate."Fix Exchange Rate Amount"::Both);

      IF CurrExchRate."Fix Exchange Rate Amount" <>
        CurrExchRate."Fix Exchange Rate Amount"::Both
      THEN
        EXIT(FALSE);

      CurrExchRate.SETRANGE("Currency Code",CurrExchRate."Relational Currency Code");
      IF CurrExchRate.FIND('+') THEN
        EXIT(
          CurrExchRate."Fix Exchange Rate Amount" =
          CurrExchRate."Fix Exchange Rate Amount"::Both);

      EXIT(FALSE);
    END;

    PROCEDURE CreateDim@13(Type1@1000 : Integer;No1@1001 : Code[20];Type2@1002 : Integer;No2@1003 : Code[20];Type3@1004 : Integer;No3@1005 : Code[20];Type4@1006 : Integer;No4@1007 : Code[20];Type5@1008 : Integer;No5@1009 : Code[20]);
    VAR
      TableID@1010 : ARRAY [10] OF Integer;
      No@1011 : ARRAY [10] OF Code[20];
    BEGIN
      TableID[1] := Type1;
      No[1] := No1;
      TableID[2] := Type2;
      No[2] := No2;
      TableID[3] := Type3;
      No[3] := No3;
      TableID[4] := Type4;
      No[4] := No4;
      TableID[5] := Type5;
      No[5] := No5;
      "Shortcut Dimension 1 Code" := '';
      "Shortcut Dimension 2 Code" := '';
      DimMgt.GetDefaultDim(
        TableID,No,"Source Code","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
      IF "Line No." <> 0 THEN
        DimMgt.UpdateJnlLineDefaultDim(
          DATABASE::"Gen. Journal Line","Journal Template Name",
          "Journal Batch Name","Line No.",0,
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
    END;

    PROCEDURE ValidateShortcutDimCode@14(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateDimValueCode(FieldNumber,ShortcutDimCode);
      TESTFIELD("Check Printed",FALSE);
      IF "Line No." <> 0 THEN BEGIN
        DimMgt.SaveJnlLineDim(
          DATABASE::"Gen. Journal Line","Journal Template Name",
          "Journal Batch Name","Line No.",0,FieldNumber,ShortcutDimCode);
        IF MODIFY THEN;
      END ELSE
        DimMgt.SaveTempDim(FieldNumber,ShortcutDimCode);
    END;

    PROCEDURE LookupShortcutDimCode@18(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.LookupDimValueCode(FieldNumber,ShortcutDimCode);
      TESTFIELD("Check Printed",FALSE);
      IF "Line No." <> 0 THEN BEGIN
        DimMgt.SaveJnlLineDim(
          DATABASE::"Gen. Journal Line","Journal Template Name",
          "Journal Batch Name","Line No.",0,FieldNumber,ShortcutDimCode);
        MODIFY;
      END ELSE
        DimMgt.SaveTempDim(FieldNumber,ShortcutDimCode);
    END;

    PROCEDURE ShowShortcutDimCode@15(VAR ShortcutDimCode@1000 : ARRAY [8] OF Code[20]);
    BEGIN
      IF "Line No." <> 0 THEN
        DimMgt.ShowJnlLineDim(
          DATABASE::"Gen. Journal Line","Journal Template Name",
          "Journal Batch Name","Line No.",0,ShortcutDimCode)
      ELSE
        DimMgt.ShowTempDim(ShortcutDimCode);
    END;

    PROCEDURE GetFAVATSetup@17();
    VAR
      LocalGlAcc@1000 : Record 15;
      FAPostingGr@1001 : Record 5606;
      FABalAcc@1002 : Boolean;
    BEGIN
      IF CurrFieldNo = 0 THEN
        EXIT;
      IF ("Account Type" <> "Account Type"::"Fixed Asset") AND
         ("Bal. Account Type" <> "Bal. Account Type"::"Fixed Asset")
      THEN
        EXIT;
      FABalAcc := ("Bal. Account Type" = "Bal. Account Type"::"Fixed Asset");
      IF NOT FABalAcc THEN BEGIN
        "Gen. Posting Type" := "Gen. Posting Type"::" ";
        "Gen. Bus. Posting Group" := '';
        "Gen. Prod. Posting Group" := '';
        "VAT Bus. Posting Group" := '';
        "VAT Prod. Posting Group" := '';
        "Tax Group Code" := '';
        VALIDATE("VAT Prod. Posting Group");
      END;
      IF FABalAcc THEN BEGIN
        "Bal. Gen. Posting Type" := "Bal. Gen. Posting Type"::" ";
        "Bal. Gen. Bus. Posting Group" := '';
        "Bal. Gen. Prod. Posting Group" := '';
        "Bal. VAT Bus. Posting Group" := '';
        "Bal. VAT Prod. Posting Group" := '';
        "Bal. Tax Group Code" := '';
        VALIDATE("Bal. VAT Prod. Posting Group");
      END;
      IF NOT GenJnlBatch.GET("Journal Template Name","Journal Batch Name") OR
        GenJnlBatch."Copy VAT Setup to Jnl. Lines"
      THEN BEGIN
        IF (("FA Posting Type" = "FA Posting Type"::"Acquisition Cost") OR
           ("FA Posting Type" = "FA Posting Type"::Disposal) OR
           ("FA Posting Type" = "FA Posting Type"::Maintenance)) AND
           ("Posting Group" <> '')
        THEN BEGIN
          IF FAPostingGr.GET("Posting Group") THEN BEGIN
            IF "FA Posting Type" = "FA Posting Type"::"Acquisition Cost" THEN BEGIN
              FAPostingGr.TESTFIELD("Acquisition Cost Account");
              LocalGlAcc.GET(FAPostingGr."Acquisition Cost Account");
            END;
            IF "FA Posting Type" = "FA Posting Type"::Disposal THEN BEGIN
              FAPostingGr.TESTFIELD("Acq. Cost Acc. on Disposal");
              LocalGlAcc.GET(FAPostingGr."Acq. Cost Acc. on Disposal");
            END;
            IF "FA Posting Type" = "FA Posting Type"::Maintenance THEN BEGIN
              FAPostingGr.TESTFIELD("Maintenance Expense Account");
              LocalGlAcc.GET(FAPostingGr."Maintenance Expense Account");
            END;
            LocalGlAcc.CheckGLAcc;
            IF NOT FABalAcc THEN BEGIN
              "Gen. Posting Type" := LocalGlAcc."Gen. Posting Type";
              "Gen. Bus. Posting Group" := LocalGlAcc."Gen. Bus. Posting Group";
              "Gen. Prod. Posting Group" := LocalGlAcc."Gen. Prod. Posting Group";
              "VAT Bus. Posting Group" := LocalGlAcc."VAT Bus. Posting Group";
              "VAT Prod. Posting Group" := LocalGlAcc."VAT Prod. Posting Group";
              "Tax Group Code" := LocalGlAcc."Tax Group Code";
              VALIDATE("VAT Prod. Posting Group");
            END ELSE BEGIN;
              "Bal. Gen. Posting Type" := LocalGlAcc."Gen. Posting Type";
              "Bal. Gen. Bus. Posting Group" := LocalGlAcc."Gen. Bus. Posting Group";
              "Bal. Gen. Prod. Posting Group" := LocalGlAcc."Gen. Prod. Posting Group";
              "Bal. VAT Bus. Posting Group" := LocalGlAcc."VAT Bus. Posting Group";
              "Bal. VAT Prod. Posting Group" := LocalGlAcc."VAT Prod. Posting Group";
              "Bal. Tax Group Code" := LocalGlAcc."Tax Group Code";
              VALIDATE("Bal. VAT Prod. Posting Group");
            END;
          END;
        END;
      END;
    END;

    PROCEDURE GetTemplate@16();
    BEGIN
      IF NOT TemplateFound THEN
        GenJnlTemplate.GET("Journal Template Name");
      TemplateFound := TRUE;
    END;

    LOCAL PROCEDURE UpdateSalesPurchLCY@19();
    BEGIN
      "Sales/Purch. (LCY)" := 0;
      IF (NOT "System-Created Entry") AND ("Document Type" IN ["Document Type"::Invoice,"Document Type"::"Credit Memo"]) THEN BEGIN
        IF ("Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor]) AND ("Bal. Account No." <> '') THEN
          "Sales/Purch. (LCY)" := "Amount (LCY)" + "Bal. VAT Amount (LCY)";
        IF ("Bal. Account Type" IN ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor]) AND ("Account No." <> '') THEN
          "Sales/Purch. (LCY)" := -("Amount (LCY)" - "VAT Amount (LCY)");
      END;
    END;

    PROCEDURE SetApplyToAmount@20();
    BEGIN
      IF "Account Type" = "Account Type"::Customer THEN BEGIN
        CustLedgEntry.SETCURRENTKEY("Document No.");
        CustLedgEntry.SETRANGE("Document No.",Rec."Applies-to Doc. No.");
        CustLedgEntry.SETRANGE("Customer No.","Account No.");
        CustLedgEntry.SETRANGE(Open,TRUE);
        IF CustLedgEntry.FIND('-') THEN
          IF CustLedgEntry."Amount to Apply" = 0 THEN  BEGIN
            CustLedgEntry.CALCFIELDS("Remaining Amount");
            CustLedgEntry."Amount to Apply" := CustLedgEntry."Remaining Amount";
            CODEUNIT.RUN(CODEUNIT::"Cust. Entry-Edit",CustLedgEntry);
          END;
      END ELSE IF "Account Type" = "Account Type"::Vendor THEN BEGIN
        VendLedgEntry.SETCURRENTKEY("Document No.");
        VendLedgEntry.SETRANGE("Document No.",Rec."Applies-to Doc. No.");
        VendLedgEntry.SETRANGE("Vendor No.","Account No.");
        VendLedgEntry.SETRANGE(Open,TRUE);
        IF VendLedgEntry.FIND('-') THEN
          IF VendLedgEntry."Amount to Apply" = 0 THEN  BEGIN
            VendLedgEntry.CALCFIELDS("Remaining Amount");
            VendLedgEntry."Amount to Apply" := VendLedgEntry."Remaining Amount";
            CODEUNIT.RUN(CODEUNIT::"Vend. Entry-Edit",VendLedgEntry);
          END;
      END;
    END;

    PROCEDURE ValidateApplyRequirements@21(TempGenJnlLine@1000 : TEMPORARY Record 81);
    VAR
      ExchAccGLJnlLine@1001 : Codeunit 366;
    BEGIN
      IF (TempGenJnlLine."Bal. Account Type" = TempGenJnlLine."Bal. Account Type"::Customer) OR
        (TempGenJnlLine."Bal. Account Type" = TempGenJnlLine."Bal. Account Type"::Vendor)
      THEN
        ExchAccGLJnlLine.RUN(TempGenJnlLine);

      IF TempGenJnlLine."Account Type" = TempGenJnlLine."Account Type"::Customer THEN BEGIN
        IF TempGenJnlLine."Applies-to ID" <> '' THEN BEGIN
          CustLedgEntry.SETCURRENTKEY("Customer No.","Applies-to ID",Open);
          CustLedgEntry.SETRANGE("Customer No.",TempGenJnlLine."Account No.");
          CustLedgEntry.SETRANGE("Applies-to ID",TempGenJnlLine."Applies-to ID");
          CustLedgEntry.SETRANGE(Open,TRUE);
          IF CustLedgEntry.FIND('-') THEN
            REPEAT
              IF (TempGenJnlLine."Posting Date" < CustLedgEntry."Posting Date") THEN
                ERROR(
                  Text015,TempGenJnlLine."Document Type",TempGenJnlLine."Document No.",
                  CustLedgEntry."Document Type",CustLedgEntry."Document No.");
            UNTIL CustLedgEntry.NEXT = 0;
        END ELSE IF TempGenJnlLine."Applies-to Doc. No." <> '' THEN BEGIN
          CustLedgEntry.SETCURRENTKEY("Document No.");
          CustLedgEntry.SETRANGE("Document No.",TempGenJnlLine."Applies-to Doc. No.");
          IF TempGenJnlLine."Applies-to Doc. Type" <> TempGenJnlLine."Applies-to Doc. Type"::" " THEN
            CustLedgEntry.SETRANGE("Document Type",TempGenJnlLine."Applies-to Doc. Type");
          CustLedgEntry.SETRANGE("Customer No.",TempGenJnlLine."Account No.");
          CustLedgEntry.SETRANGE(Open,TRUE);
          IF CustLedgEntry.FIND('-') THEN
            IF (TempGenJnlLine."Posting Date" < CustLedgEntry."Posting Date") THEN
              ERROR(
                Text015,TempGenJnlLine."Document Type",TempGenJnlLine."Document No.",
                CustLedgEntry."Document Type",CustLedgEntry."Document No.");
        END;
      END ELSE IF TempGenJnlLine."Account Type" = TempGenJnlLine."Account Type"::Vendor THEN BEGIN
        IF TempGenJnlLine."Applies-to ID" <> '' THEN BEGIN
          VendLedgEntry.SETCURRENTKEY("Vendor No.","Applies-to ID",Open);
          VendLedgEntry.SETRANGE("Vendor No.",TempGenJnlLine."Account No.");
          VendLedgEntry.SETRANGE("Applies-to ID",TempGenJnlLine."Applies-to ID");
          VendLedgEntry.SETRANGE(Open,TRUE);
            REPEAT
              IF (TempGenJnlLine."Posting Date" < VendLedgEntry."Posting Date") THEN
                ERROR(
                  Text015,TempGenJnlLine."Document Type",TempGenJnlLine."Document No.",
                  VendLedgEntry."Document Type",VendLedgEntry."Document No.");
            UNTIL VendLedgEntry.NEXT = 0;
          IF VendLedgEntry.FIND('-') THEN BEGIN
          END;
        END ELSE IF TempGenJnlLine."Applies-to Doc. No." <> '' THEN BEGIN
          VendLedgEntry.SETCURRENTKEY("Document No.");
          VendLedgEntry.SETRANGE("Document No.",TempGenJnlLine."Applies-to Doc. No.");
          IF TempGenJnlLine."Applies-to Doc. Type" <> TempGenJnlLine."Applies-to Doc. Type"::" " THEN
            VendLedgEntry.SETRANGE("Document Type",TempGenJnlLine."Applies-to Doc. Type");
          VendLedgEntry.SETRANGE("Vendor No.",TempGenJnlLine."Account No.");
          VendLedgEntry.SETRANGE(Open,TRUE);
          IF VendLedgEntry.FIND('-') THEN
            IF (TempGenJnlLine."Posting Date" < VendLedgEntry."Posting Date") THEN
              ERROR(
                Text015,TempGenJnlLine."Document Type",TempGenJnlLine."Document No.",
                VendLedgEntry."Document Type",VendLedgEntry."Document No.");
        END;
      END;
    END;

    LOCAL PROCEDURE UpdateCountryCodeAndVATRegNo@25(No@1000 : Code[20]);
    BEGIN
      IF No = '' THEN BEGIN
        "Country/Region Code" := '';
        "VAT Registration No." := '';
        EXIT;
      END;

      GLSetup.GET;
      CASE TRUE OF
        ("Account Type" = "Account Type"::Customer) OR ("Bal. Account Type" = "Bal. Account Type"::Customer):
          BEGIN
            Cust.GET(No);
            "Country/Region Code" := Cust."Country/Region Code";
            "VAT Registration No." := Cust."VAT Registration No.";
          END;
        ("Account Type" = "Account Type"::Vendor) OR ("Bal. Account Type" = "Bal. Account Type"::Vendor):
          BEGIN
            Vend.GET(No);
            "Country/Region Code" := Vend."Country/Region Code";
            "VAT Registration No." := Vend."VAT Registration No.";
          END;
      END;
    END;

    PROCEDURE JobTaskIsSet@28() : Boolean;
    BEGIN
      EXIT(("Job No." <> '') AND ("Job Task No." <> '') AND ("Account Type" = "Account Type"::"G/L Account"));
    END;

    PROCEDURE CreateTempJobJnlLine@27();
    VAR
      TmpJobJnlOverallCurrencyFactor@1001 : Decimal;
    BEGIN
      TESTFIELD("Posting Date");
      CLEAR(JobJnlLine);
      JobJnlLine.DontCheckStdCost;
      JobJnlLine.VALIDATE("Job No.","Job No.");
      JobJnlLine.VALIDATE("Job Task No.","Job Task No.");
      IF CurrFieldNo <> FIELDNO("Posting Date") THEN
        JobJnlLine.VALIDATE("Posting Date","Posting Date")
      ELSE
        JobJnlLine.VALIDATE("Posting Date",xRec."Posting Date");
      JobJnlLine.VALIDATE(Type,JobJnlLine.Type::"G/L Account");
      IF "Job Currency Code" <> '' THEN BEGIN
        IF "Posting Date" = 0D THEN
          CurrencyDate := WORKDATE
        ELSE
          CurrencyDate := "Posting Date";

        IF "Currency Code" = "Job Currency Code" THEN
          "Job Currency Factor" := "Currency Factor"
        ELSE
          "Job Currency Factor" := CurrExchRate.ExchangeRate(CurrencyDate,"Job Currency Code");
        JobJnlLine.SetCurrencyFactor("Job Currency Factor");
      END;
      JobJnlLine.VALIDATE("No.","Account No.");
      JobJnlLine.VALIDATE(Quantity,"Job Quantity");

      IF "Currency Factor" = 0 THEN BEGIN
        IF "Job Currency Factor" = 0 THEN
          TmpJobJnlOverallCurrencyFactor := 1
        ELSE
          TmpJobJnlOverallCurrencyFactor := "Job Currency Factor";
      END ELSE BEGIN
        IF "Job Currency Factor" = 0 THEN
          TmpJobJnlOverallCurrencyFactor := "Currency Factor"
        ELSE
          TmpJobJnlOverallCurrencyFactor := "Job Currency Factor" / "Currency Factor"
      END;

      IF "Job Quantity" <> 0 THEN
        JobJnlLine.VALIDATE("Unit Cost",((Amount - "VAT Amount") * TmpJobJnlOverallCurrencyFactor) / "Job Quantity");

      IF (xRec."Account No." = "Account No.") AND (xRec."Job Task No." = "Job Task No.") AND ("Job Unit Price" <> 0) THEN BEGIN
        JobJnlLine."Unit Price" := xRec."Job Unit Price";
        JobJnlLine."Line Amount" := xRec."Job Line Amount";
        JobJnlLine."Line Discount %" := xRec."Job Line Discount %";
        JobJnlLine."Line Discount Amount" := xRec."Job Line Discount Amount";
        JobJnlLine.VALIDATE("Unit Price");
      END;
    END;

    PROCEDURE UpdatePricesFromJobJnlLine@22();
    BEGIN
      "Job Unit Price" := JobJnlLine."Unit Price";
      "Job Total Price" := JobJnlLine."Total Price";
      "Job Line Amount" := JobJnlLine."Line Amount";
      "Job Line Discount Amount" := JobJnlLine."Line Discount Amount";
      "Job Unit Cost" := JobJnlLine."Unit Cost";
      "Job Total Cost" := JobJnlLine."Total Cost";
      "Job Line Discount %" := JobJnlLine."Line Discount %";

      "Job Unit Price (LCY)" := JobJnlLine."Unit Price (LCY)";
      "Job Total Price (LCY)" := JobJnlLine."Total Price (LCY)";
      "Job Line Amount (LCY)" := JobJnlLine."Line Amount (LCY)";
      "Job Line Disc. Amount (LCY)" := JobJnlLine."Line Discount Amount (LCY)";
      "Job Unit Cost (LCY)" := JobJnlLine."Unit Cost (LCY)";
      "Job Total Cost (LCY)" := JobJnlLine."Total Cost (LCY)";
    END;

    LOCAL PROCEDURE CheckNoCardTransactEntryExist@46(GenJnlLine@1002 : Record 81);
    VAR
      DOPaymentTransLogEntry@1000 : Record 829;
      DOPaymentTransLogMgt@1003 : Codeunit 829;
      DocumentType@1001 : Integer;
    BEGIN
      CASE GenJnlLine."Document Type" OF
        GenJnlLine."Document Type"::Payment:
          DocumentType := DOPaymentTransLogEntry."Document Type"::Payment;
        GenJnlLine."Document Type"::Refund:
          DocumentType := DOPaymentTransLogEntry."Document Type"::Refund;
      END;
      IF DOPaymentTransLogMgt.FindPostingNotFinishedEntry(DocumentType,GenJnlLine."Document No.",DOPaymentTransLogEntry) THEN
        ERROR(Text016,DOPaymentTransLogEntry."Transaction Type",GenJnlLine."Document Type",GenJnlLine."Document No.");
    END;

    PROCEDURE GetAppliesToDocDueDate@24() : Date;
    VAR
      CustLedgEntry@1000 : Record 21;
      VendLedgEntry@1001 : Record 25;
    BEGIN
      IF "Bal. Account Type" IN
        ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor]
      THEN BEGIN
        AccNo := "Bal. Account No.";
        AccType := "Bal. Account Type";
        CLEAR(CustLedgEntry);
        CLEAR(VendLedgEntry);
      END ELSE BEGIN
        AccNo := "Account No.";
        AccType := "Account Type";
        CLEAR(CustLedgEntry);
        CLEAR(VendLedgEntry);
      END;

      CASE AccType OF
        AccType::Customer:
          BEGIN
            CustLedgEntry.SETCURRENTKEY("Customer No.",Open,Positive,"Due Date");
            CustLedgEntry.SETRANGE("Customer No.",AccNo);
            CustLedgEntry.SETRANGE(Open,TRUE);
            IF "Applies-to Doc. No." <> '' THEN BEGIN
              CustLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
              CustLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
              IF NOT CustLedgEntry.FINDFIRST THEN BEGIN
                CustLedgEntry.SETRANGE("Document Type");
                CustLedgEntry.SETRANGE("Document No.");
              END;
            END ELSE
              IF "Applies-to ID" <> '' THEN BEGIN
                CustLedgEntry.SETRANGE("Applies-to ID","Applies-to ID");
                IF NOT CustLedgEntry.FINDFIRST THEN
                  CustLedgEntry.SETRANGE("Applies-to ID");
              END;
            EXIT(CustLedgEntry."Due Date");
          END;
        AccType::Vendor:
          BEGIN
            VendLedgEntry.SETCURRENTKEY("Vendor No.",Open,Positive,"Due Date");
            VendLedgEntry.SETRANGE("Vendor No.",AccNo);
            VendLedgEntry.SETRANGE(Open,TRUE);
            IF "Applies-to Doc. No." <> '' THEN BEGIN
              VendLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
              VendLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
              IF NOT VendLedgEntry.FINDFIRST THEN BEGIN
                VendLedgEntry.SETRANGE("Document Type");
                VendLedgEntry.SETRANGE("Document No.");
              END;
            END ELSE
              IF "Applies-to ID" <> '' THEN BEGIN
                VendLedgEntry.SETRANGE("Applies-to ID","Applies-to ID");
                IF NOT VendLedgEntry.FINDFIRST THEN
                  VendLedgEntry.SETRANGE("Applies-to ID");
              END;
            EXIT(VendLedgEntry."Due Date");
          END;
      END;
    END;

    LOCAL PROCEDURE GetCreditCard@23();
    VAR
      DOPaymentTransLogEntry@1000 : Record 829;
    BEGIN
      IF "Applies-to Doc. No." = xRec."Applies-to Doc. No." THEN
        EXIT;
      IF NOT (("Account Type" = "Account Type"::Customer) AND
              ("Bal. Account Type" = "Bal. Account Type"::"Bank Account")) THEN
        EXIT;

      "Credit Card No." := '';
      IF "Applies-to Doc. No." = '' THEN
        EXIT;

      IF "Document Type" <> "Document Type"::Refund THEN
        EXIT;

      DOPaymentTransLogEntry.SETRANGE("Customer No.","Account No.");
      DOPaymentTransLogEntry.SETRANGE("Transaction Type",DOPaymentTransLogEntry."Transaction Type"::Capture);
      DOPaymentTransLogEntry.SETRANGE("Document Type",DOPaymentTransLogEntry."Document Type"::Payment);
      DOPaymentTransLogEntry.SETRANGE("Document No.","Applies-to Doc. No.");

      IF DOPaymentTransLogEntry.FINDFIRST THEN
        "Credit Card No." := DOPaymentTransLogEntry."Credit Card No.";
    END;

    PROCEDURE GetDerogatorySetup@1120000();
    BEGIN
      "Derogatory Line" := FALSE;
      IF ("Account Type" = "Account Type"::"Fixed Asset") AND
         ("Account No." <> '') AND
         ("Depreciation Book Code" <> '')
      THEN BEGIN
        DerogDeprBook.SETRANGE("Derogatory Calculation","Depreciation Book Code");
        IF DerogDeprBook.FIND('-') THEN
          IF DerogFADeprBook.GET("Account No.",DerogDeprBook.Code) THEN
            "Derogatory Line" := TRUE;
      END;
    END;

    LOCAL PROCEDURE GetGenJnlBatch@8016600();
    BEGIN
      //ISA02.ST
      IF (GenJnlBatch."Journal Template Name" = "Journal Template Name") AND
         (GenJnlBatch.Name = "Journal Batch Name") THEN EXIT;

      IF ("Journal Template Name" = '') OR ("Journal Batch Name" = '') THEN
        CLEAR(GenJnlBatch);
      IF NOT GenJnlBatch.GET("Journal Template Name", "Journal Batch Name") THEN
        CLEAR(GenJnlBatch);
    END;

    PROCEDURE InitDescription@8016601() : Boolean;
    VAR
      lSourceName@8016600 : Text[50];
    BEGIN
      //ISA03.ST
      GetGenJnlBatch;
      IF GenJnlBatch."Default Line Description" = '' THEN
        EXIT(FALSE);

      CASE "Account Type" OF
      "Account Type"::"G/L Account":
        BEGIN
          IF GLAcc.GET("Account No.") THEN;
          lSourceName := GLAcc.Name;
        END;
      "Account Type"::Customer:
        BEGIN
          IF Cust.GET("Account No.") THEN;
          lSourceName := Cust.Name;
        END;
      "Account Type"::Vendor:
        BEGIN
          IF Vend.GET("Account No.") THEN;
          lSourceName := Vend.Name;
        END;
      "Account Type"::"Bank Account":
        BEGIN
          IF BankAcc.GET("Account No.") THEN;
          lSourceName := BankAcc.Name;
        END;
      "Account Type"::"Fixed Asset":
        BEGIN
          IF FA.GET("Account No.") THEN;
          lSourceName := FA.Description;
        END;
      "Account Type"::"IC Partner":
        BEGIN
          IF ICPartner.GET("Account No.") THEN;
          lSourceName := ICPartner.Name;
        END;
      END;

      Description := COPYSTR(STRSUBSTNO(GenJnlBatch."Default Line Description",
                                        "Account No.",
                                        lSourceName,
                                        "Posting Date",
                                        "Due Date",
                                        "Payment Method Code"),1,50);
      EXIT(TRUE);
    END;

    BEGIN
    {
      /** @r IMH08 @d 23/05/14 @a ISAT.ZW @v IMH6.01.P010 @s Projet PMU
          @c Ajouter champ 57013 chmap IMA Reference No. */
      /** @r IMH07 @d 05/12/12 @a ISAT.ZW @v IMH6.01.220 @s Projet Facturation Fusion
          @c Ajout champ 56010 Fusion Document No. */
      /** @r IMH06 @d 20/03/12 @a Isat.PC @v IMH6.01.153 @s gestion banque @h 3184
          @c Ajout champ 50050, Payment Check No. */
      /** @r IMH05 @d 25/02/12 @a ISAT.ST @v IMH6.01.146 @s Comptabilit‚  @c Suivi adresse de rŠglement */
      /** @r IMH04 @d 27/10/11 @a ISAT.EBA @v IMH6.01.011 @s Gestion du service
          @c Ajout champ 50016 "Service Header Voucher No." */
      /** @r IMH03 @d 21/09/11 @a ISAT.ZW @v IMH6.01.146 @s Gestion facturation
          @c Ajout champ 50010 Fusion NH GUID */
      /** @r IMH02 @d 14/03/11 @a ISAT.LLT @v IMH6.01.146 @s Gestion facturation
          @c Ajout champ 50010 Corporate Contact No.
          @c Ajout champ 50011 Corporate Region Code
          @c Ajout champ 50012 Service No.
          @c Ajout champ 50013 Service Header No.
          @c Ajout champ 50014 Intervention Line No.
          @c Ajout champ 50015 Service Order Type
          @c Ajout champ 50020 Transmission No.
          @c Ajout champ 50021 Transmission Generate Date */
      /** @r IMH01 @d 07/03/11 @a CAP.JC @v IMH6.01.152 @s Gestion Analytique
          @c Rajout du champs 50000, Dimension Entry No. pour connaitre l'‚criture analytique li‚e.
          @c Rajout du champs 50001, Distribution Date */
      /** @r ISA03 @d 22/07/09 @a ISAT.ST @v ISA6.00.00.05 @s Gestion description lignes */
      /** @r ISA02 @d 22/07/09 @a ISAT.ST @v ISA6.00.00.04 @s Suivi rŠglement
          @c Ajout code mode rŠglement */
      /** @r ISA01 @d 21/07/09 @a ISAT.ST @v ISA6.00.00.06 @s Lettrage bordereaux
          @c Ajout champ G/L Entry Applies-to ID pour lettrage des comptes g‚n‚raux dans les bordereaux */
    }
    END.
  }
}