OBJECT Table 99000771 Production BOM Header
{
  OBJECT-PROPERTIES
  {
    Date=14/06/11;
    Time=12:00:00;
    Version List=NAVW16.00.01,KITNA6.00;
  }
  PROPERTIES
  {
    DataCaptionFields=No.,Description;
    OnInsert=BEGIN
               IF "No." = '' THEN BEGIN
                 CASE Type OF
                   Type::Manufacturing:
                     BEGIN
                       MfgSetup.GET;
                       MfgSetup.TESTFIELD("Production BOM Nos.");
                       NoSeriesMgt.InitSeries(MfgSetup."Production BOM Nos.",xRec."No. Series",0D,"No.","No. Series");
                     END;
                   Type::Kitting:
                     BEGIN
                       InvtSetup.GET;
                       InvtSetup.TESTFIELD("Kit BOM Nos.");
                       NoSeriesMgt.InitSeries(InvtSetup."Kit BOM Nos.",xRec."No. Series",0D,"No.","No. Series");
                     END;
                 END;
               END;

               "Creation Date" := TODAY;
             END;

    OnModify=BEGIN
               "Last Date Modified" := TODAY;
             END;

    OnDelete=BEGIN
               Item.SETCURRENTKEY("Production BOM No.");
               Item.SETRANGE("Production BOM No.","No.");
               IF Item.FIND('-') THEN
                 ERROR(Text000);

               ProdBOMLine.SETRANGE("Production BOM No.","No.");
               ProdBOMLine.DELETEALL(TRUE);

               ProdBOMVersion.SETRANGE("Production BOM No.","No.");
               ProdBOMVersion.DELETEALL;

               MfgComment.SETRANGE("Table Name",MfgComment."Table Name"::"Production BOM Header");
               MfgComment.SETRANGE("No.","No.");
               MfgComment.DELETEALL;
             END;

    CaptionML=[ENU=Production BOM Header;
               FRA=En-tˆte nomenclature];
    LookupFormID=Form99000787;
    DrillDownFormID=Form99000787;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;CaptionML=[ENU=No.;
                                                              FRA=Nø] }
    { 10  ;   ;Description         ;Text30        ;OnValidate=BEGIN
                                                                "Search Name" := Description;
                                                              END;

                                                   CaptionML=[ENU=Description;
                                                              FRA=D‚signation] }
    { 11  ;   ;Description 2       ;Text30        ;CaptionML=[ENU=Description 2;
                                                              FRA=D‚signation 2] }
    { 12  ;   ;Search Name         ;Code30        ;CaptionML=[ENU=Search Name;
                                                              FRA=Nom de recherche] }
    { 21  ;   ;Unit of Measure Code;Code10        ;TableRelation="Unit of Measure";
                                                   OnValidate=BEGIN
                                                                IF Status = Status::Certified THEN
                                                                  FIELDERROR(Status);
                                                              END;

                                                   CaptionML=[ENU=Unit of Measure Code;
                                                              FRA=Code unit‚] }
    { 22  ;   ;Low-Level Code      ;Integer       ;CaptionML=[ENU=Low-Level Code;
                                                              FRA=Code plus bas niveau];
                                                   Editable=No }
    { 25  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Manufacturing Comment Line" WHERE (Table Name=CONST(Production BOM Header),
                                                                                                         No.=FIELD(No.)));
                                                   CaptionML=[ENU=Comment;
                                                              FRA=Commentaires];
                                                   Editable=No }
    { 40  ;   ;Creation Date       ;Date          ;CaptionML=[ENU=Creation Date;
                                                              FRA=Date cr‚ation];
                                                   Editable=No }
    { 43  ;   ;Last Date Modified  ;Date          ;CaptionML=[ENU=Last Date Modified;
                                                              FRA=Date dern. modification];
                                                   Editable=No }
    { 45  ;   ;Status              ;Option        ;OnValidate=VAR
                                                                PlanningAssignment@1000 : Record 99000850;
                                                                MfgSetup@1004 : Record 99000765;
                                                                ProdBOMCheck@1001 : Codeunit 99000769;
                                                                BNManagement@1002 : Codeunit 8000;
                                                                OldStatus@1003 : Integer;
                                                              BEGIN
                                                                OldStatus := xRec.Status;
                                                                IF (Status <> xRec.Status) AND (Status = Status::Certified) THEN BEGIN
                                                                  TestUnitsOfMeasure;
                                                                  IF RECORDLEVELLOCKING THEN BEGIN
                                                                    MfgSetup.LOCKTABLE;
                                                                    MfgSetup.GET;
                                                                  END;
                                                                  ProdBOMCheck.ProdBOMLineCheck("No.",'');
                                                                  "Low-Level Code" := 0;
                                                                  ProdBOMCheck.RUN(Rec);
                                                                  PlanningAssignment.NewBOM("No.");
                                                                END;
                                                                IF Status = Status::Closed THEN BEGIN
                                                                  IF CONFIRM(
                                                                       Text001,FALSE)
                                                                  THEN BEGIN
                                                                    ProdBOMVersion.SETRANGE("Production BOM No.","No.");
                                                                    IF ProdBOMVersion.FIND('-') THEN
                                                                      REPEAT
                                                                        ProdBOMVersion.Status := ProdBOMVersion.Status::Closed;
                                                                        ProdBOMVersion.MODIFY;
                                                                        BNManagement.SendProdBOMVerToBN(ProdBOMVersion);
                                                                      UNTIL ProdBOMVersion.NEXT = 0;
                                                                  END ELSE
                                                                    Status := xRec.Status;
                                                                END;

                                                                IF (Status <> OldStatus) AND (Status IN [Status::Certified,Status::Closed]) THEN
                                                                  BNManagement.SendProdBOMToBN(Rec);

                                                                MODIFY(TRUE);
                                                                COMMIT;
                                                              END;

                                                   CaptionML=[ENU=Status;
                                                              FRA=Statut];
                                                   OptionCaptionML=[ENU=New,Certified,Under Development,Closed;
                                                                    FRA=Cr‚ation en cours,Valid‚e,Modification en cours,Cl“tur‚e];
                                                   OptionString=New,Certified,Under Development,Closed }
    { 50  ;   ;Version Nos.        ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=Version Nos.;
                                                              FRA=Nø version] }
    { 51  ;   ;No. Series          ;Code10        ;TableRelation="No. Series";
                                                   CaptionML=[ENU=No. Series;
                                                              FRA=Souches de nø];
                                                   Editable=No }
    { 25000;  ;Type                ;Option        ;CaptionML=[ENU=Type;
                                                              FRA=Type];
                                                   OptionCaptionML=[ENU=Manufacturing,Kitting;
                                                                    FRA=Production,Montage];
                                                   OptionString=Manufacturing,Kitting;
                                                   Editable=No }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Search Name                              }
    {    ;Type                                     }
    {    ;Description                             ;KeyGroups=SearchCol }
    {    ;Status                                  ;KeyGroups=SearchCol }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=This Production BOM is being used on Items.;FRA=Cette nomenclature est utilis‚e dans des articles.';
      Text001@1001 : TextConst 'ENU=All versions attached to the BOM will be closed. Close BOM?;FRA=Toutes les versions rattach‚es … la nomenclature vont ˆtre cl“tur‚es. Souhaitez-vous cl“turer la nomenclature ?';
      MfgSetup@1002 : Record 99000765;
      InvtSetup@1462000 : Record 313;
      Item@1003 : Record 27;
      ProdBOMHeader@1004 : Record 99000771;
      ProdBOMVersion@1005 : Record 99000779;
      ProdBOMLine@1006 : Record 99000772;
      MfgComment@1007 : Record 99000770;
      NoSeriesMgt@1008 : Codeunit 396;

    PROCEDURE AssistEdit@2(OldProdBOMHeader@1000 : Record 99000771) : Boolean;
    BEGIN
      WITH ProdBOMHeader DO BEGIN
        ProdBOMHeader := Rec;
        MfgSetup.GET;
        MfgSetup.TESTFIELD("Production BOM Nos.");
        IF NoSeriesMgt.SelectSeries(MfgSetup."Production BOM Nos.",OldProdBOMHeader."No. Series","No. Series") THEN BEGIN
          NoSeriesMgt.SetSeries("No.");
          Rec := ProdBOMHeader;
          EXIT(TRUE);
        END;
      END;
    END;

    LOCAL PROCEDURE TestUnitsOfMeasure@1020000();
    VAR
      Item1@1020000 : Record 27;
      Item2@1020001 : Record 27;
    BEGIN
      Item1.SETCURRENTKEY("Production BOM No.");
      Item1.SETRANGE("Production BOM No.","No.");
      Item1.SETFILTER("Base Unit of Measure",'<>%1',"Unit of Measure Code");
      Item2.COPY(Item1);
      Item1.SETRANGE("Kit BOM No.","No.");
      Item2.SETRANGE("Kit Disassembly BOM No.","No.");
      IF Item1.FINDFIRST THEN
        Item1.TESTFIELD("Base Unit of Measure","Unit of Measure Code");
      IF Item2.FINDFIRST THEN
        Item2.TESTFIELD("Base Unit of Measure","Unit of Measure Code");
    END;

    BEGIN
    END.
  }
}